
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001d10  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b580  08001fb0  08001fb0  00021fb0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  00050228  2**0
                  CONTENTS
  4 .rodata       00003c08  0801d530  0801d530  0003d530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08021138  08021138  00041138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08021140  08021140  00041140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021144  08021144  00041144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08021148  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070dc  20000228  08021370  00050228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007304  08021370  00057304  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00050256  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ac5d  00000000  00000000  00050299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007804  00000000  00000000  0008aef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a28  00000000  00000000  00092700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000219f  00000000  00000000  00095128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000124a8  00000000  00000000  000972c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041872  00000000  00000000  000a976f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9680  00000000  00000000  000eafe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c35c  00000000  00000000  00294664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  002a09c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <is_telnet_initialised>:
	#endif
}

/** Returns 1 if the telnet link has been initialised and has not been subsequently closed.
  */
bool is_telnet_initialised(void) {
       0:	b480      	push	{r7}
       2:	af00      	add	r7, sp, #0
	return telnet_initialised;
       4:	4b03      	ldr	r3, [pc, #12]	; (14 <is_telnet_initialised+0x14>)
       6:	781b      	ldrb	r3, [r3, #0]
}
       8:	4618      	mov	r0, r3
       a:	46bd      	mov	sp, r7
       c:	f85d 7b04 	ldr.w	r7, [sp], #4
      10:	4770      	bx	lr
      12:	bf00      	nop
      14:	20000244 	.word	0x20000244

00000018 <init_ldc_comms>:
  return ret_err;
}

/* Initialise Ethernet comms with LDC501 */
void init_ldc_comms(void)
{
      18:	b580      	push	{r7, lr}
      1a:	af00      	add	r7, sp, #0
	ldc_tx("\r\n"); //return character
      1c:	4808      	ldr	r0, [pc, #32]	; (40 <init_ldc_comms+0x28>)
      1e:	f000 f819 	bl	54 <ldc_tx>
	ldc_tx("uloc1\r\n"); //unlock comms
      22:	4808      	ldr	r0, [pc, #32]	; (44 <init_ldc_comms+0x2c>)
      24:	f000 f816 	bl	54 <ldc_tx>
	ldc_tx("*idn?\r\n"); //request ID
      28:	4807      	ldr	r0, [pc, #28]	; (48 <init_ldc_comms+0x30>)
      2a:	f000 f813 	bl	54 <ldc_tx>
	//will then receive message: 220 Welcome DBG server!
	ldc_tx("TEON1\r\n"); //Turn TEC on
      2e:	4807      	ldr	r0, [pc, #28]	; (4c <init_ldc_comms+0x34>)
      30:	f000 f810 	bl	54 <ldc_tx>
	ldc_tx("SILD159.90\r\n"); //Set laser current to 159.9mA
      34:	4806      	ldr	r0, [pc, #24]	; (50 <init_ldc_comms+0x38>)
      36:	f000 f80d 	bl	54 <ldc_tx>
}
      3a:	bf00      	nop
      3c:	bd80      	pop	{r7, pc}
      3e:	bf00      	nop
      40:	0801d530 	.word	0x0801d530
      44:	0801d534 	.word	0x0801d534
      48:	0801d53c 	.word	0x0801d53c
      4c:	0801d544 	.word	0x0801d544
      50:	0801d54c 	.word	0x0801d54c

00000054 <ldc_tx>:

/* Send a string to the LDC501 over telnet */
//void ldc_tx(const char *str, size_t lengthofstring)
void ldc_tx(const char str[])
{
      54:	b590      	push	{r4, r7, lr}
      56:	b085      	sub	sp, #20
      58:	af00      	add	r7, sp, #0
      5a:	6078      	str	r0, [r7, #4]
//	len = sprintf (buf, "SILD%.2f\n", laservalue);
	uint16_t len = strlen(str);
      5c:	6878      	ldr	r0, [r7, #4]
      5e:	f001 fe0b 	bl	1c78 <__strlen_veneer>
      62:	4603      	mov	r3, r0
      64:	81fb      	strh	r3, [r7, #14]
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
      66:	4b12      	ldr	r3, [pc, #72]	; (b0 <ldc_tx+0x5c>)
      68:	681c      	ldr	r4, [r3, #0]
      6a:	89fb      	ldrh	r3, [r7, #14]
      6c:	f44f 72c1 	mov.w	r2, #386	; 0x182
      70:	4619      	mov	r1, r3
      72:	2036      	movs	r0, #54	; 0x36
      74:	f001 fe38 	bl	1ce8 <__pbuf_alloc_veneer>
      78:	4603      	mov	r3, r0
      7a:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)str, len); // copy data to pbuf
      7c:	4b0c      	ldr	r3, [pc, #48]	; (b0 <ldc_tx+0x5c>)
      7e:	681b      	ldr	r3, [r3, #0]
      80:	689b      	ldr	r3, [r3, #8]
      82:	89fa      	ldrh	r2, [r7, #14]
      84:	6879      	ldr	r1, [r7, #4]
      86:	4618      	mov	r0, r3
      88:	f001 fdca 	bl	1c20 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
      8c:	4b09      	ldr	r3, [pc, #36]	; (b4 <ldc_tx+0x60>)
      8e:	681b      	ldr	r3, [r3, #0]
      90:	4a07      	ldr	r2, [pc, #28]	; (b0 <ldc_tx+0x5c>)
      92:	6812      	ldr	r2, [r2, #0]
      94:	4611      	mov	r1, r2
      96:	4618      	mov	r0, r3
      98:	f000 f9dc 	bl	454 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
      9c:	4b04      	ldr	r3, [pc, #16]	; (b0 <ldc_tx+0x5c>)
      9e:	681b      	ldr	r3, [r3, #0]
      a0:	689b      	ldr	r3, [r3, #8]
      a2:	4618      	mov	r0, r3
      a4:	f001 fde0 	bl	1c68 <__pbuf_free_veneer>
}
      a8:	bf00      	nop
      aa:	3714      	adds	r7, #20
      ac:	46bd      	mov	sp, r7
      ae:	bd90      	pop	{r4, r7, pc}
      b0:	2000024c 	.word	0x2000024c
      b4:	20000250 	.word	0x20000250

000000b8 <one_off>:

void one_off (void) {
      b8:	b590      	push	{r4, r7, lr}
      ba:	b0a1      	sub	sp, #132	; 0x84
      bc:	af00      	add	r7, sp, #0
	char buf[100];
	uint8_t counter = 0;
      be:	2300      	movs	r3, #0
      c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending telnet_client Message %d\n\0", counter);
      c4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
      c8:	f107 0310 	add.w	r3, r7, #16
      cc:	494a      	ldr	r1, [pc, #296]	; (1f8 <one_off+0x140>)
      ce:	4618      	mov	r0, r3
      d0:	f001 fdaa 	bl	1c28 <__sprintf_veneer>
      d4:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf */
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
      d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
      d8:	b29b      	uxth	r3, r3
      da:	4a48      	ldr	r2, [pc, #288]	; (1fc <one_off+0x144>)
      dc:	6814      	ldr	r4, [r2, #0]
      de:	f44f 72c1 	mov.w	r2, #386	; 0x182
      e2:	4619      	mov	r1, r3
      e4:	2036      	movs	r0, #54	; 0x36
      e6:	f001 fdff 	bl	1ce8 <__pbuf_alloc_veneer>
      ea:	4603      	mov	r3, r0
      ec:	60a3      	str	r3, [r4, #8]
	/* copy data to pbuf */
	pbuf_take(tcTx->p, (char*)buf, len);
      ee:	4b43      	ldr	r3, [pc, #268]	; (1fc <one_off+0x144>)
      f0:	681b      	ldr	r3, [r3, #0]
      f2:	689b      	ldr	r3, [r3, #8]
      f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
      f6:	b292      	uxth	r2, r2
      f8:	f107 0110 	add.w	r1, r7, #16
      fc:	4618      	mov	r0, r3
      fe:	f001 fd8f 	bl	1c20 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx);
     102:	4b3f      	ldr	r3, [pc, #252]	; (200 <_Min_Heap_Size>)
     104:	681b      	ldr	r3, [r3, #0]
     106:	4a3d      	ldr	r2, [pc, #244]	; (1fc <one_off+0x144>)
     108:	6812      	ldr	r2, [r2, #0]
     10a:	4611      	mov	r1, r2
     10c:	4618      	mov	r0, r3
     10e:	f000 f9a1 	bl	454 <telnet_client_send>
	pbuf_free(tcTx->p);
     112:	4b3a      	ldr	r3, [pc, #232]	; (1fc <one_off+0x144>)
     114:	681b      	ldr	r3, [r3, #0]
     116:	689b      	ldr	r3, [r3, #8]
     118:	4618      	mov	r0, r3
     11a:	f001 fda5 	bl	1c68 <__pbuf_free_veneer>

	unsigned char tmp1[10] = {83, 116, 117, 97, 114, 116, 10}; //Stuart NEWLINE
     11e:	4a39      	ldr	r2, [pc, #228]	; (204 <_Min_Heap_Size+0x4>)
     120:	1d3b      	adds	r3, r7, #4
     122:	e892 0003 	ldmia.w	r2, {r0, r1}
     126:	e883 0003 	stmia.w	r3, {r0, r1}
     12a:	2300      	movs	r3, #0
     12c:	81bb      	strh	r3, [r7, #12]
	len = sprintf (buf, "%s", tmp1);
     12e:	1d3a      	adds	r2, r7, #4
     130:	f107 0310 	add.w	r3, r7, #16
     134:	4934      	ldr	r1, [pc, #208]	; (208 <_Min_Heap_Size+0x8>)
     136:	4618      	mov	r0, r3
     138:	f001 fd76 	bl	1c28 <__sprintf_veneer>
     13c:	67b8      	str	r0, [r7, #120]	; 0x78
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     140:	b29b      	uxth	r3, r3
     142:	4a2e      	ldr	r2, [pc, #184]	; (1fc <one_off+0x144>)
     144:	6814      	ldr	r4, [r2, #0]
     146:	f44f 72c1 	mov.w	r2, #386	; 0x182
     14a:	4619      	mov	r1, r3
     14c:	2036      	movs	r0, #54	; 0x36
     14e:	f001 fdcb 	bl	1ce8 <__pbuf_alloc_veneer>
     152:	4603      	mov	r3, r0
     154:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)buf, len); // copy data to pbuf
     156:	4b29      	ldr	r3, [pc, #164]	; (1fc <one_off+0x144>)
     158:	681b      	ldr	r3, [r3, #0]
     15a:	689b      	ldr	r3, [r3, #8]
     15c:	6fba      	ldr	r2, [r7, #120]	; 0x78
     15e:	b292      	uxth	r2, r2
     160:	f107 0110 	add.w	r1, r7, #16
     164:	4618      	mov	r0, r3
     166:	f001 fd5b 	bl	1c20 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     16a:	4b25      	ldr	r3, [pc, #148]	; (200 <_Min_Heap_Size>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	4a23      	ldr	r2, [pc, #140]	; (1fc <one_off+0x144>)
     170:	6812      	ldr	r2, [r2, #0]
     172:	4611      	mov	r1, r2
     174:	4618      	mov	r0, r3
     176:	f000 f96d 	bl	454 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
     17a:	4b20      	ldr	r3, [pc, #128]	; (1fc <one_off+0x144>)
     17c:	681b      	ldr	r3, [r3, #0]
     17e:	689b      	ldr	r3, [r3, #8]
     180:	4618      	mov	r0, r3
     182:	f001 fd71 	bl	1c68 <__pbuf_free_veneer>

	float laservalue = 160.56789;
     186:	4b21      	ldr	r3, [pc, #132]	; (20c <_Min_Heap_Size+0xc>)
     188:	677b      	str	r3, [r7, #116]	; 0x74
	len = sprintf (buf, "SILD%.2f\n", laservalue);
     18a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
     18e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     192:	f107 0010 	add.w	r0, r7, #16
     196:	ec53 2b17 	vmov	r2, r3, d7
     19a:	491d      	ldr	r1, [pc, #116]	; (210 <_Min_Heap_Size+0x10>)
     19c:	f001 fd44 	bl	1c28 <__sprintf_veneer>
     1a0:	67b8      	str	r0, [r7, #120]	; 0x78
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     1a4:	b29b      	uxth	r3, r3
     1a6:	4a15      	ldr	r2, [pc, #84]	; (1fc <one_off+0x144>)
     1a8:	6814      	ldr	r4, [r2, #0]
     1aa:	f44f 72c1 	mov.w	r2, #386	; 0x182
     1ae:	4619      	mov	r1, r3
     1b0:	2036      	movs	r0, #54	; 0x36
     1b2:	f001 fd99 	bl	1ce8 <__pbuf_alloc_veneer>
     1b6:	4603      	mov	r3, r0
     1b8:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)buf, len); // copy data to pbuf
     1ba:	4b10      	ldr	r3, [pc, #64]	; (1fc <one_off+0x144>)
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	689b      	ldr	r3, [r3, #8]
     1c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
     1c2:	b292      	uxth	r2, r2
     1c4:	f107 0110 	add.w	r1, r7, #16
     1c8:	4618      	mov	r0, r3
     1ca:	f001 fd29 	bl	1c20 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     1ce:	4b0c      	ldr	r3, [pc, #48]	; (200 <_Min_Heap_Size>)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	4a0a      	ldr	r2, [pc, #40]	; (1fc <one_off+0x144>)
     1d4:	6812      	ldr	r2, [r2, #0]
     1d6:	4611      	mov	r1, r2
     1d8:	4618      	mov	r0, r3
     1da:	f000 f93b 	bl	454 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
     1de:	4b07      	ldr	r3, [pc, #28]	; (1fc <one_off+0x144>)
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	689b      	ldr	r3, [r3, #8]
     1e4:	4618      	mov	r0, r3
     1e6:	f001 fd3f 	bl	1c68 <__pbuf_free_veneer>

//	const char string = "Happy Wednesday";
//	ldc_tx(&string, sizeof(string));

	ldc_tx("Happy Wednesday\r\n"); //works and is processed as newline
     1ea:	480a      	ldr	r0, [pc, #40]	; (214 <_Min_Heap_Size+0x14>)
     1ec:	f7ff ff32 	bl	54 <ldc_tx>
}
     1f0:	bf00      	nop
     1f2:	3784      	adds	r7, #132	; 0x84
     1f4:	46bd      	mov	sp, r7
     1f6:	bd90      	pop	{r4, r7, pc}
     1f8:	0801d55c 	.word	0x0801d55c
     1fc:	2000024c 	.word	0x2000024c
     200:	20000250 	.word	0x20000250
     204:	0801d5a4 	.word	0x0801d5a4
     208:	0801d580 	.word	0x0801d580
     20c:	43209161 	.word	0x43209161
     210:	0801d584 	.word	0x0801d584
     214:	0801d590 	.word	0x0801d590

00000218 <telnet_client_connected>:
{
     218:	b580      	push	{r7, lr}
     21a:	b086      	sub	sp, #24
     21c:	af00      	add	r7, sp, #0
     21e:	60f8      	str	r0, [r7, #12]
     220:	60b9      	str	r1, [r7, #8]
     222:	4613      	mov	r3, r2
     224:	71fb      	strb	r3, [r7, #7]
	printf("[Telnet Client] telnet_client_connected function called.\n\r");
     226:	481f      	ldr	r0, [pc, #124]	; (2a4 <telnet_client_connected+0x8c>)
     228:	f001 fd56 	bl	1cd8 <__printf_veneer>
  tc = (struct telnet_client_struct *)mem_malloc(sizeof(struct telnet_client_struct));
     22c:	200c      	movs	r0, #12
     22e:	f001 fd47 	bl	1cc0 <__mem_malloc_veneer>
     232:	6138      	str	r0, [r7, #16]
  if (tc != NULL)
     234:	693b      	ldr	r3, [r7, #16]
     236:	2b00      	cmp	r3, #0
     238:	d025      	beq.n	286 <telnet_client_connected+0x6e>
    tc->state = TC_CONNECTED;
     23a:	693b      	ldr	r3, [r7, #16]
     23c:	2201      	movs	r2, #1
     23e:	701a      	strb	r2, [r3, #0]
    tc->pcb = newpcb;
     240:	693b      	ldr	r3, [r7, #16]
     242:	68ba      	ldr	r2, [r7, #8]
     244:	605a      	str	r2, [r3, #4]
    tc->retries = 0;
     246:	693b      	ldr	r3, [r7, #16]
     248:	2200      	movs	r2, #0
     24a:	705a      	strb	r2, [r3, #1]
    tc->p = NULL;
     24c:	693b      	ldr	r3, [r7, #16]
     24e:	2200      	movs	r2, #0
     250:	609a      	str	r2, [r3, #8]
    tcp_arg(newpcb, tc);
     252:	6939      	ldr	r1, [r7, #16]
     254:	68b8      	ldr	r0, [r7, #8]
     256:	f001 fd2b 	bl	1cb0 <__tcp_arg_veneer>
    tcp_recv(newpcb, telnet_client_recv);
     25a:	4913      	ldr	r1, [pc, #76]	; (2a8 <telnet_client_connected+0x90>)
     25c:	68b8      	ldr	r0, [r7, #8]
     25e:	f001 fd13 	bl	1c88 <__tcp_recv_veneer>
    tcp_poll(newpcb, telnet_client_poll, 0);
     262:	2200      	movs	r2, #0
     264:	4911      	ldr	r1, [pc, #68]	; (2ac <telnet_client_connected+0x94>)
     266:	68b8      	ldr	r0, [r7, #8]
     268:	f001 fcea 	bl	1c40 <__tcp_poll_veneer>
    tcp_sent(newpcb, telnet_client_sent);
     26c:	4910      	ldr	r1, [pc, #64]	; (2b0 <telnet_client_connected+0x98>)
     26e:	68b8      	ldr	r0, [r7, #8]
     270:	f001 fd4a 	bl	1d08 <__tcp_sent_veneer>
		printf("[Telnet Client] Successful connection.\n\r");
     274:	480f      	ldr	r0, [pc, #60]	; (2b4 <telnet_client_connected+0x9c>)
     276:	f001 fd2f 	bl	1cd8 <__printf_veneer>
	telnet_initialised = 1;
     27a:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <telnet_client_connected+0xa0>)
     27c:	2201      	movs	r2, #1
     27e:	701a      	strb	r2, [r3, #0]
    ret_err = ERR_OK;
     280:	2300      	movs	r3, #0
     282:	75fb      	strb	r3, [r7, #23]
     284:	e008      	b.n	298 <telnet_client_connected+0x80>
    telnet_client_connection_close(newpcb, tc);
     286:	6939      	ldr	r1, [r7, #16]
     288:	68b8      	ldr	r0, [r7, #8]
     28a:	f000 f937 	bl	4fc <telnet_client_connection_close>
		printf("[Telnet Client] Connection closed due to memory error.\n\r");
     28e:	480b      	ldr	r0, [pc, #44]	; (2bc <telnet_client_connected+0xa4>)
     290:	f001 fd22 	bl	1cd8 <__printf_veneer>
    ret_err = ERR_MEM;
     294:	23ff      	movs	r3, #255	; 0xff
     296:	75fb      	strb	r3, [r7, #23]
  return ret_err;
     298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     29c:	4618      	mov	r0, r3
     29e:	3718      	adds	r7, #24
     2a0:	46bd      	mov	sp, r7
     2a2:	bd80      	pop	{r7, pc}
     2a4:	0801d5b0 	.word	0x0801d5b0
     2a8:	000002c1 	.word	0x000002c1
     2ac:	000003c9 	.word	0x000003c9
     2b0:	00000411 	.word	0x00000411
     2b4:	0801d5ec 	.word	0x0801d5ec
     2b8:	20000244 	.word	0x20000244
     2bc:	0801d618 	.word	0x0801d618

000002c0 <telnet_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t telnet_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     2c0:	b580      	push	{r7, lr}
     2c2:	b086      	sub	sp, #24
     2c4:	af00      	add	r7, sp, #0
     2c6:	60f8      	str	r0, [r7, #12]
     2c8:	60b9      	str	r1, [r7, #8]
     2ca:	607a      	str	r2, [r7, #4]
     2cc:	70fb      	strb	r3, [r7, #3]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Received data from server.\n\r");
     2ce:	4839      	ldr	r0, [pc, #228]	; (3b4 <telnet_client_recv+0xf4>)
     2d0:	f001 fd02 	bl	1cd8 <__printf_veneer>
  #endif
  struct telnet_client_struct *tc;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
     2d4:	68fb      	ldr	r3, [r7, #12]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d106      	bne.n	2e8 <telnet_client_recv+0x28>
     2da:	4b37      	ldr	r3, [pc, #220]	; (3b8 <telnet_client_recv+0xf8>)
     2dc:	f240 1245 	movw	r2, #325	; 0x145
     2e0:	4936      	ldr	r1, [pc, #216]	; (3bc <telnet_client_recv+0xfc>)
     2e2:	4837      	ldr	r0, [pc, #220]	; (3c0 <telnet_client_recv+0x100>)
     2e4:	f001 fcf8 	bl	1cd8 <__printf_veneer>

  tc = (struct telnet_client_struct *)arg;
     2e8:	68fb      	ldr	r3, [r7, #12]
     2ea:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d10d      	bne.n	30e <telnet_client_recv+0x4e>
  {
    /* remote host closed connection */
    tc->state = TC_CLOSING;
     2f2:	693b      	ldr	r3, [r7, #16]
     2f4:	2203      	movs	r2, #3
     2f6:	701a      	strb	r2, [r3, #0]
    if(tc->p == NULL)
     2f8:	693b      	ldr	r3, [r7, #16]
     2fa:	689b      	ldr	r3, [r3, #8]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d103      	bne.n	308 <telnet_client_recv+0x48>
    {
       /* we're done sending, close connection */
       telnet_client_connection_close(tpcb, tc);
     300:	6939      	ldr	r1, [r7, #16]
     302:	68b8      	ldr	r0, [r7, #8]
     304:	f000 f8fa 	bl	4fc <telnet_client_connection_close>
//      tcp_sent(tpcb, telnet_client_sent);

      /* send remaining data*/
//      telnet_client_send(tpcb, tc);
    }
    ret_err = ERR_OK;
     308:	2300      	movs	r3, #0
     30a:	75fb      	strb	r3, [r7, #23]
     30c:	e04b      	b.n	3a6 <telnet_client_recv+0xe6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
     30e:	f997 3003 	ldrsb.w	r3, [r7, #3]
     312:	2b00      	cmp	r3, #0
     314:	d00b      	beq.n	32e <telnet_client_recv+0x6e>
  {
    /* free received pbuf*/
    if (p != NULL)
     316:	687b      	ldr	r3, [r7, #4]
     318:	2b00      	cmp	r3, #0
     31a:	d005      	beq.n	328 <telnet_client_recv+0x68>
    {
      tc->p = NULL;
     31c:	693b      	ldr	r3, [r7, #16]
     31e:	2200      	movs	r2, #0
     320:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
     322:	6878      	ldr	r0, [r7, #4]
     324:	f001 fca0 	bl	1c68 <__pbuf_free_veneer>
    }
    ret_err = err;
     328:	78fb      	ldrb	r3, [r7, #3]
     32a:	75fb      	strb	r3, [r7, #23]
     32c:	e03b      	b.n	3a6 <telnet_client_recv+0xe6>
  }
  else if(tc->state == TC_CONNECTED)
     32e:	693b      	ldr	r3, [r7, #16]
     330:	781b      	ldrb	r3, [r3, #0]
     332:	2b01      	cmp	r3, #1
     334:	d116      	bne.n	364 <telnet_client_recv+0xa4>
  {
   /* store reference to incoming pbuf (chain) */
    tc->p = p;
     336:	693b      	ldr	r3, [r7, #16]
     338:	687a      	ldr	r2, [r7, #4]
     33a:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, telnet_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	891b      	ldrh	r3, [r3, #8]
     340:	4619      	mov	r1, r3
     342:	68b8      	ldr	r0, [r7, #8]
     344:	f001 fc88 	bl	1c58 <__tcp_recved_veneer>
    #ifdef TELNET_DEBUG
      printf("[Telnet Client] Acknowledging received data.\n\r");
     348:	481e      	ldr	r0, [pc, #120]	; (3c4 <telnet_client_recv+0x104>)
     34a:	f001 fcc5 	bl	1cd8 <__printf_veneer>
    #endif

    /* handle the received data */
//    example_client_handle(tpcb, tc);
    telnet_client_handle(tpcb, tc, p);
     34e:	687a      	ldr	r2, [r7, #4]
     350:	6939      	ldr	r1, [r7, #16]
     352:	68b8      	ldr	r0, [r7, #8]
     354:	f000 f93e 	bl	5d4 <telnet_client_handle>

    pbuf_free(p);
     358:	6878      	ldr	r0, [r7, #4]
     35a:	f001 fc85 	bl	1c68 <__pbuf_free_veneer>

    ret_err = ERR_OK;
     35e:	2300      	movs	r3, #0
     360:	75fb      	strb	r3, [r7, #23]
     362:	e020      	b.n	3a6 <telnet_client_recv+0xe6>
  }
  else if(tc->state == TC_CLOSING)
     364:	693b      	ldr	r3, [r7, #16]
     366:	781b      	ldrb	r3, [r3, #0]
     368:	2b03      	cmp	r3, #3
     36a:	d10e      	bne.n	38a <telnet_client_recv+0xca>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	891b      	ldrh	r3, [r3, #8]
     370:	4619      	mov	r1, r3
     372:	68b8      	ldr	r0, [r7, #8]
     374:	f001 fc70 	bl	1c58 <__tcp_recved_veneer>
    tc->p = NULL;
     378:	693b      	ldr	r3, [r7, #16]
     37a:	2200      	movs	r2, #0
     37c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     37e:	6878      	ldr	r0, [r7, #4]
     380:	f001 fc72 	bl	1c68 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     384:	2300      	movs	r3, #0
     386:	75fb      	strb	r3, [r7, #23]
     388:	e00d      	b.n	3a6 <telnet_client_recv+0xe6>
  }
  else
  {
    /* unknown tc->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	891b      	ldrh	r3, [r3, #8]
     38e:	4619      	mov	r1, r3
     390:	68b8      	ldr	r0, [r7, #8]
     392:	f001 fc61 	bl	1c58 <__tcp_recved_veneer>
    tc->p = NULL;
     396:	693b      	ldr	r3, [r7, #16]
     398:	2200      	movs	r2, #0
     39a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     39c:	6878      	ldr	r0, [r7, #4]
     39e:	f001 fc63 	bl	1c68 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     3a2:	2300      	movs	r3, #0
     3a4:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3718      	adds	r7, #24
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}
     3b2:	bf00      	nop
     3b4:	0801d654 	.word	0x0801d654
     3b8:	0801d684 	.word	0x0801d684
     3bc:	0801d69c 	.word	0x0801d69c
     3c0:	0801d6a8 	.word	0x0801d6a8
     3c4:	0801d6d0 	.word	0x0801d6d0

000003c8 <telnet_client_poll>:


static err_t telnet_client_poll(void *arg, struct tcp_pcb *tpcb)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b084      	sub	sp, #16
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct telnet_client_struct *tc;

  tc = (struct telnet_client_struct *)arg;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	60bb      	str	r3, [r7, #8]
  if (tc != NULL)
     3d6:	68bb      	ldr	r3, [r7, #8]
     3d8:	2b00      	cmp	r3, #0
     3da:	d00e      	beq.n	3fa <telnet_client_poll+0x32>
  {
    if (tc->p != NULL)
     3dc:	68bb      	ldr	r3, [r7, #8]
     3de:	689b      	ldr	r3, [r3, #8]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d107      	bne.n	3f4 <telnet_client_poll+0x2c>
//      telnet_client_send(tpcb, tc);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(tc->state == TC_CLOSING)
     3e4:	68bb      	ldr	r3, [r7, #8]
     3e6:	781b      	ldrb	r3, [r3, #0]
     3e8:	2b03      	cmp	r3, #3
     3ea:	d103      	bne.n	3f4 <telnet_client_poll+0x2c>
      {
        /*  close tcp connection */
        telnet_client_connection_close(tpcb, tc);
     3ec:	68b9      	ldr	r1, [r7, #8]
     3ee:	6838      	ldr	r0, [r7, #0]
     3f0:	f000 f884 	bl	4fc <telnet_client_connection_close>
      }
    }
    ret_err = ERR_OK;
     3f4:	2300      	movs	r3, #0
     3f6:	73fb      	strb	r3, [r7, #15]
     3f8:	e004      	b.n	404 <_Min_Stack_Size+0x4>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
     3fa:	6838      	ldr	r0, [r7, #0]
     3fc:	f001 fc78 	bl	1cf0 <__tcp_abort_veneer>
    ret_err = ERR_ABRT;
     400:	23f3      	movs	r3, #243	; 0xf3
     402:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
     404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
     408:	4618      	mov	r0, r3
     40a:	3710      	adds	r7, #16
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}

00000410 <telnet_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t telnet_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
     410:	b580      	push	{r7, lr}
     412:	b086      	sub	sp, #24
     414:	af00      	add	r7, sp, #0
     416:	60f8      	str	r0, [r7, #12]
     418:	60b9      	str	r1, [r7, #8]
     41a:	4613      	mov	r3, r2
     41c:	80fb      	strh	r3, [r7, #6]
#ifdef TELNET_DEBUG
  printf("[Telnet Client] Server has acknowledged data sent by client.\n\r");
     41e:	480c      	ldr	r0, [pc, #48]	; (450 <telnet_client_sent+0x40>)
     420:	f001 fc5a 	bl	1cd8 <__printf_veneer>
#endif
  struct telnet_client_struct *tc;

  LWIP_UNUSED_ARG(len);

  tc = (struct telnet_client_struct *)arg;
     424:	68fb      	ldr	r3, [r7, #12]
     426:	617b      	str	r3, [r7, #20]
  tc->retries = 0;
     428:	697b      	ldr	r3, [r7, #20]
     42a:	2200      	movs	r2, #0
     42c:	705a      	strb	r2, [r3, #1]

  if(tc->p != NULL)
     42e:	697b      	ldr	r3, [r7, #20]
     430:	689b      	ldr	r3, [r3, #8]
     432:	2b00      	cmp	r3, #0
     434:	d107      	bne.n	446 <telnet_client_sent+0x36>
//    telnet_client_send(tpcb, tc);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(tc->state == TC_CLOSING)
     436:	697b      	ldr	r3, [r7, #20]
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b03      	cmp	r3, #3
     43c:	d103      	bne.n	446 <telnet_client_sent+0x36>
      telnet_client_connection_close(tpcb, tc);
     43e:	6979      	ldr	r1, [r7, #20]
     440:	68b8      	ldr	r0, [r7, #8]
     442:	f000 f85b 	bl	4fc <telnet_client_connection_close>
  }
  return ERR_OK;
     446:	2300      	movs	r3, #0
}
     448:	4618      	mov	r0, r3
     44a:	3718      	adds	r7, #24
     44c:	46bd      	mov	sp, r7
     44e:	bd80      	pop	{r7, pc}
     450:	0801d700 	.word	0x0801d700

00000454 <telnet_client_send>:


/** A function to send the data to the server
  */
static void telnet_client_send(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     454:	b580      	push	{r7, lr}
     456:	b086      	sub	sp, #24
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Sending data to server.\n\r");
     45e:	4826      	ldr	r0, [pc, #152]	; (4f8 <telnet_client_send+0xa4>)
     460:	f001 fc3a 	bl	1cd8 <__printf_veneer>
  #endif
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
     464:	2300      	movs	r3, #0
     466:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
     468:	e031      	b.n	4ce <telnet_client_send+0x7a>
         (tc->p != NULL) &&
         (tc->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from tc structure */
    ptr = tc->p;
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	689b      	ldr	r3, [r3, #8]
     46e:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
     470:	693b      	ldr	r3, [r7, #16]
     472:	6859      	ldr	r1, [r3, #4]
     474:	693b      	ldr	r3, [r7, #16]
     476:	895a      	ldrh	r2, [r3, #10]
     478:	2301      	movs	r3, #1
     47a:	6878      	ldr	r0, [r7, #4]
     47c:	f001 fc14 	bl	1ca8 <__tcp_write_veneer>
     480:	4603      	mov	r3, r0
     482:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
     484:	f997 3017 	ldrsb.w	r3, [r7, #23]
     488:	2b00      	cmp	r3, #0
     48a:	d118      	bne.n	4be <telnet_client_send+0x6a>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	895b      	ldrh	r3, [r3, #10]
     490:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      tc->p = ptr->next;
     492:	693b      	ldr	r3, [r7, #16]
     494:	681a      	ldr	r2, [r3, #0]
     496:	683b      	ldr	r3, [r7, #0]
     498:	609a      	str	r2, [r3, #8]

      if(tc->p != NULL)
     49a:	683b      	ldr	r3, [r7, #0]
     49c:	689b      	ldr	r3, [r3, #8]
     49e:	2b00      	cmp	r3, #0
     4a0:	d004      	beq.n	4ac <telnet_client_send+0x58>
      {
        /* increment reference count for tc->p */
        pbuf_ref(tc->p);
     4a2:	683b      	ldr	r3, [r7, #0]
     4a4:	689b      	ldr	r3, [r3, #8]
     4a6:	4618      	mov	r0, r3
     4a8:	f001 fc1a 	bl	1ce0 <__pbuf_ref_veneer>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
     4ac:	6938      	ldr	r0, [r7, #16]
     4ae:	f001 fbdb 	bl	1c68 <__pbuf_free_veneer>
     4b2:	4603      	mov	r3, r0
     4b4:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
     4b6:	7b7b      	ldrb	r3, [r7, #13]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d0f7      	beq.n	4ac <telnet_client_send+0x58>
     4bc:	e007      	b.n	4ce <telnet_client_send+0x7a>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
     4be:	f997 3017 	ldrsb.w	r3, [r7, #23]
     4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
     4c6:	d102      	bne.n	4ce <telnet_client_send+0x7a>
   {
      /* we are low on memory, try later / harder, defer to poll */
     tc->p = ptr;
     4c8:	683b      	ldr	r3, [r7, #0]
     4ca:	693a      	ldr	r2, [r7, #16]
     4cc:	609a      	str	r2, [r3, #8]
         (tc->p != NULL) &&
     4ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
     4d2:	2b00      	cmp	r3, #0
     4d4:	d10b      	bne.n	4ee <telnet_client_send+0x9a>
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
     4da:	2b00      	cmp	r3, #0
     4dc:	d007      	beq.n	4ee <telnet_client_send+0x9a>
         (tc->p->len <= tcp_sndbuf(tpcb)))
     4de:	683b      	ldr	r3, [r7, #0]
     4e0:	689b      	ldr	r3, [r3, #8]
     4e2:	895a      	ldrh	r2, [r3, #10]
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (tc->p != NULL) &&
     4ea:	429a      	cmp	r2, r3
     4ec:	d9bd      	bls.n	46a <telnet_client_send+0x16>
   else
   {
     /* other problem ?? */
   }
  }
}
     4ee:	bf00      	nop
     4f0:	3718      	adds	r7, #24
     4f2:	46bd      	mov	sp, r7
     4f4:	bd80      	pop	{r7, pc}
     4f6:	bf00      	nop
     4f8:	0801d740 	.word	0x0801d740

000004fc <telnet_client_connection_close>:


static void telnet_client_connection_close(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b082      	sub	sp, #8
     500:	af00      	add	r7, sp, #0
     502:	6078      	str	r0, [r7, #4]
     504:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Closing connection.\n\r");
     506:	4814      	ldr	r0, [pc, #80]	; (558 <telnet_client_connection_close+0x5c>)
     508:	f001 fbe6 	bl	1cd8 <__printf_veneer>
  #endif
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
     50c:	2100      	movs	r1, #0
     50e:	6878      	ldr	r0, [r7, #4]
     510:	f001 fbce 	bl	1cb0 <__tcp_arg_veneer>
  tcp_sent(tpcb, NULL);
     514:	2100      	movs	r1, #0
     516:	6878      	ldr	r0, [r7, #4]
     518:	f001 fbf6 	bl	1d08 <__tcp_sent_veneer>
  tcp_recv(tpcb, NULL);
     51c:	2100      	movs	r1, #0
     51e:	6878      	ldr	r0, [r7, #4]
     520:	f001 fbb2 	bl	1c88 <__tcp_recv_veneer>
  tcp_err(tpcb, NULL);
     524:	2100      	movs	r1, #0
     526:	6878      	ldr	r0, [r7, #4]
     528:	f001 fbea 	bl	1d00 <__tcp_err_veneer>
  tcp_poll(tpcb, NULL, 0);
     52c:	2200      	movs	r2, #0
     52e:	2100      	movs	r1, #0
     530:	6878      	ldr	r0, [r7, #4]
     532:	f001 fb85 	bl	1c40 <__tcp_poll_veneer>

  /* delete tc structure */
  if (tc != NULL)
     536:	683b      	ldr	r3, [r7, #0]
     538:	2b00      	cmp	r3, #0
     53a:	d002      	beq.n	542 <telnet_client_connection_close+0x46>
  {
    mem_free(tc);
     53c:	6838      	ldr	r0, [r7, #0]
     53e:	f001 fbaf 	bl	1ca0 <__mem_free_veneer>
  }

  /* close tcp connection */
  tcp_close(tpcb);
     542:	6878      	ldr	r0, [r7, #4]
     544:	f001 fbd8 	bl	1cf8 <__tcp_close_veneer>

  telnet_initialised = 0;
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <telnet_client_connection_close+0x60>)
     54a:	2200      	movs	r2, #0
     54c:	701a      	strb	r2, [r3, #0]
}
     54e:	bf00      	nop
     550:	3708      	adds	r7, #8
     552:	46bd      	mov	sp, r7
     554:	bd80      	pop	{r7, pc}
     556:	bf00      	nop
     558:	0801d76c 	.word	0x0801d76c
     55c:	20000244 	.word	0x20000244

00000560 <example_client_handle>:

/* Handle the incoming TCP Data */

static void example_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     560:	b580      	push	{r7, lr}
     562:	b086      	sub	sp, #24
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
	//function has been called as telnet_client_handle(tpcb, tc);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
     56a:	4816      	ldr	r0, [pc, #88]	; (5c4 <example_client_handle+0x64>)
     56c:	f001 fbb4 	bl	1cd8 <__printf_veneer>
  #endif
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     570:	687b      	ldr	r3, [r7, #4]
     572:	685b      	ldr	r3, [r3, #4]
     574:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
     576:	687b      	ldr	r3, [r7, #4]
     578:	8b1b      	ldrh	r3, [r3, #24]
     57a:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     57c:	f107 030c 	add.w	r3, r7, #12
     580:	4618      	mov	r0, r3
     582:	f001 fba5 	bl	1cd0 <__ip4addr_ntoa_veneer>
     586:	6138      	str	r0, [r7, #16]

	tcTx->state = tc->state;
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <example_client_handle+0x68>)
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	683a      	ldr	r2, [r7, #0]
     58e:	7812      	ldrb	r2, [r2, #0]
     590:	701a      	strb	r2, [r3, #0]
	tcTx->pcb = tc->pcb;
     592:	4b0d      	ldr	r3, [pc, #52]	; (5c8 <example_client_handle+0x68>)
     594:	681b      	ldr	r3, [r3, #0]
     596:	683a      	ldr	r2, [r7, #0]
     598:	6852      	ldr	r2, [r2, #4]
     59a:	605a      	str	r2, [r3, #4]
	tcTx->p = tc->p;
     59c:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <example_client_handle+0x68>)
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	683a      	ldr	r2, [r7, #0]
     5a2:	6892      	ldr	r2, [r2, #8]
     5a4:	609a      	str	r2, [r3, #8]

	tcTx = tc;
     5a6:	4a08      	ldr	r2, [pc, #32]	; (5c8 <example_client_handle+0x68>)
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     5ac:	4a07      	ldr	r2, [pc, #28]	; (5cc <example_client_handle+0x6c>)
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	6013      	str	r3, [r2, #0]

	counter++;
     5b2:	4b07      	ldr	r3, [pc, #28]	; (5d0 <example_client_handle+0x70>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	3301      	adds	r3, #1
     5b8:	4a05      	ldr	r2, [pc, #20]	; (5d0 <example_client_handle+0x70>)
     5ba:	6013      	str	r3, [r2, #0]

}
     5bc:	bf00      	nop
     5be:	3718      	adds	r7, #24
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}
     5c4:	0801d794 	.word	0x0801d794
     5c8:	2000024c 	.word	0x2000024c
     5cc:	20000250 	.word	0x20000250
     5d0:	20000248 	.word	0x20000248

000005d4 <telnet_client_handle>:

/* Stuart's function to handle the incoming TCP Data */

static void telnet_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc, struct pbuf *p)
{
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	b08a      	sub	sp, #40	; 0x28
     5da:	af00      	add	r7, sp, #0
     5dc:	60f8      	str	r0, [r7, #12]
     5de:	60b9      	str	r1, [r7, #8]
     5e0:	607a      	str	r2, [r7, #4]
     5e2:	466b      	mov	r3, sp
     5e4:	469a      	mov	sl, r3
	//function has been called as telnet_client_handle(tpcb, tc, p);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
     5e6:	4841      	ldr	r0, [pc, #260]	; (6ec <telnet_client_handle+0x118>)
     5e8:	f001 fb76 	bl	1cd8 <__printf_veneer>
  #endif
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     5ec:	68fb      	ldr	r3, [r7, #12]
     5ee:	685b      	ldr	r3, [r3, #4]
     5f0:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
     5f2:	68fb      	ldr	r3, [r7, #12]
     5f4:	8b1b      	ldrh	r3, [r3, #24]
     5f6:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     5f8:	f107 0310 	add.w	r3, r7, #16
     5fc:	4618      	mov	r0, r3
     5fe:	f001 fb67 	bl	1cd0 <__ip4addr_ntoa_veneer>
     602:	6238      	str	r0, [r7, #32]

	tcTx->state = tc->state;
     604:	4b3a      	ldr	r3, [pc, #232]	; (6f0 <telnet_client_handle+0x11c>)
     606:	681b      	ldr	r3, [r3, #0]
     608:	68ba      	ldr	r2, [r7, #8]
     60a:	7812      	ldrb	r2, [r2, #0]
     60c:	701a      	strb	r2, [r3, #0]
	tcTx->pcb = tc->pcb;
     60e:	4b38      	ldr	r3, [pc, #224]	; (6f0 <telnet_client_handle+0x11c>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	68ba      	ldr	r2, [r7, #8]
     614:	6852      	ldr	r2, [r2, #4]
     616:	605a      	str	r2, [r3, #4]
	tcTx->p = tc->p;
     618:	4b35      	ldr	r3, [pc, #212]	; (6f0 <telnet_client_handle+0x11c>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	68ba      	ldr	r2, [r7, #8]
     61e:	6892      	ldr	r2, [r2, #8]
     620:	609a      	str	r2, [r3, #8]

	tcTx = tc;
     622:	4a33      	ldr	r2, [pc, #204]	; (6f0 <telnet_client_handle+0x11c>)
     624:	68bb      	ldr	r3, [r7, #8]
     626:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     628:	4a32      	ldr	r2, [pc, #200]	; (6f4 <telnet_client_handle+0x120>)
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	6013      	str	r3, [r2, #0]

	if (p -> len != p -> tot_len) {//spans more that one buffer and I haven't allowed for this yet
     62e:	687b      	ldr	r3, [r7, #4]
     630:	895a      	ldrh	r2, [r3, #10]
     632:	687b      	ldr	r3, [r7, #4]
     634:	891b      	ldrh	r3, [r3, #8]
     636:	429a      	cmp	r2, r3
     638:	d002      	beq.n	640 <telnet_client_handle+0x6c>
#ifdef TELNET_DEBUG
  printf("[Telnet Client] ERROR - Received data spans more than one pbuf.\n\r");
     63a:	482f      	ldr	r0, [pc, #188]	; (6f8 <telnet_client_handle+0x124>)
     63c:	f001 fb4c 	bl	1cd8 <__printf_veneer>
#endif
	}

	/* Copy payload into a string */
	uint16_t len = p -> len; //length of the payload
     640:	687b      	ldr	r3, [r7, #4]
     642:	895b      	ldrh	r3, [r3, #10]
     644:	83fb      	strh	r3, [r7, #30]
	char str[len+1]; //holds the payload, with capacity for terminating character
     646:	8bfb      	ldrh	r3, [r7, #30]
     648:	1c5e      	adds	r6, r3, #1
     64a:	1e73      	subs	r3, r6, #1
     64c:	61bb      	str	r3, [r7, #24]
     64e:	4632      	mov	r2, r6
     650:	2300      	movs	r3, #0
     652:	4690      	mov	r8, r2
     654:	4699      	mov	r9, r3
     656:	f04f 0200 	mov.w	r2, #0
     65a:	f04f 0300 	mov.w	r3, #0
     65e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
     662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
     666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
     66a:	4632      	mov	r2, r6
     66c:	2300      	movs	r3, #0
     66e:	4614      	mov	r4, r2
     670:	461d      	mov	r5, r3
     672:	f04f 0200 	mov.w	r2, #0
     676:	f04f 0300 	mov.w	r3, #0
     67a:	00eb      	lsls	r3, r5, #3
     67c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     680:	00e2      	lsls	r2, r4, #3
     682:	4633      	mov	r3, r6
     684:	3307      	adds	r3, #7
     686:	08db      	lsrs	r3, r3, #3
     688:	00db      	lsls	r3, r3, #3
     68a:	ebad 0d03 	sub.w	sp, sp, r3
     68e:	466b      	mov	r3, sp
     690:	3300      	adds	r3, #0
     692:	617b      	str	r3, [r7, #20]
	memcpy(str, p -> payload, p -> len); //copy the payload across
     694:	687b      	ldr	r3, [r7, #4]
     696:	6859      	ldr	r1, [r3, #4]
     698:	687b      	ldr	r3, [r7, #4]
     69a:	895b      	ldrh	r3, [r3, #10]
     69c:	461a      	mov	r2, r3
     69e:	6978      	ldr	r0, [r7, #20]
     6a0:	f001 faee 	bl	1c80 <__memcpy_veneer>
	str[len] = '\0'; //assigns null character to terminate string
     6a4:	8bfb      	ldrh	r3, [r7, #30]
     6a6:	697a      	ldr	r2, [r7, #20]
     6a8:	2100      	movs	r1, #0
     6aa:	54d1      	strb	r1, [r2, r3]

    printf("[Telnet Client] Message: %s\n\r",str);
     6ac:	6979      	ldr	r1, [r7, #20]
     6ae:	4813      	ldr	r0, [pc, #76]	; (6fc <telnet_client_handle+0x128>)
     6b0:	f001 fb12 	bl	1cd8 <__printf_veneer>
    printf("String length: %u\n\r",sizeof(str));
     6b4:	4633      	mov	r3, r6
     6b6:	4619      	mov	r1, r3
     6b8:	4811      	ldr	r0, [pc, #68]	; (700 <telnet_client_handle+0x12c>)
     6ba:	f001 fb0d 	bl	1cd8 <__printf_veneer>
    printf("p -> len: %u\n\r",p -> len);
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	895b      	ldrh	r3, [r3, #10]
     6c2:	4619      	mov	r1, r3
     6c4:	480f      	ldr	r0, [pc, #60]	; (704 <telnet_client_handle+0x130>)
     6c6:	f001 fb07 	bl	1cd8 <__printf_veneer>
    printf("p -> tot_len: %u\n\r",p -> tot_len);
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	891b      	ldrh	r3, [r3, #8]
     6ce:	4619      	mov	r1, r3
     6d0:	480d      	ldr	r0, [pc, #52]	; (708 <telnet_client_handle+0x134>)
     6d2:	f001 fb01 	bl	1cd8 <__printf_veneer>

	counter++;
     6d6:	4b0d      	ldr	r3, [pc, #52]	; (70c <telnet_client_handle+0x138>)
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	3301      	adds	r3, #1
     6dc:	4a0b      	ldr	r2, [pc, #44]	; (70c <telnet_client_handle+0x138>)
     6de:	6013      	str	r3, [r2, #0]
     6e0:	46d5      	mov	sp, sl

}
     6e2:	bf00      	nop
     6e4:	3728      	adds	r7, #40	; 0x28
     6e6:	46bd      	mov	sp, r7
     6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6ec:	0801d794 	.word	0x0801d794
     6f0:	2000024c 	.word	0x2000024c
     6f4:	20000250 	.word	0x20000250
     6f8:	0801d7c0 	.word	0x0801d7c0
     6fc:	0801d804 	.word	0x0801d804
     700:	0801d824 	.word	0x0801d824
     704:	0801d838 	.word	0x0801d838
     708:	0801d848 	.word	0x0801d848
     70c:	20000248 	.word	0x20000248

00000710 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     710:	b580      	push	{r7, lr}
     712:	b08a      	sub	sp, #40	; 0x28
     714:	af00      	add	r7, sp, #0
     716:	60f8      	str	r0, [r7, #12]
     718:	60b9      	str	r1, [r7, #8]
     71a:	607a      	str	r2, [r7, #4]
     71c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     71e:	2300      	movs	r3, #0
     720:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     722:	68fb      	ldr	r3, [r7, #12]
     724:	021a      	lsls	r2, r3, #8
     726:	68bb      	ldr	r3, [r7, #8]
     728:	00db      	lsls	r3, r3, #3
     72a:	4313      	orrs	r3, r2
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	4313      	orrs	r3, r2
     730:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     732:	2200      	movs	r2, #0
     734:	f44f 7180 	mov.w	r1, #256	; 0x100
     738:	4830      	ldr	r0, [pc, #192]	; (7fc <synth_writereg+0xec>)
     73a:	f001 fabd 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     73e:	2200      	movs	r2, #0
     740:	f44f 6100 	mov.w	r1, #2048	; 0x800
     744:	482d      	ldr	r0, [pc, #180]	; (7fc <synth_writereg+0xec>)
     746:	f001 fab7 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     74a:	2300      	movs	r3, #0
     74c:	623b      	str	r3, [r7, #32]
     74e:	e036      	b.n	7be <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     750:	2220      	movs	r2, #32
     752:	6a3b      	ldr	r3, [r7, #32]
     754:	1ad3      	subs	r3, r2, r3
     756:	3b01      	subs	r3, #1
     758:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     75a:	2201      	movs	r2, #1
     75c:	697b      	ldr	r3, [r7, #20]
     75e:	fa02 f303 	lsl.w	r3, r2, r3
     762:	461a      	mov	r2, r3
     764:	69fb      	ldr	r3, [r7, #28]
     766:	4013      	ands	r3, r2
     768:	2b00      	cmp	r3, #0
     76a:	bf14      	ite	ne
     76c:	2301      	movne	r3, #1
     76e:	2300      	moveq	r3, #0
     770:	b2db      	uxtb	r3, r3
     772:	461a      	mov	r2, r3
     774:	f44f 7100 	mov.w	r1, #512	; 0x200
     778:	4820      	ldr	r0, [pc, #128]	; (7fc <synth_writereg+0xec>)
     77a:	f001 fa9d 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     77e:	2201      	movs	r2, #1
     780:	f44f 7180 	mov.w	r1, #256	; 0x100
     784:	481d      	ldr	r0, [pc, #116]	; (7fc <synth_writereg+0xec>)
     786:	f001 fa97 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     78a:	2200      	movs	r2, #0
     78c:	f44f 7180 	mov.w	r1, #256	; 0x100
     790:	481a      	ldr	r0, [pc, #104]	; (7fc <synth_writereg+0xec>)
     792:	f001 fa91 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     796:	f44f 6180 	mov.w	r1, #1024	; 0x400
     79a:	4818      	ldr	r0, [pc, #96]	; (7fc <synth_writereg+0xec>)
     79c:	f001 fa58 	bl	1c50 <__HAL_GPIO_ReadPin_veneer>
     7a0:	4603      	mov	r3, r0
     7a2:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     7a4:	2220      	movs	r2, #32
     7a6:	6a3b      	ldr	r3, [r7, #32]
     7a8:	1ad3      	subs	r3, r2, r3
     7aa:	3b01      	subs	r3, #1
     7ac:	fa01 f303 	lsl.w	r3, r1, r3
     7b0:	461a      	mov	r2, r3
		read_data = read_data
     7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7b4:	4313      	orrs	r3, r2
     7b6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     7b8:	6a3b      	ldr	r3, [r7, #32]
     7ba:	3301      	adds	r3, #1
     7bc:	623b      	str	r3, [r7, #32]
     7be:	2220      	movs	r2, #32
     7c0:	6a3b      	ldr	r3, [r7, #32]
     7c2:	4293      	cmp	r3, r2
     7c4:	d3c4      	bcc.n	750 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     7c6:	2201      	movs	r2, #1
     7c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7cc:	480b      	ldr	r0, [pc, #44]	; (7fc <synth_writereg+0xec>)
     7ce:	f001 fa73 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     7d2:	78fb      	ldrb	r3, [r7, #3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d00c      	beq.n	7f2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     7d8:	68b8      	ldr	r0, [r7, #8]
     7da:	f000 f813 	bl	804 <synth_readreg>
     7de:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     7e0:	69ba      	ldr	r2, [r7, #24]
     7e2:	68fb      	ldr	r3, [r7, #12]
     7e4:	429a      	cmp	r2, r3
     7e6:	d004      	beq.n	7f2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     7e8:	4805      	ldr	r0, [pc, #20]	; (800 <synth_writereg+0xf0>)
     7ea:	f001 fa21 	bl	1c30 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     7ee:	f001 fa13 	bl	1c18 <__Error_Handler_veneer>
		}
	}

	return read_data;
     7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     7f4:	4618      	mov	r0, r3
     7f6:	3728      	adds	r7, #40	; 0x28
     7f8:	46bd      	mov	sp, r7
     7fa:	bd80      	pop	{r7, pc}
     7fc:	58020800 	.word	0x58020800
     800:	0801db4c 	.word	0x0801db4c

00000804 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     804:	b580      	push	{r7, lr}
     806:	b084      	sub	sp, #16
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     80c:	2300      	movs	r3, #0
     80e:	2200      	movs	r2, #0
     810:	2100      	movs	r1, #0
     812:	6878      	ldr	r0, [r7, #4]
     814:	f7ff ff7c 	bl	710 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     818:	2300      	movs	r3, #0
     81a:	2200      	movs	r2, #0
     81c:	2100      	movs	r1, #0
     81e:	6878      	ldr	r0, [r7, #4]
     820:	f7ff ff76 	bl	710 <synth_writereg>
     824:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     826:	68fb      	ldr	r3, [r7, #12]
     828:	0a1b      	lsrs	r3, r3, #8

}
     82a:	4618      	mov	r0, r3
     82c:	3710      	adds	r7, #16
     82e:	46bd      	mov	sp, r7
     830:	bd80      	pop	{r7, pc}

00000832 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     832:	b580      	push	{r7, lr}
     834:	b084      	sub	sp, #16
     836:	af00      	add	r7, sp, #0
     838:	4603      	mov	r3, r0
     83a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     83c:	79fb      	ldrb	r3, [r7, #7]
     83e:	2b03      	cmp	r3, #3
     840:	d904      	bls.n	84c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     842:	4811      	ldr	r0, [pc, #68]	; (888 <set_MW_power+0x56>)
     844:	f001 f9f4 	bl	1c30 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     848:	f001 f9e6 	bl	1c18 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     84c:	2016      	movs	r0, #22
     84e:	f7ff ffd9 	bl	804 <synth_readreg>
     852:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     854:	68fb      	ldr	r3, [r7, #12]
     856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     85a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     85c:	79fb      	ldrb	r3, [r7, #7]
     85e:	021b      	lsls	r3, r3, #8
     860:	461a      	mov	r2, r3
     862:	68fb      	ldr	r3, [r7, #12]
     864:	4313      	orrs	r3, r2
     866:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     868:	2301      	movs	r3, #1
     86a:	2200      	movs	r2, #0
     86c:	2116      	movs	r1, #22
     86e:	68f8      	ldr	r0, [r7, #12]
     870:	f7ff ff4e 	bl	710 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     874:	79fb      	ldrb	r3, [r7, #7]
     876:	4619      	mov	r1, r3
     878:	4804      	ldr	r0, [pc, #16]	; (88c <set_MW_power+0x5a>)
     87a:	f001 fa2d 	bl	1cd8 <__printf_veneer>
	return SUCCESS;
     87e:	2300      	movs	r3, #0
}
     880:	4618      	mov	r0, r3
     882:	3710      	adds	r7, #16
     884:	46bd      	mov	sp, r7
     886:	bd80      	pop	{r7, pc}
     888:	0801db64 	.word	0x0801db64
     88c:	0801db98 	.word	0x0801db98

00000890 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     890:	b580      	push	{r7, lr}
     892:	b084      	sub	sp, #16
     894:	af00      	add	r7, sp, #0
     896:	4603      	mov	r3, r0
     898:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     89a:	2200      	movs	r2, #0
     89c:	2102      	movs	r1, #2
     89e:	4856      	ldr	r0, [pc, #344]	; (9f8 <init_synthesiser+0x168>)
     8a0:	f001 fa0a 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     8a4:	2201      	movs	r2, #1
     8a6:	2101      	movs	r1, #1
     8a8:	4854      	ldr	r0, [pc, #336]	; (9fc <init_synthesiser+0x16c>)
     8aa:	f001 fa05 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     8ae:	2200      	movs	r2, #0
     8b0:	f44f 7180 	mov.w	r1, #256	; 0x100
     8b4:	4852      	ldr	r0, [pc, #328]	; (a00 <init_synthesiser+0x170>)
     8b6:	f001 f9ff 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     8ba:	2201      	movs	r2, #1
     8bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
     8c0:	484f      	ldr	r0, [pc, #316]	; (a00 <init_synthesiser+0x170>)
     8c2:	f001 f9f9 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     8c6:	2201      	movs	r2, #1
     8c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8cc:	484c      	ldr	r0, [pc, #304]	; (a00 <init_synthesiser+0x170>)
     8ce:	f001 f9f3 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     8d2:	2064      	movs	r0, #100	; 0x64
     8d4:	f001 f9c4 	bl	1c60 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     8d8:	2300      	movs	r3, #0
     8da:	2200      	movs	r2, #0
     8dc:	2100      	movs	r1, #0
     8de:	2020      	movs	r0, #32
     8e0:	f7ff ff16 	bl	710 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     8e4:	2301      	movs	r3, #1
     8e6:	2200      	movs	r2, #0
     8e8:	2108      	movs	r1, #8
     8ea:	4846      	ldr	r0, [pc, #280]	; (a04 <init_synthesiser+0x174>)
     8ec:	f7ff ff10 	bl	710 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     8f0:	2000      	movs	r0, #0
     8f2:	f7ff ff87 	bl	804 <synth_readreg>
     8f6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     8f8:	4a43      	ldr	r2, [pc, #268]	; (a08 <init_synthesiser+0x178>)
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	4293      	cmp	r3, r2
     8fe:	d00a      	beq.n	916 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     900:	2200      	movs	r2, #0
     902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     906:	483e      	ldr	r0, [pc, #248]	; (a00 <init_synthesiser+0x170>)
     908:	f001 f9d6 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     90c:	483f      	ldr	r0, [pc, #252]	; (a0c <init_synthesiser+0x17c>)
     90e:	f001 f98f 	bl	1c30 <__puts_veneer>
		return ERROR;
     912:	2301      	movs	r3, #1
     914:	e06b      	b.n	9ee <init_synthesiser+0x15e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     916:	483e      	ldr	r0, [pc, #248]	; (a10 <init_synthesiser+0x180>)
     918:	f001 f98a 	bl	1c30 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     91c:	2017      	movs	r0, #23
     91e:	f7ff ff71 	bl	804 <synth_readreg>
     922:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     924:	68fb      	ldr	r3, [r7, #12]
     926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     92a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     92c:	2301      	movs	r3, #1
     92e:	f083 0301 	eor.w	r3, r3, #1
     932:	b2db      	uxtb	r3, r3
     934:	01db      	lsls	r3, r3, #7
     936:	43db      	mvns	r3, r3
     938:	461a      	mov	r2, r3
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	4013      	ands	r3, r2
     93e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     940:	2301      	movs	r3, #1
     942:	2200      	movs	r2, #0
     944:	2117      	movs	r1, #23
     946:	68f8      	ldr	r0, [r7, #12]
     948:	f7ff fee2 	bl	710 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     94c:	2301      	movs	r3, #1
     94e:	2200      	movs	r2, #0
     950:	2102      	movs	r1, #2
     952:	2001      	movs	r0, #1
     954:	f7ff fedc 	bl	710 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     958:	2007      	movs	r0, #7
     95a:	f7ff ff53 	bl	804 <synth_readreg>
     95e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     966:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     96e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     970:	68fb      	ldr	r3, [r7, #12]
     972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     976:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     978:	2301      	movs	r3, #1
     97a:	2200      	movs	r2, #0
     97c:	2107      	movs	r1, #7
     97e:	68f8      	ldr	r0, [r7, #12]
     980:	f7ff fec6 	bl	710 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     984:	200a      	movs	r0, #10
     986:	f001 f96b 	bl	1c60 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     98a:	79fb      	ldrb	r3, [r7, #7]
     98c:	2b03      	cmp	r3, #3
     98e:	d904      	bls.n	99a <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     990:	4820      	ldr	r0, [pc, #128]	; (a14 <init_synthesiser+0x184>)
     992:	f001 f94d 	bl	1c30 <__puts_veneer>
		Error_Handler();
     996:	f001 f93f 	bl	1c18 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     99a:	2016      	movs	r0, #22
     99c:	f7ff ff32 	bl	804 <synth_readreg>
     9a0:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     9a8:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     9aa:	79fb      	ldrb	r3, [r7, #7]
     9ac:	021b      	lsls	r3, r3, #8
     9ae:	461a      	mov	r2, r3
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	4313      	orrs	r3, r2
     9b4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     9b6:	2301      	movs	r3, #1
     9b8:	2200      	movs	r2, #0
     9ba:	2116      	movs	r1, #22
     9bc:	68f8      	ldr	r0, [r7, #12]
     9be:	f7ff fea7 	bl	710 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     9c2:	4b15      	ldr	r3, [pc, #84]	; (a18 <init_synthesiser+0x188>)
     9c4:	ed93 7b00 	vldr	d7, [r3]
     9c8:	eeb0 0b47 	vmov.f64	d0, d7
     9cc:	f000 f83f 	bl	a4e <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     9d0:	4b11      	ldr	r3, [pc, #68]	; (a18 <init_synthesiser+0x188>)
     9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
     9d6:	4811      	ldr	r0, [pc, #68]	; (a1c <init_synthesiser+0x18c>)
     9d8:	f001 f97e 	bl	1cd8 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     9dc:	4b10      	ldr	r3, [pc, #64]	; (a20 <init_synthesiser+0x190>)
     9de:	2201      	movs	r2, #1
     9e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     9e2:	2200      	movs	r2, #0
     9e4:	2102      	movs	r1, #2
     9e6:	480f      	ldr	r0, [pc, #60]	; (a24 <init_synthesiser+0x194>)
     9e8:	f001 f966 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     9ec:	2300      	movs	r3, #0
}
     9ee:	4618      	mov	r0, r3
     9f0:	3710      	adds	r7, #16
     9f2:	46bd      	mov	sp, r7
     9f4:	bd80      	pop	{r7, pc}
     9f6:	bf00      	nop
     9f8:	58021000 	.word	0x58021000
     9fc:	58021800 	.word	0x58021800
     a00:	58020800 	.word	0x58020800
     a04:	0041bfff 	.word	0x0041bfff
     a08:	00c7701a 	.word	0x00c7701a
     a0c:	0801dbb0 	.word	0x0801dbb0
     a10:	0801dbcc 	.word	0x0801dbcc
     a14:	0801db64 	.word	0x0801db64
     a18:	08020c28 	.word	0x08020c28
     a1c:	0801dbe0 	.word	0x0801dbe0
     a20:	200005b8 	.word	0x200005b8
     a24:	58020400 	.word	0x58020400

00000a28 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     a28:	b580      	push	{r7, lr}
     a2a:	b082      	sub	sp, #8
     a2c:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     a2e:	2012      	movs	r0, #18
     a30:	f7ff fee8 	bl	804 <synth_readreg>
     a34:	4603      	mov	r3, r0
     a36:	f003 0302 	and.w	r3, r3, #2
     a3a:	2b00      	cmp	r3, #0
     a3c:	bf14      	ite	ne
     a3e:	2301      	movne	r3, #1
     a40:	2300      	moveq	r3, #0
     a42:	71fb      	strb	r3, [r7, #7]
	return locked;
     a44:	79fb      	ldrb	r3, [r7, #7]

}
     a46:	4618      	mov	r0, r3
     a48:	3708      	adds	r7, #8
     a4a:	46bd      	mov	sp, r7
     a4c:	bd80      	pop	{r7, pc}

00000a4e <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     a4e:	b580      	push	{r7, lr}
     a50:	b088      	sub	sp, #32
     a52:	af00      	add	r7, sp, #0
     a54:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     a58:	2301      	movs	r3, #1
     a5a:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     a5c:	69fb      	ldr	r3, [r7, #28]
     a5e:	ee07 3a90 	vmov	s15, r3
     a62:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a66:	ed97 7b00 	vldr	d7, [r7]
     a6a:	ee26 6b07 	vmul.f64	d6, d6, d7
     a6e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b18 <set_frequency_hz+0xca>
     a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a76:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     a7a:	ed97 7b04 	vldr	d7, [r7, #16]
     a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a82:	ee17 3a90 	vmov	r3, s15
     a86:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	ee07 3a90 	vmov	s15, r3
     a8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a92:	ed97 6b04 	vldr	d6, [r7, #16]
     a96:	ee36 7b47 	vsub.f64	d7, d6, d7
     a9a:	ed9f 6b21 	vldr	d6, [pc, #132]	; b20 <set_frequency_hz+0xd2>
     a9e:	ee27 7b06 	vmul.f64	d7, d7, d6
     aa2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     aa6:	ee37 7b06 	vadd.f64	d7, d7, d6
     aaa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     aae:	ee17 3a90 	vmov	r3, s15
     ab2:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     ab4:	2201      	movs	r2, #1
     ab6:	2102      	movs	r1, #2
     ab8:	481b      	ldr	r0, [pc, #108]	; (b28 <set_frequency_hz+0xda>)
     aba:	f001 f8fd 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     abe:	69fa      	ldr	r2, [r7, #28]
     ac0:	68b9      	ldr	r1, [r7, #8]
     ac2:	68f8      	ldr	r0, [r7, #12]
     ac4:	f000 f838 	bl	b38 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     ac8:	4b18      	ldr	r3, [pc, #96]	; (b2c <set_frequency_hz+0xde>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	f241 3288 	movw	r2, #5000	; 0x1388
     ad0:	4611      	mov	r1, r2
     ad2:	4618      	mov	r0, r3
     ad4:	f000 ffbe 	bl	1a54 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     ad8:	f7ff ffa6 	bl	a28 <lock_status>
     adc:	4603      	mov	r3, r0
     ade:	f083 0301 	eor.w	r3, r3, #1
     ae2:	b2db      	uxtb	r3, r3
     ae4:	2b00      	cmp	r3, #0
     ae6:	d011      	beq.n	b0c <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     ae8:	2200      	movs	r2, #0
     aea:	2102      	movs	r1, #2
     aec:	4810      	ldr	r0, [pc, #64]	; (b30 <set_frequency_hz+0xe2>)
     aee:	f001 f8e3 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     af2:	f241 3388 	movw	r3, #5000	; 0x1388
     af6:	4619      	mov	r1, r3
     af8:	480e      	ldr	r0, [pc, #56]	; (b34 <set_frequency_hz+0xe6>)
     afa:	f001 f8ed 	bl	1cd8 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     afe:	f001 f88b 	bl	1c18 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     b02:	2200      	movs	r2, #0
     b04:	2102      	movs	r1, #2
     b06:	4808      	ldr	r0, [pc, #32]	; (b28 <set_frequency_hz+0xda>)
     b08:	f001 f8d6 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	}

}
     b0c:	bf00      	nop
     b0e:	3720      	adds	r7, #32
     b10:	46bd      	mov	sp, r7
     b12:	bd80      	pop	{r7, pc}
     b14:	f3af 8000 	nop.w
     b18:	00000000 	.word	0x00000000
     b1c:	4187d784 	.word	0x4187d784
     b20:	00000000 	.word	0x00000000
     b24:	41700000 	.word	0x41700000
     b28:	58020400 	.word	0x58020400
     b2c:	20000018 	.word	0x20000018
     b30:	58021000 	.word	0x58021000
     b34:	0801dc08 	.word	0x0801dc08

00000b38 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     b38:	b580      	push	{r7, lr}
     b3a:	b086      	sub	sp, #24
     b3c:	af00      	add	r7, sp, #0
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	60b9      	str	r1, [r7, #8]
     b42:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     b44:	2300      	movs	r3, #0
     b46:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b48:	4b24      	ldr	r3, [pc, #144]	; (bdc <set_freq_regs+0xa4>)
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
     b50:	d004      	beq.n	b5c <set_freq_regs+0x24>
     b52:	4b22      	ldr	r3, [pc, #136]	; (bdc <set_freq_regs+0xa4>)
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	687a      	ldr	r2, [r7, #4]
     b58:	429a      	cmp	r2, r3
     b5a:	d014      	beq.n	b86 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b5c:	2016      	movs	r0, #22
     b5e:	f7ff fe51 	bl	804 <synth_readreg>
     b62:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b64:	697b      	ldr	r3, [r7, #20]
     b66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b6a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b6c:	697a      	ldr	r2, [r7, #20]
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	4313      	orrs	r3, r2
     b72:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b74:	2301      	movs	r3, #1
     b76:	2200      	movs	r2, #0
     b78:	2116      	movs	r1, #22
     b7a:	6978      	ldr	r0, [r7, #20]
     b7c:	f7ff fdc8 	bl	710 <synth_writereg>
		last_vcodiv = vco_divider;
     b80:	4a16      	ldr	r2, [pc, #88]	; (bdc <set_freq_regs+0xa4>)
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     b86:	4b16      	ldr	r3, [pc, #88]	; (be0 <set_freq_regs+0xa8>)
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
     b8e:	d004      	beq.n	b9a <set_freq_regs+0x62>
     b90:	4b13      	ldr	r3, [pc, #76]	; (be0 <set_freq_regs+0xa8>)
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	68fa      	ldr	r2, [r7, #12]
     b96:	429a      	cmp	r2, r3
     b98:	d008      	beq.n	bac <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     b9a:	2301      	movs	r3, #1
     b9c:	2200      	movs	r2, #0
     b9e:	2103      	movs	r1, #3
     ba0:	68f8      	ldr	r0, [r7, #12]
     ba2:	f7ff fdb5 	bl	710 <synth_writereg>
		last_integer = integer;
     ba6:	4a0e      	ldr	r2, [pc, #56]	; (be0 <set_freq_regs+0xa8>)
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     bac:	4b0d      	ldr	r3, [pc, #52]	; (be4 <set_freq_regs+0xac>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
     bb4:	d004      	beq.n	bc0 <set_freq_regs+0x88>
     bb6:	4b0b      	ldr	r3, [pc, #44]	; (be4 <set_freq_regs+0xac>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	68ba      	ldr	r2, [r7, #8]
     bbc:	429a      	cmp	r2, r3
     bbe:	d008      	beq.n	bd2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     bc0:	2301      	movs	r3, #1
     bc2:	2200      	movs	r2, #0
     bc4:	2104      	movs	r1, #4
     bc6:	68b8      	ldr	r0, [r7, #8]
     bc8:	f7ff fda2 	bl	710 <synth_writereg>
		last_fraction = fraction;
     bcc:	4a05      	ldr	r2, [pc, #20]	; (be4 <set_freq_regs+0xac>)
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	6013      	str	r3, [r2, #0]
}
     bd2:	bf00      	nop
     bd4:	3718      	adds	r7, #24
     bd6:	46bd      	mov	sp, r7
     bd8:	bd80      	pop	{r7, pc}
     bda:	bf00      	nop
     bdc:	20000000 	.word	0x20000000
     be0:	20000004 	.word	0x20000004
     be4:	20000008 	.word	0x20000008

00000be8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     be8:	b580      	push	{r7, lr}
     bea:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     bec:	4b34      	ldr	r3, [pc, #208]	; (cc0 <print_mw_sweep_settings+0xd8>)
     bee:	781b      	ldrb	r3, [r3, #0]
     bf0:	4619      	mov	r1, r3
     bf2:	4834      	ldr	r0, [pc, #208]	; (cc4 <print_mw_sweep_settings+0xdc>)
     bf4:	f001 f870 	bl	1cd8 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     bf8:	4b31      	ldr	r3, [pc, #196]	; (cc0 <print_mw_sweep_settings+0xd8>)
     bfa:	785b      	ldrb	r3, [r3, #1]
     bfc:	4619      	mov	r1, r3
     bfe:	4832      	ldr	r0, [pc, #200]	; (cc8 <print_mw_sweep_settings+0xe0>)
     c00:	f001 f86a 	bl	1cd8 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     c04:	4b2e      	ldr	r3, [pc, #184]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c06:	685b      	ldr	r3, [r3, #4]
     c08:	4619      	mov	r1, r3
     c0a:	4830      	ldr	r0, [pc, #192]	; (ccc <print_mw_sweep_settings+0xe4>)
     c0c:	f001 f864 	bl	1cd8 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     c10:	4b2b      	ldr	r3, [pc, #172]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c12:	689b      	ldr	r3, [r3, #8]
     c14:	4619      	mov	r1, r3
     c16:	482e      	ldr	r0, [pc, #184]	; (cd0 <print_mw_sweep_settings+0xe8>)
     c18:	f001 f85e 	bl	1cd8 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     c1c:	4b28      	ldr	r3, [pc, #160]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c1e:	68db      	ldr	r3, [r3, #12]
     c20:	4619      	mov	r1, r3
     c22:	482c      	ldr	r0, [pc, #176]	; (cd4 <print_mw_sweep_settings+0xec>)
     c24:	f001 f858 	bl	1cd8 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     c28:	4b25      	ldr	r3, [pc, #148]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c2a:	691b      	ldr	r3, [r3, #16]
     c2c:	4619      	mov	r1, r3
     c2e:	482a      	ldr	r0, [pc, #168]	; (cd8 <print_mw_sweep_settings+0xf0>)
     c30:	f001 f852 	bl	1cd8 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     c34:	4b22      	ldr	r3, [pc, #136]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c36:	695b      	ldr	r3, [r3, #20]
     c38:	4619      	mov	r1, r3
     c3a:	4828      	ldr	r0, [pc, #160]	; (cdc <print_mw_sweep_settings+0xf4>)
     c3c:	f001 f84c 	bl	1cd8 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     c40:	4b1f      	ldr	r3, [pc, #124]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c42:	699b      	ldr	r3, [r3, #24]
     c44:	4619      	mov	r1, r3
     c46:	4826      	ldr	r0, [pc, #152]	; (ce0 <print_mw_sweep_settings+0xf8>)
     c48:	f001 f846 	bl	1cd8 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     c4c:	4b1c      	ldr	r3, [pc, #112]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c4e:	69db      	ldr	r3, [r3, #28]
     c50:	4619      	mov	r1, r3
     c52:	4824      	ldr	r0, [pc, #144]	; (ce4 <print_mw_sweep_settings+0xfc>)
     c54:	f001 f840 	bl	1cd8 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     c58:	4b19      	ldr	r3, [pc, #100]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c5a:	6a1b      	ldr	r3, [r3, #32]
     c5c:	4619      	mov	r1, r3
     c5e:	4822      	ldr	r0, [pc, #136]	; (ce8 <print_mw_sweep_settings+0x100>)
     c60:	f001 f83a 	bl	1cd8 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     c64:	4b16      	ldr	r3, [pc, #88]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c68:	4619      	mov	r1, r3
     c6a:	4820      	ldr	r0, [pc, #128]	; (cec <print_mw_sweep_settings+0x104>)
     c6c:	f001 f834 	bl	1cd8 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     c70:	4b13      	ldr	r3, [pc, #76]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c72:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     c76:	481e      	ldr	r0, [pc, #120]	; (cf0 <print_mw_sweep_settings+0x108>)
     c78:	f001 f82e 	bl	1cd8 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     c7c:	4b10      	ldr	r3, [pc, #64]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     c82:	481c      	ldr	r0, [pc, #112]	; (cf4 <print_mw_sweep_settings+0x10c>)
     c84:	f001 f828 	bl	1cd8 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     c8e:	481a      	ldr	r0, [pc, #104]	; (cf8 <print_mw_sweep_settings+0x110>)
     c90:	f001 f822 	bl	1cd8 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     c94:	4b0a      	ldr	r3, [pc, #40]	; (cc0 <print_mw_sweep_settings+0xd8>)
     c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     c9a:	2b00      	cmp	r3, #0
     c9c:	d001      	beq.n	ca2 <print_mw_sweep_settings+0xba>
     c9e:	4b17      	ldr	r3, [pc, #92]	; (cfc <print_mw_sweep_settings+0x114>)
     ca0:	e000      	b.n	ca4 <print_mw_sweep_settings+0xbc>
     ca2:	4b17      	ldr	r3, [pc, #92]	; (d00 <print_mw_sweep_settings+0x118>)
     ca4:	4619      	mov	r1, r3
     ca6:	4817      	ldr	r0, [pc, #92]	; (d04 <print_mw_sweep_settings+0x11c>)
     ca8:	f001 f816 	bl	1cd8 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     cac:	4b04      	ldr	r3, [pc, #16]	; (cc0 <print_mw_sweep_settings+0xd8>)
     cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     cb2:	4619      	mov	r1, r3
     cb4:	4814      	ldr	r0, [pc, #80]	; (d08 <print_mw_sweep_settings+0x120>)
     cb6:	f001 f80f 	bl	1cd8 <__printf_veneer>
}
     cba:	bf00      	nop
     cbc:	bd80      	pop	{r7, pc}
     cbe:	bf00      	nop
     cc0:	200005b8 	.word	0x200005b8
     cc4:	0801dc4c 	.word	0x0801dc4c
     cc8:	0801dc5c 	.word	0x0801dc5c
     ccc:	0801dc68 	.word	0x0801dc68
     cd0:	0801dc78 	.word	0x0801dc78
     cd4:	0801dc8c 	.word	0x0801dc8c
     cd8:	0801dca0 	.word	0x0801dca0
     cdc:	0801dcb4 	.word	0x0801dcb4
     ce0:	0801dcd4 	.word	0x0801dcd4
     ce4:	0801dcf0 	.word	0x0801dcf0
     ce8:	0801dd08 	.word	0x0801dd08
     cec:	0801dd28 	.word	0x0801dd28
     cf0:	0801dd40 	.word	0x0801dd40
     cf4:	0801dd58 	.word	0x0801dd58
     cf8:	0801dd68 	.word	0x0801dd68
     cfc:	0801dd80 	.word	0x0801dd80
     d00:	0801dd8c 	.word	0x0801dd8c
     d04:	0801dd98 	.word	0x0801dd98
     d08:	0801ddac 	.word	0x0801ddac

00000d0c <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     d0c:	b580      	push	{r7, lr}
     d0e:	b094      	sub	sp, #80	; 0x50
     d10:	af02      	add	r7, sp, #8
     d12:	ed87 0b04 	vstr	d0, [r7, #16]
     d16:	ed87 1b02 	vstr	d1, [r7, #8]
     d1a:	6078      	str	r0, [r7, #4]
     d1c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     d1e:	ed97 7b04 	vldr	d7, [r7, #16]
     d22:	ed9f 6b8d 	vldr	d6, [pc, #564]	; f58 <calc_defined_step_MW_sweep+0x24c>
     d26:	ee87 5b06 	vdiv.f64	d5, d7, d6
     d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d2e:	e9cd 2300 	strd	r2, r3, [sp]
     d32:	ec53 2b15 	vmov	r2, r3, d5
     d36:	4892      	ldr	r0, [pc, #584]	; (f80 <calc_defined_step_MW_sweep+0x274>)
     d38:	f000 ffce 	bl	1cd8 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     d3c:	6879      	ldr	r1, [r7, #4]
     d3e:	4891      	ldr	r0, [pc, #580]	; (f84 <calc_defined_step_MW_sweep+0x278>)
     d40:	f000 ffca 	bl	1cd8 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     d44:	4b90      	ldr	r3, [pc, #576]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     d46:	2200      	movs	r2, #0
     d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     d4c:	4a8e      	ldr	r2, [pc, #568]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     d52:	498d      	ldr	r1, [pc, #564]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     d58:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     d5c:	498a      	ldr	r1, [pc, #552]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     d66:	ed97 7b02 	vldr	d7, [r7, #8]
     d6a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
     d72:	ed97 6b04 	vldr	d6, [r7, #16]
     d76:	ee36 7b47 	vsub.f64	d7, d6, d7
     d7a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     d7e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     d82:	f000 fb1f 	bl	13c4 <calculate_k>
     d86:	4603      	mov	r3, r0
     d88:	b2da      	uxtb	r2, r3
     d8a:	4b7f      	ldr	r3, [pc, #508]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     d8c:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	3b01      	subs	r3, #1
     d92:	ee07 3a90 	vmov	s15, r3
     d96:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d9a:	ed97 5b02 	vldr	d5, [r7, #8]
     d9e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     da2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     da6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     daa:	6839      	ldr	r1, [r7, #0]
     dac:	4877      	ldr	r0, [pc, #476]	; (f8c <calc_defined_step_MW_sweep+0x280>)
     dae:	f000 ff93 	bl	1cd8 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     db2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; f60 <calc_defined_step_MW_sweep+0x254>
     db6:	4b74      	ldr	r3, [pc, #464]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     db8:	785b      	ldrb	r3, [r3, #1]
     dba:	061b      	lsls	r3, r3, #24
     dbc:	ee07 3a90 	vmov	s15, r3
     dc0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     dc4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     dc8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     dcc:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     dd0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     dd4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     dd8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ddc:	ee37 7b06 	vadd.f64	d7, d7, d6
     de0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     de4:	ee17 2a90 	vmov	r2, s15
     de8:	4b67      	ldr	r3, [pc, #412]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     dea:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     dec:	4b66      	ldr	r3, [pc, #408]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     dee:	691b      	ldr	r3, [r3, #16]
     df0:	2b00      	cmp	r3, #0
     df2:	d104      	bne.n	dfe <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     df4:	4b64      	ldr	r3, [pc, #400]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     df6:	691b      	ldr	r3, [r3, #16]
     df8:	3301      	adds	r3, #1
     dfa:	4a63      	ldr	r2, [pc, #396]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     dfc:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     dfe:	4b62      	ldr	r3, [pc, #392]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     e00:	691b      	ldr	r3, [r3, #16]
     e02:	ee07 3a90 	vmov	s15, r3
     e06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e0a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
     e12:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     e1a:	485d      	ldr	r0, [pc, #372]	; (f90 <calc_defined_step_MW_sweep+0x284>)
     e1c:	f000 ff5c 	bl	1cd8 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     e20:	ed97 5b02 	vldr	d5, [r7, #8]
     e24:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     e28:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e30:	ee17 2a90 	vmov	r2, s15
     e34:	4b54      	ldr	r3, [pc, #336]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     e36:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     e38:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     e3c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e40:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     e48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     e4c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e50:	ee26 7b07 	vmul.f64	d7, d6, d7
     e54:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     e58:	4b4b      	ldr	r3, [pc, #300]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     e5a:	785b      	ldrb	r3, [r3, #1]
     e5c:	ee07 3a90 	vmov	s15, r3
     e60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     e64:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     e68:	ee26 6b07 	vmul.f64	d6, d6, d7
     e6c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; f60 <calc_defined_step_MW_sweep+0x254>
     e70:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e74:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     e78:	ed97 7b08 	vldr	d7, [r7, #32]
     e7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e80:	ee17 2a90 	vmov	r2, s15
     e84:	4b40      	ldr	r3, [pc, #256]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     e86:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     e88:	4b3f      	ldr	r3, [pc, #252]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     e8a:	685b      	ldr	r3, [r3, #4]
     e8c:	ee07 3a90 	vmov	s15, r3
     e90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e94:	ed97 6b08 	vldr	d6, [r7, #32]
     e98:	ee36 7b47 	vsub.f64	d7, d6, d7
     e9c:	ed9f 6b32 	vldr	d6, [pc, #200]	; f68 <calc_defined_step_MW_sweep+0x25c>
     ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
     ea4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
     eac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     eb0:	ee17 2a90 	vmov	r2, s15
     eb4:	4b34      	ldr	r3, [pc, #208]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     eb6:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     eb8:	f241 3288 	movw	r2, #5000	; 0x1388
     ebc:	4b32      	ldr	r3, [pc, #200]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     ebe:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     ec0:	4b34      	ldr	r3, [pc, #208]	; (f94 <calc_defined_step_MW_sweep+0x288>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	687a      	ldr	r2, [r7, #4]
     ec6:	fb02 f303 	mul.w	r3, r2, r3
     eca:	2264      	movs	r2, #100	; 0x64
     ecc:	4413      	add	r3, r2
     ece:	4a2e      	ldr	r2, [pc, #184]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     ed0:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     ed2:	f241 3288 	movw	r2, #5000	; 0x1388
     ed6:	2301      	movs	r3, #1
     ed8:	441a      	add	r2, r3
     eda:	4b2b      	ldr	r3, [pc, #172]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     edc:	69db      	ldr	r3, [r3, #28]
     ede:	4413      	add	r3, r2
     ee0:	ee07 3a90 	vmov	s15, r3
     ee4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ee8:	4b27      	ldr	r3, [pc, #156]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     eea:	68db      	ldr	r3, [r3, #12]
     eec:	3301      	adds	r3, #1
     eee:	ee07 3a90 	vmov	s15, r3
     ef2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ef6:	ee26 6b07 	vmul.f64	d6, d6, d7
     efa:	ed9f 5b1d 	vldr	d5, [pc, #116]	; f70 <calc_defined_step_MW_sweep+0x264>
     efe:	ee86 7b05 	vdiv.f64	d7, d6, d5
     f02:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f0a:	4823      	ldr	r0, [pc, #140]	; (f98 <calc_defined_step_MW_sweep+0x28c>)
     f0c:	f000 fee4 	bl	1cd8 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     f10:	4b1d      	ldr	r3, [pc, #116]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     f12:	68d9      	ldr	r1, [r3, #12]
     f14:	ed97 7b06 	vldr	d7, [r7, #24]
     f18:	ed9f 6b17 	vldr	d6, [pc, #92]	; f78 <calc_defined_step_MW_sweep+0x26c>
     f1c:	ee27 6b06 	vmul.f64	d6, d7, d6
     f20:	4b19      	ldr	r3, [pc, #100]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     f22:	68db      	ldr	r3, [r3, #12]
     f24:	3301      	adds	r3, #1
     f26:	ee07 3a90 	vmov	s15, r3
     f2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f2e:	ee86 5b07 	vdiv.f64	d5, d6, d7
     f32:	ec53 2b15 	vmov	r2, r3, d5
     f36:	4819      	ldr	r0, [pc, #100]	; (f9c <calc_defined_step_MW_sweep+0x290>)
     f38:	f000 fece 	bl	1cd8 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     f3c:	4b12      	ldr	r3, [pc, #72]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     f3e:	2200      	movs	r2, #0
     f40:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     f42:	4911      	ldr	r1, [pc, #68]	; (f88 <calc_defined_step_MW_sweep+0x27c>)
     f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f48:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     f4c:	2301      	movs	r3, #1
}
     f4e:	4618      	mov	r0, r3
     f50:	3748      	adds	r7, #72	; 0x48
     f52:	46bd      	mov	sp, r7
     f54:	bd80      	pop	{r7, pc}
     f56:	bf00      	nop
     f58:	00000000 	.word	0x00000000
     f5c:	41cdcd65 	.word	0x41cdcd65
     f60:	00000000 	.word	0x00000000
     f64:	4187d784 	.word	0x4187d784
     f68:	00000000 	.word	0x00000000
     f6c:	41700000 	.word	0x41700000
     f70:	00000000 	.word	0x00000000
     f74:	412e8480 	.word	0x412e8480
     f78:	00000000 	.word	0x00000000
     f7c:	408f4000 	.word	0x408f4000
     f80:	0801ddc0 	.word	0x0801ddc0
     f84:	0801de04 	.word	0x0801de04
     f88:	200005b8 	.word	0x200005b8
     f8c:	0801de24 	.word	0x0801de24
     f90:	0801de5c 	.word	0x0801de5c
     f94:	200005a8 	.word	0x200005a8
     f98:	0801de7c 	.word	0x0801de7c
     f9c:	0801de94 	.word	0x0801de94

00000fa0 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     fa0:	b580      	push	{r7, lr}
     fa2:	b09e      	sub	sp, #120	; 0x78
     fa4:	af04      	add	r7, sp, #16
     fa6:	ed87 0b06 	vstr	d0, [r7, #24]
     faa:	ed87 1b04 	vstr	d1, [r7, #16]
     fae:	ed87 2b02 	vstr	d2, [r7, #8]
     fb2:	4603      	mov	r3, r0
     fb4:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     fb6:	ed97 7b06 	vldr	d7, [r7, #24]
     fba:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1218 <calc_fixed_time_MW_sweep+0x278>
     fbe:	ee87 5b06 	vdiv.f64	d5, d7, d6
     fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     fca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     fce:	e9cd 2300 	strd	r2, r3, [sp]
     fd2:	ec53 2b15 	vmov	r2, r3, d5
     fd6:	4898      	ldr	r0, [pc, #608]	; (1238 <calc_fixed_time_MW_sweep+0x298>)
     fd8:	f000 fe7e 	bl	1cd8 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     fdc:	4b97      	ldr	r3, [pc, #604]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
     fde:	2201      	movs	r2, #1
     fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     fe4:	4995      	ldr	r1, [pc, #596]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
     fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     fea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     fee:	4993      	ldr	r1, [pc, #588]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
     ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ff4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     ff8:	4b91      	ldr	r3, [pc, #580]	; (1240 <calc_fixed_time_MW_sweep+0x2a0>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	2264      	movs	r2, #100	; 0x64
     ffe:	4413      	add	r3, r2
    1000:	4a8e      	ldr	r2, [pc, #568]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1002:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
    1004:	f241 3288 	movw	r2, #5000	; 0x1388
    1008:	2301      	movs	r3, #1
    100a:	441a      	add	r2, r3
    100c:	4b8b      	ldr	r3, [pc, #556]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    100e:	69db      	ldr	r3, [r3, #28]
    1010:	4413      	add	r3, r2
    1012:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
    1014:	4a8b      	ldr	r2, [pc, #556]	; (1244 <calc_fixed_time_MW_sweep+0x2a4>)
    1016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1018:	fbb2 f3f3 	udiv	r3, r2, r3
    101c:	ee07 3a90 	vmov	s15, r3
    1020:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1024:	ed97 7b02 	vldr	d7, [r7, #8]
    1028:	ee26 7b07 	vmul.f64	d7, d6, d7
    102c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1030:	ee17 3a90 	vmov	r3, s15
    1034:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
    1036:	ed97 7b04 	vldr	d7, [r7, #16]
    103a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    103e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1042:	ed97 6b06 	vldr	d6, [r7, #24]
    1046:	ee36 7b47 	vsub.f64	d7, d6, d7
    104a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
    104e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
    1052:	f000 f9b7 	bl	13c4 <calculate_k>
    1056:	4603      	mov	r3, r0
    1058:	b2da      	uxtb	r2, r3
    105a:	4b78      	ldr	r3, [pc, #480]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    105c:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
    105e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1220 <calc_fixed_time_MW_sweep+0x280>
    1062:	4b76      	ldr	r3, [pc, #472]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1064:	785b      	ldrb	r3, [r3, #1]
    1066:	061b      	lsls	r3, r3, #24
    1068:	ee07 3a90 	vmov	s15, r3
    106c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1070:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1074:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
    1078:	4b70      	ldr	r3, [pc, #448]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    107a:	2201      	movs	r2, #1
    107c:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    107e:	e004      	b.n	108a <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
    1080:	4b6e      	ldr	r3, [pc, #440]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1082:	691b      	ldr	r3, [r3, #16]
    1084:	3301      	adds	r3, #1
    1086:	4a6d      	ldr	r2, [pc, #436]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1088:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    108a:	4b6c      	ldr	r3, [pc, #432]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    108c:	691b      	ldr	r3, [r3, #16]
    108e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1090:	fb02 f303 	mul.w	r3, r2, r3
    1094:	ee07 3a90 	vmov	s15, r3
    1098:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    109c:	ed97 4b04 	vldr	d4, [r7, #16]
    10a0:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
    10a4:	ee84 7b05 	vdiv.f64	d7, d4, d5
    10a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
    10ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10b0:	d4e6      	bmi.n	1080 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
    10b2:	4b62      	ldr	r3, [pc, #392]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    10b4:	691b      	ldr	r3, [r3, #16]
    10b6:	ee07 3a90 	vmov	s15, r3
    10ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10be:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    10c2:	ee26 7b07 	vmul.f64	d7, d6, d7
    10c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
    10ca:	4b5c      	ldr	r3, [pc, #368]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    10cc:	6919      	ldr	r1, [r3, #16]
    10ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    10d2:	485d      	ldr	r0, [pc, #372]	; (1248 <calc_fixed_time_MW_sweep+0x2a8>)
    10d4:	f000 fe00 	bl	1cd8 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
    10d8:	ed97 5b04 	vldr	d5, [r7, #16]
    10dc:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
    10e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10e8:	ee17 2a90 	vmov	r2, s15
    10ec:	4b53      	ldr	r3, [pc, #332]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    10ee:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
    10f0:	ed97 7b02 	vldr	d7, [r7, #8]
    10f4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1228 <calc_fixed_time_MW_sweep+0x288>
    10f8:	ee27 5b06 	vmul.f64	d5, d7, d6
    10fc:	4b4f      	ldr	r3, [pc, #316]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    10fe:	68db      	ldr	r3, [r3, #12]
    1100:	3301      	adds	r3, #1
    1102:	ee07 3a90 	vmov	s15, r3
    1106:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    110a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    110e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1112:	ee17 3a90 	vmov	r3, s15
    1116:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    1118:	f241 3288 	movw	r2, #5000	; 0x1388
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111e:	1a9b      	subs	r3, r3, r2
    1120:	2264      	movs	r2, #100	; 0x64
    1122:	1a9b      	subs	r3, r3, r2
    1124:	2201      	movs	r2, #1
    1126:	1a9a      	subs	r2, r3, r2
    1128:	4b45      	ldr	r3, [pc, #276]	; (1240 <calc_fixed_time_MW_sweep+0x2a0>)
    112a:	681b      	ldr	r3, [r3, #0]
    112c:	fbb2 f3f3 	udiv	r3, r2, r3
    1130:	4a42      	ldr	r2, [pc, #264]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1132:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    1134:	4b41      	ldr	r3, [pc, #260]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1136:	68db      	ldr	r3, [r3, #12]
    1138:	1c59      	adds	r1, r3, #1
    113a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    113c:	4a43      	ldr	r2, [pc, #268]	; (124c <calc_fixed_time_MW_sweep+0x2ac>)
    113e:	fba2 2303 	umull	r2, r3, r2, r3
    1142:	099a      	lsrs	r2, r3, #6
    1144:	4b3d      	ldr	r3, [pc, #244]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1146:	695b      	ldr	r3, [r3, #20]
    1148:	4841      	ldr	r0, [pc, #260]	; (1250 <calc_fixed_time_MW_sweep+0x2b0>)
    114a:	f000 fdc5 	bl	1cd8 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    114e:	4b3b      	ldr	r3, [pc, #236]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1150:	695b      	ldr	r3, [r3, #20]
    1152:	4a3b      	ldr	r2, [pc, #236]	; (1240 <calc_fixed_time_MW_sweep+0x2a0>)
    1154:	6812      	ldr	r2, [r2, #0]
    1156:	fb02 f303 	mul.w	r3, r2, r3
    115a:	2264      	movs	r2, #100	; 0x64
    115c:	4413      	add	r3, r2
    115e:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1160:	f241 3288 	movw	r2, #5000	; 0x1388
    1164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1166:	1a9b      	subs	r3, r3, r2
    1168:	2201      	movs	r2, #1
    116a:	1a9b      	subs	r3, r3, r2
    116c:	4a33      	ldr	r2, [pc, #204]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    116e:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1170:	4b32      	ldr	r3, [pc, #200]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    1172:	69db      	ldr	r3, [r3, #28]
    1174:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1176:	429a      	cmp	r2, r3
    1178:	d902      	bls.n	1180 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    117a:	4a30      	ldr	r2, [pc, #192]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117e:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1180:	f241 3288 	movw	r2, #5000	; 0x1388
    1184:	2301      	movs	r3, #1
    1186:	441a      	add	r2, r3
    1188:	4b2c      	ldr	r3, [pc, #176]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    118a:	69db      	ldr	r3, [r3, #28]
    118c:	4413      	add	r3, r2
    118e:	ee07 3a90 	vmov	s15, r3
    1192:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1196:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1228 <calc_fixed_time_MW_sweep+0x288>
    119a:	ee86 7b05 	vdiv.f64	d7, d6, d5
    119e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11a2:	4b26      	ldr	r3, [pc, #152]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    11a4:	68db      	ldr	r3, [r3, #12]
    11a6:	3301      	adds	r3, #1
    11a8:	ee07 3a90 	vmov	s15, r3
    11ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11b0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11b4:	ee26 7b07 	vmul.f64	d7, d6, d7
    11b8:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    11bc:	f241 3288 	movw	r2, #5000	; 0x1388
    11c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c2:	4413      	add	r3, r2
    11c4:	2201      	movs	r2, #1
    11c6:	4413      	add	r3, r2
    11c8:	4a1c      	ldr	r2, [pc, #112]	; (123c <calc_fixed_time_MW_sweep+0x29c>)
    11ca:	68d2      	ldr	r2, [r2, #12]
    11cc:	3201      	adds	r2, #1
    11ce:	fb02 f303 	mul.w	r3, r2, r3
    11d2:	ee07 3a90 	vmov	s15, r3
    11d6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    11da:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1228 <calc_fixed_time_MW_sweep+0x288>
    11de:	ee86 7b05 	vdiv.f64	d7, d6, d5
    11e2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    11e6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    11ea:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    11ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
    11f2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1230 <calc_fixed_time_MW_sweep+0x290>
    11f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
    11fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11fe:	dd2b      	ble.n	1258 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    1204:	e9cd 2300 	strd	r2, r3, [sp]
    1208:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    120c:	4811      	ldr	r0, [pc, #68]	; (1254 <calc_fixed_time_MW_sweep+0x2b4>)
    120e:	f000 fd63 	bl	1cd8 <__printf_veneer>
    1212:	e029      	b.n	1268 <calc_fixed_time_MW_sweep+0x2c8>
    1214:	f3af 8000 	nop.w
    1218:	00000000 	.word	0x00000000
    121c:	41cdcd65 	.word	0x41cdcd65
    1220:	00000000 	.word	0x00000000
    1224:	4187d784 	.word	0x4187d784
    1228:	00000000 	.word	0x00000000
    122c:	412e8480 	.word	0x412e8480
    1230:	851eb852 	.word	0x851eb852
    1234:	3ff051eb 	.word	0x3ff051eb
    1238:	0801deb0 	.word	0x0801deb0
    123c:	200005b8 	.word	0x200005b8
    1240:	200005a8 	.word	0x200005a8
    1244:	000f4240 	.word	0x000f4240
    1248:	0801df00 	.word	0x0801df00
    124c:	10624dd3 	.word	0x10624dd3
    1250:	0801df2c 	.word	0x0801df2c
    1254:	0801df64 	.word	0x0801df64
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1258:	4b57      	ldr	r3, [pc, #348]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    125a:	695b      	ldr	r3, [r3, #20]
    125c:	9300      	str	r3, [sp, #0]
    125e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1262:	4856      	ldr	r0, [pc, #344]	; (13bc <calc_fixed_time_MW_sweep+0x41c>)
    1264:	f000 fd38 	bl	1cd8 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1268:	79fb      	ldrb	r3, [r7, #7]
    126a:	2b00      	cmp	r3, #0
    126c:	d044      	beq.n	12f8 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    126e:	4b52      	ldr	r3, [pc, #328]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1270:	68db      	ldr	r3, [r3, #12]
    1272:	ee07 3a90 	vmov	s15, r3
    1276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    127a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 13a0 <calc_fixed_time_MW_sweep+0x400>
    127e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1282:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1286:	ee37 7b06 	vadd.f64	d7, d7, d6
    128a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    128e:	ee17 2a90 	vmov	r2, s15
    1292:	4b49      	ldr	r3, [pc, #292]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1294:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    1296:	4b48      	ldr	r3, [pc, #288]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1298:	68db      	ldr	r3, [r3, #12]
    129a:	3301      	adds	r3, #1
    129c:	ee07 3a90 	vmov	s15, r3
    12a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12a4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    12a8:	ee26 7b07 	vmul.f64	d7, d6, d7
    12ac:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    12b0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    12b4:	ed97 7b02 	vldr	d7, [r7, #8]
    12b8:	ee36 7b47 	vsub.f64	d7, d6, d7
    12bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    12c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
    12c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12c8:	dd11      	ble.n	12ee <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    12ca:	4b3b      	ldr	r3, [pc, #236]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    12cc:	68db      	ldr	r3, [r3, #12]
    12ce:	3b01      	subs	r3, #1
    12d0:	4a39      	ldr	r2, [pc, #228]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    12d2:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    12d4:	4b38      	ldr	r3, [pc, #224]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    12d6:	68db      	ldr	r3, [r3, #12]
    12d8:	3301      	adds	r3, #1
    12da:	ee07 3a90 	vmov	s15, r3
    12de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12e2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    12e6:	ee26 7b07 	vmul.f64	d7, d6, d7
    12ea:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    12ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    12f2:	4833      	ldr	r0, [pc, #204]	; (13c0 <calc_fixed_time_MW_sweep+0x420>)
    12f4:	f000 fcf0 	bl	1cd8 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    12f8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    12fc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1300:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1304:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1308:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    130c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1310:	ee26 7b07 	vmul.f64	d7, d6, d7
    1314:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1318:	4b27      	ldr	r3, [pc, #156]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    131a:	785b      	ldrb	r3, [r3, #1]
    131c:	ee07 3a90 	vmov	s15, r3
    1320:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1324:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1328:	ee26 6b07 	vmul.f64	d6, d6, d7
    132c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 13a8 <calc_fixed_time_MW_sweep+0x408>
    1330:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1334:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1338:	ed97 7b08 	vldr	d7, [r7, #32]
    133c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1340:	ee17 2a90 	vmov	r2, s15
    1344:	4b1c      	ldr	r3, [pc, #112]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1346:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1348:	4b1b      	ldr	r3, [pc, #108]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    134a:	685b      	ldr	r3, [r3, #4]
    134c:	ee07 3a90 	vmov	s15, r3
    1350:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1354:	ed97 6b08 	vldr	d6, [r7, #32]
    1358:	ee36 7b47 	vsub.f64	d7, d6, d7
    135c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 13b0 <calc_fixed_time_MW_sweep+0x410>
    1360:	ee27 7b06 	vmul.f64	d7, d7, d6
    1364:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1368:	ee37 7b06 	vadd.f64	d7, d7, d6
    136c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1370:	ee17 2a90 	vmov	r2, s15
    1374:	4b10      	ldr	r3, [pc, #64]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1376:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    1378:	4b0f      	ldr	r3, [pc, #60]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    137a:	2200      	movs	r2, #0
    137c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    137e:	490e      	ldr	r1, [pc, #56]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    1380:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1384:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1388:	f241 3288 	movw	r2, #5000	; 0x1388
    138c:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <calc_fixed_time_MW_sweep+0x418>)
    138e:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    1390:	2301      	movs	r3, #1
}
    1392:	4618      	mov	r0, r3
    1394:	3768      	adds	r7, #104	; 0x68
    1396:	46bd      	mov	sp, r7
    1398:	bd80      	pop	{r7, pc}
    139a:	bf00      	nop
    139c:	f3af 8000 	nop.w
    13a0:	9999999a 	.word	0x9999999a
    13a4:	3ff19999 	.word	0x3ff19999
    13a8:	00000000 	.word	0x00000000
    13ac:	4187d784 	.word	0x4187d784
    13b0:	00000000 	.word	0x00000000
    13b4:	41700000 	.word	0x41700000
    13b8:	200005b8 	.word	0x200005b8
    13bc:	0801df9c 	.word	0x0801df9c
    13c0:	0801dfe8 	.word	0x0801dfe8

000013c4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    13c4:	b480      	push	{r7}
    13c6:	b085      	sub	sp, #20
    13c8:	af00      	add	r7, sp, #0
    13ca:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    13ce:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1410 <calculate_k+0x4c>
    13d2:	ed97 6b00 	vldr	d6, [r7]
    13d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    13da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    13de:	ee17 3a90 	vmov	r3, s15
    13e2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	2b01      	cmp	r3, #1
    13e8:	d00b      	beq.n	1402 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    13ea:	e002      	b.n	13f2 <calculate_k+0x2e>
			k --;
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	3b01      	subs	r3, #1
    13f0:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    13f2:	68fb      	ldr	r3, [r7, #12]
    13f4:	2b3e      	cmp	r3, #62	; 0x3e
    13f6:	d8f9      	bhi.n	13ec <calculate_k+0x28>
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	f003 0301 	and.w	r3, r3, #1
    13fe:	2b00      	cmp	r3, #0
    1400:	d1f4      	bne.n	13ec <calculate_k+0x28>
		}
	}
	return (k);
    1402:	68fb      	ldr	r3, [r7, #12]
}
    1404:	4618      	mov	r0, r3
    1406:	3714      	adds	r7, #20
    1408:	46bd      	mov	sp, r7
    140a:	f85d 7b04 	ldr.w	r7, [sp], #4
    140e:	4770      	bx	lr
    1410:	20000000 	.word	0x20000000
    1414:	41ee8c21 	.word	0x41ee8c21

00001418 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1418:	b580      	push	{r7, lr}
    141a:	b082      	sub	sp, #8
    141c:	af00      	add	r7, sp, #0
    141e:	4603      	mov	r3, r0
    1420:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    1422:	79fb      	ldrb	r3, [r7, #7]
    1424:	2b00      	cmp	r3, #0
    1426:	d003      	beq.n	1430 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1428:	4b0f      	ldr	r3, [pc, #60]	; (1468 <start_POP_calibration+0x50>)
    142a:	2201      	movs	r2, #1
    142c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1430:	2201      	movs	r2, #1
    1432:	2102      	movs	r1, #2
    1434:	480d      	ldr	r0, [pc, #52]	; (146c <start_POP_calibration+0x54>)
    1436:	f000 fc3f 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    143a:	200a      	movs	r0, #10
    143c:	f000 fc10 	bl	1c60 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1440:	4b0b      	ldr	r3, [pc, #44]	; (1470 <start_POP_calibration+0x58>)
    1442:	2200      	movs	r2, #0
    1444:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    1446:	4b08      	ldr	r3, [pc, #32]	; (1468 <start_POP_calibration+0x50>)
    1448:	2204      	movs	r2, #4
    144a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    144c:	4b09      	ldr	r3, [pc, #36]	; (1474 <start_POP_calibration+0x5c>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	4618      	mov	r0, r3
    1452:	f000 fac3 	bl	19dc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    1456:	2200      	movs	r2, #0
    1458:	2102      	movs	r1, #2
    145a:	4804      	ldr	r0, [pc, #16]	; (146c <start_POP_calibration+0x54>)
    145c:	f000 fc2c 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1460:	bf00      	nop
    1462:	3708      	adds	r7, #8
    1464:	46bd      	mov	sp, r7
    1466:	bd80      	pop	{r7, pc}
    1468:	200005b8 	.word	0x200005b8
    146c:	58020400 	.word	0x58020400
    1470:	200005a6 	.word	0x200005a6
    1474:	20000018 	.word	0x20000018

00001478 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	4603      	mov	r3, r0
    1480:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    1482:	79fb      	ldrb	r3, [r7, #7]
    1484:	2b00      	cmp	r3, #0
    1486:	d003      	beq.n	1490 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1488:	4b1c      	ldr	r3, [pc, #112]	; (14fc <start_MW_sweep+0x84>)
    148a:	2202      	movs	r2, #2
    148c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    1490:	2201      	movs	r2, #1
    1492:	2102      	movs	r1, #2
    1494:	481a      	ldr	r0, [pc, #104]	; (1500 <start_MW_sweep+0x88>)
    1496:	f000 fc0f 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    149a:	2201      	movs	r2, #1
    149c:	2102      	movs	r1, #2
    149e:	4819      	ldr	r0, [pc, #100]	; (1504 <start_MW_sweep+0x8c>)
    14a0:	f000 fc0a 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    14a4:	4b15      	ldr	r3, [pc, #84]	; (14fc <start_MW_sweep+0x84>)
    14a6:	685b      	ldr	r3, [r3, #4]
    14a8:	4a14      	ldr	r2, [pc, #80]	; (14fc <start_MW_sweep+0x84>)
    14aa:	6891      	ldr	r1, [r2, #8]
    14ac:	4a13      	ldr	r2, [pc, #76]	; (14fc <start_MW_sweep+0x84>)
    14ae:	7852      	ldrb	r2, [r2, #1]
    14b0:	4618      	mov	r0, r3
    14b2:	f7ff fb41 	bl	b38 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    14b6:	4b11      	ldr	r3, [pc, #68]	; (14fc <start_MW_sweep+0x84>)
    14b8:	2202      	movs	r2, #2
    14ba:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    14bc:	4b0f      	ldr	r3, [pc, #60]	; (14fc <start_MW_sweep+0x84>)
    14be:	2200      	movs	r2, #0
    14c0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    14c2:	200a      	movs	r0, #10
    14c4:	f000 fbcc 	bl	1c60 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    14c8:	4b0f      	ldr	r3, [pc, #60]	; (1508 <start_MW_sweep+0x90>)
    14ca:	2200      	movs	r2, #0
    14cc:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    14ce:	2200      	movs	r2, #0
    14d0:	2101      	movs	r1, #1
    14d2:	480e      	ldr	r0, [pc, #56]	; (150c <start_MW_sweep+0x94>)
    14d4:	f000 fbf0 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    14d8:	4b0d      	ldr	r3, [pc, #52]	; (1510 <start_MW_sweep+0x98>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	4618      	mov	r0, r3
    14de:	f000 fa7d 	bl	19dc <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    14e2:	4b0c      	ldr	r3, [pc, #48]	; (1514 <start_MW_sweep+0x9c>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	4618      	mov	r0, r3
    14e8:	f000 fa78 	bl	19dc <start_timer>
	sample_count = 0; //reset sample count
    14ec:	4b06      	ldr	r3, [pc, #24]	; (1508 <start_MW_sweep+0x90>)
    14ee:	2200      	movs	r2, #0
    14f0:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    14f2:	2301      	movs	r3, #1
}
    14f4:	4618      	mov	r0, r3
    14f6:	3708      	adds	r7, #8
    14f8:	46bd      	mov	sp, r7
    14fa:	bd80      	pop	{r7, pc}
    14fc:	200005b8 	.word	0x200005b8
    1500:	58021000 	.word	0x58021000
    1504:	58020400 	.word	0x58020400
    1508:	200005a6 	.word	0x200005a6
    150c:	58021800 	.word	0x58021800
    1510:	20000018 	.word	0x20000018
    1514:	2000001c 	.word	0x2000001c

00001518 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
    1518:	b580      	push	{r7, lr}
    151a:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <start_continuous_MW_sweep+0x18>)
    151e:	2200      	movs	r2, #0
    1520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    1524:	2000      	movs	r0, #0
    1526:	f7ff ff77 	bl	1418 <start_POP_calibration>
}
    152a:	bf00      	nop
    152c:	bd80      	pop	{r7, pc}
    152e:	bf00      	nop
    1530:	200005b8 	.word	0x200005b8

00001534 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    1534:	b580      	push	{r7, lr}
    1536:	b08a      	sub	sp, #40	; 0x28
    1538:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    153a:	4b95      	ldr	r3, [pc, #596]	; (1790 <MW_update+0x25c>)
    153c:	781b      	ldrb	r3, [r3, #0]
    153e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1540:	2300      	movs	r3, #0
    1542:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    1544:	7dbb      	ldrb	r3, [r7, #22]
    1546:	2b04      	cmp	r3, #4
    1548:	f200 8109 	bhi.w	175e <MW_update+0x22a>
    154c:	a201      	add	r2, pc, #4	; (adr r2, 1554 <MW_update+0x20>)
    154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1552:	bf00      	nop
    1554:	00001777 	.word	0x00001777
    1558:	00001777 	.word	0x00001777
    155c:	00001569 	.word	0x00001569
    1560:	000015ab 	.word	0x000015ab
    1564:	000016eb 	.word	0x000016eb
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1568:	4b8a      	ldr	r3, [pc, #552]	; (1794 <MW_update+0x260>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	4618      	mov	r0, r3
    156e:	f000 fa65 	bl	1a3c <check_timer>
    1572:	4603      	mov	r3, r0
    1574:	f241 3288 	movw	r2, #5000	; 0x1388
    1578:	4293      	cmp	r3, r2
    157a:	d201      	bcs.n	1580 <MW_update+0x4c>
    157c:	2300      	movs	r3, #0
    157e:	e0fe      	b.n	177e <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1580:	4b84      	ldr	r3, [pc, #528]	; (1794 <MW_update+0x260>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	4618      	mov	r0, r3
    1586:	f000 fa47 	bl	1a18 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    158a:	2200      	movs	r2, #0
    158c:	2102      	movs	r1, #2
    158e:	4882      	ldr	r0, [pc, #520]	; (1798 <MW_update+0x264>)
    1590:	f000 fb92 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
    1594:	4b7e      	ldr	r3, [pc, #504]	; (1790 <MW_update+0x25c>)
    1596:	2203      	movs	r2, #3
    1598:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    159a:	4b7e      	ldr	r3, [pc, #504]	; (1794 <MW_update+0x260>)
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	4618      	mov	r0, r3
    15a0:	f000 fa1c 	bl	19dc <start_timer>
			action_taken = true;
    15a4:	2301      	movs	r3, #1
    15a6:	75fb      	strb	r3, [r7, #23]
			break;
    15a8:	e0e8      	b.n	177c <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    15aa:	4b7a      	ldr	r3, [pc, #488]	; (1794 <MW_update+0x260>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	4618      	mov	r0, r3
    15b0:	f000 fa44 	bl	1a3c <check_timer>
    15b4:	4602      	mov	r2, r0
    15b6:	4b76      	ldr	r3, [pc, #472]	; (1790 <MW_update+0x25c>)
    15b8:	69db      	ldr	r3, [r3, #28]
    15ba:	429a      	cmp	r2, r3
    15bc:	d201      	bcs.n	15c2 <MW_update+0x8e>
    15be:	2300      	movs	r3, #0
    15c0:	e0dd      	b.n	177e <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    15c2:	2301      	movs	r3, #1
    15c4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    15c6:	4b73      	ldr	r3, [pc, #460]	; (1794 <MW_update+0x260>)
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	4618      	mov	r0, r3
    15cc:	f000 fa24 	bl	1a18 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    15d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15d4:	4870      	ldr	r0, [pc, #448]	; (1798 <MW_update+0x264>)
    15d6:	f000 fb37 	bl	1c48 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    15da:	2201      	movs	r2, #1
    15dc:	2102      	movs	r1, #2
    15de:	486e      	ldr	r0, [pc, #440]	; (1798 <MW_update+0x264>)
    15e0:	f000 fb6a 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    15e4:	4b6a      	ldr	r3, [pc, #424]	; (1790 <MW_update+0x25c>)
    15e6:	2202      	movs	r2, #2
    15e8:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    15ea:	4b69      	ldr	r3, [pc, #420]	; (1790 <MW_update+0x25c>)
    15ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15ee:	4b68      	ldr	r3, [pc, #416]	; (1790 <MW_update+0x25c>)
    15f0:	68db      	ldr	r3, [r3, #12]
    15f2:	429a      	cmp	r2, r3
    15f4:	d15c      	bne.n	16b0 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    15f6:	2201      	movs	r2, #1
    15f8:	2101      	movs	r1, #1
    15fa:	4868      	ldr	r0, [pc, #416]	; (179c <MW_update+0x268>)
    15fc:	f000 fb5c 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1600:	4b67      	ldr	r3, [pc, #412]	; (17a0 <MW_update+0x26c>)
    1602:	681b      	ldr	r3, [r3, #0]
    1604:	4618      	mov	r0, r3
    1606:	f000 fa19 	bl	1a3c <check_timer>
    160a:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    160c:	4b64      	ldr	r3, [pc, #400]	; (17a0 <MW_update+0x26c>)
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	4618      	mov	r0, r3
    1612:	f000 fa01 	bl	1a18 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    1616:	68bb      	ldr	r3, [r7, #8]
    1618:	ee07 3a90 	vmov	s15, r3
    161c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1620:	ed9f 6b59 	vldr	d6, [pc, #356]	; 1788 <MW_update+0x254>
    1624:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1628:	4b59      	ldr	r3, [pc, #356]	; (1790 <MW_update+0x25c>)
    162a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    162e:	495d      	ldr	r1, [pc, #372]	; (17a4 <MW_update+0x270>)
    1630:	8809      	ldrh	r1, [r1, #0]
    1632:	b289      	uxth	r1, r1
    1634:	9102      	str	r1, [sp, #8]
    1636:	e9cd 2300 	strd	r2, r3, [sp]
    163a:	ec53 2b15 	vmov	r2, r3, d5
    163e:	485a      	ldr	r0, [pc, #360]	; (17a8 <MW_update+0x274>)
    1640:	f000 fb4a 	bl	1cd8 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1644:	4b52      	ldr	r3, [pc, #328]	; (1790 <MW_update+0x25c>)
    1646:	695b      	ldr	r3, [r3, #20]
    1648:	b29a      	uxth	r2, r3
    164a:	4b51      	ldr	r3, [pc, #324]	; (1790 <MW_update+0x25c>)
    164c:	68db      	ldr	r3, [r3, #12]
    164e:	3301      	adds	r3, #1
    1650:	b29b      	uxth	r3, r3
    1652:	fb12 f303 	smulbb	r3, r2, r3
    1656:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    1658:	4b4d      	ldr	r3, [pc, #308]	; (1790 <MW_update+0x25c>)
    165a:	68db      	ldr	r3, [r3, #12]
    165c:	b29a      	uxth	r2, r3
    165e:	88fb      	ldrh	r3, [r7, #6]
    1660:	4413      	add	r3, r2
    1662:	b29b      	uxth	r3, r3
    1664:	3301      	adds	r3, #1
    1666:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1668:	4b4e      	ldr	r3, [pc, #312]	; (17a4 <MW_update+0x270>)
    166a:	881b      	ldrh	r3, [r3, #0]
    166c:	b29b      	uxth	r3, r3
    166e:	88fa      	ldrh	r2, [r7, #6]
    1670:	429a      	cmp	r2, r3
    1672:	d010      	beq.n	1696 <MW_update+0x162>
    1674:	4b4b      	ldr	r3, [pc, #300]	; (17a4 <MW_update+0x270>)
    1676:	881b      	ldrh	r3, [r3, #0]
    1678:	b29b      	uxth	r3, r3
    167a:	88ba      	ldrh	r2, [r7, #4]
    167c:	429a      	cmp	r2, r3
    167e:	d00a      	beq.n	1696 <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    1680:	88fb      	ldrh	r3, [r7, #6]
    1682:	4a48      	ldr	r2, [pc, #288]	; (17a4 <MW_update+0x270>)
    1684:	8812      	ldrh	r2, [r2, #0]
    1686:	b292      	uxth	r2, r2
    1688:	4619      	mov	r1, r3
    168a:	4848      	ldr	r0, [pc, #288]	; (17ac <MW_update+0x278>)
    168c:	f000 fb24 	bl	1cd8 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    1690:	4847      	ldr	r0, [pc, #284]	; (17b0 <MW_update+0x27c>)
    1692:	f000 facd 	bl	1c30 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    1696:	4b3e      	ldr	r3, [pc, #248]	; (1790 <MW_update+0x25c>)
    1698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    169c:	2b02      	cmp	r3, #2
    169e:	d103      	bne.n	16a8 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
    16a0:	4b3b      	ldr	r3, [pc, #236]	; (1790 <MW_update+0x25c>)
    16a2:	2200      	movs	r2, #0
    16a4:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    16a6:	e069      	b.n	177c <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    16a8:	2000      	movs	r0, #0
    16aa:	f7ff fee5 	bl	1478 <start_MW_sweep>
			break;
    16ae:	e065      	b.n	177c <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
    16b0:	4b37      	ldr	r3, [pc, #220]	; (1790 <MW_update+0x25c>)
    16b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16b4:	3301      	adds	r3, #1
    16b6:	4a36      	ldr	r2, [pc, #216]	; (1790 <MW_update+0x25c>)
    16b8:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    16ba:	4b35      	ldr	r3, [pc, #212]	; (1790 <MW_update+0x25c>)
    16bc:	689a      	ldr	r2, [r3, #8]
    16be:	4b34      	ldr	r3, [pc, #208]	; (1790 <MW_update+0x25c>)
    16c0:	691b      	ldr	r3, [r3, #16]
    16c2:	4933      	ldr	r1, [pc, #204]	; (1790 <MW_update+0x25c>)
    16c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    16c6:	fb01 f303 	mul.w	r3, r1, r3
    16ca:	4413      	add	r3, r2
    16cc:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    16ce:	4b30      	ldr	r3, [pc, #192]	; (1790 <MW_update+0x25c>)
    16d0:	685b      	ldr	r3, [r3, #4]
    16d2:	4a2f      	ldr	r2, [pc, #188]	; (1790 <MW_update+0x25c>)
    16d4:	7852      	ldrb	r2, [r2, #1]
    16d6:	68f9      	ldr	r1, [r7, #12]
    16d8:	4618      	mov	r0, r3
    16da:	f7ff fa2d 	bl	b38 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    16de:	4b2d      	ldr	r3, [pc, #180]	; (1794 <MW_update+0x260>)
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	4618      	mov	r0, r3
    16e4:	f000 f97a 	bl	19dc <start_timer>
			break;
    16e8:	e048      	b.n	177c <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    16ea:	4b2e      	ldr	r3, [pc, #184]	; (17a4 <MW_update+0x270>)
    16ec:	881b      	ldrh	r3, [r3, #0]
    16ee:	b29b      	uxth	r3, r3
    16f0:	2b63      	cmp	r3, #99	; 0x63
    16f2:	d942      	bls.n	177a <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    16f4:	4b27      	ldr	r3, [pc, #156]	; (1794 <MW_update+0x260>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	4618      	mov	r0, r3
    16fa:	f000 f99f 	bl	1a3c <check_timer>
    16fe:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1700:	693b      	ldr	r3, [r7, #16]
    1702:	ee07 3a90 	vmov	s15, r3
    1706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    170a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 17b4 <MW_update+0x280>
    170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1716:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    171a:	ee37 7b06 	vadd.f64	d7, d7, d6
    171e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1722:	ee17 2a90 	vmov	r2, s15
    1726:	4b24      	ldr	r3, [pc, #144]	; (17b8 <MW_update+0x284>)
    1728:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    172a:	4b1a      	ldr	r3, [pc, #104]	; (1794 <MW_update+0x260>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	4618      	mov	r0, r3
    1730:	f000 f972 	bl	1a18 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1734:	4b20      	ldr	r3, [pc, #128]	; (17b8 <MW_update+0x284>)
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	4619      	mov	r1, r3
    173a:	4820      	ldr	r0, [pc, #128]	; (17bc <MW_update+0x288>)
    173c:	f000 facc 	bl	1cd8 <__printf_veneer>
				action_taken = true;
    1740:	2301      	movs	r3, #1
    1742:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1744:	4b12      	ldr	r3, [pc, #72]	; (1790 <MW_update+0x25c>)
    1746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    174a:	2b01      	cmp	r3, #1
    174c:	d103      	bne.n	1756 <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    174e:	4b10      	ldr	r3, [pc, #64]	; (1790 <MW_update+0x25c>)
    1750:	2200      	movs	r2, #0
    1752:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1754:	e011      	b.n	177a <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1756:	2000      	movs	r0, #0
    1758:	f7ff fe8e 	bl	1478 <start_MW_sweep>
			break;
    175c:	e00d      	b.n	177a <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    175e:	4b0c      	ldr	r3, [pc, #48]	; (1790 <MW_update+0x25c>)
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	4619      	mov	r1, r3
    1764:	4816      	ldr	r0, [pc, #88]	; (17c0 <MW_update+0x28c>)
    1766:	f000 fab7 	bl	1cd8 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    176a:	7dbb      	ldrb	r3, [r7, #22]
    176c:	4619      	mov	r1, r3
    176e:	4815      	ldr	r0, [pc, #84]	; (17c4 <MW_update+0x290>)
    1770:	f000 fab2 	bl	1cd8 <__printf_veneer>
    1774:	e002      	b.n	177c <MW_update+0x248>
			break; //no action to take
    1776:	bf00      	nop
    1778:	e000      	b.n	177c <MW_update+0x248>
			break;
    177a:	bf00      	nop
	}
    return(action_taken);
    177c:	7dfb      	ldrb	r3, [r7, #23]
}
    177e:	4618      	mov	r0, r3
    1780:	3718      	adds	r7, #24
    1782:	46bd      	mov	sp, r7
    1784:	bd80      	pop	{r7, pc}
    1786:	bf00      	nop
    1788:	00000000 	.word	0x00000000
    178c:	412e8480 	.word	0x412e8480
    1790:	200005b8 	.word	0x200005b8
    1794:	20000018 	.word	0x20000018
    1798:	58020400 	.word	0x58020400
    179c:	58021800 	.word	0x58021800
    17a0:	2000001c 	.word	0x2000001c
    17a4:	200005a6 	.word	0x200005a6
    17a8:	0801e028 	.word	0x0801e028
    17ac:	0801e060 	.word	0x0801e060
    17b0:	0801e09c 	.word	0x0801e09c
    17b4:	42c80000 	.word	0x42c80000
    17b8:	200005a8 	.word	0x200005a8
    17bc:	0801e0c0 	.word	0x0801e0c0
    17c0:	0801e0f0 	.word	0x0801e0f0
    17c4:	0801e11c 	.word	0x0801e11c

000017c8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    17c8:	b580      	push	{r7, lr}
    17ca:	b090      	sub	sp, #64	; 0x40
    17cc:	af02      	add	r7, sp, #8
    17ce:	ed87 0b02 	vstr	d0, [r7, #8]
    17d2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    17d6:	486a      	ldr	r0, [pc, #424]	; (1980 <MW_frequency_toggle+0x1b8>)
    17d8:	f000 fa2a 	bl	1c30 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    17dc:	ed97 7b02 	vldr	d7, [r7, #8]
    17e0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1960 <MW_frequency_toggle+0x198>
    17e4:	ee87 4b06 	vdiv.f64	d4, d7, d6
    17e8:	ed97 6b00 	vldr	d6, [r7]
    17ec:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1960 <MW_frequency_toggle+0x198>
    17f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17f4:	ed8d 7b00 	vstr	d7, [sp]
    17f8:	ec53 2b14 	vmov	r2, r3, d4
    17fc:	4861      	ldr	r0, [pc, #388]	; (1984 <MW_frequency_toggle+0x1bc>)
    17fe:	f000 fa6b 	bl	1cd8 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    1802:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1968 <MW_frequency_toggle+0x1a0>
    1806:	ed97 6b02 	vldr	d6, [r7, #8]
    180a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    180e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1812:	ee17 3a90 	vmov	r3, s15
    1816:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    181a:	2b01      	cmp	r3, #1
    181c:	d00b      	beq.n	1836 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    181e:	e002      	b.n	1826 <MW_frequency_toggle+0x5e>
			k_one--;
    1820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1822:	3b01      	subs	r3, #1
    1824:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1828:	2b3e      	cmp	r3, #62	; 0x3e
    182a:	d8f9      	bhi.n	1820 <MW_frequency_toggle+0x58>
    182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    182e:	f003 0301 	and.w	r3, r3, #1
    1832:	2b00      	cmp	r3, #0
    1834:	d1f4      	bne.n	1820 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1836:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1968 <MW_frequency_toggle+0x1a0>
    183a:	ed97 6b00 	vldr	d6, [r7]
    183e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1842:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1846:	ee17 3a90 	vmov	r3, s15
    184a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    184e:	2b01      	cmp	r3, #1
    1850:	d00b      	beq.n	186a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1852:	e002      	b.n	185a <MW_frequency_toggle+0x92>
			k_two--;
    1854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1856:	3b01      	subs	r3, #1
    1858:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    185c:	2b3e      	cmp	r3, #62	; 0x3e
    185e:	d8f9      	bhi.n	1854 <MW_frequency_toggle+0x8c>
    1860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1862:	f003 0301 	and.w	r3, r3, #1
    1866:	2b00      	cmp	r3, #0
    1868:	d1f4      	bne.n	1854 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    186c:	ee07 3a90 	vmov	s15, r3
    1870:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1874:	ed97 7b02 	vldr	d7, [r7, #8]
    1878:	ee26 6b07 	vmul.f64	d6, d6, d7
    187c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1970 <MW_frequency_toggle+0x1a8>
    1880:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1884:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    188a:	ee07 3a90 	vmov	s15, r3
    188e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1892:	ed97 7b00 	vldr	d7, [r7]
    1896:	ee26 6b07 	vmul.f64	d6, d6, d7
    189a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1970 <MW_frequency_toggle+0x1a8>
    189e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18a2:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    18a6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    18aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18ae:	ee17 3a90 	vmov	r3, s15
    18b2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    18b4:	69fb      	ldr	r3, [r7, #28]
    18b6:	ee07 3a90 	vmov	s15, r3
    18ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18be:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    18c2:	ee36 7b47 	vsub.f64	d7, d6, d7
    18c6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1978 <MW_frequency_toggle+0x1b0>
    18ca:	ee27 7b06 	vmul.f64	d7, d7, d6
    18ce:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    18d2:	ee37 7b06 	vadd.f64	d7, d7, d6
    18d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18da:	ee17 3a90 	vmov	r3, s15
    18de:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    18e0:	ed97 7b08 	vldr	d7, [r7, #32]
    18e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18e8:	ee17 3a90 	vmov	r3, s15
    18ec:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    18ee:	697b      	ldr	r3, [r7, #20]
    18f0:	ee07 3a90 	vmov	s15, r3
    18f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18f8:	ed97 6b08 	vldr	d6, [r7, #32]
    18fc:	ee36 7b47 	vsub.f64	d7, d6, d7
    1900:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1978 <MW_frequency_toggle+0x1b0>
    1904:	ee27 7b06 	vmul.f64	d7, d7, d6
    1908:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    190c:	ee37 7b06 	vadd.f64	d7, d7, d6
    1910:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1914:	ee17 3a90 	vmov	r3, s15
    1918:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    191a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    191c:	69b9      	ldr	r1, [r7, #24]
    191e:	69f8      	ldr	r0, [r7, #28]
    1920:	f7ff f90a 	bl	b38 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1924:	2200      	movs	r2, #0
    1926:	2101      	movs	r1, #1
    1928:	4817      	ldr	r0, [pc, #92]	; (1988 <MW_frequency_toggle+0x1c0>)
    192a:	f000 f9c5 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    192e:	4b17      	ldr	r3, [pc, #92]	; (198c <MW_frequency_toggle+0x1c4>)
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	2164      	movs	r1, #100	; 0x64
    1934:	4618      	mov	r0, r3
    1936:	f000 f88d 	bl	1a54 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    193a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    193c:	6939      	ldr	r1, [r7, #16]
    193e:	6978      	ldr	r0, [r7, #20]
    1940:	f7ff f8fa 	bl	b38 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1944:	2201      	movs	r2, #1
    1946:	2101      	movs	r1, #1
    1948:	480f      	ldr	r0, [pc, #60]	; (1988 <MW_frequency_toggle+0x1c0>)
    194a:	f000 f9b5 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    194e:	4b0f      	ldr	r3, [pc, #60]	; (198c <MW_frequency_toggle+0x1c4>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	2164      	movs	r1, #100	; 0x64
    1954:	4618      	mov	r0, r3
    1956:	f000 f87d 	bl	1a54 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    195a:	e7de      	b.n	191a <MW_frequency_toggle+0x152>
    195c:	f3af 8000 	nop.w
    1960:	00000000 	.word	0x00000000
    1964:	41cdcd65 	.word	0x41cdcd65
    1968:	20000000 	.word	0x20000000
    196c:	41ee8c21 	.word	0x41ee8c21
    1970:	00000000 	.word	0x00000000
    1974:	4187d784 	.word	0x4187d784
    1978:	00000000 	.word	0x00000000
    197c:	41700000 	.word	0x41700000
    1980:	0801e134 	.word	0x0801e134
    1984:	0801e158 	.word	0x0801e158
    1988:	58021800 	.word	0x58021800
    198c:	20000014 	.word	0x20000014

00001990 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1990:	b580      	push	{r7, lr}
    1992:	b084      	sub	sp, #16
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1998:	2300      	movs	r3, #0
    199a:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	2b1f      	cmp	r3, #31
    19a0:	d904      	bls.n	19ac <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    19a2:	480d      	ldr	r0, [pc, #52]	; (19d8 <set_SDO_output+0x48>)
    19a4:	f000 f944 	bl	1c30 <__puts_veneer>
		Error_Handler();
    19a8:	f000 f936 	bl	1c18 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    19ac:	200f      	movs	r0, #15
    19ae:	f7fe ff29 	bl	804 <synth_readreg>
    19b2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    19b4:	68fb      	ldr	r3, [r7, #12]
    19b6:	f023 031f 	bic.w	r3, r3, #31
    19ba:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    19bc:	68fa      	ldr	r2, [r7, #12]
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	4313      	orrs	r3, r2
    19c2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    19c4:	2301      	movs	r3, #1
    19c6:	2200      	movs	r2, #0
    19c8:	210f      	movs	r1, #15
    19ca:	68f8      	ldr	r0, [r7, #12]
    19cc:	f7fe fea0 	bl	710 <synth_writereg>
}
    19d0:	bf00      	nop
    19d2:	3710      	adds	r7, #16
    19d4:	46bd      	mov	sp, r7
    19d6:	bd80      	pop	{r7, pc}
    19d8:	0801e180 	.word	0x0801e180

000019dc <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    19dc:	b480      	push	{r7}
    19de:	b083      	sub	sp, #12
    19e0:	af00      	add	r7, sp, #0
    19e2:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	f023 0201 	bic.w	r2, r3, #1
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	695b      	ldr	r3, [r3, #20]
    19f4:	f043 0201 	orr.w	r2, r3, #1
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	f043 0201 	orr.w	r2, r3, #1
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a0c:	4618      	mov	r0, r3
    1a0e:	370c      	adds	r7, #12
    1a10:	46bd      	mov	sp, r7
    1a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a16:	4770      	bx	lr

00001a18 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1a18:	b480      	push	{r7}
    1a1a:	b083      	sub	sp, #12
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	f023 0201 	bic.w	r2, r3, #1
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a30:	4618      	mov	r0, r3
    1a32:	370c      	adds	r7, #12
    1a34:	46bd      	mov	sp, r7
    1a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a3a:	4770      	bx	lr

00001a3c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1a3c:	b480      	push	{r7}
    1a3e:	b083      	sub	sp, #12
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a48:	4618      	mov	r0, r3
    1a4a:	370c      	adds	r7, #12
    1a4c:	46bd      	mov	sp, r7
    1a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a52:	4770      	bx	lr

00001a54 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1a54:	b580      	push	{r7, lr}
    1a56:	b084      	sub	sp, #16
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
    1a5c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1a5e:	6878      	ldr	r0, [r7, #4]
    1a60:	f7ff ffbc 	bl	19dc <start_timer>
    1a64:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1a66:	bf00      	nop
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a6c:	683a      	ldr	r2, [r7, #0]
    1a6e:	429a      	cmp	r2, r3
    1a70:	d8fa      	bhi.n	1a68 <timer_delay+0x14>

	stop_timer(timer);
    1a72:	6878      	ldr	r0, [r7, #4]
    1a74:	f7ff ffd0 	bl	1a18 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1a78:	bf00      	nop
    1a7a:	3710      	adds	r7, #16
    1a7c:	46bd      	mov	sp, r7
    1a7e:	bd80      	pop	{r7, pc}

00001a80 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    1a80:	b580      	push	{r7, lr}
    1a82:	b086      	sub	sp, #24
    1a84:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    1a86:	2300      	movs	r3, #0
    1a88:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    1a8a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a8e:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    1a90:	2300      	movs	r3, #0
    1a92:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    1a94:	2314      	movs	r3, #20
    1a96:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1a98:	2201      	movs	r2, #1
    1a9a:	2102      	movs	r1, #2
    1a9c:	4826      	ldr	r0, [pc, #152]	; (1b38 <measure_POP_cycle+0xb8>)
    1a9e:	f000 f90b 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1aa2:	4b26      	ldr	r3, [pc, #152]	; (1b3c <measure_POP_cycle+0xbc>)
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	4618      	mov	r0, r3
    1aa8:	f7ff ff98 	bl	19dc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1aac:	2200      	movs	r2, #0
    1aae:	2102      	movs	r1, #2
    1ab0:	4821      	ldr	r0, [pc, #132]	; (1b38 <measure_POP_cycle+0xb8>)
    1ab2:	f000 f901 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    1ab6:	4822      	ldr	r0, [pc, #136]	; (1b40 <measure_POP_cycle+0xc0>)
    1ab8:	f000 f906 	bl	1cc8 <__HAL_ADC_GetValue_veneer>
    1abc:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1abe:	e00c      	b.n	1ada <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1ac0:	481f      	ldr	r0, [pc, #124]	; (1b40 <measure_POP_cycle+0xc0>)
    1ac2:	f000 f901 	bl	1cc8 <__HAL_ADC_GetValue_veneer>
    1ac6:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1ac8:	697a      	ldr	r2, [r7, #20]
    1aca:	693b      	ldr	r3, [r7, #16]
    1acc:	429a      	cmp	r2, r3
    1ace:	d0f7      	beq.n	1ac0 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1ad0:	697b      	ldr	r3, [r7, #20]
    1ad2:	613b      	str	r3, [r7, #16]
		cycle_count++;
    1ad4:	7bfb      	ldrb	r3, [r7, #15]
    1ad6:	3301      	adds	r3, #1
    1ad8:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1ada:	7bfa      	ldrb	r2, [r7, #15]
    1adc:	7bbb      	ldrb	r3, [r7, #14]
    1ade:	429a      	cmp	r2, r3
    1ae0:	d3f2      	bcc.n	1ac8 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    1ae2:	4b16      	ldr	r3, [pc, #88]	; (1b3c <measure_POP_cycle+0xbc>)
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7ff ffa8 	bl	1a3c <check_timer>
    1aec:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1aee:	4b13      	ldr	r3, [pc, #76]	; (1b3c <measure_POP_cycle+0xbc>)
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	4618      	mov	r0, r3
    1af4:	f7ff ffa2 	bl	1a3c <check_timer>
    1af8:	ee07 0a90 	vmov	s15, r0
    1afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1b00:	7bbb      	ldrb	r3, [r7, #14]
    1b02:	ee07 3a90 	vmov	s15, r3
    1b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1b12:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1b16:	ee37 7b06 	vadd.f64	d7, d7, d6
    1b1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1b1e:	ee17 3a90 	vmov	r3, s15
    1b22:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1b24:	4b05      	ldr	r3, [pc, #20]	; (1b3c <measure_POP_cycle+0xbc>)
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	4618      	mov	r0, r3
    1b2a:	f7ff ff75 	bl	1a18 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1b2e:	687b      	ldr	r3, [r7, #4]

}
    1b30:	4618      	mov	r0, r3
    1b32:	3718      	adds	r7, #24
    1b34:	46bd      	mov	sp, r7
    1b36:	bd80      	pop	{r7, pc}
    1b38:	58020400 	.word	0x58020400
    1b3c:	20000018 	.word	0x20000018
    1b40:	20000254 	.word	0x20000254

00001b44 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1b44:	b580      	push	{r7, lr}
    1b46:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1b48:	f240 1103 	movw	r1, #259	; 0x103
    1b4c:	480f      	ldr	r0, [pc, #60]	; (1b8c <start_pop+0x48>)
    1b4e:	f000 f8a3 	bl	1c98 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1b52:	4603      	mov	r3, r0
    1b54:	2b00      	cmp	r3, #0
    1b56:	d004      	beq.n	1b62 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1b58:	480d      	ldr	r0, [pc, #52]	; (1b90 <start_pop+0x4c>)
    1b5a:	f000 f869 	bl	1c30 <__puts_veneer>
		Error_Handler();
    1b5e:	f000 f85b 	bl	1c18 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1b62:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1b66:	4809      	ldr	r0, [pc, #36]	; (1b8c <start_pop+0x48>)
    1b68:	f000 f882 	bl	1c70 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1b6c:	4603      	mov	r3, r0
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d004      	beq.n	1b7c <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1b72:	4808      	ldr	r0, [pc, #32]	; (1b94 <start_pop+0x50>)
    1b74:	f000 f85c 	bl	1c30 <__puts_veneer>
		Error_Handler();
    1b78:	f000 f84e 	bl	1c18 <__Error_Handler_veneer>
	}

	pop_running = true;
    1b7c:	4b06      	ldr	r3, [pc, #24]	; (1b98 <start_pop+0x54>)
    1b7e:	2201      	movs	r2, #1
    1b80:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1b82:	4806      	ldr	r0, [pc, #24]	; (1b9c <start_pop+0x58>)
    1b84:	f000 f854 	bl	1c30 <__puts_veneer>

}
    1b88:	bf00      	nop
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	200002cc 	.word	0x200002cc
    1b90:	0801e1a4 	.word	0x0801e1a4
    1b94:	0801e1bc 	.word	0x0801e1bc
    1b98:	20000608 	.word	0x20000608
    1b9c:	0801e1d4 	.word	0x0801e1d4

00001ba0 <stop_pop>:
void stop_pop() {
    1ba0:	b580      	push	{r7, lr}
    1ba2:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1ba4:	f240 1103 	movw	r1, #259	; 0x103
    1ba8:	4813      	ldr	r0, [pc, #76]	; (1bf8 <stop_pop+0x58>)
    1baa:	f000 f845 	bl	1c38 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1bae:	4603      	mov	r3, r0
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d004      	beq.n	1bbe <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1bb4:	4811      	ldr	r0, [pc, #68]	; (1bfc <stop_pop+0x5c>)
    1bb6:	f000 f83b 	bl	1c30 <__puts_veneer>
		Error_Handler();
    1bba:	f000 f82d 	bl	1c18 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1bbe:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1bc2:	480d      	ldr	r0, [pc, #52]	; (1bf8 <stop_pop+0x58>)
    1bc4:	f000 f864 	bl	1c90 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1bc8:	4603      	mov	r3, r0
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d004      	beq.n	1bd8 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1bce:	480c      	ldr	r0, [pc, #48]	; (1c00 <stop_pop+0x60>)
    1bd0:	f000 f82e 	bl	1c30 <__puts_veneer>
		Error_Handler();
    1bd4:	f000 f820 	bl	1c18 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1bd8:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <stop_pop+0x64>)
    1bda:	2200      	movs	r2, #0
    1bdc:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <stop_pop+0x68>)
    1be0:	2200      	movs	r2, #0
    1be2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1be4:	2200      	movs	r2, #0
    1be6:	2102      	movs	r1, #2
    1be8:	4808      	ldr	r0, [pc, #32]	; (1c0c <stop_pop+0x6c>)
    1bea:	f000 f865 	bl	1cb8 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1bee:	4808      	ldr	r0, [pc, #32]	; (1c10 <stop_pop+0x70>)
    1bf0:	f000 f81e 	bl	1c30 <__puts_veneer>
}
    1bf4:	bf00      	nop
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	200002cc 	.word	0x200002cc
    1bfc:	0801e1e8 	.word	0x0801e1e8
    1c00:	0801e200 	.word	0x0801e200
    1c04:	20000604 	.word	0x20000604
    1c08:	20000608 	.word	0x20000608
    1c0c:	58021000 	.word	0x58021000
    1c10:	0801e218 	.word	0x0801e218
    1c14:	00000000 	.word	0x00000000

00001c18 <__Error_Handler_veneer>:
    1c18:	f85f f000 	ldr.w	pc, [pc]	; 1c1c <__Error_Handler_veneer+0x4>
    1c1c:	080033d9 	.word	0x080033d9

00001c20 <__pbuf_take_veneer>:
    1c20:	f85f f000 	ldr.w	pc, [pc]	; 1c24 <__pbuf_take_veneer+0x4>
    1c24:	0801199d 	.word	0x0801199d

00001c28 <__sprintf_veneer>:
    1c28:	f85f f000 	ldr.w	pc, [pc]	; 1c2c <__sprintf_veneer+0x4>
    1c2c:	0801b305 	.word	0x0801b305

00001c30 <__puts_veneer>:
    1c30:	f85f f000 	ldr.w	pc, [pc]	; 1c34 <__puts_veneer+0x4>
    1c34:	0801b2f5 	.word	0x0801b2f5

00001c38 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1c38:	f85f f000 	ldr.w	pc, [pc]	; 1c3c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1c3c:	080086b5 	.word	0x080086b5

00001c40 <__tcp_poll_veneer>:
    1c40:	f85f f000 	ldr.w	pc, [pc]	; 1c44 <__tcp_poll_veneer+0x4>
    1c44:	0801328d 	.word	0x0801328d

00001c48 <__HAL_GPIO_TogglePin_veneer>:
    1c48:	f85f f000 	ldr.w	pc, [pc]	; 1c4c <__HAL_GPIO_TogglePin_veneer+0x4>
    1c4c:	08007fcb 	.word	0x08007fcb

00001c50 <__HAL_GPIO_ReadPin_veneer>:
    1c50:	f85f f000 	ldr.w	pc, [pc]	; 1c54 <__HAL_GPIO_ReadPin_veneer+0x4>
    1c54:	08007f69 	.word	0x08007f69

00001c58 <__tcp_recved_veneer>:
    1c58:	f85f f000 	ldr.w	pc, [pc]	; 1c5c <__tcp_recved_veneer+0x4>
    1c5c:	080121e5 	.word	0x080121e5

00001c60 <__HAL_Delay_veneer>:
    1c60:	f85f f000 	ldr.w	pc, [pc]	; 1c64 <__HAL_Delay_veneer+0x4>
    1c64:	08004241 	.word	0x08004241

00001c68 <__pbuf_free_veneer>:
    1c68:	f85f f000 	ldr.w	pc, [pc]	; 1c6c <__pbuf_free_veneer+0x4>
    1c6c:	080114e5 	.word	0x080114e5

00001c70 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1c70:	f85f f000 	ldr.w	pc, [pc]	; 1c74 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1c74:	08008711 	.word	0x08008711

00001c78 <__strlen_veneer>:
    1c78:	f85f f000 	ldr.w	pc, [pc]	; 1c7c <__strlen_veneer+0x4>
    1c7c:	08002091 	.word	0x08002091

00001c80 <__memcpy_veneer>:
    1c80:	f85f f000 	ldr.w	pc, [pc]	; 1c84 <__memcpy_veneer+0x4>
    1c84:	0801b63b 	.word	0x0801b63b

00001c88 <__tcp_recv_veneer>:
    1c88:	f85f f000 	ldr.w	pc, [pc]	; 1c8c <__tcp_recv_veneer+0x4>
    1c8c:	080131c1 	.word	0x080131c1

00001c90 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1c90:	f85f f000 	ldr.w	pc, [pc]	; 1c94 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1c94:	080087f1 	.word	0x080087f1

00001c98 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1c98:	f85f f000 	ldr.w	pc, [pc]	; 1c9c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1c9c:	0800865b 	.word	0x0800865b

00001ca0 <__mem_free_veneer>:
    1ca0:	f85f f000 	ldr.w	pc, [pc]	; 1ca4 <__mem_free_veneer+0x4>
    1ca4:	0801014d 	.word	0x0801014d

00001ca8 <__tcp_write_veneer>:
    1ca8:	f85f f000 	ldr.w	pc, [pc]	; 1cac <__tcp_write_veneer+0x4>
    1cac:	08015ff1 	.word	0x08015ff1

00001cb0 <__tcp_arg_veneer>:
    1cb0:	f85f f000 	ldr.w	pc, [pc]	; 1cb4 <__tcp_arg_veneer+0x4>
    1cb4:	0801319d 	.word	0x0801319d

00001cb8 <__HAL_GPIO_WritePin_veneer>:
    1cb8:	f85f f000 	ldr.w	pc, [pc]	; 1cbc <__HAL_GPIO_WritePin_veneer+0x4>
    1cbc:	08007f99 	.word	0x08007f99

00001cc0 <__mem_malloc_veneer>:
    1cc0:	f85f f000 	ldr.w	pc, [pc]	; 1cc4 <__mem_malloc_veneer+0x4>
    1cc4:	08010409 	.word	0x08010409

00001cc8 <__HAL_ADC_GetValue_veneer>:
    1cc8:	f85f f000 	ldr.w	pc, [pc]	; 1ccc <__HAL_ADC_GetValue_veneer+0x4>
    1ccc:	08004ced 	.word	0x08004ced

00001cd0 <__ip4addr_ntoa_veneer>:
    1cd0:	f85f f000 	ldr.w	pc, [pc]	; 1cd4 <__ip4addr_ntoa_veneer+0x4>
    1cd4:	08019869 	.word	0x08019869

00001cd8 <__printf_veneer>:
    1cd8:	f85f f000 	ldr.w	pc, [pc]	; 1cdc <__printf_veneer+0x4>
    1cdc:	0801b229 	.word	0x0801b229

00001ce0 <__pbuf_ref_veneer>:
    1ce0:	f85f f000 	ldr.w	pc, [pc]	; 1ce4 <__pbuf_ref_veneer+0x4>
    1ce4:	08011625 	.word	0x08011625

00001ce8 <__pbuf_alloc_veneer>:
    1ce8:	f85f f000 	ldr.w	pc, [pc]	; 1cec <__pbuf_alloc_veneer+0x4>
    1cec:	08010f1d 	.word	0x08010f1d

00001cf0 <__tcp_abort_veneer>:
    1cf0:	f85f f000 	ldr.w	pc, [pc]	; 1cf4 <__tcp_abort_veneer+0x4>
    1cf4:	08012119 	.word	0x08012119

00001cf8 <__tcp_close_veneer>:
    1cf8:	f85f f000 	ldr.w	pc, [pc]	; 1cfc <__tcp_close_veneer+0x4>
    1cfc:	08011f45 	.word	0x08011f45

00001d00 <__tcp_err_veneer>:
    1d00:	f85f f000 	ldr.w	pc, [pc]	; 1d04 <__tcp_err_veneer+0x4>
    1d04:	08013249 	.word	0x08013249

00001d08 <__tcp_sent_veneer>:
    1d08:	f85f f000 	ldr.w	pc, [pc]	; 1d0c <__tcp_sent_veneer+0x4>
    1d0c:	08013205 	.word	0x08013205

Disassembly of section .text:

08001fb0 <__do_global_dtors_aux>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4c05      	ldr	r4, [pc, #20]	; (8001fc8 <__do_global_dtors_aux+0x18>)
 8001fb4:	7823      	ldrb	r3, [r4, #0]
 8001fb6:	b933      	cbnz	r3, 8001fc6 <__do_global_dtors_aux+0x16>
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__do_global_dtors_aux+0x1c>)
 8001fba:	b113      	cbz	r3, 8001fc2 <__do_global_dtors_aux+0x12>
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <__do_global_dtors_aux+0x20>)
 8001fbe:	f3af 8000 	nop.w
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	7023      	strb	r3, [r4, #0]
 8001fc6:	bd10      	pop	{r4, pc}
 8001fc8:	20000228 	.word	0x20000228
 8001fcc:	00000000 	.word	0x00000000
 8001fd0:	0801d4c8 	.word	0x0801d4c8

08001fd4 <frame_dummy>:
 8001fd4:	b508      	push	{r3, lr}
 8001fd6:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <frame_dummy+0x10>)
 8001fd8:	b11b      	cbz	r3, 8001fe2 <frame_dummy+0xe>
 8001fda:	4903      	ldr	r1, [pc, #12]	; (8001fe8 <frame_dummy+0x14>)
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <frame_dummy+0x18>)
 8001fde:	f3af 8000 	nop.w
 8001fe2:	bd08      	pop	{r3, pc}
 8001fe4:	00000000 	.word	0x00000000
 8001fe8:	2000022c 	.word	0x2000022c
 8001fec:	0801d4c8 	.word	0x0801d4c8

08001ff0 <memchr>:
 8001ff0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001ff4:	2a10      	cmp	r2, #16
 8001ff6:	db2b      	blt.n	8002050 <memchr+0x60>
 8001ff8:	f010 0f07 	tst.w	r0, #7
 8001ffc:	d008      	beq.n	8002010 <memchr+0x20>
 8001ffe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002002:	3a01      	subs	r2, #1
 8002004:	428b      	cmp	r3, r1
 8002006:	d02d      	beq.n	8002064 <memchr+0x74>
 8002008:	f010 0f07 	tst.w	r0, #7
 800200c:	b342      	cbz	r2, 8002060 <memchr+0x70>
 800200e:	d1f6      	bne.n	8001ffe <memchr+0xe>
 8002010:	b4f0      	push	{r4, r5, r6, r7}
 8002012:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002016:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800201a:	f022 0407 	bic.w	r4, r2, #7
 800201e:	f07f 0700 	mvns.w	r7, #0
 8002022:	2300      	movs	r3, #0
 8002024:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002028:	3c08      	subs	r4, #8
 800202a:	ea85 0501 	eor.w	r5, r5, r1
 800202e:	ea86 0601 	eor.w	r6, r6, r1
 8002032:	fa85 f547 	uadd8	r5, r5, r7
 8002036:	faa3 f587 	sel	r5, r3, r7
 800203a:	fa86 f647 	uadd8	r6, r6, r7
 800203e:	faa5 f687 	sel	r6, r5, r7
 8002042:	b98e      	cbnz	r6, 8002068 <memchr+0x78>
 8002044:	d1ee      	bne.n	8002024 <memchr+0x34>
 8002046:	bcf0      	pop	{r4, r5, r6, r7}
 8002048:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800204c:	f002 0207 	and.w	r2, r2, #7
 8002050:	b132      	cbz	r2, 8002060 <memchr+0x70>
 8002052:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002056:	3a01      	subs	r2, #1
 8002058:	ea83 0301 	eor.w	r3, r3, r1
 800205c:	b113      	cbz	r3, 8002064 <memchr+0x74>
 800205e:	d1f8      	bne.n	8002052 <memchr+0x62>
 8002060:	2000      	movs	r0, #0
 8002062:	4770      	bx	lr
 8002064:	3801      	subs	r0, #1
 8002066:	4770      	bx	lr
 8002068:	2d00      	cmp	r5, #0
 800206a:	bf06      	itte	eq
 800206c:	4635      	moveq	r5, r6
 800206e:	3803      	subeq	r0, #3
 8002070:	3807      	subne	r0, #7
 8002072:	f015 0f01 	tst.w	r5, #1
 8002076:	d107      	bne.n	8002088 <memchr+0x98>
 8002078:	3001      	adds	r0, #1
 800207a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800207e:	bf02      	ittt	eq
 8002080:	3001      	addeq	r0, #1
 8002082:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002086:	3001      	addeq	r0, #1
 8002088:	bcf0      	pop	{r4, r5, r6, r7}
 800208a:	3801      	subs	r0, #1
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <strlen>:
 8002090:	4603      	mov	r3, r0
 8002092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002096:	2a00      	cmp	r2, #0
 8002098:	d1fb      	bne.n	8002092 <strlen+0x2>
 800209a:	1a18      	subs	r0, r3, r0
 800209c:	3801      	subs	r0, #1
 800209e:	4770      	bx	lr

080020a0 <__aeabi_uldivmod>:
 80020a0:	b953      	cbnz	r3, 80020b8 <__aeabi_uldivmod+0x18>
 80020a2:	b94a      	cbnz	r2, 80020b8 <__aeabi_uldivmod+0x18>
 80020a4:	2900      	cmp	r1, #0
 80020a6:	bf08      	it	eq
 80020a8:	2800      	cmpeq	r0, #0
 80020aa:	bf1c      	itt	ne
 80020ac:	f04f 31ff 	movne.w	r1, #4294967295
 80020b0:	f04f 30ff 	movne.w	r0, #4294967295
 80020b4:	f000 b970 	b.w	8002398 <__aeabi_idiv0>
 80020b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80020bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80020c0:	f000 f806 	bl	80020d0 <__udivmoddi4>
 80020c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80020c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80020cc:	b004      	add	sp, #16
 80020ce:	4770      	bx	lr

080020d0 <__udivmoddi4>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	9e08      	ldr	r6, [sp, #32]
 80020d6:	460d      	mov	r5, r1
 80020d8:	4604      	mov	r4, r0
 80020da:	460f      	mov	r7, r1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d14a      	bne.n	8002176 <__udivmoddi4+0xa6>
 80020e0:	428a      	cmp	r2, r1
 80020e2:	4694      	mov	ip, r2
 80020e4:	d965      	bls.n	80021b2 <__udivmoddi4+0xe2>
 80020e6:	fab2 f382 	clz	r3, r2
 80020ea:	b143      	cbz	r3, 80020fe <__udivmoddi4+0x2e>
 80020ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80020f0:	f1c3 0220 	rsb	r2, r3, #32
 80020f4:	409f      	lsls	r7, r3
 80020f6:	fa20 f202 	lsr.w	r2, r0, r2
 80020fa:	4317      	orrs	r7, r2
 80020fc:	409c      	lsls	r4, r3
 80020fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8002102:	fa1f f58c 	uxth.w	r5, ip
 8002106:	fbb7 f1fe 	udiv	r1, r7, lr
 800210a:	0c22      	lsrs	r2, r4, #16
 800210c:	fb0e 7711 	mls	r7, lr, r1, r7
 8002110:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002114:	fb01 f005 	mul.w	r0, r1, r5
 8002118:	4290      	cmp	r0, r2
 800211a:	d90a      	bls.n	8002132 <__udivmoddi4+0x62>
 800211c:	eb1c 0202 	adds.w	r2, ip, r2
 8002120:	f101 37ff 	add.w	r7, r1, #4294967295
 8002124:	f080 811c 	bcs.w	8002360 <__udivmoddi4+0x290>
 8002128:	4290      	cmp	r0, r2
 800212a:	f240 8119 	bls.w	8002360 <__udivmoddi4+0x290>
 800212e:	3902      	subs	r1, #2
 8002130:	4462      	add	r2, ip
 8002132:	1a12      	subs	r2, r2, r0
 8002134:	b2a4      	uxth	r4, r4
 8002136:	fbb2 f0fe 	udiv	r0, r2, lr
 800213a:	fb0e 2210 	mls	r2, lr, r0, r2
 800213e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002142:	fb00 f505 	mul.w	r5, r0, r5
 8002146:	42a5      	cmp	r5, r4
 8002148:	d90a      	bls.n	8002160 <__udivmoddi4+0x90>
 800214a:	eb1c 0404 	adds.w	r4, ip, r4
 800214e:	f100 32ff 	add.w	r2, r0, #4294967295
 8002152:	f080 8107 	bcs.w	8002364 <__udivmoddi4+0x294>
 8002156:	42a5      	cmp	r5, r4
 8002158:	f240 8104 	bls.w	8002364 <__udivmoddi4+0x294>
 800215c:	4464      	add	r4, ip
 800215e:	3802      	subs	r0, #2
 8002160:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002164:	1b64      	subs	r4, r4, r5
 8002166:	2100      	movs	r1, #0
 8002168:	b11e      	cbz	r6, 8002172 <__udivmoddi4+0xa2>
 800216a:	40dc      	lsrs	r4, r3
 800216c:	2300      	movs	r3, #0
 800216e:	e9c6 4300 	strd	r4, r3, [r6]
 8002172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002176:	428b      	cmp	r3, r1
 8002178:	d908      	bls.n	800218c <__udivmoddi4+0xbc>
 800217a:	2e00      	cmp	r6, #0
 800217c:	f000 80ed 	beq.w	800235a <__udivmoddi4+0x28a>
 8002180:	2100      	movs	r1, #0
 8002182:	e9c6 0500 	strd	r0, r5, [r6]
 8002186:	4608      	mov	r0, r1
 8002188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218c:	fab3 f183 	clz	r1, r3
 8002190:	2900      	cmp	r1, #0
 8002192:	d149      	bne.n	8002228 <__udivmoddi4+0x158>
 8002194:	42ab      	cmp	r3, r5
 8002196:	d302      	bcc.n	800219e <__udivmoddi4+0xce>
 8002198:	4282      	cmp	r2, r0
 800219a:	f200 80f8 	bhi.w	800238e <__udivmoddi4+0x2be>
 800219e:	1a84      	subs	r4, r0, r2
 80021a0:	eb65 0203 	sbc.w	r2, r5, r3
 80021a4:	2001      	movs	r0, #1
 80021a6:	4617      	mov	r7, r2
 80021a8:	2e00      	cmp	r6, #0
 80021aa:	d0e2      	beq.n	8002172 <__udivmoddi4+0xa2>
 80021ac:	e9c6 4700 	strd	r4, r7, [r6]
 80021b0:	e7df      	b.n	8002172 <__udivmoddi4+0xa2>
 80021b2:	b902      	cbnz	r2, 80021b6 <__udivmoddi4+0xe6>
 80021b4:	deff      	udf	#255	; 0xff
 80021b6:	fab2 f382 	clz	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 8090 	bne.w	80022e0 <__udivmoddi4+0x210>
 80021c0:	1a8a      	subs	r2, r1, r2
 80021c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80021c6:	fa1f fe8c 	uxth.w	lr, ip
 80021ca:	2101      	movs	r1, #1
 80021cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80021d0:	fb07 2015 	mls	r0, r7, r5, r2
 80021d4:	0c22      	lsrs	r2, r4, #16
 80021d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80021da:	fb0e f005 	mul.w	r0, lr, r5
 80021de:	4290      	cmp	r0, r2
 80021e0:	d908      	bls.n	80021f4 <__udivmoddi4+0x124>
 80021e2:	eb1c 0202 	adds.w	r2, ip, r2
 80021e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80021ea:	d202      	bcs.n	80021f2 <__udivmoddi4+0x122>
 80021ec:	4290      	cmp	r0, r2
 80021ee:	f200 80cb 	bhi.w	8002388 <__udivmoddi4+0x2b8>
 80021f2:	4645      	mov	r5, r8
 80021f4:	1a12      	subs	r2, r2, r0
 80021f6:	b2a4      	uxth	r4, r4
 80021f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80021fc:	fb07 2210 	mls	r2, r7, r0, r2
 8002200:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002204:	fb0e fe00 	mul.w	lr, lr, r0
 8002208:	45a6      	cmp	lr, r4
 800220a:	d908      	bls.n	800221e <__udivmoddi4+0x14e>
 800220c:	eb1c 0404 	adds.w	r4, ip, r4
 8002210:	f100 32ff 	add.w	r2, r0, #4294967295
 8002214:	d202      	bcs.n	800221c <__udivmoddi4+0x14c>
 8002216:	45a6      	cmp	lr, r4
 8002218:	f200 80bb 	bhi.w	8002392 <__udivmoddi4+0x2c2>
 800221c:	4610      	mov	r0, r2
 800221e:	eba4 040e 	sub.w	r4, r4, lr
 8002222:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002226:	e79f      	b.n	8002168 <__udivmoddi4+0x98>
 8002228:	f1c1 0720 	rsb	r7, r1, #32
 800222c:	408b      	lsls	r3, r1
 800222e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002232:	ea4c 0c03 	orr.w	ip, ip, r3
 8002236:	fa05 f401 	lsl.w	r4, r5, r1
 800223a:	fa20 f307 	lsr.w	r3, r0, r7
 800223e:	40fd      	lsrs	r5, r7
 8002240:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002244:	4323      	orrs	r3, r4
 8002246:	fbb5 f8f9 	udiv	r8, r5, r9
 800224a:	fa1f fe8c 	uxth.w	lr, ip
 800224e:	fb09 5518 	mls	r5, r9, r8, r5
 8002252:	0c1c      	lsrs	r4, r3, #16
 8002254:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002258:	fb08 f50e 	mul.w	r5, r8, lr
 800225c:	42a5      	cmp	r5, r4
 800225e:	fa02 f201 	lsl.w	r2, r2, r1
 8002262:	fa00 f001 	lsl.w	r0, r0, r1
 8002266:	d90b      	bls.n	8002280 <__udivmoddi4+0x1b0>
 8002268:	eb1c 0404 	adds.w	r4, ip, r4
 800226c:	f108 3aff 	add.w	sl, r8, #4294967295
 8002270:	f080 8088 	bcs.w	8002384 <__udivmoddi4+0x2b4>
 8002274:	42a5      	cmp	r5, r4
 8002276:	f240 8085 	bls.w	8002384 <__udivmoddi4+0x2b4>
 800227a:	f1a8 0802 	sub.w	r8, r8, #2
 800227e:	4464      	add	r4, ip
 8002280:	1b64      	subs	r4, r4, r5
 8002282:	b29d      	uxth	r5, r3
 8002284:	fbb4 f3f9 	udiv	r3, r4, r9
 8002288:	fb09 4413 	mls	r4, r9, r3, r4
 800228c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8002290:	fb03 fe0e 	mul.w	lr, r3, lr
 8002294:	45a6      	cmp	lr, r4
 8002296:	d908      	bls.n	80022aa <__udivmoddi4+0x1da>
 8002298:	eb1c 0404 	adds.w	r4, ip, r4
 800229c:	f103 35ff 	add.w	r5, r3, #4294967295
 80022a0:	d26c      	bcs.n	800237c <__udivmoddi4+0x2ac>
 80022a2:	45a6      	cmp	lr, r4
 80022a4:	d96a      	bls.n	800237c <__udivmoddi4+0x2ac>
 80022a6:	3b02      	subs	r3, #2
 80022a8:	4464      	add	r4, ip
 80022aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80022ae:	fba3 9502 	umull	r9, r5, r3, r2
 80022b2:	eba4 040e 	sub.w	r4, r4, lr
 80022b6:	42ac      	cmp	r4, r5
 80022b8:	46c8      	mov	r8, r9
 80022ba:	46ae      	mov	lr, r5
 80022bc:	d356      	bcc.n	800236c <__udivmoddi4+0x29c>
 80022be:	d053      	beq.n	8002368 <__udivmoddi4+0x298>
 80022c0:	b156      	cbz	r6, 80022d8 <__udivmoddi4+0x208>
 80022c2:	ebb0 0208 	subs.w	r2, r0, r8
 80022c6:	eb64 040e 	sbc.w	r4, r4, lr
 80022ca:	fa04 f707 	lsl.w	r7, r4, r7
 80022ce:	40ca      	lsrs	r2, r1
 80022d0:	40cc      	lsrs	r4, r1
 80022d2:	4317      	orrs	r7, r2
 80022d4:	e9c6 7400 	strd	r7, r4, [r6]
 80022d8:	4618      	mov	r0, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e0:	f1c3 0120 	rsb	r1, r3, #32
 80022e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80022e8:	fa20 f201 	lsr.w	r2, r0, r1
 80022ec:	fa25 f101 	lsr.w	r1, r5, r1
 80022f0:	409d      	lsls	r5, r3
 80022f2:	432a      	orrs	r2, r5
 80022f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80022f8:	fa1f fe8c 	uxth.w	lr, ip
 80022fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8002300:	fb07 1510 	mls	r5, r7, r0, r1
 8002304:	0c11      	lsrs	r1, r2, #16
 8002306:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800230a:	fb00 f50e 	mul.w	r5, r0, lr
 800230e:	428d      	cmp	r5, r1
 8002310:	fa04 f403 	lsl.w	r4, r4, r3
 8002314:	d908      	bls.n	8002328 <__udivmoddi4+0x258>
 8002316:	eb1c 0101 	adds.w	r1, ip, r1
 800231a:	f100 38ff 	add.w	r8, r0, #4294967295
 800231e:	d22f      	bcs.n	8002380 <__udivmoddi4+0x2b0>
 8002320:	428d      	cmp	r5, r1
 8002322:	d92d      	bls.n	8002380 <__udivmoddi4+0x2b0>
 8002324:	3802      	subs	r0, #2
 8002326:	4461      	add	r1, ip
 8002328:	1b49      	subs	r1, r1, r5
 800232a:	b292      	uxth	r2, r2
 800232c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002330:	fb07 1115 	mls	r1, r7, r5, r1
 8002334:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002338:	fb05 f10e 	mul.w	r1, r5, lr
 800233c:	4291      	cmp	r1, r2
 800233e:	d908      	bls.n	8002352 <__udivmoddi4+0x282>
 8002340:	eb1c 0202 	adds.w	r2, ip, r2
 8002344:	f105 38ff 	add.w	r8, r5, #4294967295
 8002348:	d216      	bcs.n	8002378 <__udivmoddi4+0x2a8>
 800234a:	4291      	cmp	r1, r2
 800234c:	d914      	bls.n	8002378 <__udivmoddi4+0x2a8>
 800234e:	3d02      	subs	r5, #2
 8002350:	4462      	add	r2, ip
 8002352:	1a52      	subs	r2, r2, r1
 8002354:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002358:	e738      	b.n	80021cc <__udivmoddi4+0xfc>
 800235a:	4631      	mov	r1, r6
 800235c:	4630      	mov	r0, r6
 800235e:	e708      	b.n	8002172 <__udivmoddi4+0xa2>
 8002360:	4639      	mov	r1, r7
 8002362:	e6e6      	b.n	8002132 <__udivmoddi4+0x62>
 8002364:	4610      	mov	r0, r2
 8002366:	e6fb      	b.n	8002160 <__udivmoddi4+0x90>
 8002368:	4548      	cmp	r0, r9
 800236a:	d2a9      	bcs.n	80022c0 <__udivmoddi4+0x1f0>
 800236c:	ebb9 0802 	subs.w	r8, r9, r2
 8002370:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002374:	3b01      	subs	r3, #1
 8002376:	e7a3      	b.n	80022c0 <__udivmoddi4+0x1f0>
 8002378:	4645      	mov	r5, r8
 800237a:	e7ea      	b.n	8002352 <__udivmoddi4+0x282>
 800237c:	462b      	mov	r3, r5
 800237e:	e794      	b.n	80022aa <__udivmoddi4+0x1da>
 8002380:	4640      	mov	r0, r8
 8002382:	e7d1      	b.n	8002328 <__udivmoddi4+0x258>
 8002384:	46d0      	mov	r8, sl
 8002386:	e77b      	b.n	8002280 <__udivmoddi4+0x1b0>
 8002388:	3d02      	subs	r5, #2
 800238a:	4462      	add	r2, ip
 800238c:	e732      	b.n	80021f4 <__udivmoddi4+0x124>
 800238e:	4608      	mov	r0, r1
 8002390:	e70a      	b.n	80021a8 <__udivmoddi4+0xd8>
 8002392:	4464      	add	r4, ip
 8002394:	3802      	subs	r0, #2
 8002396:	e742      	b.n	800221e <__udivmoddi4+0x14e>

08002398 <__aeabi_idiv0>:
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <telnet_client_init>:
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	tpcb = tcp_new();
 80023a2:	f010 fef3 	bl	801318c <tcp_new>
 80023a6:	6078      	str	r0, [r7, #4]
	IP_ADDR4(&destIPADDR, 192, 168, 1, 11); //IP address of LDC501
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <telnet_client_init+0x3c>)
 80023aa:	603b      	str	r3, [r7, #0]
		printf("[Telnet Client] Beginning TCP connection.\n\r");
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <telnet_client_init+0x40>)
 80023ae:	f018 ff3b 	bl	801b228 <iprintf>
		printf("[Telnet Client] Connecting to 192.168.1.11 on port %d.\n\r", LDC501PORT);
 80023b2:	f242 21b6 	movw	r1, #8886	; 0x22b6
 80023b6:	480a      	ldr	r0, [pc, #40]	; (80023e0 <telnet_client_init+0x44>)
 80023b8:	f018 ff36 	bl	801b228 <iprintf>
	tcp_connect(tpcb, &destIPADDR, LDC501PORT, telnet_client_connected);
 80023bc:	4639      	mov	r1, r7
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <telnet_client_init+0x48>)
 80023c0:	f242 22b6 	movw	r2, #8886	; 0x22b6
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f00f ffa5 	bl	8012314 <tcp_connect>
		printf("[Telnet Client] Called tcp_connect, awaiting callback.\n\r");
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <telnet_client_init+0x4c>)
 80023cc:	f018 ff2c 	bl	801b228 <iprintf>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	0b01a8c0 	.word	0x0b01a8c0
 80023dc:	0801d85c 	.word	0x0801d85c
 80023e0:	0801d888 	.word	0x0801d888
 80023e4:	00000219 	.word	0x00000219
 80023e8:	0801d8c4 	.word	0x0801d8c4

080023ec <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80023f4:	1d39      	adds	r1, r7, #4
 80023f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fa:	2201      	movs	r2, #1
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <__io_putchar+0x20>)
 80023fe:	f00b fe3b 	bl	800e078 <HAL_UART_Transmit>
	return ch;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000510 	.word	0x20000510

08002410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002416:	4ab4      	ldr	r2, [pc, #720]	; (80026e8 <main+0x2d8>)
 8002418:	4bb4      	ldr	r3, [pc, #720]	; (80026ec <main+0x2dc>)
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	461a      	mov	r2, r3
 800241e:	49b4      	ldr	r1, [pc, #720]	; (80026f0 <main+0x2e0>)
 8002420:	48b2      	ldr	r0, [pc, #712]	; (80026ec <main+0x2dc>)
 8002422:	f019 f90a 	bl	801b63a <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002426:	4bb3      	ldr	r3, [pc, #716]	; (80026f4 <main+0x2e4>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11b      	bne.n	800246a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002432:	f3bf 8f4f 	dsb	sy
}
 8002436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002438:	f3bf 8f6f 	isb	sy
}
 800243c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800243e:	4bad      	ldr	r3, [pc, #692]	; (80026f4 <main+0x2e4>)
 8002440:	2200      	movs	r2, #0
 8002442:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002446:	f3bf 8f4f 	dsb	sy
}
 800244a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800244c:	f3bf 8f6f 	isb	sy
}
 8002450:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002452:	4ba8      	ldr	r3, [pc, #672]	; (80026f4 <main+0x2e4>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4aa7      	ldr	r2, [pc, #668]	; (80026f4 <main+0x2e4>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800245e:	f3bf 8f4f 	dsb	sy
}
 8002462:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002464:	f3bf 8f6f 	isb	sy
}
 8002468:	e000      	b.n	800246c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800246a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800246c:	4ba1      	ldr	r3, [pc, #644]	; (80026f4 <main+0x2e4>)
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d138      	bne.n	80024ea <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002478:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <main+0x2e4>)
 800247a:	2200      	movs	r2, #0
 800247c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002480:	f3bf 8f4f 	dsb	sy
}
 8002484:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002486:	4b9b      	ldr	r3, [pc, #620]	; (80026f4 <main+0x2e4>)
 8002488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0b5b      	lsrs	r3, r3, #13
 8002492:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002496:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80024aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024b0:	4990      	ldr	r1, [pc, #576]	; (80026f4 <main+0x2e4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ef      	bne.n	80024a2 <main+0x92>
    } while(sets-- != 0U);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e5      	bne.n	8002498 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80024cc:	f3bf 8f4f 	dsb	sy
}
 80024d0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <main+0x2e4>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <main+0x2e4>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80024de:	f3bf 8f4f 	dsb	sy
}
 80024e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024e4:	f3bf 8f6f 	isb	sy
}
 80024e8:	e000      	b.n	80024ec <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80024ea:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ec:	f001 fe16 	bl	800411c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80024f0:	f000 ff20 	bl	8003334 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f4:	f000 f938 	bl	8002768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f8:	f000 fd94 	bl	8003024 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80024fc:	f000 fbd8 	bl	8002cb0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002500:	f000 fa52 	bl	80029a8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002504:	f000 fd40 	bl	8002f88 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002508:	f000 fca2 	bl	8002e50 <MX_TIM3_Init>
  MX_TIM1_Init();
 800250c:	f000 fbfe 	bl	8002d0c <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002510:	f000 fa7c 	bl	8002a0c <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002514:	f000 f9e6 	bl	80028e4 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002518:	f00c fec2 	bl	800f2a0 <MX_LWIP_Init>
  MX_TIM2_Init();
 800251c:	f000 fc4a 	bl	8002db4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002520:	f000 fce4 	bl	8002eec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8002524:	4874      	ldr	r0, [pc, #464]	; (80026f8 <main+0x2e8>)
 8002526:	f018 fe7f 	bl	801b228 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800252a:	4974      	ldr	r1, [pc, #464]	; (80026fc <main+0x2ec>)
 800252c:	4874      	ldr	r0, [pc, #464]	; (8002700 <main+0x2f0>)
 800252e:	f018 fe7b 	bl	801b228 <iprintf>

	#ifndef SYNTH_ENABLE
	printf("WARNING - MW Synthesiser is disabled\r\n");
 8002532:	4874      	ldr	r0, [pc, #464]	; (8002704 <main+0x2f4>)
 8002534:	f018 fede 	bl	801b2f4 <puts>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8002538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253c:	4872      	ldr	r0, [pc, #456]	; (8002708 <main+0x2f8>)
 800253e:	f007 f937 	bl	80097b0 <HAL_LPTIM_Counter_Start_IT>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <main+0x142>
		printf("Failed to start slow flashing LED!\r\n");
 8002548:	4870      	ldr	r0, [pc, #448]	; (800270c <main+0x2fc>)
 800254a:	f018 fed3 	bl	801b2f4 <puts>
		Error_Handler();
 800254e:	f000 ff43 	bl	80033d8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002552:	2100      	movs	r1, #0
 8002554:	486e      	ldr	r0, [pc, #440]	; (8002710 <main+0x300>)
 8002556:	f003 fde1 	bl	800611c <HAL_DAC_Start>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <main+0x15a>
		printf("Failure to initialise DAC \r\n");
 8002560:	486c      	ldr	r0, [pc, #432]	; (8002714 <main+0x304>)
 8002562:	f018 fec7 	bl	801b2f4 <puts>
		Error_Handler();
 8002566:	f000 ff37 	bl	80033d8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800256a:	486b      	ldr	r0, [pc, #428]	; (8002718 <main+0x308>)
 800256c:	f018 fec2 	bl	801b2f4 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8002570:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	4865      	ldr	r0, [pc, #404]	; (8002710 <main+0x300>)
 800257a:	f003 fe21 	bl	80061c0 <HAL_DAC_SetValue>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <main+0x17e>
			printf("DAC setup failed!\r\n");
 8002584:	4865      	ldr	r0, [pc, #404]	; (800271c <main+0x30c>)
 8002586:	f018 feb5 	bl	801b2f4 <puts>
		Error_Handler();
 800258a:	f000 ff25 	bl	80033d8 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 800258e:	2201      	movs	r2, #1
 8002590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002594:	4862      	ldr	r0, [pc, #392]	; (8002720 <main+0x310>)
 8002596:	f005 fcff 	bl	8007f98 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800259a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800259e:	2100      	movs	r1, #0
 80025a0:	4860      	ldr	r0, [pc, #384]	; (8002724 <main+0x314>)
 80025a2:	f003 fb77 	bl	8005c94 <HAL_ADCEx_Calibration_Start>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <main+0x1a6>
		printf("ADC calibration failure \r\n");
 80025ac:	485e      	ldr	r0, [pc, #376]	; (8002728 <main+0x318>)
 80025ae:	f018 fea1 	bl	801b2f4 <puts>
		Error_Handler();
 80025b2:	f000 ff11 	bl	80033d8 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80025b6:	485b      	ldr	r0, [pc, #364]	; (8002724 <main+0x314>)
 80025b8:	f002 fa5a 	bl	8004a70 <HAL_ADC_Start_IT>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <main+0x1bc>
		printf("Failed to start ADC with interrupt capability \r\n");
 80025c2:	485a      	ldr	r0, [pc, #360]	; (800272c <main+0x31c>)
 80025c4:	f018 fe96 	bl	801b2f4 <puts>
	                Error_Handler();
 80025c8:	f000 ff06 	bl	80033d8 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 80025cc:	4858      	ldr	r0, [pc, #352]	; (8002730 <main+0x320>)
 80025ce:	f018 fe91 	bl	801b2f4 <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 80025d2:	4b58      	ldr	r3, [pc, #352]	; (8002734 <main+0x324>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f01a ff96 	bl	801d508 <__start_timer_veneer>
	start_POP_calibration(true);
 80025dc:	2001      	movs	r0, #1
 80025de:	f01a ff8b 	bl	801d4f8 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 80025e2:	e001      	b.n	80025e8 <main+0x1d8>
		MW_update();
 80025e4:	f01a ff80 	bl	801d4e8 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <main+0x328>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <main+0x1f2>
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <main+0x324>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f01a ff8b 	bl	801d510 <__check_timer_veneer>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a4f      	ldr	r2, [pc, #316]	; (800273c <main+0x32c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d9f0      	bls.n	80025e4 <main+0x1d4>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <main+0x324>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f01a ff72 	bl	801d4f0 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 800260c:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <main+0x328>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <main+0x20a>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8002614:	484a      	ldr	r0, [pc, #296]	; (8002740 <main+0x330>)
 8002616:	f018 fe6d 	bl	801b2f4 <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 800261a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80026c8 <main+0x2b8>
 800261e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80026d0 <main+0x2c0>
 8002622:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002626:	2000      	movs	r0, #0
 8002628:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 80026d8 <main+0x2c8>
 800262c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80026e0 <main+0x2d0>
 8002630:	eeb0 0b47 	vmov.f64	d0, d7
 8002634:	f01a ff54 	bl	801d4e0 <__calc_fixed_time_MW_sweep_veneer>
//	last_pin_status = pin_status;

//	timer_delay(MW_TIMER, 7000);
//	timer_delay(MW_TIMER, 50000);

	telnet_client_init(); //initialise telnet client
 8002638:	f7ff feb0 	bl	800239c <telnet_client_init>
	printf("Telnet client initialised\r\n");
 800263c:	4841      	ldr	r0, [pc, #260]	; (8002744 <main+0x334>)
 800263e:	f018 fe59 	bl	801b2f4 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8002642:	4841      	ldr	r0, [pc, #260]	; (8002748 <main+0x338>)
 8002644:	f018 fe56 	bl	801b2f4 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800264c:	483f      	ldr	r0, [pc, #252]	; (800274c <main+0x33c>)
 800264e:	f005 fc8b 	bl	8007f68 <HAL_GPIO_ReadPin>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <main+0x340>)
 8002660:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <main+0x340>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <main+0x29e>
			printf("Blue button pressed....\r\n");
 800266c:	4839      	ldr	r0, [pc, #228]	; (8002754 <main+0x344>)
 800266e:	f018 fe41 	bl	801b2f4 <puts>
			printf("Initialising comms with LDC501\r\n");
 8002672:	4839      	ldr	r0, [pc, #228]	; (8002758 <main+0x348>)
 8002674:	f018 fe3e 	bl	801b2f4 <puts>
			init_ldc_comms();
 8002678:	f01a ff52 	bl	801d520 <__init_ldc_comms_veneer>
//			} else {
//				printf("Initiating sweep.\r\n");
//				mw_sweep_started = true;
//				start_continuous_MW_sweep();
//			}
			while(blue_button_status) {//remain here polling button until it is released
 800267c:	e012      	b.n	80026a4 <main+0x294>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <main+0x34c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2164      	movs	r1, #100	; 0x64
 8002684:	4618      	mov	r0, r3
 8002686:	f01a ff3b 	bl	801d500 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800268a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268e:	482f      	ldr	r0, [pc, #188]	; (800274c <main+0x33c>)
 8002690:	f005 fc6a 	bl	8007f68 <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <main+0x340>)
 80026a2:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <main+0x340>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e7      	bne.n	800267e <main+0x26e>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <main+0x350>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80026b2:	f01a ff19 	bl	801d4e8 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 80026b6:	482b      	ldr	r0, [pc, #172]	; (8002764 <main+0x354>)
 80026b8:	f00d f860 	bl	800f77c <ethernetif_input>
		sys_check_timeouts();
 80026bc:	f015 fb00 	bl	8017cc0 <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80026c0:	e7c2      	b.n	8002648 <main+0x238>
 80026c2:	bf00      	nop
 80026c4:	f3af 8000 	nop.w
 80026c8:	6d600000 	.word	0x6d600000
 80026cc:	41e69e35 	.word	0x41e69e35
 80026d0:	00000000 	.word	0x00000000
 80026d4:	408f4000 	.word	0x408f4000
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40490000 	.word	0x40490000
 80026e0:	00000000 	.word	0x00000000
 80026e4:	40c38800 	.word	0x40c38800
 80026e8:	00001d10 	.word	0x00001d10
 80026ec:	00000000 	.word	0x00000000
 80026f0:	08000298 	.word	0x08000298
 80026f4:	e000ed00 	.word	0xe000ed00
 80026f8:	0801d900 	.word	0x0801d900
 80026fc:	0801d904 	.word	0x0801d904
 8002700:	0801d920 	.word	0x0801d920
 8002704:	0801d94c 	.word	0x0801d94c
 8002708:	200003a8 	.word	0x200003a8
 800270c:	0801d974 	.word	0x0801d974
 8002710:	200002b8 	.word	0x200002b8
 8002714:	0801d998 	.word	0x0801d998
 8002718:	0801d9b4 	.word	0x0801d9b4
 800271c:	0801d9d4 	.word	0x0801d9d4
 8002720:	58020400 	.word	0x58020400
 8002724:	20000254 	.word	0x20000254
 8002728:	0801d9e8 	.word	0x0801d9e8
 800272c:	0801da04 	.word	0x0801da04
 8002730:	0801da34 	.word	0x0801da34
 8002734:	2000001c 	.word	0x2000001c
 8002738:	200005a8 	.word	0x200005a8
 800273c:	002dc6bf 	.word	0x002dc6bf
 8002740:	0801da74 	.word	0x0801da74
 8002744:	0801dab8 	.word	0x0801dab8
 8002748:	0801dad4 	.word	0x0801dad4
 800274c:	58020800 	.word	0x58020800
 8002750:	200005a5 	.word	0x200005a5
 8002754:	0801daf0 	.word	0x0801daf0
 8002758:	0801db0c 	.word	0x0801db0c
 800275c:	20000014 	.word	0x20000014
 8002760:	200005a4 	.word	0x200005a4
 8002764:	20000614 	.word	0x20000614

08002768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0a4      	sub	sp, #144	; 0x90
 800276c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800276e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002772:	224c      	movs	r2, #76	; 0x4c
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f018 fee6 	bl	801b548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	2220      	movs	r2, #32
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f018 fedf 	bl	801b548 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800279c:	2002      	movs	r0, #2
 800279e:	f007 fb65 	bl	8009e6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <SystemClock_Config+0x170>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <SystemClock_Config+0x170>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <SystemClock_Config+0x170>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	4b47      	ldr	r3, [pc, #284]	; (80028dc <SystemClock_Config+0x174>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a46      	ldr	r2, [pc, #280]	; (80028dc <SystemClock_Config+0x174>)
 80027c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b44      	ldr	r3, [pc, #272]	; (80028dc <SystemClock_Config+0x174>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80027d4:	bf00      	nop
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <SystemClock_Config+0x174>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	d1f8      	bne.n	80027d6 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027e4:	f007 fb32 	bl	8009e4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027e8:	f001 fd4e 	bl	8004288 <HAL_GetREVID>
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <SystemClock_Config+0x178>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <SystemClock_Config+0x178>)
 80027f2:	f023 0318 	bic.w	r3, r3, #24
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80027f8:	2325      	movs	r3, #37	; 0x25
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002802:	2301      	movs	r3, #1
 8002804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002806:	2301      	movs	r3, #1
 8002808:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800280a:	2302      	movs	r3, #2
 800280c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800280e:	2302      	movs	r3, #2
 8002810:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002816:	2350      	movs	r3, #80	; 0x50
 8002818:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800281a:	2302      	movs	r3, #2
 800281c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800281e:	2304      	movs	r3, #4
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002828:	230c      	movs	r3, #12
 800282a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800283e:	4618      	mov	r0, r3
 8002840:	f007 fb4e 	bl	8009ee0 <HAL_RCC_OscConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800284a:	f000 fdc5 	bl	80033d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284e:	233f      	movs	r3, #63	; 0x3f
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002852:	2303      	movs	r3, #3
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800285a:	2309      	movs	r3, #9
 800285c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8002866:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f007 ff8c 	bl	800a794 <HAL_RCC_ClockConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8002882:	f000 fda9 	bl	80033d8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002886:	f008 f93b 	bl	800ab00 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <SystemClock_Config+0x178>)
 800288c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <SystemClock_Config+0x178>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <SystemClock_Config+0x178>)
 800289c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80028ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028b0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80028b6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80028ba:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80028bc:	2322      	movs	r3, #34	; 0x22
 80028be:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80028c0:	2320      	movs	r3, #32
 80028c2:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	4618      	mov	r0, r3
 80028ca:	f00a feb5 	bl	800d638 <HAL_RCCEx_CRSConfig>
}
 80028ce:	bf00      	nop
 80028d0:	3790      	adds	r7, #144	; 0x90
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	58000400 	.word	0x58000400
 80028dc:	58024800 	.word	0x58024800
 80028e0:	58024400 	.word	0x58024400

080028e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	615a      	str	r2, [r3, #20]
 80028fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <MX_ADC3_Init+0xbc>)
 80028fe:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <MX_ADC3_Init+0xc0>)
 8002900:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002910:	2204      	movs	r2, #4
 8002912:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002916:	2200      	movs	r2, #0
 8002918:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800291c:	2200      	movs	r2, #0
 800291e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002922:	2201      	movs	r2, #1
 8002924:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800292e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800293e:	2200      	movs	r2, #0
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800294a:	2200      	movs	r2, #0
 800294c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002956:	4812      	ldr	r0, [pc, #72]	; (80029a0 <MX_ADC3_Init+0xbc>)
 8002958:	f001 fee8 	bl	800472c <HAL_ADC_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8002962:	f000 fd39 	bl	80033d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002966:	2301      	movs	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800296a:	2306      	movs	r3, #6
 800296c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002972:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002976:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002978:	2304      	movs	r3, #4
 800297a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_ADC3_Init+0xbc>)
 800298a:	f002 fc0b 	bl	80051a4 <HAL_ADC_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8002994:	f000 fd20 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000254 	.word	0x20000254
 80029a4:	58026000 	.word	0x58026000

080029a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2224      	movs	r2, #36	; 0x24
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f018 fdc7 	bl	801b548 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_DAC1_Init+0x5c>)
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_DAC1_Init+0x60>)
 80029be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <MX_DAC1_Init+0x5c>)
 80029c2:	f003 fb89 	bl	80060d8 <HAL_DAC_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80029cc:	f000 fd04 	bl	80033d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	; (8002a04 <MX_DAC1_Init+0x5c>)
 80029ec:	f003 fc0e 	bl	800620c <HAL_DAC_ConfigChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80029f6:	f000 fcef 	bl	80033d8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002b8 	.word	0x200002b8
 8002a08:	40007400 	.word	0x40007400

08002a0c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0a4      	sub	sp, #144	; 0x90
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002a12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a24:	2254      	movs	r2, #84	; 0x54
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f018 fd8d 	bl	801b548 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f018 fd81 	bl	801b548 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002a46:	4b98      	ldr	r3, [pc, #608]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002a48:	4a98      	ldr	r2, [pc, #608]	; (8002cac <MX_HRTIM_Init+0x2a0>)
 8002a4a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002a4c:	4b96      	ldr	r3, [pc, #600]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002a52:	4b95      	ldr	r3, [pc, #596]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002a58:	4893      	ldr	r0, [pc, #588]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002a5a:	f005 faf5 	bl	8008048 <HAL_HRTIM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8002a64:	f000 fcb8 	bl	80033d8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002a68:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002a76:	2307      	movs	r3, #7
 8002a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002a82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a86:	461a      	mov	r2, r3
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4887      	ldr	r0, [pc, #540]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002a8c:	f005 fbac 	bl	80081e8 <HAL_HRTIM_TimeBaseConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8002a96:	f000 fc9f 	bl	80033d8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002a9a:	2314      	movs	r3, #20
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002aca:	2300      	movs	r3, #0
 8002acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002ada:	2300      	movs	r3, #0
 8002adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002aea:	2300      	movs	r3, #0
 8002aec:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af2:	461a      	mov	r2, r3
 8002af4:	2100      	movs	r1, #0
 8002af6:	486c      	ldr	r0, [pc, #432]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002af8:	f005 fb9e 	bl	8008238 <HAL_HRTIM_WaveformTimerConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002b02:	f000 fc69 	bl	80033d8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002b06:	2306      	movs	r3, #6
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b12:	461a      	mov	r2, r3
 8002b14:	2104      	movs	r1, #4
 8002b16:	4864      	ldr	r0, [pc, #400]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002b18:	f005 fb8e 	bl	8008238 <HAL_HRTIM_WaveformTimerConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002b22:	f000 fc59 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002b26:	f240 631b 	movw	r3, #1563	; 0x61b
 8002b2a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002b2c:	f107 0320 	add.w	r3, r7, #32
 8002b30:	2201      	movs	r2, #1
 8002b32:	2100      	movs	r1, #0
 8002b34:	485c      	ldr	r0, [pc, #368]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002b36:	f005 fbf1 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002b40:	f000 fc4a 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002b44:	f244 5395 	movw	r3, #17813	; 0x4595
 8002b48:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b52:	f107 0320 	add.w	r3, r7, #32
 8002b56:	2202      	movs	r2, #2
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4853      	ldr	r0, [pc, #332]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002b5c:	f005 fbde 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8002b66:	f000 fc37 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002b6a:	f640 536e 	movw	r3, #3438	; 0xd6e
 8002b6e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	2202      	movs	r2, #2
 8002b76:	2104      	movs	r1, #4
 8002b78:	484b      	ldr	r0, [pc, #300]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002b7a:	f005 fbcf 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8002b84:	f000 fc28 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002b88:	f644 0306 	movw	r3, #18438	; 0x4806
 8002b8c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	2204      	movs	r2, #4
 8002b94:	2100      	movs	r1, #0
 8002b96:	4844      	ldr	r0, [pc, #272]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002b98:	f005 fbc0 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8002ba2:	f000 fc19 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002ba6:	f244 435d 	movw	r3, #17501	; 0x445d
 8002baa:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002bac:	f107 0320 	add.w	r3, r7, #32
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	483c      	ldr	r0, [pc, #240]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002bb6:	f005 fbb1 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002bc0:	f000 fc0a 	bl	80033d8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002bc8:	2328      	movs	r3, #40	; 0x28
 8002bca:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002bcc:	2314      	movs	r3, #20
 8002bce:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002be4:	463b      	mov	r3, r7
 8002be6:	2201      	movs	r2, #1
 8002be8:	2100      	movs	r1, #0
 8002bea:	482f      	ldr	r0, [pc, #188]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002bec:	f005 fd04 	bl	80085f8 <HAL_HRTIM_WaveformOutputConfig>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002bf6:	f000 fbef 	bl	80033d8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002bfe:	2350      	movs	r3, #80	; 0x50
 8002c00:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002c06:	463b      	mov	r3, r7
 8002c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	4826      	ldr	r0, [pc, #152]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c10:	f005 fcf2 	bl	80085f8 <HAL_HRTIM_WaveformOutputConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002c1a:	f000 fbdd 	bl	80033d8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002c22:	2320      	movs	r3, #32
 8002c24:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002c26:	2310      	movs	r3, #16
 8002c28:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002c2e:	463b      	mov	r3, r7
 8002c30:	2202      	movs	r2, #2
 8002c32:	2100      	movs	r1, #0
 8002c34:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c36:	f005 fcdf 	bl	80085f8 <HAL_HRTIM_WaveformOutputConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002c40:	f000 fbca 	bl	80033d8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002c44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	4816      	ldr	r0, [pc, #88]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c4e:	f005 facb 	bl	80081e8 <HAL_HRTIM_TimeBaseConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002c58:	f000 fbbe 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002c5c:	f240 7353 	movw	r3, #1875	; 0x753
 8002c60:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	2201      	movs	r2, #1
 8002c68:	2104      	movs	r1, #4
 8002c6a:	480f      	ldr	r0, [pc, #60]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c6c:	f005 fb56 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002c76:	f000 fbaf 	bl	80033d8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002c7a:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002c7e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002c80:	f107 0320 	add.w	r3, r7, #32
 8002c84:	2204      	movs	r2, #4
 8002c86:	2104      	movs	r1, #4
 8002c88:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c8a:	f005 fb47 	bl	800831c <HAL_HRTIM_WaveformCompareConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002c94:	f000 fba0 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <MX_HRTIM_Init+0x29c>)
 8002c9a:	f000 fcdf 	bl	800365c <HAL_HRTIM_MspPostInit>

}
 8002c9e:	bf00      	nop
 8002ca0:	3790      	adds	r7, #144	; 0x90
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200002cc 	.word	0x200002cc
 8002cac:	40017400 	.word	0x40017400

08002cb0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <MX_LPTIM1_Init+0x58>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cc2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002cc6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cce:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_LPTIM1_Init+0x54>)
 8002cf0:	f006 fcae 	bl	8009650 <HAL_LPTIM_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002cfa:	f000 fb6d 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200003a8 	.word	0x200003a8
 8002d08:	40002400 	.word	0x40002400

08002d0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <MX_TIM1_Init+0xa4>)
 8002d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d32:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d58:	4814      	ldr	r0, [pc, #80]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d5a:	f00a fe27 	bl	800d9ac <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002d64:	f000 fb38 	bl	80033d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	4619      	mov	r1, r3
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d76:	f00a fe71 	bl	800da5c <HAL_TIM_ConfigClockSource>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002d80:	f000 fb2a 	bl	80033d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <MX_TIM1_Init+0xa0>)
 8002d96:	f00b f891 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002da0:	f000 fb1a 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	200003e0 	.word	0x200003e0
 8002db0:	40010000 	.word	0x40010000

08002db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dba:	f107 0310 	add.w	r3, r7, #16
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002ddc:	227c      	movs	r2, #124	; 0x7c
 8002dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dfa:	4814      	ldr	r0, [pc, #80]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002dfc:	f00a fdd6 	bl	800d9ac <HAL_TIM_Base_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e06:	f000 fae7 	bl	80033d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	4619      	mov	r1, r3
 8002e16:	480d      	ldr	r0, [pc, #52]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002e18:	f00a fe20 	bl	800da5c <HAL_TIM_ConfigClockSource>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e22:	f000 fad9 	bl	80033d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4806      	ldr	r0, [pc, #24]	; (8002e4c <MX_TIM2_Init+0x98>)
 8002e34:	f00b f842 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e3e:	f000 facb 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000042c 	.word	0x2000042c

08002e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <MX_TIM3_Init+0x98>)
 8002e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e76:	227c      	movs	r2, #124	; 0x7c
 8002e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e94:	4813      	ldr	r0, [pc, #76]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002e96:	f00a fd89 	bl	800d9ac <HAL_TIM_Base_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ea0:	f000 fa9a 	bl	80033d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4619      	mov	r1, r3
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002eb2:	f00a fdd3 	bl	800da5c <HAL_TIM_ConfigClockSource>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ebc:	f000 fa8c 	bl	80033d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_TIM3_Init+0x94>)
 8002ece:	f00a fff5 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ed8:	f000 fa7e 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000478 	.word	0x20000478
 8002ee8:	40000400 	.word	0x40000400

08002eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <MX_TIM5_Init+0x98>)
 8002f0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f12:	227c      	movs	r2, #124	; 0x7c
 8002f14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f30:	4813      	ldr	r0, [pc, #76]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f32:	f00a fd3b 	bl	800d9ac <HAL_TIM_Base_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f3c:	f000 fa4c 	bl	80033d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f4e:	f00a fd85 	bl	800da5c <HAL_TIM_ConfigClockSource>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002f58:	f000 fa3e 	bl	80033d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4805      	ldr	r0, [pc, #20]	; (8002f80 <MX_TIM5_Init+0x94>)
 8002f6a:	f00a ffa7 	bl	800debc <HAL_TIMEx_MasterConfigSynchronization>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002f74:	f000 fa30 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200004c4 	.word	0x200004c4
 8002f84:	40000c00 	.word	0x40000c00

08002f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002f8e:	4a23      	ldr	r2, [pc, #140]	; (800301c <MX_USART3_UART_Init+0x94>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <MX_USART3_UART_Init+0x98>)
 8002f96:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fac:	220c      	movs	r2, #12
 8002fae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fce:	4812      	ldr	r0, [pc, #72]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fd0:	f00b f802 	bl	800dfd8 <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002fda:	f000 f9fd 	bl	80033d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002fe2:	f00c f892 	bl	800f10a <HAL_UARTEx_SetTxFifoThreshold>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002fec:	f000 f9f4 	bl	80033d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4809      	ldr	r0, [pc, #36]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8002ff4:	f00c f8c7 	bl	800f186 <HAL_UARTEx_SetRxFifoThreshold>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002ffe:	f000 f9eb 	bl	80033d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_USART3_UART_Init+0x90>)
 8003004:	f00c f848 	bl	800f098 <HAL_UARTEx_DisableFifoMode>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800300e:	f000 f9e3 	bl	80033d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000510 	.word	0x20000510
 800301c:	40004800 	.word	0x40004800
 8003020:	000f4240 	.word	0x000f4240

08003024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800303a:	4ba0      	ldr	r3, [pc, #640]	; (80032bc <MX_GPIO_Init+0x298>)
 800303c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003040:	4a9e      	ldr	r2, [pc, #632]	; (80032bc <MX_GPIO_Init+0x298>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800304a:	4b9c      	ldr	r3, [pc, #624]	; (80032bc <MX_GPIO_Init+0x298>)
 800304c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003058:	4b98      	ldr	r3, [pc, #608]	; (80032bc <MX_GPIO_Init+0x298>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	4a97      	ldr	r2, [pc, #604]	; (80032bc <MX_GPIO_Init+0x298>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003068:	4b94      	ldr	r3, [pc, #592]	; (80032bc <MX_GPIO_Init+0x298>)
 800306a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003076:	4b91      	ldr	r3, [pc, #580]	; (80032bc <MX_GPIO_Init+0x298>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307c:	4a8f      	ldr	r2, [pc, #572]	; (80032bc <MX_GPIO_Init+0x298>)
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <MX_GPIO_Init+0x298>)
 8003088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b89      	ldr	r3, [pc, #548]	; (80032bc <MX_GPIO_Init+0x298>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309a:	4a88      	ldr	r2, [pc, #544]	; (80032bc <MX_GPIO_Init+0x298>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a4:	4b85      	ldr	r3, [pc, #532]	; (80032bc <MX_GPIO_Init+0x298>)
 80030a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b82      	ldr	r3, [pc, #520]	; (80032bc <MX_GPIO_Init+0x298>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	4a80      	ldr	r2, [pc, #512]	; (80032bc <MX_GPIO_Init+0x298>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c2:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <MX_GPIO_Init+0x298>)
 80030c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030d0:	4b7a      	ldr	r3, [pc, #488]	; (80032bc <MX_GPIO_Init+0x298>)
 80030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d6:	4a79      	ldr	r2, [pc, #484]	; (80032bc <MX_GPIO_Init+0x298>)
 80030d8:	f043 0320 	orr.w	r3, r3, #32
 80030dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e0:	4b76      	ldr	r3, [pc, #472]	; (80032bc <MX_GPIO_Init+0x298>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <MX_GPIO_Init+0x298>)
 80030f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f4:	4a71      	ldr	r2, [pc, #452]	; (80032bc <MX_GPIO_Init+0x298>)
 80030f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fe:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <MX_GPIO_Init+0x298>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800310c:	4b6b      	ldr	r3, [pc, #428]	; (80032bc <MX_GPIO_Init+0x298>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003112:	4a6a      	ldr	r2, [pc, #424]	; (80032bc <MX_GPIO_Init+0x298>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311c:	4b67      	ldr	r3, [pc, #412]	; (80032bc <MX_GPIO_Init+0x298>)
 800311e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800312a:	2201      	movs	r2, #1
 800312c:	2134      	movs	r1, #52	; 0x34
 800312e:	4864      	ldr	r0, [pc, #400]	; (80032c0 <MX_GPIO_Init+0x29c>)
 8003130:	f004 ff32 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003134:	2200      	movs	r2, #0
 8003136:	f245 1103 	movw	r1, #20739	; 0x5103
 800313a:	4862      	ldr	r0, [pc, #392]	; (80032c4 <MX_GPIO_Init+0x2a0>)
 800313c:	f004 ff2c 	bl	8007f98 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4860      	ldr	r0, [pc, #384]	; (80032c8 <MX_GPIO_Init+0x2a4>)
 8003146:	f004 ff27 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800314a:	2200      	movs	r2, #0
 800314c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003150:	485e      	ldr	r0, [pc, #376]	; (80032cc <MX_GPIO_Init+0x2a8>)
 8003152:	f004 ff21 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8003156:	2200      	movs	r2, #0
 8003158:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800315c:	485c      	ldr	r0, [pc, #368]	; (80032d0 <MX_GPIO_Init+0x2ac>)
 800315e:	f004 ff1b 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003162:	2201      	movs	r2, #1
 8003164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003168:	4859      	ldr	r0, [pc, #356]	; (80032d0 <MX_GPIO_Init+0x2ac>)
 800316a:	f004 ff15 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 800316e:	2201      	movs	r2, #1
 8003170:	21f8      	movs	r1, #248	; 0xf8
 8003172:	4856      	ldr	r0, [pc, #344]	; (80032cc <MX_GPIO_Init+0x2a8>)
 8003174:	f004 ff10 	bl	8007f98 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003178:	2200      	movs	r2, #0
 800317a:	2102      	movs	r1, #2
 800317c:	4850      	ldr	r0, [pc, #320]	; (80032c0 <MX_GPIO_Init+0x29c>)
 800317e:	f004 ff0b 	bl	8007f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8003182:	2336      	movs	r3, #54	; 0x36
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003186:	2301      	movs	r3, #1
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003196:	4619      	mov	r1, r3
 8003198:	4849      	ldr	r0, [pc, #292]	; (80032c0 <MX_GPIO_Init+0x29c>)
 800319a:	f004 fd35 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800319e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b2:	4619      	mov	r1, r3
 80031b4:	4846      	ldr	r0, [pc, #280]	; (80032d0 <MX_GPIO_Init+0x2ac>)
 80031b6:	f004 fd27 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80031ba:	f245 1303 	movw	r3, #20739	; 0x5103
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	2300      	movs	r3, #0
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d0:	4619      	mov	r1, r3
 80031d2:	483c      	ldr	r0, [pc, #240]	; (80032c4 <MX_GPIO_Init+0x2a0>)
 80031d4:	f004 fd18 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	4839      	ldr	r0, [pc, #228]	; (80032d4 <MX_GPIO_Init+0x2b0>)
 80031f0:	f004 fd0a 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003208:	4619      	mov	r1, r3
 800320a:	482f      	ldr	r0, [pc, #188]	; (80032c8 <MX_GPIO_Init+0x2a4>)
 800320c:	f004 fcfc 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003210:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003216:	2301      	movs	r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003226:	4619      	mov	r1, r3
 8003228:	4828      	ldr	r0, [pc, #160]	; (80032cc <MX_GPIO_Init+0x2a8>)
 800322a:	f004 fced 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003232:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	4821      	ldr	r0, [pc, #132]	; (80032c8 <MX_GPIO_Init+0x2a4>)
 8003244:	f004 fce0 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003248:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324e:	2301      	movs	r3, #1
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003252:	2302      	movs	r3, #2
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	4619      	mov	r1, r3
 8003260:	481b      	ldr	r0, [pc, #108]	; (80032d0 <MX_GPIO_Init+0x2ac>)
 8003262:	f004 fcd1 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003266:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003278:	230a      	movs	r3, #10
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4815      	ldr	r0, [pc, #84]	; (80032d8 <MX_GPIO_Init+0x2b4>)
 8003284:	f004 fcc0 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8003288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	480c      	ldr	r0, [pc, #48]	; (80032d0 <MX_GPIO_Init+0x2ac>)
 800329e:	f004 fcb3 	bl	8007c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2028      	movs	r0, #40	; 0x28
 80032a8:	f002 fe65 	bl	8005f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032ac:	2028      	movs	r0, #40	; 0x28
 80032ae:	f002 fe7c 	bl	8005faa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032b2:	bf00      	nop
 80032b4:	3738      	adds	r7, #56	; 0x38
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	58021000 	.word	0x58021000
 80032c4:	58020400 	.word	0x58020400
 80032c8:	58021800 	.word	0x58021800
 80032cc:	58020c00 	.word	0x58020c00
 80032d0:	58020800 	.word	0x58020800
 80032d4:	58021400 	.word	0x58021400
 80032d8:	58020000 	.word	0x58020000

080032dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 80032e4:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_ADC_ConvCpltCallback+0x44>)
 80032e6:	f001 fd01 	bl	8004cec <HAL_ADC_GetValue>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_ADC_ConvCpltCallback+0x48>)
 80032ee:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_ADC_ConvCpltCallback+0x48>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_ADC_ConvCpltCallback+0x4c>)
 80032f8:	6013      	str	r3, [r2, #0]
  sample_count++;
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_ADC_ConvCpltCallback+0x50>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_ADC_ConvCpltCallback+0x50>)
 8003306:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_ADC_ConvCpltCallback+0x4c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	2100      	movs	r1, #0
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <HAL_ADC_ConvCpltCallback+0x54>)
 8003312:	f002 ff55 	bl	80061c0 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000254 	.word	0x20000254
 8003324:	200005ac 	.word	0x200005ac
 8003328:	200005b0 	.word	0x200005b0
 800332c:	200005a6 	.word	0x200005a6
 8003330:	200002b8 	.word	0x200002b8

08003334 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800333a:	463b      	mov	r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003346:	f002 fe4b 	bl	8005fe0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800334a:	2301      	movs	r3, #1
 800334c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800334e:	2300      	movs	r3, #0
 8003350:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003356:	231f      	movs	r3, #31
 8003358:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800335a:	2387      	movs	r3, #135	; 0x87
 800335c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800335e:	2300      	movs	r3, #0
 8003360:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003362:	2300      	movs	r3, #0
 8003364:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003366:	2301      	movs	r3, #1
 8003368:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800336a:	2301      	movs	r3, #1
 800336c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003376:	463b      	mov	r3, r7
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fe69 	bl	8006050 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800337e:	2301      	movs	r3, #1
 8003380:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <MPU_Config+0x9c>)
 8003384:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003386:	2310      	movs	r3, #16
 8003388:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800338a:	2300      	movs	r3, #0
 800338c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800338e:	2301      	movs	r3, #1
 8003390:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003392:	2303      	movs	r3, #3
 8003394:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800339a:	463b      	mov	r3, r7
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fe57 	bl	8006050 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80033a2:	2302      	movs	r3, #2
 80033a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MPU_Config+0xa0>)
 80033a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80033aa:	2308      	movs	r3, #8
 80033ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033ba:	463b      	mov	r3, r7
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 fe47 	bl	8006050 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80033c2:	2004      	movs	r0, #4
 80033c4:	f002 fe24 	bl	8006010 <HAL_MPU_Enable>

}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	30020000 	.word	0x30020000
 80033d4:	30040000 	.word	0x30040000

080033d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033dc:	b672      	cpsid	i
}
 80033de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80033e0:	4810      	ldr	r0, [pc, #64]	; (8003424 <Error_Handler+0x4c>)
 80033e2:	f017 ff87 	bl	801b2f4 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80033e6:	f240 1103 	movw	r1, #259	; 0x103
 80033ea:	480f      	ldr	r0, [pc, #60]	; (8003428 <Error_Handler+0x50>)
 80033ec:	f005 f962 	bl	80086b4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80033f0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <Error_Handler+0x50>)
 80033f6:	f005 f9fb 	bl	80087f0 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003400:	480a      	ldr	r0, [pc, #40]	; (800342c <Error_Handler+0x54>)
 8003402:	f004 fdc9 	bl	8007f98 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800340a:	4809      	ldr	r0, [pc, #36]	; (8003430 <Error_Handler+0x58>)
 800340c:	f004 fddd 	bl	8007fca <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <Error_Handler+0x5c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f01a f870 	bl	801d500 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003420:	e7f1      	b.n	8003406 <Error_Handler+0x2e>
 8003422:	bf00      	nop
 8003424:	0801db2c 	.word	0x0801db2c
 8003428:	200002cc 	.word	0x200002cc
 800342c:	58020800 	.word	0x58020800
 8003430:	58020400 	.word	0x58020400
 8003434:	20000014 	.word	0x20000014

08003438 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_MspInit+0x30>)
 8003440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_MspInit+0x30>)
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_MspInit+0x30>)
 8003450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	58024400 	.word	0x58024400

0800346c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0b4      	sub	sp, #208	; 0xd0
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003474:	f107 0310 	add.w	r3, r7, #16
 8003478:	22c0      	movs	r2, #192	; 0xc0
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f018 f863 	bl	801b548 <memset>
  if(hadc->Instance==ADC3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_ADC_MspInit+0xc8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d14e      	bne.n	800352a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800348c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8003498:	2301      	movs	r3, #1
 800349a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800349c:	2313      	movs	r3, #19
 800349e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 80034a0:	234f      	movs	r3, #79	; 0x4f
 80034a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80034a4:	2302      	movs	r3, #2
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80034b0:	2320      	movs	r3, #32
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034be:	f107 0310 	add.w	r3, r7, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f007 fd1e 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80034ce:	f7ff ff83 	bl	80033d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 8003502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800350e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003512:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003516:	f000 fed7 	bl	80042c8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2100      	movs	r1, #0
 800351e:	207f      	movs	r0, #127	; 0x7f
 8003520:	f002 fd29 	bl	8005f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003524:	207f      	movs	r0, #127	; 0x7f
 8003526:	f002 fd40 	bl	8005faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	37d0      	adds	r7, #208	; 0xd0
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58026000 	.word	0x58026000
 8003538:	58024400 	.word	0x58024400

0800353c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_DAC_MspInit+0x80>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d129      	bne.n	80035b2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 8003560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003564:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 8003566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800356a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 8003570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 800357e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003582:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_DAC_MspInit+0x84>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800359a:	2310      	movs	r3, #16
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800359e:	2303      	movs	r3, #3
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4619      	mov	r1, r3
 80035ac:	4805      	ldr	r0, [pc, #20]	; (80035c4 <HAL_DAC_MspInit+0x88>)
 80035ae:	f004 fb2b 	bl	8007c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80035b2:	bf00      	nop
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40007400 	.word	0x40007400
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58020000 	.word	0x58020000

080035c8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0b4      	sub	sp, #208	; 0xd0
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d0:	f107 0310 	add.w	r3, r7, #16
 80035d4:	22c0      	movs	r2, #192	; 0xc0
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f017 ffb5 	bl	801b548 <memset>
  if(hhrtim->Instance==HRTIM1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_HRTIM_MspInit+0x8c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d131      	bne.n	800364c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80035e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	4618      	mov	r0, r3
 8003600:	f007 fc80 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800360a:	f7ff fee5 	bl	80033d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_HRTIM_MspInit+0x90>)
 8003610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003614:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_HRTIM_MspInit+0x90>)
 8003616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800361a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_HRTIM_MspInit+0x90>)
 8003620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	2068      	movs	r0, #104	; 0x68
 8003632:	f002 fca0 	bl	8005f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8003636:	2068      	movs	r0, #104	; 0x68
 8003638:	f002 fcb7 	bl	8005faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	2100      	movs	r1, #0
 8003640:	206c      	movs	r0, #108	; 0x6c
 8003642:	f002 fc98 	bl	8005f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8003646:	206c      	movs	r0, #108	; 0x6c
 8003648:	f002 fcaf 	bl	8005faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800364c:	bf00      	nop
 800364e:	37d0      	adds	r7, #208	; 0xd0
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40017400 	.word	0x40017400
 8003658:	58024400 	.word	0x58024400

0800365c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_HRTIM_MspPostInit+0xa8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d13d      	bne.n	80036fa <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 8003686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 800369e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a2:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_HRTIM_MspPostInit+0xac>)
 80036ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80036ca:	2302      	movs	r3, #2
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <HAL_HRTIM_MspPostInit+0xb0>)
 80036d6:	f004 fa97 	bl	8007c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036da:	23c0      	movs	r3, #192	; 0xc0
 80036dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4619      	mov	r1, r3
 80036f4:	4806      	ldr	r0, [pc, #24]	; (8003710 <HAL_HRTIM_MspPostInit+0xb4>)
 80036f6:	f004 fa87 	bl	8007c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80036fa:	bf00      	nop
 80036fc:	3728      	adds	r7, #40	; 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40017400 	.word	0x40017400
 8003708:	58024400 	.word	0x58024400
 800370c:	58021800 	.word	0x58021800
 8003710:	58020800 	.word	0x58020800

08003714 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b0b4      	sub	sp, #208	; 0xd0
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	22c0      	movs	r2, #192	; 0xc0
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f017 ff0f 	bl	801b548 <memset>
  if(hlptim->Instance==LPTIM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_LPTIM_MspInit+0x80>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d12a      	bne.n	800378a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003734:	f04f 0220 	mov.w	r2, #32
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003740:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4618      	mov	r0, r3
 800374e:	f007 fbd9 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003758:	f7ff fe3e 	bl	80033d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_LPTIM_MspInit+0x84>)
 800375e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003762:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_LPTIM_MspInit+0x84>)
 8003764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003768:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_LPTIM_MspInit+0x84>)
 800376e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	205d      	movs	r0, #93	; 0x5d
 8003780:	f002 fbf9 	bl	8005f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003784:	205d      	movs	r0, #93	; 0x5d
 8003786:	f002 fc10 	bl	8005faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800378a:	bf00      	nop
 800378c:	37d0      	adds	r7, #208	; 0xd0
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40002400 	.word	0x40002400
 8003798:	58024400 	.word	0x58024400

0800379c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <HAL_TIM_Base_MspInit+0xbc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10f      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80037cc:	e03d      	b.n	800384a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d10f      	bne.n	80037f8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 80037ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
}
 80037f6:	e028      	b.n	800384a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_TIM_Base_MspInit+0xc4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10f      	bne.n	8003822 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 8003804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 8003814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	e013      	b.n	800384a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_TIM_Base_MspInit+0xc8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10e      	bne.n	800384a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 800382e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_TIM_Base_MspInit+0xc0>)
 800383e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	58024400 	.word	0x58024400
 8003860:	40000400 	.word	0x40000400
 8003864:	40000c00 	.word	0x40000c00

08003868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0ba      	sub	sp, #232	; 0xe8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	22c0      	movs	r2, #192	; 0xc0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f017 fe5d 	bl	801b548 <memset>
  if(huart->Instance==USART3)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_UART_MspInit+0xc8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d146      	bne.n	8003926 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003898:	f04f 0202 	mov.w	r2, #2
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038aa:	f107 0310 	add.w	r3, r7, #16
 80038ae:	4618      	mov	r0, r3
 80038b0:	f007 fb28 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80038ba:	f7ff fd8d 	bl	80033d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e2:	4a14      	ldr	r2, [pc, #80]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_UART_MspInit+0xcc>)
 80038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80038fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003914:	2307      	movs	r3, #7
 8003916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800391a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <HAL_UART_MspInit+0xd0>)
 8003922:	f004 f971 	bl	8007c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003926:	bf00      	nop
 8003928:	37e8      	adds	r7, #232	; 0xe8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40004800 	.word	0x40004800
 8003934:	58024400 	.word	0x58024400
 8003938:	58020c00 	.word	0x58020c00

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003940:	f007 fac4 	bl	800aecc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003944:	f7ff fd48 	bl	80033d8 <Error_Handler>
 8003948:	e7fc      	b.n	8003944 <NMI_Handler+0x8>

0800394a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800394e:	f7ff fd43 	bl	80033d8 <Error_Handler>
 8003952:	e7fc      	b.n	800394e <HardFault_Handler+0x4>

08003954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003958:	f7ff fd3e 	bl	80033d8 <Error_Handler>
 800395c:	e7fc      	b.n	8003958 <MemManage_Handler+0x4>

0800395e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8003962:	f7ff fd39 	bl	80033d8 <Error_Handler>
 8003966:	e7fc      	b.n	8003962 <BusFault_Handler+0x4>

08003968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 800396c:	f7ff fd34 	bl	80033d8 <Error_Handler>
 8003970:	e7fc      	b.n	800396c <UsageFault_Handler+0x4>

08003972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a0:	f000 fc2e 	bl	8004200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039b0:	f004 fb25 	bl	8007ffe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80039b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039b8:	f004 fb21 	bl	8007ffe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <LPTIM1_IRQHandler+0x10>)
 80039c6:	f005 ff5a 	bl	800987e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200003a8 	.word	0x200003a8

080039d4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80039d8:	2100      	movs	r1, #0
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80039dc:	f004 ff86 	bl	80088ec <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200002cc 	.word	0x200002cc

080039e8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80039ec:	2104      	movs	r1, #4
 80039ee:	4802      	ldr	r0, [pc, #8]	; (80039f8 <HRTIM1_TIME_IRQHandler+0x10>)
 80039f0:	f004 ff7c 	bl	80088ec <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200002cc 	.word	0x200002cc

080039fc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <ADC3_IRQHandler+0x10>)
 8003a02:	f001 f981 	bl	8004d08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000254 	.word	0x20000254

08003a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
	return 1;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_kill>:

int _kill(int pid, int sig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <_kill+0x20>)
 8003a2c:	2216      	movs	r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	200072f4 	.word	0x200072f4

08003a44 <_exit>:

void _exit (int status)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ffe5 	bl	8003a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a56:	e7fe      	b.n	8003a56 <_exit+0x12>

08003a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e00a      	b.n	8003a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a6a:	f3af 8000 	nop.w
 8003a6e:	4601      	mov	r1, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	b2ca      	uxtb	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dbf0      	blt.n	8003a6a <_read+0x12>
	}

return len;
 8003a88:	687b      	ldr	r3, [r7, #4]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e009      	b.n	8003ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60ba      	str	r2, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fc9d 	bl	80023ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	dbf1      	blt.n	8003aa4 <_write+0x12>
	}
	return len;
 8003ac0:	687b      	ldr	r3, [r7, #4]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_close>:

int _close(int file)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003af2:	605a      	str	r2, [r3, #4]
	return 0;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_isatty>:

int _isatty(int file)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
	return 1;
 8003b0a:	2301      	movs	r3, #1
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
	return 0;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <_sbrk+0x5c>)
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <_sbrk+0x60>)
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <_sbrk+0x64>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <_sbrk+0x68>)
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <_sbrk+0x64>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d205      	bcs.n	8003b70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <_sbrk+0x6c>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e009      	b.n	8003b84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <_sbrk+0x64>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <_sbrk+0x64>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <_sbrk+0x64>)
 8003b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20020000 	.word	0x20020000
 8003b94:	00000400 	.word	0x00000400
 8003b98:	20000600 	.word	0x20000600
 8003b9c:	20007308 	.word	0x20007308
 8003ba0:	200072f4 	.word	0x200072f4

08003ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <SystemInit+0x104>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <SystemInit+0x104>)
 8003bb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003bba:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <SystemInit+0x108>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d807      	bhi.n	8003bd6 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <SystemInit+0x108>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	4a37      	ldr	r2, [pc, #220]	; (8003cac <SystemInit+0x108>)
 8003bd0:	f043 0307 	orr.w	r3, r3, #7
 8003bd4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003bd6:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <SystemInit+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a35      	ldr	r2, [pc, #212]	; (8003cb0 <SystemInit+0x10c>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003be2:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <SystemInit+0x10c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <SystemInit+0x10c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4930      	ldr	r1, [pc, #192]	; (8003cb0 <SystemInit+0x10c>)
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <SystemInit+0x110>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <SystemInit+0x108>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c00:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <SystemInit+0x108>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 030f 	bic.w	r3, r3, #15
 8003c08:	4a28      	ldr	r2, [pc, #160]	; (8003cac <SystemInit+0x108>)
 8003c0a:	f043 0307 	orr.w	r3, r3, #7
 8003c0e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <SystemInit+0x10c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <SystemInit+0x10c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <SystemInit+0x10c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <SystemInit+0x10c>)
 8003c24:	4a24      	ldr	r2, [pc, #144]	; (8003cb8 <SystemInit+0x114>)
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <SystemInit+0x10c>)
 8003c2a:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <SystemInit+0x118>)
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <SystemInit+0x10c>)
 8003c30:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <SystemInit+0x11c>)
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <SystemInit+0x10c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <SystemInit+0x10c>)
 8003c3c:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <SystemInit+0x11c>)
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <SystemInit+0x10c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <SystemInit+0x10c>)
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <SystemInit+0x11c>)
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <SystemInit+0x10c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <SystemInit+0x10c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <SystemInit+0x10c>)
 8003c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <SystemInit+0x10c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <SystemInit+0x120>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <SystemInit+0x124>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c70:	d202      	bcs.n	8003c78 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <SystemInit+0x128>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <SystemInit+0x10c>)
 8003c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <SystemInit+0x10c>)
 8003c80:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003c84:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <SystemInit+0x10c>)
 8003c8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c8e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003c90:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <SystemInit+0x12c>)
 8003c94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	52002000 	.word	0x52002000
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003cb8:	02020200 	.word	0x02020200
 8003cbc:	01ff0000 	.word	0x01ff0000
 8003cc0:	01010280 	.word	0x01010280
 8003cc4:	5c001000 	.word	0x5c001000
 8003cc8:	ffff0000 	.word	0xffff0000
 8003ccc:	51008108 	.word	0x51008108
 8003cd0:	52004000 	.word	0x52004000

08003cd4 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4803      	ldr	r0, [pc, #12]	; (8003cec <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003ce0:	f004 f973 	bl	8007fca <HAL_GPIO_TogglePin>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	58020400 	.word	0x58020400

08003cf0 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15d      	bne.n	8003dd4 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d1a:	ed93 5b00 	vldr	d5, [r3]
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d20:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d32:	ed93 7b04 	vldr	d7, [r3, #16]
 8003d36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d3a:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d40:	ed93 5b02 	vldr	d5, [r3, #8]
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d46:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d4a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d4e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003d52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d60:	ed93 7b04 	vldr	d7, [r3, #16]
 8003d64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d68:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003d6c:	ed97 6b04 	vldr	d6, [r7, #16]
 8003d70:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d74:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d7a:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003d86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003d8e:	ee17 3a90 	vmov	r3, s15
 8003d92:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003d9e:	f019 fbc3 	bl	801d528 <__stop_pop_veneer>
			i = 0;
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
			start_pop();
 8003da8:	f019 fbb6 	bl	801d518 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003db4:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003dbe:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4809      	ldr	r0, [pc, #36]	; (8003de8 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003dc4:	f004 f901 	bl	8007fca <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003dd0:	f017 fa2a 	bl	801b228 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003dd4:	bf00      	nop
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08020c30 	.word	0x08020c30
 8003de0:	2000060c 	.word	0x2000060c
 8003de4:	20000604 	.word	0x20000604
 8003de8:	58021000 	.word	0x58021000
 8003dec:	0801e22c 	.word	0x0801e22c

08003df0 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e0c:	f7ff feca 	bl	8003ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e12:	490d      	ldr	r1, [pc, #52]	; (8003e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e18:	e002      	b.n	8003e20 <LoopCopyDataInit>

08003e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1e:	3304      	adds	r3, #4

08003e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e24:	d3f9      	bcc.n	8003e1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e28:	4c0a      	ldr	r4, [pc, #40]	; (8003e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e2c:	e001      	b.n	8003e32 <LoopFillZerobss>

08003e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e30:	3204      	adds	r2, #4

08003e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e34:	d3fb      	bcc.n	8003e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e36:	f017 fbd9 	bl	801b5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fe fae9 	bl	8002410 <main>
  bx  lr
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003e4c:	08021148 	.word	0x08021148
  ldr r2, =_sbss
 8003e50:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003e54:	20007304 	.word	0x20007304

08003e58 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC_IRQHandler>

08003e5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <LAN8742_RegisterBusIO+0x28>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <LAN8742_RegisterBusIO+0x28>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <LAN8742_RegisterBusIO+0x28>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	e014      	b.n	8003eb2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d17c      	bne.n	8003fd8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e01c      	b.n	8003f32 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f107 0208 	add.w	r2, r7, #8
 8003f00:	2112      	movs	r1, #18
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	4798      	blx	r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da03      	bge.n	8003f14 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003f0c:	f06f 0304 	mvn.w	r3, #4
 8003f10:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003f12:	e00b      	b.n	8003f2c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d105      	bne.n	8003f2c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
         break;
 8003f2a:	e005      	b.n	8003f38 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b1f      	cmp	r3, #31
 8003f36:	d9df      	bls.n	8003ef8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b1f      	cmp	r3, #31
 8003f3e:	d902      	bls.n	8003f46 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003f40:	f06f 0302 	mvn.w	r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d145      	bne.n	8003fd8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6810      	ldr	r0, [r2, #0]
 8003f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4798      	blx	r3
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db37      	blt.n	8003fd2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6810      	ldr	r0, [r2, #0]
 8003f6a:	f107 0208 	add.w	r2, r7, #8
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4798      	blx	r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db28      	blt.n	8003fca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	4798      	blx	r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003f82:	e01c      	b.n	8003fbe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4798      	blx	r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f96:	d80e      	bhi.n	8003fb6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6810      	ldr	r0, [r2, #0]
 8003fa0:	f107 0208 	add.w	r2, r7, #8
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4798      	blx	r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da07      	bge.n	8003fbe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003fae:	f06f 0304 	mvn.w	r3, #4
 8003fb2:	613b      	str	r3, [r7, #16]
                 break;
 8003fb4:	e010      	b.n	8003fd8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003fb6:	f06f 0301 	mvn.w	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
               break;
 8003fbc:	e00c      	b.n	8003fd8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1dd      	bne.n	8003f84 <LAN8742_Init+0xc6>
 8003fc8:	e006      	b.n	8003fd8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003fca:	f06f 0304 	mvn.w	r3, #4
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	e002      	b.n	8003fd8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003fd2:	f06f 0303 	mvn.w	r3, #3
 8003fd6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d112      	bne.n	8004004 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	4798      	blx	r3
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003fe8:	bf00      	nop
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	4798      	blx	r3
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ffc:	d9f5      	bls.n	8003fea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8004004:	693b      	ldr	r3, [r7, #16]
 }
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6810      	ldr	r0, [r2, #0]
 8004022:	f107 020c 	add.w	r2, r7, #12
 8004026:	2101      	movs	r1, #1
 8004028:	4798      	blx	r3
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	da02      	bge.n	8004036 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004030:	f06f 0304 	mvn.w	r3, #4
 8004034:	e06e      	b.n	8004114 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6810      	ldr	r0, [r2, #0]
 800403e:	f107 020c 	add.w	r2, r7, #12
 8004042:	2101      	movs	r1, #1
 8004044:	4798      	blx	r3
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	da02      	bge.n	8004052 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800404c:	f06f 0304 	mvn.w	r3, #4
 8004050:	e060      	b.n	8004114 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800405c:	2301      	movs	r3, #1
 800405e:	e059      	b.n	8004114 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6810      	ldr	r0, [r2, #0]
 8004068:	f107 020c 	add.w	r2, r7, #12
 800406c:	2100      	movs	r1, #0
 800406e:	4798      	blx	r3
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	da02      	bge.n	800407c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004076:	f06f 0304 	mvn.w	r3, #4
 800407a:	e04b      	b.n	8004114 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11b      	bne.n	80040be <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <LAN8742_GetLinkState+0x90>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800409a:	2302      	movs	r3, #2
 800409c:	e03a      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e033      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80040b6:	2304      	movs	r3, #4
 80040b8:	e02c      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80040ba:	2305      	movs	r3, #5
 80040bc:	e02a      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6810      	ldr	r0, [r2, #0]
 80040c6:	f107 020c 	add.w	r2, r7, #12
 80040ca:	211f      	movs	r1, #31
 80040cc:	4798      	blx	r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da02      	bge.n	80040da <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80040d4:	f06f 0304 	mvn.w	r3, #4
 80040d8:	e01c      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80040e4:	2306      	movs	r3, #6
 80040e6:	e015      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 031c 	and.w	r3, r3, #28
 80040ee:	2b18      	cmp	r3, #24
 80040f0:	d101      	bne.n	80040f6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80040f2:	2302      	movs	r3, #2
 80040f4:	e00e      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 031c 	and.w	r3, r3, #28
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d101      	bne.n	8004104 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004100:	2303      	movs	r3, #3
 8004102:	e007      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 031c 	and.w	r3, r3, #28
 800410a:	2b14      	cmp	r3, #20
 800410c:	d101      	bne.n	8004112 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800410e:	2304      	movs	r3, #4
 8004110:	e000      	b.n	8004114 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004112:	2305      	movs	r3, #5
    }				
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004122:	2003      	movs	r0, #3
 8004124:	f001 ff1c 	bl	8005f60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004128:	f006 fcfa 	bl	800ab20 <HAL_RCC_GetSysClockFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_Init+0x68>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	4913      	ldr	r1, [pc, #76]	; (8004188 <HAL_Init+0x6c>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_Init+0x68>)
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_Init+0x6c>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_Init+0x70>)
 800415e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004160:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <HAL_Init+0x74>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004166:	2000      	movs	r0, #0
 8004168:	f000 f814 	bl	8004194 <HAL_InitTick>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e002      	b.n	800417c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004176:	f7ff f95f 	bl	8003438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	58024400 	.word	0x58024400
 8004188:	08020c48 	.word	0x08020c48
 800418c:	20000010 	.word	0x20000010
 8004190:	2000000c 	.word	0x2000000c

08004194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_InitTick+0x60>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e021      	b.n	80041ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <HAL_InitTick+0x64>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_InitTick+0x60>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 ff01 	bl	8005fc6 <HAL_SYSTICK_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00e      	b.n	80041ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d80a      	bhi.n	80041ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	2200      	movs	r2, #0
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f001 fecb 	bl	8005f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <HAL_InitTick+0x68>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000024 	.word	0x20000024
 80041f8:	2000000c 	.word	0x2000000c
 80041fc:	20000020 	.word	0x20000020

08004200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_IncTick+0x20>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x24>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_IncTick+0x24>)
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000024 	.word	0x20000024
 8004224:	20000610 	.word	0x20000610

08004228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return uwTick;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_GetTick+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000610 	.word	0x20000610

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff ffee 	bl	8004228 <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d005      	beq.n	8004266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_Delay+0x44>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004266:	bf00      	nop
 8004268:	f7ff ffde 	bl	8004228 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d8f7      	bhi.n	8004268 <HAL_Delay+0x28>
  {
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000024 	.word	0x20000024

08004288 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_GetREVID+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0c1b      	lsrs	r3, r3, #16
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	5c001000 	.word	0x5c001000

080042a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042b0:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	58000400 	.word	0x58000400

080042c8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	58000400 	.word	0x58000400

080042f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3360      	adds	r3, #96	; 0x60
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	431a      	orrs	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	611a      	str	r2, [r3, #16]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3360      	adds	r3, #96	; 0x60
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	601a      	str	r2, [r3, #0]
  }
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3330      	adds	r3, #48	; 0x30
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	4413      	add	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	211f      	movs	r1, #31
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	401a      	ands	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0e9b      	lsrs	r3, r3, #26
 8004462:	f003 011f 	and.w	r1, r3, #31
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3314      	adds	r3, #20
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	0e5b      	lsrs	r3, r3, #25
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0d1b      	lsrs	r3, r3, #20
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2107      	movs	r1, #7
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	401a      	ands	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0d1b      	lsrs	r3, r3, #20
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004518:	43db      	mvns	r3, r3
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0318 	and.w	r3, r3, #24
 8004522:	4908      	ldr	r1, [pc, #32]	; (8004544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004524:	40d9      	lsrs	r1, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	400b      	ands	r3, r1
 800452a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	000fffff 	.word	0x000fffff

08004548 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 031f 	and.w	r3, r3, #31
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6093      	str	r3, [r2, #8]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	5fffffc0 	.word	0x5fffffc0

080045a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b8:	d101      	bne.n	80045be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80045da:	4013      	ands	r3, r2
 80045dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	6fffffc0 	.word	0x6fffffc0

080045f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004608:	d101      	bne.n	800460e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <LL_ADC_Enable+0x24>)
 800462a:	4013      	ands	r3, r2
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	7fffffc0 	.word	0x7fffffc0

08004644 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <LL_ADC_Disable+0x24>)
 8004652:	4013      	ands	r3, r2
 8004654:	f043 0202 	orr.w	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	7fffffc0 	.word	0x7fffffc0

0800466c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <LL_ADC_IsEnabled+0x18>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <LL_ADC_IsEnabled+0x1a>
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d101      	bne.n	80046aa <LL_ADC_IsDisableOngoing+0x18>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <LL_ADC_IsDisableOngoing+0x1a>
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <LL_ADC_REG_StartConversion+0x24>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	7fffffc0 	.word	0x7fffffc0

080046e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d101      	bne.n	80046f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d101      	bne.n	800471e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e18f      	b.n	8004a66 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe fe89 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff19 	bl	80045a4 <LL_ADC_IsDeepPowerDownEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff feff 	bl	8004580 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff34 	bl	80045f4 <LL_ADC_IsInternalRegulatorEnabled>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d114      	bne.n	80047bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ff18 	bl	80045cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800479c:	4b87      	ldr	r3, [pc, #540]	; (80049bc <HAL_ADC_Init+0x290>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	4a87      	ldr	r2, [pc, #540]	; (80049c0 <HAL_ADC_Init+0x294>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	3301      	adds	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047ae:	e002      	b.n	80047b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f9      	bne.n	80047b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff17 	bl	80045f4 <LL_ADC_IsInternalRegulatorEnabled>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0210 	orr.w	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff77 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 80047f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 8129 	bne.w	8004a54 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8125 	bne.w	8004a54 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff24 	bl	800466c <LL_ADC_IsEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d136      	bne.n	8004898 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_ADC_Init+0x298>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_ADC_Init+0x112>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <HAL_ADC_Init+0x29c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10e      	bne.n	800485c <HAL_ADC_Init+0x130>
 800483e:	4861      	ldr	r0, [pc, #388]	; (80049c4 <HAL_ADC_Init+0x298>)
 8004840:	f7ff ff14 	bl	800466c <LL_ADC_IsEnabled>
 8004844:	4604      	mov	r4, r0
 8004846:	4860      	ldr	r0, [pc, #384]	; (80049c8 <HAL_ADC_Init+0x29c>)
 8004848:	f7ff ff10 	bl	800466c <LL_ADC_IsEnabled>
 800484c:	4603      	mov	r3, r0
 800484e:	4323      	orrs	r3, r4
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e008      	b.n	800486e <HAL_ADC_Init+0x142>
 800485c:	485b      	ldr	r0, [pc, #364]	; (80049cc <HAL_ADC_Init+0x2a0>)
 800485e:	f7ff ff05 	bl	800466c <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a53      	ldr	r2, [pc, #332]	; (80049c4 <HAL_ADC_Init+0x298>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_ADC_Init+0x15a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a51      	ldr	r2, [pc, #324]	; (80049c8 <HAL_ADC_Init+0x29c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_ADC_Init+0x15e>
 8004886:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_ADC_Init+0x2a4>)
 8004888:	e000      	b.n	800488c <HAL_ADC_Init+0x160>
 800488a:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_ADC_Init+0x2a8>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7ff fd2e 	bl	80042f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004898:	f7ff fcf6 	bl	8004288 <HAL_GetREVID>
 800489c:	4603      	mov	r3, r0
 800489e:	f241 0203 	movw	r2, #4099	; 0x1003
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d914      	bls.n	80048d0 <HAL_ADC_Init+0x1a4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d110      	bne.n	80048d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7d5b      	ldrb	r3, [r3, #21]
 80048b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80048be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7f1b      	ldrb	r3, [r3, #28]
 80048c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80048c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048c8:	f043 030c 	orr.w	r3, r3, #12
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e00d      	b.n	80048ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7d5b      	ldrb	r3, [r3, #21]
 80048d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80048e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7f1b      	ldrb	r3, [r3, #28]
 80048e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7f1b      	ldrb	r3, [r3, #28]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	045b      	lsls	r3, r3, #17
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <HAL_ADC_Init+0x2ac>)
 8004926:	4013      	ands	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	430b      	orrs	r3, r1
 8004930:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fed2 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 800493c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fedf 	bl	8004706 <LL_ADC_INJ_IsConversionOngoing>
 8004948:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d15f      	bne.n	8004a10 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d15c      	bne.n	8004a10 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	7d1b      	ldrb	r3, [r3, #20]
 800495a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <HAL_ADC_Init+0x2b0>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	430b      	orrs	r3, r1
 8004976:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800497e:	2b01      	cmp	r3, #1
 8004980:	d130      	bne.n	80049e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_ADC_Init+0x2b4>)
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004996:	3a01      	subs	r2, #1
 8004998:	0411      	lsls	r1, r2, #16
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049a4:	4311      	orrs	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049aa:	430a      	orrs	r2, r1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	611a      	str	r2, [r3, #16]
 80049b8:	e01c      	b.n	80049f4 <HAL_ADC_Init+0x2c8>
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	053e2d63 	.word	0x053e2d63
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40022100 	.word	0x40022100
 80049cc:	58026000 	.word	0x58026000
 80049d0:	40022300 	.word	0x40022300
 80049d4:	58026300 	.word	0x58026300
 80049d8:	fff0c003 	.word	0xfff0c003
 80049dc:	ffffbffc 	.word	0xffffbffc
 80049e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 f804 	bl	8005a18 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10c      	bne.n	8004a32 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f023 010f 	bic.w	r1, r3, #15
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a30:	e007      	b.n	8004a42 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 020f 	bic.w	r2, r2, #15
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
 8004a52:	e007      	b.n	8004a64 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	f043 0210 	orr.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	bf00      	nop

08004a70 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a92      	ldr	r2, [pc, #584]	; (8004cc8 <HAL_ADC_Start_IT+0x258>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_ADC_Start_IT+0x1c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a91      	ldr	r2, [pc, #580]	; (8004ccc <HAL_ADC_Start_IT+0x25c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d101      	bne.n	8004a90 <HAL_ADC_Start_IT+0x20>
 8004a8c:	4b90      	ldr	r3, [pc, #576]	; (8004cd0 <HAL_ADC_Start_IT+0x260>)
 8004a8e:	e000      	b.n	8004a92 <HAL_ADC_Start_IT+0x22>
 8004a90:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <HAL_ADC_Start_IT+0x264>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd58 	bl	8004548 <LL_ADC_GetMultimode>
 8004a98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fe1e 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 8118 	bne.w	8004cdc <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_Start_IT+0x4a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e113      	b.n	8004ce2 <HAL_ADC_Start_IT+0x272>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 febe 	bl	8005844 <ADC_Enable>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 80f5 	bne.w	8004cbe <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad8:	4b7f      	ldr	r3, [pc, #508]	; (8004cd8 <HAL_ADC_Start_IT+0x268>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <HAL_ADC_Start_IT+0x25c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d002      	beq.n	8004af4 <HAL_ADC_Start_IT+0x84>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_ADC_Start_IT+0x86>
 8004af4:	4b74      	ldr	r3, [pc, #464]	; (8004cc8 <HAL_ADC_Start_IT+0x258>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d002      	beq.n	8004b04 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f023 0206 	bic.w	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	659a      	str	r2, [r3, #88]	; 0x58
 8004b28:	e002      	b.n	8004b30 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	221c      	movs	r2, #28
 8004b36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 021c 	bic.w	r2, r2, #28
 8004b4e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d108      	bne.n	8004b6a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0208 	orr.w	r2, r2, #8
 8004b66:	605a      	str	r2, [r3, #4]
          break;
 8004b68:	e008      	b.n	8004b7c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0204 	orr.w	r2, r2, #4
 8004b78:	605a      	str	r2, [r3, #4]
          break;
 8004b7a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0210 	orr.w	r2, r2, #16
 8004b92:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a4c      	ldr	r2, [pc, #304]	; (8004ccc <HAL_ADC_Start_IT+0x25c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d002      	beq.n	8004ba4 <HAL_ADC_Start_IT+0x134>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	e000      	b.n	8004ba6 <HAL_ADC_Start_IT+0x136>
 8004ba4:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <HAL_ADC_Start_IT+0x258>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d008      	beq.n	8004bc0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d002      	beq.n	8004bc0 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	d13a      	bne.n	8004c36 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02d      	beq.n	8004c2a <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d110      	bne.n	8004c08 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0220 	bic.w	r2, r2, #32
 8004bf4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c04:	605a      	str	r2, [r3, #4]
              break;
 8004c06:	e010      	b.n	8004c2a <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c16:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0220 	orr.w	r2, r2, #32
 8004c26:	605a      	str	r2, [r3, #4]
              break;
 8004c28:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd42 	bl	80046b8 <LL_ADC_REG_StartConversion>
 8004c34:	e054      	b.n	8004ce0 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <HAL_ADC_Start_IT+0x25c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d002      	beq.n	8004c52 <HAL_ADC_Start_IT+0x1e2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	e000      	b.n	8004c54 <HAL_ADC_Start_IT+0x1e4>
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_ADC_Start_IT+0x258>)
 8004c54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d03e      	beq.n	8004ce0 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d110      	bne.n	8004c9c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0220 	bic.w	r2, r2, #32
 8004c88:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c98:	605a      	str	r2, [r3, #4]
              break;
 8004c9a:	e021      	b.n	8004ce0 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004caa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0220 	orr.w	r2, r2, #32
 8004cba:	605a      	str	r2, [r3, #4]
              break;
 8004cbc:	e010      	b.n	8004ce0 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004cc6:	e00b      	b.n	8004ce0 <HAL_ADC_Start_IT+0x270>
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40022100 	.word	0x40022100
 8004cd0:	40022300 	.word	0x40022300
 8004cd4:	58026300 	.word	0x58026300
 8004cd8:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop

08004cec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a87      	ldr	r2, [pc, #540]	; (8004f48 <HAL_ADC_IRQHandler+0x240>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_ADC_IRQHandler+0x30>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a86      	ldr	r2, [pc, #536]	; (8004f4c <HAL_ADC_IRQHandler+0x244>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_IRQHandler+0x34>
 8004d38:	4b85      	ldr	r3, [pc, #532]	; (8004f50 <HAL_ADC_IRQHandler+0x248>)
 8004d3a:	e000      	b.n	8004d3e <HAL_ADC_IRQHandler+0x36>
 8004d3c:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_ADC_IRQHandler+0x24c>)
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fc02 	bl	8004548 <LL_ADC_GetMultimode>
 8004d44:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_ADC_IRQHandler+0x78>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 f81a 	bl	8005dac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <HAL_ADC_IRQHandler+0x8c>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8083 	beq.w	8004ea6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d07d      	beq.n	8004ea6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fb1c 	bl	8004404 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d062      	beq.n	8004e98 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <HAL_ADC_IRQHandler+0x244>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d002      	beq.n	8004de2 <HAL_ADC_IRQHandler+0xda>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	e000      	b.n	8004de4 <HAL_ADC_IRQHandler+0xdc>
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_ADC_IRQHandler+0x240>)
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d008      	beq.n	8004dfe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d002      	beq.n	8004dfe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b09      	cmp	r3, #9
 8004dfc:	d104      	bne.n	8004e08 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	e00c      	b.n	8004e22 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a4f      	ldr	r2, [pc, #316]	; (8004f4c <HAL_ADC_IRQHandler+0x244>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d002      	beq.n	8004e18 <HAL_ADC_IRQHandler+0x110>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	e000      	b.n	8004e1a <HAL_ADC_IRQHandler+0x112>
 8004e18:	4b4b      	ldr	r3, [pc, #300]	; (8004f48 <HAL_ADC_IRQHandler+0x240>)
 8004e1a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d135      	bne.n	8004e98 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d12e      	bne.n	8004e98 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fc4e 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11a      	bne.n	8004e80 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 020c 	bic.w	r2, r2, #12
 8004e58:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d112      	bne.n	8004e98 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f043 0201 	orr.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
 8004e7e:	e00b      	b.n	8004e98 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	f043 0210 	orr.w	r2, r3, #16
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fe fa1f 	bl	80032dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_IRQHandler+0x1b2>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80a0 	beq.w	8005006 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 809a 	beq.w	8005006 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fac7 	bl	8004482 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ef4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fa82 	bl	8004404 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f00:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <HAL_ADC_IRQHandler+0x244>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d002      	beq.n	8004f12 <HAL_ADC_IRQHandler+0x20a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	e000      	b.n	8004f14 <HAL_ADC_IRQHandler+0x20c>
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <HAL_ADC_IRQHandler+0x240>)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d008      	beq.n	8004f2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d002      	beq.n	8004f2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	d104      	bne.n	8004f38 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e014      	b.n	8004f62 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <HAL_ADC_IRQHandler+0x244>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00a      	beq.n	8004f58 <HAL_ADC_IRQHandler+0x250>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	e008      	b.n	8004f5a <HAL_ADC_IRQHandler+0x252>
 8004f48:	40022000 	.word	0x40022000
 8004f4c:	40022100 	.word	0x40022100
 8004f50:	40022300 	.word	0x40022300
 8004f54:	58026300 	.word	0x58026300
 8004f58:	4b84      	ldr	r3, [pc, #528]	; (800516c <HAL_ADC_IRQHandler+0x464>)
 8004f5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d047      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x27a>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d03f      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d13a      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d133      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12e      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fbb1 	bl	8004706 <LL_ADC_INJ_IsConversionOngoing>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11a      	bne.n	8004fe0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d112      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f043 0201 	orr.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8004fde:	e00b      	b.n	8004ff8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	f043 0210 	orr.w	r2, r3, #16
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 feaf 	bl	8005d5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2260      	movs	r2, #96	; 0x60
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_ADC_IRQHandler+0x32c>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8a8 	bl	800517c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <HAL_ADC_IRQHandler+0x35c>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fe95 	bl	8005d84 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <HAL_ADC_IRQHandler+0x38c>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fe87 	bl	8005d98 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d043      	beq.n	8005126 <HAL_ADC_IRQHandler+0x41e>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d03e      	beq.n	8005126 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80050b0:	2301      	movs	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	e021      	b.n	80050fa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <HAL_ADC_IRQHandler+0x464>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_ADC_IRQHandler+0x3c8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <HAL_ADC_IRQHandler+0x468>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x3cc>
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_ADC_IRQHandler+0x46c>)
 80050d2:	e000      	b.n	80050d6 <HAL_ADC_IRQHandler+0x3ce>
 80050d4:	4b28      	ldr	r3, [pc, #160]	; (8005178 <HAL_ADC_IRQHandler+0x470>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fa44 	bl	8004564 <LL_ADC_GetMultiDMATransfer>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80050e2:	2301      	movs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	e008      	b.n	80050fa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80050f6:	2301      	movs	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10e      	bne.n	800511e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f043 0202 	orr.w	r2, r3, #2
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f839 	bl	8005190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2210      	movs	r2, #16
 8005124:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d018      	beq.n	8005162 <HAL_ADC_IRQHandler+0x45a>
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005136:	2b00      	cmp	r3, #0
 8005138:	d013      	beq.n	8005162 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f043 0208 	orr.w	r2, r3, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800515a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fe07 	bl	8005d70 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005162:	bf00      	nop
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40022000 	.word	0x40022000
 8005170:	40022100 	.word	0x40022100
 8005174:	40022300 	.word	0x40022300
 8005178:	58026300 	.word	0x58026300

0800517c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b0a1      	sub	sp, #132	; 0x84
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a9d      	ldr	r2, [pc, #628]	; (8005434 <HAL_ADC_ConfigChannel+0x290>)
 80051be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x2a>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e321      	b.n	8005812 <HAL_ADC_ConfigChannel+0x66e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fa80 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 8306 	bne.w	80057f4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d108      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x62>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0e9b      	lsrs	r3, r3, #26
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	e016      	b.n	8005234 <HAL_ADC_ConfigChannel+0x90>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005216:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800521e:	2320      	movs	r3, #32
 8005220:	e003      	b.n	800522a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005224:	fab3 f383 	clz	r3, r3
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2201      	movs	r2, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	69d1      	ldr	r1, [r2, #28]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	430b      	orrs	r3, r1
 8005240:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7ff f8eb 	bl	800442a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fa41 	bl	80046e0 <LL_ADC_REG_IsConversionOngoing>
 800525e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fa4e 	bl	8004706 <LL_ADC_INJ_IsConversionOngoing>
 800526a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800526c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 80b3 	bne.w	80053da <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 80af 	bne.w	80053da <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	461a      	mov	r2, r3
 800528a:	f7ff f90d 	bl	80044a8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <HAL_ADC_ConfigChannel+0x294>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800529a:	d10b      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x110>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	e01d      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x14c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10b      	bne.n	80052da <HAL_ADC_ConfigChannel+0x136>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	e00a      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x14c>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d027      	beq.n	800534a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6919      	ldr	r1, [r3, #16]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005308:	f7ff f828 	bl	800435c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6919      	ldr	r1, [r3, #16]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7e5b      	ldrb	r3, [r3, #25]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x17e>
 800531c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005320:	e000      	b.n	8005324 <HAL_ADC_ConfigChannel+0x180>
 8005322:	2300      	movs	r3, #0
 8005324:	461a      	mov	r2, r3
 8005326:	f7ff f852 	bl	80043ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6919      	ldr	r1, [r3, #16]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	7e1b      	ldrb	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d102      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x19c>
 800533a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800533e:	e000      	b.n	8005342 <HAL_ADC_ConfigChannel+0x19e>
 8005340:	2300      	movs	r3, #0
 8005342:	461a      	mov	r2, r3
 8005344:	f7ff f82a 	bl	800439c <LL_ADC_SetDataRightShift>
 8005348:	e047      	b.n	80053da <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	069b      	lsls	r3, r3, #26
 800535a:	429a      	cmp	r2, r3
 800535c:	d107      	bne.n	800536e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800536c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	069b      	lsls	r3, r3, #26
 800537e:	429a      	cmp	r2, r3
 8005380:	d107      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005390:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	069b      	lsls	r3, r3, #26
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d107      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053b4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	069b      	lsls	r3, r3, #26
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d107      	bne.n	80053da <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff f944 	bl	800466c <LL_ADC_IsEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 820d 	bne.w	8005806 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	461a      	mov	r2, r3
 80053fa:	f7ff f881 	bl	8004500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <HAL_ADC_ConfigChannel+0x290>)
 8005404:	4293      	cmp	r3, r2
 8005406:	f040 8133 	bne.w	8005670 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005416:	2b00      	cmp	r3, #0
 8005418:	d110      	bne.n	800543c <HAL_ADC_ConfigChannel+0x298>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0e9b      	lsrs	r3, r3, #26
 8005420:	3301      	adds	r3, #1
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2b09      	cmp	r3, #9
 8005428:	bf94      	ite	ls
 800542a:	2301      	movls	r3, #1
 800542c:	2300      	movhi	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	e01e      	b.n	8005470 <HAL_ADC_ConfigChannel+0x2cc>
 8005432:	bf00      	nop
 8005434:	47ff0000 	.word	0x47ff0000
 8005438:	5c001000 	.word	0x5c001000
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005444:	fa93 f3a3 	rbit	r3, r3
 8005448:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800544a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005454:	2320      	movs	r3, #32
 8005456:	e003      	b.n	8005460 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	fab3 f383 	clz	r3, r3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	3301      	adds	r3, #1
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2b09      	cmp	r3, #9
 8005468:	bf94      	ite	ls
 800546a:	2301      	movls	r3, #1
 800546c:	2300      	movhi	r3, #0
 800546e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005470:	2b00      	cmp	r3, #0
 8005472:	d079      	beq.n	8005568 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x2ec>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	3301      	adds	r3, #1
 8005488:	069b      	lsls	r3, r3, #26
 800548a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800548e:	e015      	b.n	80054bc <HAL_ADC_ConfigChannel+0x318>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	fa93 f3a3 	rbit	r3, r3
 800549c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80054a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e003      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80054ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	3301      	adds	r3, #1
 80054b6:	069b      	lsls	r3, r3, #26
 80054b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x338>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0e9b      	lsrs	r3, r3, #26
 80054ce:	3301      	adds	r3, #1
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	e017      	b.n	800550c <HAL_ADC_ConfigChannel+0x368>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e4:	fa93 f3a3 	rbit	r3, r3
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80054ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80054f4:	2320      	movs	r3, #32
 80054f6:	e003      	b.n	8005500 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	3301      	adds	r3, #1
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2101      	movs	r1, #1
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x38e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	3301      	adds	r3, #1
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	051b      	lsls	r3, r3, #20
 8005530:	e018      	b.n	8005564 <HAL_ADC_ConfigChannel+0x3c0>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800554a:	2320      	movs	r3, #32
 800554c:	e003      	b.n	8005556 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f003 021f 	and.w	r2, r3, #31
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005564:	430b      	orrs	r3, r1
 8005566:	e07e      	b.n	8005666 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005570:	2b00      	cmp	r3, #0
 8005572:	d107      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x3e0>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	3301      	adds	r3, #1
 800557c:	069b      	lsls	r3, r3, #26
 800557e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005582:	e015      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x40c>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	fa93 f3a3 	rbit	r3, r3
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800559c:	2320      	movs	r3, #32
 800559e:	e003      	b.n	80055a8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	069b      	lsls	r3, r3, #26
 80055ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x42c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0e9b      	lsrs	r3, r3, #26
 80055c2:	3301      	adds	r3, #1
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	e017      	b.n	8005600 <HAL_ADC_ConfigChannel+0x45c>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	fa93 f3a3 	rbit	r3, r3
 80055dc:	61bb      	str	r3, [r7, #24]
  return result;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80055e8:	2320      	movs	r3, #32
 80055ea:	e003      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	fab3 f383 	clz	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	3301      	adds	r3, #1
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2101      	movs	r1, #1
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	ea42 0103 	orr.w	r1, r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10d      	bne.n	800562c <HAL_ADC_ConfigChannel+0x488>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	0e9b      	lsrs	r3, r3, #26
 8005616:	3301      	adds	r3, #1
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	3b1e      	subs	r3, #30
 8005624:	051b      	lsls	r3, r3, #20
 8005626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800562a:	e01b      	b.n	8005664 <HAL_ADC_ConfigChannel+0x4c0>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
  return result;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005644:	2320      	movs	r3, #32
 8005646:	e003      	b.n	8005650 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	3301      	adds	r3, #1
 8005652:	f003 021f 	and.w	r2, r3, #31
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	3b1e      	subs	r3, #30
 800565e:	051b      	lsls	r3, r3, #20
 8005660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005664:	430b      	orrs	r3, r1
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	6892      	ldr	r2, [r2, #8]
 800566a:	4619      	mov	r1, r3
 800566c:	f7fe ff1c 	bl	80044a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f280 80c6 	bge.w	8005806 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_ADC_ConfigChannel+0x4ea>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a65      	ldr	r2, [pc, #404]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x4ee>
 800568e:	4b65      	ldr	r3, [pc, #404]	; (8005824 <HAL_ADC_ConfigChannel+0x680>)
 8005690:	e000      	b.n	8005694 <HAL_ADC_ConfigChannel+0x4f0>
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_ADC_ConfigChannel+0x684>)
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fe53 	bl	8004340 <LL_ADC_GetCommonPathInternalCh>
 800569a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5e      	ldr	r2, [pc, #376]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_ADC_ConfigChannel+0x50c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5d      	ldr	r2, [pc, #372]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10e      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x52a>
 80056b0:	485a      	ldr	r0, [pc, #360]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 80056b2:	f7fe ffdb 	bl	800466c <LL_ADC_IsEnabled>
 80056b6:	4604      	mov	r4, r0
 80056b8:	4859      	ldr	r0, [pc, #356]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 80056ba:	f7fe ffd7 	bl	800466c <LL_ADC_IsEnabled>
 80056be:	4603      	mov	r3, r0
 80056c0:	4323      	orrs	r3, r4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e008      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x53c>
 80056ce:	4857      	ldr	r0, [pc, #348]	; (800582c <HAL_ADC_ConfigChannel+0x688>)
 80056d0:	f7fe ffcc 	bl	800466c <LL_ADC_IsEnabled>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d07d      	beq.n	80057e0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a51      	ldr	r2, [pc, #324]	; (8005830 <HAL_ADC_ConfigChannel+0x68c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d130      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x5ac>
 80056ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d12b      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a4b      	ldr	r2, [pc, #300]	; (800582c <HAL_ADC_ConfigChannel+0x688>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f040 8081 	bne.w	8005806 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a44      	ldr	r2, [pc, #272]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_ADC_ConfigChannel+0x574>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a43      	ldr	r2, [pc, #268]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x578>
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_ADC_ConfigChannel+0x680>)
 800571a:	e000      	b.n	800571e <HAL_ADC_ConfigChannel+0x57a>
 800571c:	4a42      	ldr	r2, [pc, #264]	; (8005828 <HAL_ADC_ConfigChannel+0x684>)
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7fe fdf7 	bl	800431a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800572c:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_ADC_ConfigChannel+0x690>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	099b      	lsrs	r3, r3, #6
 8005732:	4a41      	ldr	r2, [pc, #260]	; (8005838 <HAL_ADC_ConfigChannel+0x694>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	099b      	lsrs	r3, r3, #6
 800573a:	3301      	adds	r3, #1
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005740:	e002      	b.n	8005748 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3b01      	subs	r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f9      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800574e:	e05a      	b.n	8005806 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a39      	ldr	r2, [pc, #228]	; (800583c <HAL_ADC_ConfigChannel+0x698>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d11e      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x5f4>
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d119      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a30      	ldr	r2, [pc, #192]	; (800582c <HAL_ADC_ConfigChannel+0x688>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d14b      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_ADC_ConfigChannel+0x5de>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x5e2>
 8005782:	4a28      	ldr	r2, [pc, #160]	; (8005824 <HAL_ADC_ConfigChannel+0x680>)
 8005784:	e000      	b.n	8005788 <HAL_ADC_ConfigChannel+0x5e4>
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_ADC_ConfigChannel+0x684>)
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe fdc2 	bl	800431a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005796:	e036      	b.n	8005806 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a28      	ldr	r2, [pc, #160]	; (8005840 <HAL_ADC_ConfigChannel+0x69c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d131      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x662>
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d12c      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	; (800582c <HAL_ADC_ConfigChannel+0x688>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d127      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_ADC_ConfigChannel+0x678>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_ADC_ConfigChannel+0x626>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_ADC_ConfigChannel+0x67c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x62a>
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <HAL_ADC_ConfigChannel+0x680>)
 80057cc:	e000      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x62c>
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_ADC_ConfigChannel+0x684>)
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe fd9e 	bl	800431a <LL_ADC_SetCommonPathInternalCh>
 80057de:	e012      	b.n	8005806 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80057f2:	e008      	b.n	8005806 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800580e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005812:	4618      	mov	r0, r3
 8005814:	3784      	adds	r7, #132	; 0x84
 8005816:	46bd      	mov	sp, r7
 8005818:	bd90      	pop	{r4, r7, pc}
 800581a:	bf00      	nop
 800581c:	40022000 	.word	0x40022000
 8005820:	40022100 	.word	0x40022100
 8005824:	40022300 	.word	0x40022300
 8005828:	58026300 	.word	0x58026300
 800582c:	58026000 	.word	0x58026000
 8005830:	cb840000 	.word	0xcb840000
 8005834:	2000000c 	.word	0x2000000c
 8005838:	053e2d63 	.word	0x053e2d63
 800583c:	c7520000 	.word	0xc7520000
 8005840:	cfb80000 	.word	0xcfb80000

08005844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe ff0b 	bl	800466c <LL_ADC_IsEnabled>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d16e      	bne.n	800593a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	4b38      	ldr	r3, [pc, #224]	; (8005944 <ADC_Enable+0x100>)
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e05a      	b.n	800593c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fec6 	bl	800461c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005890:	f7fe fcca 	bl	8004228 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2b      	ldr	r2, [pc, #172]	; (8005948 <ADC_Enable+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <ADC_Enable+0x66>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <ADC_Enable+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <ADC_Enable+0x6a>
 80058aa:	4b29      	ldr	r3, [pc, #164]	; (8005950 <ADC_Enable+0x10c>)
 80058ac:	e000      	b.n	80058b0 <ADC_Enable+0x6c>
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <ADC_Enable+0x110>)
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe fe49 	bl	8004548 <LL_ADC_GetMultimode>
 80058b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a23      	ldr	r2, [pc, #140]	; (800594c <ADC_Enable+0x108>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d002      	beq.n	80058c8 <ADC_Enable+0x84>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	e000      	b.n	80058ca <ADC_Enable+0x86>
 80058c8:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <ADC_Enable+0x104>)
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d130      	bne.n	800593a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058d8:	e028      	b.n	800592c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fec4 	bl	800466c <LL_ADC_IsEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fe94 	bl	800461c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80058f4:	f7fe fc98 	bl	8004228 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d914      	bls.n	800592c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b01      	cmp	r3, #1
 800590e:	d00d      	beq.n	800592c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f043 0210 	orr.w	r2, r3, #16
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	f043 0201 	orr.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e007      	b.n	800593c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d1cf      	bne.n	80058da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	8000003f 	.word	0x8000003f
 8005948:	40022000 	.word	0x40022000
 800594c:	40022100 	.word	0x40022100
 8005950:	40022300 	.word	0x40022300
 8005954:	58026300 	.word	0x58026300

08005958 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fe94 	bl	8004692 <LL_ADC_IsDisableOngoing>
 800596a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe fe7b 	bl	800466c <LL_ADC_IsEnabled>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d047      	beq.n	8005a0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d144      	bne.n	8005a0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 030d 	and.w	r3, r3, #13
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10c      	bne.n	80059aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe fe55 	bl	8004644 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2203      	movs	r2, #3
 80059a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059a2:	f7fe fc41 	bl	8004228 <HAL_GetTick>
 80059a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059a8:	e029      	b.n	80059fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f043 0210 	orr.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e023      	b.n	8005a0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059c6:	f7fe fc2f 	bl	8004228 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d914      	bls.n	80059fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e007      	b.n	8005a0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1dc      	bne.n	80059c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7a      	ldr	r2, [pc, #488]	; (8005c10 <ADC_ConfigureBoostMode+0x1f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <ADC_ConfigureBoostMode+0x1c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a79      	ldr	r2, [pc, #484]	; (8005c14 <ADC_ConfigureBoostMode+0x1fc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d109      	bne.n	8005a48 <ADC_ConfigureBoostMode+0x30>
 8005a34:	4b78      	ldr	r3, [pc, #480]	; (8005c18 <ADC_ConfigureBoostMode+0x200>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e008      	b.n	8005a5a <ADC_ConfigureBoostMode+0x42>
 8005a48:	4b74      	ldr	r3, [pc, #464]	; (8005c1c <ADC_ConfigureBoostMode+0x204>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01c      	beq.n	8005a98 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005a5e:	f005 f9d9 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 8005a62:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a6c:	d010      	beq.n	8005a90 <ADC_ConfigureBoostMode+0x78>
 8005a6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a72:	d873      	bhi.n	8005b5c <ADC_ConfigureBoostMode+0x144>
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d002      	beq.n	8005a80 <ADC_ConfigureBoostMode+0x68>
 8005a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a7e:	d16d      	bne.n	8005b5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	60fb      	str	r3, [r7, #12]
        break;
 8005a8e:	e068      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	60fb      	str	r3, [r7, #12]
        break;
 8005a96:	e064      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005a98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a9c:	f04f 0100 	mov.w	r1, #0
 8005aa0:	f006 fc3a 	bl	800c318 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aa4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005aae:	d051      	beq.n	8005b54 <ADC_ConfigureBoostMode+0x13c>
 8005ab0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ab4:	d854      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005ab6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005aba:	d047      	beq.n	8005b4c <ADC_ConfigureBoostMode+0x134>
 8005abc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ac0:	d84e      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005ac2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ac6:	d03d      	beq.n	8005b44 <ADC_ConfigureBoostMode+0x12c>
 8005ac8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005acc:	d848      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad2:	d033      	beq.n	8005b3c <ADC_ConfigureBoostMode+0x124>
 8005ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad8:	d842      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005ada:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ade:	d029      	beq.n	8005b34 <ADC_ConfigureBoostMode+0x11c>
 8005ae0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ae4:	d83c      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005ae6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005aea:	d01a      	beq.n	8005b22 <ADC_ConfigureBoostMode+0x10a>
 8005aec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005af0:	d836      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005af2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005af6:	d014      	beq.n	8005b22 <ADC_ConfigureBoostMode+0x10a>
 8005af8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005afc:	d830      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b02:	d00e      	beq.n	8005b22 <ADC_ConfigureBoostMode+0x10a>
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b08:	d82a      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005b0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b0e:	d008      	beq.n	8005b22 <ADC_ConfigureBoostMode+0x10a>
 8005b10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b14:	d824      	bhi.n	8005b60 <ADC_ConfigureBoostMode+0x148>
 8005b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b1a:	d002      	beq.n	8005b22 <ADC_ConfigureBoostMode+0x10a>
 8005b1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b20:	d11e      	bne.n	8005b60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	0c9b      	lsrs	r3, r3, #18
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	60fb      	str	r3, [r7, #12]
        break;
 8005b32:	e016      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]
        break;
 8005b3a:	e012      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	60fb      	str	r3, [r7, #12]
        break;
 8005b42:	e00e      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	60fb      	str	r3, [r7, #12]
        break;
 8005b4a:	e00a      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	09db      	lsrs	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]
        break;
 8005b52:	e006      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	60fb      	str	r3, [r7, #12]
        break;
 8005b5a:	e002      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005b60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005b62:	f7fe fb91 	bl	8004288 <HAL_GetREVID>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d815      	bhi.n	8005b9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a2b      	ldr	r2, [pc, #172]	; (8005c20 <ADC_ConfigureBoostMode+0x208>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d908      	bls.n	8005b8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005b88:	e03e      	b.n	8005c08 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b98:	609a      	str	r2, [r3, #8]
}
 8005b9a:	e035      	b.n	8005c08 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <ADC_ConfigureBoostMode+0x20c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d808      	bhi.n	8005bbc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bb8:	609a      	str	r2, [r3, #8]
}
 8005bba:	e025      	b.n	8005c08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <ADC_ConfigureBoostMode+0x210>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d80a      	bhi.n	8005bda <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	e016      	b.n	8005c08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <ADC_ConfigureBoostMode+0x214>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d80a      	bhi.n	8005bf8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	e007      	b.n	8005c08 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40022000 	.word	0x40022000
 8005c14:	40022100 	.word	0x40022100
 8005c18:	40022300 	.word	0x40022300
 8005c1c:	58026300 	.word	0x58026300
 8005c20:	01312d00 	.word	0x01312d00
 8005c24:	005f5e10 	.word	0x005f5e10
 8005c28:	00bebc20 	.word	0x00bebc20
 8005c2c:	017d7840 	.word	0x017d7840

08005c30 <LL_ADC_StartCalibration>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <LL_ADC_StartCalibration+0x38>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c50:	430a      	orrs	r2, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	3ffeffc0 	.word	0x3ffeffc0

08005c6c <LL_ADC_IsCalibrationOnGoing>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c80:	d101      	bne.n	8005c86 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e04c      	b.n	8005d4c <HAL_ADCEx_Calibration_Start+0xb8>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fe4c 	bl	8005958 <ADC_Disable>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d135      	bne.n	8005d36 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	f043 0202 	orr.w	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ffa4 	bl	8005c30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ce8:	e014      	b.n	8005d14 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3301      	adds	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d30d      	bcc.n	8005d14 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f023 0312 	bic.w	r3, r3, #18
 8005d00:	f043 0210 	orr.w	r2, r3, #16
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e01b      	b.n	8005d4c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ffa7 	bl	8005c6c <LL_ADC_IsCalibrationOnGoing>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e2      	bne.n	8005cea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	f043 0201 	orr.w	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
 8005d34:	e005      	b.n	8005d42 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f043 0210 	orr.w	r2, r3, #16
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	ffffeefd 	.word	0xffffeefd
 8005d58:	25c3f800 	.word	0x25c3f800

08005d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <__NVIC_SetPriorityGrouping>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <__NVIC_SetPriorityGrouping+0x40>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <__NVIC_SetPriorityGrouping+0x44>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dee:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <__NVIC_SetPriorityGrouping+0x40>)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	60d3      	str	r3, [r2, #12]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	e000ed00 	.word	0xe000ed00
 8005e04:	05fa0000 	.word	0x05fa0000

08005e08 <__NVIC_GetPriorityGrouping>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <__NVIC_GetPriorityGrouping+0x18>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	0a1b      	lsrs	r3, r3, #8
 8005e12:	f003 0307 	and.w	r3, r3, #7
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <__NVIC_EnableIRQ>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	db0b      	blt.n	8005e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	f003 021f 	and.w	r2, r3, #31
 8005e3c:	4907      	ldr	r1, [pc, #28]	; (8005e5c <__NVIC_EnableIRQ+0x38>)
 8005e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2001      	movs	r0, #1
 8005e46:	fa00 f202 	lsl.w	r2, r0, r2
 8005e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000e100 	.word	0xe000e100

08005e60 <__NVIC_SetPriority>:
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	6039      	str	r1, [r7, #0]
 8005e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	db0a      	blt.n	8005e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	490c      	ldr	r1, [pc, #48]	; (8005eac <__NVIC_SetPriority+0x4c>)
 8005e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e7e:	0112      	lsls	r2, r2, #4
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	440b      	add	r3, r1
 8005e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e88:	e00a      	b.n	8005ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	4908      	ldr	r1, [pc, #32]	; (8005eb0 <__NVIC_SetPriority+0x50>)
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	3b04      	subs	r3, #4
 8005e98:	0112      	lsls	r2, r2, #4
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	761a      	strb	r2, [r3, #24]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000e100 	.word	0xe000e100
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <NVIC_EncodePriority>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f1c3 0307 	rsb	r3, r3, #7
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	bf28      	it	cs
 8005ed2:	2304      	movcs	r3, #4
 8005ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d902      	bls.n	8005ee4 <NVIC_EncodePriority+0x30>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3b03      	subs	r3, #3
 8005ee2:	e000      	b.n	8005ee6 <NVIC_EncodePriority+0x32>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005efc:	f04f 31ff 	mov.w	r1, #4294967295
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	43d9      	mvns	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f0c:	4313      	orrs	r3, r2
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3724      	adds	r7, #36	; 0x24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f2c:	d301      	bcc.n	8005f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e00f      	b.n	8005f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <SysTick_Config+0x40>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f3a:	210f      	movs	r1, #15
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	f7ff ff8e 	bl	8005e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <SysTick_Config+0x40>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f4a:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <SysTick_Config+0x40>)
 8005f4c:	2207      	movs	r2, #7
 8005f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	e000e010 	.word	0xe000e010

08005f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff ff29 	bl	8005dc0 <__NVIC_SetPriorityGrouping>
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f84:	f7ff ff40 	bl	8005e08 <__NVIC_GetPriorityGrouping>
 8005f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	f7ff ff90 	bl	8005eb4 <NVIC_EncodePriority>
 8005f94:	4602      	mov	r2, r0
 8005f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff ff5f 	bl	8005e60 <__NVIC_SetPriority>
}
 8005fa2:	bf00      	nop
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ff33 	bl	8005e24 <__NVIC_EnableIRQ>
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ffa4 	bl	8005f1c <SysTick_Config>
 8005fd4:	4603      	mov	r3, r0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005fe4:	f3bf 8f5f 	dmb	sy
}
 8005fe8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <HAL_MPU_Disable+0x28>)
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	4a06      	ldr	r2, [pc, #24]	; (8006008 <HAL_MPU_Disable+0x28>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_MPU_Disable+0x2c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	605a      	str	r2, [r3, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	e000ed00 	.word	0xe000ed00
 800600c:	e000ed90 	.word	0xe000ed90

08006010 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006018:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <HAL_MPU_Enable+0x38>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_MPU_Enable+0x3c>)
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <HAL_MPU_Enable+0x3c>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800602e:	f3bf 8f4f 	dsb	sy
}
 8006032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006034:	f3bf 8f6f 	isb	sy
}
 8006038:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	e000ed90 	.word	0xe000ed90
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	785a      	ldrb	r2, [r3, #1]
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_MPU_ConfigRegion+0x84>)
 800605e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d029      	beq.n	80060bc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006068:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_MPU_ConfigRegion+0x84>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7b1b      	ldrb	r3, [r3, #12]
 8006074:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7adb      	ldrb	r3, [r3, #11]
 800607a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800607c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	7a9b      	ldrb	r3, [r3, #10]
 8006082:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006084:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7b5b      	ldrb	r3, [r3, #13]
 800608a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800608c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7b9b      	ldrb	r3, [r3, #14]
 8006092:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006094:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	7bdb      	ldrb	r3, [r3, #15]
 800609a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800609c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7a5b      	ldrb	r3, [r3, #9]
 80060a2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7a1b      	ldrb	r3, [r3, #8]
 80060aa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060ac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060b4:	4a07      	ldr	r2, [pc, #28]	; (80060d4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060b6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060b8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80060ba:	e005      	b.n	80060c8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_MPU_ConfigRegion+0x84>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80060c2:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <HAL_MPU_ConfigRegion+0x84>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	e000ed90 	.word	0xe000ed90

080060d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e014      	b.n	8006114 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	791b      	ldrb	r3, [r3, #4]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fd fa1e 	bl	800353c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	795b      	ldrb	r3, [r3, #5]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_DAC_Start+0x16>
 800612e:	2302      	movs	r3, #2
 8006130:	e040      	b.n	80061b4 <HAL_DAC_Start+0x98>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2201      	movs	r2, #1
 800614c:	409a      	lsls	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006166:	2b02      	cmp	r3, #2
 8006168:	d11d      	bne.n	80061a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e014      	b.n	80061a6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2102      	movs	r1, #2
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	429a      	cmp	r2, r3
 8006194:	d107      	bne.n	80061a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0202 	orr.w	r2, r2, #2
 80061a4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3308      	adds	r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e004      	b.n	80061f4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	3314      	adds	r3, #20
 80061f2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	461a      	mov	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	795b      	ldrb	r3, [r3, #5]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_DAC_ConfigChannel+0x18>
 8006220:	2302      	movs	r3, #2
 8006222:	e12a      	b.n	800647a <HAL_DAC_ConfigChannel+0x26e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b04      	cmp	r3, #4
 8006236:	f040 8081 	bne.w	800633c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800623a:	f7fd fff5 	bl	8004228 <HAL_GetTick>
 800623e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d140      	bne.n	80062c8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006246:	e018      	b.n	800627a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006248:	f7fd ffee 	bl	8004228 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d911      	bls.n	800627a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	4b89      	ldr	r3, [pc, #548]	; (8006484 <HAL_DAC_ConfigChannel+0x278>)
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f043 0208 	orr.w	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2203      	movs	r2, #3
 8006274:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e0ff      	b.n	800647a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006280:	4b80      	ldr	r3, [pc, #512]	; (8006484 <HAL_DAC_ConfigChannel+0x278>)
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1df      	bne.n	8006248 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006288:	2001      	movs	r0, #1
 800628a:	f7fd ffd9 	bl	8004240 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	6992      	ldr	r2, [r2, #24]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
 8006298:	e023      	b.n	80062e2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800629a:	f7fd ffc5 	bl	8004228 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d90f      	bls.n	80062c8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da0a      	bge.n	80062c8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f043 0208 	orr.w	r2, r3, #8
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2203      	movs	r2, #3
 80062c2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0d8      	b.n	800647a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dbe3      	blt.n	800629a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80062d2:	2001      	movs	r0, #1
 80062d4:	f7fd ffb4 	bl	8004240 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	6992      	ldr	r2, [r2, #24]
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	43db      	mvns	r3, r3
 80062f8:	ea02 0103 	and.w	r1, r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	409a      	lsls	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	21ff      	movs	r1, #255	; 0xff
 800631e:	fa01 f303 	lsl.w	r3, r1, r3
 8006322:	43db      	mvns	r3, r3
 8006324:	ea02 0103 	and.w	r1, r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	409a      	lsls	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d11d      	bne.n	8006380 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	221f      	movs	r2, #31
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4013      	ands	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2207      	movs	r2, #7
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4013      	ands	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e00f      	b.n	80063ca <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d102      	bne.n	80063b8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e008      	b.n	80063ca <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063c0:	2301      	movs	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e001      	b.n	80063ca <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43da      	mvns	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	400a      	ands	r2, r1
 8006410:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4013      	ands	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6819      	ldr	r1, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	22c0      	movs	r2, #192	; 0xc0
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	400a      	ands	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20008000 	.word	0x20008000

08006488 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e0cf      	b.n	800663a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2223      	movs	r2, #35	; 0x23
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f009 f9d5 	bl	800f85c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b2:	4b64      	ldr	r3, [pc, #400]	; (8006644 <HAL_ETH_Init+0x1bc>)
 80064b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064b8:	4a62      	ldr	r2, [pc, #392]	; (8006644 <HAL_ETH_Init+0x1bc>)
 80064ba:	f043 0302 	orr.w	r3, r3, #2
 80064be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064c2:	4b60      	ldr	r3, [pc, #384]	; (8006644 <HAL_ETH_Init+0x1bc>)
 80064c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7a1b      	ldrb	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80064d8:	2000      	movs	r0, #0
 80064da:	f7fd fee1 	bl	80042a0 <HAL_SYSCFG_ETHInterfaceSelect>
 80064de:	e003      	b.n	80064e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80064e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80064e4:	f7fd fedc 	bl	80042a0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80064e8:	4b57      	ldr	r3, [pc, #348]	; (8006648 <HAL_ETH_Init+0x1c0>)
 80064ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006504:	f7fd fe90 	bl	8004228 <HAL_GetTick>
 8006508:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800650a:	e011      	b.n	8006530 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800650c:	f7fd fe8c 	bl	8004228 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800651a:	d909      	bls.n	8006530 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	22e0      	movs	r2, #224	; 0xe0
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e084      	b.n	800663a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e4      	bne.n	800650c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd94 	bl	8007070 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006548:	f004 fc64 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800654c:	4603      	mov	r3, r0
 800654e:	4a3f      	ldr	r2, [pc, #252]	; (800664c <HAL_ETH_Init+0x1c4>)
 8006550:	fba2 2303 	umull	r2, r3, r2, r3
 8006554:	0c9a      	lsrs	r2, r3, #18
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3a01      	subs	r2, #1
 800655c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 ff7f 	bl	8007464 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006572:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800657e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006582:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	22e0      	movs	r2, #224	; 0xe0
 800659e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e049      	b.n	800663a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80065b2:	4b27      	ldr	r3, [pc, #156]	; (8006650 <HAL_ETH_Init+0x1c8>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6952      	ldr	r2, [r2, #20]
 80065ba:	0051      	lsls	r1, r2, #1
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	430b      	orrs	r3, r1
 80065c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 ffe7 	bl	800759e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f82d 	bl	8007630 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	3305      	adds	r3, #5
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	021a      	lsls	r2, r3, #8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	4619      	mov	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	3303      	adds	r3, #3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	061a      	lsls	r2, r3, #24
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	3302      	adds	r3, #2
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	3301      	adds	r3, #1
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006614:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006622:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006624:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2210      	movs	r2, #16
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
 8006648:	58000400 	.word	0x58000400
 800664c:	431bde83 	.word	0x431bde83
 8006650:	ffff8001 	.word	0xffff8001

08006654 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006662:	2b10      	cmp	r3, #16
 8006664:	d153      	bne.n	800670e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2223      	movs	r2, #35	; 0x23
 800666a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2204      	movs	r2, #4
 8006672:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f9f6 	bl	8006a66 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0202 	orr.w	r2, r2, #2
 8006688:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ee:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80066fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066fe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2223      	movs	r2, #35	; 0x23
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006726:	2b23      	cmp	r3, #35	; 0x23
 8006728:	d13f      	bne.n	80067aa <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2223      	movs	r2, #35	; 0x23
 800672e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800674a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006766:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0202 	bic.w	r2, r2, #2
 800679c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2210      	movs	r2, #16
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e000      	b.n	80067ac <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
  }
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f043 0201 	orr.w	r2, r3, #1
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e07f      	b.n	80068de <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e4:	2b23      	cmp	r3, #35	; 0x23
 80067e6:	d179      	bne.n	80068dc <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80067e8:	2200      	movs	r2, #0
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 ff7d 	bl	80076ec <ETH_Prepare_Tx_Descriptors>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f043 0202 	orr.w	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e068      	b.n	80068de <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800680c:	f3bf 8f4f 	dsb	sy
}
 8006810:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3206      	adds	r2, #6
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	629a      	str	r2, [r3, #40]	; 0x28
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	2b03      	cmp	r3, #3
 8006830:	d904      	bls.n	800683c <HAL_ETH_Transmit+0x84>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	1f1a      	subs	r2, r3, #4
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3106      	adds	r1, #6
 8006848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800684c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006850:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8006854:	f7fd fce8 	bl	8004228 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800685a:	e039      	b.n	80068d0 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006864:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d012      	beq.n	8006896 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	f043 0208 	orr.w	r2, r3, #8
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006888:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e023      	b.n	80068de <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d018      	beq.n	80068d0 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800689e:	f7fd fcc3 	bl	8004228 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <HAL_ETH_Transmit+0xfc>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80068ca:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e006      	b.n	80068de <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dbc1      	blt.n	800685c <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b088      	sub	sp, #32
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006904:	f043 0201 	orr.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0a5      	b.n	8006a5e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006918:	2b23      	cmp	r3, #35	; 0x23
 800691a:	d001      	beq.n	8006920 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e09e      	b.n	8006a5e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	3212      	adds	r2, #18
 800692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006930:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006936:	f1c3 0304 	rsb	r3, r3, #4
 800693a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800693c:	e067      	b.n	8006a0e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_ETH_ReadData+0x88>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03d      	beq.n	80069ea <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00d      	beq.n	80069b4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80069c4:	461a      	mov	r2, r3
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f009 f91f 	bl	800fc0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	441a      	add	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d902      	bls.n	80069fc <HAL_ETH_ReadData+0x116>
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	3b04      	subs	r3, #4
 80069fa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	3212      	adds	r2, #18
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	db06      	blt.n	8006a24 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d202      	bcs.n	8006a24 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d08c      	beq.n	800693e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f814 	bl	8006a66 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b088      	sub	sp, #32
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006a72:	2301      	movs	r3, #1
 8006a74:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a7a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	3212      	adds	r2, #18
 8006a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a86:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006a8e:	e03b      	b.n	8006b08 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d112      	bne.n	8006abe <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f009 f885 	bl	800fbac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	74fb      	strb	r3, [r7, #19]
 8006aac:	e007      	b.n	8006abe <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006ac4:	f3bf 8f5f 	dmb	sy
}
 8006ac8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	e003      	b.n	8006ae4 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006ae2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d902      	bls.n	8006af6 <ETH_UpdateDescriptor+0x90>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	3b04      	subs	r3, #4
 8006af4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	3212      	adds	r2, #18
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	617b      	str	r3, [r7, #20]
      desccount--;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <ETH_UpdateDescriptor+0xae>
 8006b0e:	7cfb      	ldrb	r3, [r7, #19]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1bd      	bne.n	8006a90 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d00d      	beq.n	8006b3a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b26:	461a      	mov	r2, r3
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e03e      	b.n	8006be2 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b6c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	055b      	lsls	r3, r3, #21
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f043 030c 	orr.w	r3, r3, #12
 8006b90:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006ba4:	f7fd fb40 	bl	8004228 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006baa:	e009      	b.n	8006bc0 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006bac:	f7fd fb3c 	bl	8004228 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bba:	d901      	bls.n	8006bc0 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e010      	b.n	8006be2 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1ed      	bne.n	8006bac <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e03c      	b.n	8006c88 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c16:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	055b      	lsls	r3, r3, #21
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 030c 	bic.w	r3, r3, #12
 8006c3a:	f043 0304 	orr.w	r3, r3, #4
 8006c3e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_ETH_WritePHYRegister+0xa4>)
 8006c4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006c52:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <HAL_ETH_WritePHYRegister+0xa4>)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006c5a:	f7fd fae5 	bl	8004228 <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006c60:	e009      	b.n	8006c76 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006c62:	f7fd fae1 	bl	8004228 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c70:	d901      	bls.n	8006c76 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e008      	b.n	8006c88 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1ed      	bne.n	8006c62 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40028000 	.word	0x40028000

08006c94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e1c3      	b.n	8007030 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 020c 	and.w	r2, r3, #12
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf0c      	ite	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	2300      	moveq	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf14      	ite	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	2300      	moveq	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bf14      	ite	ne
 8006ddc:	2301      	movne	r3, #1
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf14      	ite	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	2300      	moveq	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf14      	ite	ne
 8006e2a:	2301      	movne	r3, #1
 8006e2c:	2300      	moveq	r3, #0
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bf14      	ite	ne
 8006e52:	2301      	movne	r3, #1
 8006e54:	2300      	moveq	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	0e5b      	lsrs	r3, r3, #25
 8006ef2:	f003 021f 	and.w	r2, r3, #31
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf0c      	ite	eq
 8006f4e:	2301      	moveq	r3, #1
 8006f50:	2300      	movne	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006fbc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006fcc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e00b      	b.n	8007068 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007056:	2b10      	cmp	r3, #16
 8007058:	d105      	bne.n	8007066 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f85f 	bl	8007120 <ETH_SetMACConfig>

    return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
  }
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007080:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007088:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800708a:	f003 fec3 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800708e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a1e      	ldr	r2, [pc, #120]	; (800710c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d908      	bls.n	80070aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d804      	bhi.n	80070aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e027      	b.n	80070fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d908      	bls.n	80070c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a17      	ldr	r2, [pc, #92]	; (8007114 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d204      	bcs.n	80070c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e01a      	b.n	80070fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a13      	ldr	r2, [pc, #76]	; (8007114 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d303      	bcc.n	80070d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a12      	ldr	r2, [pc, #72]	; (8007118 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d911      	bls.n	80070f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d908      	bls.n	80070ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4a0f      	ldr	r2, [pc, #60]	; (800711c <HAL_ETH_SetMDIOClockRange+0xac>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d804      	bhi.n	80070ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e005      	b.n	80070fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e000      	b.n	80070fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80070f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	01312cff 	.word	0x01312cff
 8007110:	02160ebf 	.word	0x02160ebf
 8007114:	03938700 	.word	0x03938700
 8007118:	05f5e0ff 	.word	0x05f5e0ff
 800711c:	08f0d17f 	.word	0x08f0d17f

08007120 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	791b      	ldrb	r3, [r3, #4]
 8007138:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800713a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	7b1b      	ldrb	r3, [r3, #12]
 8007140:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	7b5b      	ldrb	r3, [r3, #13]
 8007148:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800714a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	7b9b      	ldrb	r3, [r3, #14]
 8007150:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007152:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	7bdb      	ldrb	r3, [r3, #15]
 8007158:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800715a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	2a00      	cmp	r2, #0
 8007162:	d102      	bne.n	800716a <ETH_SetMACConfig+0x4a>
 8007164:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007168:	e000      	b.n	800716c <ETH_SetMACConfig+0x4c>
 800716a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800716c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	7c52      	ldrb	r2, [r2, #17]
 8007172:	2a00      	cmp	r2, #0
 8007174:	d102      	bne.n	800717c <ETH_SetMACConfig+0x5c>
 8007176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800717a:	e000      	b.n	800717e <ETH_SetMACConfig+0x5e>
 800717c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800717e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	7c9b      	ldrb	r3, [r3, #18]
 8007184:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007186:	431a      	orrs	r2, r3
               macconf->Speed |
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800718c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	7f1b      	ldrb	r3, [r3, #28]
 8007198:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800719a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	7f5b      	ldrb	r3, [r3, #29]
 80071a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80071a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	7f92      	ldrb	r2, [r2, #30]
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d102      	bne.n	80071b2 <ETH_SetMACConfig+0x92>
 80071ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071b0:	e000      	b.n	80071b4 <ETH_SetMACConfig+0x94>
 80071b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80071b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	7fdb      	ldrb	r3, [r3, #31]
 80071ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80071bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	d102      	bne.n	80071ce <ETH_SetMACConfig+0xae>
 80071c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071cc:	e000      	b.n	80071d0 <ETH_SetMACConfig+0xb0>
 80071ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80071d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80071d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80071e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b56      	ldr	r3, [pc, #344]	; (800734c <ETH_SetMACConfig+0x22c>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	430b      	orrs	r3, r1
 80071fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800720a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800720c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007214:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800721e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007220:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007228:	2a00      	cmp	r2, #0
 800722a:	d102      	bne.n	8007232 <ETH_SetMACConfig+0x112>
 800722c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007230:	e000      	b.n	8007234 <ETH_SetMACConfig+0x114>
 8007232:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007234:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	4b42      	ldr	r3, [pc, #264]	; (8007350 <ETH_SetMACConfig+0x230>)
 8007246:	4013      	ands	r3, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	68f9      	ldr	r1, [r7, #12]
 800724e:	430b      	orrs	r3, r1
 8007250:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007258:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	4b3a      	ldr	r3, [pc, #232]	; (8007354 <ETH_SetMACConfig+0x234>)
 800726a:	4013      	ands	r3, r2
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	430b      	orrs	r3, r1
 8007274:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800727c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007282:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800728a:	2a00      	cmp	r2, #0
 800728c:	d101      	bne.n	8007292 <ETH_SetMACConfig+0x172>
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	e000      	b.n	8007294 <ETH_SetMACConfig+0x174>
 8007292:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007294:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	430b      	orrs	r3, r1
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80072bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80072c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f023 0103 	bic.w	r1, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	430a      	orrs	r2, r1
 80072de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80072ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007306:	2a00      	cmp	r2, #0
 8007308:	d101      	bne.n	800730e <ETH_SetMACConfig+0x1ee>
 800730a:	2240      	movs	r2, #64	; 0x40
 800730c:	e000      	b.n	8007310 <ETH_SetMACConfig+0x1f0>
 800730e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007310:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007318:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800731a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007322:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007330:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	430a      	orrs	r2, r1
 800733c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	00048083 	.word	0x00048083
 8007350:	c0f88000 	.word	0xc0f88000
 8007354:	fffffef0 	.word	0xfffffef0

08007358 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	4b38      	ldr	r3, [pc, #224]	; (8007450 <ETH_SetDMAConfig+0xf8>)
 800736e:	4013      	ands	r3, r2
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	6811      	ldr	r1, [r2, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	430b      	orrs	r3, r1
 800737a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800737e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	791b      	ldrb	r3, [r3, #4]
 8007384:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800738a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <ETH_SetDMAConfig+0xfc>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	430b      	orrs	r3, r1
 80073ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	7b5b      	ldrb	r3, [r3, #13]
 80073b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80073cc:	4b22      	ldr	r3, [pc, #136]	; (8007458 <ETH_SetDMAConfig+0x100>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	68f9      	ldr	r1, [r7, #12]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80073ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	7f5b      	ldrb	r3, [r3, #29]
 80073f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <ETH_SetDMAConfig+0x104>)
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	430b      	orrs	r3, r1
 800740e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007412:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	7f1b      	ldrb	r3, [r3, #28]
 800741a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <ETH_SetDMAConfig+0x108>)
 8007432:	4013      	ands	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	430b      	orrs	r3, r1
 800743c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007440:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	ffff87fd 	.word	0xffff87fd
 8007454:	ffff2ffe 	.word	0xffff2ffe
 8007458:	fffec000 	.word	0xfffec000
 800745c:	ffc0efef 	.word	0xffc0efef
 8007460:	7fc0ffff 	.word	0x7fc0ffff

08007464 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b0a4      	sub	sp, #144	; 0x90
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007472:	2300      	movs	r3, #0
 8007474:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800747c:	2300      	movs	r3, #0
 800747e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80074a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80074bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80074c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80074d8:	2300      	movs	r3, #0
 80074da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80074de:	2300      	movs	r3, #0
 80074e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80074e6:	2300      	movs	r3, #0
 80074e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80074fc:	2320      	movs	r3, #32
 80074fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800750e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800751a:	2300      	movs	r3, #0
 800751c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007520:	2302      	movs	r3, #2
 8007522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007526:	2300      	movs	r3, #0
 8007528:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800753e:	2300      	movs	r3, #0
 8007540:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fde6 	bl	8007120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007554:	2301      	movs	r3, #1
 8007556:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007558:	2301      	movs	r3, #1
 800755a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007560:	2300      	movs	r3, #0
 8007562:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007566:	2300      	movs	r3, #0
 8007568:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800756a:	2300      	movs	r3, #0
 800756c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800756e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007572:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800757c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007584:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff fee1 	bl	8007358 <ETH_SetDMAConfig>
}
 8007596:	bf00      	nop
 8007598:	3790      	adds	r7, #144	; 0x90
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e01d      	b.n	80075e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68d9      	ldr	r1, [r3, #12]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4613      	mov	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4413      	add	r3, r2
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	440b      	add	r3, r1
 80075bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	3206      	adds	r2, #6
 80075de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d9de      	bls.n	80075ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fc:	461a      	mov	r2, r3
 80075fe:	2303      	movs	r3, #3
 8007600:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007610:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007620:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e023      	b.n	8007686 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6919      	ldr	r1, [r3, #16]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4613      	mov	r3, r2
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4413      	add	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	440b      	add	r3, r1
 800764e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	3212      	adds	r2, #18
 800767c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d9d8      	bls.n	800763e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b2:	461a      	mov	r2, r3
 80076b4:	2303      	movs	r3, #3
 80076b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b08d      	sub	sp, #52	; 0x34
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3318      	adds	r3, #24
 80076fc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007716:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800772a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800772e:	d007      	beq.n	8007740 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	3304      	adds	r3, #4
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007740:	2302      	movs	r3, #2
 8007742:	e259      	b.n	8007bf8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d044      	beq.n	80077da <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	4b75      	ldr	r3, [pc, #468]	; (800792c <ETH_Prepare_Tx_Descriptors+0x240>)
 8007756:	4013      	ands	r3, r2
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800775c:	431a      	orrs	r2, r3
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800777c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d027      	beq.n	80077da <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	b29a      	uxth	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	431a      	orrs	r2, r3
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	431a      	orrs	r2, r3
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077c8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80077d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00e      	beq.n	8007804 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	4b51      	ldr	r3, [pc, #324]	; (8007930 <ETH_Prepare_Tx_Descriptors+0x244>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	6992      	ldr	r2, [r2, #24]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d036      	beq.n	800788a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007828:	f3bf 8f5f 	dmb	sy
}
 800782c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	3301      	adds	r3, #1
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2b03      	cmp	r3, #3
 8007844:	d902      	bls.n	800784c <ETH_Prepare_Tx_Descriptors+0x160>
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	3b04      	subs	r3, #4
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	3301      	adds	r3, #1
 800785a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007868:	d10f      	bne.n	800788a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007874:	f3bf 8f5f 	dmb	sy
}
 8007878:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007886:	2302      	movs	r3, #2
 8007888:	e1b6      	b.n	8007bf8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	3301      	adds	r3, #1
 800788e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <ETH_Prepare_Tx_Descriptors+0x244>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	6852      	ldr	r2, [r2, #4]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d012      	beq.n	80078da <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <ETH_Prepare_Tx_Descriptors+0x248>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	6852      	ldr	r2, [r2, #4]
 80078d0:	0412      	lsls	r2, r2, #16
 80078d2:	431a      	orrs	r2, r3
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	609a      	str	r2, [r3, #8]
 80078d8:	e008      	b.n	80078ec <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	2200      	movs	r2, #0
 80078de:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <ETH_Prepare_Tx_Descriptors+0x248>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d021      	beq.n	800793c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	04db      	lsls	r3, r3, #19
 8007906:	431a      	orrs	r2, r3
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	4b09      	ldr	r3, [pc, #36]	; (8007938 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007912:	4013      	ands	r3, r2
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	69d2      	ldr	r2, [r2, #28]
 8007918:	431a      	orrs	r2, r3
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e02e      	b.n	800798a <ETH_Prepare_Tx_Descriptors+0x29e>
 800792c:	ffff0000 	.word	0xffff0000
 8007930:	ffffc000 	.word	0xffffc000
 8007934:	c000ffff 	.word	0xc000ffff
 8007938:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	4b7b      	ldr	r3, [pc, #492]	; (8007b30 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007942:	4013      	ands	r3, r2
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	6852      	ldr	r2, [r2, #4]
 8007948:	431a      	orrs	r2, r3
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	431a      	orrs	r2, r3
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	431a      	orrs	r2, r3
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	431a      	orrs	r2, r3
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80079c0:	f3bf 8f5f 	dmb	sy
}
 80079c4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80da 	beq.w	8007b94 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80079f2:	e0cf      	b.n	8007b94 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	3301      	adds	r3, #1
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d902      	bls.n	8007a12 <ETH_Prepare_Tx_Descriptors+0x326>
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	3b04      	subs	r3, #4
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a34:	d007      	beq.n	8007a46 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d029      	beq.n	8007a9a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007a54:	2300      	movs	r3, #0
 8007a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a58:	e019      	b.n	8007a8e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007a5a:	f3bf 8f5f 	dmb	sy
}
 8007a5e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	3301      	adds	r3, #1
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d902      	bls.n	8007a7e <ETH_Prepare_Tx_Descriptors+0x392>
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3e1      	bcc.n	8007a5a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007a96:	2302      	movs	r3, #2
 8007a98:	e0ae      	b.n	8007bf8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <ETH_Prepare_Tx_Descriptors+0x448>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	6852      	ldr	r2, [r2, #4]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d012      	beq.n	8007af0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	6852      	ldr	r2, [r2, #4]
 8007ae6:	0412      	lsls	r2, r2, #16
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	609a      	str	r2, [r3, #8]
 8007aee:	e008      	b.n	8007b02 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	2200      	movs	r2, #0
 8007af4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d018      	beq.n	8007b40 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <ETH_Prepare_Tx_Descriptors+0x450>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	69d2      	ldr	r2, [r2, #28]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	60da      	str	r2, [r3, #12]
 8007b2c:	e020      	b.n	8007b70 <ETH_Prepare_Tx_Descriptors+0x484>
 8007b2e:	bf00      	nop
 8007b30:	ffff8000 	.word	0xffff8000
 8007b34:	ffffc000 	.word	0xffffc000
 8007b38:	c000ffff 	.word	0xc000ffff
 8007b3c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	4b2f      	ldr	r3, [pc, #188]	; (8007c04 <ETH_Prepare_Tx_Descriptors+0x518>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007b76:	f3bf 8f5f 	dmb	sy
}
 8007b7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f af2b 	bne.w	80079f4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	e005      	b.n	8007bbe <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bce:	6979      	ldr	r1, [r7, #20]
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bde:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007be0:	b672      	cpsid	i
}
 8007be2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	4413      	add	r3, r2
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007bf2:	b662      	cpsie	i
}
 8007bf4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3734      	adds	r7, #52	; 0x34
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	ffff8000 	.word	0xffff8000

08007c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	; 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c16:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <HAL_GPIO_Init+0x234>)
 8007c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c1a:	e194      	b.n	8007f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2101      	movs	r1, #1
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	fa01 f303 	lsl.w	r3, r1, r3
 8007c28:	4013      	ands	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8186 	beq.w	8007f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d005      	beq.n	8007c4c <HAL_GPIO_Init+0x44>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d130      	bne.n	8007cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	2203      	movs	r2, #3
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4013      	ands	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c82:	2201      	movs	r2, #1
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	43db      	mvns	r3, r3
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	091b      	lsrs	r3, r3, #4
 8007c98:	f003 0201 	and.w	r2, r3, #1
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d017      	beq.n	8007cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d123      	bne.n	8007d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	08da      	lsrs	r2, r3, #3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3208      	adds	r2, #8
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	220f      	movs	r2, #15
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	08da      	lsrs	r2, r3, #3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3208      	adds	r2, #8
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	2203      	movs	r2, #3
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4013      	ands	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f003 0203 	and.w	r2, r3, #3
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80e0 	beq.w	8007f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <HAL_GPIO_Init+0x238>)
 8007d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d86:	4a2e      	ldr	r2, [pc, #184]	; (8007e40 <HAL_GPIO_Init+0x238>)
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d90:	4b2b      	ldr	r3, [pc, #172]	; (8007e40 <HAL_GPIO_Init+0x238>)
 8007d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d9e:	4a29      	ldr	r2, [pc, #164]	; (8007e44 <HAL_GPIO_Init+0x23c>)
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	3302      	adds	r3, #2
 8007da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	220f      	movs	r2, #15
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <HAL_GPIO_Init+0x240>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d052      	beq.n	8007e70 <HAL_GPIO_Init+0x268>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <HAL_GPIO_Init+0x244>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d031      	beq.n	8007e36 <HAL_GPIO_Init+0x22e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <HAL_GPIO_Init+0x248>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d02b      	beq.n	8007e32 <HAL_GPIO_Init+0x22a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <HAL_GPIO_Init+0x24c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d025      	beq.n	8007e2e <HAL_GPIO_Init+0x226>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1c      	ldr	r2, [pc, #112]	; (8007e58 <HAL_GPIO_Init+0x250>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01f      	beq.n	8007e2a <HAL_GPIO_Init+0x222>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1b      	ldr	r2, [pc, #108]	; (8007e5c <HAL_GPIO_Init+0x254>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d019      	beq.n	8007e26 <HAL_GPIO_Init+0x21e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1a      	ldr	r2, [pc, #104]	; (8007e60 <HAL_GPIO_Init+0x258>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <HAL_GPIO_Init+0x21a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a19      	ldr	r2, [pc, #100]	; (8007e64 <HAL_GPIO_Init+0x25c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00d      	beq.n	8007e1e <HAL_GPIO_Init+0x216>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <HAL_GPIO_Init+0x260>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d007      	beq.n	8007e1a <HAL_GPIO_Init+0x212>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <HAL_GPIO_Init+0x264>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d101      	bne.n	8007e16 <HAL_GPIO_Init+0x20e>
 8007e12:	2309      	movs	r3, #9
 8007e14:	e02d      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e16:	230a      	movs	r3, #10
 8007e18:	e02b      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	e029      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e1e:	2307      	movs	r3, #7
 8007e20:	e027      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e22:	2306      	movs	r3, #6
 8007e24:	e025      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e26:	2305      	movs	r3, #5
 8007e28:	e023      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e2a:	2304      	movs	r3, #4
 8007e2c:	e021      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e01f      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e01d      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e01b      	b.n	8007e72 <HAL_GPIO_Init+0x26a>
 8007e3a:	bf00      	nop
 8007e3c:	58000080 	.word	0x58000080
 8007e40:	58024400 	.word	0x58024400
 8007e44:	58000400 	.word	0x58000400
 8007e48:	58020000 	.word	0x58020000
 8007e4c:	58020400 	.word	0x58020400
 8007e50:	58020800 	.word	0x58020800
 8007e54:	58020c00 	.word	0x58020c00
 8007e58:	58021000 	.word	0x58021000
 8007e5c:	58021400 	.word	0x58021400
 8007e60:	58021800 	.word	0x58021800
 8007e64:	58021c00 	.word	0x58021c00
 8007e68:	58022000 	.word	0x58022000
 8007e6c:	58022400 	.word	0x58022400
 8007e70:	2300      	movs	r3, #0
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	f002 0203 	and.w	r2, r2, #3
 8007e78:	0092      	lsls	r2, r2, #2
 8007e7a:	4093      	lsls	r3, r2
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e82:	4938      	ldr	r1, [pc, #224]	; (8007f64 <HAL_GPIO_Init+0x35c>)
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	089b      	lsrs	r3, r3, #2
 8007e88:	3302      	adds	r3, #2
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	43db      	mvns	r3, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4013      	ands	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f47f ae63 	bne.w	8007c1c <HAL_GPIO_Init+0x14>
  }
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	58000400 	.word	0x58000400

08007f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	887b      	ldrh	r3, [r7, #2]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
 8007f84:	e001      	b.n	8007f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fa8:	787b      	ldrb	r3, [r7, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fae:	887a      	ldrh	r2, [r7, #2]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fb4:	e003      	b.n	8007fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fb6:	887b      	ldrh	r3, [r7, #2]
 8007fb8:	041a      	lsls	r2, r3, #16
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	619a      	str	r2, [r3, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007fdc:	887a      	ldrh	r2, [r7, #2]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	041a      	lsls	r2, r3, #16
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	43d9      	mvns	r1, r3
 8007fe8:	887b      	ldrh	r3, [r7, #2]
 8007fea:	400b      	ands	r3, r1
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	619a      	str	r2, [r3, #24]
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	4603      	mov	r3, r0
 8008006:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	4013      	ands	r3, r2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d008      	beq.n	800802a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f804 	bl	8008032 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	4603      	mov	r3, r0
 800803a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e0bd      	b.n	80081d6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d031      	beq.n	8008102 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a4f      	ldr	r2, [pc, #316]	; (80081e0 <HAL_HRTIM_Init+0x198>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d10e      	bne.n	80080c6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80080a8:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <HAL_HRTIM_Init+0x19c>)
 80080aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ae:	4a4d      	ldr	r2, [pc, #308]	; (80081e4 <HAL_HRTIM_Init+0x19c>)
 80080b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80080b8:	4b4a      	ldr	r3, [pc, #296]	; (80081e4 <HAL_HRTIM_Init+0x19c>)
 80080ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80080d4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080ea:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fb fa60 	bl	80035c8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d012      	beq.n	800813a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008122:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]
 800814e:	e03e      	b.n	80081ce <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8008150:	7dfa      	ldrb	r2, [r7, #23]
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	3318      	adds	r3, #24
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008164:	7dfa      	ldrb	r2, [r7, #23]
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	4613      	mov	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	1a9b      	subs	r3, r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	440b      	add	r3, r1
 8008172:	331c      	adds	r3, #28
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008178:	7dfa      	ldrb	r2, [r7, #23]
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	1a9b      	subs	r3, r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3320      	adds	r3, #32
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800818c:	7dfa      	ldrb	r2, [r7, #23]
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80081a0:	7dfa      	ldrb	r2, [r7, #23]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3328      	adds	r3, #40	; 0x28
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80081b4:	7dfa      	ldrb	r2, [r7, #23]
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3330      	adds	r3, #48	; 0x30
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	3301      	adds	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d9bd      	bls.n	8008150 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40017400 	.word	0x40017400
 80081e4:	58024400 	.word	0x58024400

080081e8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d101      	bne.n	8008204 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008200:	2302      	movs	r3, #2
 8008202:	e015      	b.n	8008230 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b05      	cmp	r3, #5
 8008210:	d104      	bne.n	800821c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fc4d 	bl	8008ab4 <HRTIM_MasterBase_Config>
 800821a:	e004      	b.n	8008226 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fc76 	bl	8008b12 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d101      	bne.n	8008254 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
 8008252:	e05f      	b.n	8008314 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800825e:	2302      	movs	r3, #2
 8008260:	e058      	b.n	8008314 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b05      	cmp	r3, #5
 8008276:	d104      	bne.n	8008282 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fc89 	bl	8008b92 <HRTIM_MasterWaveform_Config>
 8008280:	e004      	b.n	800828c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fcea 	bl	8008c60 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4613      	mov	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4403      	add	r3, r0
 800829e:	3320      	adds	r3, #32
 80082a0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6859      	ldr	r1, [r3, #4]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4403      	add	r3, r0
 80082b4:	3324      	adds	r3, #36	; 0x24
 80082b6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4613      	mov	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4403      	add	r3, r0
 80082ca:	3328      	adds	r3, #40	; 0x28
 80082cc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68d9      	ldr	r1, [r3, #12]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4403      	add	r3, r0
 80082e0:	332c      	adds	r3, #44	; 0x2c
 80082e2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6919      	ldr	r1, [r3, #16]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4613      	mov	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	1a9b      	subs	r3, r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4403      	add	r3, r0
 80082f6:	3330      	adds	r3, #48	; 0x30
 80082f8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 fec7 	bl	8009090 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d101      	bne.n	800833a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8008336:	2302      	movs	r3, #2
 8008338:	e157      	b.n	80085ea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008344:	2302      	movs	r3, #2
 8008346:	e150      	b.n	80085ea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b05      	cmp	r3, #5
 800835c:	d140      	bne.n	80083e0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3b01      	subs	r3, #1
 8008362:	2b07      	cmp	r3, #7
 8008364:	d82a      	bhi.n	80083bc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	0800838d 	.word	0x0800838d
 8008370:	08008399 	.word	0x08008399
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083a5 	.word	0x080083a5
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083bd 	.word	0x080083bd
 8008384:	080083bd 	.word	0x080083bd
 8008388:	080083b1 	.word	0x080083b1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	61da      	str	r2, [r3, #28]
        break;
 8008396:	e01a      	b.n	80083ce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80083a2:	e014      	b.n	80083ce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80083ae:	e00e      	b.n	80083ce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	6812      	ldr	r2, [r2, #0]
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80083ba:	e008      	b.n	80083ce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2207      	movs	r2, #7
 80083c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80083cc:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b07      	cmp	r3, #7
 80083d8:	f040 80fe 	bne.w	80085d8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e104      	b.n	80085ea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	f200 80e3 	bhi.w	80085b0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008411 	.word	0x08008411
 80083f4:	08008425 	.word	0x08008425
 80083f8:	080085b1 	.word	0x080085b1
 80083fc:	080084e1 	.word	0x080084e1
 8008400:	080085b1 	.word	0x080085b1
 8008404:	080085b1 	.word	0x080085b1
 8008408:	080085b1 	.word	0x080085b1
 800840c:	080084f5 	.word	0x080084f5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	01db      	lsls	r3, r3, #7
 800841c:	440b      	add	r3, r1
 800841e:	339c      	adds	r3, #156	; 0x9c
 8008420:	601a      	str	r2, [r3, #0]
        break;
 8008422:	e0d1      	b.n	80085c8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6819      	ldr	r1, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	01db      	lsls	r3, r3, #7
 8008430:	440b      	add	r3, r1
 8008432:	33a4      	adds	r3, #164	; 0xa4
 8008434:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d03f      	beq.n	80084be <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3301      	adds	r3, #1
 8008446:	01db      	lsls	r3, r3, #7
 8008448:	4413      	add	r3, r2
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	6811      	ldr	r1, [r2, #0]
 8008450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3301      	adds	r3, #1
 8008458:	01db      	lsls	r3, r3, #7
 800845a:	440b      	add	r3, r1
 800845c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	3301      	adds	r3, #1
 8008466:	01db      	lsls	r3, r3, #7
 8008468:	4413      	add	r3, r2
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	6809      	ldr	r1, [r1, #0]
 8008474:	431a      	orrs	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	3301      	adds	r3, #1
 800847a:	01db      	lsls	r3, r3, #7
 800847c:	440b      	add	r3, r1
 800847e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008488:	d109      	bne.n	800849e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	440b      	add	r3, r1
 8008498:	339c      	adds	r3, #156	; 0x9c
 800849a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800849c:	e091      	b.n	80085c2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084a6:	f040 808c 	bne.w	80085c2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	01db      	lsls	r3, r3, #7
 80084b6:	440b      	add	r3, r1
 80084b8:	33a8      	adds	r3, #168	; 0xa8
 80084ba:	601a      	str	r2, [r3, #0]
         break;
 80084bc:	e081      	b.n	80085c2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	3301      	adds	r3, #1
 80084c6:	01db      	lsls	r3, r3, #7
 80084c8:	4413      	add	r3, r2
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6811      	ldr	r1, [r2, #0]
 80084d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3301      	adds	r3, #1
 80084d8:	01db      	lsls	r3, r3, #7
 80084da:	440b      	add	r3, r1
 80084dc:	601a      	str	r2, [r3, #0]
         break;
 80084de:	e070      	b.n	80085c2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	01db      	lsls	r3, r3, #7
 80084ec:	440b      	add	r3, r1
 80084ee:	33a8      	adds	r3, #168	; 0xa8
 80084f0:	601a      	str	r2, [r3, #0]
        break;
 80084f2:	e069      	b.n	80085c8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6819      	ldr	r1, [r3, #0]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	01db      	lsls	r3, r3, #7
 8008500:	440b      	add	r3, r1
 8008502:	33ac      	adds	r3, #172	; 0xac
 8008504:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d03f      	beq.n	800858e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	4413      	add	r3, r2
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	6811      	ldr	r1, [r2, #0]
 8008520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	3301      	adds	r3, #1
 8008528:	01db      	lsls	r3, r3, #7
 800852a:	440b      	add	r3, r1
 800852c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	3301      	adds	r3, #1
 8008536:	01db      	lsls	r3, r3, #7
 8008538:	4413      	add	r3, r2
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	6809      	ldr	r1, [r1, #0]
 8008546:	431a      	orrs	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	3301      	adds	r3, #1
 800854c:	01db      	lsls	r3, r3, #7
 800854e:	440b      	add	r3, r1
 8008550:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855a:	d109      	bne.n	8008570 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6819      	ldr	r1, [r3, #0]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	01db      	lsls	r3, r3, #7
 8008568:	440b      	add	r3, r1
 800856a:	339c      	adds	r3, #156	; 0x9c
 800856c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800856e:	e02a      	b.n	80085c6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008578:	d125      	bne.n	80085c6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6819      	ldr	r1, [r3, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	01db      	lsls	r3, r3, #7
 8008586:	440b      	add	r3, r1
 8008588:	33a8      	adds	r3, #168	; 0xa8
 800858a:	601a      	str	r2, [r3, #0]
         break;
 800858c:	e01b      	b.n	80085c6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	3301      	adds	r3, #1
 8008596:	01db      	lsls	r3, r3, #7
 8008598:	4413      	add	r3, r2
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	6811      	ldr	r1, [r2, #0]
 80085a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3301      	adds	r3, #1
 80085a8:	01db      	lsls	r3, r3, #7
 80085aa:	440b      	add	r3, r1
 80085ac:	601a      	str	r2, [r3, #0]
         break;
 80085ae:	e00a      	b.n	80085c6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2207      	movs	r2, #7
 80085b4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80085c0:	e002      	b.n	80085c8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80085c6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b07      	cmp	r3, #7
 80085d2:	d101      	bne.n	80085d8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e008      	b.n	80085ea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop

080085f8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d101      	bne.n	8008616 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008612:	2302      	movs	r3, #2
 8008614:	e01d      	b.n	8008652 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008620:	2302      	movs	r3, #2
 8008622:	e016      	b.n	8008652 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 fc50 	bl	8008ee0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_HRTIM_WaveformOutputStart+0x18>
 800866e:	2302      	movs	r3, #2
 8008670:	e01a      	b.n	80086a8 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_HRTIM_WaveformOutputStop+0x18>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e01a      	b.n	8008702 <HAL_HRTIM_WaveformOutputStop+0x4e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008724:	2302      	movs	r3, #2
 8008726:	e05b      	b.n	80087e0 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68d9      	ldr	r1, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e022      	b.n	80087b8 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8008776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d017      	beq.n	80087b2 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	01db      	lsls	r3, r3, #7
 800878a:	4413      	add	r3, r2
 800878c:	338c      	adds	r3, #140	; 0x8c
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	7bfa      	ldrb	r2, [r7, #15]
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	3320      	adds	r3, #32
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6819      	ldr	r1, [r3, #0]
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4302      	orrs	r2, r0
 80087aa:	01db      	lsls	r3, r3, #7
 80087ac:	440b      	add	r3, r1
 80087ae:	338c      	adds	r3, #140	; 0x8c
 80087b0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	3301      	adds	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d9d9      	bls.n	8008772 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80087de:	2300      	movs	r3, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000028 	.word	0x20000028

080087f0 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80087fa:	f240 137f 	movw	r3, #383	; 0x17f
 80087fe:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800880a:	2302      	movs	r3, #2
 800880c:	e065      	b.n	80088da <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	43da      	mvns	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	400a      	ands	r2, r1
 8008832:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68d9      	ldr	r1, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800884c:	43da      	mvns	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	400a      	ands	r2, r1
 8008854:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
 800885a:	e023      	b.n	80088a4 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4a22      	ldr	r2, [pc, #136]	; (80088e8 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8008860:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d018      	beq.n	800889e <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	01db      	lsls	r3, r3, #7
 8008874:	4413      	add	r3, r2
 8008876:	338c      	adds	r3, #140	; 0x8c
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	7bfa      	ldrb	r2, [r7, #15]
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3320      	adds	r3, #32
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	43da      	mvns	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6819      	ldr	r1, [r3, #0]
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	4002      	ands	r2, r0
 8008896:	01db      	lsls	r3, r3, #7
 8008898:	440b      	add	r3, r1
 800889a:	338c      	adds	r3, #140	; 0x8c
 800889c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	3301      	adds	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d9d8      	bls.n	800885c <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	60bb      	str	r3, [r7, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1f9      	bne.n	80088aa <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6819      	ldr	r1, [r3, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	43da      	mvns	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	400a      	ands	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000028 	.word	0x20000028

080088ec <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2bff      	cmp	r3, #255	; 0xff
 80088fa:	d103      	bne.n	8008904 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc29 	bl	8009154 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008902:	e00a      	b.n	800891a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b05      	cmp	r3, #5
 8008908:	d103      	bne.n	8008912 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fca0 	bl	8009250 <HRTIM_Master_ISR>
}
 8008910:	e003      	b.n	800891a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fd45 	bl	80093a4 <HRTIM_Timer_ISR>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f023 0307 	bic.w	r3, r3, #7
 8008acc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0318 	bic.w	r3, r3, #24
 8008ade:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	6852      	ldr	r2, [r2, #4]
 8008b04:	619a      	str	r2, [r3, #24]
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3301      	adds	r3, #1
 8008b26:	01db      	lsls	r3, r3, #7
 8008b28:	4413      	add	r3, r2
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f023 0318 	bic.w	r3, r3, #24
 8008b46:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	01db      	lsls	r3, r3, #7
 8008b5c:	4413      	add	r3, r2
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6819      	ldr	r1, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	01db      	lsls	r3, r3, #7
 8008b6e:	440b      	add	r3, r1
 8008b70:	3394      	adds	r3, #148	; 0x94
 8008b72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6819      	ldr	r1, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	01db      	lsls	r3, r3, #7
 8008b80:	440b      	add	r3, r1
 8008b82:	3398      	adds	r3, #152	; 0x98
 8008b84:	601a      	str	r2, [r3, #0]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008bac:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f023 0320 	bic.w	r3, r3, #32
 8008bb4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bc6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bd8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008bea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008bfc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008c0e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c22:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c34:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b08b      	sub	sp, #44	; 0x2c
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	3301      	adds	r3, #1
 8008c74:	01db      	lsls	r3, r3, #7
 8008c76:	4413      	add	r3, r2
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	6811      	ldr	r1, [r2, #0]
 8008c7e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3301      	adds	r3, #1
 8008c86:	01db      	lsls	r3, r3, #7
 8008c88:	440b      	add	r3, r1
 8008c8a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3301      	adds	r3, #1
 8008c94:	01db      	lsls	r3, r3, #7
 8008c96:	4413      	add	r3, r2
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	01db      	lsls	r3, r3, #7
 8008ca4:	4413      	add	r3, r2
 8008ca6:	33e8      	adds	r3, #232	; 0xe8
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	4413      	add	r3, r2
 8008cb6:	33e4      	adds	r3, #228	; 0xe4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008cc4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	f023 0320 	bic.w	r3, r3, #32
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d42:	d103      	bne.n	8008d4c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f023 031f 	bic.w	r3, r3, #31
 8008d88:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d9e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d108      	bne.n	8008dc4 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008dcc:	d004      	beq.n	8008dd8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008dd6:	d103      	bne.n	8008de0 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	2b40      	cmp	r3, #64	; 0x40
 8008dde:	d108      	bne.n	8008df2 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008de6:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d843      	bhi.n	8008e86 <HRTIM_TimingUnitWaveform_Config+0x226>
 8008dfe:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e19 	.word	0x08008e19
 8008e08:	08008e2f 	.word	0x08008e2f
 8008e0c:	08008e45 	.word	0x08008e45
 8008e10:	08008e5b 	.word	0x08008e5b
 8008e14:	08008e71 	.word	0x08008e71
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e1e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61fb      	str	r3, [r7, #28]
      break;
 8008e2c:	e02c      	b.n	8008e88 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e34:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	61fb      	str	r3, [r7, #28]
      break;
 8008e42:	e021      	b.n	8008e88 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e4a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61fb      	str	r3, [r7, #28]
      break;
 8008e58:	e016      	b.n	8008e88 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e60:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61fb      	str	r3, [r7, #28]
      break;
 8008e6e:	e00b      	b.n	8008e88 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e76:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	015b      	lsls	r3, r3, #5
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	61fb      	str	r3, [r7, #28]
      break;
 8008e84:	e000      	b.n	8008e88 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008e86:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	01db      	lsls	r3, r3, #7
 8008e92:	4413      	add	r3, r2
 8008e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e96:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	01db      	lsls	r3, r3, #7
 8008ea0:	4413      	add	r3, r2
 8008ea2:	33e8      	adds	r3, #232	; 0xe8
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	01db      	lsls	r3, r3, #7
 8008eb0:	4413      	add	r3, r2
 8008eb2:	33e4      	adds	r3, #228	; 0xe4
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	01db      	lsls	r3, r3, #7
 8008ec0:	4413      	add	r3, r2
 8008ec2:	33d4      	adds	r3, #212	; 0xd4
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008ed2:	bf00      	nop
 8008ed4:	372c      	adds	r7, #44	; 0x2c
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop

08008ee0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	01db      	lsls	r3, r3, #7
 8008efa:	4413      	add	r3, r2
 8008efc:	33e4      	adds	r3, #228	; 0xe4
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	01db      	lsls	r3, r3, #7
 8008f0a:	4413      	add	r3, r2
 8008f0c:	33b8      	adds	r3, #184	; 0xb8
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f18:	d04d      	beq.n	8008fb6 <HRTIM_OutputConfig+0xd6>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f20:	d85e      	bhi.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f28:	d032      	beq.n	8008f90 <HRTIM_OutputConfig+0xb0>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f30:	d856      	bhi.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b80      	cmp	r3, #128	; 0x80
 8008f36:	d03e      	beq.n	8008fb6 <HRTIM_OutputConfig+0xd6>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d850      	bhi.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b40      	cmp	r3, #64	; 0x40
 8008f42:	d025      	beq.n	8008f90 <HRTIM_OutputConfig+0xb0>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d84a      	bhi.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d01f      	beq.n	8008f90 <HRTIM_OutputConfig+0xb0>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d044      	beq.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d841      	bhi.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d33e      	bcc.n	8008fe0 <HRTIM_OutputConfig+0x100>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3b02      	subs	r3, #2
 8008f66:	2201      	movs	r2, #1
 8008f68:	409a      	lsls	r2, r3
 8008f6a:	4b48      	ldr	r3, [pc, #288]	; (800908c <HRTIM_OutputConfig+0x1ac>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bf14      	ite	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	2300      	moveq	r3, #0
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d11c      	bne.n	8008fb6 <HRTIM_OutputConfig+0xd6>
 8008f7c:	f244 0304 	movw	r3, #16388	; 0x4004
 8008f80:	4013      	ands	r3, r2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bf14      	ite	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	2300      	moveq	r3, #0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d027      	beq.n	8008fe0 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6819      	ldr	r1, [r3, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	01db      	lsls	r3, r3, #7
 8008f9c:	440b      	add	r3, r1
 8008f9e:	33bc      	adds	r3, #188	; 0xbc
 8008fa0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	01db      	lsls	r3, r3, #7
 8008fae:	440b      	add	r3, r1
 8008fb0:	33c0      	adds	r3, #192	; 0xc0
 8008fb2:	601a      	str	r2, [r3, #0]
      break;
 8008fb4:	e015      	b.n	8008fe2 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6819      	ldr	r1, [r3, #0]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	01db      	lsls	r3, r3, #7
 8008fc2:	440b      	add	r3, r1
 8008fc4:	33c4      	adds	r3, #196	; 0xc4
 8008fc6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6819      	ldr	r1, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	01db      	lsls	r3, r3, #7
 8008fd4:	440b      	add	r3, r1
 8008fd6:	33c8      	adds	r3, #200	; 0xc8
 8008fd8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008fda:	2310      	movs	r3, #16
 8008fdc:	61bb      	str	r3, [r7, #24]
      break;
 8008fde:	e000      	b.n	8008fe2 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008fe0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008fe2:	22fe      	movs	r2, #254	; 0xfe
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008fea:	43db      	mvns	r3, r3
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	4313      	orrs	r3, r2
 8009010:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	4313      	orrs	r3, r2
 8009020:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	fa02 f303 	lsl.w	r3, r2, r3
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	4313      	orrs	r3, r2
 8009030:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	fa02 f303 	lsl.w	r3, r2, r3
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	4313      	orrs	r3, r2
 8009040:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b08      	cmp	r3, #8
 8009048:	d111      	bne.n	800906e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10c      	bne.n	800906e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	69da      	ldr	r2, [r3, #28]
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	4313      	orrs	r3, r2
 800906c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	01db      	lsls	r3, r3, #7
 8009076:	4413      	add	r3, r2
 8009078:	33e4      	adds	r3, #228	; 0xe4
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	601a      	str	r2, [r3, #0]
}
 800907e:	bf00      	nop
 8009080:	3724      	adds	r7, #36	; 0x24
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40000041 	.word	0x40000041

08009090 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b05      	cmp	r3, #5
 800909e:	d851      	bhi.n	8009144 <HRTIM_ForceRegistersUpdate+0xb4>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <HRTIM_ForceRegistersUpdate+0x18>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090d7 	.word	0x080090d7
 80090ac:	080090ed 	.word	0x080090ed
 80090b0:	08009103 	.word	0x08009103
 80090b4:	08009119 	.word	0x08009119
 80090b8:	0800912f 	.word	0x0800912f
 80090bc:	080090c1 	.word	0x080090c1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090d4:	e037      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0202 	orr.w	r2, r2, #2
 80090e6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090ea:	e02c      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0204 	orr.w	r2, r2, #4
 80090fc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009100:	e021      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0208 	orr.w	r2, r2, #8
 8009112:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009116:	e016      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0210 	orr.w	r2, r2, #16
 8009128:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800912c:	e00b      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0220 	orr.w	r2, r2, #32
 800913e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009142:	e000      	b.n	8009146 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8009144:	bf00      	nop
  }
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009164:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800916e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00c      	beq.n	8009194 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d007      	beq.n	8009194 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2201      	movs	r2, #1
 800918a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fbc7 	bl	8008922 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00c      	beq.n	80091b8 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2202      	movs	r2, #2
 80091ae:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fbbf 	bl	8008936 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00c      	beq.n	80091dc <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2204      	movs	r2, #4
 80091d2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fbb7 	bl	800894a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00c      	beq.n	8009200 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d007      	beq.n	8009200 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2208      	movs	r2, #8
 80091f6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fbaf 	bl	800895e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00c      	beq.n	8009224 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2210      	movs	r2, #16
 800921a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fba7 	bl	8008972 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00c      	beq.n	8009248 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fb9f 	bl	8008986 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009260:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800926a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d008      	beq.n	80092a2 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009298:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff fb7c 	bl	800899a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2201      	movs	r2, #1
 80092bc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80092be:	2105      	movs	r1, #5
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff fb89 	bl	80089d8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00c      	beq.n	80092ea <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2202      	movs	r2, #2
 80092e0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80092e2:	2105      	movs	r1, #5
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fa fd03 	bl	8003cf0 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00c      	beq.n	800930e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2204      	movs	r2, #4
 8009304:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009306:	2105      	movs	r1, #5
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fa fcfd 	bl	8003d08 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2208      	movs	r2, #8
 8009328:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800932a:	2105      	movs	r1, #5
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff fb5e 	bl	80089ee <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 0310 	and.w	r3, r3, #16
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2210      	movs	r2, #16
 800934c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800934e:	2105      	movs	r1, #5
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7fa fd4d 	bl	8003df0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	d006      	beq.n	8009378 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2220      	movs	r2, #32
 8009370:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff fb1b 	bl	80089ae <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2240      	movs	r2, #64	; 0x40
 8009392:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009394:	2105      	movs	r1, #5
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fb13 	bl	80089c2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800939c:	bf00      	nop
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	01db      	lsls	r3, r3, #7
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	01db      	lsls	r3, r3, #7
 80093c8:	4413      	add	r3, r2
 80093ca:	338c      	adds	r3, #140	; 0x8c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d010      	beq.n	80093fc <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	01db      	lsls	r3, r3, #7
 80093ec:	4413      	add	r3, r2
 80093ee:	3388      	adds	r3, #136	; 0x88
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff faee 	bl	80089d8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d010      	beq.n	8009428 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	01db      	lsls	r3, r3, #7
 8009418:	4413      	add	r3, r2
 800941a:	3388      	adds	r3, #136	; 0x88
 800941c:	2202      	movs	r2, #2
 800941e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7fa fc64 	bl	8003cf0 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	d010      	beq.n	8009454 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	01db      	lsls	r3, r3, #7
 8009444:	4413      	add	r3, r2
 8009446:	3388      	adds	r3, #136	; 0x88
 8009448:	2204      	movs	r2, #4
 800944a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fa fc5a 	bl	8003d08 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d010      	beq.n	8009480 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	01db      	lsls	r3, r3, #7
 8009470:	4413      	add	r3, r2
 8009472:	3388      	adds	r3, #136	; 0x88
 8009474:	2208      	movs	r2, #8
 8009476:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff fab7 	bl	80089ee <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b00      	cmp	r3, #0
 8009488:	d010      	beq.n	80094ac <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	01db      	lsls	r3, r3, #7
 800949c:	4413      	add	r3, r2
 800949e:	3388      	adds	r3, #136	; 0x88
 80094a0:	2210      	movs	r2, #16
 80094a2:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fa fca2 	bl	8003df0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	01db      	lsls	r3, r3, #7
 80094c8:	4413      	add	r3, r2
 80094ca:	3388      	adds	r3, #136	; 0x88
 80094cc:	2240      	movs	r2, #64	; 0x40
 80094ce:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fa75 	bl	80089c2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d010      	beq.n	8009504 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	01db      	lsls	r3, r3, #7
 80094f4:	4413      	add	r3, r2
 80094f6:	3388      	adds	r3, #136	; 0x88
 80094f8:	2280      	movs	r2, #128	; 0x80
 80094fa:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff fa80 	bl	8008a04 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950a:	2b00      	cmp	r3, #0
 800950c:	d011      	beq.n	8009532 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00c      	beq.n	8009532 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	01db      	lsls	r3, r3, #7
 8009520:	4413      	add	r3, r2
 8009522:	3388      	adds	r3, #136	; 0x88
 8009524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009528:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff fa74 	bl	8008a1a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009538:	2b00      	cmp	r3, #0
 800953a:	d011      	beq.n	8009560 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00c      	beq.n	8009560 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	01db      	lsls	r3, r3, #7
 800954e:	4413      	add	r3, r2
 8009550:	3388      	adds	r3, #136	; 0x88
 8009552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009556:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fa7e 	bl	8008a5c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009566:	2b00      	cmp	r3, #0
 8009568:	d011      	beq.n	800958e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00c      	beq.n	800958e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	01db      	lsls	r3, r3, #7
 800957c:	4413      	add	r3, r2
 800957e:	3388      	adds	r3, #136	; 0x88
 8009580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009584:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff fa72 	bl	8008a72 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009594:	2b00      	cmp	r3, #0
 8009596:	d011      	beq.n	80095bc <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00c      	beq.n	80095bc <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	01db      	lsls	r3, r3, #7
 80095aa:	4413      	add	r3, r2
 80095ac:	3388      	adds	r3, #136	; 0x88
 80095ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095b2:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fa66 	bl	8008a88 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d011      	beq.n	80095ea <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	01db      	lsls	r3, r3, #7
 80095d8:	4413      	add	r3, r2
 80095da:	3388      	adds	r3, #136	; 0x88
 80095dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095e0:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fa5a 	bl	8008a9e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d011      	beq.n	8009618 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00c      	beq.n	8009618 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	01db      	lsls	r3, r3, #7
 8009606:	4413      	add	r3, r2
 8009608:	3388      	adds	r3, #136	; 0x88
 800960a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800960e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff fa17 	bl	8008a46 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d011      	beq.n	8009646 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	01db      	lsls	r3, r3, #7
 8009634:	4413      	add	r3, r2
 8009636:	3388      	adds	r3, #136	; 0x88
 8009638:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800963c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff f9f5 	bl	8008a30 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e097      	b.n	8009792 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fa f849 	bl	8003714 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2202      	movs	r2, #2
 8009686:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d004      	beq.n	80096a4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a2:	d103      	bne.n	80096ac <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 031e 	bic.w	r3, r3, #30
 80096aa:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4b38      	ldr	r3, [pc, #224]	; (800979c <HAL_LPTIM_Init+0x14c>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4b37      	ldr	r3, [pc, #220]	; (80097a0 <HAL_LPTIM_Init+0x150>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80096d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80096d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80096dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80096e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d107      	bne.n	8009702 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80096fa:	4313      	orrs	r3, r2
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d004      	beq.n	8009714 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009712:	d107      	bne.n	8009724 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800971c:	4313      	orrs	r3, r2
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972c:	4293      	cmp	r3, r2
 800972e:	d00a      	beq.n	8009746 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009738:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800973e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a14      	ldr	r2, [pc, #80]	; (80097a4 <HAL_LPTIM_Init+0x154>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d004      	beq.n	8009762 <HAL_LPTIM_Init+0x112>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <HAL_LPTIM_Init+0x158>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d108      	bne.n	8009774 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	625a      	str	r2, [r3, #36]	; 0x24
 8009772:	e009      	b.n	8009788 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a0c      	ldr	r2, [pc, #48]	; (80097ac <HAL_LPTIM_Init+0x15c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d104      	bne.n	8009788 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009786:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	ffff1f3f 	.word	0xffff1f3f
 80097a0:	ff19f1fe 	.word	0xff19f1fe
 80097a4:	40002400 	.word	0x40002400
 80097a8:	58002400 	.word	0x58002400
 80097ac:	58002800 	.word	0x58002800

080097b0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d00c      	beq.n	80097e4 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097d2:	d107      	bne.n	80097e4 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80097e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2210      	movs	r2, #16
 80097fa:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009804:	2110      	movs	r1, #16
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f91e 	bl	8009a48 <LPTIM_WaitForFlag>
 800980c:	4603      	mov	r3, r0
 800980e:	2b03      	cmp	r3, #3
 8009810:	d101      	bne.n	8009816 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e02f      	b.n	8009876 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f946 	bl	8009aa8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f905 	bl	8009a2c <HAL_LPTIM_GetState>
 8009822:	4603      	mov	r3, r0
 8009824:	2b03      	cmp	r3, #3
 8009826:	d101      	bne.n	800982c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e024      	b.n	8009876 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0210 	orr.w	r2, r2, #16
 800983a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0202 	orr.w	r2, r2, #2
 800984a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0204 	orr.w	r2, r2, #4
 800986a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b01      	cmp	r3, #1
 8009892:	d10d      	bne.n	80098b0 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d106      	bne.n	80098b0 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2201      	movs	r2, #1
 80098a8:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f882 	bl	80099b4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d10d      	bne.n	80098da <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d106      	bne.n	80098da <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2202      	movs	r2, #2
 80098d2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fa f9fd 	bl	8003cd4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d10d      	bne.n	8009904 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d106      	bne.n	8009904 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2204      	movs	r2, #4
 80098fc:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f862 	bl	80099c8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0308 	and.w	r3, r3, #8
 800990e:	2b08      	cmp	r3, #8
 8009910:	d10d      	bne.n	800992e <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b08      	cmp	r3, #8
 800991e:	d106      	bne.n	800992e <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2208      	movs	r2, #8
 8009926:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f857 	bl	80099dc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0310 	and.w	r3, r3, #16
 8009938:	2b10      	cmp	r3, #16
 800993a:	d10d      	bne.n	8009958 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	2b10      	cmp	r3, #16
 8009948:	d106      	bne.n	8009958 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2210      	movs	r2, #16
 8009950:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f84c 	bl	80099f0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b20      	cmp	r3, #32
 8009964:	d10d      	bne.n	8009982 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b20      	cmp	r3, #32
 8009972:	d106      	bne.n	8009982 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2220      	movs	r2, #32
 800997a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f841 	bl	8009a04 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998c:	2b40      	cmp	r3, #64	; 0x40
 800998e:	d10d      	bne.n	80099ac <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b40      	cmp	r3, #64	; 0x40
 800999c:	d106      	bne.n	80099ac <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2240      	movs	r2, #64	; 0x40
 80099a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f836 	bl	8009a18 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a3a:	b2db      	uxtb	r3, r3
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <LPTIM_WaitForFlag+0x58>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a12      	ldr	r2, [pc, #72]	; (8009aa4 <LPTIM_WaitForFlag+0x5c>)
 8009a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a60:	0b9b      	lsrs	r3, r3, #14
 8009a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a66:	fb02 f303 	mul.w	r3, r2, r3
 8009a6a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	4013      	ands	r3, r2
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d002      	beq.n	8009a92 <LPTIM_WaitForFlag+0x4a>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1ec      	bne.n	8009a6c <LPTIM_WaitForFlag+0x24>

  return result;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	2000000c 	.word	0x2000000c
 8009aa4:	d1b71759 	.word	0xd1b71759

08009aa8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08c      	sub	sp, #48	; 0x30
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aba:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009abe:	2301      	movs	r3, #1
 8009ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f383 8810 	msr	PRIMASK, r3
}
 8009ac8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a81      	ldr	r2, [pc, #516]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d02d      	beq.n	8009b30 <LPTIM_Disable+0x88>
 8009ad4:	4a7f      	ldr	r2, [pc, #508]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d830      	bhi.n	8009b3c <LPTIM_Disable+0x94>
 8009ada:	4a7f      	ldr	r2, [pc, #508]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d021      	beq.n	8009b24 <LPTIM_Disable+0x7c>
 8009ae0:	4a7d      	ldr	r2, [pc, #500]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d82a      	bhi.n	8009b3c <LPTIM_Disable+0x94>
 8009ae6:	4a7d      	ldr	r2, [pc, #500]	; (8009cdc <LPTIM_Disable+0x234>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d015      	beq.n	8009b18 <LPTIM_Disable+0x70>
 8009aec:	4a7b      	ldr	r2, [pc, #492]	; (8009cdc <LPTIM_Disable+0x234>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d824      	bhi.n	8009b3c <LPTIM_Disable+0x94>
 8009af2:	4a7b      	ldr	r2, [pc, #492]	; (8009ce0 <LPTIM_Disable+0x238>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <LPTIM_Disable+0x58>
 8009af8:	4a7a      	ldr	r2, [pc, #488]	; (8009ce4 <LPTIM_Disable+0x23c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d006      	beq.n	8009b0c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009afe:	e01d      	b.n	8009b3c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009b00:	4b79      	ldr	r3, [pc, #484]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b0a:	e018      	b.n	8009b3e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b0c:	4b76      	ldr	r3, [pc, #472]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b16:	e012      	b.n	8009b3e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009b18:	4b73      	ldr	r3, [pc, #460]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b22:	e00c      	b.n	8009b3e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009b24:	4b70      	ldr	r3, [pc, #448]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b2e:	e006      	b.n	8009b3e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009b30:	4b6d      	ldr	r3, [pc, #436]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b3a:	e000      	b.n	8009b3e <LPTIM_Disable+0x96>
      break;
 8009b3c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a5a      	ldr	r2, [pc, #360]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d059      	beq.n	8009c24 <LPTIM_Disable+0x17c>
 8009b70:	4a58      	ldr	r2, [pc, #352]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d867      	bhi.n	8009c46 <LPTIM_Disable+0x19e>
 8009b76:	4a58      	ldr	r2, [pc, #352]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d042      	beq.n	8009c02 <LPTIM_Disable+0x15a>
 8009b7c:	4a56      	ldr	r2, [pc, #344]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d861      	bhi.n	8009c46 <LPTIM_Disable+0x19e>
 8009b82:	4a56      	ldr	r2, [pc, #344]	; (8009cdc <LPTIM_Disable+0x234>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d02b      	beq.n	8009be0 <LPTIM_Disable+0x138>
 8009b88:	4a54      	ldr	r2, [pc, #336]	; (8009cdc <LPTIM_Disable+0x234>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d85b      	bhi.n	8009c46 <LPTIM_Disable+0x19e>
 8009b8e:	4a54      	ldr	r2, [pc, #336]	; (8009ce0 <LPTIM_Disable+0x238>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <LPTIM_Disable+0xf4>
 8009b94:	4a53      	ldr	r2, [pc, #332]	; (8009ce4 <LPTIM_Disable+0x23c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d011      	beq.n	8009bbe <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009b9a:	e054      	b.n	8009c46 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009b9c:	4b52      	ldr	r3, [pc, #328]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	4a51      	ldr	r2, [pc, #324]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009bac:	4b4e      	ldr	r3, [pc, #312]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb2:	4a4d      	ldr	r2, [pc, #308]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009bbc:	e044      	b.n	8009c48 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009bbe:	4b4a      	ldr	r3, [pc, #296]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bc4:	4a48      	ldr	r2, [pc, #288]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009bce:	4b46      	ldr	r3, [pc, #280]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bd4:	4a44      	ldr	r2, [pc, #272]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009bde:	e033      	b.n	8009c48 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009be0:	4b41      	ldr	r3, [pc, #260]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009be6:	4a40      	ldr	r2, [pc, #256]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009bf0:	4b3d      	ldr	r3, [pc, #244]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bf6:	4a3c      	ldr	r2, [pc, #240]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c00:	e022      	b.n	8009c48 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009c02:	4b39      	ldr	r3, [pc, #228]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c08:	4a37      	ldr	r2, [pc, #220]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009c12:	4b35      	ldr	r3, [pc, #212]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c18:	4a33      	ldr	r2, [pc, #204]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c22:	e011      	b.n	8009c48 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009c24:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009c34:	4b2c      	ldr	r3, [pc, #176]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c3a:	4a2b      	ldr	r2, [pc, #172]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c40:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c44:	e000      	b.n	8009c48 <LPTIM_Disable+0x1a0>
      break;
 8009c46:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <LPTIM_Disable+0x1ae>
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80d1 	beq.w	8009df8 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d031      	beq.n	8009cc4 <LPTIM_Disable+0x21c>
 8009c60:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <LPTIM_Disable+0x22c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d842      	bhi.n	8009cec <LPTIM_Disable+0x244>
 8009c66:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d024      	beq.n	8009cb6 <LPTIM_Disable+0x20e>
 8009c6c:	4a1a      	ldr	r2, [pc, #104]	; (8009cd8 <LPTIM_Disable+0x230>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d83c      	bhi.n	8009cec <LPTIM_Disable+0x244>
 8009c72:	4a1a      	ldr	r2, [pc, #104]	; (8009cdc <LPTIM_Disable+0x234>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d017      	beq.n	8009ca8 <LPTIM_Disable+0x200>
 8009c78:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <LPTIM_Disable+0x234>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d836      	bhi.n	8009cec <LPTIM_Disable+0x244>
 8009c7e:	4a18      	ldr	r2, [pc, #96]	; (8009ce0 <LPTIM_Disable+0x238>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d003      	beq.n	8009c8c <LPTIM_Disable+0x1e4>
 8009c84:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <LPTIM_Disable+0x23c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009c8a:	e02f      	b.n	8009cec <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009c8c:	4b16      	ldr	r3, [pc, #88]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c90:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c92:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009c96:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009c98:	e029      	b.n	8009cee <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9e:	4a12      	ldr	r2, [pc, #72]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009ca0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009ca4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009ca6:	e022      	b.n	8009cee <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cac:	4a0e      	ldr	r2, [pc, #56]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009cae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cb2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009cb4:	e01b      	b.n	8009cee <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cba:	4a0b      	ldr	r2, [pc, #44]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009cbc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cc0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009cc2:	e014      	b.n	8009cee <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009cc4:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc8:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <LPTIM_Disable+0x240>)
 8009cca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cce:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009cd0:	e00d      	b.n	8009cee <LPTIM_Disable+0x246>
 8009cd2:	bf00      	nop
 8009cd4:	58003000 	.word	0x58003000
 8009cd8:	58002c00 	.word	0x58002c00
 8009cdc:	58002800 	.word	0x58002800
 8009ce0:	40002400 	.word	0x40002400
 8009ce4:	58002400 	.word	0x58002400
 8009ce8:	58024400 	.word	0x58024400
        break;
 8009cec:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01a      	beq.n	8009d2a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69fa      	ldr	r2, [r7, #28]
 8009d0a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009d0c:	2108      	movs	r1, #8
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fe9a 	bl	8009a48 <LPTIM_WaitForFlag>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d103      	bne.n	8009d22 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2203      	movs	r2, #3
 8009d1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2208      	movs	r2, #8
 8009d28:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01a      	beq.n	8009d66 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691a      	ldr	r2, [r3, #16]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009d48:	2110      	movs	r1, #16
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff fe7c 	bl	8009a48 <LPTIM_WaitForFlag>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d103      	bne.n	8009d5e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2203      	movs	r2, #3
 8009d5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2210      	movs	r2, #16
 8009d64:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a32      	ldr	r2, [pc, #200]	; (8009e34 <LPTIM_Disable+0x38c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d039      	beq.n	8009de4 <LPTIM_Disable+0x33c>
 8009d70:	4a30      	ldr	r2, [pc, #192]	; (8009e34 <LPTIM_Disable+0x38c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d83f      	bhi.n	8009df6 <LPTIM_Disable+0x34e>
 8009d76:	4a30      	ldr	r2, [pc, #192]	; (8009e38 <LPTIM_Disable+0x390>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d02a      	beq.n	8009dd2 <LPTIM_Disable+0x32a>
 8009d7c:	4a2e      	ldr	r2, [pc, #184]	; (8009e38 <LPTIM_Disable+0x390>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d839      	bhi.n	8009df6 <LPTIM_Disable+0x34e>
 8009d82:	4a2e      	ldr	r2, [pc, #184]	; (8009e3c <LPTIM_Disable+0x394>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d01b      	beq.n	8009dc0 <LPTIM_Disable+0x318>
 8009d88:	4a2c      	ldr	r2, [pc, #176]	; (8009e3c <LPTIM_Disable+0x394>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d833      	bhi.n	8009df6 <LPTIM_Disable+0x34e>
 8009d8e:	4a2c      	ldr	r2, [pc, #176]	; (8009e40 <LPTIM_Disable+0x398>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <LPTIM_Disable+0x2f4>
 8009d94:	4a2b      	ldr	r2, [pc, #172]	; (8009e44 <LPTIM_Disable+0x39c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d009      	beq.n	8009dae <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009d9a:	e02c      	b.n	8009df6 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009d9c:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009da4:	4928      	ldr	r1, [pc, #160]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	4313      	orrs	r3, r2
 8009daa:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009dac:	e024      	b.n	8009df8 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009dae:	4b26      	ldr	r3, [pc, #152]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009db6:	4924      	ldr	r1, [pc, #144]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009dbe:	e01b      	b.n	8009df8 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009dc0:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dc8:	491f      	ldr	r1, [pc, #124]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009dd0:	e012      	b.n	8009df8 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dda:	491b      	ldr	r1, [pc, #108]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	4313      	orrs	r3, r2
 8009de0:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009de2:	e009      	b.n	8009df8 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009de4:	4b18      	ldr	r3, [pc, #96]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dec:	4916      	ldr	r1, [pc, #88]	; (8009e48 <LPTIM_Disable+0x3a0>)
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	4313      	orrs	r3, r2
 8009df2:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009df4:	e000      	b.n	8009df8 <LPTIM_Disable+0x350>
        break;
 8009df6:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	691a      	ldr	r2, [r3, #16]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0201 	bic.w	r2, r2, #1
 8009e06:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6a3a      	ldr	r2, [r7, #32]
 8009e16:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f383 8810 	msr	PRIMASK, r3
}
 8009e2a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009e2c:	bf00      	nop
 8009e2e:	3730      	adds	r7, #48	; 0x30
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	58003000 	.word	0x58003000
 8009e38:	58002c00 	.word	0x58002c00
 8009e3c:	58002800 	.word	0x58002800
 8009e40:	40002400 	.word	0x40002400
 8009e44:	58002400 	.word	0x58002400
 8009e48:	58024400 	.word	0x58024400

08009e4c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a04      	ldr	r2, [pc, #16]	; (8009e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e5a:	6013      	str	r3, [r2, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	58024800 	.word	0x58024800

08009e6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d00a      	beq.n	8009e96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d001      	beq.n	8009e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e01f      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e01d      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f023 0207 	bic.w	r2, r3, #7
 8009e9e:	490f      	ldr	r1, [pc, #60]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ea6:	f7fa f9bf 	bl	8004228 <HAL_GetTick>
 8009eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eac:	e009      	b.n	8009ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009eae:	f7fa f9bb 	bl	8004228 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebc:	d901      	bls.n	8009ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e007      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ece:	d1ee      	bne.n	8009eae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	58024800 	.word	0x58024800

08009ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	; 0x30
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d102      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f000 bc48 	b.w	800a784 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8088 	beq.w	800a012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f02:	4b99      	ldr	r3, [pc, #612]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f0c:	4b96      	ldr	r3, [pc, #600]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	2b10      	cmp	r3, #16
 8009f16:	d007      	beq.n	8009f28 <HAL_RCC_OscConfig+0x48>
 8009f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1a:	2b18      	cmp	r3, #24
 8009f1c:	d111      	bne.n	8009f42 <HAL_RCC_OscConfig+0x62>
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d10c      	bne.n	8009f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f28:	4b8f      	ldr	r3, [pc, #572]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d06d      	beq.n	800a010 <HAL_RCC_OscConfig+0x130>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d169      	bne.n	800a010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f000 bc21 	b.w	800a784 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4a:	d106      	bne.n	8009f5a <HAL_RCC_OscConfig+0x7a>
 8009f4c:	4b86      	ldr	r3, [pc, #536]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a85      	ldr	r2, [pc, #532]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	e02e      	b.n	8009fb8 <HAL_RCC_OscConfig+0xd8>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10c      	bne.n	8009f7c <HAL_RCC_OscConfig+0x9c>
 8009f62:	4b81      	ldr	r3, [pc, #516]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a80      	ldr	r2, [pc, #512]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4b7e      	ldr	r3, [pc, #504]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a7d      	ldr	r2, [pc, #500]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	e01d      	b.n	8009fb8 <HAL_RCC_OscConfig+0xd8>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f84:	d10c      	bne.n	8009fa0 <HAL_RCC_OscConfig+0xc0>
 8009f86:	4b78      	ldr	r3, [pc, #480]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a77      	ldr	r2, [pc, #476]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	4b75      	ldr	r3, [pc, #468]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a74      	ldr	r2, [pc, #464]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	e00b      	b.n	8009fb8 <HAL_RCC_OscConfig+0xd8>
 8009fa0:	4b71      	ldr	r3, [pc, #452]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a70      	ldr	r2, [pc, #448]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	4b6e      	ldr	r3, [pc, #440]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a6d      	ldr	r2, [pc, #436]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d013      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc0:	f7fa f932 	bl	8004228 <HAL_GetTick>
 8009fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fc8:	f7fa f92e 	bl	8004228 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b64      	cmp	r3, #100	; 0x64
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e3d4      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fda:	4b63      	ldr	r3, [pc, #396]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0f0      	beq.n	8009fc8 <HAL_RCC_OscConfig+0xe8>
 8009fe6:	e014      	b.n	800a012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7fa f91e 	bl	8004228 <HAL_GetTick>
 8009fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7fa f91a 	bl	8004228 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	; 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e3c0      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a002:	4b59      	ldr	r3, [pc, #356]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1f0      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x110>
 800a00e:	e000      	b.n	800a012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80ca 	beq.w	800a1b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a020:	4b51      	ldr	r3, [pc, #324]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a028:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a02a:	4b4f      	ldr	r3, [pc, #316]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <HAL_RCC_OscConfig+0x166>
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	2b18      	cmp	r3, #24
 800a03a:	d156      	bne.n	800a0ea <HAL_RCC_OscConfig+0x20a>
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d151      	bne.n	800a0ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a046:	4b48      	ldr	r3, [pc, #288]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <HAL_RCC_OscConfig+0x17e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e392      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a05e:	4b42      	ldr	r3, [pc, #264]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f023 0219 	bic.w	r2, r3, #25
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	493f      	ldr	r1, [pc, #252]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a070:	f7fa f8da 	bl	8004228 <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a076:	e008      	b.n	800a08a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a078:	f7fa f8d6 	bl	8004228 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e37c      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a08a:	4b37      	ldr	r3, [pc, #220]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a096:	f7fa f8f7 	bl	8004288 <HAL_GetREVID>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d817      	bhi.n	800a0d4 <HAL_RCC_OscConfig+0x1f4>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b40      	cmp	r3, #64	; 0x40
 800a0aa:	d108      	bne.n	800a0be <HAL_RCC_OscConfig+0x1de>
 800a0ac:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0b4:	4a2c      	ldr	r2, [pc, #176]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0bc:	e07a      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0be:	4b2a      	ldr	r3, [pc, #168]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	031b      	lsls	r3, r3, #12
 800a0cc:	4926      	ldr	r1, [pc, #152]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0d2:	e06f      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d4:	4b24      	ldr	r3, [pc, #144]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	061b      	lsls	r3, r3, #24
 800a0e2:	4921      	ldr	r1, [pc, #132]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0e8:	e064      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d047      	beq.n	800a182 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a0f2:	4b1d      	ldr	r3, [pc, #116]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f023 0219 	bic.w	r2, r3, #25
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	491a      	ldr	r1, [pc, #104]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a100:	4313      	orrs	r3, r2
 800a102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a104:	f7fa f890 	bl	8004228 <HAL_GetTick>
 800a108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a10a:	e008      	b.n	800a11e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a10c:	f7fa f88c 	bl	8004228 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e332      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a11e:	4b12      	ldr	r3, [pc, #72]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0f0      	beq.n	800a10c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12a:	f7fa f8ad 	bl	8004288 <HAL_GetREVID>
 800a12e:	4603      	mov	r3, r0
 800a130:	f241 0203 	movw	r2, #4099	; 0x1003
 800a134:	4293      	cmp	r3, r2
 800a136:	d819      	bhi.n	800a16c <HAL_RCC_OscConfig+0x28c>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	2b40      	cmp	r3, #64	; 0x40
 800a13e:	d108      	bne.n	800a152 <HAL_RCC_OscConfig+0x272>
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a148:	4a07      	ldr	r2, [pc, #28]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a14e:	6053      	str	r3, [r2, #4]
 800a150:	e030      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	031b      	lsls	r3, r3, #12
 800a160:	4901      	ldr	r1, [pc, #4]	; (800a168 <HAL_RCC_OscConfig+0x288>)
 800a162:	4313      	orrs	r3, r2
 800a164:	604b      	str	r3, [r1, #4]
 800a166:	e025      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
 800a168:	58024400 	.word	0x58024400
 800a16c:	4b9a      	ldr	r3, [pc, #616]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	061b      	lsls	r3, r3, #24
 800a17a:	4997      	ldr	r1, [pc, #604]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	604b      	str	r3, [r1, #4]
 800a180:	e018      	b.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a182:	4b95      	ldr	r3, [pc, #596]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a94      	ldr	r2, [pc, #592]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18e:	f7fa f84b 	bl	8004228 <HAL_GetTick>
 800a192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a196:	f7fa f847 	bl	8004228 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e2ed      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1a8:	4b8b      	ldr	r3, [pc, #556]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f0      	bne.n	800a196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 80a9 	beq.w	800a314 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1c2:	4b85      	ldr	r3, [pc, #532]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1cc:	4b82      	ldr	r3, [pc, #520]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d007      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x308>
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	2b18      	cmp	r3, #24
 800a1dc:	d13a      	bne.n	800a254 <HAL_RCC_OscConfig+0x374>
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d135      	bne.n	800a254 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1e8:	4b7b      	ldr	r3, [pc, #492]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_RCC_OscConfig+0x320>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	2b80      	cmp	r3, #128	; 0x80
 800a1fa:	d001      	beq.n	800a200 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e2c1      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a200:	f7fa f842 	bl	8004288 <HAL_GetREVID>
 800a204:	4603      	mov	r3, r0
 800a206:	f241 0203 	movw	r2, #4099	; 0x1003
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d817      	bhi.n	800a23e <HAL_RCC_OscConfig+0x35e>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	2b20      	cmp	r3, #32
 800a214:	d108      	bne.n	800a228 <HAL_RCC_OscConfig+0x348>
 800a216:	4b70      	ldr	r3, [pc, #448]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a21e:	4a6e      	ldr	r2, [pc, #440]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a224:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a226:	e075      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a228:	4b6b      	ldr	r3, [pc, #428]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	069b      	lsls	r3, r3, #26
 800a236:	4968      	ldr	r1, [pc, #416]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a23c:	e06a      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a23e:	4b66      	ldr	r3, [pc, #408]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	4962      	ldr	r1, [pc, #392]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a252:	e05f      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d042      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a25c:	4b5e      	ldr	r3, [pc, #376]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a5d      	ldr	r2, [pc, #372]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a268:	f7f9 ffde 	bl	8004228 <HAL_GetTick>
 800a26c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a26e:	e008      	b.n	800a282 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a270:	f7f9 ffda 	bl	8004228 <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d901      	bls.n	800a282 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e280      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a282:	4b55      	ldr	r3, [pc, #340]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f0      	beq.n	800a270 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a28e:	f7f9 fffb 	bl	8004288 <HAL_GetREVID>
 800a292:	4603      	mov	r3, r0
 800a294:	f241 0203 	movw	r2, #4099	; 0x1003
 800a298:	4293      	cmp	r3, r2
 800a29a:	d817      	bhi.n	800a2cc <HAL_RCC_OscConfig+0x3ec>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d108      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x3d6>
 800a2a4:	4b4c      	ldr	r3, [pc, #304]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2ac:	4a4a      	ldr	r2, [pc, #296]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2b2:	6053      	str	r3, [r2, #4]
 800a2b4:	e02e      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
 800a2b6:	4b48      	ldr	r3, [pc, #288]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	069b      	lsls	r3, r3, #26
 800a2c4:	4944      	ldr	r1, [pc, #272]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	604b      	str	r3, [r1, #4]
 800a2ca:	e023      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
 800a2cc:	4b42      	ldr	r3, [pc, #264]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	061b      	lsls	r3, r3, #24
 800a2da:	493f      	ldr	r1, [pc, #252]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60cb      	str	r3, [r1, #12]
 800a2e0:	e018      	b.n	800a314 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a2e2:	4b3d      	ldr	r3, [pc, #244]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a3c      	ldr	r2, [pc, #240]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a2e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ee:	f7f9 ff9b 	bl	8004228 <HAL_GetTick>
 800a2f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2f4:	e008      	b.n	800a308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a2f6:	f7f9 ff97 	bl	8004228 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e23d      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a308:	4b33      	ldr	r3, [pc, #204]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1f0      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0308 	and.w	r3, r3, #8
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d036      	beq.n	800a38e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d019      	beq.n	800a35c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a328:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a32c:	4a2a      	ldr	r2, [pc, #168]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a334:	f7f9 ff78 	bl	8004228 <HAL_GetTick>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a33c:	f7f9 ff74 	bl	8004228 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e21a      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a34e:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0f0      	beq.n	800a33c <HAL_RCC_OscConfig+0x45c>
 800a35a:	e018      	b.n	800a38e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a35c:	4b1e      	ldr	r3, [pc, #120]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a360:	4a1d      	ldr	r2, [pc, #116]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a368:	f7f9 ff5e 	bl	8004228 <HAL_GetTick>
 800a36c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a370:	f7f9 ff5a 	bl	8004228 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e200      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1f0      	bne.n	800a370 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d039      	beq.n	800a40e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01c      	beq.n	800a3dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a0c      	ldr	r2, [pc, #48]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a3a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3ae:	f7f9 ff3b 	bl	8004228 <HAL_GetTick>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3b4:	e008      	b.n	800a3c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3b6:	f7f9 ff37 	bl	8004228 <HAL_GetTick>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d901      	bls.n	800a3c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e1dd      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <HAL_RCC_OscConfig+0x4f8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0f0      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x4d6>
 800a3d4:	e01b      	b.n	800a40e <HAL_RCC_OscConfig+0x52e>
 800a3d6:	bf00      	nop
 800a3d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3dc:	4b9b      	ldr	r3, [pc, #620]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a9a      	ldr	r2, [pc, #616]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3e8:	f7f9 ff1e 	bl	8004228 <HAL_GetTick>
 800a3ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3f0:	f7f9 ff1a 	bl	8004228 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e1c0      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a402:	4b92      	ldr	r3, [pc, #584]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1f0      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0304 	and.w	r3, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8081 	beq.w	800a51e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a41c:	4b8c      	ldr	r3, [pc, #560]	; (800a650 <HAL_RCC_OscConfig+0x770>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a8b      	ldr	r2, [pc, #556]	; (800a650 <HAL_RCC_OscConfig+0x770>)
 800a422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a428:	f7f9 fefe 	bl	8004228 <HAL_GetTick>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a430:	f7f9 fefa 	bl	8004228 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b64      	cmp	r3, #100	; 0x64
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e1a0      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a442:	4b83      	ldr	r3, [pc, #524]	; (800a650 <HAL_RCC_OscConfig+0x770>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d106      	bne.n	800a464 <HAL_RCC_OscConfig+0x584>
 800a456:	4b7d      	ldr	r3, [pc, #500]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45a:	4a7c      	ldr	r2, [pc, #496]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a45c:	f043 0301 	orr.w	r3, r3, #1
 800a460:	6713      	str	r3, [r2, #112]	; 0x70
 800a462:	e02d      	b.n	800a4c0 <HAL_RCC_OscConfig+0x5e0>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10c      	bne.n	800a486 <HAL_RCC_OscConfig+0x5a6>
 800a46c:	4b77      	ldr	r3, [pc, #476]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	4a76      	ldr	r2, [pc, #472]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	6713      	str	r3, [r2, #112]	; 0x70
 800a478:	4b74      	ldr	r3, [pc, #464]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47c:	4a73      	ldr	r2, [pc, #460]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a47e:	f023 0304 	bic.w	r3, r3, #4
 800a482:	6713      	str	r3, [r2, #112]	; 0x70
 800a484:	e01c      	b.n	800a4c0 <HAL_RCC_OscConfig+0x5e0>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d10c      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x5c8>
 800a48e:	4b6f      	ldr	r3, [pc, #444]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	4a6e      	ldr	r2, [pc, #440]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a494:	f043 0304 	orr.w	r3, r3, #4
 800a498:	6713      	str	r3, [r2, #112]	; 0x70
 800a49a:	4b6c      	ldr	r3, [pc, #432]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49e:	4a6b      	ldr	r2, [pc, #428]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a6:	e00b      	b.n	800a4c0 <HAL_RCC_OscConfig+0x5e0>
 800a4a8:	4b68      	ldr	r3, [pc, #416]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ac:	4a67      	ldr	r2, [pc, #412]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b4:	4b65      	ldr	r3, [pc, #404]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b8:	4a64      	ldr	r2, [pc, #400]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4ba:	f023 0304 	bic.w	r3, r3, #4
 800a4be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d015      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c8:	f7f9 feae 	bl	8004228 <HAL_GetTick>
 800a4cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4ce:	e00a      	b.n	800a4e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d0:	f7f9 feaa 	bl	8004228 <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d901      	bls.n	800a4e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e14e      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4e6:	4b59      	ldr	r3, [pc, #356]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0ee      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x5f0>
 800a4f2:	e014      	b.n	800a51e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f4:	f7f9 fe98 	bl	8004228 <HAL_GetTick>
 800a4f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a4fa:	e00a      	b.n	800a512 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4fc:	f7f9 fe94 	bl	8004228 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d901      	bls.n	800a512 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e138      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a512:	4b4e      	ldr	r3, [pc, #312]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1ee      	bne.n	800a4fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 812d 	beq.w	800a782 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a528:	4b48      	ldr	r3, [pc, #288]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a530:	2b18      	cmp	r3, #24
 800a532:	f000 80bd 	beq.w	800a6b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	f040 809e 	bne.w	800a67c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a540:	4b42      	ldr	r3, [pc, #264]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a41      	ldr	r2, [pc, #260]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a54a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54c:	f7f9 fe6c 	bl	8004228 <HAL_GetTick>
 800a550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a554:	f7f9 fe68 	bl	8004228 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e10e      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a566:	4b39      	ldr	r3, [pc, #228]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f0      	bne.n	800a554 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a572:	4b36      	ldr	r3, [pc, #216]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a576:	4b37      	ldr	r3, [pc, #220]	; (800a654 <HAL_RCC_OscConfig+0x774>)
 800a578:	4013      	ands	r3, r2
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a582:	0112      	lsls	r2, r2, #4
 800a584:	430a      	orrs	r2, r1
 800a586:	4931      	ldr	r1, [pc, #196]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	628b      	str	r3, [r1, #40]	; 0x28
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a590:	3b01      	subs	r3, #1
 800a592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	3b01      	subs	r3, #1
 800a59c:	025b      	lsls	r3, r3, #9
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	041b      	lsls	r3, r3, #16
 800a5aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	061b      	lsls	r3, r3, #24
 800a5b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5bc:	4923      	ldr	r1, [pc, #140]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	4a21      	ldr	r2, [pc, #132]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5c8:	f023 0301 	bic.w	r3, r3, #1
 800a5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5ce:	4b1f      	ldr	r3, [pc, #124]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d2:	4b21      	ldr	r3, [pc, #132]	; (800a658 <HAL_RCC_OscConfig+0x778>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	491b      	ldr	r1, [pc, #108]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	f023 020c 	bic.w	r2, r3, #12
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	4917      	ldr	r1, [pc, #92]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a5f4:	4b15      	ldr	r3, [pc, #84]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	f023 0202 	bic.w	r2, r3, #2
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a600:	4912      	ldr	r1, [pc, #72]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a602:	4313      	orrs	r3, r2
 800a604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	4a10      	ldr	r2, [pc, #64]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a60c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a612:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a61c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a61e:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	4a0a      	ldr	r2, [pc, #40]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a62a:	4b08      	ldr	r3, [pc, #32]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	4a07      	ldr	r2, [pc, #28]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a630:	f043 0301 	orr.w	r3, r3, #1
 800a634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a636:	4b05      	ldr	r3, [pc, #20]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <HAL_RCC_OscConfig+0x76c>)
 800a63c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a642:	f7f9 fdf1 	bl	8004228 <HAL_GetTick>
 800a646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a648:	e011      	b.n	800a66e <HAL_RCC_OscConfig+0x78e>
 800a64a:	bf00      	nop
 800a64c:	58024400 	.word	0x58024400
 800a650:	58024800 	.word	0x58024800
 800a654:	fffffc0c 	.word	0xfffffc0c
 800a658:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a65c:	f7f9 fde4 	bl	8004228 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	2b02      	cmp	r3, #2
 800a668:	d901      	bls.n	800a66e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e08a      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a66e:	4b47      	ldr	r3, [pc, #284]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0f0      	beq.n	800a65c <HAL_RCC_OscConfig+0x77c>
 800a67a:	e082      	b.n	800a782 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a67c:	4b43      	ldr	r3, [pc, #268]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a42      	ldr	r2, [pc, #264]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a688:	f7f9 fdce 	bl	8004228 <HAL_GetTick>
 800a68c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a690:	f7f9 fdca 	bl	8004228 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e070      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6a2:	4b3a      	ldr	r3, [pc, #232]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f0      	bne.n	800a690 <HAL_RCC_OscConfig+0x7b0>
 800a6ae:	e068      	b.n	800a782 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6b0:	4b36      	ldr	r3, [pc, #216]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6b6:	4b35      	ldr	r3, [pc, #212]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d031      	beq.n	800a728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f003 0203 	and.w	r2, r3, #3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d12a      	bne.n	800a728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	091b      	lsrs	r3, r3, #4
 800a6d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d122      	bne.n	800a728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d11a      	bne.n	800a728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	0a5b      	lsrs	r3, r3, #9
 800a6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a700:	429a      	cmp	r2, r3
 800a702:	d111      	bne.n	800a728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	0c1b      	lsrs	r3, r3, #16
 800a708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a712:	429a      	cmp	r2, r3
 800a714:	d108      	bne.n	800a728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	0e1b      	lsrs	r3, r3, #24
 800a71a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a722:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e02b      	b.n	800a784 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a72c:	4b17      	ldr	r3, [pc, #92]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a736:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d01f      	beq.n	800a782 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a742:	4b12      	ldr	r3, [pc, #72]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	4a11      	ldr	r2, [pc, #68]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a74e:	f7f9 fd6b 	bl	8004228 <HAL_GetTick>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a754:	bf00      	nop
 800a756:	f7f9 fd67 	bl	8004228 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	4293      	cmp	r3, r2
 800a760:	d0f9      	beq.n	800a756 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a762:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a766:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <HAL_RCC_OscConfig+0x8b0>)
 800a768:	4013      	ands	r3, r2
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a76e:	00d2      	lsls	r2, r2, #3
 800a770:	4906      	ldr	r1, [pc, #24]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a772:	4313      	orrs	r3, r2
 800a774:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	4a04      	ldr	r2, [pc, #16]	; (800a78c <HAL_RCC_OscConfig+0x8ac>)
 800a77c:	f043 0301 	orr.w	r3, r3, #1
 800a780:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3730      	adds	r7, #48	; 0x30
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	58024400 	.word	0x58024400
 800a790:	ffff0007 	.word	0xffff0007

0800a794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e19c      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7a8:	4b8a      	ldr	r3, [pc, #552]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d910      	bls.n	800a7d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7b6:	4b87      	ldr	r3, [pc, #540]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f023 020f 	bic.w	r2, r3, #15
 800a7be:	4985      	ldr	r1, [pc, #532]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7c6:	4b83      	ldr	r3, [pc, #524]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 030f 	and.w	r3, r3, #15
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d001      	beq.n	800a7d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e184      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d010      	beq.n	800a806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	4b7b      	ldr	r3, [pc, #492]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d908      	bls.n	800a806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7f4:	4b78      	ldr	r3, [pc, #480]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	4975      	ldr	r1, [pc, #468]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a802:	4313      	orrs	r3, r2
 800a804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0308 	and.w	r3, r3, #8
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	695a      	ldr	r2, [r3, #20]
 800a816:	4b70      	ldr	r3, [pc, #448]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a81e:	429a      	cmp	r2, r3
 800a820:	d908      	bls.n	800a834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a822:	4b6d      	ldr	r3, [pc, #436]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	496a      	ldr	r1, [pc, #424]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a830:	4313      	orrs	r3, r2
 800a832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0310 	and.w	r3, r3, #16
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	4b64      	ldr	r3, [pc, #400]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d908      	bls.n	800a862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a850:	4b61      	ldr	r3, [pc, #388]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	495e      	ldr	r1, [pc, #376]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d010      	beq.n	800a890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	69da      	ldr	r2, [r3, #28]
 800a872:	4b59      	ldr	r3, [pc, #356]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d908      	bls.n	800a890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a87e:	4b56      	ldr	r3, [pc, #344]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	4953      	ldr	r1, [pc, #332]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d010      	beq.n	800a8be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68da      	ldr	r2, [r3, #12]
 800a8a0:	4b4d      	ldr	r3, [pc, #308]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f003 030f 	and.w	r3, r3, #15
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d908      	bls.n	800a8be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8ac:	4b4a      	ldr	r3, [pc, #296]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f023 020f 	bic.w	r2, r3, #15
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	4947      	ldr	r1, [pc, #284]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d055      	beq.n	800a976 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8ca:	4b43      	ldr	r3, [pc, #268]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	4940      	ldr	r1, [pc, #256]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8e4:	4b3c      	ldr	r3, [pc, #240]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d121      	bne.n	800a934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e0f6      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d107      	bne.n	800a90c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8fc:	4b36      	ldr	r3, [pc, #216]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d115      	bne.n	800a934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e0ea      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d107      	bne.n	800a924 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a914:	4b30      	ldr	r3, [pc, #192]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d109      	bne.n	800a934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e0de      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a924:	4b2c      	ldr	r3, [pc, #176]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e0d6      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a934:	4b28      	ldr	r3, [pc, #160]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f023 0207 	bic.w	r2, r3, #7
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4925      	ldr	r1, [pc, #148]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a942:	4313      	orrs	r3, r2
 800a944:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a946:	f7f9 fc6f 	bl	8004228 <HAL_GetTick>
 800a94a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a94c:	e00a      	b.n	800a964 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a94e:	f7f9 fc6b 	bl	8004228 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d901      	bls.n	800a964 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e0be      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a964:	4b1c      	ldr	r3, [pc, #112]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	429a      	cmp	r2, r3
 800a974:	d1eb      	bne.n	800a94e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d010      	beq.n	800a9a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68da      	ldr	r2, [r3, #12]
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	f003 030f 	and.w	r3, r3, #15
 800a98e:	429a      	cmp	r2, r3
 800a990:	d208      	bcs.n	800a9a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a992:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	f023 020f 	bic.w	r2, r3, #15
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	490e      	ldr	r1, [pc, #56]	; (800a9d8 <HAL_RCC_ClockConfig+0x244>)
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9a4:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 030f 	and.w	r3, r3, #15
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d214      	bcs.n	800a9dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9b2:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f023 020f 	bic.w	r2, r3, #15
 800a9ba:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9c2:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <HAL_RCC_ClockConfig+0x240>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 030f 	and.w	r3, r3, #15
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d005      	beq.n	800a9dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e086      	b.n	800aae2 <HAL_RCC_ClockConfig+0x34e>
 800a9d4:	52002000 	.word	0x52002000
 800a9d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d010      	beq.n	800aa0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	691a      	ldr	r2, [r3, #16]
 800a9ec:	4b3f      	ldr	r3, [pc, #252]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d208      	bcs.n	800aa0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9f8:	4b3c      	ldr	r3, [pc, #240]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	4939      	ldr	r1, [pc, #228]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d010      	beq.n	800aa38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	695a      	ldr	r2, [r3, #20]
 800aa1a:	4b34      	ldr	r3, [pc, #208]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d208      	bcs.n	800aa38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa26:	4b31      	ldr	r3, [pc, #196]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	492e      	ldr	r1, [pc, #184]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d010      	beq.n	800aa66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	4b28      	ldr	r3, [pc, #160]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d208      	bcs.n	800aa66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa54:	4b25      	ldr	r3, [pc, #148]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	4922      	ldr	r1, [pc, #136]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d010      	beq.n	800aa94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69da      	ldr	r2, [r3, #28]
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d208      	bcs.n	800aa94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa82:	4b1a      	ldr	r3, [pc, #104]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	4917      	ldr	r1, [pc, #92]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa94:	f000 f844 	bl	800ab20 <HAL_RCC_GetSysClockFreq>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	4b14      	ldr	r3, [pc, #80]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	4912      	ldr	r1, [pc, #72]	; (800aaf0 <HAL_RCC_ClockConfig+0x35c>)
 800aaa6:	5ccb      	ldrb	r3, [r1, r3]
 800aaa8:	f003 031f 	and.w	r3, r3, #31
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aab2:	4b0e      	ldr	r3, [pc, #56]	; (800aaec <HAL_RCC_ClockConfig+0x358>)
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	f003 030f 	and.w	r3, r3, #15
 800aaba:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <HAL_RCC_ClockConfig+0x35c>)
 800aabc:	5cd3      	ldrb	r3, [r2, r3]
 800aabe:	f003 031f 	and.w	r3, r3, #31
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	4a0a      	ldr	r2, [pc, #40]	; (800aaf4 <HAL_RCC_ClockConfig+0x360>)
 800aaca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aacc:	4a0a      	ldr	r2, [pc, #40]	; (800aaf8 <HAL_RCC_ClockConfig+0x364>)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <HAL_RCC_ClockConfig+0x368>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f9 fb5c 	bl	8004194 <HAL_InitTick>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	58024400 	.word	0x58024400
 800aaf0:	08020c48 	.word	0x08020c48
 800aaf4:	20000010 	.word	0x20000010
 800aaf8:	2000000c 	.word	0x2000000c
 800aafc:	20000020 	.word	0x20000020

0800ab00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <HAL_RCC_EnableCSS+0x1c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a04      	ldr	r2, [pc, #16]	; (800ab1c <HAL_RCC_EnableCSS+0x1c>)
 800ab0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab0e:	6013      	str	r3, [r2, #0]
}
 800ab10:	bf00      	nop
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	58024400 	.word	0x58024400

0800ab20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b089      	sub	sp, #36	; 0x24
 800ab24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab26:	4bb3      	ldr	r3, [pc, #716]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab2e:	2b18      	cmp	r3, #24
 800ab30:	f200 8155 	bhi.w	800adde <HAL_RCC_GetSysClockFreq+0x2be>
 800ab34:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3a:	bf00      	nop
 800ab3c:	0800aba1 	.word	0x0800aba1
 800ab40:	0800addf 	.word	0x0800addf
 800ab44:	0800addf 	.word	0x0800addf
 800ab48:	0800addf 	.word	0x0800addf
 800ab4c:	0800addf 	.word	0x0800addf
 800ab50:	0800addf 	.word	0x0800addf
 800ab54:	0800addf 	.word	0x0800addf
 800ab58:	0800addf 	.word	0x0800addf
 800ab5c:	0800abc7 	.word	0x0800abc7
 800ab60:	0800addf 	.word	0x0800addf
 800ab64:	0800addf 	.word	0x0800addf
 800ab68:	0800addf 	.word	0x0800addf
 800ab6c:	0800addf 	.word	0x0800addf
 800ab70:	0800addf 	.word	0x0800addf
 800ab74:	0800addf 	.word	0x0800addf
 800ab78:	0800addf 	.word	0x0800addf
 800ab7c:	0800abcd 	.word	0x0800abcd
 800ab80:	0800addf 	.word	0x0800addf
 800ab84:	0800addf 	.word	0x0800addf
 800ab88:	0800addf 	.word	0x0800addf
 800ab8c:	0800addf 	.word	0x0800addf
 800ab90:	0800addf 	.word	0x0800addf
 800ab94:	0800addf 	.word	0x0800addf
 800ab98:	0800addf 	.word	0x0800addf
 800ab9c:	0800abd3 	.word	0x0800abd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba0:	4b94      	ldr	r3, [pc, #592]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d009      	beq.n	800abc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abac:	4b91      	ldr	r3, [pc, #580]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	08db      	lsrs	r3, r3, #3
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	4a90      	ldr	r2, [pc, #576]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abb8:	fa22 f303 	lsr.w	r3, r2, r3
 800abbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800abbe:	e111      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abc0:	4b8d      	ldr	r3, [pc, #564]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abc2:	61bb      	str	r3, [r7, #24]
      break;
 800abc4:	e10e      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800abc6:	4b8d      	ldr	r3, [pc, #564]	; (800adfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abc8:	61bb      	str	r3, [r7, #24]
      break;
 800abca:	e10b      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800abcc:	4b8c      	ldr	r3, [pc, #560]	; (800ae00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800abce:	61bb      	str	r3, [r7, #24]
      break;
 800abd0:	e108      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abd2:	4b88      	ldr	r3, [pc, #544]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800abdc:	4b85      	ldr	r3, [pc, #532]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	091b      	lsrs	r3, r3, #4
 800abe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abe6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abe8:	4b82      	ldr	r3, [pc, #520]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abf2:	4b80      	ldr	r3, [pc, #512]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf6:	08db      	lsrs	r3, r3, #3
 800abf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	fb02 f303 	mul.w	r3, r2, r3
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 80e1 	beq.w	800add8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	f000 8083 	beq.w	800ad24 <HAL_RCC_GetSysClockFreq+0x204>
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	f200 80a1 	bhi.w	800ad68 <HAL_RCC_GetSysClockFreq+0x248>
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <HAL_RCC_GetSysClockFreq+0x114>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d056      	beq.n	800ace0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac32:	e099      	b.n	800ad68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac34:	4b6f      	ldr	r3, [pc, #444]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0320 	and.w	r3, r3, #32
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d02d      	beq.n	800ac9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac40:	4b6c      	ldr	r3, [pc, #432]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	08db      	lsrs	r3, r3, #3
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	4a6b      	ldr	r2, [pc, #428]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	ee07 3a90 	vmov	s15, r3
 800ac58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6a:	4b62      	ldr	r3, [pc, #392]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ac9a:	e087      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2e8>
 800acaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acae:	4b51      	ldr	r3, [pc, #324]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800acc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acde:	e065      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae0c <HAL_RCC_GetSysClockFreq+0x2ec>
 800acee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf2:	4b40      	ldr	r3, [pc, #256]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad22:	e043      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ae10 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad36:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad46:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad66:	e021      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad72:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae0c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7a:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800adac:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb0:	0a5b      	lsrs	r3, r3, #9
 800adb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb6:	3301      	adds	r3, #1
 800adb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add0:	ee17 3a90 	vmov	r3, s15
 800add4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800add6:	e005      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	61bb      	str	r3, [r7, #24]
      break;
 800addc:	e002      	b.n	800ade4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800adde:	4b07      	ldr	r3, [pc, #28]	; (800adfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ade0:	61bb      	str	r3, [r7, #24]
      break;
 800ade2:	bf00      	nop
  }

  return sysclockfreq;
 800ade4:	69bb      	ldr	r3, [r7, #24]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3724      	adds	r7, #36	; 0x24
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	58024400 	.word	0x58024400
 800adf8:	03d09000 	.word	0x03d09000
 800adfc:	003d0900 	.word	0x003d0900
 800ae00:	00989680 	.word	0x00989680
 800ae04:	46000000 	.word	0x46000000
 800ae08:	4c742400 	.word	0x4c742400
 800ae0c:	4a742400 	.word	0x4a742400
 800ae10:	4b189680 	.word	0x4b189680

0800ae14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae1a:	f7ff fe81 	bl	800ab20 <HAL_RCC_GetSysClockFreq>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	0a1b      	lsrs	r3, r3, #8
 800ae26:	f003 030f 	and.w	r3, r3, #15
 800ae2a:	490f      	ldr	r1, [pc, #60]	; (800ae68 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae2c:	5ccb      	ldrb	r3, [r1, r3]
 800ae2e:	f003 031f 	and.w	r3, r3, #31
 800ae32:	fa22 f303 	lsr.w	r3, r2, r3
 800ae36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	4a09      	ldr	r2, [pc, #36]	; (800ae68 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae42:	5cd3      	ldrb	r3, [r2, r3]
 800ae44:	f003 031f 	and.w	r3, r3, #31
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	4a07      	ldr	r2, [pc, #28]	; (800ae6c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae52:	4a07      	ldr	r2, [pc, #28]	; (800ae70 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	58024400 	.word	0x58024400
 800ae68:	08020c48 	.word	0x08020c48
 800ae6c:	20000010 	.word	0x20000010
 800ae70:	2000000c 	.word	0x2000000c

0800ae74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae78:	f7ff ffcc 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	091b      	lsrs	r3, r3, #4
 800ae84:	f003 0307 	and.w	r3, r3, #7
 800ae88:	4904      	ldr	r1, [pc, #16]	; (800ae9c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae8a:	5ccb      	ldrb	r3, [r1, r3]
 800ae8c:	f003 031f 	and.w	r3, r3, #31
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	08020c48 	.word	0x08020c48

0800aea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aea4:	f7ff ffb6 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	4904      	ldr	r1, [pc, #16]	; (800aec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aeb6:	5ccb      	ldrb	r3, [r1, r3]
 800aeb8:	f003 031f 	and.w	r3, r3, #31
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	58024400 	.word	0x58024400
 800aec8:	08020c48 	.word	0x08020c48

0800aecc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aedc:	d105      	bne.n	800aeea <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800aede:	f000 f809 	bl	800aef4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aee8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800aeea:	bf00      	nop
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	58024400 	.word	0x58024400

0800aef4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
	...

0800af04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af08:	b0ca      	sub	sp, #296	; 0x128
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af16:	2300      	movs	r3, #0
 800af18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800af28:	2500      	movs	r5, #0
 800af2a:	ea54 0305 	orrs.w	r3, r4, r5
 800af2e:	d049      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800af30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af3a:	d02f      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af40:	d828      	bhi.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af46:	d01a      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af4c:	d822      	bhi.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af56:	d007      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af58:	e01c      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af5a:	4bb8      	ldr	r3, [pc, #736]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	4ab7      	ldr	r2, [pc, #732]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af66:	e01a      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	3308      	adds	r3, #8
 800af6e:	2102      	movs	r1, #2
 800af70:	4618      	mov	r0, r3
 800af72:	f002 fbb7 	bl	800d6e4 <RCCEx_PLL2_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af7c:	e00f      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af82:	3328      	adds	r3, #40	; 0x28
 800af84:	2102      	movs	r1, #2
 800af86:	4618      	mov	r0, r3
 800af88:	f002 fc5e 	bl	800d848 <RCCEx_PLL3_Config>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af92:	e004      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af9a:	e000      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800af9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800afa6:	4ba5      	ldr	r3, [pc, #660]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afaa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800afae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb4:	4aa1      	ldr	r2, [pc, #644]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	6513      	str	r3, [r2, #80]	; 0x50
 800afba:	e003      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800afc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800afd0:	f04f 0900 	mov.w	r9, #0
 800afd4:	ea58 0309 	orrs.w	r3, r8, r9
 800afd8:	d047      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d82a      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800afe4:	a201      	add	r2, pc, #4	; (adr r2, 800afec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800b001 	.word	0x0800b001
 800aff0:	0800b00f 	.word	0x0800b00f
 800aff4:	0800b025 	.word	0x0800b025
 800aff8:	0800b043 	.word	0x0800b043
 800affc:	0800b043 	.word	0x0800b043
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b000:	4b8e      	ldr	r3, [pc, #568]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	4a8d      	ldr	r2, [pc, #564]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b00a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b00c:	e01a      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b012:	3308      	adds	r3, #8
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fb64 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b022:	e00f      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b028:	3328      	adds	r3, #40	; 0x28
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f002 fc0b 	bl	800d848 <RCCEx_PLL3_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b038:	e004      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b040:	e000      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b04c:	4b7b      	ldr	r3, [pc, #492]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b050:	f023 0107 	bic.w	r1, r3, #7
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05a:	4a78      	ldr	r2, [pc, #480]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b05c:	430b      	orrs	r3, r1
 800b05e:	6513      	str	r3, [r2, #80]	; 0x50
 800b060:	e003      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b076:	f04f 0b00 	mov.w	fp, #0
 800b07a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b07e:	d04c      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b08a:	d030      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b08c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b090:	d829      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b092:	2bc0      	cmp	r3, #192	; 0xc0
 800b094:	d02d      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b096:	2bc0      	cmp	r3, #192	; 0xc0
 800b098:	d825      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b09a:	2b80      	cmp	r3, #128	; 0x80
 800b09c:	d018      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b09e:	2b80      	cmp	r3, #128	; 0x80
 800b0a0:	d821      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	d007      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b0aa:	e01c      	b.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ac:	4b63      	ldr	r3, [pc, #396]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	4a62      	ldr	r2, [pc, #392]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0b8:	e01c      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0be:	3308      	adds	r3, #8
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f002 fb0e 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0ce:	e011      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	3328      	adds	r3, #40	; 0x28
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 fbb5 	bl	800d848 <RCCEx_PLL3_Config>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0e4:	e006      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0ec:	e002      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0ee:	bf00      	nop
 800b0f0:	e000      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b0fc:	4b4f      	ldr	r3, [pc, #316]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b100:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b10a:	4a4c      	ldr	r2, [pc, #304]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b10c:	430b      	orrs	r3, r1
 800b10e:	6513      	str	r3, [r2, #80]	; 0x50
 800b110:	e003      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b126:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b12a:	2300      	movs	r3, #0
 800b12c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b130:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b134:	460b      	mov	r3, r1
 800b136:	4313      	orrs	r3, r2
 800b138:	d053      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b146:	d035      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b14c:	d82e      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b14e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b152:	d031      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b158:	d828      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b15a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b15e:	d01a      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b164:	d822      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b16a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b16e:	d007      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b170:	e01c      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b172:	4b32      	ldr	r3, [pc, #200]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	4a31      	ldr	r2, [pc, #196]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b17e:	e01c      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b184:	3308      	adds	r3, #8
 800b186:	2100      	movs	r1, #0
 800b188:	4618      	mov	r0, r3
 800b18a:	f002 faab 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b194:	e011      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	3328      	adds	r3, #40	; 0x28
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 fb52 	bl	800d848 <RCCEx_PLL3_Config>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1aa:	e006      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b2:	e002      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1b4:	bf00      	nop
 800b1b6:	e000      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10b      	bne.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b1c2:	4b1e      	ldr	r3, [pc, #120]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1d2:	4a1a      	ldr	r2, [pc, #104]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b1d8:	e003      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b1ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b1f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4313      	orrs	r3, r2
 800b200:	d056      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b20a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b20e:	d038      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b214:	d831      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b216:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b21a:	d034      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b21c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b220:	d82b      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b226:	d01d      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b22c:	d825      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d006      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b236:	d00a      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b238:	e01f      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b240:	4ba2      	ldr	r3, [pc, #648]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	4aa1      	ldr	r2, [pc, #644]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b24a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b24c:	e01c      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b252:	3308      	adds	r3, #8
 800b254:	2100      	movs	r1, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f002 fa44 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b262:	e011      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b268:	3328      	adds	r3, #40	; 0x28
 800b26a:	2100      	movs	r1, #0
 800b26c:	4618      	mov	r0, r3
 800b26e:	f002 faeb 	bl	800d848 <RCCEx_PLL3_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b278:	e006      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b280:	e002      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b282:	bf00      	nop
 800b284:	e000      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10b      	bne.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b290:	4b8e      	ldr	r3, [pc, #568]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b294:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2a0:	4a8a      	ldr	r2, [pc, #552]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	6593      	str	r3, [r2, #88]	; 0x58
 800b2a6:	e003      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b2bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b2c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	d03a      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d6:	2b30      	cmp	r3, #48	; 0x30
 800b2d8:	d01f      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b2da:	2b30      	cmp	r3, #48	; 0x30
 800b2dc:	d819      	bhi.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2de:	2b20      	cmp	r3, #32
 800b2e0:	d00c      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b2e2:	2b20      	cmp	r3, #32
 800b2e4:	d815      	bhi.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d019      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d111      	bne.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ee:	4b77      	ldr	r3, [pc, #476]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f2:	4a76      	ldr	r2, [pc, #472]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b2fa:	e011      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b300:	3308      	adds	r3, #8
 800b302:	2102      	movs	r1, #2
 800b304:	4618      	mov	r0, r3
 800b306:	f002 f9ed 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b310:	e006      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b318:	e002      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b31a:	bf00      	nop
 800b31c:	e000      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b31e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b320:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b328:	4b68      	ldr	r3, [pc, #416]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b336:	4a65      	ldr	r2, [pc, #404]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b338:	430b      	orrs	r3, r1
 800b33a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b33c:	e003      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b352:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b356:	2300      	movs	r3, #0
 800b358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b35c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b360:	460b      	mov	r3, r1
 800b362:	4313      	orrs	r3, r2
 800b364:	d051      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b36c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b370:	d035      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b376:	d82e      	bhi.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b37c:	d031      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b37e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b382:	d828      	bhi.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b388:	d01a      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b38e:	d822      	bhi.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d007      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b39a:	e01c      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b39c:	4b4b      	ldr	r3, [pc, #300]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	4a4a      	ldr	r2, [pc, #296]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3a8:	e01c      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f002 f996 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3be:	e011      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c4:	3328      	adds	r3, #40	; 0x28
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f002 fa3d 	bl	800d848 <RCCEx_PLL3_Config>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3d4:	e006      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3dc:	e002      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3de:	bf00      	nop
 800b3e0:	e000      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b3ec:	4b37      	ldr	r3, [pc, #220]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3fa:	4a34      	ldr	r2, [pc, #208]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b400:	e003      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b41a:	2300      	movs	r3, #0
 800b41c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b420:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b424:	460b      	mov	r3, r1
 800b426:	4313      	orrs	r3, r2
 800b428:	d056      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b434:	d033      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b43a:	d82c      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b43c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b440:	d02f      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b446:	d826      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b44c:	d02b      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b44e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b452:	d820      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b458:	d012      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b45a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b45e:	d81a      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d022      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b468:	d115      	bne.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	3308      	adds	r3, #8
 800b470:	2101      	movs	r1, #1
 800b472:	4618      	mov	r0, r3
 800b474:	f002 f936 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b47e:	e015      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b484:	3328      	adds	r3, #40	; 0x28
 800b486:	2101      	movs	r1, #1
 800b488:	4618      	mov	r0, r3
 800b48a:	f002 f9dd 	bl	800d848 <RCCEx_PLL3_Config>
 800b48e:	4603      	mov	r3, r0
 800b490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b494:	e00a      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b49c:	e006      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b49e:	bf00      	nop
 800b4a0:	e004      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4a2:	bf00      	nop
 800b4a4:	e002      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e000      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10d      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4c2:	4a02      	ldr	r2, [pc, #8]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	6513      	str	r3, [r2, #80]	; 0x50
 800b4c8:	e006      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b4e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	d055      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b504:	d033      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b50a:	d82c      	bhi.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b510:	d02f      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b516:	d826      	bhi.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b518:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b51c:	d02b      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b51e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b522:	d820      	bhi.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b528:	d012      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b52a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52e:	d81a      	bhi.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d022      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b538:	d115      	bne.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53e:	3308      	adds	r3, #8
 800b540:	2101      	movs	r1, #1
 800b542:	4618      	mov	r0, r3
 800b544:	f002 f8ce 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b548:	4603      	mov	r3, r0
 800b54a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b54e:	e015      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b554:	3328      	adds	r3, #40	; 0x28
 800b556:	2101      	movs	r1, #1
 800b558:	4618      	mov	r0, r3
 800b55a:	f002 f975 	bl	800d848 <RCCEx_PLL3_Config>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b564:	e00a      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b56c:	e006      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b56e:	bf00      	nop
 800b570:	e004      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b572:	bf00      	nop
 800b574:	e002      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b576:	bf00      	nop
 800b578:	e000      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b57a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b57c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b584:	4ba3      	ldr	r3, [pc, #652]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b588:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b594:	4a9f      	ldr	r2, [pc, #636]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b596:	430b      	orrs	r3, r1
 800b598:	6593      	str	r3, [r2, #88]	; 0x58
 800b59a:	e003      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	d037      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ce:	d00e      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d4:	d816      	bhi.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d018      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b5da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5de:	d111      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e0:	4b8c      	ldr	r3, [pc, #560]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e4:	4a8b      	ldr	r2, [pc, #556]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5ec:	e00f      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f002 f874 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b602:	e004      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b60a:	e000      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b60c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b616:	4b7f      	ldr	r3, [pc, #508]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b61a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b624:	4a7b      	ldr	r2, [pc, #492]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b626:	430b      	orrs	r3, r1
 800b628:	6513      	str	r3, [r2, #80]	; 0x50
 800b62a:	e003      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b644:	2300      	movs	r3, #0
 800b646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b64a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d039      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d81c      	bhi.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b65e:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b6a1 	.word	0x0800b6a1
 800b668:	0800b675 	.word	0x0800b675
 800b66c:	0800b683 	.word	0x0800b683
 800b670:	0800b6a1 	.word	0x0800b6a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b674:	4b67      	ldr	r3, [pc, #412]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	4a66      	ldr	r2, [pc, #408]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b67a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b67e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b680:	e00f      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b686:	3308      	adds	r3, #8
 800b688:	2102      	movs	r1, #2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f002 f82a 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b690:	4603      	mov	r3, r0
 800b692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b696:	e004      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b69e:	e000      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6aa:	4b5a      	ldr	r3, [pc, #360]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ae:	f023 0103 	bic.w	r1, r3, #3
 800b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6b8:	4a56      	ldr	r2, [pc, #344]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ba:	430b      	orrs	r3, r1
 800b6bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6be:	e003      	b.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b6d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	f000 809f 	beq.w	800b828 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6ea:	4b4b      	ldr	r3, [pc, #300]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a4a      	ldr	r2, [pc, #296]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6f6:	f7f8 fd97 	bl	8004228 <HAL_GetTick>
 800b6fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6fe:	e00b      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b700:	f7f8 fd92 	bl	8004228 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b64      	cmp	r3, #100	; 0x64
 800b70e:	d903      	bls.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b716:	e005      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b718:	4b3f      	ldr	r3, [pc, #252]	; (800b818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0ed      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d179      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b72c:	4b39      	ldr	r3, [pc, #228]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b738:	4053      	eors	r3, r2
 800b73a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d015      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b742:	4b34      	ldr	r3, [pc, #208]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b74a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b74e:	4b31      	ldr	r3, [pc, #196]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b752:	4a30      	ldr	r2, [pc, #192]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b758:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b75a:	4b2e      	ldr	r3, [pc, #184]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75e:	4a2d      	ldr	r2, [pc, #180]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b764:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b766:	4a2b      	ldr	r2, [pc, #172]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b768:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b76c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77a:	d118      	bne.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b77c:	f7f8 fd54 	bl	8004228 <HAL_GetTick>
 800b780:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b784:	e00d      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b786:	f7f8 fd4f 	bl	8004228 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b790:	1ad2      	subs	r2, r2, r3
 800b792:	f241 3388 	movw	r3, #5000	; 0x1388
 800b796:	429a      	cmp	r2, r3
 800b798:	d903      	bls.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b7a0:	e005      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7a2:	4b1c      	ldr	r3, [pc, #112]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0eb      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d129      	bne.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7c6:	d10e      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b7c8:	4b12      	ldr	r3, [pc, #72]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7d8:	091a      	lsrs	r2, r3, #4
 800b7da:	4b10      	ldr	r3, [pc, #64]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b7dc:	4013      	ands	r3, r2
 800b7de:	4a0d      	ldr	r2, [pc, #52]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6113      	str	r3, [r2, #16]
 800b7e4:	e005      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b7e6:	4b0b      	ldr	r3, [pc, #44]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	4a0a      	ldr	r2, [pc, #40]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b7f0:	6113      	str	r3, [r2, #16]
 800b7f2:	4b08      	ldr	r3, [pc, #32]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b802:	4a04      	ldr	r2, [pc, #16]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b804:	430b      	orrs	r3, r1
 800b806:	6713      	str	r3, [r2, #112]	; 0x70
 800b808:	e00e      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b80e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b812:	e009      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b814:	58024400 	.word	0x58024400
 800b818:	58024800 	.word	0x58024800
 800b81c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f002 0301 	and.w	r3, r2, #1
 800b834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b838:	2300      	movs	r3, #0
 800b83a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b83e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	f000 8089 	beq.w	800b95c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b850:	2b28      	cmp	r3, #40	; 0x28
 800b852:	d86b      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b854:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b935 	.word	0x0800b935
 800b860:	0800b92d 	.word	0x0800b92d
 800b864:	0800b92d 	.word	0x0800b92d
 800b868:	0800b92d 	.word	0x0800b92d
 800b86c:	0800b92d 	.word	0x0800b92d
 800b870:	0800b92d 	.word	0x0800b92d
 800b874:	0800b92d 	.word	0x0800b92d
 800b878:	0800b92d 	.word	0x0800b92d
 800b87c:	0800b901 	.word	0x0800b901
 800b880:	0800b92d 	.word	0x0800b92d
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b92d 	.word	0x0800b92d
 800b88c:	0800b92d 	.word	0x0800b92d
 800b890:	0800b92d 	.word	0x0800b92d
 800b894:	0800b92d 	.word	0x0800b92d
 800b898:	0800b92d 	.word	0x0800b92d
 800b89c:	0800b917 	.word	0x0800b917
 800b8a0:	0800b92d 	.word	0x0800b92d
 800b8a4:	0800b92d 	.word	0x0800b92d
 800b8a8:	0800b92d 	.word	0x0800b92d
 800b8ac:	0800b92d 	.word	0x0800b92d
 800b8b0:	0800b92d 	.word	0x0800b92d
 800b8b4:	0800b92d 	.word	0x0800b92d
 800b8b8:	0800b92d 	.word	0x0800b92d
 800b8bc:	0800b935 	.word	0x0800b935
 800b8c0:	0800b92d 	.word	0x0800b92d
 800b8c4:	0800b92d 	.word	0x0800b92d
 800b8c8:	0800b92d 	.word	0x0800b92d
 800b8cc:	0800b92d 	.word	0x0800b92d
 800b8d0:	0800b92d 	.word	0x0800b92d
 800b8d4:	0800b92d 	.word	0x0800b92d
 800b8d8:	0800b92d 	.word	0x0800b92d
 800b8dc:	0800b935 	.word	0x0800b935
 800b8e0:	0800b92d 	.word	0x0800b92d
 800b8e4:	0800b92d 	.word	0x0800b92d
 800b8e8:	0800b92d 	.word	0x0800b92d
 800b8ec:	0800b92d 	.word	0x0800b92d
 800b8f0:	0800b92d 	.word	0x0800b92d
 800b8f4:	0800b92d 	.word	0x0800b92d
 800b8f8:	0800b92d 	.word	0x0800b92d
 800b8fc:	0800b935 	.word	0x0800b935
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b904:	3308      	adds	r3, #8
 800b906:	2101      	movs	r1, #1
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 feeb 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b914:	e00f      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	3328      	adds	r3, #40	; 0x28
 800b91c:	2101      	movs	r1, #1
 800b91e:	4618      	mov	r0, r3
 800b920:	f001 ff92 	bl	800d848 <RCCEx_PLL3_Config>
 800b924:	4603      	mov	r3, r0
 800b926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b92a:	e004      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b932:	e000      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b934:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b93e:	4bbf      	ldr	r3, [pc, #764]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b942:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b94c:	4abb      	ldr	r2, [pc, #748]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b94e:	430b      	orrs	r3, r1
 800b950:	6553      	str	r3, [r2, #84]	; 0x54
 800b952:	e003      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f002 0302 	and.w	r3, r2, #2
 800b968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b96c:	2300      	movs	r3, #0
 800b96e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b972:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b976:	460b      	mov	r3, r1
 800b978:	4313      	orrs	r3, r2
 800b97a:	d041      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b982:	2b05      	cmp	r3, #5
 800b984:	d824      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b986:	a201      	add	r2, pc, #4	; (adr r2, 800b98c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b9d9 	.word	0x0800b9d9
 800b990:	0800b9a5 	.word	0x0800b9a5
 800b994:	0800b9bb 	.word	0x0800b9bb
 800b998:	0800b9d9 	.word	0x0800b9d9
 800b99c:	0800b9d9 	.word	0x0800b9d9
 800b9a0:	0800b9d9 	.word	0x0800b9d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f001 fe99 	bl	800d6e4 <RCCEx_PLL2_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9b8:	e00f      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9be:	3328      	adds	r3, #40	; 0x28
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 ff40 	bl	800d848 <RCCEx_PLL3_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9ce:	e004      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9d6:	e000      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b9d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b9e2:	4b96      	ldr	r3, [pc, #600]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e6:	f023 0107 	bic.w	r1, r3, #7
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f0:	4a92      	ldr	r2, [pc, #584]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	6553      	str	r3, [r2, #84]	; 0x54
 800b9f6:	e003      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f002 0304 	and.w	r3, r2, #4
 800ba0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba10:	2300      	movs	r3, #0
 800ba12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	d044      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba28:	2b05      	cmp	r3, #5
 800ba2a:	d825      	bhi.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ba2c:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800ba81 	.word	0x0800ba81
 800ba38:	0800ba4d 	.word	0x0800ba4d
 800ba3c:	0800ba63 	.word	0x0800ba63
 800ba40:	0800ba81 	.word	0x0800ba81
 800ba44:	0800ba81 	.word	0x0800ba81
 800ba48:	0800ba81 	.word	0x0800ba81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba50:	3308      	adds	r3, #8
 800ba52:	2101      	movs	r1, #1
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 fe45 	bl	800d6e4 <RCCEx_PLL2_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba60:	e00f      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	3328      	adds	r3, #40	; 0x28
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f001 feec 	bl	800d848 <RCCEx_PLL3_Config>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba76:	e004      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba7e:	e000      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ba80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba8a:	4b6c      	ldr	r3, [pc, #432]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba8e:	f023 0107 	bic.w	r1, r3, #7
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba9a:	4a68      	ldr	r2, [pc, #416]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6593      	str	r3, [r2, #88]	; 0x58
 800baa0:	e003      	b.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f002 0320 	and.w	r3, r2, #32
 800bab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800baba:	2300      	movs	r3, #0
 800babc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bac4:	460b      	mov	r3, r1
 800bac6:	4313      	orrs	r3, r2
 800bac8:	d055      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bad6:	d033      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800badc:	d82c      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae2:	d02f      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae8:	d826      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800baea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baee:	d02b      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800baf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baf4:	d820      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bafa:	d012      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bafc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb00:	d81a      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d022      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb0a:	d115      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb10:	3308      	adds	r3, #8
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fde5 	bl	800d6e4 <RCCEx_PLL2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb20:	e015      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb26:	3328      	adds	r3, #40	; 0x28
 800bb28:	2102      	movs	r1, #2
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 fe8c 	bl	800d848 <RCCEx_PLL3_Config>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb36:	e00a      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb3e:	e006      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb40:	bf00      	nop
 800bb42:	e004      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb44:	bf00      	nop
 800bb46:	e002      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb48:	bf00      	nop
 800bb4a:	e000      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb56:	4b39      	ldr	r3, [pc, #228]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb66:	4a35      	ldr	r2, [pc, #212]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	6553      	str	r3, [r2, #84]	; 0x54
 800bb6c:	e003      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bb82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb86:	2300      	movs	r3, #0
 800bb88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bb8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4313      	orrs	r3, r2
 800bb94:	d058      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bba2:	d033      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bba4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bba8:	d82c      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbae:	d02f      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bbb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb4:	d826      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbba:	d02b      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bbbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbc0:	d820      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbc6:	d012      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bbc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbcc:	d81a      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d022      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bbd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbd6:	d115      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	3308      	adds	r3, #8
 800bbde:	2100      	movs	r1, #0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fd7f 	bl	800d6e4 <RCCEx_PLL2_Config>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbec:	e015      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	3328      	adds	r3, #40	; 0x28
 800bbf4:	2102      	movs	r1, #2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f001 fe26 	bl	800d848 <RCCEx_PLL3_Config>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc02:	e00a      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc0a:	e006      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc0c:	bf00      	nop
 800bc0e:	e004      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc10:	bf00      	nop
 800bc12:	e002      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc14:	bf00      	nop
 800bc16:	e000      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10e      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc22:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc26:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc32:	4a02      	ldr	r2, [pc, #8]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc34:	430b      	orrs	r3, r1
 800bc36:	6593      	str	r3, [r2, #88]	; 0x58
 800bc38:	e006      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc3a:	bf00      	nop
 800bc3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bc62:	460b      	mov	r3, r1
 800bc64:	4313      	orrs	r3, r2
 800bc66:	d055      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc74:	d033      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bc76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc7a:	d82c      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc80:	d02f      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc86:	d826      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc8c:	d02b      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bc8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc92:	d820      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc98:	d012      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bc9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc9e:	d81a      	bhi.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d022      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca8:	d115      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcae:	3308      	adds	r3, #8
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f001 fd16 	bl	800d6e4 <RCCEx_PLL2_Config>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcbe:	e015      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc4:	3328      	adds	r3, #40	; 0x28
 800bcc6:	2102      	movs	r1, #2
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f001 fdbd 	bl	800d848 <RCCEx_PLL3_Config>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcd4:	e00a      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcdc:	e006      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcde:	bf00      	nop
 800bce0:	e004      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bce2:	bf00      	nop
 800bce4:	e002      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10b      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bcf4:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd04:	4a9d      	ldr	r2, [pc, #628]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd06:	430b      	orrs	r3, r1
 800bd08:	6593      	str	r3, [r2, #88]	; 0x58
 800bd0a:	e003      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f002 0308 	and.w	r3, r2, #8
 800bd20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd24:	2300      	movs	r3, #0
 800bd26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4313      	orrs	r3, r2
 800bd32:	d01e      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd40:	d10c      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd46:	3328      	adds	r3, #40	; 0x28
 800bd48:	2102      	movs	r1, #2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 fd7c 	bl	800d848 <RCCEx_PLL3_Config>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd5c:	4b87      	ldr	r3, [pc, #540]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd6c:	4a83      	ldr	r2, [pc, #524]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd6e:	430b      	orrs	r3, r1
 800bd70:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f002 0310 	and.w	r3, r2, #16
 800bd7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd82:	2300      	movs	r3, #0
 800bd84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	d01e      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd9e:	d10c      	bne.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda4:	3328      	adds	r3, #40	; 0x28
 800bda6:	2102      	movs	r1, #2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 fd4d 	bl	800d848 <RCCEx_PLL3_Config>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdba:	4b70      	ldr	r3, [pc, #448]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdca:	4a6c      	ldr	r2, [pc, #432]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdcc:	430b      	orrs	r3, r1
 800bdce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bde0:	2300      	movs	r3, #0
 800bde2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bde6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bdea:	460b      	mov	r3, r1
 800bdec:	4313      	orrs	r3, r2
 800bdee:	d03e      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdfc:	d022      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bdfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be02:	d81b      	bhi.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be0c:	d00b      	beq.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be0e:	e015      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	3308      	adds	r3, #8
 800be16:	2100      	movs	r1, #0
 800be18:	4618      	mov	r0, r3
 800be1a:	f001 fc63 	bl	800d6e4 <RCCEx_PLL2_Config>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be24:	e00f      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2a:	3328      	adds	r3, #40	; 0x28
 800be2c:	2102      	movs	r1, #2
 800be2e:	4618      	mov	r0, r3
 800be30:	f001 fd0a 	bl	800d848 <RCCEx_PLL3_Config>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be3a:	e004      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be42:	e000      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10b      	bne.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be4e:	4b4b      	ldr	r3, [pc, #300]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be52:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be5e:	4a47      	ldr	r2, [pc, #284]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be60:	430b      	orrs	r3, r1
 800be62:	6593      	str	r3, [r2, #88]	; 0x58
 800be64:	e003      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800be7a:	67bb      	str	r3, [r7, #120]	; 0x78
 800be7c:	2300      	movs	r3, #0
 800be7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800be84:	460b      	mov	r3, r1
 800be86:	4313      	orrs	r3, r2
 800be88:	d03b      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be96:	d01f      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800be98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be9c:	d818      	bhi.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800be9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bea2:	d003      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bea8:	d007      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800beaa:	e011      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beac:	4b33      	ldr	r3, [pc, #204]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb0:	4a32      	ldr	r2, [pc, #200]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800beb8:	e00f      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebe:	3328      	adds	r3, #40	; 0x28
 800bec0:	2101      	movs	r1, #1
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 fcc0 	bl	800d848 <RCCEx_PLL3_Config>
 800bec8:	4603      	mov	r3, r0
 800beca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bece:	e004      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bed6:	e000      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10b      	bne.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bee2:	4b26      	ldr	r3, [pc, #152]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800beea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef2:	4a22      	ldr	r2, [pc, #136]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bef4:	430b      	orrs	r3, r1
 800bef6:	6553      	str	r3, [r2, #84]	; 0x54
 800bef8:	e003      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800befe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf0e:	673b      	str	r3, [r7, #112]	; 0x70
 800bf10:	2300      	movs	r3, #0
 800bf12:	677b      	str	r3, [r7, #116]	; 0x74
 800bf14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	d034      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bf28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2c:	d007      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bf2e:	e011      	b.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf30:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf3c:	e00e      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf42:	3308      	adds	r3, #8
 800bf44:	2102      	movs	r1, #2
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 fbcc 	bl	800d6e4 <RCCEx_PLL2_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf52:	e003      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf72:	4a02      	ldr	r2, [pc, #8]	; (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf74:	430b      	orrs	r3, r1
 800bf76:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf78:	e006      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bf7a:	bf00      	nop
 800bf7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bf94:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf96:	2300      	movs	r3, #0
 800bf98:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	d00c      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa8:	3328      	adds	r3, #40	; 0x28
 800bfaa:	2102      	movs	r1, #2
 800bfac:	4618      	mov	r0, r3
 800bfae:	f001 fc4b 	bl	800d848 <RCCEx_PLL3_Config>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bfca:	663b      	str	r3, [r7, #96]	; 0x60
 800bfcc:	2300      	movs	r3, #0
 800bfce:	667b      	str	r3, [r7, #100]	; 0x64
 800bfd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	d038      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfe6:	d018      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bfe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfec:	d811      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bfee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bff2:	d014      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bff8:	d80b      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d011      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c002:	d106      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c004:	4bc3      	ldr	r3, [pc, #780]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c008:	4ac2      	ldr	r2, [pc, #776]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c00e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c010:	e008      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c018:	e004      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c01a:	bf00      	nop
 800c01c:	e002      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c01e:	bf00      	nop
 800c020:	e000      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c02c:	4bb9      	ldr	r3, [pc, #740]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c030:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c03c:	4ab5      	ldr	r2, [pc, #724]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c03e:	430b      	orrs	r3, r1
 800c040:	6553      	str	r3, [r2, #84]	; 0x54
 800c042:	e003      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c058:	65bb      	str	r3, [r7, #88]	; 0x58
 800c05a:	2300      	movs	r3, #0
 800c05c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c05e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c062:	460b      	mov	r3, r1
 800c064:	4313      	orrs	r3, r2
 800c066:	d009      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c068:	4baa      	ldr	r3, [pc, #680]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c06c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c076:	4aa7      	ldr	r2, [pc, #668]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c078:	430b      	orrs	r3, r1
 800c07a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c088:	653b      	str	r3, [r7, #80]	; 0x50
 800c08a:	2300      	movs	r3, #0
 800c08c:	657b      	str	r3, [r7, #84]	; 0x54
 800c08e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c092:	460b      	mov	r3, r1
 800c094:	4313      	orrs	r3, r2
 800c096:	d00a      	beq.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c098:	4b9e      	ldr	r3, [pc, #632]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0a8:	4a9a      	ldr	r2, [pc, #616]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0aa:	430b      	orrs	r3, r1
 800c0ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c0ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0bc:	2300      	movs	r3, #0
 800c0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	d009      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c0ca:	4b92      	ldr	r3, [pc, #584]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d8:	4a8e      	ldr	r2, [pc, #568]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c0ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	d00e      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0fa:	4b86      	ldr	r3, [pc, #536]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	4a85      	ldr	r2, [pc, #532]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c104:	6113      	str	r3, [r2, #16]
 800c106:	4b83      	ldr	r3, [pc, #524]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c108:	6919      	ldr	r1, [r3, #16]
 800c10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c112:	4a80      	ldr	r2, [pc, #512]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c114:	430b      	orrs	r3, r1
 800c116:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c124:	63bb      	str	r3, [r7, #56]	; 0x38
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c12a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c12e:	460b      	mov	r3, r1
 800c130:	4313      	orrs	r3, r2
 800c132:	d009      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c134:	4b77      	ldr	r3, [pc, #476]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c138:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c142:	4a74      	ldr	r2, [pc, #464]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c144:	430b      	orrs	r3, r1
 800c146:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c154:	633b      	str	r3, [r7, #48]	; 0x30
 800c156:	2300      	movs	r3, #0
 800c158:	637b      	str	r3, [r7, #52]	; 0x34
 800c15a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c15e:	460b      	mov	r3, r1
 800c160:	4313      	orrs	r3, r2
 800c162:	d00a      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c164:	4b6b      	ldr	r3, [pc, #428]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c168:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c174:	4a67      	ldr	r2, [pc, #412]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c176:	430b      	orrs	r3, r1
 800c178:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	2100      	movs	r1, #0
 800c184:	62b9      	str	r1, [r7, #40]	; 0x28
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c18c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c190:	460b      	mov	r3, r1
 800c192:	4313      	orrs	r3, r2
 800c194:	d011      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19a:	3308      	adds	r3, #8
 800c19c:	2100      	movs	r1, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f001 faa0 	bl	800d6e4 <RCCEx_PLL2_Config>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	6239      	str	r1, [r7, #32]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c1cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	d011      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1da:	3308      	adds	r3, #8
 800c1dc:	2101      	movs	r1, #1
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 fa80 	bl	800d6e4 <RCCEx_PLL2_Config>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	2100      	movs	r1, #0
 800c204:	61b9      	str	r1, [r7, #24]
 800c206:	f003 0304 	and.w	r3, r3, #4
 800c20a:	61fb      	str	r3, [r7, #28]
 800c20c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c210:	460b      	mov	r3, r1
 800c212:	4313      	orrs	r3, r2
 800c214:	d011      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21a:	3308      	adds	r3, #8
 800c21c:	2102      	movs	r1, #2
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fa60 	bl	800d6e4 <RCCEx_PLL2_Config>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	2100      	movs	r1, #0
 800c244:	6139      	str	r1, [r7, #16]
 800c246:	f003 0308 	and.w	r3, r3, #8
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c250:	460b      	mov	r3, r1
 800c252:	4313      	orrs	r3, r2
 800c254:	d011      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	3328      	adds	r3, #40	; 0x28
 800c25c:	2100      	movs	r1, #0
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 faf2 	bl	800d848 <RCCEx_PLL3_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	2100      	movs	r1, #0
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	f003 0310 	and.w	r3, r3, #16
 800c28a:	60fb      	str	r3, [r7, #12]
 800c28c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c290:	460b      	mov	r3, r1
 800c292:	4313      	orrs	r3, r2
 800c294:	d011      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29a:	3328      	adds	r3, #40	; 0x28
 800c29c:	2101      	movs	r1, #1
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 fad2 	bl	800d848 <RCCEx_PLL3_Config>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	6039      	str	r1, [r7, #0]
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	607b      	str	r3, [r7, #4]
 800c2cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	d011      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2da:	3328      	adds	r3, #40	; 0x28
 800c2dc:	2102      	movs	r1, #2
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fab2 	bl	800d848 <RCCEx_PLL3_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c2fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	e000      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
}
 800c308:	4618      	mov	r0, r3
 800c30a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c30e:	46bd      	mov	sp, r7
 800c310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c314:	58024400 	.word	0x58024400

0800c318 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b090      	sub	sp, #64	; 0x40
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c326:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c32a:	430b      	orrs	r3, r1
 800c32c:	f040 8094 	bne.w	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c330:	4b9e      	ldr	r3, [pc, #632]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	f200 8087 	bhi.w	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c342:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c348:	0800c35d 	.word	0x0800c35d
 800c34c:	0800c385 	.word	0x0800c385
 800c350:	0800c3ad 	.word	0x0800c3ad
 800c354:	0800c449 	.word	0x0800c449
 800c358:	0800c3d5 	.word	0x0800c3d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c35c:	4b93      	ldr	r3, [pc, #588]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c368:	d108      	bne.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c36a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c36e:	4618      	mov	r0, r3
 800c370:	f001 f810 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c378:	f000 bd45 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	f000 bd41 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c384:	4b89      	ldr	r3, [pc, #548]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c38c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c390:	d108      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c392:	f107 0318 	add.w	r3, r7, #24
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fd54 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a0:	f000 bd31 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a8:	f000 bd2d 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ac:	4b7f      	ldr	r3, [pc, #508]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b8:	d108      	bne.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fe94 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c8:	f000 bd1d 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d0:	f000 bd19 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3d4:	4b75      	ldr	r3, [pc, #468]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3de:	4b73      	ldr	r3, [pc, #460]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0304 	and.w	r3, r3, #4
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	d10c      	bne.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d109      	bne.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3f0:	4b6e      	ldr	r3, [pc, #440]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	08db      	lsrs	r3, r3, #3
 800c3f6:	f003 0303 	and.w	r3, r3, #3
 800c3fa:	4a6d      	ldr	r2, [pc, #436]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c402:	e01f      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c404:	4b69      	ldr	r3, [pc, #420]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c410:	d106      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c418:	d102      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c41a:	4b66      	ldr	r3, [pc, #408]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c41e:	e011      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c420:	4b62      	ldr	r3, [pc, #392]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c42c:	d106      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c434:	d102      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c436:	4b60      	ldr	r3, [pc, #384]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43a:	e003      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c440:	f000 bce1 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c444:	f000 bcdf 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c448:	4b5c      	ldr	r3, [pc, #368]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44c:	f000 bcdb 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c454:	f000 bcd7 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c45c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c460:	430b      	orrs	r3, r1
 800c462:	f040 80ad 	bne.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c466:	4b51      	ldr	r3, [pc, #324]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c46a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c46e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c476:	d056      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47e:	f200 8090 	bhi.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	2bc0      	cmp	r3, #192	; 0xc0
 800c486:	f000 8088 	beq.w	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	2bc0      	cmp	r3, #192	; 0xc0
 800c48e:	f200 8088 	bhi.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	2b80      	cmp	r3, #128	; 0x80
 800c496:	d032      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49a:	2b80      	cmp	r3, #128	; 0x80
 800c49c:	f200 8081 	bhi.w	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	2b40      	cmp	r3, #64	; 0x40
 800c4aa:	d014      	beq.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c4ac:	e079      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ae:	4b3f      	ldr	r3, [pc, #252]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ba:	d108      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 ff67 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ca:	f000 bc9c 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d2:	f000 bc98 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4d6:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4e2:	d108      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4e4:	f107 0318 	add.w	r3, r7, #24
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 fcab 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f2:	f000 bc88 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fa:	f000 bc84 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4fe:	4b2b      	ldr	r3, [pc, #172]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50a:	d108      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c50c:	f107 030c 	add.w	r3, r7, #12
 800c510:	4618      	mov	r0, r3
 800c512:	f000 fdeb 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51a:	f000 bc74 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c522:	f000 bc70 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c526:	4b21      	ldr	r3, [pc, #132]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c52a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c52e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c530:	4b1e      	ldr	r3, [pc, #120]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0304 	and.w	r3, r3, #4
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d10c      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d109      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c542:	4b1a      	ldr	r3, [pc, #104]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	08db      	lsrs	r3, r3, #3
 800c548:	f003 0303 	and.w	r3, r3, #3
 800c54c:	4a18      	ldr	r2, [pc, #96]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c54e:	fa22 f303 	lsr.w	r3, r2, r3
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c554:	e01f      	b.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c556:	4b15      	ldr	r3, [pc, #84]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c562:	d106      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c56a:	d102      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c56c:	4b11      	ldr	r3, [pc, #68]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c570:	e011      	b.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c57a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c57e:	d106      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c586:	d102      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c588:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c58c:	e003      	b.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c592:	f000 bc38 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c596:	f000 bc36 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c59a:	4b08      	ldr	r3, [pc, #32]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59e:	f000 bc32 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a6:	f000 bc2e 	b.w	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5aa:	bf00      	nop
 800c5ac:	58024400 	.word	0x58024400
 800c5b0:	03d09000 	.word	0x03d09000
 800c5b4:	003d0900 	.word	0x003d0900
 800c5b8:	00989680 	.word	0x00989680
 800c5bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	f040 809c 	bne.w	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c5ce:	4b9e      	ldr	r3, [pc, #632]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c5d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5de:	d054      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5e6:	f200 808b 	bhi.w	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5f0:	f000 8083 	beq.w	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5fa:	f200 8081 	bhi.w	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c604:	d02f      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c60c:	d878      	bhi.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c61a:	d012      	beq.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c61c:	e070      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c61e:	4b8a      	ldr	r3, [pc, #552]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c62a:	d107      	bne.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c62c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c630:	4618      	mov	r0, r3
 800c632:	f000 feaf 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c63a:	e3e4      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c640:	e3e1      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c642:	4b81      	ldr	r3, [pc, #516]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c64a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c64e:	d107      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c650:	f107 0318 	add.w	r3, r7, #24
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fbf5 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65e:	e3d2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c664:	e3cf      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c666:	4b78      	ldr	r3, [pc, #480]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c66e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c672:	d107      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c674:	f107 030c 	add.w	r3, r7, #12
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fd37 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c682:	e3c0      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c688:	e3bd      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c68a:	4b6f      	ldr	r3, [pc, #444]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c692:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c694:	4b6c      	ldr	r3, [pc, #432]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d10c      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d109      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6a6:	4b68      	ldr	r3, [pc, #416]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	08db      	lsrs	r3, r3, #3
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	4a66      	ldr	r2, [pc, #408]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b8:	e01e      	b.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6ba:	4b63      	ldr	r3, [pc, #396]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6c6:	d106      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ce:	d102      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6d0:	4b5f      	ldr	r3, [pc, #380]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6d4:	e010      	b.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6d6:	4b5c      	ldr	r3, [pc, #368]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6e2:	d106      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ea:	d102      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6ec:	4b59      	ldr	r3, [pc, #356]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f0:	e002      	b.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6f6:	e386      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6f8:	e385      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6fa:	4b57      	ldr	r3, [pc, #348]	; (800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fe:	e382      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c704:	e37f      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c70a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c70e:	430b      	orrs	r3, r1
 800c710:	f040 80a7 	bne.w	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c714:	4b4c      	ldr	r3, [pc, #304]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c718:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c71c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c724:	d055      	beq.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c72c:	f200 8096 	bhi.w	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c736:	f000 8084 	beq.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c740:	f200 808c 	bhi.w	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c74a:	d030      	beq.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c752:	f200 8083 	bhi.w	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c762:	d012      	beq.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c764:	e07a      	b.n	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c766:	4b38      	ldr	r3, [pc, #224]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c76e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c772:	d107      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 fe0b 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c782:	e340      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e33d      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c78a:	4b2f      	ldr	r3, [pc, #188]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c796:	d107      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c798:	f107 0318 	add.w	r3, r7, #24
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 fb51 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a6:	e32e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ac:	e32b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ba:	d107      	bne.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7bc:	f107 030c 	add.w	r3, r7, #12
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 fc93 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ca:	e31c      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	e319      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7dc:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d10c      	bne.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7ee:	4b16      	ldr	r3, [pc, #88]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	08db      	lsrs	r3, r3, #3
 800c7f4:	f003 0303 	and.w	r3, r3, #3
 800c7f8:	4a14      	ldr	r2, [pc, #80]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c800:	e01e      	b.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c802:	4b11      	ldr	r3, [pc, #68]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c80e:	d106      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c816:	d102      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c818:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81c:	e010      	b.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c81e:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c82a:	d106      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c832:	d102      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c834:	4b07      	ldr	r3, [pc, #28]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c838:	e002      	b.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c83e:	e2e2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c840:	e2e1      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c842:	4b05      	ldr	r3, [pc, #20]	; (800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c846:	e2de      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c848:	58024400 	.word	0x58024400
 800c84c:	03d09000 	.word	0x03d09000
 800c850:	003d0900 	.word	0x003d0900
 800c854:	00989680 	.word	0x00989680
 800c858:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c860:	e2d1      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c866:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c86a:	430b      	orrs	r3, r1
 800c86c:	f040 809c 	bne.w	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c870:	4b93      	ldr	r3, [pc, #588]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c874:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c878:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c880:	d054      	beq.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c888:	f200 808b 	bhi.w	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c892:	f000 8083 	beq.w	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c89c:	f200 8081 	bhi.w	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8a6:	d02f      	beq.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ae:	d878      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d004      	beq.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8bc:	d012      	beq.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c8be:	e070      	b.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8c0:	4b7f      	ldr	r3, [pc, #508]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8cc:	d107      	bne.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 fd5e 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8dc:	e293      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e2:	e290      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8e4:	4b76      	ldr	r3, [pc, #472]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8f0:	d107      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f2:	f107 0318 	add.w	r3, r7, #24
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 faa4 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c900:	e281      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c906:	e27e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c908:	4b6d      	ldr	r3, [pc, #436]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c914:	d107      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c916:	f107 030c 	add.w	r3, r7, #12
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 fbe6 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c924:	e26f      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92a:	e26c      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c92c:	4b64      	ldr	r3, [pc, #400]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c934:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c936:	4b62      	ldr	r3, [pc, #392]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0304 	and.w	r3, r3, #4
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d10c      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c944:	2b00      	cmp	r3, #0
 800c946:	d109      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c948:	4b5d      	ldr	r3, [pc, #372]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	08db      	lsrs	r3, r3, #3
 800c94e:	f003 0303 	and.w	r3, r3, #3
 800c952:	4a5c      	ldr	r2, [pc, #368]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c954:	fa22 f303 	lsr.w	r3, r2, r3
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c95a:	e01e      	b.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c95c:	4b58      	ldr	r3, [pc, #352]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c968:	d106      	bne.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c970:	d102      	bne.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c972:	4b55      	ldr	r3, [pc, #340]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c974:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c976:	e010      	b.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c978:	4b51      	ldr	r3, [pc, #324]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c984:	d106      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c98c:	d102      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c98e:	4b4f      	ldr	r3, [pc, #316]	; (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c992:	e002      	b.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c998:	e235      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c99a:	e234      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c99c:	4b4c      	ldr	r3, [pc, #304]	; (800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a0:	e231      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a6:	e22e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ac:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	f040 808f 	bne.w	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c9b6:	4b42      	ldr	r3, [pc, #264]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c9be:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9c6:	d06b      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9ce:	d874      	bhi.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9d6:	d056      	beq.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9de:	d86c      	bhi.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9e6:	d03b      	beq.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c9ee:	d864      	bhi.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f6:	d021      	beq.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9fe:	d85c      	bhi.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca0c:	d004      	beq.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca0e:	e054      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca10:	f7fe fa30 	bl	800ae74 <HAL_RCC_GetPCLK1Freq>
 800ca14:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca16:	e1f6      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca18:	4b29      	ldr	r3, [pc, #164]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca24:	d107      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca26:	f107 0318 	add.w	r3, r7, #24
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 fa0a 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca34:	e1e7      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3a:	e1e4      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca3c:	4b20      	ldr	r3, [pc, #128]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca48:	d107      	bne.n	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca4a:	f107 030c 	add.w	r3, r7, #12
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 fb4c 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca58:	e1d5      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5e:	e1d2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca60:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0304 	and.w	r3, r3, #4
 800ca68:	2b04      	cmp	r3, #4
 800ca6a:	d109      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca6c:	4b14      	ldr	r3, [pc, #80]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	08db      	lsrs	r3, r3, #3
 800ca72:	f003 0303 	and.w	r3, r3, #3
 800ca76:	4a13      	ldr	r2, [pc, #76]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca78:	fa22 f303 	lsr.w	r3, r2, r3
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7e:	e1c2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca84:	e1bf      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca86:	4b0e      	ldr	r3, [pc, #56]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca92:	d102      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca98:	e1b5      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9e:	e1b2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800caa0:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caac:	d102      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800caae:	4b07      	ldr	r3, [pc, #28]	; (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab2:	e1a8      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab8:	e1a5      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabe:	e1a2      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cac0:	58024400 	.word	0x58024400
 800cac4:	03d09000 	.word	0x03d09000
 800cac8:	003d0900 	.word	0x003d0900
 800cacc:	00989680 	.word	0x00989680
 800cad0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cadc:	430b      	orrs	r3, r1
 800cade:	d173      	bne.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cae0:	4b9c      	ldr	r3, [pc, #624]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cae8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caf0:	d02f      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caf8:	d863      	bhi.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d004      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb06:	d012      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb08:	e05b      	b.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb0a:	4b92      	ldr	r3, [pc, #584]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb16:	d107      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb18:	f107 0318 	add.w	r3, r7, #24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f991 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e16e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	e16b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb2e:	4b89      	ldr	r3, [pc, #548]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb3a:	d107      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb3c:	f107 030c 	add.w	r3, r7, #12
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fad3 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4a:	e15c      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e159      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb52:	4b80      	ldr	r3, [pc, #512]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb5c:	4b7d      	ldr	r3, [pc, #500]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	d10c      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d109      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb6e:	4b79      	ldr	r3, [pc, #484]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	08db      	lsrs	r3, r3, #3
 800cb74:	f003 0303 	and.w	r3, r3, #3
 800cb78:	4a77      	ldr	r2, [pc, #476]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb80:	e01e      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb82:	4b74      	ldr	r3, [pc, #464]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb8e:	d106      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb96:	d102      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb98:	4b70      	ldr	r3, [pc, #448]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb9c:	e010      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb9e:	4b6d      	ldr	r3, [pc, #436]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbaa:	d106      	bne.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbb2:	d102      	bne.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbb4:	4b6a      	ldr	r3, [pc, #424]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb8:	e002      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbbe:	e122      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbc0:	e121      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc6:	e11e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbcc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cbd0:	430b      	orrs	r3, r1
 800cbd2:	d133      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cbd4:	4b5f      	ldr	r3, [pc, #380]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbdc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbea:	d012      	beq.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cbec:	e023      	b.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbee:	4b59      	ldr	r3, [pc, #356]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbfa:	d107      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 fbc7 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0a:	e0fc      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc10:	e0f9      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc12:	4b50      	ldr	r3, [pc, #320]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc20:	f107 0318 	add.w	r3, r7, #24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f90d 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2e:	e0ea      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc34:	e0e7      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3a:	e0e4      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc40:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cc44:	430b      	orrs	r3, r1
 800cc46:	f040 808d 	bne.w	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc4a:	4b42      	ldr	r3, [pc, #264]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc52:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc5a:	d06b      	beq.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc62:	d874      	bhi.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc6a:	d056      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc72:	d86c      	bhi.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc7a:	d03b      	beq.n	800ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc82:	d864      	bhi.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc8a:	d021      	beq.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc92:	d85c      	bhi.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d004      	beq.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cca0:	d004      	beq.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cca2:	e054      	b.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cca4:	f000 f8b8 	bl	800ce18 <HAL_RCCEx_GetD3PCLK1Freq>
 800cca8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccaa:	e0ac      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccac:	4b29      	ldr	r3, [pc, #164]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccb8:	d107      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccba:	f107 0318 	add.w	r3, r7, #24
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f8c0 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc8:	e09d      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccce:	e09a      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccd0:	4b20      	ldr	r3, [pc, #128]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccdc:	d107      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccde:	f107 030c 	add.w	r3, r7, #12
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 fa02 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccec:	e08b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf2:	e088      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccf4:	4b17      	ldr	r3, [pc, #92]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d109      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd00:	4b14      	ldr	r3, [pc, #80]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	08db      	lsrs	r3, r3, #3
 800cd06:	f003 0303 	and.w	r3, r3, #3
 800cd0a:	4a13      	ldr	r2, [pc, #76]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd0c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd12:	e078      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd18:	e075      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd26:	d102      	bne.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cd28:	4b0c      	ldr	r3, [pc, #48]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd2c:	e06b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd32:	e068      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd34:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd40:	d102      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd42:	4b07      	ldr	r3, [pc, #28]	; (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd46:	e05e      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4c:	e05b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd52:	e058      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd54:	58024400 	.word	0x58024400
 800cd58:	03d09000 	.word	0x03d09000
 800cd5c:	003d0900 	.word	0x003d0900
 800cd60:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd68:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cd6c:	430b      	orrs	r3, r1
 800cd6e:	d148      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd70:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd80:	d02a      	beq.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd88:	d838      	bhi.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d004      	beq.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd96:	d00d      	beq.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cd98:	e030      	b.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd9a:	4b1d      	ldr	r3, [pc, #116]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cda2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cda6:	d102      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cda8:	4b1a      	ldr	r3, [pc, #104]	; (800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdac:	e02b      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb2:	e028      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdb4:	4b16      	ldr	r3, [pc, #88]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdc0:	d107      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fae4 	bl	800d394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd0:	e019      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd6:	e016      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdd8:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cde0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cde4:	d107      	bne.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde6:	f107 0318 	add.w	r3, r7, #24
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 f82a 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf4:	e007      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdfa:	e004      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce00:	e001      	b.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3740      	adds	r7, #64	; 0x40
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	58024400 	.word	0x58024400
 800ce14:	00989680 	.word	0x00989680

0800ce18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce1c:	f7fd fffa 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800ce20:	4602      	mov	r2, r0
 800ce22:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	091b      	lsrs	r3, r3, #4
 800ce28:	f003 0307 	and.w	r3, r3, #7
 800ce2c:	4904      	ldr	r1, [pc, #16]	; (800ce40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce2e:	5ccb      	ldrb	r3, [r1, r3]
 800ce30:	f003 031f 	and.w	r3, r3, #31
 800ce34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	08020c48 	.word	0x08020c48

0800ce44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b089      	sub	sp, #36	; 0x24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce4c:	4ba1      	ldr	r3, [pc, #644]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	f003 0303 	and.w	r3, r3, #3
 800ce54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce56:	4b9f      	ldr	r3, [pc, #636]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5a:	0b1b      	lsrs	r3, r3, #12
 800ce5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce62:	4b9c      	ldr	r3, [pc, #624]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce66:	091b      	lsrs	r3, r3, #4
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ce6e:	4b99      	ldr	r3, [pc, #612]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce72:	08db      	lsrs	r3, r3, #3
 800ce74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	fb02 f303 	mul.w	r3, r2, r3
 800ce7e:	ee07 3a90 	vmov	s15, r3
 800ce82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 8111 	beq.w	800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	f000 8083 	beq.w	800cfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	f200 80a1 	bhi.w	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d056      	beq.n	800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ceae:	e099      	b.n	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceb0:	4b88      	ldr	r3, [pc, #544]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0320 	and.w	r3, r3, #32
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d02d      	beq.n	800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cebc:	4b85      	ldr	r3, [pc, #532]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	08db      	lsrs	r3, r3, #3
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	4a84      	ldr	r2, [pc, #528]	; (800d0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cec8:	fa22 f303 	lsr.w	r3, r2, r3
 800cecc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	ee07 3a90 	vmov	s15, r3
 800ced4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	ee07 3a90 	vmov	s15, r3
 800cede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee6:	4b7b      	ldr	r3, [pc, #492]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cefa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf16:	e087      	b.n	800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	ee07 3a90 	vmov	s15, r3
 800cf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf2a:	4b6a      	ldr	r3, [pc, #424]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf5a:	e065      	b.n	800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf6e:	4b59      	ldr	r3, [pc, #356]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf9e:	e043      	b.n	800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfb2:	4b48      	ldr	r3, [pc, #288]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfe2:	e021      	b.n	800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff6:	4b37      	ldr	r3, [pc, #220]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d006:	ed97 6a03 	vldr	s12, [r7, #12]
 800d00a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d026:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d028:	4b2a      	ldr	r3, [pc, #168]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02c:	0a5b      	lsrs	r3, r3, #9
 800d02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d042:	edd7 6a07 	vldr	s13, [r7, #28]
 800d046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d04e:	ee17 2a90 	vmov	r2, s15
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d056:	4b1f      	ldr	r3, [pc, #124]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	0c1b      	lsrs	r3, r3, #16
 800d05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d060:	ee07 3a90 	vmov	s15, r3
 800d064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d06c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d070:	edd7 6a07 	vldr	s13, [r7, #28]
 800d074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d07c:	ee17 2a90 	vmov	r2, s15
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d084:	4b13      	ldr	r3, [pc, #76]	; (800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	0e1b      	lsrs	r3, r3, #24
 800d08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d09a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d09e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0aa:	ee17 2a90 	vmov	r2, s15
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d0b2:	e008      	b.n	800d0c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	609a      	str	r2, [r3, #8]
}
 800d0c6:	bf00      	nop
 800d0c8:	3724      	adds	r7, #36	; 0x24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	58024400 	.word	0x58024400
 800d0d8:	03d09000 	.word	0x03d09000
 800d0dc:	46000000 	.word	0x46000000
 800d0e0:	4c742400 	.word	0x4c742400
 800d0e4:	4a742400 	.word	0x4a742400
 800d0e8:	4b189680 	.word	0x4b189680

0800d0ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b089      	sub	sp, #36	; 0x24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0f4:	4ba1      	ldr	r3, [pc, #644]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d0fe:	4b9f      	ldr	r3, [pc, #636]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d102:	0d1b      	lsrs	r3, r3, #20
 800d104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d108:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d10a:	4b9c      	ldr	r3, [pc, #624]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d116:	4b99      	ldr	r3, [pc, #612]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d11a:	08db      	lsrs	r3, r3, #3
 800d11c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	fb02 f303 	mul.w	r3, r2, r3
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8111 	beq.w	800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	f000 8083 	beq.w	800d248 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	2b02      	cmp	r3, #2
 800d146:	f200 80a1 	bhi.w	800d28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d056      	beq.n	800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d156:	e099      	b.n	800d28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d158:	4b88      	ldr	r3, [pc, #544]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0320 	and.w	r3, r3, #32
 800d160:	2b00      	cmp	r3, #0
 800d162:	d02d      	beq.n	800d1c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d164:	4b85      	ldr	r3, [pc, #532]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	08db      	lsrs	r3, r3, #3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	4a84      	ldr	r2, [pc, #528]	; (800d380 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d170:	fa22 f303 	lsr.w	r3, r2, r3
 800d174:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	ee07 3a90 	vmov	s15, r3
 800d17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	ee07 3a90 	vmov	s15, r3
 800d186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18e:	4b7b      	ldr	r3, [pc, #492]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1be:	e087      	b.n	800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d388 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d2:	4b6a      	ldr	r3, [pc, #424]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d202:	e065      	b.n	800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	ee07 3a90 	vmov	s15, r3
 800d20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d216:	4b59      	ldr	r3, [pc, #356]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d226:	ed97 6a03 	vldr	s12, [r7, #12]
 800d22a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d246:	e043      	b.n	800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25a:	4b48      	ldr	r3, [pc, #288]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d26e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d28a:	e021      	b.n	800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	ee07 3a90 	vmov	s15, r3
 800d292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d296:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d29e:	4b37      	ldr	r3, [pc, #220]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d2d0:	4b2a      	ldr	r3, [pc, #168]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d4:	0a5b      	lsrs	r3, r3, #9
 800d2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f6:	ee17 2a90 	vmov	r2, s15
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d2fe:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	0c1b      	lsrs	r3, r3, #16
 800d304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d308:	ee07 3a90 	vmov	s15, r3
 800d30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d318:	edd7 6a07 	vldr	s13, [r7, #28]
 800d31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d324:	ee17 2a90 	vmov	r2, s15
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d32c:	4b13      	ldr	r3, [pc, #76]	; (800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d330:	0e1b      	lsrs	r3, r3, #24
 800d332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d33e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d342:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d346:	edd7 6a07 	vldr	s13, [r7, #28]
 800d34a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d352:	ee17 2a90 	vmov	r2, s15
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d35a:	e008      	b.n	800d36e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	609a      	str	r2, [r3, #8]
}
 800d36e:	bf00      	nop
 800d370:	3724      	adds	r7, #36	; 0x24
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	58024400 	.word	0x58024400
 800d380:	03d09000 	.word	0x03d09000
 800d384:	46000000 	.word	0x46000000
 800d388:	4c742400 	.word	0x4c742400
 800d38c:	4a742400 	.word	0x4a742400
 800d390:	4b189680 	.word	0x4b189680

0800d394 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d394:	b480      	push	{r7}
 800d396:	b089      	sub	sp, #36	; 0x24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d39c:	4ba0      	ldr	r3, [pc, #640]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a0:	f003 0303 	and.w	r3, r3, #3
 800d3a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d3a6:	4b9e      	ldr	r3, [pc, #632]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3aa:	091b      	lsrs	r3, r3, #4
 800d3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d3b2:	4b9b      	ldr	r3, [pc, #620]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d3bc:	4b98      	ldr	r3, [pc, #608]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	08db      	lsrs	r3, r3, #3
 800d3c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	fb02 f303 	mul.w	r3, r2, r3
 800d3cc:	ee07 3a90 	vmov	s15, r3
 800d3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 8111 	beq.w	800d602 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	f000 8083 	beq.w	800d4ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	f200 80a1 	bhi.w	800d532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d056      	beq.n	800d4aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d3fc:	e099      	b.n	800d532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3fe:	4b88      	ldr	r3, [pc, #544]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	2b00      	cmp	r3, #0
 800d408:	d02d      	beq.n	800d466 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d40a:	4b85      	ldr	r3, [pc, #532]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	08db      	lsrs	r3, r3, #3
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	4a83      	ldr	r2, [pc, #524]	; (800d624 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d416:	fa22 f303 	lsr.w	r3, r2, r3
 800d41a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	ee07 3a90 	vmov	s15, r3
 800d422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	ee07 3a90 	vmov	s15, r3
 800d42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d434:	4b7a      	ldr	r3, [pc, #488]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43c:	ee07 3a90 	vmov	s15, r3
 800d440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d444:	ed97 6a03 	vldr	s12, [r7, #12]
 800d448:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d460:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d464:	e087      	b.n	800d576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	ee07 3a90 	vmov	s15, r3
 800d46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d470:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d478:	4b69      	ldr	r3, [pc, #420]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d480:	ee07 3a90 	vmov	s15, r3
 800d484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d488:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4a8:	e065      	b.n	800d576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	ee07 3a90 	vmov	s15, r3
 800d4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d630 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4bc:	4b58      	ldr	r3, [pc, #352]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c4:	ee07 3a90 	vmov	s15, r3
 800d4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ec:	e043      	b.n	800d576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d634 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d500:	4b47      	ldr	r3, [pc, #284]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d508:	ee07 3a90 	vmov	s15, r3
 800d50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d510:	ed97 6a03 	vldr	s12, [r7, #12]
 800d514:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d530:	e021      	b.n	800d576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	ee07 3a90 	vmov	s15, r3
 800d538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d544:	4b36      	ldr	r3, [pc, #216]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d554:	ed97 6a03 	vldr	s12, [r7, #12]
 800d558:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d55c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d570:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d574:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d576:	4b2a      	ldr	r3, [pc, #168]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57a:	0a5b      	lsrs	r3, r3, #9
 800d57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d580:	ee07 3a90 	vmov	s15, r3
 800d584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d590:	edd7 6a07 	vldr	s13, [r7, #28]
 800d594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59c:	ee17 2a90 	vmov	r2, s15
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d5a4:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ae:	ee07 3a90 	vmov	s15, r3
 800d5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ca:	ee17 2a90 	vmov	r2, s15
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d5d2:	4b13      	ldr	r3, [pc, #76]	; (800d620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d6:	0e1b      	lsrs	r3, r3, #24
 800d5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5f8:	ee17 2a90 	vmov	r2, s15
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d600:	e008      	b.n	800d614 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	609a      	str	r2, [r3, #8]
}
 800d614:	bf00      	nop
 800d616:	3724      	adds	r7, #36	; 0x24
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	58024400 	.word	0x58024400
 800d624:	03d09000 	.word	0x03d09000
 800d628:	46000000 	.word	0x46000000
 800d62c:	4c742400 	.word	0x4c742400
 800d630:	4a742400 	.word	0x4a742400
 800d634:	4b189680 	.word	0x4b189680

0800d638 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d640:	4b26      	ldr	r3, [pc, #152]	; (800d6dc <HAL_RCCEx_CRSConfig+0xa4>)
 800d642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d646:	4a25      	ldr	r2, [pc, #148]	; (800d6dc <HAL_RCCEx_CRSConfig+0xa4>)
 800d648:	f043 0302 	orr.w	r3, r3, #2
 800d64c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d650:	4b22      	ldr	r3, [pc, #136]	; (800d6dc <HAL_RCCEx_CRSConfig+0xa4>)
 800d652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d656:	4a21      	ldr	r2, [pc, #132]	; (800d6dc <HAL_RCCEx_CRSConfig+0xa4>)
 800d658:	f023 0302 	bic.w	r3, r3, #2
 800d65c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d660:	f7f6 fe12 	bl	8004288 <HAL_GetREVID>
 800d664:	4603      	mov	r3, r0
 800d666:	f241 0203 	movw	r2, #4099	; 0x1003
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d80b      	bhi.n	800d686 <HAL_RCCEx_CRSConfig+0x4e>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d676:	d106      	bne.n	800d686 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	4313      	orrs	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e008      	b.n	800d698 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	4313      	orrs	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	041b      	lsls	r3, r3, #16
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d6ae:	4a0c      	ldr	r2, [pc, #48]	; (800d6e0 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	695b      	ldr	r3, [r3, #20]
 800d6c0:	021b      	lsls	r3, r3, #8
 800d6c2:	4907      	ldr	r1, [pc, #28]	; (800d6e0 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d6c8:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a04      	ldr	r2, [pc, #16]	; (800d6e0 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6d2:	6013      	str	r3, [r2, #0]
}
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	58024400 	.word	0x58024400
 800d6e0:	40008400 	.word	0x40008400

0800d6e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6f2:	4b53      	ldr	r3, [pc, #332]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d101      	bne.n	800d702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e099      	b.n	800d836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d702:	4b4f      	ldr	r3, [pc, #316]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a4e      	ldr	r2, [pc, #312]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d70c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d70e:	f7f6 fd8b 	bl	8004228 <HAL_GetTick>
 800d712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d714:	e008      	b.n	800d728 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d716:	f7f6 fd87 	bl	8004228 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	2b02      	cmp	r3, #2
 800d722:	d901      	bls.n	800d728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d724:	2303      	movs	r3, #3
 800d726:	e086      	b.n	800d836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d728:	4b45      	ldr	r3, [pc, #276]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1f0      	bne.n	800d716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d734:	4b42      	ldr	r3, [pc, #264]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d738:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	031b      	lsls	r3, r3, #12
 800d742:	493f      	ldr	r1, [pc, #252]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d744:	4313      	orrs	r3, r2
 800d746:	628b      	str	r3, [r1, #40]	; 0x28
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	3b01      	subs	r3, #1
 800d758:	025b      	lsls	r3, r3, #9
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	431a      	orrs	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	3b01      	subs	r3, #1
 800d764:	041b      	lsls	r3, r3, #16
 800d766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d76a:	431a      	orrs	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	3b01      	subs	r3, #1
 800d772:	061b      	lsls	r3, r3, #24
 800d774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d778:	4931      	ldr	r1, [pc, #196]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d77a:	4313      	orrs	r3, r2
 800d77c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d77e:	4b30      	ldr	r3, [pc, #192]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	492d      	ldr	r1, [pc, #180]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d78c:	4313      	orrs	r3, r2
 800d78e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d790:	4b2b      	ldr	r3, [pc, #172]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	f023 0220 	bic.w	r2, r3, #32
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	4928      	ldr	r1, [pc, #160]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7a2:	4b27      	ldr	r3, [pc, #156]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a6:	4a26      	ldr	r2, [pc, #152]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7a8:	f023 0310 	bic.w	r3, r3, #16
 800d7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7ae:	4b24      	ldr	r3, [pc, #144]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7b2:	4b24      	ldr	r3, [pc, #144]	; (800d844 <RCCEx_PLL2_Config+0x160>)
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	69d2      	ldr	r2, [r2, #28]
 800d7ba:	00d2      	lsls	r2, r2, #3
 800d7bc:	4920      	ldr	r1, [pc, #128]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7c2:	4b1f      	ldr	r3, [pc, #124]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c6:	4a1e      	ldr	r2, [pc, #120]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7c8:	f043 0310 	orr.w	r3, r3, #16
 800d7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d106      	bne.n	800d7e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d7d4:	4b1a      	ldr	r3, [pc, #104]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	4a19      	ldr	r2, [pc, #100]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7e0:	e00f      	b.n	800d802 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d106      	bne.n	800d7f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d7e8:	4b15      	ldr	r3, [pc, #84]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ec:	4a14      	ldr	r2, [pc, #80]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7f4:	e005      	b.n	800d802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d7f6:	4b12      	ldr	r3, [pc, #72]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fa:	4a11      	ldr	r2, [pc, #68]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d802:	4b0f      	ldr	r3, [pc, #60]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a0e      	ldr	r2, [pc, #56]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d80c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d80e:	f7f6 fd0b 	bl	8004228 <HAL_GetTick>
 800d812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d814:	e008      	b.n	800d828 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d816:	f7f6 fd07 	bl	8004228 <HAL_GetTick>
 800d81a:	4602      	mov	r2, r0
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	2b02      	cmp	r3, #2
 800d822:	d901      	bls.n	800d828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d824:	2303      	movs	r3, #3
 800d826:	e006      	b.n	800d836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <RCCEx_PLL2_Config+0x15c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d830:	2b00      	cmp	r3, #0
 800d832:	d0f0      	beq.n	800d816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d834:	7bfb      	ldrb	r3, [r7, #15]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	58024400 	.word	0x58024400
 800d844:	ffff0007 	.word	0xffff0007

0800d848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d856:	4b53      	ldr	r3, [pc, #332]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d101      	bne.n	800d866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e099      	b.n	800d99a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d866:	4b4f      	ldr	r3, [pc, #316]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a4e      	ldr	r2, [pc, #312]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d86c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d872:	f7f6 fcd9 	bl	8004228 <HAL_GetTick>
 800d876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d878:	e008      	b.n	800d88c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d87a:	f7f6 fcd5 	bl	8004228 <HAL_GetTick>
 800d87e:	4602      	mov	r2, r0
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	2b02      	cmp	r3, #2
 800d886:	d901      	bls.n	800d88c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d888:	2303      	movs	r3, #3
 800d88a:	e086      	b.n	800d99a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d88c:	4b45      	ldr	r3, [pc, #276]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1f0      	bne.n	800d87a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d898:	4b42      	ldr	r3, [pc, #264]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	051b      	lsls	r3, r3, #20
 800d8a6:	493f      	ldr	r1, [pc, #252]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	628b      	str	r3, [r1, #40]	; 0x28
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	025b      	lsls	r3, r3, #9
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	431a      	orrs	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	061b      	lsls	r3, r3, #24
 800d8d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d8dc:	4931      	ldr	r1, [pc, #196]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d8e2:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	492d      	ldr	r1, [pc, #180]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d8f4:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	4928      	ldr	r1, [pc, #160]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d902:	4313      	orrs	r3, r2
 800d904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d906:	4b27      	ldr	r3, [pc, #156]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	4a26      	ldr	r2, [pc, #152]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d90c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d912:	4b24      	ldr	r3, [pc, #144]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d916:	4b24      	ldr	r3, [pc, #144]	; (800d9a8 <RCCEx_PLL3_Config+0x160>)
 800d918:	4013      	ands	r3, r2
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	69d2      	ldr	r2, [r2, #28]
 800d91e:	00d2      	lsls	r2, r2, #3
 800d920:	4920      	ldr	r1, [pc, #128]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d922:	4313      	orrs	r3, r2
 800d924:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d926:	4b1f      	ldr	r3, [pc, #124]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d92c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d938:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	4a19      	ldr	r2, [pc, #100]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d93e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d942:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d944:	e00f      	b.n	800d966 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d106      	bne.n	800d95a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d94c:	4b15      	ldr	r3, [pc, #84]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	4a14      	ldr	r2, [pc, #80]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d956:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d958:	e005      	b.n	800d966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d95a:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	4a11      	ldr	r2, [pc, #68]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d966:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d96c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d972:	f7f6 fc59 	bl	8004228 <HAL_GetTick>
 800d976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d978:	e008      	b.n	800d98c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d97a:	f7f6 fc55 	bl	8004228 <HAL_GetTick>
 800d97e:	4602      	mov	r2, r0
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	2b02      	cmp	r3, #2
 800d986:	d901      	bls.n	800d98c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e006      	b.n	800d99a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <RCCEx_PLL3_Config+0x15c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0f0      	beq.n	800d97a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d998:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	58024400 	.word	0x58024400
 800d9a8:	ffff0007 	.word	0xffff0007

0800d9ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e049      	b.n	800da52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7f5 fee2 	bl	800379c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2202      	movs	r2, #2
 800d9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f000 f92e 	bl	800dc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da66:	2300      	movs	r3, #0
 800da68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da70:	2b01      	cmp	r3, #1
 800da72:	d101      	bne.n	800da78 <HAL_TIM_ConfigClockSource+0x1c>
 800da74:	2302      	movs	r3, #2
 800da76:	e0dc      	b.n	800dc32 <HAL_TIM_ConfigClockSource+0x1d6>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2202      	movs	r2, #2
 800da84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	4b6a      	ldr	r3, [pc, #424]	; (800dc3c <HAL_TIM_ConfigClockSource+0x1e0>)
 800da94:	4013      	ands	r3, r2
 800da96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a64      	ldr	r2, [pc, #400]	; (800dc40 <HAL_TIM_ConfigClockSource+0x1e4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	f000 80a9 	beq.w	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dab4:	4a62      	ldr	r2, [pc, #392]	; (800dc40 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	f200 80ae 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dabc:	4a61      	ldr	r2, [pc, #388]	; (800dc44 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	f000 80a1 	beq.w	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dac4:	4a5f      	ldr	r2, [pc, #380]	; (800dc44 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	f200 80a6 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dacc:	4a5e      	ldr	r2, [pc, #376]	; (800dc48 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	f000 8099 	beq.w	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dad4:	4a5c      	ldr	r2, [pc, #368]	; (800dc48 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	f200 809e 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dadc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dae0:	f000 8091 	beq.w	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800dae4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dae8:	f200 8096 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800daec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daf0:	f000 8089 	beq.w	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800daf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daf8:	f200 808e 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800dafc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db00:	d03e      	beq.n	800db80 <HAL_TIM_ConfigClockSource+0x124>
 800db02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db06:	f200 8087 	bhi.w	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db0e:	f000 8086 	beq.w	800dc1e <HAL_TIM_ConfigClockSource+0x1c2>
 800db12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db16:	d87f      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db18:	2b70      	cmp	r3, #112	; 0x70
 800db1a:	d01a      	beq.n	800db52 <HAL_TIM_ConfigClockSource+0xf6>
 800db1c:	2b70      	cmp	r3, #112	; 0x70
 800db1e:	d87b      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db20:	2b60      	cmp	r3, #96	; 0x60
 800db22:	d050      	beq.n	800dbc6 <HAL_TIM_ConfigClockSource+0x16a>
 800db24:	2b60      	cmp	r3, #96	; 0x60
 800db26:	d877      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db28:	2b50      	cmp	r3, #80	; 0x50
 800db2a:	d03c      	beq.n	800dba6 <HAL_TIM_ConfigClockSource+0x14a>
 800db2c:	2b50      	cmp	r3, #80	; 0x50
 800db2e:	d873      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db30:	2b40      	cmp	r3, #64	; 0x40
 800db32:	d058      	beq.n	800dbe6 <HAL_TIM_ConfigClockSource+0x18a>
 800db34:	2b40      	cmp	r3, #64	; 0x40
 800db36:	d86f      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db38:	2b30      	cmp	r3, #48	; 0x30
 800db3a:	d064      	beq.n	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800db3c:	2b30      	cmp	r3, #48	; 0x30
 800db3e:	d86b      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db40:	2b20      	cmp	r3, #32
 800db42:	d060      	beq.n	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800db44:	2b20      	cmp	r3, #32
 800db46:	d867      	bhi.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d05c      	beq.n	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800db4c:	2b10      	cmp	r3, #16
 800db4e:	d05a      	beq.n	800dc06 <HAL_TIM_ConfigClockSource+0x1aa>
 800db50:	e062      	b.n	800dc18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db62:	f000 f98b 	bl	800de7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	609a      	str	r2, [r3, #8]
      break;
 800db7e:	e04f      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db90:	f000 f974 	bl	800de7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689a      	ldr	r2, [r3, #8]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dba2:	609a      	str	r2, [r3, #8]
      break;
 800dba4:	e03c      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	f000 f8e4 	bl	800dd80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2150      	movs	r1, #80	; 0x50
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f93e 	bl	800de40 <TIM_ITRx_SetConfig>
      break;
 800dbc4:	e02c      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f000 f903 	bl	800ddde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2160      	movs	r1, #96	; 0x60
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 f92e 	bl	800de40 <TIM_ITRx_SetConfig>
      break;
 800dbe4:	e01c      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f000 f8c4 	bl	800dd80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2140      	movs	r1, #64	; 0x40
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f91e 	bl	800de40 <TIM_ITRx_SetConfig>
      break;
 800dc04:	e00c      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	4610      	mov	r0, r2
 800dc12:	f000 f915 	bl	800de40 <TIM_ITRx_SetConfig>
      break;
 800dc16:	e003      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc1c:	e000      	b.n	800dc20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	ffceff88 	.word	0xffceff88
 800dc40:	00100040 	.word	0x00100040
 800dc44:	00100030 	.word	0x00100030
 800dc48:	00100020 	.word	0x00100020

0800dc4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a40      	ldr	r2, [pc, #256]	; (800dd60 <TIM_Base_SetConfig+0x114>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d013      	beq.n	800dc8c <TIM_Base_SetConfig+0x40>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc6a:	d00f      	beq.n	800dc8c <TIM_Base_SetConfig+0x40>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a3d      	ldr	r2, [pc, #244]	; (800dd64 <TIM_Base_SetConfig+0x118>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d00b      	beq.n	800dc8c <TIM_Base_SetConfig+0x40>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a3c      	ldr	r2, [pc, #240]	; (800dd68 <TIM_Base_SetConfig+0x11c>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d007      	beq.n	800dc8c <TIM_Base_SetConfig+0x40>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a3b      	ldr	r2, [pc, #236]	; (800dd6c <TIM_Base_SetConfig+0x120>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d003      	beq.n	800dc8c <TIM_Base_SetConfig+0x40>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a3a      	ldr	r2, [pc, #232]	; (800dd70 <TIM_Base_SetConfig+0x124>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d108      	bne.n	800dc9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a2f      	ldr	r2, [pc, #188]	; (800dd60 <TIM_Base_SetConfig+0x114>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d01f      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcac:	d01b      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a2c      	ldr	r2, [pc, #176]	; (800dd64 <TIM_Base_SetConfig+0x118>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d017      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a2b      	ldr	r2, [pc, #172]	; (800dd68 <TIM_Base_SetConfig+0x11c>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d013      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a2a      	ldr	r2, [pc, #168]	; (800dd6c <TIM_Base_SetConfig+0x120>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d00f      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a29      	ldr	r2, [pc, #164]	; (800dd70 <TIM_Base_SetConfig+0x124>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d00b      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a28      	ldr	r2, [pc, #160]	; (800dd74 <TIM_Base_SetConfig+0x128>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d007      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a27      	ldr	r2, [pc, #156]	; (800dd78 <TIM_Base_SetConfig+0x12c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d003      	beq.n	800dce6 <TIM_Base_SetConfig+0x9a>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a26      	ldr	r2, [pc, #152]	; (800dd7c <TIM_Base_SetConfig+0x130>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d108      	bne.n	800dcf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a10      	ldr	r2, [pc, #64]	; (800dd60 <TIM_Base_SetConfig+0x114>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d00f      	beq.n	800dd44 <TIM_Base_SetConfig+0xf8>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a12      	ldr	r2, [pc, #72]	; (800dd70 <TIM_Base_SetConfig+0x124>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d00b      	beq.n	800dd44 <TIM_Base_SetConfig+0xf8>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a11      	ldr	r2, [pc, #68]	; (800dd74 <TIM_Base_SetConfig+0x128>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d007      	beq.n	800dd44 <TIM_Base_SetConfig+0xf8>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a10      	ldr	r2, [pc, #64]	; (800dd78 <TIM_Base_SetConfig+0x12c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d003      	beq.n	800dd44 <TIM_Base_SetConfig+0xf8>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a0f      	ldr	r2, [pc, #60]	; (800dd7c <TIM_Base_SetConfig+0x130>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d103      	bne.n	800dd4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	691a      	ldr	r2, [r3, #16]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	615a      	str	r2, [r3, #20]
}
 800dd52:	bf00      	nop
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	40010000 	.word	0x40010000
 800dd64:	40000400 	.word	0x40000400
 800dd68:	40000800 	.word	0x40000800
 800dd6c:	40000c00 	.word	0x40000c00
 800dd70:	40010400 	.word	0x40010400
 800dd74:	40014000 	.word	0x40014000
 800dd78:	40014400 	.word	0x40014400
 800dd7c:	40014800 	.word	0x40014800

0800dd80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b087      	sub	sp, #28
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a1b      	ldr	r3, [r3, #32]
 800dd90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6a1b      	ldr	r3, [r3, #32]
 800dd96:	f023 0201 	bic.w	r2, r3, #1
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f023 030a 	bic.w	r3, r3, #10
 800ddbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	621a      	str	r2, [r3, #32]
}
 800ddd2:	bf00      	nop
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b087      	sub	sp, #28
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	60f8      	str	r0, [r7, #12]
 800dde6:	60b9      	str	r1, [r7, #8]
 800dde8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	f023 0210 	bic.w	r2, r3, #16
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6a1b      	ldr	r3, [r3, #32]
 800de00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	031b      	lsls	r3, r3, #12
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	4313      	orrs	r3, r2
 800de12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	011b      	lsls	r3, r3, #4
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	4313      	orrs	r3, r2
 800de24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	621a      	str	r2, [r3, #32]
}
 800de32:	bf00      	nop
 800de34:	371c      	adds	r7, #28
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
	...

0800de40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	4b09      	ldr	r3, [pc, #36]	; (800de78 <TIM_ITRx_SetConfig+0x38>)
 800de54:	4013      	ands	r3, r2
 800de56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	f043 0307 	orr.w	r3, r3, #7
 800de62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	609a      	str	r2, [r3, #8]
}
 800de6a:	bf00      	nop
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	ffcfff8f 	.word	0xffcfff8f

0800de7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	021a      	lsls	r2, r3, #8
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	431a      	orrs	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	697a      	ldr	r2, [r7, #20]
 800deae:	609a      	str	r2, [r3, #8]
}
 800deb0:	bf00      	nop
 800deb2:	371c      	adds	r7, #28
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800decc:	2b01      	cmp	r3, #1
 800dece:	d101      	bne.n	800ded4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ded0:	2302      	movs	r3, #2
 800ded2:	e06d      	b.n	800dfb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2202      	movs	r2, #2
 800dee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a30      	ldr	r2, [pc, #192]	; (800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d004      	beq.n	800df08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a2f      	ldr	r2, [pc, #188]	; (800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d108      	bne.n	800df1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4313      	orrs	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a20      	ldr	r2, [pc, #128]	; (800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d022      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df46:	d01d      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a1d      	ldr	r2, [pc, #116]	; (800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d018      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a1c      	ldr	r2, [pc, #112]	; (800dfc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d013      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a1a      	ldr	r2, [pc, #104]	; (800dfcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d00e      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a15      	ldr	r2, [pc, #84]	; (800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d009      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a16      	ldr	r2, [pc, #88]	; (800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d004      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a15      	ldr	r2, [pc, #84]	; (800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d10c      	bne.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	4313      	orrs	r3, r2
 800df94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	40010000 	.word	0x40010000
 800dfc0:	40010400 	.word	0x40010400
 800dfc4:	40000400 	.word	0x40000400
 800dfc8:	40000800 	.word	0x40000800
 800dfcc:	40000c00 	.word	0x40000c00
 800dfd0:	40001800 	.word	0x40001800
 800dfd4:	40014000 	.word	0x40014000

0800dfd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e042      	b.n	800e070 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7f5 fc33 	bl	8003868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2224      	movs	r2, #36	; 0x24
 800e006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f022 0201 	bic.w	r2, r2, #1
 800e018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f8ba 	bl	800e194 <UART_SetConfig>
 800e020:	4603      	mov	r3, r0
 800e022:	2b01      	cmp	r3, #1
 800e024:	d101      	bne.n	800e02a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e022      	b.n	800e070 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fe16 	bl	800ec64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	689a      	ldr	r2, [r3, #8]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f042 0201 	orr.w	r2, r2, #1
 800e066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 fe9d 	bl	800eda8 <UART_CheckIdleState>
 800e06e:	4603      	mov	r3, r0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08a      	sub	sp, #40	; 0x28
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	4613      	mov	r3, r2
 800e086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e08e:	2b20      	cmp	r3, #32
 800e090:	d17b      	bne.n	800e18a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <HAL_UART_Transmit+0x26>
 800e098:	88fb      	ldrh	r3, [r7, #6]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e074      	b.n	800e18c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2221      	movs	r2, #33	; 0x21
 800e0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e0b2:	f7f6 f8b9 	bl	8004228 <HAL_GetTick>
 800e0b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	88fa      	ldrh	r2, [r7, #6]
 800e0bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	88fa      	ldrh	r2, [r7, #6]
 800e0c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0d0:	d108      	bne.n	800e0e4 <HAL_UART_Transmit+0x6c>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d104      	bne.n	800e0e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	61bb      	str	r3, [r7, #24]
 800e0e2:	e003      	b.n	800e0ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e0ec:	e030      	b.n	800e150 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2180      	movs	r1, #128	; 0x80
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f000 feff 	bl	800eefc <UART_WaitOnFlagUntilTimeout>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d005      	beq.n	800e110 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2220      	movs	r2, #32
 800e108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e10c:	2303      	movs	r3, #3
 800e10e:	e03d      	b.n	800e18c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10b      	bne.n	800e12e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	461a      	mov	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e124:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	3302      	adds	r3, #2
 800e12a:	61bb      	str	r3, [r7, #24]
 800e12c:	e007      	b.n	800e13e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	781a      	ldrb	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	3301      	adds	r3, #1
 800e13c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e144:	b29b      	uxth	r3, r3
 800e146:	3b01      	subs	r3, #1
 800e148:	b29a      	uxth	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e156:	b29b      	uxth	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1c8      	bne.n	800e0ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	2200      	movs	r2, #0
 800e164:	2140      	movs	r1, #64	; 0x40
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 fec8 	bl	800eefc <UART_WaitOnFlagUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d005      	beq.n	800e17e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2220      	movs	r2, #32
 800e176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e17a:	2303      	movs	r3, #3
 800e17c:	e006      	b.n	800e18c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2220      	movs	r2, #32
 800e182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	e000      	b.n	800e18c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e18a:	2302      	movs	r3, #2
  }
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3720      	adds	r7, #32
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e198:	b092      	sub	sp, #72	; 0x48
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	689a      	ldr	r2, [r3, #8]
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	431a      	orrs	r2, r3
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	69db      	ldr	r3, [r3, #28]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	4bbe      	ldr	r3, [pc, #760]	; (800e4bc <UART_SetConfig+0x328>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	6812      	ldr	r2, [r2, #0]
 800e1ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1cc:	430b      	orrs	r3, r1
 800e1ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	68da      	ldr	r2, [r3, #12]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	430a      	orrs	r2, r1
 800e1e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4ab3      	ldr	r2, [pc, #716]	; (800e4c0 <UART_SetConfig+0x32c>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d004      	beq.n	800e200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	689a      	ldr	r2, [r3, #8]
 800e206:	4baf      	ldr	r3, [pc, #700]	; (800e4c4 <UART_SetConfig+0x330>)
 800e208:	4013      	ands	r3, r2
 800e20a:	697a      	ldr	r2, [r7, #20]
 800e20c:	6812      	ldr	r2, [r2, #0]
 800e20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e210:	430b      	orrs	r3, r1
 800e212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21a:	f023 010f 	bic.w	r1, r3, #15
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	430a      	orrs	r2, r1
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4aa6      	ldr	r2, [pc, #664]	; (800e4c8 <UART_SetConfig+0x334>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d177      	bne.n	800e324 <UART_SetConfig+0x190>
 800e234:	4ba5      	ldr	r3, [pc, #660]	; (800e4cc <UART_SetConfig+0x338>)
 800e236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e23c:	2b28      	cmp	r3, #40	; 0x28
 800e23e:	d86d      	bhi.n	800e31c <UART_SetConfig+0x188>
 800e240:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <UART_SetConfig+0xb4>)
 800e242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e246:	bf00      	nop
 800e248:	0800e2ed 	.word	0x0800e2ed
 800e24c:	0800e31d 	.word	0x0800e31d
 800e250:	0800e31d 	.word	0x0800e31d
 800e254:	0800e31d 	.word	0x0800e31d
 800e258:	0800e31d 	.word	0x0800e31d
 800e25c:	0800e31d 	.word	0x0800e31d
 800e260:	0800e31d 	.word	0x0800e31d
 800e264:	0800e31d 	.word	0x0800e31d
 800e268:	0800e2f5 	.word	0x0800e2f5
 800e26c:	0800e31d 	.word	0x0800e31d
 800e270:	0800e31d 	.word	0x0800e31d
 800e274:	0800e31d 	.word	0x0800e31d
 800e278:	0800e31d 	.word	0x0800e31d
 800e27c:	0800e31d 	.word	0x0800e31d
 800e280:	0800e31d 	.word	0x0800e31d
 800e284:	0800e31d 	.word	0x0800e31d
 800e288:	0800e2fd 	.word	0x0800e2fd
 800e28c:	0800e31d 	.word	0x0800e31d
 800e290:	0800e31d 	.word	0x0800e31d
 800e294:	0800e31d 	.word	0x0800e31d
 800e298:	0800e31d 	.word	0x0800e31d
 800e29c:	0800e31d 	.word	0x0800e31d
 800e2a0:	0800e31d 	.word	0x0800e31d
 800e2a4:	0800e31d 	.word	0x0800e31d
 800e2a8:	0800e305 	.word	0x0800e305
 800e2ac:	0800e31d 	.word	0x0800e31d
 800e2b0:	0800e31d 	.word	0x0800e31d
 800e2b4:	0800e31d 	.word	0x0800e31d
 800e2b8:	0800e31d 	.word	0x0800e31d
 800e2bc:	0800e31d 	.word	0x0800e31d
 800e2c0:	0800e31d 	.word	0x0800e31d
 800e2c4:	0800e31d 	.word	0x0800e31d
 800e2c8:	0800e30d 	.word	0x0800e30d
 800e2cc:	0800e31d 	.word	0x0800e31d
 800e2d0:	0800e31d 	.word	0x0800e31d
 800e2d4:	0800e31d 	.word	0x0800e31d
 800e2d8:	0800e31d 	.word	0x0800e31d
 800e2dc:	0800e31d 	.word	0x0800e31d
 800e2e0:	0800e31d 	.word	0x0800e31d
 800e2e4:	0800e31d 	.word	0x0800e31d
 800e2e8:	0800e315 	.word	0x0800e315
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e222      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e2f4:	2304      	movs	r3, #4
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e21e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e2fc:	2308      	movs	r3, #8
 800e2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e302:	e21a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e304:	2310      	movs	r3, #16
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e216      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e30c:	2320      	movs	r3, #32
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e212      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e314:	2340      	movs	r3, #64	; 0x40
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e20e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e31c:	2380      	movs	r3, #128	; 0x80
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e20a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a69      	ldr	r2, [pc, #420]	; (800e4d0 <UART_SetConfig+0x33c>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d130      	bne.n	800e390 <UART_SetConfig+0x1fc>
 800e32e:	4b67      	ldr	r3, [pc, #412]	; (800e4cc <UART_SetConfig+0x338>)
 800e330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	2b05      	cmp	r3, #5
 800e338:	d826      	bhi.n	800e388 <UART_SetConfig+0x1f4>
 800e33a:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <UART_SetConfig+0x1ac>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e359 	.word	0x0800e359
 800e344:	0800e361 	.word	0x0800e361
 800e348:	0800e369 	.word	0x0800e369
 800e34c:	0800e371 	.word	0x0800e371
 800e350:	0800e379 	.word	0x0800e379
 800e354:	0800e381 	.word	0x0800e381
 800e358:	2300      	movs	r3, #0
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e1ec      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e360:	2304      	movs	r3, #4
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e1e8      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e368:	2308      	movs	r3, #8
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e1e4      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e370:	2310      	movs	r3, #16
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e1e0      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e378:	2320      	movs	r3, #32
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e1dc      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e380:	2340      	movs	r3, #64	; 0x40
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e1d8      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e388:	2380      	movs	r3, #128	; 0x80
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e1d4      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a4f      	ldr	r2, [pc, #316]	; (800e4d4 <UART_SetConfig+0x340>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d130      	bne.n	800e3fc <UART_SetConfig+0x268>
 800e39a:	4b4c      	ldr	r3, [pc, #304]	; (800e4cc <UART_SetConfig+0x338>)
 800e39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e39e:	f003 0307 	and.w	r3, r3, #7
 800e3a2:	2b05      	cmp	r3, #5
 800e3a4:	d826      	bhi.n	800e3f4 <UART_SetConfig+0x260>
 800e3a6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ac <UART_SetConfig+0x218>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e3c5 	.word	0x0800e3c5
 800e3b0:	0800e3cd 	.word	0x0800e3cd
 800e3b4:	0800e3d5 	.word	0x0800e3d5
 800e3b8:	0800e3dd 	.word	0x0800e3dd
 800e3bc:	0800e3e5 	.word	0x0800e3e5
 800e3c0:	0800e3ed 	.word	0x0800e3ed
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e1b6      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3cc:	2304      	movs	r3, #4
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e1b2      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3d4:	2308      	movs	r3, #8
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e1ae      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3dc:	2310      	movs	r3, #16
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e1aa      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3e4:	2320      	movs	r3, #32
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e1a6      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3ec:	2340      	movs	r3, #64	; 0x40
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e1a2      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3f4:	2380      	movs	r3, #128	; 0x80
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e19e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a35      	ldr	r2, [pc, #212]	; (800e4d8 <UART_SetConfig+0x344>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d130      	bne.n	800e468 <UART_SetConfig+0x2d4>
 800e406:	4b31      	ldr	r3, [pc, #196]	; (800e4cc <UART_SetConfig+0x338>)
 800e408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e40a:	f003 0307 	and.w	r3, r3, #7
 800e40e:	2b05      	cmp	r3, #5
 800e410:	d826      	bhi.n	800e460 <UART_SetConfig+0x2cc>
 800e412:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <UART_SetConfig+0x284>)
 800e414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e418:	0800e431 	.word	0x0800e431
 800e41c:	0800e439 	.word	0x0800e439
 800e420:	0800e441 	.word	0x0800e441
 800e424:	0800e449 	.word	0x0800e449
 800e428:	0800e451 	.word	0x0800e451
 800e42c:	0800e459 	.word	0x0800e459
 800e430:	2300      	movs	r3, #0
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e180      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e438:	2304      	movs	r3, #4
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e17c      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e440:	2308      	movs	r3, #8
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e178      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e448:	2310      	movs	r3, #16
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e174      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e450:	2320      	movs	r3, #32
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e170      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e458:	2340      	movs	r3, #64	; 0x40
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e16c      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e460:	2380      	movs	r3, #128	; 0x80
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e466:	e168      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a1b      	ldr	r2, [pc, #108]	; (800e4dc <UART_SetConfig+0x348>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d142      	bne.n	800e4f8 <UART_SetConfig+0x364>
 800e472:	4b16      	ldr	r3, [pc, #88]	; (800e4cc <UART_SetConfig+0x338>)
 800e474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e476:	f003 0307 	and.w	r3, r3, #7
 800e47a:	2b05      	cmp	r3, #5
 800e47c:	d838      	bhi.n	800e4f0 <UART_SetConfig+0x35c>
 800e47e:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <UART_SetConfig+0x2f0>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e49d 	.word	0x0800e49d
 800e488:	0800e4a5 	.word	0x0800e4a5
 800e48c:	0800e4ad 	.word	0x0800e4ad
 800e490:	0800e4b5 	.word	0x0800e4b5
 800e494:	0800e4e1 	.word	0x0800e4e1
 800e498:	0800e4e9 	.word	0x0800e4e9
 800e49c:	2300      	movs	r3, #0
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e14a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4a4:	2304      	movs	r3, #4
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e146      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e142      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4b4:	2310      	movs	r3, #16
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e13e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4bc:	cfff69f3 	.word	0xcfff69f3
 800e4c0:	58000c00 	.word	0x58000c00
 800e4c4:	11fff4ff 	.word	0x11fff4ff
 800e4c8:	40011000 	.word	0x40011000
 800e4cc:	58024400 	.word	0x58024400
 800e4d0:	40004400 	.word	0x40004400
 800e4d4:	40004800 	.word	0x40004800
 800e4d8:	40004c00 	.word	0x40004c00
 800e4dc:	40005000 	.word	0x40005000
 800e4e0:	2320      	movs	r3, #32
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e128      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4e8:	2340      	movs	r3, #64	; 0x40
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e124      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4f0:	2380      	movs	r3, #128	; 0x80
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e120      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4acb      	ldr	r2, [pc, #812]	; (800e82c <UART_SetConfig+0x698>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d176      	bne.n	800e5f0 <UART_SetConfig+0x45c>
 800e502:	4bcb      	ldr	r3, [pc, #812]	; (800e830 <UART_SetConfig+0x69c>)
 800e504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e50a:	2b28      	cmp	r3, #40	; 0x28
 800e50c:	d86c      	bhi.n	800e5e8 <UART_SetConfig+0x454>
 800e50e:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <UART_SetConfig+0x380>)
 800e510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e514:	0800e5b9 	.word	0x0800e5b9
 800e518:	0800e5e9 	.word	0x0800e5e9
 800e51c:	0800e5e9 	.word	0x0800e5e9
 800e520:	0800e5e9 	.word	0x0800e5e9
 800e524:	0800e5e9 	.word	0x0800e5e9
 800e528:	0800e5e9 	.word	0x0800e5e9
 800e52c:	0800e5e9 	.word	0x0800e5e9
 800e530:	0800e5e9 	.word	0x0800e5e9
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5e9 	.word	0x0800e5e9
 800e53c:	0800e5e9 	.word	0x0800e5e9
 800e540:	0800e5e9 	.word	0x0800e5e9
 800e544:	0800e5e9 	.word	0x0800e5e9
 800e548:	0800e5e9 	.word	0x0800e5e9
 800e54c:	0800e5e9 	.word	0x0800e5e9
 800e550:	0800e5e9 	.word	0x0800e5e9
 800e554:	0800e5c9 	.word	0x0800e5c9
 800e558:	0800e5e9 	.word	0x0800e5e9
 800e55c:	0800e5e9 	.word	0x0800e5e9
 800e560:	0800e5e9 	.word	0x0800e5e9
 800e564:	0800e5e9 	.word	0x0800e5e9
 800e568:	0800e5e9 	.word	0x0800e5e9
 800e56c:	0800e5e9 	.word	0x0800e5e9
 800e570:	0800e5e9 	.word	0x0800e5e9
 800e574:	0800e5d1 	.word	0x0800e5d1
 800e578:	0800e5e9 	.word	0x0800e5e9
 800e57c:	0800e5e9 	.word	0x0800e5e9
 800e580:	0800e5e9 	.word	0x0800e5e9
 800e584:	0800e5e9 	.word	0x0800e5e9
 800e588:	0800e5e9 	.word	0x0800e5e9
 800e58c:	0800e5e9 	.word	0x0800e5e9
 800e590:	0800e5e9 	.word	0x0800e5e9
 800e594:	0800e5d9 	.word	0x0800e5d9
 800e598:	0800e5e9 	.word	0x0800e5e9
 800e59c:	0800e5e9 	.word	0x0800e5e9
 800e5a0:	0800e5e9 	.word	0x0800e5e9
 800e5a4:	0800e5e9 	.word	0x0800e5e9
 800e5a8:	0800e5e9 	.word	0x0800e5e9
 800e5ac:	0800e5e9 	.word	0x0800e5e9
 800e5b0:	0800e5e9 	.word	0x0800e5e9
 800e5b4:	0800e5e1 	.word	0x0800e5e1
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e0bc      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e0b8      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5c8:	2308      	movs	r3, #8
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e0b4      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5d0:	2310      	movs	r3, #16
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e0b0      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5d8:	2320      	movs	r3, #32
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e0ac      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5e0:	2340      	movs	r3, #64	; 0x40
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e0a8      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5e8:	2380      	movs	r3, #128	; 0x80
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e0a4      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a8f      	ldr	r2, [pc, #572]	; (800e834 <UART_SetConfig+0x6a0>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d130      	bne.n	800e65c <UART_SetConfig+0x4c8>
 800e5fa:	4b8d      	ldr	r3, [pc, #564]	; (800e830 <UART_SetConfig+0x69c>)
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fe:	f003 0307 	and.w	r3, r3, #7
 800e602:	2b05      	cmp	r3, #5
 800e604:	d826      	bhi.n	800e654 <UART_SetConfig+0x4c0>
 800e606:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <UART_SetConfig+0x478>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e625 	.word	0x0800e625
 800e610:	0800e62d 	.word	0x0800e62d
 800e614:	0800e635 	.word	0x0800e635
 800e618:	0800e63d 	.word	0x0800e63d
 800e61c:	0800e645 	.word	0x0800e645
 800e620:	0800e64d 	.word	0x0800e64d
 800e624:	2300      	movs	r3, #0
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e086      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e62c:	2304      	movs	r3, #4
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e082      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e634:	2308      	movs	r3, #8
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e07e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e63c:	2310      	movs	r3, #16
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e07a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e644:	2320      	movs	r3, #32
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e076      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e64c:	2340      	movs	r3, #64	; 0x40
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e072      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e654:	2380      	movs	r3, #128	; 0x80
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e06e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a75      	ldr	r2, [pc, #468]	; (800e838 <UART_SetConfig+0x6a4>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d130      	bne.n	800e6c8 <UART_SetConfig+0x534>
 800e666:	4b72      	ldr	r3, [pc, #456]	; (800e830 <UART_SetConfig+0x69c>)
 800e668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e66a:	f003 0307 	and.w	r3, r3, #7
 800e66e:	2b05      	cmp	r3, #5
 800e670:	d826      	bhi.n	800e6c0 <UART_SetConfig+0x52c>
 800e672:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <UART_SetConfig+0x4e4>)
 800e674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e678:	0800e691 	.word	0x0800e691
 800e67c:	0800e699 	.word	0x0800e699
 800e680:	0800e6a1 	.word	0x0800e6a1
 800e684:	0800e6a9 	.word	0x0800e6a9
 800e688:	0800e6b1 	.word	0x0800e6b1
 800e68c:	0800e6b9 	.word	0x0800e6b9
 800e690:	2300      	movs	r3, #0
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e050      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e698:	2304      	movs	r3, #4
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e04c      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a6:	e048      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6a8:	2310      	movs	r3, #16
 800e6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ae:	e044      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6b0:	2320      	movs	r3, #32
 800e6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b6:	e040      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6b8:	2340      	movs	r3, #64	; 0x40
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6be:	e03c      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6c0:	2380      	movs	r3, #128	; 0x80
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c6:	e038      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a5b      	ldr	r2, [pc, #364]	; (800e83c <UART_SetConfig+0x6a8>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d130      	bne.n	800e734 <UART_SetConfig+0x5a0>
 800e6d2:	4b57      	ldr	r3, [pc, #348]	; (800e830 <UART_SetConfig+0x69c>)
 800e6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6d6:	f003 0307 	and.w	r3, r3, #7
 800e6da:	2b05      	cmp	r3, #5
 800e6dc:	d826      	bhi.n	800e72c <UART_SetConfig+0x598>
 800e6de:	a201      	add	r2, pc, #4	; (adr r2, 800e6e4 <UART_SetConfig+0x550>)
 800e6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e4:	0800e6fd 	.word	0x0800e6fd
 800e6e8:	0800e705 	.word	0x0800e705
 800e6ec:	0800e70d 	.word	0x0800e70d
 800e6f0:	0800e715 	.word	0x0800e715
 800e6f4:	0800e71d 	.word	0x0800e71d
 800e6f8:	0800e725 	.word	0x0800e725
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e01a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e704:	2304      	movs	r3, #4
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e016      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e70c:	2308      	movs	r3, #8
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e012      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e714:	2310      	movs	r3, #16
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71a:	e00e      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e71c:	2320      	movs	r3, #32
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e722:	e00a      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e724:	2340      	movs	r3, #64	; 0x40
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72a:	e006      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e72c:	2380      	movs	r3, #128	; 0x80
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e732:	e002      	b.n	800e73a <UART_SetConfig+0x5a6>
 800e734:	2380      	movs	r3, #128	; 0x80
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a3f      	ldr	r2, [pc, #252]	; (800e83c <UART_SetConfig+0x6a8>)
 800e740:	4293      	cmp	r3, r2
 800e742:	f040 80f8 	bne.w	800e936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e74a:	2b20      	cmp	r3, #32
 800e74c:	dc46      	bgt.n	800e7dc <UART_SetConfig+0x648>
 800e74e:	2b02      	cmp	r3, #2
 800e750:	f2c0 8082 	blt.w	800e858 <UART_SetConfig+0x6c4>
 800e754:	3b02      	subs	r3, #2
 800e756:	2b1e      	cmp	r3, #30
 800e758:	d87e      	bhi.n	800e858 <UART_SetConfig+0x6c4>
 800e75a:	a201      	add	r2, pc, #4	; (adr r2, 800e760 <UART_SetConfig+0x5cc>)
 800e75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e760:	0800e7e3 	.word	0x0800e7e3
 800e764:	0800e859 	.word	0x0800e859
 800e768:	0800e7eb 	.word	0x0800e7eb
 800e76c:	0800e859 	.word	0x0800e859
 800e770:	0800e859 	.word	0x0800e859
 800e774:	0800e859 	.word	0x0800e859
 800e778:	0800e7fb 	.word	0x0800e7fb
 800e77c:	0800e859 	.word	0x0800e859
 800e780:	0800e859 	.word	0x0800e859
 800e784:	0800e859 	.word	0x0800e859
 800e788:	0800e859 	.word	0x0800e859
 800e78c:	0800e859 	.word	0x0800e859
 800e790:	0800e859 	.word	0x0800e859
 800e794:	0800e859 	.word	0x0800e859
 800e798:	0800e80b 	.word	0x0800e80b
 800e79c:	0800e859 	.word	0x0800e859
 800e7a0:	0800e859 	.word	0x0800e859
 800e7a4:	0800e859 	.word	0x0800e859
 800e7a8:	0800e859 	.word	0x0800e859
 800e7ac:	0800e859 	.word	0x0800e859
 800e7b0:	0800e859 	.word	0x0800e859
 800e7b4:	0800e859 	.word	0x0800e859
 800e7b8:	0800e859 	.word	0x0800e859
 800e7bc:	0800e859 	.word	0x0800e859
 800e7c0:	0800e859 	.word	0x0800e859
 800e7c4:	0800e859 	.word	0x0800e859
 800e7c8:	0800e859 	.word	0x0800e859
 800e7cc:	0800e859 	.word	0x0800e859
 800e7d0:	0800e859 	.word	0x0800e859
 800e7d4:	0800e859 	.word	0x0800e859
 800e7d8:	0800e84b 	.word	0x0800e84b
 800e7dc:	2b40      	cmp	r3, #64	; 0x40
 800e7de:	d037      	beq.n	800e850 <UART_SetConfig+0x6bc>
 800e7e0:	e03a      	b.n	800e858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e7e2:	f7fe fb19 	bl	800ce18 <HAL_RCCEx_GetD3PCLK1Freq>
 800e7e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7e8:	e03c      	b.n	800e864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fb28 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7f8:	e034      	b.n	800e864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7fa:	f107 0318 	add.w	r3, r7, #24
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fe fc74 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e808:	e02c      	b.n	800e864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e80a:	4b09      	ldr	r3, [pc, #36]	; (800e830 <UART_SetConfig+0x69c>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 0320 	and.w	r3, r3, #32
 800e812:	2b00      	cmp	r3, #0
 800e814:	d016      	beq.n	800e844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e816:	4b06      	ldr	r3, [pc, #24]	; (800e830 <UART_SetConfig+0x69c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	08db      	lsrs	r3, r3, #3
 800e81c:	f003 0303 	and.w	r3, r3, #3
 800e820:	4a07      	ldr	r2, [pc, #28]	; (800e840 <UART_SetConfig+0x6ac>)
 800e822:	fa22 f303 	lsr.w	r3, r2, r3
 800e826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e828:	e01c      	b.n	800e864 <UART_SetConfig+0x6d0>
 800e82a:	bf00      	nop
 800e82c:	40011400 	.word	0x40011400
 800e830:	58024400 	.word	0x58024400
 800e834:	40007800 	.word	0x40007800
 800e838:	40007c00 	.word	0x40007c00
 800e83c:	58000c00 	.word	0x58000c00
 800e840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e844:	4b9d      	ldr	r3, [pc, #628]	; (800eabc <UART_SetConfig+0x928>)
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e848:	e00c      	b.n	800e864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e84a:	4b9d      	ldr	r3, [pc, #628]	; (800eac0 <UART_SetConfig+0x92c>)
 800e84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84e:	e009      	b.n	800e864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e856:	e005      	b.n	800e864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e858:	2300      	movs	r3, #0
 800e85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 81de 	beq.w	800ec28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e870:	4a94      	ldr	r2, [pc, #592]	; (800eac4 <UART_SetConfig+0x930>)
 800e872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e876:	461a      	mov	r2, r3
 800e878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	4613      	mov	r3, r2
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d305      	bcc.n	800e89c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e898:	429a      	cmp	r2, r3
 800e89a:	d903      	bls.n	800e8a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8a2:	e1c1      	b.n	800ec28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	60bb      	str	r3, [r7, #8]
 800e8aa:	60fa      	str	r2, [r7, #12]
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	4a84      	ldr	r2, [pc, #528]	; (800eac4 <UART_SetConfig+0x930>)
 800e8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	603b      	str	r3, [r7, #0]
 800e8bc:	607a      	str	r2, [r7, #4]
 800e8be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8c6:	f7f3 fbeb 	bl	80020a0 <__aeabi_uldivmod>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	f04f 0200 	mov.w	r2, #0
 800e8d6:	f04f 0300 	mov.w	r3, #0
 800e8da:	020b      	lsls	r3, r1, #8
 800e8dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8e0:	0202      	lsls	r2, r0, #8
 800e8e2:	6979      	ldr	r1, [r7, #20]
 800e8e4:	6849      	ldr	r1, [r1, #4]
 800e8e6:	0849      	lsrs	r1, r1, #1
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	eb12 0804 	adds.w	r8, r2, r4
 800e8f2:	eb43 0905 	adc.w	r9, r3, r5
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	469a      	mov	sl, r3
 800e8fe:	4693      	mov	fp, r2
 800e900:	4652      	mov	r2, sl
 800e902:	465b      	mov	r3, fp
 800e904:	4640      	mov	r0, r8
 800e906:	4649      	mov	r1, r9
 800e908:	f7f3 fbca 	bl	80020a0 <__aeabi_uldivmod>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4613      	mov	r3, r2
 800e912:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e91a:	d308      	bcc.n	800e92e <UART_SetConfig+0x79a>
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e922:	d204      	bcs.n	800e92e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e92a:	60da      	str	r2, [r3, #12]
 800e92c:	e17c      	b.n	800ec28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e934:	e178      	b.n	800ec28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e93e:	f040 80c5 	bne.w	800eacc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e946:	2b20      	cmp	r3, #32
 800e948:	dc48      	bgt.n	800e9dc <UART_SetConfig+0x848>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	db7b      	blt.n	800ea46 <UART_SetConfig+0x8b2>
 800e94e:	2b20      	cmp	r3, #32
 800e950:	d879      	bhi.n	800ea46 <UART_SetConfig+0x8b2>
 800e952:	a201      	add	r2, pc, #4	; (adr r2, 800e958 <UART_SetConfig+0x7c4>)
 800e954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e958:	0800e9e3 	.word	0x0800e9e3
 800e95c:	0800e9eb 	.word	0x0800e9eb
 800e960:	0800ea47 	.word	0x0800ea47
 800e964:	0800ea47 	.word	0x0800ea47
 800e968:	0800e9f3 	.word	0x0800e9f3
 800e96c:	0800ea47 	.word	0x0800ea47
 800e970:	0800ea47 	.word	0x0800ea47
 800e974:	0800ea47 	.word	0x0800ea47
 800e978:	0800ea03 	.word	0x0800ea03
 800e97c:	0800ea47 	.word	0x0800ea47
 800e980:	0800ea47 	.word	0x0800ea47
 800e984:	0800ea47 	.word	0x0800ea47
 800e988:	0800ea47 	.word	0x0800ea47
 800e98c:	0800ea47 	.word	0x0800ea47
 800e990:	0800ea47 	.word	0x0800ea47
 800e994:	0800ea47 	.word	0x0800ea47
 800e998:	0800ea13 	.word	0x0800ea13
 800e99c:	0800ea47 	.word	0x0800ea47
 800e9a0:	0800ea47 	.word	0x0800ea47
 800e9a4:	0800ea47 	.word	0x0800ea47
 800e9a8:	0800ea47 	.word	0x0800ea47
 800e9ac:	0800ea47 	.word	0x0800ea47
 800e9b0:	0800ea47 	.word	0x0800ea47
 800e9b4:	0800ea47 	.word	0x0800ea47
 800e9b8:	0800ea47 	.word	0x0800ea47
 800e9bc:	0800ea47 	.word	0x0800ea47
 800e9c0:	0800ea47 	.word	0x0800ea47
 800e9c4:	0800ea47 	.word	0x0800ea47
 800e9c8:	0800ea47 	.word	0x0800ea47
 800e9cc:	0800ea47 	.word	0x0800ea47
 800e9d0:	0800ea47 	.word	0x0800ea47
 800e9d4:	0800ea47 	.word	0x0800ea47
 800e9d8:	0800ea39 	.word	0x0800ea39
 800e9dc:	2b40      	cmp	r3, #64	; 0x40
 800e9de:	d02e      	beq.n	800ea3e <UART_SetConfig+0x8aa>
 800e9e0:	e031      	b.n	800ea46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9e2:	f7fc fa47 	bl	800ae74 <HAL_RCC_GetPCLK1Freq>
 800e9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9e8:	e033      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9ea:	f7fc fa59 	bl	800aea0 <HAL_RCC_GetPCLK2Freq>
 800e9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9f0:	e02f      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fa24 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea00:	e027      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea02:	f107 0318 	add.w	r3, r7, #24
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fe fb70 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea0c:	69fb      	ldr	r3, [r7, #28]
 800ea0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea10:	e01f      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea12:	4b2d      	ldr	r3, [pc, #180]	; (800eac8 <UART_SetConfig+0x934>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f003 0320 	and.w	r3, r3, #32
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d009      	beq.n	800ea32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea1e:	4b2a      	ldr	r3, [pc, #168]	; (800eac8 <UART_SetConfig+0x934>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	08db      	lsrs	r3, r3, #3
 800ea24:	f003 0303 	and.w	r3, r3, #3
 800ea28:	4a24      	ldr	r2, [pc, #144]	; (800eabc <UART_SetConfig+0x928>)
 800ea2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea30:	e00f      	b.n	800ea52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea32:	4b22      	ldr	r3, [pc, #136]	; (800eabc <UART_SetConfig+0x928>)
 800ea34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea36:	e00c      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea38:	4b21      	ldr	r3, [pc, #132]	; (800eac0 <UART_SetConfig+0x92c>)
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea3c:	e009      	b.n	800ea52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea44:	e005      	b.n	800ea52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea46:	2300      	movs	r3, #0
 800ea48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 80e7 	beq.w	800ec28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5e:	4a19      	ldr	r2, [pc, #100]	; (800eac4 <UART_SetConfig+0x930>)
 800ea60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea64:	461a      	mov	r2, r3
 800ea66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea6c:	005a      	lsls	r2, r3, #1
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	085b      	lsrs	r3, r3, #1
 800ea74:	441a      	add	r2, r3
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	2b0f      	cmp	r3, #15
 800ea84:	d916      	bls.n	800eab4 <UART_SetConfig+0x920>
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea8c:	d212      	bcs.n	800eab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	f023 030f 	bic.w	r3, r3, #15
 800ea96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9a:	085b      	lsrs	r3, r3, #1
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eab0:	60da      	str	r2, [r3, #12]
 800eab2:	e0b9      	b.n	800ec28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eaba:	e0b5      	b.n	800ec28 <UART_SetConfig+0xa94>
 800eabc:	03d09000 	.word	0x03d09000
 800eac0:	003d0900 	.word	0x003d0900
 800eac4:	08020c58 	.word	0x08020c58
 800eac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eacc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ead0:	2b20      	cmp	r3, #32
 800ead2:	dc49      	bgt.n	800eb68 <UART_SetConfig+0x9d4>
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	db7c      	blt.n	800ebd2 <UART_SetConfig+0xa3e>
 800ead8:	2b20      	cmp	r3, #32
 800eada:	d87a      	bhi.n	800ebd2 <UART_SetConfig+0xa3e>
 800eadc:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0x950>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eb6f 	.word	0x0800eb6f
 800eae8:	0800eb77 	.word	0x0800eb77
 800eaec:	0800ebd3 	.word	0x0800ebd3
 800eaf0:	0800ebd3 	.word	0x0800ebd3
 800eaf4:	0800eb7f 	.word	0x0800eb7f
 800eaf8:	0800ebd3 	.word	0x0800ebd3
 800eafc:	0800ebd3 	.word	0x0800ebd3
 800eb00:	0800ebd3 	.word	0x0800ebd3
 800eb04:	0800eb8f 	.word	0x0800eb8f
 800eb08:	0800ebd3 	.word	0x0800ebd3
 800eb0c:	0800ebd3 	.word	0x0800ebd3
 800eb10:	0800ebd3 	.word	0x0800ebd3
 800eb14:	0800ebd3 	.word	0x0800ebd3
 800eb18:	0800ebd3 	.word	0x0800ebd3
 800eb1c:	0800ebd3 	.word	0x0800ebd3
 800eb20:	0800ebd3 	.word	0x0800ebd3
 800eb24:	0800eb9f 	.word	0x0800eb9f
 800eb28:	0800ebd3 	.word	0x0800ebd3
 800eb2c:	0800ebd3 	.word	0x0800ebd3
 800eb30:	0800ebd3 	.word	0x0800ebd3
 800eb34:	0800ebd3 	.word	0x0800ebd3
 800eb38:	0800ebd3 	.word	0x0800ebd3
 800eb3c:	0800ebd3 	.word	0x0800ebd3
 800eb40:	0800ebd3 	.word	0x0800ebd3
 800eb44:	0800ebd3 	.word	0x0800ebd3
 800eb48:	0800ebd3 	.word	0x0800ebd3
 800eb4c:	0800ebd3 	.word	0x0800ebd3
 800eb50:	0800ebd3 	.word	0x0800ebd3
 800eb54:	0800ebd3 	.word	0x0800ebd3
 800eb58:	0800ebd3 	.word	0x0800ebd3
 800eb5c:	0800ebd3 	.word	0x0800ebd3
 800eb60:	0800ebd3 	.word	0x0800ebd3
 800eb64:	0800ebc5 	.word	0x0800ebc5
 800eb68:	2b40      	cmp	r3, #64	; 0x40
 800eb6a:	d02e      	beq.n	800ebca <UART_SetConfig+0xa36>
 800eb6c:	e031      	b.n	800ebd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb6e:	f7fc f981 	bl	800ae74 <HAL_RCC_GetPCLK1Freq>
 800eb72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb74:	e033      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb76:	f7fc f993 	bl	800aea0 <HAL_RCC_GetPCLK2Freq>
 800eb7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb7c:	e02f      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fe f95e 	bl	800ce44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8c:	e027      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb8e:	f107 0318 	add.w	r3, r7, #24
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fe faaa 	bl	800d0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb9c:	e01f      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb9e:	4b2d      	ldr	r3, [pc, #180]	; (800ec54 <UART_SetConfig+0xac0>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f003 0320 	and.w	r3, r3, #32
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d009      	beq.n	800ebbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebaa:	4b2a      	ldr	r3, [pc, #168]	; (800ec54 <UART_SetConfig+0xac0>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	08db      	lsrs	r3, r3, #3
 800ebb0:	f003 0303 	and.w	r3, r3, #3
 800ebb4:	4a28      	ldr	r2, [pc, #160]	; (800ec58 <UART_SetConfig+0xac4>)
 800ebb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebbc:	e00f      	b.n	800ebde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ebbe:	4b26      	ldr	r3, [pc, #152]	; (800ec58 <UART_SetConfig+0xac4>)
 800ebc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebc2:	e00c      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebc4:	4b25      	ldr	r3, [pc, #148]	; (800ec5c <UART_SetConfig+0xac8>)
 800ebc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebc8:	e009      	b.n	800ebde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd0:	e005      	b.n	800ebde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebdc:	bf00      	nop
    }

    if (pclk != 0U)
 800ebde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d021      	beq.n	800ec28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	4a1d      	ldr	r2, [pc, #116]	; (800ec60 <UART_SetConfig+0xacc>)
 800ebea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	085b      	lsrs	r3, r3, #1
 800ebfc:	441a      	add	r2, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0a:	2b0f      	cmp	r3, #15
 800ec0c:	d909      	bls.n	800ec22 <UART_SetConfig+0xa8e>
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec14:	d205      	bcs.n	800ec22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60da      	str	r2, [r3, #12]
 800ec20:	e002      	b.n	800ec28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2200      	movs	r2, #0
 800ec42:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3748      	adds	r7, #72	; 0x48
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec52:	bf00      	nop
 800ec54:	58024400 	.word	0x58024400
 800ec58:	03d09000 	.word	0x03d09000
 800ec5c:	003d0900 	.word	0x003d0900
 800ec60:	08020c58 	.word	0x08020c58

0800ec64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00a      	beq.n	800ec8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	430a      	orrs	r2, r1
 800ec8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec92:	f003 0302 	and.w	r3, r3, #2
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00a      	beq.n	800ecb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	430a      	orrs	r2, r1
 800ecae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00a      	beq.n	800ecd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	430a      	orrs	r2, r1
 800ecd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd6:	f003 0308 	and.w	r3, r3, #8
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00a      	beq.n	800ecf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf8:	f003 0310 	and.w	r3, r3, #16
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00a      	beq.n	800ed16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1a:	f003 0320 	and.w	r3, r3, #32
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00a      	beq.n	800ed38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d01a      	beq.n	800ed7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	430a      	orrs	r2, r1
 800ed58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed62:	d10a      	bne.n	800ed7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	430a      	orrs	r2, r1
 800ed78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00a      	beq.n	800ed9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	430a      	orrs	r2, r1
 800ed9a:	605a      	str	r2, [r3, #4]
  }
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b098      	sub	sp, #96	; 0x60
 800edac:	af02      	add	r7, sp, #8
 800edae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edb8:	f7f5 fa36 	bl	8004228 <HAL_GetTick>
 800edbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 0308 	and.w	r3, r3, #8
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d12f      	bne.n	800ee2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd4:	2200      	movs	r2, #0
 800edd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 f88e 	bl	800eefc <UART_WaitOnFlagUntilTimeout>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d022      	beq.n	800ee2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	e853 3f00 	ldrex	r3, [r3]
 800edf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800edf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edfa:	653b      	str	r3, [r7, #80]	; 0x50
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee04:	647b      	str	r3, [r7, #68]	; 0x44
 800ee06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee0c:	e841 2300 	strex	r3, r2, [r1]
 800ee10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1e6      	bne.n	800ede6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee28:	2303      	movs	r3, #3
 800ee2a:	e063      	b.n	800eef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f003 0304 	and.w	r3, r3, #4
 800ee36:	2b04      	cmp	r3, #4
 800ee38:	d149      	bne.n	800eece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee42:	2200      	movs	r2, #0
 800ee44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f857 	bl	800eefc <UART_WaitOnFlagUntilTimeout>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d03c      	beq.n	800eece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5c:	e853 3f00 	ldrex	r3, [r3]
 800ee60:	623b      	str	r3, [r7, #32]
   return(result);
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee72:	633b      	str	r3, [r7, #48]	; 0x30
 800ee74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee7a:	e841 2300 	strex	r3, r2, [r1]
 800ee7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1e6      	bne.n	800ee54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	3308      	adds	r3, #8
 800ee8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	e853 3f00 	ldrex	r3, [r3]
 800ee94:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f023 0301 	bic.w	r3, r3, #1
 800ee9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eea6:	61fa      	str	r2, [r7, #28]
 800eea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeaa:	69b9      	ldr	r1, [r7, #24]
 800eeac:	69fa      	ldr	r2, [r7, #28]
 800eeae:	e841 2300 	strex	r3, r2, [r1]
 800eeb2:	617b      	str	r3, [r7, #20]
   return(result);
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1e5      	bne.n	800ee86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2220      	movs	r2, #32
 800eebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e012      	b.n	800eef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2220      	movs	r2, #32
 800eed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3758      	adds	r7, #88	; 0x58
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef0c:	e049      	b.n	800efa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef14:	d045      	beq.n	800efa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef16:	f7f5 f987 	bl	8004228 <HAL_GetTick>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d302      	bcc.n	800ef2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e048      	b.n	800efc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 0304 	and.w	r3, r3, #4
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d031      	beq.n	800efa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	69db      	ldr	r3, [r3, #28]
 800ef44:	f003 0308 	and.w	r3, r3, #8
 800ef48:	2b08      	cmp	r3, #8
 800ef4a:	d110      	bne.n	800ef6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2208      	movs	r2, #8
 800ef52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f000 f839 	bl	800efcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2208      	movs	r2, #8
 800ef5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e029      	b.n	800efc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	69db      	ldr	r3, [r3, #28]
 800ef74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef7c:	d111      	bne.n	800efa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f000 f81f 	bl	800efcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2220      	movs	r2, #32
 800ef92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e00f      	b.n	800efc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	69da      	ldr	r2, [r3, #28]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	4013      	ands	r3, r2
 800efac:	68ba      	ldr	r2, [r7, #8]
 800efae:	429a      	cmp	r2, r3
 800efb0:	bf0c      	ite	eq
 800efb2:	2301      	moveq	r3, #1
 800efb4:	2300      	movne	r3, #0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	461a      	mov	r2, r3
 800efba:	79fb      	ldrb	r3, [r7, #7]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d0a6      	beq.n	800ef0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efcc:	b480      	push	{r7}
 800efce:	b095      	sub	sp, #84	; 0x54
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efdc:	e853 3f00 	ldrex	r3, [r3]
 800efe0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	461a      	mov	r2, r3
 800eff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eff2:	643b      	str	r3, [r7, #64]	; 0x40
 800eff4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800effa:	e841 2300 	strex	r3, r2, [r1]
 800effe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1e6      	bne.n	800efd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3308      	adds	r3, #8
 800f00c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	e853 3f00 	ldrex	r3, [r3]
 800f014:	61fb      	str	r3, [r7, #28]
   return(result);
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	4b1e      	ldr	r3, [pc, #120]	; (800f094 <UART_EndRxTransfer+0xc8>)
 800f01a:	4013      	ands	r3, r2
 800f01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3308      	adds	r3, #8
 800f024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f026:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f02e:	e841 2300 	strex	r3, r2, [r1]
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1e5      	bne.n	800f006 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d118      	bne.n	800f074 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	e853 3f00 	ldrex	r3, [r3]
 800f04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f023 0310 	bic.w	r3, r3, #16
 800f056:	647b      	str	r3, [r7, #68]	; 0x44
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	461a      	mov	r2, r3
 800f05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f060:	61bb      	str	r3, [r7, #24]
 800f062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f064:	6979      	ldr	r1, [r7, #20]
 800f066:	69ba      	ldr	r2, [r7, #24]
 800f068:	e841 2300 	strex	r3, r2, [r1]
 800f06c:	613b      	str	r3, [r7, #16]
   return(result);
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e6      	bne.n	800f042 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2220      	movs	r2, #32
 800f078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f088:	bf00      	nop
 800f08a:	3754      	adds	r7, #84	; 0x54
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	effffffe 	.word	0xeffffffe

0800f098 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d101      	bne.n	800f0ae <HAL_UARTEx_DisableFifoMode+0x16>
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	e027      	b.n	800f0fe <HAL_UARTEx_DisableFifoMode+0x66>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2224      	movs	r2, #36	; 0x24
 800f0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f022 0201 	bic.w	r2, r2, #1
 800f0d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f0dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2220      	movs	r2, #32
 800f0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3714      	adds	r7, #20
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b084      	sub	sp, #16
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d101      	bne.n	800f122 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f11e:	2302      	movs	r3, #2
 800f120:	e02d      	b.n	800f17e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2224      	movs	r2, #36	; 0x24
 800f12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f022 0201 	bic.w	r2, r2, #1
 800f148:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	683a      	ldr	r2, [r7, #0]
 800f15a:	430a      	orrs	r2, r1
 800f15c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f850 	bl	800f204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2220      	movs	r2, #32
 800f170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f196:	2b01      	cmp	r3, #1
 800f198:	d101      	bne.n	800f19e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f19a:	2302      	movs	r3, #2
 800f19c:	e02d      	b.n	800f1fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2224      	movs	r2, #36	; 0x24
 800f1aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f022 0201 	bic.w	r2, r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	430a      	orrs	r2, r1
 800f1d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f812 	bl	800f204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2220      	movs	r2, #32
 800f1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
	...

0800f204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f210:	2b00      	cmp	r3, #0
 800f212:	d108      	bne.n	800f226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2201      	movs	r2, #1
 800f220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f224:	e031      	b.n	800f28a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f226:	2310      	movs	r3, #16
 800f228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f22a:	2310      	movs	r3, #16
 800f22c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	0e5b      	lsrs	r3, r3, #25
 800f236:	b2db      	uxtb	r3, r3
 800f238:	f003 0307 	and.w	r3, r3, #7
 800f23c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	0f5b      	lsrs	r3, r3, #29
 800f246:	b2db      	uxtb	r3, r3
 800f248:	f003 0307 	and.w	r3, r3, #7
 800f24c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f24e:	7bbb      	ldrb	r3, [r7, #14]
 800f250:	7b3a      	ldrb	r2, [r7, #12]
 800f252:	4911      	ldr	r1, [pc, #68]	; (800f298 <UARTEx_SetNbDataToProcess+0x94>)
 800f254:	5c8a      	ldrb	r2, [r1, r2]
 800f256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f25a:	7b3a      	ldrb	r2, [r7, #12]
 800f25c:	490f      	ldr	r1, [pc, #60]	; (800f29c <UARTEx_SetNbDataToProcess+0x98>)
 800f25e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f260:	fb93 f3f2 	sdiv	r3, r3, r2
 800f264:	b29a      	uxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f26c:	7bfb      	ldrb	r3, [r7, #15]
 800f26e:	7b7a      	ldrb	r2, [r7, #13]
 800f270:	4909      	ldr	r1, [pc, #36]	; (800f298 <UARTEx_SetNbDataToProcess+0x94>)
 800f272:	5c8a      	ldrb	r2, [r1, r2]
 800f274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f278:	7b7a      	ldrb	r2, [r7, #13]
 800f27a:	4908      	ldr	r1, [pc, #32]	; (800f29c <UARTEx_SetNbDataToProcess+0x98>)
 800f27c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f27e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f282:	b29a      	uxth	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f28a:	bf00      	nop
 800f28c:	3714      	adds	r7, #20
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	08020c70 	.word	0x08020c70
 800f29c:	08020c78 	.word	0x08020c78

0800f2a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f2a6:	4b8d      	ldr	r3, [pc, #564]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2a8:	22c0      	movs	r2, #192	; 0xc0
 800f2aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f2ac:	4b8b      	ldr	r3, [pc, #556]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2ae:	22a8      	movs	r2, #168	; 0xa8
 800f2b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f2b2:	4b8a      	ldr	r3, [pc, #552]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f2b8:	4b88      	ldr	r3, [pc, #544]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2ba:	220a      	movs	r2, #10
 800f2bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f2be:	4b88      	ldr	r3, [pc, #544]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f2c0:	22ff      	movs	r2, #255	; 0xff
 800f2c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f2c4:	4b86      	ldr	r3, [pc, #536]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f2c6:	22ff      	movs	r2, #255	; 0xff
 800f2c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f2ca:	4b85      	ldr	r3, [pc, #532]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f2d0:	4b83      	ldr	r3, [pc, #524]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f2d6:	4b83      	ldr	r3, [pc, #524]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f2d8:	22c0      	movs	r2, #192	; 0xc0
 800f2da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f2dc:	4b81      	ldr	r3, [pc, #516]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f2de:	22a8      	movs	r2, #168	; 0xa8
 800f2e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f2e2:	4b80      	ldr	r3, [pc, #512]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f2e8:	4b7e      	ldr	r3, [pc, #504]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f2ee:	f000 fddf 	bl	800feb0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f2f2:	4b7a      	ldr	r3, [pc, #488]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	061a      	lsls	r2, r3, #24
 800f2f8:	4b78      	ldr	r3, [pc, #480]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f2fa:	785b      	ldrb	r3, [r3, #1]
 800f2fc:	041b      	lsls	r3, r3, #16
 800f2fe:	431a      	orrs	r2, r3
 800f300:	4b76      	ldr	r3, [pc, #472]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f302:	789b      	ldrb	r3, [r3, #2]
 800f304:	021b      	lsls	r3, r3, #8
 800f306:	4313      	orrs	r3, r2
 800f308:	4a74      	ldr	r2, [pc, #464]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f30a:	78d2      	ldrb	r2, [r2, #3]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	061a      	lsls	r2, r3, #24
 800f310:	4b72      	ldr	r3, [pc, #456]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	0619      	lsls	r1, r3, #24
 800f316:	4b71      	ldr	r3, [pc, #452]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f318:	785b      	ldrb	r3, [r3, #1]
 800f31a:	041b      	lsls	r3, r3, #16
 800f31c:	4319      	orrs	r1, r3
 800f31e:	4b6f      	ldr	r3, [pc, #444]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f320:	789b      	ldrb	r3, [r3, #2]
 800f322:	021b      	lsls	r3, r3, #8
 800f324:	430b      	orrs	r3, r1
 800f326:	496d      	ldr	r1, [pc, #436]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f328:	78c9      	ldrb	r1, [r1, #3]
 800f32a:	430b      	orrs	r3, r1
 800f32c:	021b      	lsls	r3, r3, #8
 800f32e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f332:	431a      	orrs	r2, r3
 800f334:	4b69      	ldr	r3, [pc, #420]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	0619      	lsls	r1, r3, #24
 800f33a:	4b68      	ldr	r3, [pc, #416]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f33c:	785b      	ldrb	r3, [r3, #1]
 800f33e:	041b      	lsls	r3, r3, #16
 800f340:	4319      	orrs	r1, r3
 800f342:	4b66      	ldr	r3, [pc, #408]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f344:	789b      	ldrb	r3, [r3, #2]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	430b      	orrs	r3, r1
 800f34a:	4964      	ldr	r1, [pc, #400]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f34c:	78c9      	ldrb	r1, [r1, #3]
 800f34e:	430b      	orrs	r3, r1
 800f350:	0a1b      	lsrs	r3, r3, #8
 800f352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f356:	431a      	orrs	r2, r3
 800f358:	4b60      	ldr	r3, [pc, #384]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	0619      	lsls	r1, r3, #24
 800f35e:	4b5f      	ldr	r3, [pc, #380]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f360:	785b      	ldrb	r3, [r3, #1]
 800f362:	041b      	lsls	r3, r3, #16
 800f364:	4319      	orrs	r1, r3
 800f366:	4b5d      	ldr	r3, [pc, #372]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f368:	789b      	ldrb	r3, [r3, #2]
 800f36a:	021b      	lsls	r3, r3, #8
 800f36c:	430b      	orrs	r3, r1
 800f36e:	495b      	ldr	r1, [pc, #364]	; (800f4dc <MX_LWIP_Init+0x23c>)
 800f370:	78c9      	ldrb	r1, [r1, #3]
 800f372:	430b      	orrs	r3, r1
 800f374:	0e1b      	lsrs	r3, r3, #24
 800f376:	4313      	orrs	r3, r2
 800f378:	4a5b      	ldr	r2, [pc, #364]	; (800f4e8 <MX_LWIP_Init+0x248>)
 800f37a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f37c:	4b58      	ldr	r3, [pc, #352]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	061a      	lsls	r2, r3, #24
 800f382:	4b57      	ldr	r3, [pc, #348]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	041b      	lsls	r3, r3, #16
 800f388:	431a      	orrs	r2, r3
 800f38a:	4b55      	ldr	r3, [pc, #340]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f38c:	789b      	ldrb	r3, [r3, #2]
 800f38e:	021b      	lsls	r3, r3, #8
 800f390:	4313      	orrs	r3, r2
 800f392:	4a53      	ldr	r2, [pc, #332]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f394:	78d2      	ldrb	r2, [r2, #3]
 800f396:	4313      	orrs	r3, r2
 800f398:	061a      	lsls	r2, r3, #24
 800f39a:	4b51      	ldr	r3, [pc, #324]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	0619      	lsls	r1, r3, #24
 800f3a0:	4b4f      	ldr	r3, [pc, #316]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3a2:	785b      	ldrb	r3, [r3, #1]
 800f3a4:	041b      	lsls	r3, r3, #16
 800f3a6:	4319      	orrs	r1, r3
 800f3a8:	4b4d      	ldr	r3, [pc, #308]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3aa:	789b      	ldrb	r3, [r3, #2]
 800f3ac:	021b      	lsls	r3, r3, #8
 800f3ae:	430b      	orrs	r3, r1
 800f3b0:	494b      	ldr	r1, [pc, #300]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3b2:	78c9      	ldrb	r1, [r1, #3]
 800f3b4:	430b      	orrs	r3, r1
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3bc:	431a      	orrs	r2, r3
 800f3be:	4b48      	ldr	r3, [pc, #288]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	0619      	lsls	r1, r3, #24
 800f3c4:	4b46      	ldr	r3, [pc, #280]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3c6:	785b      	ldrb	r3, [r3, #1]
 800f3c8:	041b      	lsls	r3, r3, #16
 800f3ca:	4319      	orrs	r1, r3
 800f3cc:	4b44      	ldr	r3, [pc, #272]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3ce:	789b      	ldrb	r3, [r3, #2]
 800f3d0:	021b      	lsls	r3, r3, #8
 800f3d2:	430b      	orrs	r3, r1
 800f3d4:	4942      	ldr	r1, [pc, #264]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3d6:	78c9      	ldrb	r1, [r1, #3]
 800f3d8:	430b      	orrs	r3, r1
 800f3da:	0a1b      	lsrs	r3, r3, #8
 800f3dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	4b3f      	ldr	r3, [pc, #252]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	0619      	lsls	r1, r3, #24
 800f3e8:	4b3d      	ldr	r3, [pc, #244]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	041b      	lsls	r3, r3, #16
 800f3ee:	4319      	orrs	r1, r3
 800f3f0:	4b3b      	ldr	r3, [pc, #236]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3f2:	789b      	ldrb	r3, [r3, #2]
 800f3f4:	021b      	lsls	r3, r3, #8
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	4939      	ldr	r1, [pc, #228]	; (800f4e0 <MX_LWIP_Init+0x240>)
 800f3fa:	78c9      	ldrb	r1, [r1, #3]
 800f3fc:	430b      	orrs	r3, r1
 800f3fe:	0e1b      	lsrs	r3, r3, #24
 800f400:	4313      	orrs	r3, r2
 800f402:	4a3a      	ldr	r2, [pc, #232]	; (800f4ec <MX_LWIP_Init+0x24c>)
 800f404:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f406:	4b37      	ldr	r3, [pc, #220]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	061a      	lsls	r2, r3, #24
 800f40c:	4b35      	ldr	r3, [pc, #212]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f40e:	785b      	ldrb	r3, [r3, #1]
 800f410:	041b      	lsls	r3, r3, #16
 800f412:	431a      	orrs	r2, r3
 800f414:	4b33      	ldr	r3, [pc, #204]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f416:	789b      	ldrb	r3, [r3, #2]
 800f418:	021b      	lsls	r3, r3, #8
 800f41a:	4313      	orrs	r3, r2
 800f41c:	4a31      	ldr	r2, [pc, #196]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f41e:	78d2      	ldrb	r2, [r2, #3]
 800f420:	4313      	orrs	r3, r2
 800f422:	061a      	lsls	r2, r3, #24
 800f424:	4b2f      	ldr	r3, [pc, #188]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	0619      	lsls	r1, r3, #24
 800f42a:	4b2e      	ldr	r3, [pc, #184]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f42c:	785b      	ldrb	r3, [r3, #1]
 800f42e:	041b      	lsls	r3, r3, #16
 800f430:	4319      	orrs	r1, r3
 800f432:	4b2c      	ldr	r3, [pc, #176]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f434:	789b      	ldrb	r3, [r3, #2]
 800f436:	021b      	lsls	r3, r3, #8
 800f438:	430b      	orrs	r3, r1
 800f43a:	492a      	ldr	r1, [pc, #168]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f43c:	78c9      	ldrb	r1, [r1, #3]
 800f43e:	430b      	orrs	r3, r1
 800f440:	021b      	lsls	r3, r3, #8
 800f442:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f446:	431a      	orrs	r2, r3
 800f448:	4b26      	ldr	r3, [pc, #152]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	0619      	lsls	r1, r3, #24
 800f44e:	4b25      	ldr	r3, [pc, #148]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f450:	785b      	ldrb	r3, [r3, #1]
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	4319      	orrs	r1, r3
 800f456:	4b23      	ldr	r3, [pc, #140]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f458:	789b      	ldrb	r3, [r3, #2]
 800f45a:	021b      	lsls	r3, r3, #8
 800f45c:	430b      	orrs	r3, r1
 800f45e:	4921      	ldr	r1, [pc, #132]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f460:	78c9      	ldrb	r1, [r1, #3]
 800f462:	430b      	orrs	r3, r1
 800f464:	0a1b      	lsrs	r3, r3, #8
 800f466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f46a:	431a      	orrs	r2, r3
 800f46c:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	0619      	lsls	r1, r3, #24
 800f472:	4b1c      	ldr	r3, [pc, #112]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f474:	785b      	ldrb	r3, [r3, #1]
 800f476:	041b      	lsls	r3, r3, #16
 800f478:	4319      	orrs	r1, r3
 800f47a:	4b1a      	ldr	r3, [pc, #104]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f47c:	789b      	ldrb	r3, [r3, #2]
 800f47e:	021b      	lsls	r3, r3, #8
 800f480:	430b      	orrs	r3, r1
 800f482:	4918      	ldr	r1, [pc, #96]	; (800f4e4 <MX_LWIP_Init+0x244>)
 800f484:	78c9      	ldrb	r1, [r1, #3]
 800f486:	430b      	orrs	r3, r1
 800f488:	0e1b      	lsrs	r3, r3, #24
 800f48a:	4313      	orrs	r3, r2
 800f48c:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <MX_LWIP_Init+0x250>)
 800f48e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f490:	4b18      	ldr	r3, [pc, #96]	; (800f4f4 <MX_LWIP_Init+0x254>)
 800f492:	9302      	str	r3, [sp, #8]
 800f494:	4b18      	ldr	r3, [pc, #96]	; (800f4f8 <MX_LWIP_Init+0x258>)
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	2300      	movs	r3, #0
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	4b14      	ldr	r3, [pc, #80]	; (800f4f0 <MX_LWIP_Init+0x250>)
 800f49e:	4a13      	ldr	r2, [pc, #76]	; (800f4ec <MX_LWIP_Init+0x24c>)
 800f4a0:	4911      	ldr	r1, [pc, #68]	; (800f4e8 <MX_LWIP_Init+0x248>)
 800f4a2:	4816      	ldr	r0, [pc, #88]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4a4:	f001 f9da 	bl	801085c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f4a8:	4814      	ldr	r0, [pc, #80]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4aa:	f001 fb89 	bl	8010bc0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f4ae:	4b13      	ldr	r3, [pc, #76]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4b4:	089b      	lsrs	r3, r3, #2
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f4c0:	480e      	ldr	r0, [pc, #56]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4c2:	f001 fb8d 	bl	8010be0 <netif_set_up>
 800f4c6:	e002      	b.n	800f4ce <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f4c8:	480c      	ldr	r0, [pc, #48]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4ca:	f001 fbf5 	bl	8010cb8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f4ce:	490c      	ldr	r1, [pc, #48]	; (800f500 <MX_LWIP_Init+0x260>)
 800f4d0:	480a      	ldr	r0, [pc, #40]	; (800f4fc <MX_LWIP_Init+0x25c>)
 800f4d2:	f001 fc87 	bl	8010de4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f4d6:	bf00      	nop
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20000654 	.word	0x20000654
 800f4e0:	20000658 	.word	0x20000658
 800f4e4:	2000065c 	.word	0x2000065c
 800f4e8:	20000648 	.word	0x20000648
 800f4ec:	2000064c 	.word	0x2000064c
 800f4f0:	20000650 	.word	0x20000650
 800f4f4:	0801a605 	.word	0x0801a605
 800f4f8:	0800f7bd 	.word	0x0800f7bd
 800f4fc:	20000614 	.word	0x20000614
 800f500:	0800f505 	.word	0x0800f505

0800f504 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f50c:	bf00      	nop
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f524:	4b3f      	ldr	r3, [pc, #252]	; (800f624 <low_level_init+0x10c>)
 800f526:	4a40      	ldr	r2, [pc, #256]	; (800f628 <low_level_init+0x110>)
 800f528:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f52a:	2300      	movs	r3, #0
 800f52c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f52e:	2380      	movs	r3, #128	; 0x80
 800f530:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f532:	23e1      	movs	r3, #225	; 0xe1
 800f534:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f536:	2300      	movs	r3, #0
 800f538:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f53a:	2300      	movs	r3, #0
 800f53c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f53e:	2300      	movs	r3, #0
 800f540:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f542:	4a38      	ldr	r2, [pc, #224]	; (800f624 <low_level_init+0x10c>)
 800f544:	f107 0308 	add.w	r3, r7, #8
 800f548:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f54a:	4b36      	ldr	r3, [pc, #216]	; (800f624 <low_level_init+0x10c>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f550:	4b34      	ldr	r3, [pc, #208]	; (800f624 <low_level_init+0x10c>)
 800f552:	4a36      	ldr	r2, [pc, #216]	; (800f62c <low_level_init+0x114>)
 800f554:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f556:	4b33      	ldr	r3, [pc, #204]	; (800f624 <low_level_init+0x10c>)
 800f558:	4a35      	ldr	r2, [pc, #212]	; (800f630 <low_level_init+0x118>)
 800f55a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f55c:	4b31      	ldr	r3, [pc, #196]	; (800f624 <low_level_init+0x10c>)
 800f55e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f562:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f564:	482f      	ldr	r0, [pc, #188]	; (800f624 <low_level_init+0x10c>)
 800f566:	f7f6 ff8f 	bl	8006488 <HAL_ETH_Init>
 800f56a:	4603      	mov	r3, r0
 800f56c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f56e:	2238      	movs	r2, #56	; 0x38
 800f570:	2100      	movs	r1, #0
 800f572:	4830      	ldr	r0, [pc, #192]	; (800f634 <low_level_init+0x11c>)
 800f574:	f00b ffe8 	bl	801b548 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f578:	4b2e      	ldr	r3, [pc, #184]	; (800f634 <low_level_init+0x11c>)
 800f57a:	2221      	movs	r2, #33	; 0x21
 800f57c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f57e:	4b2d      	ldr	r3, [pc, #180]	; (800f634 <low_level_init+0x11c>)
 800f580:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f584:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f586:	4b2b      	ldr	r3, [pc, #172]	; (800f634 <low_level_init+0x11c>)
 800f588:	2200      	movs	r2, #0
 800f58a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f58c:	482a      	ldr	r0, [pc, #168]	; (800f638 <low_level_init+0x120>)
 800f58e:	f001 f82d 	bl	80105ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2206      	movs	r2, #6
 800f596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f59a:	4b22      	ldr	r3, [pc, #136]	; (800f624 <low_level_init+0x10c>)
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	781a      	ldrb	r2, [r3, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f5a6:	4b1f      	ldr	r3, [pc, #124]	; (800f624 <low_level_init+0x10c>)
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	785a      	ldrb	r2, [r3, #1]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f5b2:	4b1c      	ldr	r3, [pc, #112]	; (800f624 <low_level_init+0x10c>)
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	789a      	ldrb	r2, [r3, #2]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f5be:	4b19      	ldr	r3, [pc, #100]	; (800f624 <low_level_init+0x10c>)
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	78da      	ldrb	r2, [r3, #3]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f5ca:	4b16      	ldr	r3, [pc, #88]	; (800f624 <low_level_init+0x10c>)
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	791a      	ldrb	r2, [r3, #4]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f5d6:	4b13      	ldr	r3, [pc, #76]	; (800f624 <low_level_init+0x10c>)
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	795a      	ldrb	r2, [r3, #5]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f5e8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5f0:	f043 030a 	orr.w	r3, r3, #10
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f5fc:	490f      	ldr	r1, [pc, #60]	; (800f63c <low_level_init+0x124>)
 800f5fe:	4810      	ldr	r0, [pc, #64]	; (800f640 <low_level_init+0x128>)
 800f600:	f7f4 fc2b 	bl	8003e5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f604:	480e      	ldr	r0, [pc, #56]	; (800f640 <low_level_init+0x128>)
 800f606:	f7f4 fc5a 	bl	8003ebe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f60a:	7bfb      	ldrb	r3, [r7, #15]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d103      	bne.n	800f618 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fa3f 	bl	800fa94 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f616:	e001      	b.n	800f61c <low_level_init+0x104>
    Error_Handler();
 800f618:	f7f3 fede 	bl	80033d8 <Error_Handler>
}
 800f61c:	bf00      	nop
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	20000668 	.word	0x20000668
 800f628:	40028000 	.word	0x40028000
 800f62c:	30040060 	.word	0x30040060
 800f630:	30040000 	.word	0x30040000
 800f634:	20000718 	.word	0x20000718
 800f638:	08020c80 	.word	0x08020c80
 800f63c:	20000040 	.word	0x20000040
 800f640:	20000750 	.word	0x20000750

0800f644 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b092      	sub	sp, #72	; 0x48
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f64e:	2300      	movs	r3, #0
 800f650:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f652:	2300      	movs	r3, #0
 800f654:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f656:	2300      	movs	r3, #0
 800f658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f65c:	f107 030c 	add.w	r3, r7, #12
 800f660:	2230      	movs	r2, #48	; 0x30
 800f662:	2100      	movs	r1, #0
 800f664:	4618      	mov	r0, r3
 800f666:	f00b ff6f 	bl	801b548 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f66a:	f107 030c 	add.w	r3, r7, #12
 800f66e:	2230      	movs	r2, #48	; 0x30
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f00b ff68 	bl	801b548 <memset>

  for(q = p; q != NULL; q = q->next)
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	643b      	str	r3, [r7, #64]	; 0x40
 800f67c:	e045      	b.n	800f70a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f680:	2b03      	cmp	r3, #3
 800f682:	d902      	bls.n	800f68a <low_level_output+0x46>
      return ERR_IF;
 800f684:	f06f 030b 	mvn.w	r3, #11
 800f688:	e055      	b.n	800f736 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68c:	6859      	ldr	r1, [r3, #4]
 800f68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f690:	4613      	mov	r3, r2
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	3348      	adds	r3, #72	; 0x48
 800f69a:	443b      	add	r3, r7
 800f69c:	3b3c      	subs	r3, #60	; 0x3c
 800f69e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a2:	895b      	ldrh	r3, [r3, #10]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	4413      	add	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	3348      	adds	r3, #72	; 0x48
 800f6b2:	443b      	add	r3, r7
 800f6b4:	3b38      	subs	r3, #56	; 0x38
 800f6b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d011      	beq.n	800f6e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c0:	1e5a      	subs	r2, r3, #1
 800f6c2:	f107 000c 	add.w	r0, r7, #12
 800f6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	005b      	lsls	r3, r3, #1
 800f6cc:	440b      	add	r3, r1
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	18c1      	adds	r1, r0, r3
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	005b      	lsls	r3, r3, #1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	3348      	adds	r3, #72	; 0x48
 800f6dc:	443b      	add	r3, r7
 800f6de:	3b34      	subs	r3, #52	; 0x34
 800f6e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d109      	bne.n	800f6fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	4413      	add	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	3348      	adds	r3, #72	; 0x48
 800f6f6:	443b      	add	r3, r7
 800f6f8:	3b34      	subs	r3, #52	; 0x34
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f700:	3301      	adds	r3, #1
 800f702:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	643b      	str	r3, [r7, #64]	; 0x40
 800f70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1b6      	bne.n	800f67e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	891b      	ldrh	r3, [r3, #8]
 800f714:	461a      	mov	r2, r3
 800f716:	4b0a      	ldr	r3, [pc, #40]	; (800f740 <low_level_output+0xfc>)
 800f718:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f71a:	4a09      	ldr	r2, [pc, #36]	; (800f740 <low_level_output+0xfc>)
 800f71c:	f107 030c 	add.w	r3, r7, #12
 800f720:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f722:	4a07      	ldr	r2, [pc, #28]	; (800f740 <low_level_output+0xfc>)
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f728:	2214      	movs	r2, #20
 800f72a:	4905      	ldr	r1, [pc, #20]	; (800f740 <low_level_output+0xfc>)
 800f72c:	4805      	ldr	r0, [pc, #20]	; (800f744 <low_level_output+0x100>)
 800f72e:	f7f7 f843 	bl	80067b8 <HAL_ETH_Transmit>

  return errval;
 800f732:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f736:	4618      	mov	r0, r3
 800f738:	3748      	adds	r7, #72	; 0x48
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20000718 	.word	0x20000718
 800f744:	20000668 	.word	0x20000668

0800f748 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f750:	2300      	movs	r3, #0
 800f752:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f754:	4b07      	ldr	r3, [pc, #28]	; (800f774 <low_level_input+0x2c>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d105      	bne.n	800f768 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f75c:	f107 030c 	add.w	r3, r7, #12
 800f760:	4619      	mov	r1, r3
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <low_level_input+0x30>)
 800f764:	f7f7 f8bf 	bl	80068e6 <HAL_ETH_ReadData>
  }

  return p;
 800f768:	68fb      	ldr	r3, [r7, #12]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	20000664 	.word	0x20000664
 800f778:	20000668 	.word	0x20000668

0800f77c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f784:	2300      	movs	r3, #0
 800f786:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffdd 	bl	800f748 <low_level_input>
 800f78e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00a      	beq.n	800f7ac <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	4798      	blx	r3
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f001 fe9c 	bl	80114e4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1ea      	bne.n	800f788 <ethernetif_input+0xc>
}
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d106      	bne.n	800f7d8 <ethernetif_init+0x1c>
 800f7ca:	4b0e      	ldr	r3, [pc, #56]	; (800f804 <ethernetif_init+0x48>)
 800f7cc:	f240 1285 	movw	r2, #389	; 0x185
 800f7d0:	490d      	ldr	r1, [pc, #52]	; (800f808 <ethernetif_init+0x4c>)
 800f7d2:	480e      	ldr	r0, [pc, #56]	; (800f80c <ethernetif_init+0x50>)
 800f7d4:	f00b fd28 	bl	801b228 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2273      	movs	r2, #115	; 0x73
 800f7dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2274      	movs	r2, #116	; 0x74
 800f7e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a09      	ldr	r2, [pc, #36]	; (800f810 <ethernetif_init+0x54>)
 800f7ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a08      	ldr	r2, [pc, #32]	; (800f814 <ethernetif_init+0x58>)
 800f7f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7ff fe8f 	bl	800f518 <low_level_init>

  return ERR_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	0801e244 	.word	0x0801e244
 800f808:	0801e260 	.word	0x0801e260
 800f80c:	0801e270 	.word	0x0801e270
 800f810:	08018951 	.word	0x08018951
 800f814:	0800f645 	.word	0x0800f645

0800f818 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f824:	68f9      	ldr	r1, [r7, #12]
 800f826:	4807      	ldr	r0, [pc, #28]	; (800f844 <pbuf_free_custom+0x2c>)
 800f828:	f000 ffc2 	bl	80107b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f82c:	4b06      	ldr	r3, [pc, #24]	; (800f848 <pbuf_free_custom+0x30>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d102      	bne.n	800f83a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f834:	4b04      	ldr	r3, [pc, #16]	; (800f848 <pbuf_free_custom+0x30>)
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
  }
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	08020c80 	.word	0x08020c80
 800f848:	20000664 	.word	0x20000664

0800f84c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f850:	f7f4 fcea 	bl	8004228 <HAL_GetTick>
 800f854:	4603      	mov	r3, r0
}
 800f856:	4618      	mov	r0, r3
 800f858:	bd80      	pop	{r7, pc}
	...

0800f85c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08e      	sub	sp, #56	; 0x38
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f868:	2200      	movs	r2, #0
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	605a      	str	r2, [r3, #4]
 800f86e:	609a      	str	r2, [r3, #8]
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a59      	ldr	r2, [pc, #356]	; (800f9e0 <HAL_ETH_MspInit+0x184>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	f040 80ab 	bne.w	800f9d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f880:	4b58      	ldr	r3, [pc, #352]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f886:	4a57      	ldr	r2, [pc, #348]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f88c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f890:	4b54      	ldr	r3, [pc, #336]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f89a:	623b      	str	r3, [r7, #32]
 800f89c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f89e:	4b51      	ldr	r3, [pc, #324]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8a4:	4a4f      	ldr	r2, [pc, #316]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8ae:	4b4d      	ldr	r3, [pc, #308]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8b8:	61fb      	str	r3, [r7, #28]
 800f8ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f8bc:	4b49      	ldr	r3, [pc, #292]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8c2:	4a48      	ldr	r2, [pc, #288]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8cc:	4b45      	ldr	r3, [pc, #276]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8d6:	61bb      	str	r3, [r7, #24]
 800f8d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f8da:	4b42      	ldr	r3, [pc, #264]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8e0:	4a40      	ldr	r2, [pc, #256]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8e2:	f043 0304 	orr.w	r3, r3, #4
 800f8e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8ea:	4b3e      	ldr	r3, [pc, #248]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8f0:	f003 0304 	and.w	r3, r3, #4
 800f8f4:	617b      	str	r3, [r7, #20]
 800f8f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8f8:	4b3a      	ldr	r3, [pc, #232]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f8fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8fe:	4a39      	ldr	r2, [pc, #228]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f900:	f043 0301 	orr.w	r3, r3, #1
 800f904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f908:	4b36      	ldr	r3, [pc, #216]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	613b      	str	r3, [r7, #16]
 800f914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f916:	4b33      	ldr	r3, [pc, #204]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f91c:	4a31      	ldr	r2, [pc, #196]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f91e:	f043 0302 	orr.w	r3, r3, #2
 800f922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f926:	4b2f      	ldr	r3, [pc, #188]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f92c:	f003 0302 	and.w	r3, r3, #2
 800f930:	60fb      	str	r3, [r7, #12]
 800f932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f934:	4b2b      	ldr	r3, [pc, #172]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f93a:	4a2a      	ldr	r2, [pc, #168]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f944:	4b27      	ldr	r3, [pc, #156]	; (800f9e4 <HAL_ETH_MspInit+0x188>)
 800f946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f94e:	60bb      	str	r3, [r7, #8]
 800f950:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f952:	2332      	movs	r3, #50	; 0x32
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f956:	2302      	movs	r3, #2
 800f958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f95e:	2300      	movs	r3, #0
 800f960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f962:	230b      	movs	r3, #11
 800f964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f96a:	4619      	mov	r1, r3
 800f96c:	481e      	ldr	r0, [pc, #120]	; (800f9e8 <HAL_ETH_MspInit+0x18c>)
 800f96e:	f7f8 f94b 	bl	8007c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f972:	2386      	movs	r3, #134	; 0x86
 800f974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f976:	2302      	movs	r3, #2
 800f978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f97a:	2300      	movs	r3, #0
 800f97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f97e:	2300      	movs	r3, #0
 800f980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f982:	230b      	movs	r3, #11
 800f984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f98a:	4619      	mov	r1, r3
 800f98c:	4817      	ldr	r0, [pc, #92]	; (800f9ec <HAL_ETH_MspInit+0x190>)
 800f98e:	f7f8 f93b 	bl	8007c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f998:	2302      	movs	r3, #2
 800f99a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f99c:	2300      	movs	r3, #0
 800f99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9a4:	230b      	movs	r3, #11
 800f9a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4810      	ldr	r0, [pc, #64]	; (800f9f0 <HAL_ETH_MspInit+0x194>)
 800f9b0:	f7f8 f92a 	bl	8007c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f9b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f9b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9c6:	230b      	movs	r3, #11
 800f9c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f9ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4808      	ldr	r0, [pc, #32]	; (800f9f4 <HAL_ETH_MspInit+0x198>)
 800f9d2:	f7f8 f919 	bl	8007c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f9d6:	bf00      	nop
 800f9d8:	3738      	adds	r7, #56	; 0x38
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	40028000 	.word	0x40028000
 800f9e4:	58024400 	.word	0x58024400
 800f9e8:	58020800 	.word	0x58020800
 800f9ec:	58020000 	.word	0x58020000
 800f9f0:	58020400 	.word	0x58020400
 800f9f4:	58021800 	.word	0x58021800

0800f9f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f9fc:	4802      	ldr	r0, [pc, #8]	; (800fa08 <ETH_PHY_IO_Init+0x10>)
 800f9fe:	f7f7 fb37 	bl	8007070 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	20000668 	.word	0x20000668

0800fa0c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	af00      	add	r7, sp, #0
  return 0;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	68f9      	ldr	r1, [r7, #12]
 800fa2e:	4807      	ldr	r0, [pc, #28]	; (800fa4c <ETH_PHY_IO_ReadReg+0x30>)
 800fa30:	f7f7 f887 	bl	8006b42 <HAL_ETH_ReadPHYRegister>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d002      	beq.n	800fa40 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fa3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3e:	e000      	b.n	800fa42 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	20000668 	.word	0x20000668

0800fa50 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68ba      	ldr	r2, [r7, #8]
 800fa60:	68f9      	ldr	r1, [r7, #12]
 800fa62:	4807      	ldr	r0, [pc, #28]	; (800fa80 <ETH_PHY_IO_WriteReg+0x30>)
 800fa64:	f7f7 f8c2 	bl	8006bec <HAL_ETH_WritePHYRegister>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d002      	beq.n	800fa74 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fa6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa72:	e000      	b.n	800fa76 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	20000668 	.word	0x20000668

0800fa84 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fa88:	f7f4 fbce 	bl	8004228 <HAL_GetTick>
 800fa8c:	4603      	mov	r3, r0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	bd80      	pop	{r7, pc}
	...

0800fa94 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b0a0      	sub	sp, #128	; 0x80
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800fa9c:	f107 030c 	add.w	r3, r7, #12
 800faa0:	2264      	movs	r2, #100	; 0x64
 800faa2:	2100      	movs	r1, #0
 800faa4:	4618      	mov	r0, r3
 800faa6:	f00b fd4f 	bl	801b548 <memset>
  int32_t PHYLinkState = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800faae:	2300      	movs	r3, #0
 800fab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fab2:	2300      	movs	r3, #0
 800fab4:	67bb      	str	r3, [r7, #120]	; 0x78
 800fab6:	2300      	movs	r3, #0
 800fab8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800faba:	483a      	ldr	r0, [pc, #232]	; (800fba4 <ethernet_link_check_state+0x110>)
 800fabc:	f7f4 faa7 	bl	800400e <LAN8742_GetLinkState>
 800fac0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fac8:	089b      	lsrs	r3, r3, #2
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	b2db      	uxtb	r3, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00c      	beq.n	800faee <ethernet_link_check_state+0x5a>
 800fad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	dc09      	bgt.n	800faee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800fada:	4833      	ldr	r0, [pc, #204]	; (800fba8 <ethernet_link_check_state+0x114>)
 800fadc:	f7f6 fe1c 	bl	8006718 <HAL_ETH_Stop>
    netif_set_down(netif);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f001 f8e9 	bl	8010cb8 <netif_set_down>
    netif_set_link_down(netif);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f001 f94c 	bl	8010d84 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800faec:	e055      	b.n	800fb9a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faf4:	f003 0304 	and.w	r3, r3, #4
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d14e      	bne.n	800fb9a <ethernet_link_check_state+0x106>
 800fafc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	dd4b      	ble.n	800fb9a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800fb02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb04:	3b02      	subs	r3, #2
 800fb06:	2b03      	cmp	r3, #3
 800fb08:	d82a      	bhi.n	800fb60 <ethernet_link_check_state+0xcc>
 800fb0a:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <ethernet_link_check_state+0x7c>)
 800fb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb10:	0800fb21 	.word	0x0800fb21
 800fb14:	0800fb33 	.word	0x0800fb33
 800fb18:	0800fb43 	.word	0x0800fb43
 800fb1c:	0800fb53 	.word	0x0800fb53
      duplex = ETH_FULLDUPLEX_MODE;
 800fb20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb24:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fb26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb2a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb30:	e017      	b.n	800fb62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fb36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb3a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb40:	e00f      	b.n	800fb62 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800fb42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb46:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb50:	e007      	b.n	800fb62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fb52:	2300      	movs	r3, #0
 800fb54:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fb56:	2300      	movs	r3, #0
 800fb58:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb5e:	e000      	b.n	800fb62 <ethernet_link_check_state+0xce>
      break;
 800fb60:	bf00      	nop
    if(linkchanged)
 800fb62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d018      	beq.n	800fb9a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fb68:	f107 030c 	add.w	r3, r7, #12
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	480e      	ldr	r0, [pc, #56]	; (800fba8 <ethernet_link_check_state+0x114>)
 800fb70:	f7f7 f890 	bl	8006c94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fb74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800fb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb7a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fb7c:	f107 030c 	add.w	r3, r7, #12
 800fb80:	4619      	mov	r1, r3
 800fb82:	4809      	ldr	r0, [pc, #36]	; (800fba8 <ethernet_link_check_state+0x114>)
 800fb84:	f7f7 fa5a 	bl	800703c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fb88:	4807      	ldr	r0, [pc, #28]	; (800fba8 <ethernet_link_check_state+0x114>)
 800fb8a:	f7f6 fd63 	bl	8006654 <HAL_ETH_Start>
      netif_set_up(netif);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f001 f826 	bl	8010be0 <netif_set_up>
      netif_set_link_up(netif);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f001 f8c1 	bl	8010d1c <netif_set_link_up>
}
 800fb9a:	bf00      	nop
 800fb9c:	3780      	adds	r7, #128	; 0x80
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20000750 	.word	0x20000750
 800fba8:	20000668 	.word	0x20000668

0800fbac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af02      	add	r7, sp, #8
 800fbb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fbb4:	4812      	ldr	r0, [pc, #72]	; (800fc00 <HAL_ETH_RxAllocateCallback+0x54>)
 800fbb6:	f000 fd8d 	bl	80106d4 <memp_malloc_pool>
 800fbba:	60f8      	str	r0, [r7, #12]
  if (p)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d014      	beq.n	800fbec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f103 0220 	add.w	r2, r3, #32
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4a0d      	ldr	r2, [pc, #52]	; (800fc04 <HAL_ETH_RxAllocateCallback+0x58>)
 800fbd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fbda:	9201      	str	r2, [sp, #4]
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2241      	movs	r2, #65	; 0x41
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	f001 fac5 	bl	8011174 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fbea:	e005      	b.n	800fbf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fbec:	4b06      	ldr	r3, [pc, #24]	; (800fc08 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fbee:	2201      	movs	r2, #1
 800fbf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	601a      	str	r2, [r3, #0]
}
 800fbf8:	bf00      	nop
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	08020c80 	.word	0x08020c80
 800fc04:	0800f819 	.word	0x0800f819
 800fc08:	20000664 	.word	0x20000664

0800fc0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b08d      	sub	sp, #52	; 0x34
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800fc22:	2300      	movs	r3, #0
 800fc24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	3b20      	subs	r3, #32
 800fc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	2200      	movs	r2, #0
 800fc36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	887a      	ldrh	r2, [r7, #2]
 800fc3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	e003      	b.n	800fc56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc62:	e009      	b.n	800fc78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	891a      	ldrh	r2, [r3, #8]
 800fc68:	887b      	ldrh	r3, [r7, #2]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1f2      	bne.n	800fc64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fc7e:	887b      	ldrh	r3, [r7, #2]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	623a      	str	r2, [r7, #32]
 800fc84:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dd1d      	ble.n	800fcc8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	f003 021f 	and.w	r2, r3, #31
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	4413      	add	r3, r2
 800fc96:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fc9c:	f3bf 8f4f 	dsb	sy
}
 800fca0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fca2:	4a0d      	ldr	r2, [pc, #52]	; (800fcd8 <HAL_ETH_RxLinkCallback+0xcc>)
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	3320      	adds	r3, #32
 800fcae:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	3b20      	subs	r3, #32
 800fcb4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	dcf2      	bgt.n	800fca2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fcbc:	f3bf 8f4f 	dsb	sy
}
 800fcc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fcc2:	f3bf 8f6f 	isb	sy
}
 800fcc6:	bf00      	nop
}
 800fcc8:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fcca:	bf00      	nop
 800fccc:	3734      	adds	r7, #52	; 0x34
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	e000ed00 	.word	0xe000ed00

0800fcdc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	4603      	mov	r3, r0
 800fce4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fce6:	88fb      	ldrh	r3, [r7, #6]
 800fce8:	021b      	lsls	r3, r3, #8
 800fcea:	b21a      	sxth	r2, r3
 800fcec:	88fb      	ldrh	r3, [r7, #6]
 800fcee:	0a1b      	lsrs	r3, r3, #8
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	b21b      	sxth	r3, r3
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	b21b      	sxth	r3, r3
 800fcf8:	b29b      	uxth	r3, r3
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fd06:	b480      	push	{r7}
 800fd08:	b083      	sub	sp, #12
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	061a      	lsls	r2, r3, #24
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	021b      	lsls	r3, r3, #8
 800fd16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd1a:	431a      	orrs	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	0a1b      	lsrs	r3, r3, #8
 800fd20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd24:	431a      	orrs	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	0e1b      	lsrs	r3, r3, #24
 800fd2a:	4313      	orrs	r3, r2
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b089      	sub	sp, #36	; 0x24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	f003 0301 	and.w	r3, r3, #1
 800fd54:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00d      	beq.n	800fd78 <lwip_standard_chksum+0x40>
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dd0a      	ble.n	800fd78 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fd62:	69fa      	ldr	r2, [r7, #28]
 800fd64:	1c53      	adds	r3, r2, #1
 800fd66:	61fb      	str	r3, [r7, #28]
 800fd68:	f107 030e 	add.w	r3, r7, #14
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	701a      	strb	r2, [r3, #0]
    len--;
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	3b01      	subs	r3, #1
 800fd76:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fd7c:	e00a      	b.n	800fd94 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	1c9a      	adds	r2, r3, #2
 800fd82:	61ba      	str	r2, [r7, #24]
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	461a      	mov	r2, r3
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	3b02      	subs	r3, #2
 800fd92:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	dcf1      	bgt.n	800fd7e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	dd04      	ble.n	800fdaa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fda0:	f107 030e 	add.w	r3, r7, #14
 800fda4:	69ba      	ldr	r2, [r7, #24]
 800fda6:	7812      	ldrb	r2, [r2, #0]
 800fda8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fdaa:	89fb      	ldrh	r3, [r7, #14]
 800fdac:	461a      	mov	r2, r3
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	0c1a      	lsrs	r2, r3, #16
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4413      	add	r3, r2
 800fdbe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	0c1a      	lsrs	r2, r3, #16
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	4413      	add	r3, r2
 800fdca:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d007      	beq.n	800fde2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	021b      	lsls	r3, r3, #8
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	0a1b      	lsrs	r3, r3, #8
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	4313      	orrs	r3, r2
 800fde0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	b29b      	uxth	r3, r3
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3724      	adds	r7, #36	; 0x24
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fdfe:	887b      	ldrh	r3, [r7, #2]
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff ff98 	bl	800fd38 <lwip_standard_chksum>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	43db      	mvns	r3, r3
 800fe0c:	b29b      	uxth	r3, r3
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fe16:	b580      	push	{r7, lr}
 800fe18:	b086      	sub	sp, #24
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	613b      	str	r3, [r7, #16]
 800fe2a:	e02b      	b.n	800fe84 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	685a      	ldr	r2, [r3, #4]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	4619      	mov	r1, r3
 800fe36:	4610      	mov	r0, r2
 800fe38:	f7ff ff7e 	bl	800fd38 <lwip_standard_chksum>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	461a      	mov	r2, r3
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	4413      	add	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	0c1a      	lsrs	r2, r3, #16
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	4413      	add	r3, r2
 800fe50:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	895b      	ldrh	r3, [r3, #10]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00e      	beq.n	800fe7e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	bf0c      	ite	eq
 800fe66:	2301      	moveq	r3, #1
 800fe68:	2300      	movne	r3, #0
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	021b      	lsls	r3, r3, #8
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	0a1b      	lsrs	r3, r3, #8
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	613b      	str	r3, [r7, #16]
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d1d0      	bne.n	800fe2c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d007      	beq.n	800fea0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	0a1b      	lsrs	r3, r3, #8
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	43db      	mvns	r3, r3
 800fea6:	b29b      	uxth	r3, r3
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3718      	adds	r7, #24
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800feba:	f000 f8d3 	bl	8010064 <mem_init>
  memp_init();
 800febe:	f000 fbc5 	bl	801064c <memp_init>
  pbuf_init();
  netif_init();
 800fec2:	f000 fcc3 	bl	801084c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fec6:	f007 ff3d 	bl	8017d44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800feca:	f001 fe2b 	bl	8011b24 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fece:	f007 feaf 	bl	8017c30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fed2:	bf00      	nop
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800fee4:	4b04      	ldr	r3, [pc, #16]	; (800fef8 <ptr_to_mem+0x1c>)
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4413      	add	r3, r2
}
 800feec:	4618      	mov	r0, r3
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	20000788 	.word	0x20000788

0800fefc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ff04:	4b04      	ldr	r3, [pc, #16]	; (800ff18 <mem_to_ptr+0x1c>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	1ad3      	subs	r3, r2, r3
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	20000788 	.word	0x20000788

0800ff1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ff24:	4b45      	ldr	r3, [pc, #276]	; (801003c <plug_holes+0x120>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d206      	bcs.n	800ff3c <plug_holes+0x20>
 800ff2e:	4b44      	ldr	r3, [pc, #272]	; (8010040 <plug_holes+0x124>)
 800ff30:	f240 12df 	movw	r2, #479	; 0x1df
 800ff34:	4943      	ldr	r1, [pc, #268]	; (8010044 <plug_holes+0x128>)
 800ff36:	4844      	ldr	r0, [pc, #272]	; (8010048 <plug_holes+0x12c>)
 800ff38:	f00b f976 	bl	801b228 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ff3c:	4b43      	ldr	r3, [pc, #268]	; (801004c <plug_holes+0x130>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d306      	bcc.n	800ff54 <plug_holes+0x38>
 800ff46:	4b3e      	ldr	r3, [pc, #248]	; (8010040 <plug_holes+0x124>)
 800ff48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ff4c:	4940      	ldr	r1, [pc, #256]	; (8010050 <plug_holes+0x134>)
 800ff4e:	483e      	ldr	r0, [pc, #248]	; (8010048 <plug_holes+0x12c>)
 800ff50:	f00b f96a 	bl	801b228 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	7a1b      	ldrb	r3, [r3, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d006      	beq.n	800ff6a <plug_holes+0x4e>
 800ff5c:	4b38      	ldr	r3, [pc, #224]	; (8010040 <plug_holes+0x124>)
 800ff5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ff62:	493c      	ldr	r1, [pc, #240]	; (8010054 <plug_holes+0x138>)
 800ff64:	4838      	ldr	r0, [pc, #224]	; (8010048 <plug_holes+0x12c>)
 800ff66:	f00b f95f 	bl	801b228 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	4a3a      	ldr	r2, [pc, #232]	; (8010058 <plug_holes+0x13c>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d906      	bls.n	800ff82 <plug_holes+0x66>
 800ff74:	4b32      	ldr	r3, [pc, #200]	; (8010040 <plug_holes+0x124>)
 800ff76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ff7a:	4938      	ldr	r1, [pc, #224]	; (801005c <plug_holes+0x140>)
 800ff7c:	4832      	ldr	r0, [pc, #200]	; (8010048 <plug_holes+0x12c>)
 800ff7e:	f00b f953 	bl	801b228 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff ffa8 	bl	800fedc <ptr_to_mem>
 800ff8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d024      	beq.n	800ffe0 <plug_holes+0xc4>
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	7a1b      	ldrb	r3, [r3, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d120      	bne.n	800ffe0 <plug_holes+0xc4>
 800ff9e:	4b2b      	ldr	r3, [pc, #172]	; (801004c <plug_holes+0x130>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68fa      	ldr	r2, [r7, #12]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d01b      	beq.n	800ffe0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ffa8:	4b2d      	ldr	r3, [pc, #180]	; (8010060 <plug_holes+0x144>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d102      	bne.n	800ffb8 <plug_holes+0x9c>
      lfree = mem;
 800ffb2:	4a2b      	ldr	r2, [pc, #172]	; (8010060 <plug_holes+0x144>)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a24      	ldr	r2, [pc, #144]	; (8010058 <plug_holes+0x13c>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d00a      	beq.n	800ffe0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff ff84 	bl	800fedc <ptr_to_mem>
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff ff90 	bl	800fefc <mem_to_ptr>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff ff79 	bl	800fedc <ptr_to_mem>
 800ffea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d01f      	beq.n	8010034 <plug_holes+0x118>
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	7a1b      	ldrb	r3, [r3, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d11b      	bne.n	8010034 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fffc:	4b18      	ldr	r3, [pc, #96]	; (8010060 <plug_holes+0x144>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	429a      	cmp	r2, r3
 8010004:	d102      	bne.n	801000c <plug_holes+0xf0>
      lfree = pmem;
 8010006:	4a16      	ldr	r2, [pc, #88]	; (8010060 <plug_holes+0x144>)
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a0f      	ldr	r2, [pc, #60]	; (8010058 <plug_holes+0x13c>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d00a      	beq.n	8010034 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff ff5a 	bl	800fedc <ptr_to_mem>
 8010028:	4604      	mov	r4, r0
 801002a:	68b8      	ldr	r0, [r7, #8]
 801002c:	f7ff ff66 	bl	800fefc <mem_to_ptr>
 8010030:	4603      	mov	r3, r0
 8010032:	6063      	str	r3, [r4, #4]
    }
  }
}
 8010034:	bf00      	nop
 8010036:	3714      	adds	r7, #20
 8010038:	46bd      	mov	sp, r7
 801003a:	bd90      	pop	{r4, r7, pc}
 801003c:	20000788 	.word	0x20000788
 8010040:	0801e298 	.word	0x0801e298
 8010044:	0801e2c8 	.word	0x0801e2c8
 8010048:	0801e2e0 	.word	0x0801e2e0
 801004c:	2000078c 	.word	0x2000078c
 8010050:	0801e308 	.word	0x0801e308
 8010054:	0801e324 	.word	0x0801e324
 8010058:	0001ffe8 	.word	0x0001ffe8
 801005c:	0801e340 	.word	0x0801e340
 8010060:	20000790 	.word	0x20000790

08010064 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801006a:	4b14      	ldr	r3, [pc, #80]	; (80100bc <mem_init+0x58>)
 801006c:	4a14      	ldr	r2, [pc, #80]	; (80100c0 <mem_init+0x5c>)
 801006e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010070:	4b12      	ldr	r3, [pc, #72]	; (80100bc <mem_init+0x58>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4a12      	ldr	r2, [pc, #72]	; (80100c4 <mem_init+0x60>)
 801007a:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010088:	480e      	ldr	r0, [pc, #56]	; (80100c4 <mem_init+0x60>)
 801008a:	f7ff ff27 	bl	800fedc <ptr_to_mem>
 801008e:	4603      	mov	r3, r0
 8010090:	4a0d      	ldr	r2, [pc, #52]	; (80100c8 <mem_init+0x64>)
 8010092:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010094:	4b0c      	ldr	r3, [pc, #48]	; (80100c8 <mem_init+0x64>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2201      	movs	r2, #1
 801009a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 801009c:	4b0a      	ldr	r3, [pc, #40]	; (80100c8 <mem_init+0x64>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a08      	ldr	r2, [pc, #32]	; (80100c4 <mem_init+0x60>)
 80100a2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80100a4:	4b08      	ldr	r3, [pc, #32]	; (80100c8 <mem_init+0x64>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a06      	ldr	r2, [pc, #24]	; (80100c4 <mem_init+0x60>)
 80100aa:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80100ac:	4b03      	ldr	r3, [pc, #12]	; (80100bc <mem_init+0x58>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a06      	ldr	r2, [pc, #24]	; (80100cc <mem_init+0x68>)
 80100b2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80100b4:	bf00      	nop
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	20000788 	.word	0x20000788
 80100c0:	30020000 	.word	0x30020000
 80100c4:	0001ffe8 	.word	0x0001ffe8
 80100c8:	2000078c 	.word	0x2000078c
 80100cc:	20000790 	.word	0x20000790

080100d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff ff0f 	bl	800fefc <mem_to_ptr>
 80100de:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fef9 	bl	800fedc <ptr_to_mem>
 80100ea:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff fef3 	bl	800fedc <ptr_to_mem>
 80100f6:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a11      	ldr	r2, [pc, #68]	; (8010144 <mem_link_valid+0x74>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d818      	bhi.n	8010134 <mem_link_valid+0x64>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	4a0f      	ldr	r2, [pc, #60]	; (8010144 <mem_link_valid+0x74>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d813      	bhi.n	8010134 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010110:	697a      	ldr	r2, [r7, #20]
 8010112:	429a      	cmp	r2, r3
 8010114:	d004      	beq.n	8010120 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	429a      	cmp	r2, r3
 801011e:	d109      	bne.n	8010134 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <mem_link_valid+0x78>)
 8010122:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010124:	693a      	ldr	r2, [r7, #16]
 8010126:	429a      	cmp	r2, r3
 8010128:	d006      	beq.n	8010138 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	429a      	cmp	r2, r3
 8010132:	d001      	beq.n	8010138 <mem_link_valid+0x68>
    return 0;
 8010134:	2300      	movs	r3, #0
 8010136:	e000      	b.n	801013a <mem_link_valid+0x6a>
  }
  return 1;
 8010138:	2301      	movs	r3, #1
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	0001ffe8 	.word	0x0001ffe8
 8010148:	2000078c 	.word	0x2000078c

0801014c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d04c      	beq.n	80101f4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f003 0303 	and.w	r3, r3, #3
 8010160:	2b00      	cmp	r3, #0
 8010162:	d007      	beq.n	8010174 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010164:	4b25      	ldr	r3, [pc, #148]	; (80101fc <mem_free+0xb0>)
 8010166:	f240 2273 	movw	r2, #627	; 0x273
 801016a:	4925      	ldr	r1, [pc, #148]	; (8010200 <mem_free+0xb4>)
 801016c:	4825      	ldr	r0, [pc, #148]	; (8010204 <mem_free+0xb8>)
 801016e:	f00b f85b 	bl	801b228 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010172:	e040      	b.n	80101f6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3b0c      	subs	r3, #12
 8010178:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801017a:	4b23      	ldr	r3, [pc, #140]	; (8010208 <mem_free+0xbc>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	429a      	cmp	r2, r3
 8010182:	d306      	bcc.n	8010192 <mem_free+0x46>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f103 020c 	add.w	r2, r3, #12
 801018a:	4b20      	ldr	r3, [pc, #128]	; (801020c <mem_free+0xc0>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	429a      	cmp	r2, r3
 8010190:	d907      	bls.n	80101a2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010192:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <mem_free+0xb0>)
 8010194:	f240 227f 	movw	r2, #639	; 0x27f
 8010198:	491d      	ldr	r1, [pc, #116]	; (8010210 <mem_free+0xc4>)
 801019a:	481a      	ldr	r0, [pc, #104]	; (8010204 <mem_free+0xb8>)
 801019c:	f00b f844 	bl	801b228 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101a0:	e029      	b.n	80101f6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	7a1b      	ldrb	r3, [r3, #8]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d107      	bne.n	80101ba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80101aa:	4b14      	ldr	r3, [pc, #80]	; (80101fc <mem_free+0xb0>)
 80101ac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80101b0:	4918      	ldr	r1, [pc, #96]	; (8010214 <mem_free+0xc8>)
 80101b2:	4814      	ldr	r0, [pc, #80]	; (8010204 <mem_free+0xb8>)
 80101b4:	f00b f838 	bl	801b228 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101b8:	e01d      	b.n	80101f6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7ff ff88 	bl	80100d0 <mem_link_valid>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d107      	bne.n	80101d6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80101c6:	4b0d      	ldr	r3, [pc, #52]	; (80101fc <mem_free+0xb0>)
 80101c8:	f240 2295 	movw	r2, #661	; 0x295
 80101cc:	4912      	ldr	r1, [pc, #72]	; (8010218 <mem_free+0xcc>)
 80101ce:	480d      	ldr	r0, [pc, #52]	; (8010204 <mem_free+0xb8>)
 80101d0:	f00b f82a 	bl	801b228 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101d4:	e00f      	b.n	80101f6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 80101dc:	4b0f      	ldr	r3, [pc, #60]	; (801021c <mem_free+0xd0>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d202      	bcs.n	80101ec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80101e6:	4a0d      	ldr	r2, [pc, #52]	; (801021c <mem_free+0xd0>)
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f7ff fe95 	bl	800ff1c <plug_holes>
 80101f2:	e000      	b.n	80101f6 <mem_free+0xaa>
    return;
 80101f4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	0801e298 	.word	0x0801e298
 8010200:	0801e36c 	.word	0x0801e36c
 8010204:	0801e2e0 	.word	0x0801e2e0
 8010208:	20000788 	.word	0x20000788
 801020c:	2000078c 	.word	0x2000078c
 8010210:	0801e390 	.word	0x0801e390
 8010214:	0801e3ac 	.word	0x0801e3ac
 8010218:	0801e3d4 	.word	0x0801e3d4
 801021c:	20000790 	.word	0x20000790

08010220 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b08a      	sub	sp, #40	; 0x28
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	3303      	adds	r3, #3
 801022e:	f023 0303 	bic.w	r3, r3, #3
 8010232:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010236:	2b0b      	cmp	r3, #11
 8010238:	d801      	bhi.n	801023e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801023a:	230c      	movs	r3, #12
 801023c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	4a68      	ldr	r2, [pc, #416]	; (80103e4 <mem_trim+0x1c4>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d803      	bhi.n	801024e <mem_trim+0x2e>
 8010246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	429a      	cmp	r2, r3
 801024c:	d201      	bcs.n	8010252 <mem_trim+0x32>
    return NULL;
 801024e:	2300      	movs	r3, #0
 8010250:	e0c4      	b.n	80103dc <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010252:	4b65      	ldr	r3, [pc, #404]	; (80103e8 <mem_trim+0x1c8>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	429a      	cmp	r2, r3
 801025a:	d304      	bcc.n	8010266 <mem_trim+0x46>
 801025c:	4b63      	ldr	r3, [pc, #396]	; (80103ec <mem_trim+0x1cc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	429a      	cmp	r2, r3
 8010264:	d306      	bcc.n	8010274 <mem_trim+0x54>
 8010266:	4b62      	ldr	r3, [pc, #392]	; (80103f0 <mem_trim+0x1d0>)
 8010268:	f240 22d1 	movw	r2, #721	; 0x2d1
 801026c:	4961      	ldr	r1, [pc, #388]	; (80103f4 <mem_trim+0x1d4>)
 801026e:	4862      	ldr	r0, [pc, #392]	; (80103f8 <mem_trim+0x1d8>)
 8010270:	f00a ffda 	bl	801b228 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010274:	4b5c      	ldr	r3, [pc, #368]	; (80103e8 <mem_trim+0x1c8>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d304      	bcc.n	8010288 <mem_trim+0x68>
 801027e:	4b5b      	ldr	r3, [pc, #364]	; (80103ec <mem_trim+0x1cc>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	429a      	cmp	r2, r3
 8010286:	d301      	bcc.n	801028c <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	e0a7      	b.n	80103dc <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	3b0c      	subs	r3, #12
 8010290:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010292:	6a38      	ldr	r0, [r7, #32]
 8010294:	f7ff fe32 	bl	800fefc <mem_to_ptr>
 8010298:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801029a:	6a3b      	ldr	r3, [r7, #32]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	3b0c      	subs	r3, #12
 80102a4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80102a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d906      	bls.n	80102bc <mem_trim+0x9c>
 80102ae:	4b50      	ldr	r3, [pc, #320]	; (80103f0 <mem_trim+0x1d0>)
 80102b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80102b4:	4951      	ldr	r1, [pc, #324]	; (80103fc <mem_trim+0x1dc>)
 80102b6:	4850      	ldr	r0, [pc, #320]	; (80103f8 <mem_trim+0x1d8>)
 80102b8:	f00a ffb6 	bl	801b228 <iprintf>
  if (newsize > size) {
 80102bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d901      	bls.n	80102c8 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	e089      	b.n	80103dc <mem_trim+0x1bc>
  }
  if (newsize == size) {
 80102c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d101      	bne.n	80102d4 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	e083      	b.n	80103dc <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff fdff 	bl	800fedc <ptr_to_mem>
 80102de:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	7a1b      	ldrb	r3, [r3, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d13c      	bne.n	8010362 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80102e8:	6a3b      	ldr	r3, [r7, #32]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a3d      	ldr	r2, [pc, #244]	; (80103e4 <mem_trim+0x1c4>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d106      	bne.n	8010300 <mem_trim+0xe0>
 80102f2:	4b3f      	ldr	r3, [pc, #252]	; (80103f0 <mem_trim+0x1d0>)
 80102f4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80102f8:	4941      	ldr	r1, [pc, #260]	; (8010400 <mem_trim+0x1e0>)
 80102fa:	483f      	ldr	r0, [pc, #252]	; (80103f8 <mem_trim+0x1d8>)
 80102fc:	f00a ff94 	bl	801b228 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010306:	69fa      	ldr	r2, [r7, #28]
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	4413      	add	r3, r2
 801030c:	330c      	adds	r3, #12
 801030e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8010310:	4b3c      	ldr	r3, [pc, #240]	; (8010404 <mem_trim+0x1e4>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	697a      	ldr	r2, [r7, #20]
 8010316:	429a      	cmp	r2, r3
 8010318:	d105      	bne.n	8010326 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 801031a:	6938      	ldr	r0, [r7, #16]
 801031c:	f7ff fdde 	bl	800fedc <ptr_to_mem>
 8010320:	4603      	mov	r3, r0
 8010322:	4a38      	ldr	r2, [pc, #224]	; (8010404 <mem_trim+0x1e4>)
 8010324:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010326:	6938      	ldr	r0, [r7, #16]
 8010328:	f7ff fdd8 	bl	800fedc <ptr_to_mem>
 801032c:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	2200      	movs	r2, #0
 8010332:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	69fa      	ldr	r2, [r7, #28]
 801033e:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8010340:	6a3b      	ldr	r3, [r7, #32]
 8010342:	693a      	ldr	r2, [r7, #16]
 8010344:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a26      	ldr	r2, [pc, #152]	; (80103e4 <mem_trim+0x1c4>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d044      	beq.n	80103da <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fdc1 	bl	800fedc <ptr_to_mem>
 801035a:	4602      	mov	r2, r0
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	6053      	str	r3, [r2, #4]
 8010360:	e03b      	b.n	80103da <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	3318      	adds	r3, #24
 8010366:	69ba      	ldr	r2, [r7, #24]
 8010368:	429a      	cmp	r2, r3
 801036a:	d336      	bcc.n	80103da <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801036c:	69fa      	ldr	r2, [r7, #28]
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	4413      	add	r3, r2
 8010372:	330c      	adds	r3, #12
 8010374:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a1a      	ldr	r2, [pc, #104]	; (80103e4 <mem_trim+0x1c4>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d106      	bne.n	801038e <mem_trim+0x16e>
 8010380:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <mem_trim+0x1d0>)
 8010382:	f240 3216 	movw	r2, #790	; 0x316
 8010386:	491e      	ldr	r1, [pc, #120]	; (8010400 <mem_trim+0x1e0>)
 8010388:	481b      	ldr	r0, [pc, #108]	; (80103f8 <mem_trim+0x1d8>)
 801038a:	f00a ff4d 	bl	801b228 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801038e:	6938      	ldr	r0, [r7, #16]
 8010390:	f7ff fda4 	bl	800fedc <ptr_to_mem>
 8010394:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8010396:	4b1b      	ldr	r3, [pc, #108]	; (8010404 <mem_trim+0x1e4>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	429a      	cmp	r2, r3
 801039e:	d202      	bcs.n	80103a6 <mem_trim+0x186>
      lfree = mem2;
 80103a0:	4a18      	ldr	r2, [pc, #96]	; (8010404 <mem_trim+0x1e4>)
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2200      	movs	r2, #0
 80103aa:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	69fa      	ldr	r2, [r7, #28]
 80103b8:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a07      	ldr	r2, [pc, #28]	; (80103e4 <mem_trim+0x1c4>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d007      	beq.n	80103da <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff fd84 	bl	800fedc <ptr_to_mem>
 80103d4:	4602      	mov	r2, r0
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80103da:	687b      	ldr	r3, [r7, #4]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3728      	adds	r7, #40	; 0x28
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	0001ffe8 	.word	0x0001ffe8
 80103e8:	20000788 	.word	0x20000788
 80103ec:	2000078c 	.word	0x2000078c
 80103f0:	0801e298 	.word	0x0801e298
 80103f4:	0801e408 	.word	0x0801e408
 80103f8:	0801e2e0 	.word	0x0801e2e0
 80103fc:	0801e420 	.word	0x0801e420
 8010400:	0801e440 	.word	0x0801e440
 8010404:	20000790 	.word	0x20000790

08010408 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b088      	sub	sp, #32
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d101      	bne.n	801041a <mem_malloc+0x12>
    return NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	e0d0      	b.n	80105bc <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	3303      	adds	r3, #3
 801041e:	f023 0303 	bic.w	r3, r3, #3
 8010422:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	2b0b      	cmp	r3, #11
 8010428:	d801      	bhi.n	801042e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801042a:	230c      	movs	r3, #12
 801042c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	4a64      	ldr	r2, [pc, #400]	; (80105c4 <mem_malloc+0x1bc>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d803      	bhi.n	801043e <mem_malloc+0x36>
 8010436:	69ba      	ldr	r2, [r7, #24]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	429a      	cmp	r2, r3
 801043c:	d201      	bcs.n	8010442 <mem_malloc+0x3a>
    return NULL;
 801043e:	2300      	movs	r3, #0
 8010440:	e0bc      	b.n	80105bc <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010442:	4b61      	ldr	r3, [pc, #388]	; (80105c8 <mem_malloc+0x1c0>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4618      	mov	r0, r3
 8010448:	f7ff fd58 	bl	800fefc <mem_to_ptr>
 801044c:	61f8      	str	r0, [r7, #28]
 801044e:	e0ad      	b.n	80105ac <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010450:	69f8      	ldr	r0, [r7, #28]
 8010452:	f7ff fd43 	bl	800fedc <ptr_to_mem>
 8010456:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	7a1b      	ldrb	r3, [r3, #8]
 801045c:	2b00      	cmp	r3, #0
 801045e:	f040 809f 	bne.w	80105a0 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 801046c:	69ba      	ldr	r2, [r7, #24]
 801046e:	429a      	cmp	r2, r3
 8010470:	f200 8096 	bhi.w	80105a0 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	f1a3 020c 	sub.w	r2, r3, #12
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	3318      	adds	r3, #24
 8010484:	429a      	cmp	r2, r3
 8010486:	d331      	bcc.n	80104ec <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010488:	69fa      	ldr	r2, [r7, #28]
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	4413      	add	r3, r2
 801048e:	330c      	adds	r3, #12
 8010490:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	4a4b      	ldr	r2, [pc, #300]	; (80105c4 <mem_malloc+0x1bc>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d106      	bne.n	80104a8 <mem_malloc+0xa0>
 801049a:	4b4c      	ldr	r3, [pc, #304]	; (80105cc <mem_malloc+0x1c4>)
 801049c:	f240 3287 	movw	r2, #903	; 0x387
 80104a0:	494b      	ldr	r1, [pc, #300]	; (80105d0 <mem_malloc+0x1c8>)
 80104a2:	484c      	ldr	r0, [pc, #304]	; (80105d4 <mem_malloc+0x1cc>)
 80104a4:	f00a fec0 	bl	801b228 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff fd17 	bl	800fedc <ptr_to_mem>
 80104ae:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	2200      	movs	r2, #0
 80104b4:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	69fa      	ldr	r2, [r7, #28]
 80104c2:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	2201      	movs	r2, #1
 80104ce:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4a3b      	ldr	r2, [pc, #236]	; (80105c4 <mem_malloc+0x1bc>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d00b      	beq.n	80104f2 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff fcfc 	bl	800fedc <ptr_to_mem>
 80104e4:	4602      	mov	r2, r0
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6053      	str	r3, [r2, #4]
 80104ea:	e002      	b.n	80104f2 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	2201      	movs	r2, #1
 80104f0:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80104f2:	4b35      	ldr	r3, [pc, #212]	; (80105c8 <mem_malloc+0x1c0>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d127      	bne.n	801054c <mem_malloc+0x144>
          struct mem *cur = lfree;
 80104fc:	4b32      	ldr	r3, [pc, #200]	; (80105c8 <mem_malloc+0x1c0>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010502:	e005      	b.n	8010510 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff fce7 	bl	800fedc <ptr_to_mem>
 801050e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	7a1b      	ldrb	r3, [r3, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <mem_malloc+0x11a>
 8010518:	4b2f      	ldr	r3, [pc, #188]	; (80105d8 <mem_malloc+0x1d0>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	429a      	cmp	r2, r3
 8010520:	d1f0      	bne.n	8010504 <mem_malloc+0xfc>
          }
          lfree = cur;
 8010522:	4a29      	ldr	r2, [pc, #164]	; (80105c8 <mem_malloc+0x1c0>)
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010528:	4b27      	ldr	r3, [pc, #156]	; (80105c8 <mem_malloc+0x1c0>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	4b2a      	ldr	r3, [pc, #168]	; (80105d8 <mem_malloc+0x1d0>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d00b      	beq.n	801054c <mem_malloc+0x144>
 8010534:	4b24      	ldr	r3, [pc, #144]	; (80105c8 <mem_malloc+0x1c0>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	7a1b      	ldrb	r3, [r3, #8]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d006      	beq.n	801054c <mem_malloc+0x144>
 801053e:	4b23      	ldr	r3, [pc, #140]	; (80105cc <mem_malloc+0x1c4>)
 8010540:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010544:	4925      	ldr	r1, [pc, #148]	; (80105dc <mem_malloc+0x1d4>)
 8010546:	4823      	ldr	r0, [pc, #140]	; (80105d4 <mem_malloc+0x1cc>)
 8010548:	f00a fe6e 	bl	801b228 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801054c:	693a      	ldr	r2, [r7, #16]
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	4413      	add	r3, r2
 8010552:	330c      	adds	r3, #12
 8010554:	4a20      	ldr	r2, [pc, #128]	; (80105d8 <mem_malloc+0x1d0>)
 8010556:	6812      	ldr	r2, [r2, #0]
 8010558:	4293      	cmp	r3, r2
 801055a:	d906      	bls.n	801056a <mem_malloc+0x162>
 801055c:	4b1b      	ldr	r3, [pc, #108]	; (80105cc <mem_malloc+0x1c4>)
 801055e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010562:	491f      	ldr	r1, [pc, #124]	; (80105e0 <mem_malloc+0x1d8>)
 8010564:	481b      	ldr	r0, [pc, #108]	; (80105d4 <mem_malloc+0x1cc>)
 8010566:	f00a fe5f 	bl	801b228 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	f003 0303 	and.w	r3, r3, #3
 8010570:	2b00      	cmp	r3, #0
 8010572:	d006      	beq.n	8010582 <mem_malloc+0x17a>
 8010574:	4b15      	ldr	r3, [pc, #84]	; (80105cc <mem_malloc+0x1c4>)
 8010576:	f240 32bb 	movw	r2, #955	; 0x3bb
 801057a:	491a      	ldr	r1, [pc, #104]	; (80105e4 <mem_malloc+0x1dc>)
 801057c:	4815      	ldr	r0, [pc, #84]	; (80105d4 <mem_malloc+0x1cc>)
 801057e:	f00a fe53 	bl	801b228 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f003 0303 	and.w	r3, r3, #3
 8010588:	2b00      	cmp	r3, #0
 801058a:	d006      	beq.n	801059a <mem_malloc+0x192>
 801058c:	4b0f      	ldr	r3, [pc, #60]	; (80105cc <mem_malloc+0x1c4>)
 801058e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010592:	4915      	ldr	r1, [pc, #84]	; (80105e8 <mem_malloc+0x1e0>)
 8010594:	480f      	ldr	r0, [pc, #60]	; (80105d4 <mem_malloc+0x1cc>)
 8010596:	f00a fe47 	bl	801b228 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	330c      	adds	r3, #12
 801059e:	e00d      	b.n	80105bc <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 80105a0:	69f8      	ldr	r0, [r7, #28]
 80105a2:	f7ff fc9b 	bl	800fedc <ptr_to_mem>
 80105a6:	4603      	mov	r3, r0
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80105ac:	69ba      	ldr	r2, [r7, #24]
 80105ae:	4b05      	ldr	r3, [pc, #20]	; (80105c4 <mem_malloc+0x1bc>)
 80105b0:	1a9b      	subs	r3, r3, r2
 80105b2:	69fa      	ldr	r2, [r7, #28]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	f4ff af4b 	bcc.w	8010450 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3720      	adds	r7, #32
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	0001ffe8 	.word	0x0001ffe8
 80105c8:	20000790 	.word	0x20000790
 80105cc:	0801e298 	.word	0x0801e298
 80105d0:	0801e440 	.word	0x0801e440
 80105d4:	0801e2e0 	.word	0x0801e2e0
 80105d8:	2000078c 	.word	0x2000078c
 80105dc:	0801e454 	.word	0x0801e454
 80105e0:	0801e470 	.word	0x0801e470
 80105e4:	0801e4a0 	.word	0x0801e4a0
 80105e8:	0801e4d0 	.word	0x0801e4d0

080105ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b085      	sub	sp, #20
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	2200      	movs	r2, #0
 80105fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	3303      	adds	r3, #3
 8010602:	f023 0303 	bic.w	r3, r3, #3
 8010606:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010608:	2300      	movs	r3, #0
 801060a:	60fb      	str	r3, [r7, #12]
 801060c:	e011      	b.n	8010632 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	689b      	ldr	r3, [r3, #8]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	461a      	mov	r2, r3
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	4413      	add	r3, r2
 801062a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	3301      	adds	r3, #1
 8010630:	60fb      	str	r3, [r7, #12]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	885b      	ldrh	r3, [r3, #2]
 8010636:	461a      	mov	r2, r3
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	4293      	cmp	r3, r2
 801063c:	dbe7      	blt.n	801060e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801063e:	bf00      	nop
 8010640:	bf00      	nop
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010652:	2300      	movs	r3, #0
 8010654:	80fb      	strh	r3, [r7, #6]
 8010656:	e009      	b.n	801066c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010658:	88fb      	ldrh	r3, [r7, #6]
 801065a:	4a08      	ldr	r2, [pc, #32]	; (801067c <memp_init+0x30>)
 801065c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff ffc3 	bl	80105ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010666:	88fb      	ldrh	r3, [r7, #6]
 8010668:	3301      	adds	r3, #1
 801066a:	80fb      	strh	r3, [r7, #6]
 801066c:	88fb      	ldrh	r3, [r7, #6]
 801066e:	2b08      	cmp	r3, #8
 8010670:	d9f2      	bls.n	8010658 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010672:	bf00      	nop
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	08020cf8 	.word	0x08020cf8

08010680 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d012      	beq.n	80106bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	6812      	ldr	r2, [r2, #0]
 801069e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f003 0303 	and.w	r3, r3, #3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d006      	beq.n	80106b8 <do_memp_malloc_pool+0x38>
 80106aa:	4b07      	ldr	r3, [pc, #28]	; (80106c8 <do_memp_malloc_pool+0x48>)
 80106ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80106b0:	4906      	ldr	r1, [pc, #24]	; (80106cc <do_memp_malloc_pool+0x4c>)
 80106b2:	4807      	ldr	r0, [pc, #28]	; (80106d0 <do_memp_malloc_pool+0x50>)
 80106b4:	f00a fdb8 	bl	801b228 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	e000      	b.n	80106be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	0801e4f4 	.word	0x0801e4f4
 80106cc:	0801e524 	.word	0x0801e524
 80106d0:	0801e548 	.word	0x0801e548

080106d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d106      	bne.n	80106f0 <memp_malloc_pool+0x1c>
 80106e2:	4b0a      	ldr	r3, [pc, #40]	; (801070c <memp_malloc_pool+0x38>)
 80106e4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80106e8:	4909      	ldr	r1, [pc, #36]	; (8010710 <memp_malloc_pool+0x3c>)
 80106ea:	480a      	ldr	r0, [pc, #40]	; (8010714 <memp_malloc_pool+0x40>)
 80106ec:	f00a fd9c 	bl	801b228 <iprintf>
  if (desc == NULL) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d101      	bne.n	80106fa <memp_malloc_pool+0x26>
    return NULL;
 80106f6:	2300      	movs	r3, #0
 80106f8:	e003      	b.n	8010702 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7ff ffc0 	bl	8010680 <do_memp_malloc_pool>
 8010700:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010702:	4618      	mov	r0, r3
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801e4f4 	.word	0x0801e4f4
 8010710:	0801e570 	.word	0x0801e570
 8010714:	0801e548 	.word	0x0801e548

08010718 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	2b08      	cmp	r3, #8
 8010726:	d908      	bls.n	801073a <memp_malloc+0x22>
 8010728:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <memp_malloc+0x3c>)
 801072a:	f240 1257 	movw	r2, #343	; 0x157
 801072e:	490a      	ldr	r1, [pc, #40]	; (8010758 <memp_malloc+0x40>)
 8010730:	480a      	ldr	r0, [pc, #40]	; (801075c <memp_malloc+0x44>)
 8010732:	f00a fd79 	bl	801b228 <iprintf>
 8010736:	2300      	movs	r3, #0
 8010738:	e008      	b.n	801074c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	4a08      	ldr	r2, [pc, #32]	; (8010760 <memp_malloc+0x48>)
 801073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff ff9c 	bl	8010680 <do_memp_malloc_pool>
 8010748:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801074a:	68fb      	ldr	r3, [r7, #12]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	0801e4f4 	.word	0x0801e4f4
 8010758:	0801e584 	.word	0x0801e584
 801075c:	0801e548 	.word	0x0801e548
 8010760:	08020cf8 	.word	0x08020cf8

08010764 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	f003 0303 	and.w	r3, r3, #3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d006      	beq.n	8010786 <do_memp_free_pool+0x22>
 8010778:	4b0a      	ldr	r3, [pc, #40]	; (80107a4 <do_memp_free_pool+0x40>)
 801077a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801077e:	490a      	ldr	r1, [pc, #40]	; (80107a8 <do_memp_free_pool+0x44>)
 8010780:	480a      	ldr	r0, [pc, #40]	; (80107ac <do_memp_free_pool+0x48>)
 8010782:	f00a fd51 	bl	801b228 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801079c:	bf00      	nop
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	0801e4f4 	.word	0x0801e4f4
 80107a8:	0801e5a4 	.word	0x0801e5a4
 80107ac:	0801e548 	.word	0x0801e548

080107b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d106      	bne.n	80107ce <memp_free_pool+0x1e>
 80107c0:	4b0a      	ldr	r3, [pc, #40]	; (80107ec <memp_free_pool+0x3c>)
 80107c2:	f240 1295 	movw	r2, #405	; 0x195
 80107c6:	490a      	ldr	r1, [pc, #40]	; (80107f0 <memp_free_pool+0x40>)
 80107c8:	480a      	ldr	r0, [pc, #40]	; (80107f4 <memp_free_pool+0x44>)
 80107ca:	f00a fd2d 	bl	801b228 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d007      	beq.n	80107e4 <memp_free_pool+0x34>
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d004      	beq.n	80107e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffc1 	bl	8010764 <do_memp_free_pool>
 80107e2:	e000      	b.n	80107e6 <memp_free_pool+0x36>
    return;
 80107e4:	bf00      	nop
}
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	0801e4f4 	.word	0x0801e4f4
 80107f0:	0801e570 	.word	0x0801e570
 80107f4:	0801e548 	.word	0x0801e548

080107f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	4603      	mov	r3, r0
 8010800:	6039      	str	r1, [r7, #0]
 8010802:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010804:	79fb      	ldrb	r3, [r7, #7]
 8010806:	2b08      	cmp	r3, #8
 8010808:	d907      	bls.n	801081a <memp_free+0x22>
 801080a:	4b0c      	ldr	r3, [pc, #48]	; (801083c <memp_free+0x44>)
 801080c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010810:	490b      	ldr	r1, [pc, #44]	; (8010840 <memp_free+0x48>)
 8010812:	480c      	ldr	r0, [pc, #48]	; (8010844 <memp_free+0x4c>)
 8010814:	f00a fd08 	bl	801b228 <iprintf>
 8010818:	e00c      	b.n	8010834 <memp_free+0x3c>

  if (mem == NULL) {
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d008      	beq.n	8010832 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010820:	79fb      	ldrb	r3, [r7, #7]
 8010822:	4a09      	ldr	r2, [pc, #36]	; (8010848 <memp_free+0x50>)
 8010824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010828:	6839      	ldr	r1, [r7, #0]
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff ff9a 	bl	8010764 <do_memp_free_pool>
 8010830:	e000      	b.n	8010834 <memp_free+0x3c>
    return;
 8010832:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	0801e4f4 	.word	0x0801e4f4
 8010840:	0801e5c4 	.word	0x0801e5c4
 8010844:	0801e548 	.word	0x0801e548
 8010848:	08020cf8 	.word	0x08020cf8

0801084c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801084c:	b480      	push	{r7}
 801084e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010850:	bf00      	nop
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr
	...

0801085c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
 8010868:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d108      	bne.n	8010882 <netif_add+0x26>
 8010870:	4b57      	ldr	r3, [pc, #348]	; (80109d0 <netif_add+0x174>)
 8010872:	f240 1227 	movw	r2, #295	; 0x127
 8010876:	4957      	ldr	r1, [pc, #348]	; (80109d4 <netif_add+0x178>)
 8010878:	4857      	ldr	r0, [pc, #348]	; (80109d8 <netif_add+0x17c>)
 801087a:	f00a fcd5 	bl	801b228 <iprintf>
 801087e:	2300      	movs	r3, #0
 8010880:	e0a2      	b.n	80109c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d108      	bne.n	801089a <netif_add+0x3e>
 8010888:	4b51      	ldr	r3, [pc, #324]	; (80109d0 <netif_add+0x174>)
 801088a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801088e:	4953      	ldr	r1, [pc, #332]	; (80109dc <netif_add+0x180>)
 8010890:	4851      	ldr	r0, [pc, #324]	; (80109d8 <netif_add+0x17c>)
 8010892:	f00a fcc9 	bl	801b228 <iprintf>
 8010896:	2300      	movs	r3, #0
 8010898:	e096      	b.n	80109c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80108a0:	4b4f      	ldr	r3, [pc, #316]	; (80109e0 <netif_add+0x184>)
 80108a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80108aa:	4b4d      	ldr	r3, [pc, #308]	; (80109e0 <netif_add+0x184>)
 80108ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d101      	bne.n	80108b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80108b4:	4b4a      	ldr	r3, [pc, #296]	; (80109e0 <netif_add+0x184>)
 80108b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2200      	movs	r2, #0
 80108c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	4a45      	ldr	r2, [pc, #276]	; (80109e4 <netif_add+0x188>)
 80108ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2200      	movs	r2, #0
 80108d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2200      	movs	r2, #0
 80108da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2200      	movs	r2, #0
 80108e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6a3a      	ldr	r2, [r7, #32]
 80108e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80108ea:	4b3f      	ldr	r3, [pc, #252]	; (80109e8 <netif_add+0x18c>)
 80108ec:	781a      	ldrb	r2, [r3, #0]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	68b9      	ldr	r1, [r7, #8]
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f000 f913 	bl	8010b2c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	4798      	blx	r3
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <netif_add+0xba>
    return NULL;
 8010912:	2300      	movs	r3, #0
 8010914:	e058      	b.n	80109c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801091c:	2bff      	cmp	r3, #255	; 0xff
 801091e:	d103      	bne.n	8010928 <netif_add+0xcc>
        netif->num = 0;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010928:	2300      	movs	r3, #0
 801092a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801092c:	4b2f      	ldr	r3, [pc, #188]	; (80109ec <netif_add+0x190>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	617b      	str	r3, [r7, #20]
 8010932:	e02b      	b.n	801098c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010934:	697a      	ldr	r2, [r7, #20]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	429a      	cmp	r2, r3
 801093a:	d106      	bne.n	801094a <netif_add+0xee>
 801093c:	4b24      	ldr	r3, [pc, #144]	; (80109d0 <netif_add+0x174>)
 801093e:	f240 128b 	movw	r2, #395	; 0x18b
 8010942:	492b      	ldr	r1, [pc, #172]	; (80109f0 <netif_add+0x194>)
 8010944:	4824      	ldr	r0, [pc, #144]	; (80109d8 <netif_add+0x17c>)
 8010946:	f00a fc6f 	bl	801b228 <iprintf>
        num_netifs++;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	3301      	adds	r3, #1
 801094e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	2bff      	cmp	r3, #255	; 0xff
 8010954:	dd06      	ble.n	8010964 <netif_add+0x108>
 8010956:	4b1e      	ldr	r3, [pc, #120]	; (80109d0 <netif_add+0x174>)
 8010958:	f240 128d 	movw	r2, #397	; 0x18d
 801095c:	4925      	ldr	r1, [pc, #148]	; (80109f4 <netif_add+0x198>)
 801095e:	481e      	ldr	r0, [pc, #120]	; (80109d8 <netif_add+0x17c>)
 8010960:	f00a fc62 	bl	801b228 <iprintf>
        if (netif2->num == netif->num) {
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010970:	429a      	cmp	r2, r3
 8010972:	d108      	bne.n	8010986 <netif_add+0x12a>
          netif->num++;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801097a:	3301      	adds	r3, #1
 801097c:	b2da      	uxtb	r2, r3
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010984:	e005      	b.n	8010992 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	617b      	str	r3, [r7, #20]
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1d0      	bne.n	8010934 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d1be      	bne.n	8010916 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801099e:	2bfe      	cmp	r3, #254	; 0xfe
 80109a0:	d103      	bne.n	80109aa <netif_add+0x14e>
    netif_num = 0;
 80109a2:	4b11      	ldr	r3, [pc, #68]	; (80109e8 <netif_add+0x18c>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	701a      	strb	r2, [r3, #0]
 80109a8:	e006      	b.n	80109b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109b0:	3301      	adds	r3, #1
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	4b0c      	ldr	r3, [pc, #48]	; (80109e8 <netif_add+0x18c>)
 80109b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80109b8:	4b0c      	ldr	r3, [pc, #48]	; (80109ec <netif_add+0x190>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80109c0:	4a0a      	ldr	r2, [pc, #40]	; (80109ec <netif_add+0x190>)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80109c6:	68fb      	ldr	r3, [r7, #12]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3718      	adds	r7, #24
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	0801e5e0 	.word	0x0801e5e0
 80109d4:	0801e674 	.word	0x0801e674
 80109d8:	0801e630 	.word	0x0801e630
 80109dc:	0801e690 	.word	0x0801e690
 80109e0:	08020d5c 	.word	0x08020d5c
 80109e4:	08010e07 	.word	0x08010e07
 80109e8:	20007048 	.word	0x20007048
 80109ec:	20007040 	.word	0x20007040
 80109f0:	0801e6b4 	.word	0x0801e6b4
 80109f4:	0801e6c8 	.word	0x0801e6c8

080109f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f002 fde7 	bl	80135d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010a0a:	6839      	ldr	r1, [r7, #0]
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f007 fb23 	bl	8018058 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010a12:	bf00      	nop
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d106      	bne.n	8010a3c <netif_do_set_ipaddr+0x20>
 8010a2e:	4b1d      	ldr	r3, [pc, #116]	; (8010aa4 <netif_do_set_ipaddr+0x88>)
 8010a30:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010a34:	491c      	ldr	r1, [pc, #112]	; (8010aa8 <netif_do_set_ipaddr+0x8c>)
 8010a36:	481d      	ldr	r0, [pc, #116]	; (8010aac <netif_do_set_ipaddr+0x90>)
 8010a38:	f00a fbf6 	bl	801b228 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d106      	bne.n	8010a50 <netif_do_set_ipaddr+0x34>
 8010a42:	4b18      	ldr	r3, [pc, #96]	; (8010aa4 <netif_do_set_ipaddr+0x88>)
 8010a44:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010a48:	4917      	ldr	r1, [pc, #92]	; (8010aa8 <netif_do_set_ipaddr+0x8c>)
 8010a4a:	4818      	ldr	r0, [pc, #96]	; (8010aac <netif_do_set_ipaddr+0x90>)
 8010a4c:	f00a fbec 	bl	801b228 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	3304      	adds	r3, #4
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d01c      	beq.n	8010a98 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3304      	adds	r3, #4
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010a6e:	f107 0314 	add.w	r3, r7, #20
 8010a72:	4619      	mov	r1, r3
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7ff ffbf 	bl	80109f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d002      	beq.n	8010a86 <netif_do_set_ipaddr+0x6a>
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	e000      	b.n	8010a88 <netif_do_set_ipaddr+0x6c>
 8010a86:	2300      	movs	r3, #0
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010a8c:	2101      	movs	r1, #1
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 f8d2 	bl	8010c38 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010a94:	2301      	movs	r3, #1
 8010a96:	e000      	b.n	8010a9a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3718      	adds	r7, #24
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	0801e5e0 	.word	0x0801e5e0
 8010aa8:	0801e6f8 	.word	0x0801e6f8
 8010aac:	0801e630 	.word	0x0801e630

08010ab0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	3308      	adds	r3, #8
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d00a      	beq.n	8010ae0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d002      	beq.n	8010ad6 <netif_do_set_netmask+0x26>
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	e000      	b.n	8010ad8 <netif_do_set_netmask+0x28>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010adc:	2301      	movs	r3, #1
 8010ade:	e000      	b.n	8010ae2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b085      	sub	sp, #20
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	60f8      	str	r0, [r7, #12]
 8010af6:	60b9      	str	r1, [r7, #8]
 8010af8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	330c      	adds	r3, #12
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d00a      	beq.n	8010b1e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d002      	beq.n	8010b14 <netif_do_set_gw+0x26>
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	e000      	b.n	8010b16 <netif_do_set_gw+0x28>
 8010b14:	2300      	movs	r3, #0
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e000      	b.n	8010b20 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
 8010b38:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010b48:	4b1c      	ldr	r3, [pc, #112]	; (8010bbc <netif_set_addr+0x90>)
 8010b4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010b52:	4b1a      	ldr	r3, [pc, #104]	; (8010bbc <netif_set_addr+0x90>)
 8010b54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d101      	bne.n	8010b60 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010b5c:	4b17      	ldr	r3, [pc, #92]	; (8010bbc <netif_set_addr+0x90>)
 8010b5e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <netif_set_addr+0x42>
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <netif_set_addr+0x46>
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e000      	b.n	8010b74 <netif_set_addr+0x48>
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d006      	beq.n	8010b8a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010b7c:	f107 0310 	add.w	r3, r7, #16
 8010b80:	461a      	mov	r2, r3
 8010b82:	68b9      	ldr	r1, [r7, #8]
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f7ff ff49 	bl	8010a1c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	6879      	ldr	r1, [r7, #4]
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7ff ff8e 	bl	8010ab0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010b94:	69ba      	ldr	r2, [r7, #24]
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f7ff ffa8 	bl	8010aee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d106      	bne.n	8010bb2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010ba4:	f107 0310 	add.w	r3, r7, #16
 8010ba8:	461a      	mov	r2, r3
 8010baa:	68b9      	ldr	r1, [r7, #8]
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7ff ff35 	bl	8010a1c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010bb2:	bf00      	nop
 8010bb4:	3720      	adds	r7, #32
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	08020d5c 	.word	0x08020d5c

08010bc0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010bc8:	4a04      	ldr	r2, [pc, #16]	; (8010bdc <netif_set_default+0x1c>)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	20007044 	.word	0x20007044

08010be0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d107      	bne.n	8010bfe <netif_set_up+0x1e>
 8010bee:	4b0f      	ldr	r3, [pc, #60]	; (8010c2c <netif_set_up+0x4c>)
 8010bf0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010bf4:	490e      	ldr	r1, [pc, #56]	; (8010c30 <netif_set_up+0x50>)
 8010bf6:	480f      	ldr	r0, [pc, #60]	; (8010c34 <netif_set_up+0x54>)
 8010bf8:	f00a fb16 	bl	801b228 <iprintf>
 8010bfc:	e013      	b.n	8010c26 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c04:	f003 0301 	and.w	r3, r3, #1
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10c      	bne.n	8010c26 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c12:	f043 0301 	orr.w	r3, r3, #1
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010c1e:	2103      	movs	r1, #3
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 f809 	bl	8010c38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	0801e5e0 	.word	0x0801e5e0
 8010c30:	0801e768 	.word	0x0801e768
 8010c34:	0801e630 	.word	0x0801e630

08010c38 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <netif_issue_reports+0x20>
 8010c4a:	4b18      	ldr	r3, [pc, #96]	; (8010cac <netif_issue_reports+0x74>)
 8010c4c:	f240 326d 	movw	r2, #877	; 0x36d
 8010c50:	4917      	ldr	r1, [pc, #92]	; (8010cb0 <netif_issue_reports+0x78>)
 8010c52:	4818      	ldr	r0, [pc, #96]	; (8010cb4 <netif_issue_reports+0x7c>)
 8010c54:	f00a fae8 	bl	801b228 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c5e:	f003 0304 	and.w	r3, r3, #4
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d01e      	beq.n	8010ca4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c6c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d017      	beq.n	8010ca4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010c74:	78fb      	ldrb	r3, [r7, #3]
 8010c76:	f003 0301 	and.w	r3, r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d013      	beq.n	8010ca6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	3304      	adds	r3, #4
 8010c82:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00e      	beq.n	8010ca6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c8e:	f003 0308 	and.w	r3, r3, #8
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d007      	beq.n	8010ca6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	3304      	adds	r3, #4
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f008 f945 	bl	8018f2c <etharp_request>
 8010ca2:	e000      	b.n	8010ca6 <netif_issue_reports+0x6e>
    return;
 8010ca4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	0801e5e0 	.word	0x0801e5e0
 8010cb0:	0801e784 	.word	0x0801e784
 8010cb4:	0801e630 	.word	0x0801e630

08010cb8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d107      	bne.n	8010cd6 <netif_set_down+0x1e>
 8010cc6:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <netif_set_down+0x58>)
 8010cc8:	f240 329b 	movw	r2, #923	; 0x39b
 8010ccc:	4911      	ldr	r1, [pc, #68]	; (8010d14 <netif_set_down+0x5c>)
 8010cce:	4812      	ldr	r0, [pc, #72]	; (8010d18 <netif_set_down+0x60>)
 8010cd0:	f00a faaa 	bl	801b228 <iprintf>
 8010cd4:	e019      	b.n	8010d0a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d012      	beq.n	8010d0a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cea:	f023 0301 	bic.w	r3, r3, #1
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cfc:	f003 0308 	and.w	r3, r3, #8
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d002      	beq.n	8010d0a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f007 fccf 	bl	80186a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	0801e5e0 	.word	0x0801e5e0
 8010d14:	0801e7a8 	.word	0x0801e7a8
 8010d18:	0801e630 	.word	0x0801e630

08010d1c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d107      	bne.n	8010d3a <netif_set_link_up+0x1e>
 8010d2a:	4b13      	ldr	r3, [pc, #76]	; (8010d78 <netif_set_link_up+0x5c>)
 8010d2c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010d30:	4912      	ldr	r1, [pc, #72]	; (8010d7c <netif_set_link_up+0x60>)
 8010d32:	4813      	ldr	r0, [pc, #76]	; (8010d80 <netif_set_link_up+0x64>)
 8010d34:	f00a fa78 	bl	801b228 <iprintf>
 8010d38:	e01b      	b.n	8010d72 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d40:	f003 0304 	and.w	r3, r3, #4
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d114      	bne.n	8010d72 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d4e:	f043 0304 	orr.w	r3, r3, #4
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d5a:	2103      	movs	r1, #3
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff ff6b 	bl	8010c38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	69db      	ldr	r3, [r3, #28]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d003      	beq.n	8010d72 <netif_set_link_up+0x56>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	69db      	ldr	r3, [r3, #28]
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	0801e5e0 	.word	0x0801e5e0
 8010d7c:	0801e7c8 	.word	0x0801e7c8
 8010d80:	0801e630 	.word	0x0801e630

08010d84 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d107      	bne.n	8010da2 <netif_set_link_down+0x1e>
 8010d92:	4b11      	ldr	r3, [pc, #68]	; (8010dd8 <netif_set_link_down+0x54>)
 8010d94:	f240 4206 	movw	r2, #1030	; 0x406
 8010d98:	4910      	ldr	r1, [pc, #64]	; (8010ddc <netif_set_link_down+0x58>)
 8010d9a:	4811      	ldr	r0, [pc, #68]	; (8010de0 <netif_set_link_down+0x5c>)
 8010d9c:	f00a fa44 	bl	801b228 <iprintf>
 8010da0:	e017      	b.n	8010dd2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010da8:	f003 0304 	and.w	r3, r3, #4
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d010      	beq.n	8010dd2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010db6:	f023 0304 	bic.w	r3, r3, #4
 8010dba:	b2da      	uxtb	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	69db      	ldr	r3, [r3, #28]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d003      	beq.n	8010dd2 <netif_set_link_down+0x4e>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	0801e5e0 	.word	0x0801e5e0
 8010ddc:	0801e7ec 	.word	0x0801e7ec
 8010de0:	0801e630 	.word	0x0801e630

08010de4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	683a      	ldr	r2, [r7, #0]
 8010df8:	61da      	str	r2, [r3, #28]
  }
}
 8010dfa:	bf00      	nop
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e06:	b480      	push	{r7}
 8010e08:	b085      	sub	sp, #20
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	60b9      	str	r1, [r7, #8]
 8010e10:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010e12:	f06f 030b 	mvn.w	r3, #11
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3714      	adds	r7, #20
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
	...

08010e24 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010e2e:	79fb      	ldrb	r3, [r7, #7]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d013      	beq.n	8010e5c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010e34:	4b0d      	ldr	r3, [pc, #52]	; (8010e6c <netif_get_by_index+0x48>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	e00c      	b.n	8010e56 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e42:	3301      	adds	r3, #1
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	79fa      	ldrb	r2, [r7, #7]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d101      	bne.n	8010e50 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	e006      	b.n	8010e5e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	60fb      	str	r3, [r7, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1ef      	bne.n	8010e3c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3714      	adds	r7, #20
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	20007040 	.word	0x20007040

08010e70 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010e76:	4b0c      	ldr	r3, [pc, #48]	; (8010ea8 <pbuf_free_ooseq+0x38>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <pbuf_free_ooseq+0x3c>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	607b      	str	r3, [r7, #4]
 8010e82:	e00a      	b.n	8010e9a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d003      	beq.n	8010e94 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f002 fbe1 	bl	8013654 <tcp_free_ooseq>
      return;
 8010e92:	e005      	b.n	8010ea0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	607b      	str	r3, [r7, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1f1      	bne.n	8010e84 <pbuf_free_ooseq+0x14>
    }
  }
}
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20007049 	.word	0x20007049
 8010eac:	20007058 	.word	0x20007058

08010eb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010eb4:	4b03      	ldr	r3, [pc, #12]	; (8010ec4 <pbuf_pool_is_empty+0x14>)
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010eba:	bf00      	nop
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr
 8010ec4:	20007049 	.word	0x20007049

08010ec8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	4611      	mov	r1, r2
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	80fb      	strh	r3, [r7, #6]
 8010eda:	4613      	mov	r3, r2
 8010edc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	88fa      	ldrh	r2, [r7, #6]
 8010eee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	88ba      	ldrh	r2, [r7, #4]
 8010ef4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010ef6:	8b3b      	ldrh	r3, [r7, #24]
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	7f3a      	ldrb	r2, [r7, #28]
 8010f02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2201      	movs	r2, #1
 8010f08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	73da      	strb	r2, [r3, #15]
}
 8010f10:	bf00      	nop
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b08c      	sub	sp, #48	; 0x30
 8010f20:	af02      	add	r7, sp, #8
 8010f22:	4603      	mov	r3, r0
 8010f24:	71fb      	strb	r3, [r7, #7]
 8010f26:	460b      	mov	r3, r1
 8010f28:	80bb      	strh	r3, [r7, #4]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010f2e:	79fb      	ldrb	r3, [r7, #7]
 8010f30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010f32:	887b      	ldrh	r3, [r7, #2]
 8010f34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f38:	f000 8082 	beq.w	8011040 <pbuf_alloc+0x124>
 8010f3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f40:	f300 80c9 	bgt.w	80110d6 <pbuf_alloc+0x1ba>
 8010f44:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f48:	d010      	beq.n	8010f6c <pbuf_alloc+0x50>
 8010f4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f4e:	f300 80c2 	bgt.w	80110d6 <pbuf_alloc+0x1ba>
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d002      	beq.n	8010f5c <pbuf_alloc+0x40>
 8010f56:	2b41      	cmp	r3, #65	; 0x41
 8010f58:	f040 80bd 	bne.w	80110d6 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010f5c:	887a      	ldrh	r2, [r7, #2]
 8010f5e:	88bb      	ldrh	r3, [r7, #4]
 8010f60:	4619      	mov	r1, r3
 8010f62:	2000      	movs	r0, #0
 8010f64:	f000 f8d2 	bl	801110c <pbuf_alloc_reference>
 8010f68:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010f6a:	e0be      	b.n	80110ea <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010f70:	2300      	movs	r3, #0
 8010f72:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010f74:	88bb      	ldrh	r3, [r7, #4]
 8010f76:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010f78:	2008      	movs	r0, #8
 8010f7a:	f7ff fbcd 	bl	8010718 <memp_malloc>
 8010f7e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d109      	bne.n	8010f9a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010f86:	f7ff ff93 	bl	8010eb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d002      	beq.n	8010f96 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f92:	f000 faa7 	bl	80114e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	e0a8      	b.n	80110ec <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f9c:	3303      	adds	r3, #3
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	f023 0303 	bic.w	r3, r3, #3
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010faa:	1a9b      	subs	r3, r3, r2
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	8b7a      	ldrh	r2, [r7, #26]
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	bf28      	it	cs
 8010fb4:	4613      	movcs	r3, r2
 8010fb6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fba:	3310      	adds	r3, #16
 8010fbc:	693a      	ldr	r2, [r7, #16]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	3303      	adds	r3, #3
 8010fc2:	f023 0303 	bic.w	r3, r3, #3
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	89f9      	ldrh	r1, [r7, #14]
 8010fca:	8b7a      	ldrh	r2, [r7, #26]
 8010fcc:	2300      	movs	r3, #0
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	887b      	ldrh	r3, [r7, #2]
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	4601      	mov	r1, r0
 8010fd8:	6938      	ldr	r0, [r7, #16]
 8010fda:	f7ff ff75 	bl	8010ec8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	f003 0303 	and.w	r3, r3, #3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d006      	beq.n	8010ff8 <pbuf_alloc+0xdc>
 8010fea:	4b42      	ldr	r3, [pc, #264]	; (80110f4 <pbuf_alloc+0x1d8>)
 8010fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ff0:	4941      	ldr	r1, [pc, #260]	; (80110f8 <pbuf_alloc+0x1dc>)
 8010ff2:	4842      	ldr	r0, [pc, #264]	; (80110fc <pbuf_alloc+0x1e0>)
 8010ff4:	f00a f918 	bl	801b228 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ffa:	3303      	adds	r3, #3
 8010ffc:	f023 0303 	bic.w	r3, r3, #3
 8011000:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8011004:	4293      	cmp	r3, r2
 8011006:	d106      	bne.n	8011016 <pbuf_alloc+0xfa>
 8011008:	4b3a      	ldr	r3, [pc, #232]	; (80110f4 <pbuf_alloc+0x1d8>)
 801100a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801100e:	493c      	ldr	r1, [pc, #240]	; (8011100 <pbuf_alloc+0x1e4>)
 8011010:	483a      	ldr	r0, [pc, #232]	; (80110fc <pbuf_alloc+0x1e0>)
 8011012:	f00a f909 	bl	801b228 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	2b00      	cmp	r3, #0
 801101a:	d102      	bne.n	8011022 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	627b      	str	r3, [r7, #36]	; 0x24
 8011020:	e002      	b.n	8011028 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801102c:	8b7a      	ldrh	r2, [r7, #26]
 801102e:	89fb      	ldrh	r3, [r7, #14]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011038:	8b7b      	ldrh	r3, [r7, #26]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d19c      	bne.n	8010f78 <pbuf_alloc+0x5c>
      break;
 801103e:	e054      	b.n	80110ea <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011042:	3303      	adds	r3, #3
 8011044:	b29b      	uxth	r3, r3
 8011046:	f023 0303 	bic.w	r3, r3, #3
 801104a:	b29a      	uxth	r2, r3
 801104c:	88bb      	ldrh	r3, [r7, #4]
 801104e:	3303      	adds	r3, #3
 8011050:	b29b      	uxth	r3, r3
 8011052:	f023 0303 	bic.w	r3, r3, #3
 8011056:	b29b      	uxth	r3, r3
 8011058:	4413      	add	r3, r2
 801105a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801105c:	8b3b      	ldrh	r3, [r7, #24]
 801105e:	3310      	adds	r3, #16
 8011060:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011062:	8b3a      	ldrh	r2, [r7, #24]
 8011064:	88bb      	ldrh	r3, [r7, #4]
 8011066:	3303      	adds	r3, #3
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	429a      	cmp	r2, r3
 801106e:	d306      	bcc.n	801107e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011070:	88bb      	ldrh	r3, [r7, #4]
 8011072:	3303      	adds	r3, #3
 8011074:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011078:	697a      	ldr	r2, [r7, #20]
 801107a:	429a      	cmp	r2, r3
 801107c:	d201      	bcs.n	8011082 <pbuf_alloc+0x166>
        return NULL;
 801107e:	2300      	movs	r3, #0
 8011080:	e034      	b.n	80110ec <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011082:	6978      	ldr	r0, [r7, #20]
 8011084:	f7ff f9c0 	bl	8010408 <mem_malloc>
 8011088:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	2b00      	cmp	r3, #0
 801108e:	d101      	bne.n	8011094 <pbuf_alloc+0x178>
        return NULL;
 8011090:	2300      	movs	r3, #0
 8011092:	e02b      	b.n	80110ec <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011096:	3310      	adds	r3, #16
 8011098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801109a:	4413      	add	r3, r2
 801109c:	3303      	adds	r3, #3
 801109e:	f023 0303 	bic.w	r3, r3, #3
 80110a2:	4618      	mov	r0, r3
 80110a4:	88b9      	ldrh	r1, [r7, #4]
 80110a6:	88ba      	ldrh	r2, [r7, #4]
 80110a8:	2300      	movs	r3, #0
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	887b      	ldrh	r3, [r7, #2]
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	460b      	mov	r3, r1
 80110b2:	4601      	mov	r1, r0
 80110b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110b6:	f7ff ff07 	bl	8010ec8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80110ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	f003 0303 	and.w	r3, r3, #3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d010      	beq.n	80110e8 <pbuf_alloc+0x1cc>
 80110c6:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <pbuf_alloc+0x1d8>)
 80110c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80110cc:	490d      	ldr	r1, [pc, #52]	; (8011104 <pbuf_alloc+0x1e8>)
 80110ce:	480b      	ldr	r0, [pc, #44]	; (80110fc <pbuf_alloc+0x1e0>)
 80110d0:	f00a f8aa 	bl	801b228 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80110d4:	e008      	b.n	80110e8 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80110d6:	4b07      	ldr	r3, [pc, #28]	; (80110f4 <pbuf_alloc+0x1d8>)
 80110d8:	f240 1227 	movw	r2, #295	; 0x127
 80110dc:	490a      	ldr	r1, [pc, #40]	; (8011108 <pbuf_alloc+0x1ec>)
 80110de:	4807      	ldr	r0, [pc, #28]	; (80110fc <pbuf_alloc+0x1e0>)
 80110e0:	f00a f8a2 	bl	801b228 <iprintf>
      return NULL;
 80110e4:	2300      	movs	r3, #0
 80110e6:	e001      	b.n	80110ec <pbuf_alloc+0x1d0>
      break;
 80110e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3728      	adds	r7, #40	; 0x28
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	0801e810 	.word	0x0801e810
 80110f8:	0801e840 	.word	0x0801e840
 80110fc:	0801e870 	.word	0x0801e870
 8011100:	0801e898 	.word	0x0801e898
 8011104:	0801e8cc 	.word	0x0801e8cc
 8011108:	0801e8f8 	.word	0x0801e8f8

0801110c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af02      	add	r7, sp, #8
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	460b      	mov	r3, r1
 8011116:	807b      	strh	r3, [r7, #2]
 8011118:	4613      	mov	r3, r2
 801111a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801111c:	883b      	ldrh	r3, [r7, #0]
 801111e:	2b41      	cmp	r3, #65	; 0x41
 8011120:	d009      	beq.n	8011136 <pbuf_alloc_reference+0x2a>
 8011122:	883b      	ldrh	r3, [r7, #0]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d006      	beq.n	8011136 <pbuf_alloc_reference+0x2a>
 8011128:	4b0f      	ldr	r3, [pc, #60]	; (8011168 <pbuf_alloc_reference+0x5c>)
 801112a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801112e:	490f      	ldr	r1, [pc, #60]	; (801116c <pbuf_alloc_reference+0x60>)
 8011130:	480f      	ldr	r0, [pc, #60]	; (8011170 <pbuf_alloc_reference+0x64>)
 8011132:	f00a f879 	bl	801b228 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011136:	2007      	movs	r0, #7
 8011138:	f7ff faee 	bl	8010718 <memp_malloc>
 801113c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d101      	bne.n	8011148 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011144:	2300      	movs	r3, #0
 8011146:	e00b      	b.n	8011160 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011148:	8879      	ldrh	r1, [r7, #2]
 801114a:	887a      	ldrh	r2, [r7, #2]
 801114c:	2300      	movs	r3, #0
 801114e:	9301      	str	r3, [sp, #4]
 8011150:	883b      	ldrh	r3, [r7, #0]
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	460b      	mov	r3, r1
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7ff feb5 	bl	8010ec8 <pbuf_init_alloced_pbuf>
  return p;
 801115e:	68fb      	ldr	r3, [r7, #12]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	0801e810 	.word	0x0801e810
 801116c:	0801e914 	.word	0x0801e914
 8011170:	0801e870 	.word	0x0801e870

08011174 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af02      	add	r7, sp, #8
 801117a:	607b      	str	r3, [r7, #4]
 801117c:	4603      	mov	r3, r0
 801117e:	73fb      	strb	r3, [r7, #15]
 8011180:	460b      	mov	r3, r1
 8011182:	81bb      	strh	r3, [r7, #12]
 8011184:	4613      	mov	r3, r2
 8011186:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801118c:	8a7b      	ldrh	r3, [r7, #18]
 801118e:	3303      	adds	r3, #3
 8011190:	f023 0203 	bic.w	r2, r3, #3
 8011194:	89bb      	ldrh	r3, [r7, #12]
 8011196:	441a      	add	r2, r3
 8011198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801119a:	429a      	cmp	r2, r3
 801119c:	d901      	bls.n	80111a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801119e:	2300      	movs	r3, #0
 80111a0:	e018      	b.n	80111d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d007      	beq.n	80111b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80111a8:	8a7b      	ldrh	r3, [r7, #18]
 80111aa:	3303      	adds	r3, #3
 80111ac:	f023 0303 	bic.w	r3, r3, #3
 80111b0:	6a3a      	ldr	r2, [r7, #32]
 80111b2:	4413      	add	r3, r2
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	e001      	b.n	80111bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80111b8:	2300      	movs	r3, #0
 80111ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	89b9      	ldrh	r1, [r7, #12]
 80111c0:	89ba      	ldrh	r2, [r7, #12]
 80111c2:	2302      	movs	r3, #2
 80111c4:	9301      	str	r3, [sp, #4]
 80111c6:	897b      	ldrh	r3, [r7, #10]
 80111c8:	9300      	str	r3, [sp, #0]
 80111ca:	460b      	mov	r3, r1
 80111cc:	6979      	ldr	r1, [r7, #20]
 80111ce:	f7ff fe7b 	bl	8010ec8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80111d2:	687b      	ldr	r3, [r7, #4]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	460b      	mov	r3, r1
 80111e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d106      	bne.n	80111fc <pbuf_realloc+0x20>
 80111ee:	4b39      	ldr	r3, [pc, #228]	; (80112d4 <pbuf_realloc+0xf8>)
 80111f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80111f4:	4938      	ldr	r1, [pc, #224]	; (80112d8 <pbuf_realloc+0xfc>)
 80111f6:	4839      	ldr	r0, [pc, #228]	; (80112dc <pbuf_realloc+0x100>)
 80111f8:	f00a f816 	bl	801b228 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	891b      	ldrh	r3, [r3, #8]
 8011200:	887a      	ldrh	r2, [r7, #2]
 8011202:	429a      	cmp	r2, r3
 8011204:	d261      	bcs.n	80112ca <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	891a      	ldrh	r2, [r3, #8]
 801120a:	887b      	ldrh	r3, [r7, #2]
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011210:	887b      	ldrh	r3, [r7, #2]
 8011212:	817b      	strh	r3, [r7, #10]
  q = p;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011218:	e018      	b.n	801124c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	895b      	ldrh	r3, [r3, #10]
 801121e:	897a      	ldrh	r2, [r7, #10]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	891a      	ldrh	r2, [r3, #8]
 8011228:	893b      	ldrh	r3, [r7, #8]
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	b29a      	uxth	r2, r3
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d106      	bne.n	801124c <pbuf_realloc+0x70>
 801123e:	4b25      	ldr	r3, [pc, #148]	; (80112d4 <pbuf_realloc+0xf8>)
 8011240:	f240 12af 	movw	r2, #431	; 0x1af
 8011244:	4926      	ldr	r1, [pc, #152]	; (80112e0 <pbuf_realloc+0x104>)
 8011246:	4825      	ldr	r0, [pc, #148]	; (80112dc <pbuf_realloc+0x100>)
 8011248:	f009 ffee 	bl	801b228 <iprintf>
  while (rem_len > q->len) {
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	895b      	ldrh	r3, [r3, #10]
 8011250:	897a      	ldrh	r2, [r7, #10]
 8011252:	429a      	cmp	r2, r3
 8011254:	d8e1      	bhi.n	801121a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	7b1b      	ldrb	r3, [r3, #12]
 801125a:	f003 030f 	and.w	r3, r3, #15
 801125e:	2b00      	cmp	r3, #0
 8011260:	d11f      	bne.n	80112a2 <pbuf_realloc+0xc6>
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	895b      	ldrh	r3, [r3, #10]
 8011266:	897a      	ldrh	r2, [r7, #10]
 8011268:	429a      	cmp	r2, r3
 801126a:	d01a      	beq.n	80112a2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	7b5b      	ldrb	r3, [r3, #13]
 8011270:	f003 0302 	and.w	r3, r3, #2
 8011274:	2b00      	cmp	r3, #0
 8011276:	d114      	bne.n	80112a2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	685a      	ldr	r2, [r3, #4]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	897b      	ldrh	r3, [r7, #10]
 8011282:	4413      	add	r3, r2
 8011284:	4619      	mov	r1, r3
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7fe ffca 	bl	8010220 <mem_trim>
 801128c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d106      	bne.n	80112a2 <pbuf_realloc+0xc6>
 8011294:	4b0f      	ldr	r3, [pc, #60]	; (80112d4 <pbuf_realloc+0xf8>)
 8011296:	f240 12bd 	movw	r2, #445	; 0x1bd
 801129a:	4912      	ldr	r1, [pc, #72]	; (80112e4 <pbuf_realloc+0x108>)
 801129c:	480f      	ldr	r0, [pc, #60]	; (80112dc <pbuf_realloc+0x100>)
 801129e:	f009 ffc3 	bl	801b228 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	897a      	ldrh	r2, [r7, #10]
 80112a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	895a      	ldrh	r2, [r3, #10]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d004      	beq.n	80112c2 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4618      	mov	r0, r3
 80112be:	f000 f911 	bl	80114e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	e000      	b.n	80112cc <pbuf_realloc+0xf0>
    return;
 80112ca:	bf00      	nop

}
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	0801e810 	.word	0x0801e810
 80112d8:	0801e928 	.word	0x0801e928
 80112dc:	0801e870 	.word	0x0801e870
 80112e0:	0801e940 	.word	0x0801e940
 80112e4:	0801e958 	.word	0x0801e958

080112e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	4613      	mov	r3, r2
 80112f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d106      	bne.n	801130a <pbuf_add_header_impl+0x22>
 80112fc:	4b2b      	ldr	r3, [pc, #172]	; (80113ac <pbuf_add_header_impl+0xc4>)
 80112fe:	f240 12df 	movw	r2, #479	; 0x1df
 8011302:	492b      	ldr	r1, [pc, #172]	; (80113b0 <pbuf_add_header_impl+0xc8>)
 8011304:	482b      	ldr	r0, [pc, #172]	; (80113b4 <pbuf_add_header_impl+0xcc>)
 8011306:	f009 ff8f 	bl	801b228 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <pbuf_add_header_impl+0x30>
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011316:	d301      	bcc.n	801131c <pbuf_add_header_impl+0x34>
    return 1;
 8011318:	2301      	movs	r3, #1
 801131a:	e043      	b.n	80113a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <pbuf_add_header_impl+0x3e>
    return 0;
 8011322:	2300      	movs	r3, #0
 8011324:	e03e      	b.n	80113a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	891a      	ldrh	r2, [r3, #8]
 801132e:	8a7b      	ldrh	r3, [r7, #18]
 8011330:	4413      	add	r3, r2
 8011332:	b29b      	uxth	r3, r3
 8011334:	8a7a      	ldrh	r2, [r7, #18]
 8011336:	429a      	cmp	r2, r3
 8011338:	d901      	bls.n	801133e <pbuf_add_header_impl+0x56>
    return 1;
 801133a:	2301      	movs	r3, #1
 801133c:	e032      	b.n	80113a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	7b1b      	ldrb	r3, [r3, #12]
 8011342:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011344:	8a3b      	ldrh	r3, [r7, #16]
 8011346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00c      	beq.n	8011368 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	685a      	ldr	r2, [r3, #4]
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	425b      	negs	r3, r3
 8011356:	4413      	add	r3, r2
 8011358:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3310      	adds	r3, #16
 801135e:	697a      	ldr	r2, [r7, #20]
 8011360:	429a      	cmp	r2, r3
 8011362:	d20d      	bcs.n	8011380 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011364:	2301      	movs	r3, #1
 8011366:	e01d      	b.n	80113a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011368:	79fb      	ldrb	r3, [r7, #7]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d006      	beq.n	801137c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	425b      	negs	r3, r3
 8011376:	4413      	add	r3, r2
 8011378:	617b      	str	r3, [r7, #20]
 801137a:	e001      	b.n	8011380 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801137c:	2301      	movs	r3, #1
 801137e:	e011      	b.n	80113a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	697a      	ldr	r2, [r7, #20]
 8011384:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	895a      	ldrh	r2, [r3, #10]
 801138a:	8a7b      	ldrh	r3, [r7, #18]
 801138c:	4413      	add	r3, r2
 801138e:	b29a      	uxth	r2, r3
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	891a      	ldrh	r2, [r3, #8]
 8011398:	8a7b      	ldrh	r3, [r7, #18]
 801139a:	4413      	add	r3, r2
 801139c:	b29a      	uxth	r2, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	811a      	strh	r2, [r3, #8]


  return 0;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3718      	adds	r7, #24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	0801e810 	.word	0x0801e810
 80113b0:	0801e974 	.word	0x0801e974
 80113b4:	0801e870 	.word	0x0801e870

080113b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80113c2:	2200      	movs	r2, #0
 80113c4:	6839      	ldr	r1, [r7, #0]
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff ff8e 	bl	80112e8 <pbuf_add_header_impl>
 80113cc:	4603      	mov	r3, r0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
	...

080113d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d106      	bne.n	80113f6 <pbuf_remove_header+0x1e>
 80113e8:	4b20      	ldr	r3, [pc, #128]	; (801146c <pbuf_remove_header+0x94>)
 80113ea:	f240 224b 	movw	r2, #587	; 0x24b
 80113ee:	4920      	ldr	r1, [pc, #128]	; (8011470 <pbuf_remove_header+0x98>)
 80113f0:	4820      	ldr	r0, [pc, #128]	; (8011474 <pbuf_remove_header+0x9c>)
 80113f2:	f009 ff19 	bl	801b228 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <pbuf_remove_header+0x2c>
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011402:	d301      	bcc.n	8011408 <pbuf_remove_header+0x30>
    return 1;
 8011404:	2301      	movs	r3, #1
 8011406:	e02c      	b.n	8011462 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d101      	bne.n	8011412 <pbuf_remove_header+0x3a>
    return 0;
 801140e:	2300      	movs	r3, #0
 8011410:	e027      	b.n	8011462 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	895b      	ldrh	r3, [r3, #10]
 801141a:	89fa      	ldrh	r2, [r7, #14]
 801141c:	429a      	cmp	r2, r3
 801141e:	d908      	bls.n	8011432 <pbuf_remove_header+0x5a>
 8011420:	4b12      	ldr	r3, [pc, #72]	; (801146c <pbuf_remove_header+0x94>)
 8011422:	f240 2255 	movw	r2, #597	; 0x255
 8011426:	4914      	ldr	r1, [pc, #80]	; (8011478 <pbuf_remove_header+0xa0>)
 8011428:	4812      	ldr	r0, [pc, #72]	; (8011474 <pbuf_remove_header+0x9c>)
 801142a:	f009 fefd 	bl	801b228 <iprintf>
 801142e:	2301      	movs	r3, #1
 8011430:	e017      	b.n	8011462 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	441a      	add	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	895a      	ldrh	r2, [r3, #10]
 8011448:	89fb      	ldrh	r3, [r7, #14]
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	b29a      	uxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	891a      	ldrh	r2, [r3, #8]
 8011456:	89fb      	ldrh	r3, [r7, #14]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	b29a      	uxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	0801e810 	.word	0x0801e810
 8011470:	0801e974 	.word	0x0801e974
 8011474:	0801e870 	.word	0x0801e870
 8011478:	0801e980 	.word	0x0801e980

0801147c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	807b      	strh	r3, [r7, #2]
 8011488:	4613      	mov	r3, r2
 801148a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801148c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011490:	2b00      	cmp	r3, #0
 8011492:	da08      	bge.n	80114a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011498:	425b      	negs	r3, r3
 801149a:	4619      	mov	r1, r3
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ff9b 	bl	80113d8 <pbuf_remove_header>
 80114a2:	4603      	mov	r3, r0
 80114a4:	e007      	b.n	80114b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80114a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114aa:	787a      	ldrb	r2, [r7, #1]
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff ff1a 	bl	80112e8 <pbuf_add_header_impl>
 80114b4:	4603      	mov	r3, r0
  }
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80114be:	b580      	push	{r7, lr}
 80114c0:	b082      	sub	sp, #8
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	460b      	mov	r3, r1
 80114c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80114ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114ce:	2201      	movs	r2, #1
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7ff ffd2 	bl	801147c <pbuf_header_impl>
 80114d8:	4603      	mov	r3, r0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10b      	bne.n	801150a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d106      	bne.n	8011506 <pbuf_free+0x22>
 80114f8:	4b38      	ldr	r3, [pc, #224]	; (80115dc <pbuf_free+0xf8>)
 80114fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80114fe:	4938      	ldr	r1, [pc, #224]	; (80115e0 <pbuf_free+0xfc>)
 8011500:	4838      	ldr	r0, [pc, #224]	; (80115e4 <pbuf_free+0x100>)
 8011502:	f009 fe91 	bl	801b228 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011506:	2300      	movs	r3, #0
 8011508:	e063      	b.n	80115d2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801150e:	e05c      	b.n	80115ca <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	7b9b      	ldrb	r3, [r3, #14]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d106      	bne.n	8011526 <pbuf_free+0x42>
 8011518:	4b30      	ldr	r3, [pc, #192]	; (80115dc <pbuf_free+0xf8>)
 801151a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801151e:	4932      	ldr	r1, [pc, #200]	; (80115e8 <pbuf_free+0x104>)
 8011520:	4830      	ldr	r0, [pc, #192]	; (80115e4 <pbuf_free+0x100>)
 8011522:	f009 fe81 	bl	801b228 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	7b9b      	ldrb	r3, [r3, #14]
 801152a:	3b01      	subs	r3, #1
 801152c:	b2da      	uxtb	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	739a      	strb	r2, [r3, #14]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	7b9b      	ldrb	r3, [r3, #14]
 8011536:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011538:	7dbb      	ldrb	r3, [r7, #22]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d143      	bne.n	80115c6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	7b1b      	ldrb	r3, [r3, #12]
 8011548:	f003 030f 	and.w	r3, r3, #15
 801154c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	7b5b      	ldrb	r3, [r3, #13]
 8011552:	f003 0302 	and.w	r3, r3, #2
 8011556:	2b00      	cmp	r3, #0
 8011558:	d011      	beq.n	801157e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <pbuf_free+0x90>
 8011566:	4b1d      	ldr	r3, [pc, #116]	; (80115dc <pbuf_free+0xf8>)
 8011568:	f240 22ff 	movw	r2, #767	; 0x2ff
 801156c:	491f      	ldr	r1, [pc, #124]	; (80115ec <pbuf_free+0x108>)
 801156e:	481d      	ldr	r0, [pc, #116]	; (80115e4 <pbuf_free+0x100>)
 8011570:	f009 fe5a 	bl	801b228 <iprintf>
        pc->custom_free_function(p);
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	691b      	ldr	r3, [r3, #16]
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	4798      	blx	r3
 801157c:	e01d      	b.n	80115ba <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	2b02      	cmp	r3, #2
 8011582:	d104      	bne.n	801158e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011584:	6879      	ldr	r1, [r7, #4]
 8011586:	2008      	movs	r0, #8
 8011588:	f7ff f936 	bl	80107f8 <memp_free>
 801158c:	e015      	b.n	80115ba <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801158e:	7bfb      	ldrb	r3, [r7, #15]
 8011590:	2b01      	cmp	r3, #1
 8011592:	d104      	bne.n	801159e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8011594:	6879      	ldr	r1, [r7, #4]
 8011596:	2007      	movs	r0, #7
 8011598:	f7ff f92e 	bl	80107f8 <memp_free>
 801159c:	e00d      	b.n	80115ba <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d103      	bne.n	80115ac <pbuf_free+0xc8>
          mem_free(p);
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7fe fdd1 	bl	801014c <mem_free>
 80115aa:	e006      	b.n	80115ba <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80115ac:	4b0b      	ldr	r3, [pc, #44]	; (80115dc <pbuf_free+0xf8>)
 80115ae:	f240 320f 	movw	r2, #783	; 0x30f
 80115b2:	490f      	ldr	r1, [pc, #60]	; (80115f0 <pbuf_free+0x10c>)
 80115b4:	480b      	ldr	r0, [pc, #44]	; (80115e4 <pbuf_free+0x100>)
 80115b6:	f009 fe37 	bl	801b228 <iprintf>
        }
      }
      count++;
 80115ba:	7dfb      	ldrb	r3, [r7, #23]
 80115bc:	3301      	adds	r3, #1
 80115be:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	607b      	str	r3, [r7, #4]
 80115c4:	e001      	b.n	80115ca <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80115c6:	2300      	movs	r3, #0
 80115c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d19f      	bne.n	8011510 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	0801e810 	.word	0x0801e810
 80115e0:	0801e974 	.word	0x0801e974
 80115e4:	0801e870 	.word	0x0801e870
 80115e8:	0801e9a0 	.word	0x0801e9a0
 80115ec:	0801e9b8 	.word	0x0801e9b8
 80115f0:	0801e9dc 	.word	0x0801e9dc

080115f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011600:	e005      	b.n	801160e <pbuf_clen+0x1a>
    ++len;
 8011602:	89fb      	ldrh	r3, [r7, #14]
 8011604:	3301      	adds	r3, #1
 8011606:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1f6      	bne.n	8011602 <pbuf_clen+0xe>
  }
  return len;
 8011614:	89fb      	ldrh	r3, [r7, #14]
}
 8011616:	4618      	mov	r0, r3
 8011618:	3714      	adds	r7, #20
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr
	...

08011624 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d010      	beq.n	8011654 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	7b9b      	ldrb	r3, [r3, #14]
 8011636:	3301      	adds	r3, #1
 8011638:	b2da      	uxtb	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	7b9b      	ldrb	r3, [r3, #14]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <pbuf_ref+0x30>
 8011646:	4b05      	ldr	r3, [pc, #20]	; (801165c <pbuf_ref+0x38>)
 8011648:	f240 3242 	movw	r2, #834	; 0x342
 801164c:	4904      	ldr	r1, [pc, #16]	; (8011660 <pbuf_ref+0x3c>)
 801164e:	4805      	ldr	r0, [pc, #20]	; (8011664 <pbuf_ref+0x40>)
 8011650:	f009 fdea 	bl	801b228 <iprintf>
  }
}
 8011654:	bf00      	nop
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	0801e810 	.word	0x0801e810
 8011660:	0801e9f0 	.word	0x0801e9f0
 8011664:	0801e870 	.word	0x0801e870

08011668 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <pbuf_cat+0x16>
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d107      	bne.n	801168e <pbuf_cat+0x26>
 801167e:	4b20      	ldr	r3, [pc, #128]	; (8011700 <pbuf_cat+0x98>)
 8011680:	f240 3259 	movw	r2, #857	; 0x359
 8011684:	491f      	ldr	r1, [pc, #124]	; (8011704 <pbuf_cat+0x9c>)
 8011686:	4820      	ldr	r0, [pc, #128]	; (8011708 <pbuf_cat+0xa0>)
 8011688:	f009 fdce 	bl	801b228 <iprintf>
 801168c:	e034      	b.n	80116f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	e00a      	b.n	80116aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	891a      	ldrh	r2, [r3, #8]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	891b      	ldrh	r3, [r3, #8]
 801169c:	4413      	add	r3, r2
 801169e:	b29a      	uxth	r2, r3
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	60fb      	str	r3, [r7, #12]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1f0      	bne.n	8011694 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	891a      	ldrh	r2, [r3, #8]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	895b      	ldrh	r3, [r3, #10]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d006      	beq.n	80116cc <pbuf_cat+0x64>
 80116be:	4b10      	ldr	r3, [pc, #64]	; (8011700 <pbuf_cat+0x98>)
 80116c0:	f240 3262 	movw	r2, #866	; 0x362
 80116c4:	4911      	ldr	r1, [pc, #68]	; (801170c <pbuf_cat+0xa4>)
 80116c6:	4810      	ldr	r0, [pc, #64]	; (8011708 <pbuf_cat+0xa0>)
 80116c8:	f009 fdae 	bl	801b228 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d006      	beq.n	80116e2 <pbuf_cat+0x7a>
 80116d4:	4b0a      	ldr	r3, [pc, #40]	; (8011700 <pbuf_cat+0x98>)
 80116d6:	f240 3263 	movw	r2, #867	; 0x363
 80116da:	490d      	ldr	r1, [pc, #52]	; (8011710 <pbuf_cat+0xa8>)
 80116dc:	480a      	ldr	r0, [pc, #40]	; (8011708 <pbuf_cat+0xa0>)
 80116de:	f009 fda3 	bl	801b228 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	891a      	ldrh	r2, [r3, #8]
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	891b      	ldrh	r3, [r3, #8]
 80116ea:	4413      	add	r3, r2
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	683a      	ldr	r2, [r7, #0]
 80116f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	0801e810 	.word	0x0801e810
 8011704:	0801ea04 	.word	0x0801ea04
 8011708:	0801e870 	.word	0x0801e870
 801170c:	0801ea3c 	.word	0x0801ea3c
 8011710:	0801ea6c 	.word	0x0801ea6c

08011714 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801171e:	2300      	movs	r3, #0
 8011720:	617b      	str	r3, [r7, #20]
 8011722:	2300      	movs	r3, #0
 8011724:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d008      	beq.n	801173e <pbuf_copy+0x2a>
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d005      	beq.n	801173e <pbuf_copy+0x2a>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	891a      	ldrh	r2, [r3, #8]
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	429a      	cmp	r2, r3
 801173c:	d209      	bcs.n	8011752 <pbuf_copy+0x3e>
 801173e:	4b57      	ldr	r3, [pc, #348]	; (801189c <pbuf_copy+0x188>)
 8011740:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011744:	4956      	ldr	r1, [pc, #344]	; (80118a0 <pbuf_copy+0x18c>)
 8011746:	4857      	ldr	r0, [pc, #348]	; (80118a4 <pbuf_copy+0x190>)
 8011748:	f009 fd6e 	bl	801b228 <iprintf>
 801174c:	f06f 030f 	mvn.w	r3, #15
 8011750:	e09f      	b.n	8011892 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	895b      	ldrh	r3, [r3, #10]
 8011756:	461a      	mov	r2, r3
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	1ad2      	subs	r2, r2, r3
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	895b      	ldrh	r3, [r3, #10]
 8011760:	4619      	mov	r1, r3
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	1acb      	subs	r3, r1, r3
 8011766:	429a      	cmp	r2, r3
 8011768:	d306      	bcc.n	8011778 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	895b      	ldrh	r3, [r3, #10]
 801176e:	461a      	mov	r2, r3
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	60fb      	str	r3, [r7, #12]
 8011776:	e005      	b.n	8011784 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	895b      	ldrh	r3, [r3, #10]
 801177c:	461a      	mov	r2, r3
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	685a      	ldr	r2, [r3, #4]
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	18d0      	adds	r0, r2, r3
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	4413      	add	r3, r2
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	4619      	mov	r1, r3
 8011798:	f009 ff4f 	bl	801b63a <memcpy>
    offset_to += len;
 801179c:	697a      	ldr	r2, [r7, #20]
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80117a4:	693a      	ldr	r2, [r7, #16]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	4413      	add	r3, r2
 80117aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	895b      	ldrh	r3, [r3, #10]
 80117b0:	461a      	mov	r2, r3
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d906      	bls.n	80117c6 <pbuf_copy+0xb2>
 80117b8:	4b38      	ldr	r3, [pc, #224]	; (801189c <pbuf_copy+0x188>)
 80117ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 80117be:	493a      	ldr	r1, [pc, #232]	; (80118a8 <pbuf_copy+0x194>)
 80117c0:	4838      	ldr	r0, [pc, #224]	; (80118a4 <pbuf_copy+0x190>)
 80117c2:	f009 fd31 	bl	801b228 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	895b      	ldrh	r3, [r3, #10]
 80117ca:	461a      	mov	r2, r3
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d906      	bls.n	80117e0 <pbuf_copy+0xcc>
 80117d2:	4b32      	ldr	r3, [pc, #200]	; (801189c <pbuf_copy+0x188>)
 80117d4:	f240 32da 	movw	r2, #986	; 0x3da
 80117d8:	4934      	ldr	r1, [pc, #208]	; (80118ac <pbuf_copy+0x198>)
 80117da:	4832      	ldr	r0, [pc, #200]	; (80118a4 <pbuf_copy+0x190>)
 80117dc:	f009 fd24 	bl	801b228 <iprintf>
    if (offset_from >= p_from->len) {
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	895b      	ldrh	r3, [r3, #10]
 80117e4:	461a      	mov	r2, r3
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d304      	bcc.n	80117f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	895b      	ldrh	r3, [r3, #10]
 80117fa:	461a      	mov	r2, r3
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	4293      	cmp	r3, r2
 8011800:	d114      	bne.n	801182c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10c      	bne.n	801182c <pbuf_copy+0x118>
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d009      	beq.n	801182c <pbuf_copy+0x118>
 8011818:	4b20      	ldr	r3, [pc, #128]	; (801189c <pbuf_copy+0x188>)
 801181a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801181e:	4924      	ldr	r1, [pc, #144]	; (80118b0 <pbuf_copy+0x19c>)
 8011820:	4820      	ldr	r0, [pc, #128]	; (80118a4 <pbuf_copy+0x190>)
 8011822:	f009 fd01 	bl	801b228 <iprintf>
 8011826:	f06f 030f 	mvn.w	r3, #15
 801182a:	e032      	b.n	8011892 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d013      	beq.n	801185a <pbuf_copy+0x146>
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	895a      	ldrh	r2, [r3, #10]
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	891b      	ldrh	r3, [r3, #8]
 801183a:	429a      	cmp	r2, r3
 801183c:	d10d      	bne.n	801185a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d009      	beq.n	801185a <pbuf_copy+0x146>
 8011846:	4b15      	ldr	r3, [pc, #84]	; (801189c <pbuf_copy+0x188>)
 8011848:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801184c:	4919      	ldr	r1, [pc, #100]	; (80118b4 <pbuf_copy+0x1a0>)
 801184e:	4815      	ldr	r0, [pc, #84]	; (80118a4 <pbuf_copy+0x190>)
 8011850:	f009 fcea 	bl	801b228 <iprintf>
 8011854:	f06f 0305 	mvn.w	r3, #5
 8011858:	e01b      	b.n	8011892 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d013      	beq.n	8011888 <pbuf_copy+0x174>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	895a      	ldrh	r2, [r3, #10]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	891b      	ldrh	r3, [r3, #8]
 8011868:	429a      	cmp	r2, r3
 801186a:	d10d      	bne.n	8011888 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d009      	beq.n	8011888 <pbuf_copy+0x174>
 8011874:	4b09      	ldr	r3, [pc, #36]	; (801189c <pbuf_copy+0x188>)
 8011876:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801187a:	490e      	ldr	r1, [pc, #56]	; (80118b4 <pbuf_copy+0x1a0>)
 801187c:	4809      	ldr	r0, [pc, #36]	; (80118a4 <pbuf_copy+0x190>)
 801187e:	f009 fcd3 	bl	801b228 <iprintf>
 8011882:	f06f 0305 	mvn.w	r3, #5
 8011886:	e004      	b.n	8011892 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	f47f af61 	bne.w	8011752 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	0801e810 	.word	0x0801e810
 80118a0:	0801eab8 	.word	0x0801eab8
 80118a4:	0801e870 	.word	0x0801e870
 80118a8:	0801eae8 	.word	0x0801eae8
 80118ac:	0801eb00 	.word	0x0801eb00
 80118b0:	0801eb1c 	.word	0x0801eb1c
 80118b4:	0801eb2c 	.word	0x0801eb2c

080118b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b088      	sub	sp, #32
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	4611      	mov	r1, r2
 80118c4:	461a      	mov	r2, r3
 80118c6:	460b      	mov	r3, r1
 80118c8:	80fb      	strh	r3, [r7, #6]
 80118ca:	4613      	mov	r3, r2
 80118cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d108      	bne.n	80118ee <pbuf_copy_partial+0x36>
 80118dc:	4b2b      	ldr	r3, [pc, #172]	; (801198c <pbuf_copy_partial+0xd4>)
 80118de:	f240 420a 	movw	r2, #1034	; 0x40a
 80118e2:	492b      	ldr	r1, [pc, #172]	; (8011990 <pbuf_copy_partial+0xd8>)
 80118e4:	482b      	ldr	r0, [pc, #172]	; (8011994 <pbuf_copy_partial+0xdc>)
 80118e6:	f009 fc9f 	bl	801b228 <iprintf>
 80118ea:	2300      	movs	r3, #0
 80118ec:	e04a      	b.n	8011984 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d108      	bne.n	8011906 <pbuf_copy_partial+0x4e>
 80118f4:	4b25      	ldr	r3, [pc, #148]	; (801198c <pbuf_copy_partial+0xd4>)
 80118f6:	f240 420b 	movw	r2, #1035	; 0x40b
 80118fa:	4927      	ldr	r1, [pc, #156]	; (8011998 <pbuf_copy_partial+0xe0>)
 80118fc:	4825      	ldr	r0, [pc, #148]	; (8011994 <pbuf_copy_partial+0xdc>)
 80118fe:	f009 fc93 	bl	801b228 <iprintf>
 8011902:	2300      	movs	r3, #0
 8011904:	e03e      	b.n	8011984 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	e034      	b.n	8011976 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801190c:	88bb      	ldrh	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <pbuf_copy_partial+0x70>
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	895b      	ldrh	r3, [r3, #10]
 8011916:	88ba      	ldrh	r2, [r7, #4]
 8011918:	429a      	cmp	r2, r3
 801191a:	d305      	bcc.n	8011928 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	895b      	ldrh	r3, [r3, #10]
 8011920:	88ba      	ldrh	r2, [r7, #4]
 8011922:	1ad3      	subs	r3, r2, r3
 8011924:	80bb      	strh	r3, [r7, #4]
 8011926:	e023      	b.n	8011970 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	895a      	ldrh	r2, [r3, #10]
 801192c:	88bb      	ldrh	r3, [r7, #4]
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011932:	8b3a      	ldrh	r2, [r7, #24]
 8011934:	88fb      	ldrh	r3, [r7, #6]
 8011936:	429a      	cmp	r2, r3
 8011938:	d901      	bls.n	801193e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801193a:	88fb      	ldrh	r3, [r7, #6]
 801193c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801193e:	8b7b      	ldrh	r3, [r7, #26]
 8011940:	68ba      	ldr	r2, [r7, #8]
 8011942:	18d0      	adds	r0, r2, r3
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	685a      	ldr	r2, [r3, #4]
 8011948:	88bb      	ldrh	r3, [r7, #4]
 801194a:	4413      	add	r3, r2
 801194c:	8b3a      	ldrh	r2, [r7, #24]
 801194e:	4619      	mov	r1, r3
 8011950:	f009 fe73 	bl	801b63a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011954:	8afa      	ldrh	r2, [r7, #22]
 8011956:	8b3b      	ldrh	r3, [r7, #24]
 8011958:	4413      	add	r3, r2
 801195a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801195c:	8b7a      	ldrh	r2, [r7, #26]
 801195e:	8b3b      	ldrh	r3, [r7, #24]
 8011960:	4413      	add	r3, r2
 8011962:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011964:	88fa      	ldrh	r2, [r7, #6]
 8011966:	8b3b      	ldrh	r3, [r7, #24]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	61fb      	str	r3, [r7, #28]
 8011976:	88fb      	ldrh	r3, [r7, #6]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <pbuf_copy_partial+0xca>
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d1c4      	bne.n	801190c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011982:	8afb      	ldrh	r3, [r7, #22]
}
 8011984:	4618      	mov	r0, r3
 8011986:	3720      	adds	r7, #32
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	0801e810 	.word	0x0801e810
 8011990:	0801eb58 	.word	0x0801eb58
 8011994:	0801e870 	.word	0x0801e870
 8011998:	0801eb78 	.word	0x0801eb78

0801199c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	4613      	mov	r3, r2
 80119a8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80119aa:	88fb      	ldrh	r3, [r7, #6]
 80119ac:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d109      	bne.n	80119cc <pbuf_take+0x30>
 80119b8:	4b3a      	ldr	r3, [pc, #232]	; (8011aa4 <pbuf_take+0x108>)
 80119ba:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80119be:	493a      	ldr	r1, [pc, #232]	; (8011aa8 <pbuf_take+0x10c>)
 80119c0:	483a      	ldr	r0, [pc, #232]	; (8011aac <pbuf_take+0x110>)
 80119c2:	f009 fc31 	bl	801b228 <iprintf>
 80119c6:	f06f 030f 	mvn.w	r3, #15
 80119ca:	e067      	b.n	8011a9c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d109      	bne.n	80119e6 <pbuf_take+0x4a>
 80119d2:	4b34      	ldr	r3, [pc, #208]	; (8011aa4 <pbuf_take+0x108>)
 80119d4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80119d8:	4935      	ldr	r1, [pc, #212]	; (8011ab0 <pbuf_take+0x114>)
 80119da:	4834      	ldr	r0, [pc, #208]	; (8011aac <pbuf_take+0x110>)
 80119dc:	f009 fc24 	bl	801b228 <iprintf>
 80119e0:	f06f 030f 	mvn.w	r3, #15
 80119e4:	e05a      	b.n	8011a9c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	891b      	ldrh	r3, [r3, #8]
 80119ea:	88fa      	ldrh	r2, [r7, #6]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d909      	bls.n	8011a04 <pbuf_take+0x68>
 80119f0:	4b2c      	ldr	r3, [pc, #176]	; (8011aa4 <pbuf_take+0x108>)
 80119f2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80119f6:	492f      	ldr	r1, [pc, #188]	; (8011ab4 <pbuf_take+0x118>)
 80119f8:	482c      	ldr	r0, [pc, #176]	; (8011aac <pbuf_take+0x110>)
 80119fa:	f009 fc15 	bl	801b228 <iprintf>
 80119fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011a02:	e04b      	b.n	8011a9c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d007      	beq.n	8011a1a <pbuf_take+0x7e>
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d004      	beq.n	8011a1a <pbuf_take+0x7e>
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	891b      	ldrh	r3, [r3, #8]
 8011a14:	88fa      	ldrh	r2, [r7, #6]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d902      	bls.n	8011a20 <pbuf_take+0x84>
    return ERR_ARG;
 8011a1a:	f06f 030f 	mvn.w	r3, #15
 8011a1e:	e03d      	b.n	8011a9c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	61fb      	str	r3, [r7, #28]
 8011a24:	e028      	b.n	8011a78 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d106      	bne.n	8011a3a <pbuf_take+0x9e>
 8011a2c:	4b1d      	ldr	r3, [pc, #116]	; (8011aa4 <pbuf_take+0x108>)
 8011a2e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011a32:	4921      	ldr	r1, [pc, #132]	; (8011ab8 <pbuf_take+0x11c>)
 8011a34:	481d      	ldr	r0, [pc, #116]	; (8011aac <pbuf_take+0x110>)
 8011a36:	f009 fbf7 	bl	801b228 <iprintf>
    buf_copy_len = total_copy_len;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	895b      	ldrh	r3, [r3, #10]
 8011a42:	461a      	mov	r2, r3
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d902      	bls.n	8011a50 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	895b      	ldrh	r3, [r3, #10]
 8011a4e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	6858      	ldr	r0, [r3, #4]
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	4413      	add	r3, r2
 8011a5a:	69ba      	ldr	r2, [r7, #24]
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	f009 fdec 	bl	801b63a <memcpy>
    total_copy_len -= buf_copy_len;
 8011a62:	697a      	ldr	r2, [r7, #20]
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	4413      	add	r3, r2
 8011a70:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	61fb      	str	r3, [r7, #28]
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1d3      	bne.n	8011a26 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d103      	bne.n	8011a8c <pbuf_take+0xf0>
 8011a84:	88fb      	ldrh	r3, [r7, #6]
 8011a86:	693a      	ldr	r2, [r7, #16]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d006      	beq.n	8011a9a <pbuf_take+0xfe>
 8011a8c:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <pbuf_take+0x108>)
 8011a8e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011a92:	490a      	ldr	r1, [pc, #40]	; (8011abc <pbuf_take+0x120>)
 8011a94:	4805      	ldr	r0, [pc, #20]	; (8011aac <pbuf_take+0x110>)
 8011a96:	f009 fbc7 	bl	801b228 <iprintf>
  return ERR_OK;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3720      	adds	r7, #32
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	0801e810 	.word	0x0801e810
 8011aa8:	0801ebe8 	.word	0x0801ebe8
 8011aac:	0801e870 	.word	0x0801e870
 8011ab0:	0801ec00 	.word	0x0801ec00
 8011ab4:	0801ec1c 	.word	0x0801ec1c
 8011ab8:	0801ec3c 	.word	0x0801ec3c
 8011abc:	0801ec54 	.word	0x0801ec54

08011ac0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	603a      	str	r2, [r7, #0]
 8011aca:	71fb      	strb	r3, [r7, #7]
 8011acc:	460b      	mov	r3, r1
 8011ace:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	8919      	ldrh	r1, [r3, #8]
 8011ad4:	88ba      	ldrh	r2, [r7, #4]
 8011ad6:	79fb      	ldrb	r3, [r7, #7]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff fa1f 	bl	8010f1c <pbuf_alloc>
 8011ade:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d101      	bne.n	8011aea <pbuf_clone+0x2a>
    return NULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e011      	b.n	8011b0e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011aea:	6839      	ldr	r1, [r7, #0]
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	f7ff fe11 	bl	8011714 <pbuf_copy>
 8011af2:	4603      	mov	r3, r0
 8011af4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011af6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d006      	beq.n	8011b0c <pbuf_clone+0x4c>
 8011afe:	4b06      	ldr	r3, [pc, #24]	; (8011b18 <pbuf_clone+0x58>)
 8011b00:	f240 5224 	movw	r2, #1316	; 0x524
 8011b04:	4905      	ldr	r1, [pc, #20]	; (8011b1c <pbuf_clone+0x5c>)
 8011b06:	4806      	ldr	r0, [pc, #24]	; (8011b20 <pbuf_clone+0x60>)
 8011b08:	f009 fb8e 	bl	801b228 <iprintf>
  return q;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	0801e810 	.word	0x0801e810
 8011b1c:	0801ec84 	.word	0x0801ec84
 8011b20:	0801e870 	.word	0x0801e870

08011b24 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b28:	f008 fe42 	bl	801a7b0 <rand>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	4b01      	ldr	r3, [pc, #4]	; (8011b44 <tcp_init+0x20>)
 8011b3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b40:	bf00      	nop
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	20000054 	.word	0x20000054

08011b48 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7d1b      	ldrb	r3, [r3, #20]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d105      	bne.n	8011b64 <tcp_free+0x1c>
 8011b58:	4b06      	ldr	r3, [pc, #24]	; (8011b74 <tcp_free+0x2c>)
 8011b5a:	22d4      	movs	r2, #212	; 0xd4
 8011b5c:	4906      	ldr	r1, [pc, #24]	; (8011b78 <tcp_free+0x30>)
 8011b5e:	4807      	ldr	r0, [pc, #28]	; (8011b7c <tcp_free+0x34>)
 8011b60:	f009 fb62 	bl	801b228 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011b64:	6879      	ldr	r1, [r7, #4]
 8011b66:	2001      	movs	r0, #1
 8011b68:	f7fe fe46 	bl	80107f8 <memp_free>
}
 8011b6c:	bf00      	nop
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	0801ed10 	.word	0x0801ed10
 8011b78:	0801ed40 	.word	0x0801ed40
 8011b7c:	0801ed54 	.word	0x0801ed54

08011b80 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	7d1b      	ldrb	r3, [r3, #20]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d105      	bne.n	8011b9c <tcp_free_listen+0x1c>
 8011b90:	4b06      	ldr	r3, [pc, #24]	; (8011bac <tcp_free_listen+0x2c>)
 8011b92:	22df      	movs	r2, #223	; 0xdf
 8011b94:	4906      	ldr	r1, [pc, #24]	; (8011bb0 <tcp_free_listen+0x30>)
 8011b96:	4807      	ldr	r0, [pc, #28]	; (8011bb4 <tcp_free_listen+0x34>)
 8011b98:	f009 fb46 	bl	801b228 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011b9c:	6879      	ldr	r1, [r7, #4]
 8011b9e:	2002      	movs	r0, #2
 8011ba0:	f7fe fe2a 	bl	80107f8 <memp_free>
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	0801ed10 	.word	0x0801ed10
 8011bb0:	0801ed7c 	.word	0x0801ed7c
 8011bb4:	0801ed54 	.word	0x0801ed54

08011bb8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011bbc:	f001 f802 	bl	8012bc4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011bc0:	4b07      	ldr	r3, [pc, #28]	; (8011be0 <tcp_tmr+0x28>)
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <tcp_tmr+0x28>)
 8011bca:	701a      	strb	r2, [r3, #0]
 8011bcc:	4b04      	ldr	r3, [pc, #16]	; (8011be0 <tcp_tmr+0x28>)
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	f003 0301 	and.w	r3, r3, #1
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011bd8:	f000 fcb4 	bl	8012544 <tcp_slowtmr>
  }
}
 8011bdc:	bf00      	nop
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	20007061 	.word	0x20007061

08011be4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d105      	bne.n	8011c00 <tcp_remove_listener+0x1c>
 8011bf4:	4b0d      	ldr	r3, [pc, #52]	; (8011c2c <tcp_remove_listener+0x48>)
 8011bf6:	22ff      	movs	r2, #255	; 0xff
 8011bf8:	490d      	ldr	r1, [pc, #52]	; (8011c30 <tcp_remove_listener+0x4c>)
 8011bfa:	480e      	ldr	r0, [pc, #56]	; (8011c34 <tcp_remove_listener+0x50>)
 8011bfc:	f009 fb14 	bl	801b228 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	60fb      	str	r3, [r7, #12]
 8011c04:	e00a      	b.n	8011c1c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c0a:	683a      	ldr	r2, [r7, #0]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d102      	bne.n	8011c16 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2200      	movs	r2, #0
 8011c14:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	60fb      	str	r3, [r7, #12]
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d1f1      	bne.n	8011c06 <tcp_remove_listener+0x22>
    }
  }
}
 8011c22:	bf00      	nop
 8011c24:	bf00      	nop
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	0801ed10 	.word	0x0801ed10
 8011c30:	0801ed98 	.word	0x0801ed98
 8011c34:	0801ed54 	.word	0x0801ed54

08011c38 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <tcp_listen_closed+0x1c>
 8011c46:	4b14      	ldr	r3, [pc, #80]	; (8011c98 <tcp_listen_closed+0x60>)
 8011c48:	f240 1211 	movw	r2, #273	; 0x111
 8011c4c:	4913      	ldr	r1, [pc, #76]	; (8011c9c <tcp_listen_closed+0x64>)
 8011c4e:	4814      	ldr	r0, [pc, #80]	; (8011ca0 <tcp_listen_closed+0x68>)
 8011c50:	f009 faea 	bl	801b228 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	7d1b      	ldrb	r3, [r3, #20]
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d006      	beq.n	8011c6a <tcp_listen_closed+0x32>
 8011c5c:	4b0e      	ldr	r3, [pc, #56]	; (8011c98 <tcp_listen_closed+0x60>)
 8011c5e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011c62:	4910      	ldr	r1, [pc, #64]	; (8011ca4 <tcp_listen_closed+0x6c>)
 8011c64:	480e      	ldr	r0, [pc, #56]	; (8011ca0 <tcp_listen_closed+0x68>)
 8011c66:	f009 fadf 	bl	801b228 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	60fb      	str	r3, [r7, #12]
 8011c6e:	e00b      	b.n	8011c88 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011c70:	4a0d      	ldr	r2, [pc, #52]	; (8011ca8 <tcp_listen_closed+0x70>)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6879      	ldr	r1, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7ff ffb1 	bl	8011be4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	3301      	adds	r3, #1
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	d9f0      	bls.n	8011c70 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011c8e:	bf00      	nop
 8011c90:	bf00      	nop
 8011c92:	3710      	adds	r7, #16
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0801ed10 	.word	0x0801ed10
 8011c9c:	0801edc0 	.word	0x0801edc0
 8011ca0:	0801ed54 	.word	0x0801ed54
 8011ca4:	0801edcc 	.word	0x0801edcc
 8011ca8:	08020d34 	.word	0x08020d34

08011cac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011cac:	b5b0      	push	{r4, r5, r7, lr}
 8011cae:	b088      	sub	sp, #32
 8011cb0:	af04      	add	r7, sp, #16
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d106      	bne.n	8011ccc <tcp_close_shutdown+0x20>
 8011cbe:	4b63      	ldr	r3, [pc, #396]	; (8011e4c <tcp_close_shutdown+0x1a0>)
 8011cc0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011cc4:	4962      	ldr	r1, [pc, #392]	; (8011e50 <tcp_close_shutdown+0x1a4>)
 8011cc6:	4863      	ldr	r0, [pc, #396]	; (8011e54 <tcp_close_shutdown+0x1a8>)
 8011cc8:	f009 faae 	bl	801b228 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011ccc:	78fb      	ldrb	r3, [r7, #3]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d067      	beq.n	8011da2 <tcp_close_shutdown+0xf6>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	7d1b      	ldrb	r3, [r3, #20]
 8011cd6:	2b04      	cmp	r3, #4
 8011cd8:	d003      	beq.n	8011ce2 <tcp_close_shutdown+0x36>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7d1b      	ldrb	r3, [r3, #20]
 8011cde:	2b07      	cmp	r3, #7
 8011ce0:	d15f      	bne.n	8011da2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d105      	bne.n	8011cf6 <tcp_close_shutdown+0x4a>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cee:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d055      	beq.n	8011da2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	8b5b      	ldrh	r3, [r3, #26]
 8011cfa:	f003 0310 	and.w	r3, r3, #16
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d106      	bne.n	8011d10 <tcp_close_shutdown+0x64>
 8011d02:	4b52      	ldr	r3, [pc, #328]	; (8011e4c <tcp_close_shutdown+0x1a0>)
 8011d04:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011d08:	4953      	ldr	r1, [pc, #332]	; (8011e58 <tcp_close_shutdown+0x1ac>)
 8011d0a:	4852      	ldr	r0, [pc, #328]	; (8011e54 <tcp_close_shutdown+0x1a8>)
 8011d0c:	f009 fa8c 	bl	801b228 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d18:	687d      	ldr	r5, [r7, #4]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	8ad2      	ldrh	r2, [r2, #22]
 8011d22:	6879      	ldr	r1, [r7, #4]
 8011d24:	8b09      	ldrh	r1, [r1, #24]
 8011d26:	9102      	str	r1, [sp, #8]
 8011d28:	9201      	str	r2, [sp, #4]
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	462b      	mov	r3, r5
 8011d2e:	4622      	mov	r2, r4
 8011d30:	4601      	mov	r1, r0
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f005 fcfa 	bl	801772c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f001 fad7 	bl	80132ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011d3e:	4b47      	ldr	r3, [pc, #284]	; (8011e5c <tcp_close_shutdown+0x1b0>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d105      	bne.n	8011d54 <tcp_close_shutdown+0xa8>
 8011d48:	4b44      	ldr	r3, [pc, #272]	; (8011e5c <tcp_close_shutdown+0x1b0>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	4a43      	ldr	r2, [pc, #268]	; (8011e5c <tcp_close_shutdown+0x1b0>)
 8011d50:	6013      	str	r3, [r2, #0]
 8011d52:	e013      	b.n	8011d7c <tcp_close_shutdown+0xd0>
 8011d54:	4b41      	ldr	r3, [pc, #260]	; (8011e5c <tcp_close_shutdown+0x1b0>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	60fb      	str	r3, [r7, #12]
 8011d5a:	e00c      	b.n	8011d76 <tcp_close_shutdown+0xca>
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d104      	bne.n	8011d70 <tcp_close_shutdown+0xc4>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	68da      	ldr	r2, [r3, #12]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	60da      	str	r2, [r3, #12]
 8011d6e:	e005      	b.n	8011d7c <tcp_close_shutdown+0xd0>
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	60fb      	str	r3, [r7, #12]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1ef      	bne.n	8011d5c <tcp_close_shutdown+0xb0>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	60da      	str	r2, [r3, #12]
 8011d82:	4b37      	ldr	r3, [pc, #220]	; (8011e60 <tcp_close_shutdown+0x1b4>)
 8011d84:	2201      	movs	r2, #1
 8011d86:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011d88:	4b36      	ldr	r3, [pc, #216]	; (8011e64 <tcp_close_shutdown+0x1b8>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d102      	bne.n	8011d98 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011d92:	f003 ff6f 	bl	8015c74 <tcp_trigger_input_pcb_close>
 8011d96:	e002      	b.n	8011d9e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7ff fed5 	bl	8011b48 <tcp_free>
      }
      return ERR_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e050      	b.n	8011e44 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	7d1b      	ldrb	r3, [r3, #20]
 8011da6:	2b02      	cmp	r3, #2
 8011da8:	d03b      	beq.n	8011e22 <tcp_close_shutdown+0x176>
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	dc44      	bgt.n	8011e38 <tcp_close_shutdown+0x18c>
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d002      	beq.n	8011db8 <tcp_close_shutdown+0x10c>
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d02a      	beq.n	8011e0c <tcp_close_shutdown+0x160>
 8011db6:	e03f      	b.n	8011e38 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	8adb      	ldrh	r3, [r3, #22]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d021      	beq.n	8011e04 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011dc0:	4b29      	ldr	r3, [pc, #164]	; (8011e68 <tcp_close_shutdown+0x1bc>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d105      	bne.n	8011dd6 <tcp_close_shutdown+0x12a>
 8011dca:	4b27      	ldr	r3, [pc, #156]	; (8011e68 <tcp_close_shutdown+0x1bc>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	4a25      	ldr	r2, [pc, #148]	; (8011e68 <tcp_close_shutdown+0x1bc>)
 8011dd2:	6013      	str	r3, [r2, #0]
 8011dd4:	e013      	b.n	8011dfe <tcp_close_shutdown+0x152>
 8011dd6:	4b24      	ldr	r3, [pc, #144]	; (8011e68 <tcp_close_shutdown+0x1bc>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	60bb      	str	r3, [r7, #8]
 8011ddc:	e00c      	b.n	8011df8 <tcp_close_shutdown+0x14c>
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d104      	bne.n	8011df2 <tcp_close_shutdown+0x146>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68da      	ldr	r2, [r3, #12]
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	60da      	str	r2, [r3, #12]
 8011df0:	e005      	b.n	8011dfe <tcp_close_shutdown+0x152>
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	60bb      	str	r3, [r7, #8]
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1ef      	bne.n	8011dde <tcp_close_shutdown+0x132>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff fe9f 	bl	8011b48 <tcp_free>
      break;
 8011e0a:	e01a      	b.n	8011e42 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7ff ff13 	bl	8011c38 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011e12:	6879      	ldr	r1, [r7, #4]
 8011e14:	4815      	ldr	r0, [pc, #84]	; (8011e6c <tcp_close_shutdown+0x1c0>)
 8011e16:	f001 fab9 	bl	801338c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff feb0 	bl	8011b80 <tcp_free_listen>
      break;
 8011e20:	e00f      	b.n	8011e42 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011e22:	6879      	ldr	r1, [r7, #4]
 8011e24:	480d      	ldr	r0, [pc, #52]	; (8011e5c <tcp_close_shutdown+0x1b0>)
 8011e26:	f001 fab1 	bl	801338c <tcp_pcb_remove>
 8011e2a:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <tcp_close_shutdown+0x1b4>)
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7ff fe89 	bl	8011b48 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011e36:	e004      	b.n	8011e42 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 f819 	bl	8011e70 <tcp_close_shutdown_fin>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	e000      	b.n	8011e44 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8011e4c:	0801ed10 	.word	0x0801ed10
 8011e50:	0801ede4 	.word	0x0801ede4
 8011e54:	0801ed54 	.word	0x0801ed54
 8011e58:	0801ee04 	.word	0x0801ee04
 8011e5c:	20007058 	.word	0x20007058
 8011e60:	20007060 	.word	0x20007060
 8011e64:	20007098 	.word	0x20007098
 8011e68:	20007050 	.word	0x20007050
 8011e6c:	20007054 	.word	0x20007054

08011e70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <tcp_close_shutdown_fin+0x1c>
 8011e7e:	4b2e      	ldr	r3, [pc, #184]	; (8011f38 <tcp_close_shutdown_fin+0xc8>)
 8011e80:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011e84:	492d      	ldr	r1, [pc, #180]	; (8011f3c <tcp_close_shutdown_fin+0xcc>)
 8011e86:	482e      	ldr	r0, [pc, #184]	; (8011f40 <tcp_close_shutdown_fin+0xd0>)
 8011e88:	f009 f9ce 	bl	801b228 <iprintf>

  switch (pcb->state) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	7d1b      	ldrb	r3, [r3, #20]
 8011e90:	2b07      	cmp	r3, #7
 8011e92:	d020      	beq.n	8011ed6 <tcp_close_shutdown_fin+0x66>
 8011e94:	2b07      	cmp	r3, #7
 8011e96:	dc2b      	bgt.n	8011ef0 <tcp_close_shutdown_fin+0x80>
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d002      	beq.n	8011ea2 <tcp_close_shutdown_fin+0x32>
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	d00d      	beq.n	8011ebc <tcp_close_shutdown_fin+0x4c>
 8011ea0:	e026      	b.n	8011ef0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f004 fd50 	bl	8016948 <tcp_send_fin>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d11f      	bne.n	8011ef4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2205      	movs	r2, #5
 8011eb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011eba:	e01b      	b.n	8011ef4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f004 fd43 	bl	8016948 <tcp_send_fin>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d114      	bne.n	8011ef8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2205      	movs	r2, #5
 8011ed2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ed4:	e010      	b.n	8011ef8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f004 fd36 	bl	8016948 <tcp_send_fin>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d109      	bne.n	8011efc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2209      	movs	r2, #9
 8011eec:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011eee:	e005      	b.n	8011efc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e01c      	b.n	8011f2e <tcp_close_shutdown_fin+0xbe>
      break;
 8011ef4:	bf00      	nop
 8011ef6:	e002      	b.n	8011efe <tcp_close_shutdown_fin+0x8e>
      break;
 8011ef8:	bf00      	nop
 8011efa:	e000      	b.n	8011efe <tcp_close_shutdown_fin+0x8e>
      break;
 8011efc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d103      	bne.n	8011f0e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f004 fe5c 	bl	8016bc4 <tcp_output>
 8011f0c:	e00d      	b.n	8011f2a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f16:	d108      	bne.n	8011f2a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	8b5b      	ldrh	r3, [r3, #26]
 8011f1c:	f043 0308 	orr.w	r3, r3, #8
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e001      	b.n	8011f2e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	0801ed10 	.word	0x0801ed10
 8011f3c:	0801edc0 	.word	0x0801edc0
 8011f40:	0801ed54 	.word	0x0801ed54

08011f44 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d109      	bne.n	8011f66 <tcp_close+0x22>
 8011f52:	4b0f      	ldr	r3, [pc, #60]	; (8011f90 <tcp_close+0x4c>)
 8011f54:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011f58:	490e      	ldr	r1, [pc, #56]	; (8011f94 <tcp_close+0x50>)
 8011f5a:	480f      	ldr	r0, [pc, #60]	; (8011f98 <tcp_close+0x54>)
 8011f5c:	f009 f964 	bl	801b228 <iprintf>
 8011f60:	f06f 030f 	mvn.w	r3, #15
 8011f64:	e00f      	b.n	8011f86 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	7d1b      	ldrb	r3, [r3, #20]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d006      	beq.n	8011f7c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	8b5b      	ldrh	r3, [r3, #26]
 8011f72:	f043 0310 	orr.w	r3, r3, #16
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011f7c:	2101      	movs	r1, #1
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7ff fe94 	bl	8011cac <tcp_close_shutdown>
 8011f84:	4603      	mov	r3, r0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3708      	adds	r7, #8
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	0801ed10 	.word	0x0801ed10
 8011f94:	0801ee20 	.word	0x0801ee20
 8011f98:	0801ed54 	.word	0x0801ed54

08011f9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b08e      	sub	sp, #56	; 0x38
 8011fa0:	af04      	add	r7, sp, #16
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d107      	bne.n	8011fbc <tcp_abandon+0x20>
 8011fac:	4b52      	ldr	r3, [pc, #328]	; (80120f8 <tcp_abandon+0x15c>)
 8011fae:	f240 223d 	movw	r2, #573	; 0x23d
 8011fb2:	4952      	ldr	r1, [pc, #328]	; (80120fc <tcp_abandon+0x160>)
 8011fb4:	4852      	ldr	r0, [pc, #328]	; (8012100 <tcp_abandon+0x164>)
 8011fb6:	f009 f937 	bl	801b228 <iprintf>
 8011fba:	e099      	b.n	80120f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	7d1b      	ldrb	r3, [r3, #20]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d106      	bne.n	8011fd2 <tcp_abandon+0x36>
 8011fc4:	4b4c      	ldr	r3, [pc, #304]	; (80120f8 <tcp_abandon+0x15c>)
 8011fc6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011fca:	494e      	ldr	r1, [pc, #312]	; (8012104 <tcp_abandon+0x168>)
 8011fcc:	484c      	ldr	r0, [pc, #304]	; (8012100 <tcp_abandon+0x164>)
 8011fce:	f009 f92b 	bl	801b228 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	7d1b      	ldrb	r3, [r3, #20]
 8011fd6:	2b0a      	cmp	r3, #10
 8011fd8:	d107      	bne.n	8011fea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	484a      	ldr	r0, [pc, #296]	; (8012108 <tcp_abandon+0x16c>)
 8011fde:	f001 f9d5 	bl	801338c <tcp_pcb_remove>
    tcp_free(pcb);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f7ff fdb0 	bl	8011b48 <tcp_free>
 8011fe8:	e082      	b.n	80120f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011fea:	2300      	movs	r3, #0
 8011fec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ff6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ffc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012004:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	7d1b      	ldrb	r3, [r3, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d126      	bne.n	8012062 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	8adb      	ldrh	r3, [r3, #22]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d02e      	beq.n	801207a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801201c:	4b3b      	ldr	r3, [pc, #236]	; (801210c <tcp_abandon+0x170>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	429a      	cmp	r2, r3
 8012024:	d105      	bne.n	8012032 <tcp_abandon+0x96>
 8012026:	4b39      	ldr	r3, [pc, #228]	; (801210c <tcp_abandon+0x170>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	4a37      	ldr	r2, [pc, #220]	; (801210c <tcp_abandon+0x170>)
 801202e:	6013      	str	r3, [r2, #0]
 8012030:	e013      	b.n	801205a <tcp_abandon+0xbe>
 8012032:	4b36      	ldr	r3, [pc, #216]	; (801210c <tcp_abandon+0x170>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	61fb      	str	r3, [r7, #28]
 8012038:	e00c      	b.n	8012054 <tcp_abandon+0xb8>
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	429a      	cmp	r2, r3
 8012042:	d104      	bne.n	801204e <tcp_abandon+0xb2>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	68da      	ldr	r2, [r3, #12]
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	60da      	str	r2, [r3, #12]
 801204c:	e005      	b.n	801205a <tcp_abandon+0xbe>
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	61fb      	str	r3, [r7, #28]
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1ef      	bne.n	801203a <tcp_abandon+0x9e>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	60da      	str	r2, [r3, #12]
 8012060:	e00b      	b.n	801207a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	8adb      	ldrh	r3, [r3, #22]
 801206a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801206c:	6879      	ldr	r1, [r7, #4]
 801206e:	4828      	ldr	r0, [pc, #160]	; (8012110 <tcp_abandon+0x174>)
 8012070:	f001 f98c 	bl	801338c <tcp_pcb_remove>
 8012074:	4b27      	ldr	r3, [pc, #156]	; (8012114 <tcp_abandon+0x178>)
 8012076:	2201      	movs	r2, #1
 8012078:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801207e:	2b00      	cmp	r3, #0
 8012080:	d004      	beq.n	801208c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012086:	4618      	mov	r0, r3
 8012088:	f000 fe7e 	bl	8012d88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012090:	2b00      	cmp	r3, #0
 8012092:	d004      	beq.n	801209e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012098:	4618      	mov	r0, r3
 801209a:	f000 fe75 	bl	8012d88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d004      	beq.n	80120b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120aa:	4618      	mov	r0, r3
 80120ac:	f000 fe6c 	bl	8012d88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80120b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00e      	beq.n	80120d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3304      	adds	r3, #4
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	8b12      	ldrh	r2, [r2, #24]
 80120c0:	9202      	str	r2, [sp, #8]
 80120c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80120c4:	9201      	str	r2, [sp, #4]
 80120c6:	9300      	str	r3, [sp, #0]
 80120c8:	460b      	mov	r3, r1
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	69b9      	ldr	r1, [r7, #24]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f005 fb2c 	bl	801772c <tcp_rst>
    }
    last_state = pcb->state;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	7d1b      	ldrb	r3, [r3, #20]
 80120d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7ff fd34 	bl	8011b48 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <tcp_abandon+0x154>
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	f06f 010c 	mvn.w	r1, #12
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	4798      	blx	r3
  }
}
 80120f0:	3728      	adds	r7, #40	; 0x28
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	0801ed10 	.word	0x0801ed10
 80120fc:	0801ee54 	.word	0x0801ee54
 8012100:	0801ed54 	.word	0x0801ed54
 8012104:	0801ee70 	.word	0x0801ee70
 8012108:	2000705c 	.word	0x2000705c
 801210c:	20007050 	.word	0x20007050
 8012110:	20007058 	.word	0x20007058
 8012114:	20007060 	.word	0x20007060

08012118 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012120:	2101      	movs	r1, #1
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f7ff ff3a 	bl	8011f9c <tcp_abandon>
}
 8012128:	bf00      	nop
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <tcp_update_rcv_ann_wnd+0x1c>
 801213e:	4b25      	ldr	r3, [pc, #148]	; (80121d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012140:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012144:	4924      	ldr	r1, [pc, #144]	; (80121d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8012146:	4825      	ldr	r0, [pc, #148]	; (80121dc <tcp_update_rcv_ann_wnd+0xac>)
 8012148:	f009 f86e 	bl	801b228 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012154:	4413      	add	r3, r2
 8012156:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012160:	f640 3168 	movw	r1, #2920	; 0xb68
 8012164:	428a      	cmp	r2, r1
 8012166:	bf28      	it	cs
 8012168:	460a      	movcs	r2, r1
 801216a:	b292      	uxth	r2, r2
 801216c:	4413      	add	r3, r2
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	2b00      	cmp	r3, #0
 8012174:	db08      	blt.n	8012188 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	1ad3      	subs	r3, r2, r3
 8012186:	e020      	b.n	80121ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	2b00      	cmp	r3, #0
 8012194:	dd03      	ble.n	801219e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801219c:	e014      	b.n	80121c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121b0:	d306      	bcc.n	80121c0 <tcp_update_rcv_ann_wnd+0x90>
 80121b2:	4b08      	ldr	r3, [pc, #32]	; (80121d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80121b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80121b8:	4909      	ldr	r1, [pc, #36]	; (80121e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80121ba:	4808      	ldr	r0, [pc, #32]	; (80121dc <tcp_update_rcv_ann_wnd+0xac>)
 80121bc:	f009 f834 	bl	801b228 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80121c8:	2300      	movs	r3, #0
  }
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	0801ed10 	.word	0x0801ed10
 80121d8:	0801ef6c 	.word	0x0801ef6c
 80121dc:	0801ed54 	.word	0x0801ed54
 80121e0:	0801ef90 	.word	0x0801ef90

080121e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	460b      	mov	r3, r1
 80121ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d107      	bne.n	8012206 <tcp_recved+0x22>
 80121f6:	4b20      	ldr	r3, [pc, #128]	; (8012278 <tcp_recved+0x94>)
 80121f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80121fc:	491f      	ldr	r1, [pc, #124]	; (801227c <tcp_recved+0x98>)
 80121fe:	4820      	ldr	r0, [pc, #128]	; (8012280 <tcp_recved+0x9c>)
 8012200:	f009 f812 	bl	801b228 <iprintf>
 8012204:	e034      	b.n	8012270 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	7d1b      	ldrb	r3, [r3, #20]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d106      	bne.n	801221c <tcp_recved+0x38>
 801220e:	4b1a      	ldr	r3, [pc, #104]	; (8012278 <tcp_recved+0x94>)
 8012210:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012214:	491b      	ldr	r1, [pc, #108]	; (8012284 <tcp_recved+0xa0>)
 8012216:	481a      	ldr	r0, [pc, #104]	; (8012280 <tcp_recved+0x9c>)
 8012218:	f009 f806 	bl	801b228 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012220:	887b      	ldrh	r3, [r7, #2]
 8012222:	4413      	add	r3, r2
 8012224:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012226:	89fb      	ldrh	r3, [r7, #14]
 8012228:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801222c:	4293      	cmp	r3, r2
 801222e:	d804      	bhi.n	801223a <tcp_recved+0x56>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012234:	89fa      	ldrh	r2, [r7, #14]
 8012236:	429a      	cmp	r2, r3
 8012238:	d204      	bcs.n	8012244 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012240:	851a      	strh	r2, [r3, #40]	; 0x28
 8012242:	e002      	b.n	801224a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	89fa      	ldrh	r2, [r7, #14]
 8012248:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff ff70 	bl	8012130 <tcp_update_rcv_ann_wnd>
 8012250:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012258:	4293      	cmp	r3, r2
 801225a:	d909      	bls.n	8012270 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8b5b      	ldrh	r3, [r3, #26]
 8012260:	f043 0302 	orr.w	r3, r3, #2
 8012264:	b29a      	uxth	r2, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f004 fcaa 	bl	8016bc4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	0801ed10 	.word	0x0801ed10
 801227c:	0801efac 	.word	0x0801efac
 8012280:	0801ed54 	.word	0x0801ed54
 8012284:	0801efc4 	.word	0x0801efc4

08012288 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012292:	4b1e      	ldr	r3, [pc, #120]	; (801230c <tcp_new_port+0x84>)
 8012294:	881b      	ldrh	r3, [r3, #0]
 8012296:	3301      	adds	r3, #1
 8012298:	b29a      	uxth	r2, r3
 801229a:	4b1c      	ldr	r3, [pc, #112]	; (801230c <tcp_new_port+0x84>)
 801229c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801229e:	4b1b      	ldr	r3, [pc, #108]	; (801230c <tcp_new_port+0x84>)
 80122a0:	881b      	ldrh	r3, [r3, #0]
 80122a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d103      	bne.n	80122b2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80122aa:	4b18      	ldr	r3, [pc, #96]	; (801230c <tcp_new_port+0x84>)
 80122ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80122b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122b2:	2300      	movs	r3, #0
 80122b4:	71fb      	strb	r3, [r7, #7]
 80122b6:	e01e      	b.n	80122f6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122b8:	79fb      	ldrb	r3, [r7, #7]
 80122ba:	4a15      	ldr	r2, [pc, #84]	; (8012310 <tcp_new_port+0x88>)
 80122bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	e011      	b.n	80122ea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	8ada      	ldrh	r2, [r3, #22]
 80122ca:	4b10      	ldr	r3, [pc, #64]	; (801230c <tcp_new_port+0x84>)
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d108      	bne.n	80122e4 <tcp_new_port+0x5c>
        n++;
 80122d2:	88bb      	ldrh	r3, [r7, #4]
 80122d4:	3301      	adds	r3, #1
 80122d6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80122d8:	88bb      	ldrh	r3, [r7, #4]
 80122da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122de:	d3d8      	bcc.n	8012292 <tcp_new_port+0xa>
          return 0;
 80122e0:	2300      	movs	r3, #0
 80122e2:	e00d      	b.n	8012300 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	603b      	str	r3, [r7, #0]
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d1ea      	bne.n	80122c6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122f0:	79fb      	ldrb	r3, [r7, #7]
 80122f2:	3301      	adds	r3, #1
 80122f4:	71fb      	strb	r3, [r7, #7]
 80122f6:	79fb      	ldrb	r3, [r7, #7]
 80122f8:	2b03      	cmp	r3, #3
 80122fa:	d9dd      	bls.n	80122b8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80122fc:	4b03      	ldr	r3, [pc, #12]	; (801230c <tcp_new_port+0x84>)
 80122fe:	881b      	ldrh	r3, [r3, #0]
}
 8012300:	4618      	mov	r0, r3
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr
 801230c:	20000054 	.word	0x20000054
 8012310:	08020d34 	.word	0x08020d34

08012314 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b08a      	sub	sp, #40	; 0x28
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	603b      	str	r3, [r7, #0]
 8012320:	4613      	mov	r3, r2
 8012322:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012324:	2300      	movs	r3, #0
 8012326:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d109      	bne.n	8012342 <tcp_connect+0x2e>
 801232e:	4b7d      	ldr	r3, [pc, #500]	; (8012524 <tcp_connect+0x210>)
 8012330:	f240 4235 	movw	r2, #1077	; 0x435
 8012334:	497c      	ldr	r1, [pc, #496]	; (8012528 <tcp_connect+0x214>)
 8012336:	487d      	ldr	r0, [pc, #500]	; (801252c <tcp_connect+0x218>)
 8012338:	f008 ff76 	bl	801b228 <iprintf>
 801233c:	f06f 030f 	mvn.w	r3, #15
 8012340:	e0ec      	b.n	801251c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d109      	bne.n	801235c <tcp_connect+0x48>
 8012348:	4b76      	ldr	r3, [pc, #472]	; (8012524 <tcp_connect+0x210>)
 801234a:	f240 4236 	movw	r2, #1078	; 0x436
 801234e:	4978      	ldr	r1, [pc, #480]	; (8012530 <tcp_connect+0x21c>)
 8012350:	4876      	ldr	r0, [pc, #472]	; (801252c <tcp_connect+0x218>)
 8012352:	f008 ff69 	bl	801b228 <iprintf>
 8012356:	f06f 030f 	mvn.w	r3, #15
 801235a:	e0df      	b.n	801251c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	7d1b      	ldrb	r3, [r3, #20]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d009      	beq.n	8012378 <tcp_connect+0x64>
 8012364:	4b6f      	ldr	r3, [pc, #444]	; (8012524 <tcp_connect+0x210>)
 8012366:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801236a:	4972      	ldr	r1, [pc, #456]	; (8012534 <tcp_connect+0x220>)
 801236c:	486f      	ldr	r0, [pc, #444]	; (801252c <tcp_connect+0x218>)
 801236e:	f008 ff5b 	bl	801b228 <iprintf>
 8012372:	f06f 0309 	mvn.w	r3, #9
 8012376:	e0d1      	b.n	801251c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d002      	beq.n	8012384 <tcp_connect+0x70>
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	e000      	b.n	8012386 <tcp_connect+0x72>
 8012384:	2300      	movs	r3, #0
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	88fa      	ldrh	r2, [r7, #6]
 801238e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	7a1b      	ldrb	r3, [r3, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d006      	beq.n	80123a6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	7a1b      	ldrb	r3, [r3, #8]
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe fd41 	bl	8010e24 <netif_get_by_index>
 80123a2:	6278      	str	r0, [r7, #36]	; 0x24
 80123a4:	e005      	b.n	80123b2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	3304      	adds	r3, #4
 80123aa:	4618      	mov	r0, r3
 80123ac:	f006 ff84 	bl	80192b8 <ip4_route>
 80123b0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80123b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80123b8:	f06f 0303 	mvn.w	r3, #3
 80123bc:	e0ae      	b.n	801251c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d003      	beq.n	80123cc <tcp_connect+0xb8>
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d111      	bne.n	80123f0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d002      	beq.n	80123d8 <tcp_connect+0xc4>
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	3304      	adds	r3, #4
 80123d6:	e000      	b.n	80123da <tcp_connect+0xc6>
 80123d8:	2300      	movs	r3, #0
 80123da:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d102      	bne.n	80123e8 <tcp_connect+0xd4>
      return ERR_RTE;
 80123e2:	f06f 0303 	mvn.w	r3, #3
 80123e6:	e099      	b.n	801251c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	8adb      	ldrh	r3, [r3, #22]
 80123f4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	8adb      	ldrh	r3, [r3, #22]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10c      	bne.n	8012418 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80123fe:	f7ff ff43 	bl	8012288 <tcp_new_port>
 8012402:	4603      	mov	r3, r0
 8012404:	461a      	mov	r2, r3
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	8adb      	ldrh	r3, [r3, #22]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d102      	bne.n	8012418 <tcp_connect+0x104>
      return ERR_BUF;
 8012412:	f06f 0301 	mvn.w	r3, #1
 8012416:	e081      	b.n	801251c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f001 f84b 	bl	80134b4 <tcp_next_iss>
 801241e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2200      	movs	r2, #0
 8012424:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	697a      	ldr	r2, [r7, #20]
 801242a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	1e5a      	subs	r2, r3, #1
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	1e5a      	subs	r2, r3, #1
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	1e5a      	subs	r2, r3, #1
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801244a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f44f 7206 	mov.w	r2, #536	; 0x218
 801246c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	3304      	adds	r3, #4
 8012476:	461a      	mov	r2, r3
 8012478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801247a:	f001 f841 	bl	8013500 <tcp_eff_send_mss_netif>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2201      	movs	r2, #1
 801248a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012496:	2102      	movs	r1, #2
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f004 faa5 	bl	80169e8 <tcp_enqueue_flags>
 801249e:	4603      	mov	r3, r0
 80124a0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80124a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d136      	bne.n	8012518 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2202      	movs	r2, #2
 80124ae:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80124b0:	8b7b      	ldrh	r3, [r7, #26]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d021      	beq.n	80124fa <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80124b6:	4b20      	ldr	r3, [pc, #128]	; (8012538 <tcp_connect+0x224>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d105      	bne.n	80124cc <tcp_connect+0x1b8>
 80124c0:	4b1d      	ldr	r3, [pc, #116]	; (8012538 <tcp_connect+0x224>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	4a1c      	ldr	r2, [pc, #112]	; (8012538 <tcp_connect+0x224>)
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	e013      	b.n	80124f4 <tcp_connect+0x1e0>
 80124cc:	4b1a      	ldr	r3, [pc, #104]	; (8012538 <tcp_connect+0x224>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	623b      	str	r3, [r7, #32]
 80124d2:	e00c      	b.n	80124ee <tcp_connect+0x1da>
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d104      	bne.n	80124e8 <tcp_connect+0x1d4>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	68da      	ldr	r2, [r3, #12]
 80124e2:	6a3b      	ldr	r3, [r7, #32]
 80124e4:	60da      	str	r2, [r3, #12]
 80124e6:	e005      	b.n	80124f4 <tcp_connect+0x1e0>
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	623b      	str	r3, [r7, #32]
 80124ee:	6a3b      	ldr	r3, [r7, #32]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d1ef      	bne.n	80124d4 <tcp_connect+0x1c0>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2200      	movs	r2, #0
 80124f8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80124fa:	4b10      	ldr	r3, [pc, #64]	; (801253c <tcp_connect+0x228>)
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	60da      	str	r2, [r3, #12]
 8012502:	4a0e      	ldr	r2, [pc, #56]	; (801253c <tcp_connect+0x228>)
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6013      	str	r3, [r2, #0]
 8012508:	f005 fad2 	bl	8017ab0 <tcp_timer_needed>
 801250c:	4b0c      	ldr	r3, [pc, #48]	; (8012540 <tcp_connect+0x22c>)
 801250e:	2201      	movs	r2, #1
 8012510:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f004 fb56 	bl	8016bc4 <tcp_output>
  }
  return ret;
 8012518:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801251c:	4618      	mov	r0, r3
 801251e:	3728      	adds	r7, #40	; 0x28
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	0801ed10 	.word	0x0801ed10
 8012528:	0801efec 	.word	0x0801efec
 801252c:	0801ed54 	.word	0x0801ed54
 8012530:	0801f008 	.word	0x0801f008
 8012534:	0801f024 	.word	0x0801f024
 8012538:	20007050 	.word	0x20007050
 801253c:	20007058 	.word	0x20007058
 8012540:	20007060 	.word	0x20007060

08012544 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012544:	b5b0      	push	{r4, r5, r7, lr}
 8012546:	b090      	sub	sp, #64	; 0x40
 8012548:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801254a:	2300      	movs	r3, #0
 801254c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012550:	4b94      	ldr	r3, [pc, #592]	; (80127a4 <tcp_slowtmr+0x260>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	3301      	adds	r3, #1
 8012556:	4a93      	ldr	r2, [pc, #588]	; (80127a4 <tcp_slowtmr+0x260>)
 8012558:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801255a:	4b93      	ldr	r3, [pc, #588]	; (80127a8 <tcp_slowtmr+0x264>)
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	3301      	adds	r3, #1
 8012560:	b2da      	uxtb	r2, r3
 8012562:	4b91      	ldr	r3, [pc, #580]	; (80127a8 <tcp_slowtmr+0x264>)
 8012564:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012566:	2300      	movs	r3, #0
 8012568:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801256a:	4b90      	ldr	r3, [pc, #576]	; (80127ac <tcp_slowtmr+0x268>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012570:	e29d      	b.n	8012aae <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012574:	7d1b      	ldrb	r3, [r3, #20]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <tcp_slowtmr+0x44>
 801257a:	4b8d      	ldr	r3, [pc, #564]	; (80127b0 <tcp_slowtmr+0x26c>)
 801257c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012580:	498c      	ldr	r1, [pc, #560]	; (80127b4 <tcp_slowtmr+0x270>)
 8012582:	488d      	ldr	r0, [pc, #564]	; (80127b8 <tcp_slowtmr+0x274>)
 8012584:	f008 fe50 	bl	801b228 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	7d1b      	ldrb	r3, [r3, #20]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d106      	bne.n	801259e <tcp_slowtmr+0x5a>
 8012590:	4b87      	ldr	r3, [pc, #540]	; (80127b0 <tcp_slowtmr+0x26c>)
 8012592:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012596:	4989      	ldr	r1, [pc, #548]	; (80127bc <tcp_slowtmr+0x278>)
 8012598:	4887      	ldr	r0, [pc, #540]	; (80127b8 <tcp_slowtmr+0x274>)
 801259a:	f008 fe45 	bl	801b228 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a0:	7d1b      	ldrb	r3, [r3, #20]
 80125a2:	2b0a      	cmp	r3, #10
 80125a4:	d106      	bne.n	80125b4 <tcp_slowtmr+0x70>
 80125a6:	4b82      	ldr	r3, [pc, #520]	; (80127b0 <tcp_slowtmr+0x26c>)
 80125a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80125ac:	4984      	ldr	r1, [pc, #528]	; (80127c0 <tcp_slowtmr+0x27c>)
 80125ae:	4882      	ldr	r0, [pc, #520]	; (80127b8 <tcp_slowtmr+0x274>)
 80125b0:	f008 fe3a 	bl	801b228 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80125b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b6:	7f9a      	ldrb	r2, [r3, #30]
 80125b8:	4b7b      	ldr	r3, [pc, #492]	; (80127a8 <tcp_slowtmr+0x264>)
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d105      	bne.n	80125cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80125c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80125c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80125ca:	e270      	b.n	8012aae <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80125cc:	4b76      	ldr	r3, [pc, #472]	; (80127a8 <tcp_slowtmr+0x264>)
 80125ce:	781a      	ldrb	r2, [r3, #0]
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	7d1b      	ldrb	r3, [r3, #20]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d10a      	bne.n	80125fe <tcp_slowtmr+0xba>
 80125e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125ee:	2b05      	cmp	r3, #5
 80125f0:	d905      	bls.n	80125fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 80125f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f6:	3301      	adds	r3, #1
 80125f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125fc:	e11e      	b.n	801283c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80125fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012604:	2b0b      	cmp	r3, #11
 8012606:	d905      	bls.n	8012614 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801260c:	3301      	adds	r3, #1
 801260e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012612:	e113      	b.n	801283c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012616:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801261a:	2b00      	cmp	r3, #0
 801261c:	d075      	beq.n	801270a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012622:	2b00      	cmp	r3, #0
 8012624:	d006      	beq.n	8012634 <tcp_slowtmr+0xf0>
 8012626:	4b62      	ldr	r3, [pc, #392]	; (80127b0 <tcp_slowtmr+0x26c>)
 8012628:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801262c:	4965      	ldr	r1, [pc, #404]	; (80127c4 <tcp_slowtmr+0x280>)
 801262e:	4862      	ldr	r0, [pc, #392]	; (80127b8 <tcp_slowtmr+0x274>)
 8012630:	f008 fdfa 	bl	801b228 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012638:	2b00      	cmp	r3, #0
 801263a:	d106      	bne.n	801264a <tcp_slowtmr+0x106>
 801263c:	4b5c      	ldr	r3, [pc, #368]	; (80127b0 <tcp_slowtmr+0x26c>)
 801263e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012642:	4961      	ldr	r1, [pc, #388]	; (80127c8 <tcp_slowtmr+0x284>)
 8012644:	485c      	ldr	r0, [pc, #368]	; (80127b8 <tcp_slowtmr+0x274>)
 8012646:	f008 fdef 	bl	801b228 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012650:	2b0b      	cmp	r3, #11
 8012652:	d905      	bls.n	8012660 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012658:	3301      	adds	r3, #1
 801265a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801265e:	e0ed      	b.n	801283c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012666:	3b01      	subs	r3, #1
 8012668:	4a58      	ldr	r2, [pc, #352]	; (80127cc <tcp_slowtmr+0x288>)
 801266a:	5cd3      	ldrb	r3, [r2, r3]
 801266c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012670:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012674:	7c7a      	ldrb	r2, [r7, #17]
 8012676:	429a      	cmp	r2, r3
 8012678:	d907      	bls.n	801268a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012680:	3301      	adds	r3, #1
 8012682:	b2da      	uxtb	r2, r3
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012690:	7c7a      	ldrb	r2, [r7, #17]
 8012692:	429a      	cmp	r2, r3
 8012694:	f200 80d2 	bhi.w	801283c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012698:	2301      	movs	r3, #1
 801269a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d108      	bne.n	80126b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80126a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126a8:	f005 f934 	bl	8017914 <tcp_zero_window_probe>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d014      	beq.n	80126dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80126b2:	2300      	movs	r3, #0
 80126b4:	623b      	str	r3, [r7, #32]
 80126b6:	e011      	b.n	80126dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80126b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126be:	4619      	mov	r1, r3
 80126c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126c2:	f003 fff9 	bl	80166b8 <tcp_split_unsent_seg>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d107      	bne.n	80126dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80126cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ce:	f004 fa79 	bl	8016bc4 <tcp_output>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d101      	bne.n	80126dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80126d8:	2300      	movs	r3, #0
 80126da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 80ac 	beq.w	801283c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	2200      	movs	r2, #0
 80126e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126f2:	2b06      	cmp	r3, #6
 80126f4:	f200 80a2 	bhi.w	801283c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80126f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126fe:	3301      	adds	r3, #1
 8012700:	b2da      	uxtb	r2, r3
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012708:	e098      	b.n	801283c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012710:	2b00      	cmp	r3, #0
 8012712:	db0f      	blt.n	8012734 <tcp_slowtmr+0x1f0>
 8012714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012716:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801271a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801271e:	4293      	cmp	r3, r2
 8012720:	d008      	beq.n	8012734 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012724:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012728:	b29b      	uxth	r3, r3
 801272a:	3301      	adds	r3, #1
 801272c:	b29b      	uxth	r3, r3
 801272e:	b21a      	sxth	r2, r3
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012740:	429a      	cmp	r2, r3
 8012742:	db7b      	blt.n	801283c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012746:	f004 fd31 	bl	80171ac <tcp_rexmit_rto_prepare>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d007      	beq.n	8012760 <tcp_slowtmr+0x21c>
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012754:	2b00      	cmp	r3, #0
 8012756:	d171      	bne.n	801283c <tcp_slowtmr+0x2f8>
 8012758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801275c:	2b00      	cmp	r3, #0
 801275e:	d06d      	beq.n	801283c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	2b02      	cmp	r3, #2
 8012766:	d03a      	beq.n	80127de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801276e:	2b0c      	cmp	r3, #12
 8012770:	bf28      	it	cs
 8012772:	230c      	movcs	r3, #12
 8012774:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012778:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801277c:	10db      	asrs	r3, r3, #3
 801277e:	b21b      	sxth	r3, r3
 8012780:	461a      	mov	r2, r3
 8012782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012784:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012788:	4413      	add	r3, r2
 801278a:	7efa      	ldrb	r2, [r7, #27]
 801278c:	4910      	ldr	r1, [pc, #64]	; (80127d0 <tcp_slowtmr+0x28c>)
 801278e:	5c8a      	ldrb	r2, [r1, r2]
 8012790:	4093      	lsls	r3, r2
 8012792:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801279a:	4293      	cmp	r3, r2
 801279c:	dc1a      	bgt.n	80127d4 <tcp_slowtmr+0x290>
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	b21a      	sxth	r2, r3
 80127a2:	e019      	b.n	80127d8 <tcp_slowtmr+0x294>
 80127a4:	2000704c 	.word	0x2000704c
 80127a8:	20007062 	.word	0x20007062
 80127ac:	20007058 	.word	0x20007058
 80127b0:	0801ed10 	.word	0x0801ed10
 80127b4:	0801f054 	.word	0x0801f054
 80127b8:	0801ed54 	.word	0x0801ed54
 80127bc:	0801f080 	.word	0x0801f080
 80127c0:	0801f0ac 	.word	0x0801f0ac
 80127c4:	0801f0dc 	.word	0x0801f0dc
 80127c8:	0801f110 	.word	0x0801f110
 80127cc:	08020d2c 	.word	0x08020d2c
 80127d0:	08020d1c 	.word	0x08020d1c
 80127d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80127de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e0:	2200      	movs	r2, #0
 80127e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80127ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127f0:	4293      	cmp	r3, r2
 80127f2:	bf28      	it	cs
 80127f4:	4613      	movcs	r3, r2
 80127f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80127f8:	8a7b      	ldrh	r3, [r7, #18]
 80127fa:	085b      	lsrs	r3, r3, #1
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012800:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012806:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	b29b      	uxth	r3, r3
 8012812:	429a      	cmp	r2, r3
 8012814:	d206      	bcs.n	8012824 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801281a:	005b      	lsls	r3, r3, #1
 801281c:	b29a      	uxth	r2, r3
 801281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	2200      	movs	r2, #0
 8012832:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012838:	f004 fd28 	bl	801728c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	7d1b      	ldrb	r3, [r3, #20]
 8012840:	2b06      	cmp	r3, #6
 8012842:	d111      	bne.n	8012868 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	8b5b      	ldrh	r3, [r3, #26]
 8012848:	f003 0310 	and.w	r3, r3, #16
 801284c:	2b00      	cmp	r3, #0
 801284e:	d00b      	beq.n	8012868 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012850:	4b9c      	ldr	r3, [pc, #624]	; (8012ac4 <tcp_slowtmr+0x580>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	6a1b      	ldr	r3, [r3, #32]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b28      	cmp	r3, #40	; 0x28
 801285c:	d904      	bls.n	8012868 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801285e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012862:	3301      	adds	r3, #1
 8012864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	7a5b      	ldrb	r3, [r3, #9]
 801286c:	f003 0308 	and.w	r3, r3, #8
 8012870:	2b00      	cmp	r3, #0
 8012872:	d04a      	beq.n	801290a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012876:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012878:	2b04      	cmp	r3, #4
 801287a:	d003      	beq.n	8012884 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012880:	2b07      	cmp	r3, #7
 8012882:	d142      	bne.n	801290a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012884:	4b8f      	ldr	r3, [pc, #572]	; (8012ac4 <tcp_slowtmr+0x580>)
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012890:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012894:	4b8c      	ldr	r3, [pc, #560]	; (8012ac8 <tcp_slowtmr+0x584>)
 8012896:	440b      	add	r3, r1
 8012898:	498c      	ldr	r1, [pc, #560]	; (8012acc <tcp_slowtmr+0x588>)
 801289a:	fba1 1303 	umull	r1, r3, r1, r3
 801289e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d90a      	bls.n	80128ba <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80128a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a8:	3301      	adds	r3, #1
 80128aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80128ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128b2:	3301      	adds	r3, #1
 80128b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80128b8:	e027      	b.n	801290a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128ba:	4b82      	ldr	r3, [pc, #520]	; (8012ac4 <tcp_slowtmr+0x580>)
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c0:	6a1b      	ldr	r3, [r3, #32]
 80128c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80128c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80128d0:	4618      	mov	r0, r3
 80128d2:	4b7f      	ldr	r3, [pc, #508]	; (8012ad0 <tcp_slowtmr+0x58c>)
 80128d4:	fb00 f303 	mul.w	r3, r0, r3
 80128d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80128da:	497c      	ldr	r1, [pc, #496]	; (8012acc <tcp_slowtmr+0x588>)
 80128dc:	fba1 1303 	umull	r1, r3, r1, r3
 80128e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d911      	bls.n	801290a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80128e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128e8:	f004 ffd4 	bl	8017894 <tcp_keepalive>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80128f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d107      	bne.n	801290a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80128fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012900:	3301      	adds	r3, #1
 8012902:	b2da      	uxtb	r2, r3
 8012904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012906:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801290e:	2b00      	cmp	r3, #0
 8012910:	d011      	beq.n	8012936 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012912:	4b6c      	ldr	r3, [pc, #432]	; (8012ac4 <tcp_slowtmr+0x580>)
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012918:	6a1b      	ldr	r3, [r3, #32]
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012922:	4619      	mov	r1, r3
 8012924:	460b      	mov	r3, r1
 8012926:	005b      	lsls	r3, r3, #1
 8012928:	440b      	add	r3, r1
 801292a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801292c:	429a      	cmp	r2, r3
 801292e:	d302      	bcc.n	8012936 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012932:	f000 fe8f 	bl	8013654 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	7d1b      	ldrb	r3, [r3, #20]
 801293a:	2b03      	cmp	r3, #3
 801293c:	d10b      	bne.n	8012956 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801293e:	4b61      	ldr	r3, [pc, #388]	; (8012ac4 <tcp_slowtmr+0x580>)
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012944:	6a1b      	ldr	r3, [r3, #32]
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	2b28      	cmp	r3, #40	; 0x28
 801294a:	d904      	bls.n	8012956 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012950:	3301      	adds	r3, #1
 8012952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	7d1b      	ldrb	r3, [r3, #20]
 801295a:	2b09      	cmp	r3, #9
 801295c:	d10b      	bne.n	8012976 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801295e:	4b59      	ldr	r3, [pc, #356]	; (8012ac4 <tcp_slowtmr+0x580>)
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012964:	6a1b      	ldr	r3, [r3, #32]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	2bf0      	cmp	r3, #240	; 0xf0
 801296a:	d904      	bls.n	8012976 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801296c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012970:	3301      	adds	r3, #1
 8012972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801297a:	2b00      	cmp	r3, #0
 801297c:	d060      	beq.n	8012a40 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012984:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012988:	f000 fcb0 	bl	80132ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298e:	2b00      	cmp	r3, #0
 8012990:	d010      	beq.n	80129b4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012992:	4b50      	ldr	r3, [pc, #320]	; (8012ad4 <tcp_slowtmr+0x590>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012998:	429a      	cmp	r2, r3
 801299a:	d106      	bne.n	80129aa <tcp_slowtmr+0x466>
 801299c:	4b4e      	ldr	r3, [pc, #312]	; (8012ad8 <tcp_slowtmr+0x594>)
 801299e:	f240 526d 	movw	r2, #1389	; 0x56d
 80129a2:	494e      	ldr	r1, [pc, #312]	; (8012adc <tcp_slowtmr+0x598>)
 80129a4:	484e      	ldr	r0, [pc, #312]	; (8012ae0 <tcp_slowtmr+0x59c>)
 80129a6:	f008 fc3f 	bl	801b228 <iprintf>
        prev->next = pcb->next;
 80129aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ac:	68da      	ldr	r2, [r3, #12]
 80129ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b0:	60da      	str	r2, [r3, #12]
 80129b2:	e00f      	b.n	80129d4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80129b4:	4b47      	ldr	r3, [pc, #284]	; (8012ad4 <tcp_slowtmr+0x590>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d006      	beq.n	80129cc <tcp_slowtmr+0x488>
 80129be:	4b46      	ldr	r3, [pc, #280]	; (8012ad8 <tcp_slowtmr+0x594>)
 80129c0:	f240 5271 	movw	r2, #1393	; 0x571
 80129c4:	4947      	ldr	r1, [pc, #284]	; (8012ae4 <tcp_slowtmr+0x5a0>)
 80129c6:	4846      	ldr	r0, [pc, #280]	; (8012ae0 <tcp_slowtmr+0x59c>)
 80129c8:	f008 fc2e 	bl	801b228 <iprintf>
        tcp_active_pcbs = pcb->next;
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	4a40      	ldr	r2, [pc, #256]	; (8012ad4 <tcp_slowtmr+0x590>)
 80129d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80129d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d013      	beq.n	8012a04 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80129e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80129e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80129e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e8:	3304      	adds	r3, #4
 80129ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129ec:	8ad2      	ldrh	r2, [r2, #22]
 80129ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129f0:	8b09      	ldrh	r1, [r1, #24]
 80129f2:	9102      	str	r1, [sp, #8]
 80129f4:	9201      	str	r2, [sp, #4]
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	462b      	mov	r3, r5
 80129fa:	4622      	mov	r2, r4
 80129fc:	4601      	mov	r1, r0
 80129fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a00:	f004 fe94 	bl	801772c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	691b      	ldr	r3, [r3, #16]
 8012a08:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0c:	7d1b      	ldrb	r3, [r3, #20]
 8012a0e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a12:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012a1a:	6838      	ldr	r0, [r7, #0]
 8012a1c:	f7ff f894 	bl	8011b48 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012a20:	4b31      	ldr	r3, [pc, #196]	; (8012ae8 <tcp_slowtmr+0x5a4>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d004      	beq.n	8012a36 <tcp_slowtmr+0x4f2>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f06f 010c 	mvn.w	r1, #12
 8012a32:	68b8      	ldr	r0, [r7, #8]
 8012a34:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012a36:	4b2c      	ldr	r3, [pc, #176]	; (8012ae8 <tcp_slowtmr+0x5a4>)
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d037      	beq.n	8012aae <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012a3e:	e592      	b.n	8012566 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4c:	7f1b      	ldrb	r3, [r3, #28]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a54:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a58:	7f1a      	ldrb	r2, [r3, #28]
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	7f5b      	ldrb	r3, [r3, #29]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d325      	bcc.n	8012aae <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	2200      	movs	r2, #0
 8012a66:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012a68:	4b1f      	ldr	r3, [pc, #124]	; (8012ae8 <tcp_slowtmr+0x5a4>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d00b      	beq.n	8012a90 <tcp_slowtmr+0x54c>
 8012a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a80:	6912      	ldr	r2, [r2, #16]
 8012a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a84:	4610      	mov	r0, r2
 8012a86:	4798      	blx	r3
 8012a88:	4603      	mov	r3, r0
 8012a8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012a8e:	e002      	b.n	8012a96 <tcp_slowtmr+0x552>
 8012a90:	2300      	movs	r3, #0
 8012a92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012a96:	4b14      	ldr	r3, [pc, #80]	; (8012ae8 <tcp_slowtmr+0x5a4>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d000      	beq.n	8012aa0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012a9e:	e562      	b.n	8012566 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012aa0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d102      	bne.n	8012aae <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aaa:	f004 f88b 	bl	8016bc4 <tcp_output>
  while (pcb != NULL) {
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f47f ad5e 	bne.w	8012572 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012aba:	4b0c      	ldr	r3, [pc, #48]	; (8012aec <tcp_slowtmr+0x5a8>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012ac0:	e069      	b.n	8012b96 <tcp_slowtmr+0x652>
 8012ac2:	bf00      	nop
 8012ac4:	2000704c 	.word	0x2000704c
 8012ac8:	000a4cb8 	.word	0x000a4cb8
 8012acc:	10624dd3 	.word	0x10624dd3
 8012ad0:	000124f8 	.word	0x000124f8
 8012ad4:	20007058 	.word	0x20007058
 8012ad8:	0801ed10 	.word	0x0801ed10
 8012adc:	0801f148 	.word	0x0801f148
 8012ae0:	0801ed54 	.word	0x0801ed54
 8012ae4:	0801f174 	.word	0x0801f174
 8012ae8:	20007060 	.word	0x20007060
 8012aec:	2000705c 	.word	0x2000705c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	2b0a      	cmp	r3, #10
 8012af6:	d006      	beq.n	8012b06 <tcp_slowtmr+0x5c2>
 8012af8:	4b2b      	ldr	r3, [pc, #172]	; (8012ba8 <tcp_slowtmr+0x664>)
 8012afa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012afe:	492b      	ldr	r1, [pc, #172]	; (8012bac <tcp_slowtmr+0x668>)
 8012b00:	482b      	ldr	r0, [pc, #172]	; (8012bb0 <tcp_slowtmr+0x66c>)
 8012b02:	f008 fb91 	bl	801b228 <iprintf>
    pcb_remove = 0;
 8012b06:	2300      	movs	r3, #0
 8012b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b0c:	4b29      	ldr	r3, [pc, #164]	; (8012bb4 <tcp_slowtmr+0x670>)
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b12:	6a1b      	ldr	r3, [r3, #32]
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	2bf0      	cmp	r3, #240	; 0xf0
 8012b18:	d904      	bls.n	8012b24 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b1e:	3301      	adds	r3, #1
 8012b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d02f      	beq.n	8012b8c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b2e:	f000 fbdd 	bl	80132ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d010      	beq.n	8012b5a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012b38:	4b1f      	ldr	r3, [pc, #124]	; (8012bb8 <tcp_slowtmr+0x674>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d106      	bne.n	8012b50 <tcp_slowtmr+0x60c>
 8012b42:	4b19      	ldr	r3, [pc, #100]	; (8012ba8 <tcp_slowtmr+0x664>)
 8012b44:	f240 52af 	movw	r2, #1455	; 0x5af
 8012b48:	491c      	ldr	r1, [pc, #112]	; (8012bbc <tcp_slowtmr+0x678>)
 8012b4a:	4819      	ldr	r0, [pc, #100]	; (8012bb0 <tcp_slowtmr+0x66c>)
 8012b4c:	f008 fb6c 	bl	801b228 <iprintf>
        prev->next = pcb->next;
 8012b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b52:	68da      	ldr	r2, [r3, #12]
 8012b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b56:	60da      	str	r2, [r3, #12]
 8012b58:	e00f      	b.n	8012b7a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012b5a:	4b17      	ldr	r3, [pc, #92]	; (8012bb8 <tcp_slowtmr+0x674>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d006      	beq.n	8012b72 <tcp_slowtmr+0x62e>
 8012b64:	4b10      	ldr	r3, [pc, #64]	; (8012ba8 <tcp_slowtmr+0x664>)
 8012b66:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012b6a:	4915      	ldr	r1, [pc, #84]	; (8012bc0 <tcp_slowtmr+0x67c>)
 8012b6c:	4810      	ldr	r0, [pc, #64]	; (8012bb0 <tcp_slowtmr+0x66c>)
 8012b6e:	f008 fb5b 	bl	801b228 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	4a10      	ldr	r2, [pc, #64]	; (8012bb8 <tcp_slowtmr+0x674>)
 8012b78:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012b84:	69f8      	ldr	r0, [r7, #28]
 8012b86:	f7fe ffdf 	bl	8011b48 <tcp_free>
 8012b8a:	e004      	b.n	8012b96 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d1a9      	bne.n	8012af0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012b9c:	bf00      	nop
 8012b9e:	bf00      	nop
 8012ba0:	3730      	adds	r7, #48	; 0x30
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	0801ed10 	.word	0x0801ed10
 8012bac:	0801f1a0 	.word	0x0801f1a0
 8012bb0:	0801ed54 	.word	0x0801ed54
 8012bb4:	2000704c 	.word	0x2000704c
 8012bb8:	2000705c 	.word	0x2000705c
 8012bbc:	0801f1d0 	.word	0x0801f1d0
 8012bc0:	0801f1f8 	.word	0x0801f1f8

08012bc4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012bca:	4b2d      	ldr	r3, [pc, #180]	; (8012c80 <tcp_fasttmr+0xbc>)
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	4b2b      	ldr	r3, [pc, #172]	; (8012c80 <tcp_fasttmr+0xbc>)
 8012bd4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012bd6:	4b2b      	ldr	r3, [pc, #172]	; (8012c84 <tcp_fasttmr+0xc0>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012bdc:	e048      	b.n	8012c70 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	7f9a      	ldrb	r2, [r3, #30]
 8012be2:	4b27      	ldr	r3, [pc, #156]	; (8012c80 <tcp_fasttmr+0xbc>)
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d03f      	beq.n	8012c6a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012bea:	4b25      	ldr	r3, [pc, #148]	; (8012c80 <tcp_fasttmr+0xbc>)
 8012bec:	781a      	ldrb	r2, [r3, #0]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	8b5b      	ldrh	r3, [r3, #26]
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d010      	beq.n	8012c20 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	8b5b      	ldrh	r3, [r3, #26]
 8012c02:	f043 0302 	orr.w	r3, r3, #2
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f003 ffd9 	bl	8016bc4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	8b5b      	ldrh	r3, [r3, #26]
 8012c16:	f023 0303 	bic.w	r3, r3, #3
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8b5b      	ldrh	r3, [r3, #26]
 8012c24:	f003 0308 	and.w	r3, r3, #8
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d009      	beq.n	8012c40 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	8b5b      	ldrh	r3, [r3, #26]
 8012c30:	f023 0308 	bic.w	r3, r3, #8
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f7ff f918 	bl	8011e70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00a      	beq.n	8012c64 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012c4e:	4b0e      	ldr	r3, [pc, #56]	; (8012c88 <tcp_fasttmr+0xc4>)
 8012c50:	2200      	movs	r2, #0
 8012c52:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f819 	bl	8012c8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012c5a:	4b0b      	ldr	r3, [pc, #44]	; (8012c88 <tcp_fasttmr+0xc4>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d000      	beq.n	8012c64 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012c62:	e7b8      	b.n	8012bd6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	607b      	str	r3, [r7, #4]
 8012c68:	e002      	b.n	8012c70 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1b3      	bne.n	8012bde <tcp_fasttmr+0x1a>
    }
  }
}
 8012c76:	bf00      	nop
 8012c78:	bf00      	nop
 8012c7a:	3708      	adds	r7, #8
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	20007062 	.word	0x20007062
 8012c84:	20007058 	.word	0x20007058
 8012c88:	20007060 	.word	0x20007060

08012c8c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c8c:	b590      	push	{r4, r7, lr}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d109      	bne.n	8012cae <tcp_process_refused_data+0x22>
 8012c9a:	4b38      	ldr	r3, [pc, #224]	; (8012d7c <tcp_process_refused_data+0xf0>)
 8012c9c:	f240 6209 	movw	r2, #1545	; 0x609
 8012ca0:	4937      	ldr	r1, [pc, #220]	; (8012d80 <tcp_process_refused_data+0xf4>)
 8012ca2:	4838      	ldr	r0, [pc, #224]	; (8012d84 <tcp_process_refused_data+0xf8>)
 8012ca4:	f008 fac0 	bl	801b228 <iprintf>
 8012ca8:	f06f 030f 	mvn.w	r3, #15
 8012cac:	e061      	b.n	8012d72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cb2:	7b5b      	ldrb	r3, [r3, #13]
 8012cb4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00b      	beq.n	8012ce4 <tcp_process_refused_data+0x58>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6918      	ldr	r0, [r3, #16]
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	6879      	ldr	r1, [r7, #4]
 8012cdc:	47a0      	blx	r4
 8012cde:	4603      	mov	r3, r0
 8012ce0:	73fb      	strb	r3, [r7, #15]
 8012ce2:	e007      	b.n	8012cf4 <tcp_process_refused_data+0x68>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	68ba      	ldr	r2, [r7, #8]
 8012ce8:	6879      	ldr	r1, [r7, #4]
 8012cea:	2000      	movs	r0, #0
 8012cec:	f000 f8a6 	bl	8012e3c <tcp_recv_null>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d12b      	bne.n	8012d54 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012cfc:	7bbb      	ldrb	r3, [r7, #14]
 8012cfe:	f003 0320 	and.w	r3, r3, #32
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d034      	beq.n	8012d70 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d0a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d005      	beq.n	8012d1e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d16:	3301      	adds	r3, #1
 8012d18:	b29a      	uxth	r2, r3
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00b      	beq.n	8012d40 <tcp_process_refused_data+0xb4>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6918      	ldr	r0, [r3, #16]
 8012d32:	2300      	movs	r3, #0
 8012d34:	2200      	movs	r2, #0
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	47a0      	blx	r4
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	73fb      	strb	r3, [r7, #15]
 8012d3e:	e001      	b.n	8012d44 <tcp_process_refused_data+0xb8>
 8012d40:	2300      	movs	r3, #0
 8012d42:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d48:	f113 0f0d 	cmn.w	r3, #13
 8012d4c:	d110      	bne.n	8012d70 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012d4e:	f06f 030c 	mvn.w	r3, #12
 8012d52:	e00e      	b.n	8012d72 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d58:	f113 0f0d 	cmn.w	r3, #13
 8012d5c:	d102      	bne.n	8012d64 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012d5e:	f06f 030c 	mvn.w	r3, #12
 8012d62:	e006      	b.n	8012d72 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012d6a:	f06f 0304 	mvn.w	r3, #4
 8012d6e:	e000      	b.n	8012d72 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3714      	adds	r7, #20
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd90      	pop	{r4, r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	0801ed10 	.word	0x0801ed10
 8012d80:	0801f220 	.word	0x0801f220
 8012d84:	0801ed54 	.word	0x0801ed54

08012d88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d90:	e007      	b.n	8012da2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 f80a 	bl	8012db2 <tcp_seg_free>
    seg = next;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d1f4      	bne.n	8012d92 <tcp_segs_free+0xa>
  }
}
 8012da8:	bf00      	nop
 8012daa:	bf00      	nop
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}

08012db2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012db2:	b580      	push	{r7, lr}
 8012db4:	b082      	sub	sp, #8
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00c      	beq.n	8012dda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d004      	beq.n	8012dd2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fe fb89 	bl	80114e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012dd2:	6879      	ldr	r1, [r7, #4]
 8012dd4:	2003      	movs	r0, #3
 8012dd6:	f7fd fd0f 	bl	80107f8 <memp_free>
  }
}
 8012dda:	bf00      	nop
 8012ddc:	3708      	adds	r7, #8
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
	...

08012de4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d106      	bne.n	8012e00 <tcp_seg_copy+0x1c>
 8012df2:	4b0f      	ldr	r3, [pc, #60]	; (8012e30 <tcp_seg_copy+0x4c>)
 8012df4:	f240 6282 	movw	r2, #1666	; 0x682
 8012df8:	490e      	ldr	r1, [pc, #56]	; (8012e34 <tcp_seg_copy+0x50>)
 8012dfa:	480f      	ldr	r0, [pc, #60]	; (8012e38 <tcp_seg_copy+0x54>)
 8012dfc:	f008 fa14 	bl	801b228 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e00:	2003      	movs	r0, #3
 8012e02:	f7fd fc89 	bl	8010718 <memp_malloc>
 8012e06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d101      	bne.n	8012e12 <tcp_seg_copy+0x2e>
    return NULL;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	e00a      	b.n	8012e28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012e12:	2210      	movs	r2, #16
 8012e14:	6879      	ldr	r1, [r7, #4]
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f008 fc0f 	bl	801b63a <memcpy>
  pbuf_ref(cseg->p);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7fe fbff 	bl	8011624 <pbuf_ref>
  return cseg;
 8012e26:	68fb      	ldr	r3, [r7, #12]
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	0801ed10 	.word	0x0801ed10
 8012e34:	0801f264 	.word	0x0801f264
 8012e38:	0801ed54 	.word	0x0801ed54

08012e3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b084      	sub	sp, #16
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d109      	bne.n	8012e64 <tcp_recv_null+0x28>
 8012e50:	4b12      	ldr	r3, [pc, #72]	; (8012e9c <tcp_recv_null+0x60>)
 8012e52:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e56:	4912      	ldr	r1, [pc, #72]	; (8012ea0 <tcp_recv_null+0x64>)
 8012e58:	4812      	ldr	r0, [pc, #72]	; (8012ea4 <tcp_recv_null+0x68>)
 8012e5a:	f008 f9e5 	bl	801b228 <iprintf>
 8012e5e:	f06f 030f 	mvn.w	r3, #15
 8012e62:	e016      	b.n	8012e92 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d009      	beq.n	8012e7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	891b      	ldrh	r3, [r3, #8]
 8012e6e:	4619      	mov	r1, r3
 8012e70:	68b8      	ldr	r0, [r7, #8]
 8012e72:	f7ff f9b7 	bl	80121e4 <tcp_recved>
    pbuf_free(p);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7fe fb34 	bl	80114e4 <pbuf_free>
 8012e7c:	e008      	b.n	8012e90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d104      	bne.n	8012e90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012e86:	68b8      	ldr	r0, [r7, #8]
 8012e88:	f7ff f85c 	bl	8011f44 <tcp_close>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	e000      	b.n	8012e92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3710      	adds	r7, #16
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	0801ed10 	.word	0x0801ed10
 8012ea0:	0801f280 	.word	0x0801f280
 8012ea4:	0801ed54 	.word	0x0801ed54

08012ea8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	4603      	mov	r3, r0
 8012eb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	db01      	blt.n	8012ebe <tcp_kill_prio+0x16>
 8012eba:	79fb      	ldrb	r3, [r7, #7]
 8012ebc:	e000      	b.n	8012ec0 <tcp_kill_prio+0x18>
 8012ebe:	237f      	movs	r3, #127	; 0x7f
 8012ec0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012ec2:	7afb      	ldrb	r3, [r7, #11]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d034      	beq.n	8012f32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012ec8:	7afb      	ldrb	r3, [r7, #11]
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ed6:	4b19      	ldr	r3, [pc, #100]	; (8012f3c <tcp_kill_prio+0x94>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	617b      	str	r3, [r7, #20]
 8012edc:	e01f      	b.n	8012f1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	7d5b      	ldrb	r3, [r3, #21]
 8012ee2:	7afa      	ldrb	r2, [r7, #11]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d80c      	bhi.n	8012f02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012eec:	7afa      	ldrb	r2, [r7, #11]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d112      	bne.n	8012f18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012ef2:	4b13      	ldr	r3, [pc, #76]	; (8012f40 <tcp_kill_prio+0x98>)
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	6a1b      	ldr	r3, [r3, #32]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d80a      	bhi.n	8012f18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f02:	4b0f      	ldr	r3, [pc, #60]	; (8012f40 <tcp_kill_prio+0x98>)
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	6a1b      	ldr	r3, [r3, #32]
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	7d5b      	ldrb	r3, [r3, #21]
 8012f16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1dc      	bne.n	8012ede <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d004      	beq.n	8012f34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f2a:	6938      	ldr	r0, [r7, #16]
 8012f2c:	f7ff f8f4 	bl	8012118 <tcp_abort>
 8012f30:	e000      	b.n	8012f34 <tcp_kill_prio+0x8c>
    return;
 8012f32:	bf00      	nop
  }
}
 8012f34:	3718      	adds	r7, #24
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	20007058 	.word	0x20007058
 8012f40:	2000704c 	.word	0x2000704c

08012f44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012f4e:	79fb      	ldrb	r3, [r7, #7]
 8012f50:	2b08      	cmp	r3, #8
 8012f52:	d009      	beq.n	8012f68 <tcp_kill_state+0x24>
 8012f54:	79fb      	ldrb	r3, [r7, #7]
 8012f56:	2b09      	cmp	r3, #9
 8012f58:	d006      	beq.n	8012f68 <tcp_kill_state+0x24>
 8012f5a:	4b1a      	ldr	r3, [pc, #104]	; (8012fc4 <tcp_kill_state+0x80>)
 8012f5c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012f60:	4919      	ldr	r1, [pc, #100]	; (8012fc8 <tcp_kill_state+0x84>)
 8012f62:	481a      	ldr	r0, [pc, #104]	; (8012fcc <tcp_kill_state+0x88>)
 8012f64:	f008 f960 	bl	801b228 <iprintf>

  inactivity = 0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f70:	4b17      	ldr	r3, [pc, #92]	; (8012fd0 <tcp_kill_state+0x8c>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	617b      	str	r3, [r7, #20]
 8012f76:	e017      	b.n	8012fa8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	7d1b      	ldrb	r3, [r3, #20]
 8012f7c:	79fa      	ldrb	r2, [r7, #7]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d10f      	bne.n	8012fa2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f82:	4b14      	ldr	r3, [pc, #80]	; (8012fd4 <tcp_kill_state+0x90>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	6a1b      	ldr	r3, [r3, #32]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d807      	bhi.n	8012fa2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012f92:	4b10      	ldr	r3, [pc, #64]	; (8012fd4 <tcp_kill_state+0x90>)
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	617b      	str	r3, [r7, #20]
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1e4      	bne.n	8012f78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	6938      	ldr	r0, [r7, #16]
 8012fb8:	f7fe fff0 	bl	8011f9c <tcp_abandon>
  }
}
 8012fbc:	bf00      	nop
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	0801ed10 	.word	0x0801ed10
 8012fc8:	0801f29c 	.word	0x0801f29c
 8012fcc:	0801ed54 	.word	0x0801ed54
 8012fd0:	20007058 	.word	0x20007058
 8012fd4:	2000704c 	.word	0x2000704c

08012fd8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fe6:	4b12      	ldr	r3, [pc, #72]	; (8013030 <tcp_kill_timewait+0x58>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	60fb      	str	r3, [r7, #12]
 8012fec:	e012      	b.n	8013014 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012fee:	4b11      	ldr	r3, [pc, #68]	; (8013034 <tcp_kill_timewait+0x5c>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	6a1b      	ldr	r3, [r3, #32]
 8012ff6:	1ad3      	subs	r3, r2, r3
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d807      	bhi.n	801300e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012ffe:	4b0d      	ldr	r3, [pc, #52]	; (8013034 <tcp_kill_timewait+0x5c>)
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	6a1b      	ldr	r3, [r3, #32]
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d1e9      	bne.n	8012fee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d002      	beq.n	8013026 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013020:	68b8      	ldr	r0, [r7, #8]
 8013022:	f7ff f879 	bl	8012118 <tcp_abort>
  }
}
 8013026:	bf00      	nop
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	2000705c 	.word	0x2000705c
 8013034:	2000704c 	.word	0x2000704c

08013038 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801303e:	4b10      	ldr	r3, [pc, #64]	; (8013080 <tcp_handle_closepend+0x48>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013044:	e014      	b.n	8013070 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	8b5b      	ldrh	r3, [r3, #26]
 8013050:	f003 0308 	and.w	r3, r3, #8
 8013054:	2b00      	cmp	r3, #0
 8013056:	d009      	beq.n	801306c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	8b5b      	ldrh	r3, [r3, #26]
 801305c:	f023 0308 	bic.w	r3, r3, #8
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7fe ff02 	bl	8011e70 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1e7      	bne.n	8013046 <tcp_handle_closepend+0xe>
  }
}
 8013076:	bf00      	nop
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	20007058 	.word	0x20007058

08013084 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801308e:	2001      	movs	r0, #1
 8013090:	f7fd fb42 	bl	8010718 <memp_malloc>
 8013094:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d126      	bne.n	80130ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801309c:	f7ff ffcc 	bl	8013038 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80130a0:	f7ff ff9a 	bl	8012fd8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130a4:	2001      	movs	r0, #1
 80130a6:	f7fd fb37 	bl	8010718 <memp_malloc>
 80130aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d11b      	bne.n	80130ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80130b2:	2009      	movs	r0, #9
 80130b4:	f7ff ff46 	bl	8012f44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130b8:	2001      	movs	r0, #1
 80130ba:	f7fd fb2d 	bl	8010718 <memp_malloc>
 80130be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d111      	bne.n	80130ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80130c6:	2008      	movs	r0, #8
 80130c8:	f7ff ff3c 	bl	8012f44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130cc:	2001      	movs	r0, #1
 80130ce:	f7fd fb23 	bl	8010718 <memp_malloc>
 80130d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d107      	bne.n	80130ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80130da:	79fb      	ldrb	r3, [r7, #7]
 80130dc:	4618      	mov	r0, r3
 80130de:	f7ff fee3 	bl	8012ea8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130e2:	2001      	movs	r0, #1
 80130e4:	f7fd fb18 	bl	8010718 <memp_malloc>
 80130e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d03f      	beq.n	8013170 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80130f0:	229c      	movs	r2, #156	; 0x9c
 80130f2:	2100      	movs	r1, #0
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f008 fa27 	bl	801b548 <memset>
    pcb->prio = prio;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	79fa      	ldrb	r2, [r7, #7]
 80130fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013106:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	22ff      	movs	r2, #255	; 0xff
 801311e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013126:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2206      	movs	r2, #6
 801312c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2206      	movs	r2, #6
 8013134:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801313c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2201      	movs	r2, #1
 8013142:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013146:	4b0d      	ldr	r3, [pc, #52]	; (801317c <tcp_alloc+0xf8>)
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801314e:	4b0c      	ldr	r3, [pc, #48]	; (8013180 <tcp_alloc+0xfc>)
 8013150:	781a      	ldrb	r2, [r3, #0]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801315c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	4a08      	ldr	r2, [pc, #32]	; (8013184 <tcp_alloc+0x100>)
 8013164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	4a07      	ldr	r2, [pc, #28]	; (8013188 <tcp_alloc+0x104>)
 801316c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013170:	68fb      	ldr	r3, [r7, #12]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	2000704c 	.word	0x2000704c
 8013180:	20007062 	.word	0x20007062
 8013184:	08012e3d 	.word	0x08012e3d
 8013188:	006ddd00 	.word	0x006ddd00

0801318c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013190:	2040      	movs	r0, #64	; 0x40
 8013192:	f7ff ff77 	bl	8013084 <tcp_alloc>
 8013196:	4603      	mov	r3, r0
}
 8013198:	4618      	mov	r0, r3
 801319a:	bd80      	pop	{r7, pc}

0801319c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d002      	beq.n	80131b2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	683a      	ldr	r2, [r7, #0]
 80131b0:	611a      	str	r2, [r3, #16]
  }
}
 80131b2:	bf00      	nop
 80131b4:	370c      	adds	r7, #12
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
	...

080131c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00e      	beq.n	80131ee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	7d1b      	ldrb	r3, [r3, #20]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d106      	bne.n	80131e6 <tcp_recv+0x26>
 80131d8:	4b07      	ldr	r3, [pc, #28]	; (80131f8 <tcp_recv+0x38>)
 80131da:	f240 72df 	movw	r2, #2015	; 0x7df
 80131de:	4907      	ldr	r1, [pc, #28]	; (80131fc <tcp_recv+0x3c>)
 80131e0:	4807      	ldr	r0, [pc, #28]	; (8013200 <tcp_recv+0x40>)
 80131e2:	f008 f821 	bl	801b228 <iprintf>
    pcb->recv = recv;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	683a      	ldr	r2, [r7, #0]
 80131ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	0801ed10 	.word	0x0801ed10
 80131fc:	0801f2ac 	.word	0x0801f2ac
 8013200:	0801ed54 	.word	0x0801ed54

08013204 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00e      	beq.n	8013232 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	7d1b      	ldrb	r3, [r3, #20]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d106      	bne.n	801322a <tcp_sent+0x26>
 801321c:	4b07      	ldr	r3, [pc, #28]	; (801323c <tcp_sent+0x38>)
 801321e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013222:	4907      	ldr	r1, [pc, #28]	; (8013240 <tcp_sent+0x3c>)
 8013224:	4807      	ldr	r0, [pc, #28]	; (8013244 <tcp_sent+0x40>)
 8013226:	f007 ffff 	bl	801b228 <iprintf>
    pcb->sent = sent;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	683a      	ldr	r2, [r7, #0]
 801322e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	0801ed10 	.word	0x0801ed10
 8013240:	0801f2d4 	.word	0x0801f2d4
 8013244:	0801ed54 	.word	0x0801ed54

08013248 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00e      	beq.n	8013276 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	7d1b      	ldrb	r3, [r3, #20]
 801325c:	2b01      	cmp	r3, #1
 801325e:	d106      	bne.n	801326e <tcp_err+0x26>
 8013260:	4b07      	ldr	r3, [pc, #28]	; (8013280 <tcp_err+0x38>)
 8013262:	f640 020d 	movw	r2, #2061	; 0x80d
 8013266:	4907      	ldr	r1, [pc, #28]	; (8013284 <tcp_err+0x3c>)
 8013268:	4807      	ldr	r0, [pc, #28]	; (8013288 <tcp_err+0x40>)
 801326a:	f007 ffdd 	bl	801b228 <iprintf>
    pcb->errf = err;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	683a      	ldr	r2, [r7, #0]
 8013272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013276:	bf00      	nop
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	0801ed10 	.word	0x0801ed10
 8013284:	0801f2fc 	.word	0x0801f2fc
 8013288:	0801ed54 	.word	0x0801ed54

0801328c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	60b9      	str	r1, [r7, #8]
 8013296:	4613      	mov	r3, r2
 8013298:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d107      	bne.n	80132b0 <tcp_poll+0x24>
 80132a0:	4b0e      	ldr	r3, [pc, #56]	; (80132dc <tcp_poll+0x50>)
 80132a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80132a6:	490e      	ldr	r1, [pc, #56]	; (80132e0 <tcp_poll+0x54>)
 80132a8:	480e      	ldr	r0, [pc, #56]	; (80132e4 <tcp_poll+0x58>)
 80132aa:	f007 ffbd 	bl	801b228 <iprintf>
 80132ae:	e011      	b.n	80132d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	7d1b      	ldrb	r3, [r3, #20]
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d106      	bne.n	80132c6 <tcp_poll+0x3a>
 80132b8:	4b08      	ldr	r3, [pc, #32]	; (80132dc <tcp_poll+0x50>)
 80132ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80132be:	490a      	ldr	r1, [pc, #40]	; (80132e8 <tcp_poll+0x5c>)
 80132c0:	4808      	ldr	r0, [pc, #32]	; (80132e4 <tcp_poll+0x58>)
 80132c2:	f007 ffb1 	bl	801b228 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	68ba      	ldr	r2, [r7, #8]
 80132ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	79fa      	ldrb	r2, [r7, #7]
 80132d2:	775a      	strb	r2, [r3, #29]
}
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	0801ed10 	.word	0x0801ed10
 80132e0:	0801f324 	.word	0x0801f324
 80132e4:	0801ed54 	.word	0x0801ed54
 80132e8:	0801f33c 	.word	0x0801f33c

080132ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d107      	bne.n	801330a <tcp_pcb_purge+0x1e>
 80132fa:	4b21      	ldr	r3, [pc, #132]	; (8013380 <tcp_pcb_purge+0x94>)
 80132fc:	f640 0251 	movw	r2, #2129	; 0x851
 8013300:	4920      	ldr	r1, [pc, #128]	; (8013384 <tcp_pcb_purge+0x98>)
 8013302:	4821      	ldr	r0, [pc, #132]	; (8013388 <tcp_pcb_purge+0x9c>)
 8013304:	f007 ff90 	bl	801b228 <iprintf>
 8013308:	e037      	b.n	801337a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d033      	beq.n	801337a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013316:	2b0a      	cmp	r3, #10
 8013318:	d02f      	beq.n	801337a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801331e:	2b01      	cmp	r3, #1
 8013320:	d02b      	beq.n	801337a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013326:	2b00      	cmp	r3, #0
 8013328:	d007      	beq.n	801333a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe f8d8 	bl	80114e4 <pbuf_free>
      pcb->refused_data = NULL;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801333e:	2b00      	cmp	r3, #0
 8013340:	d002      	beq.n	8013348 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f000 f986 	bl	8013654 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff fd17 	bl	8012d88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801335e:	4618      	mov	r0, r3
 8013360:	f7ff fd12 	bl	8012d88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2200      	movs	r2, #0
 8013368:	66da      	str	r2, [r3, #108]	; 0x6c
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2200      	movs	r2, #0
 8013376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	0801ed10 	.word	0x0801ed10
 8013384:	0801f35c 	.word	0x0801f35c
 8013388:	0801ed54 	.word	0x0801ed54

0801338c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d106      	bne.n	80133aa <tcp_pcb_remove+0x1e>
 801339c:	4b3e      	ldr	r3, [pc, #248]	; (8013498 <tcp_pcb_remove+0x10c>)
 801339e:	f640 0283 	movw	r2, #2179	; 0x883
 80133a2:	493e      	ldr	r1, [pc, #248]	; (801349c <tcp_pcb_remove+0x110>)
 80133a4:	483e      	ldr	r0, [pc, #248]	; (80134a0 <tcp_pcb_remove+0x114>)
 80133a6:	f007 ff3f 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d106      	bne.n	80133be <tcp_pcb_remove+0x32>
 80133b0:	4b39      	ldr	r3, [pc, #228]	; (8013498 <tcp_pcb_remove+0x10c>)
 80133b2:	f640 0284 	movw	r2, #2180	; 0x884
 80133b6:	493b      	ldr	r1, [pc, #236]	; (80134a4 <tcp_pcb_remove+0x118>)
 80133b8:	4839      	ldr	r0, [pc, #228]	; (80134a0 <tcp_pcb_remove+0x114>)
 80133ba:	f007 ff35 	bl	801b228 <iprintf>

  TCP_RMV(pcblist, pcb);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d105      	bne.n	80133d4 <tcp_pcb_remove+0x48>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	68da      	ldr	r2, [r3, #12]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	601a      	str	r2, [r3, #0]
 80133d2:	e013      	b.n	80133fc <tcp_pcb_remove+0x70>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	60fb      	str	r3, [r7, #12]
 80133da:	e00c      	b.n	80133f6 <tcp_pcb_remove+0x6a>
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d104      	bne.n	80133f0 <tcp_pcb_remove+0x64>
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	68da      	ldr	r2, [r3, #12]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	60da      	str	r2, [r3, #12]
 80133ee:	e005      	b.n	80133fc <tcp_pcb_remove+0x70>
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	60fb      	str	r3, [r7, #12]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1ef      	bne.n	80133dc <tcp_pcb_remove+0x50>
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2200      	movs	r2, #0
 8013400:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013402:	6838      	ldr	r0, [r7, #0]
 8013404:	f7ff ff72 	bl	80132ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	7d1b      	ldrb	r3, [r3, #20]
 801340c:	2b0a      	cmp	r3, #10
 801340e:	d013      	beq.n	8013438 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013414:	2b01      	cmp	r3, #1
 8013416:	d00f      	beq.n	8013438 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	8b5b      	ldrh	r3, [r3, #26]
 801341c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013420:	2b00      	cmp	r3, #0
 8013422:	d009      	beq.n	8013438 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	8b5b      	ldrh	r3, [r3, #26]
 8013428:	f043 0302 	orr.w	r3, r3, #2
 801342c:	b29a      	uxth	r2, r3
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013432:	6838      	ldr	r0, [r7, #0]
 8013434:	f003 fbc6 	bl	8016bc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	7d1b      	ldrb	r3, [r3, #20]
 801343c:	2b01      	cmp	r3, #1
 801343e:	d020      	beq.n	8013482 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013444:	2b00      	cmp	r3, #0
 8013446:	d006      	beq.n	8013456 <tcp_pcb_remove+0xca>
 8013448:	4b13      	ldr	r3, [pc, #76]	; (8013498 <tcp_pcb_remove+0x10c>)
 801344a:	f640 0293 	movw	r2, #2195	; 0x893
 801344e:	4916      	ldr	r1, [pc, #88]	; (80134a8 <tcp_pcb_remove+0x11c>)
 8013450:	4813      	ldr	r0, [pc, #76]	; (80134a0 <tcp_pcb_remove+0x114>)
 8013452:	f007 fee9 	bl	801b228 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <tcp_pcb_remove+0xe0>
 801345e:	4b0e      	ldr	r3, [pc, #56]	; (8013498 <tcp_pcb_remove+0x10c>)
 8013460:	f640 0294 	movw	r2, #2196	; 0x894
 8013464:	4911      	ldr	r1, [pc, #68]	; (80134ac <tcp_pcb_remove+0x120>)
 8013466:	480e      	ldr	r0, [pc, #56]	; (80134a0 <tcp_pcb_remove+0x114>)
 8013468:	f007 fede 	bl	801b228 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013470:	2b00      	cmp	r3, #0
 8013472:	d006      	beq.n	8013482 <tcp_pcb_remove+0xf6>
 8013474:	4b08      	ldr	r3, [pc, #32]	; (8013498 <tcp_pcb_remove+0x10c>)
 8013476:	f640 0296 	movw	r2, #2198	; 0x896
 801347a:	490d      	ldr	r1, [pc, #52]	; (80134b0 <tcp_pcb_remove+0x124>)
 801347c:	4808      	ldr	r0, [pc, #32]	; (80134a0 <tcp_pcb_remove+0x114>)
 801347e:	f007 fed3 	bl	801b228 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	2200      	movs	r2, #0
 8013486:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	2200      	movs	r2, #0
 801348c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801348e:	bf00      	nop
 8013490:	3710      	adds	r7, #16
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	0801ed10 	.word	0x0801ed10
 801349c:	0801f378 	.word	0x0801f378
 80134a0:	0801ed54 	.word	0x0801ed54
 80134a4:	0801f394 	.word	0x0801f394
 80134a8:	0801f3b4 	.word	0x0801f3b4
 80134ac:	0801f3cc 	.word	0x0801f3cc
 80134b0:	0801f3e8 	.word	0x0801f3e8

080134b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d106      	bne.n	80134d0 <tcp_next_iss+0x1c>
 80134c2:	4b0a      	ldr	r3, [pc, #40]	; (80134ec <tcp_next_iss+0x38>)
 80134c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80134c8:	4909      	ldr	r1, [pc, #36]	; (80134f0 <tcp_next_iss+0x3c>)
 80134ca:	480a      	ldr	r0, [pc, #40]	; (80134f4 <tcp_next_iss+0x40>)
 80134cc:	f007 feac 	bl	801b228 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80134d0:	4b09      	ldr	r3, [pc, #36]	; (80134f8 <tcp_next_iss+0x44>)
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	4b09      	ldr	r3, [pc, #36]	; (80134fc <tcp_next_iss+0x48>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4413      	add	r3, r2
 80134da:	4a07      	ldr	r2, [pc, #28]	; (80134f8 <tcp_next_iss+0x44>)
 80134dc:	6013      	str	r3, [r2, #0]
  return iss;
 80134de:	4b06      	ldr	r3, [pc, #24]	; (80134f8 <tcp_next_iss+0x44>)
 80134e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	0801ed10 	.word	0x0801ed10
 80134f0:	0801f400 	.word	0x0801f400
 80134f4:	0801ed54 	.word	0x0801ed54
 80134f8:	20000058 	.word	0x20000058
 80134fc:	2000704c 	.word	0x2000704c

08013500 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
 8013506:	4603      	mov	r3, r0
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
 801350c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d106      	bne.n	8013522 <tcp_eff_send_mss_netif+0x22>
 8013514:	4b14      	ldr	r3, [pc, #80]	; (8013568 <tcp_eff_send_mss_netif+0x68>)
 8013516:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801351a:	4914      	ldr	r1, [pc, #80]	; (801356c <tcp_eff_send_mss_netif+0x6c>)
 801351c:	4814      	ldr	r0, [pc, #80]	; (8013570 <tcp_eff_send_mss_netif+0x70>)
 801351e:	f007 fe83 	bl	801b228 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d101      	bne.n	801352c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013528:	89fb      	ldrh	r3, [r7, #14]
 801352a:	e019      	b.n	8013560 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013530:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013532:	8afb      	ldrh	r3, [r7, #22]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d012      	beq.n	801355e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013538:	2328      	movs	r3, #40	; 0x28
 801353a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801353c:	8afa      	ldrh	r2, [r7, #22]
 801353e:	8abb      	ldrh	r3, [r7, #20]
 8013540:	429a      	cmp	r2, r3
 8013542:	d904      	bls.n	801354e <tcp_eff_send_mss_netif+0x4e>
 8013544:	8afa      	ldrh	r2, [r7, #22]
 8013546:	8abb      	ldrh	r3, [r7, #20]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	b29b      	uxth	r3, r3
 801354c:	e000      	b.n	8013550 <tcp_eff_send_mss_netif+0x50>
 801354e:	2300      	movs	r3, #0
 8013550:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013552:	8a7a      	ldrh	r2, [r7, #18]
 8013554:	89fb      	ldrh	r3, [r7, #14]
 8013556:	4293      	cmp	r3, r2
 8013558:	bf28      	it	cs
 801355a:	4613      	movcs	r3, r2
 801355c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801355e:	89fb      	ldrh	r3, [r7, #14]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3718      	adds	r7, #24
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	0801ed10 	.word	0x0801ed10
 801356c:	0801f41c 	.word	0x0801f41c
 8013570:	0801ed54 	.word	0x0801ed54

08013574 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d119      	bne.n	80135bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013588:	4b10      	ldr	r3, [pc, #64]	; (80135cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801358a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801358e:	4910      	ldr	r1, [pc, #64]	; (80135d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013590:	4810      	ldr	r0, [pc, #64]	; (80135d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013592:	f007 fe49 	bl	801b228 <iprintf>

  while (pcb != NULL) {
 8013596:	e011      	b.n	80135bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d108      	bne.n	80135b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f7fe fdb4 	bl	8012118 <tcp_abort>
      pcb = next;
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	60fb      	str	r3, [r7, #12]
 80135b4:	e002      	b.n	80135bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1ea      	bne.n	8013598 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80135c2:	bf00      	nop
 80135c4:	bf00      	nop
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	0801ed10 	.word	0x0801ed10
 80135d0:	0801f444 	.word	0x0801f444
 80135d4:	0801ed54 	.word	0x0801ed54

080135d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d02a      	beq.n	801363e <tcp_netif_ip_addr_changed+0x66>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d026      	beq.n	801363e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80135f0:	4b15      	ldr	r3, [pc, #84]	; (8013648 <tcp_netif_ip_addr_changed+0x70>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4619      	mov	r1, r3
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7ff ffbc 	bl	8013574 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80135fc:	4b13      	ldr	r3, [pc, #76]	; (801364c <tcp_netif_ip_addr_changed+0x74>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4619      	mov	r1, r3
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f7ff ffb6 	bl	8013574 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d017      	beq.n	801363e <tcp_netif_ip_addr_changed+0x66>
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d013      	beq.n	801363e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013616:	4b0e      	ldr	r3, [pc, #56]	; (8013650 <tcp_netif_ip_addr_changed+0x78>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	60fb      	str	r3, [r7, #12]
 801361c:	e00c      	b.n	8013638 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	429a      	cmp	r2, r3
 8013628:	d103      	bne.n	8013632 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	60fb      	str	r3, [r7, #12]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d1ef      	bne.n	801361e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801363e:	bf00      	nop
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	20007058 	.word	0x20007058
 801364c:	20007050 	.word	0x20007050
 8013650:	20007054 	.word	0x20007054

08013654 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013660:	2b00      	cmp	r3, #0
 8013662:	d007      	beq.n	8013674 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013668:	4618      	mov	r0, r3
 801366a:	f7ff fb8d 	bl	8012d88 <tcp_segs_free>
    pcb->ooseq = NULL;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2200      	movs	r2, #0
 8013672:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013674:	bf00      	nop
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b08d      	sub	sp, #52	; 0x34
 8013680:	af04      	add	r7, sp, #16
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d105      	bne.n	8013698 <tcp_input+0x1c>
 801368c:	4b9b      	ldr	r3, [pc, #620]	; (80138fc <tcp_input+0x280>)
 801368e:	2283      	movs	r2, #131	; 0x83
 8013690:	499b      	ldr	r1, [pc, #620]	; (8013900 <tcp_input+0x284>)
 8013692:	489c      	ldr	r0, [pc, #624]	; (8013904 <tcp_input+0x288>)
 8013694:	f007 fdc8 	bl	801b228 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	4a9a      	ldr	r2, [pc, #616]	; (8013908 <tcp_input+0x28c>)
 801369e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	895b      	ldrh	r3, [r3, #10]
 80136a4:	2b13      	cmp	r3, #19
 80136a6:	f240 83d1 	bls.w	8013e4c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136aa:	4b98      	ldr	r3, [pc, #608]	; (801390c <tcp_input+0x290>)
 80136ac:	695b      	ldr	r3, [r3, #20]
 80136ae:	4a97      	ldr	r2, [pc, #604]	; (801390c <tcp_input+0x290>)
 80136b0:	6812      	ldr	r2, [r2, #0]
 80136b2:	4611      	mov	r1, r2
 80136b4:	4618      	mov	r0, r3
 80136b6:	f006 f895 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f040 83c7 	bne.w	8013e50 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80136c2:	4b92      	ldr	r3, [pc, #584]	; (801390c <tcp_input+0x290>)
 80136c4:	695b      	ldr	r3, [r3, #20]
 80136c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136ca:	2be0      	cmp	r3, #224	; 0xe0
 80136cc:	f000 83c0 	beq.w	8013e50 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80136d0:	4b8d      	ldr	r3, [pc, #564]	; (8013908 <tcp_input+0x28c>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	899b      	ldrh	r3, [r3, #12]
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fc faff 	bl	800fcdc <lwip_htons>
 80136de:	4603      	mov	r3, r0
 80136e0:	0b1b      	lsrs	r3, r3, #12
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80136ea:	7cbb      	ldrb	r3, [r7, #18]
 80136ec:	2b13      	cmp	r3, #19
 80136ee:	f240 83b1 	bls.w	8013e54 <tcp_input+0x7d8>
 80136f2:	7cbb      	ldrb	r3, [r7, #18]
 80136f4:	b29a      	uxth	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	891b      	ldrh	r3, [r3, #8]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	f200 83aa 	bhi.w	8013e54 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013700:	7cbb      	ldrb	r3, [r7, #18]
 8013702:	b29b      	uxth	r3, r3
 8013704:	3b14      	subs	r3, #20
 8013706:	b29a      	uxth	r2, r3
 8013708:	4b81      	ldr	r3, [pc, #516]	; (8013910 <tcp_input+0x294>)
 801370a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801370c:	4b81      	ldr	r3, [pc, #516]	; (8013914 <tcp_input+0x298>)
 801370e:	2200      	movs	r2, #0
 8013710:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	895a      	ldrh	r2, [r3, #10]
 8013716:	7cbb      	ldrb	r3, [r7, #18]
 8013718:	b29b      	uxth	r3, r3
 801371a:	429a      	cmp	r2, r3
 801371c:	d309      	bcc.n	8013732 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801371e:	4b7c      	ldr	r3, [pc, #496]	; (8013910 <tcp_input+0x294>)
 8013720:	881a      	ldrh	r2, [r3, #0]
 8013722:	4b7d      	ldr	r3, [pc, #500]	; (8013918 <tcp_input+0x29c>)
 8013724:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013726:	7cbb      	ldrb	r3, [r7, #18]
 8013728:	4619      	mov	r1, r3
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7fd fe54 	bl	80113d8 <pbuf_remove_header>
 8013730:	e04e      	b.n	80137d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d105      	bne.n	8013746 <tcp_input+0xca>
 801373a:	4b70      	ldr	r3, [pc, #448]	; (80138fc <tcp_input+0x280>)
 801373c:	22c2      	movs	r2, #194	; 0xc2
 801373e:	4977      	ldr	r1, [pc, #476]	; (801391c <tcp_input+0x2a0>)
 8013740:	4870      	ldr	r0, [pc, #448]	; (8013904 <tcp_input+0x288>)
 8013742:	f007 fd71 	bl	801b228 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013746:	2114      	movs	r1, #20
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f7fd fe45 	bl	80113d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	895a      	ldrh	r2, [r3, #10]
 8013752:	4b71      	ldr	r3, [pc, #452]	; (8013918 <tcp_input+0x29c>)
 8013754:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013756:	4b6e      	ldr	r3, [pc, #440]	; (8013910 <tcp_input+0x294>)
 8013758:	881a      	ldrh	r2, [r3, #0]
 801375a:	4b6f      	ldr	r3, [pc, #444]	; (8013918 <tcp_input+0x29c>)
 801375c:	881b      	ldrh	r3, [r3, #0]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013762:	4b6d      	ldr	r3, [pc, #436]	; (8013918 <tcp_input+0x29c>)
 8013764:	881b      	ldrh	r3, [r3, #0]
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f7fd fe35 	bl	80113d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	895b      	ldrh	r3, [r3, #10]
 8013774:	8a3a      	ldrh	r2, [r7, #16]
 8013776:	429a      	cmp	r2, r3
 8013778:	f200 836e 	bhi.w	8013e58 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	4a64      	ldr	r2, [pc, #400]	; (8013914 <tcp_input+0x298>)
 8013784:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	8a3a      	ldrh	r2, [r7, #16]
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7fd fe22 	bl	80113d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	891a      	ldrh	r2, [r3, #8]
 8013798:	8a3b      	ldrh	r3, [r7, #16]
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	b29a      	uxth	r2, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	895b      	ldrh	r3, [r3, #10]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d005      	beq.n	80137b6 <tcp_input+0x13a>
 80137aa:	4b54      	ldr	r3, [pc, #336]	; (80138fc <tcp_input+0x280>)
 80137ac:	22df      	movs	r2, #223	; 0xdf
 80137ae:	495c      	ldr	r1, [pc, #368]	; (8013920 <tcp_input+0x2a4>)
 80137b0:	4854      	ldr	r0, [pc, #336]	; (8013904 <tcp_input+0x288>)
 80137b2:	f007 fd39 	bl	801b228 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	891a      	ldrh	r2, [r3, #8]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	891b      	ldrh	r3, [r3, #8]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d005      	beq.n	80137d0 <tcp_input+0x154>
 80137c4:	4b4d      	ldr	r3, [pc, #308]	; (80138fc <tcp_input+0x280>)
 80137c6:	22e0      	movs	r2, #224	; 0xe0
 80137c8:	4956      	ldr	r1, [pc, #344]	; (8013924 <tcp_input+0x2a8>)
 80137ca:	484e      	ldr	r0, [pc, #312]	; (8013904 <tcp_input+0x288>)
 80137cc:	f007 fd2c 	bl	801b228 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80137d0:	4b4d      	ldr	r3, [pc, #308]	; (8013908 <tcp_input+0x28c>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	4a4b      	ldr	r2, [pc, #300]	; (8013908 <tcp_input+0x28c>)
 80137da:	6814      	ldr	r4, [r2, #0]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fc fa7d 	bl	800fcdc <lwip_htons>
 80137e2:	4603      	mov	r3, r0
 80137e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80137e6:	4b48      	ldr	r3, [pc, #288]	; (8013908 <tcp_input+0x28c>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	885b      	ldrh	r3, [r3, #2]
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	4a46      	ldr	r2, [pc, #280]	; (8013908 <tcp_input+0x28c>)
 80137f0:	6814      	ldr	r4, [r2, #0]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fc fa72 	bl	800fcdc <lwip_htons>
 80137f8:	4603      	mov	r3, r0
 80137fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80137fc:	4b42      	ldr	r3, [pc, #264]	; (8013908 <tcp_input+0x28c>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	4a41      	ldr	r2, [pc, #260]	; (8013908 <tcp_input+0x28c>)
 8013804:	6814      	ldr	r4, [r2, #0]
 8013806:	4618      	mov	r0, r3
 8013808:	f7fc fa7d 	bl	800fd06 <lwip_htonl>
 801380c:	4603      	mov	r3, r0
 801380e:	6063      	str	r3, [r4, #4]
 8013810:	6863      	ldr	r3, [r4, #4]
 8013812:	4a45      	ldr	r2, [pc, #276]	; (8013928 <tcp_input+0x2ac>)
 8013814:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013816:	4b3c      	ldr	r3, [pc, #240]	; (8013908 <tcp_input+0x28c>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	4a3a      	ldr	r2, [pc, #232]	; (8013908 <tcp_input+0x28c>)
 801381e:	6814      	ldr	r4, [r2, #0]
 8013820:	4618      	mov	r0, r3
 8013822:	f7fc fa70 	bl	800fd06 <lwip_htonl>
 8013826:	4603      	mov	r3, r0
 8013828:	60a3      	str	r3, [r4, #8]
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	4a3f      	ldr	r2, [pc, #252]	; (801392c <tcp_input+0x2b0>)
 801382e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013830:	4b35      	ldr	r3, [pc, #212]	; (8013908 <tcp_input+0x28c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	89db      	ldrh	r3, [r3, #14]
 8013836:	b29b      	uxth	r3, r3
 8013838:	4a33      	ldr	r2, [pc, #204]	; (8013908 <tcp_input+0x28c>)
 801383a:	6814      	ldr	r4, [r2, #0]
 801383c:	4618      	mov	r0, r3
 801383e:	f7fc fa4d 	bl	800fcdc <lwip_htons>
 8013842:	4603      	mov	r3, r0
 8013844:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013846:	4b30      	ldr	r3, [pc, #192]	; (8013908 <tcp_input+0x28c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	899b      	ldrh	r3, [r3, #12]
 801384c:	b29b      	uxth	r3, r3
 801384e:	4618      	mov	r0, r3
 8013850:	f7fc fa44 	bl	800fcdc <lwip_htons>
 8013854:	4603      	mov	r3, r0
 8013856:	b2db      	uxtb	r3, r3
 8013858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801385c:	b2da      	uxtb	r2, r3
 801385e:	4b34      	ldr	r3, [pc, #208]	; (8013930 <tcp_input+0x2b4>)
 8013860:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	891a      	ldrh	r2, [r3, #8]
 8013866:	4b33      	ldr	r3, [pc, #204]	; (8013934 <tcp_input+0x2b8>)
 8013868:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801386a:	4b31      	ldr	r3, [pc, #196]	; (8013930 <tcp_input+0x2b4>)
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	f003 0303 	and.w	r3, r3, #3
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00c      	beq.n	8013890 <tcp_input+0x214>
    tcplen++;
 8013876:	4b2f      	ldr	r3, [pc, #188]	; (8013934 <tcp_input+0x2b8>)
 8013878:	881b      	ldrh	r3, [r3, #0]
 801387a:	3301      	adds	r3, #1
 801387c:	b29a      	uxth	r2, r3
 801387e:	4b2d      	ldr	r3, [pc, #180]	; (8013934 <tcp_input+0x2b8>)
 8013880:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	891a      	ldrh	r2, [r3, #8]
 8013886:	4b2b      	ldr	r3, [pc, #172]	; (8013934 <tcp_input+0x2b8>)
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	429a      	cmp	r2, r3
 801388c:	f200 82e6 	bhi.w	8013e5c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013890:	2300      	movs	r3, #0
 8013892:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013894:	4b28      	ldr	r3, [pc, #160]	; (8013938 <tcp_input+0x2bc>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	61fb      	str	r3, [r7, #28]
 801389a:	e09d      	b.n	80139d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	7d1b      	ldrb	r3, [r3, #20]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d105      	bne.n	80138b0 <tcp_input+0x234>
 80138a4:	4b15      	ldr	r3, [pc, #84]	; (80138fc <tcp_input+0x280>)
 80138a6:	22fb      	movs	r2, #251	; 0xfb
 80138a8:	4924      	ldr	r1, [pc, #144]	; (801393c <tcp_input+0x2c0>)
 80138aa:	4816      	ldr	r0, [pc, #88]	; (8013904 <tcp_input+0x288>)
 80138ac:	f007 fcbc 	bl	801b228 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	7d1b      	ldrb	r3, [r3, #20]
 80138b4:	2b0a      	cmp	r3, #10
 80138b6:	d105      	bne.n	80138c4 <tcp_input+0x248>
 80138b8:	4b10      	ldr	r3, [pc, #64]	; (80138fc <tcp_input+0x280>)
 80138ba:	22fc      	movs	r2, #252	; 0xfc
 80138bc:	4920      	ldr	r1, [pc, #128]	; (8013940 <tcp_input+0x2c4>)
 80138be:	4811      	ldr	r0, [pc, #68]	; (8013904 <tcp_input+0x288>)
 80138c0:	f007 fcb2 	bl	801b228 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	7d1b      	ldrb	r3, [r3, #20]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d105      	bne.n	80138d8 <tcp_input+0x25c>
 80138cc:	4b0b      	ldr	r3, [pc, #44]	; (80138fc <tcp_input+0x280>)
 80138ce:	22fd      	movs	r2, #253	; 0xfd
 80138d0:	491c      	ldr	r1, [pc, #112]	; (8013944 <tcp_input+0x2c8>)
 80138d2:	480c      	ldr	r0, [pc, #48]	; (8013904 <tcp_input+0x288>)
 80138d4:	f007 fca8 	bl	801b228 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	7a1b      	ldrb	r3, [r3, #8]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d033      	beq.n	8013948 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	7a1a      	ldrb	r2, [r3, #8]
 80138e4:	4b09      	ldr	r3, [pc, #36]	; (801390c <tcp_input+0x290>)
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138ec:	3301      	adds	r3, #1
 80138ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d029      	beq.n	8013948 <tcp_input+0x2cc>
      prev = pcb;
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	61bb      	str	r3, [r7, #24]
      continue;
 80138f8:	e06b      	b.n	80139d2 <tcp_input+0x356>
 80138fa:	bf00      	nop
 80138fc:	0801f478 	.word	0x0801f478
 8013900:	0801f4ac 	.word	0x0801f4ac
 8013904:	0801f4c4 	.word	0x0801f4c4
 8013908:	20007074 	.word	0x20007074
 801390c:	20000770 	.word	0x20000770
 8013910:	20007078 	.word	0x20007078
 8013914:	2000707c 	.word	0x2000707c
 8013918:	2000707a 	.word	0x2000707a
 801391c:	0801f4ec 	.word	0x0801f4ec
 8013920:	0801f4fc 	.word	0x0801f4fc
 8013924:	0801f508 	.word	0x0801f508
 8013928:	20007084 	.word	0x20007084
 801392c:	20007088 	.word	0x20007088
 8013930:	20007090 	.word	0x20007090
 8013934:	2000708e 	.word	0x2000708e
 8013938:	20007058 	.word	0x20007058
 801393c:	0801f528 	.word	0x0801f528
 8013940:	0801f550 	.word	0x0801f550
 8013944:	0801f57c 	.word	0x0801f57c
    }

    if (pcb->remote_port == tcphdr->src &&
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	8b1a      	ldrh	r2, [r3, #24]
 801394c:	4b72      	ldr	r3, [pc, #456]	; (8013b18 <tcp_input+0x49c>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	b29b      	uxth	r3, r3
 8013954:	429a      	cmp	r2, r3
 8013956:	d13a      	bne.n	80139ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	8ada      	ldrh	r2, [r3, #22]
 801395c:	4b6e      	ldr	r3, [pc, #440]	; (8013b18 <tcp_input+0x49c>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	885b      	ldrh	r3, [r3, #2]
 8013962:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013964:	429a      	cmp	r2, r3
 8013966:	d132      	bne.n	80139ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	685a      	ldr	r2, [r3, #4]
 801396c:	4b6b      	ldr	r3, [pc, #428]	; (8013b1c <tcp_input+0x4a0>)
 801396e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013970:	429a      	cmp	r2, r3
 8013972:	d12c      	bne.n	80139ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	4b68      	ldr	r3, [pc, #416]	; (8013b1c <tcp_input+0x4a0>)
 801397a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801397c:	429a      	cmp	r2, r3
 801397e:	d126      	bne.n	80139ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	69fa      	ldr	r2, [r7, #28]
 8013986:	429a      	cmp	r2, r3
 8013988:	d106      	bne.n	8013998 <tcp_input+0x31c>
 801398a:	4b65      	ldr	r3, [pc, #404]	; (8013b20 <tcp_input+0x4a4>)
 801398c:	f240 120d 	movw	r2, #269	; 0x10d
 8013990:	4964      	ldr	r1, [pc, #400]	; (8013b24 <tcp_input+0x4a8>)
 8013992:	4865      	ldr	r0, [pc, #404]	; (8013b28 <tcp_input+0x4ac>)
 8013994:	f007 fc48 	bl	801b228 <iprintf>
      if (prev != NULL) {
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00a      	beq.n	80139b4 <tcp_input+0x338>
        prev->next = pcb->next;
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	68da      	ldr	r2, [r3, #12]
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80139a6:	4b61      	ldr	r3, [pc, #388]	; (8013b2c <tcp_input+0x4b0>)
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80139ae:	4a5f      	ldr	r2, [pc, #380]	; (8013b2c <tcp_input+0x4b0>)
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	69fa      	ldr	r2, [r7, #28]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d111      	bne.n	80139e2 <tcp_input+0x366>
 80139be:	4b58      	ldr	r3, [pc, #352]	; (8013b20 <tcp_input+0x4a4>)
 80139c0:	f240 1215 	movw	r2, #277	; 0x115
 80139c4:	495a      	ldr	r1, [pc, #360]	; (8013b30 <tcp_input+0x4b4>)
 80139c6:	4858      	ldr	r0, [pc, #352]	; (8013b28 <tcp_input+0x4ac>)
 80139c8:	f007 fc2e 	bl	801b228 <iprintf>
      break;
 80139cc:	e009      	b.n	80139e2 <tcp_input+0x366>
    }
    prev = pcb;
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	61fb      	str	r3, [r7, #28]
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f47f af5e 	bne.w	801389c <tcp_input+0x220>
 80139e0:	e000      	b.n	80139e4 <tcp_input+0x368>
      break;
 80139e2:	bf00      	nop
  }

  if (pcb == NULL) {
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f040 80aa 	bne.w	8013b40 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139ec:	4b51      	ldr	r3, [pc, #324]	; (8013b34 <tcp_input+0x4b8>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	61fb      	str	r3, [r7, #28]
 80139f2:	e03f      	b.n	8013a74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	7d1b      	ldrb	r3, [r3, #20]
 80139f8:	2b0a      	cmp	r3, #10
 80139fa:	d006      	beq.n	8013a0a <tcp_input+0x38e>
 80139fc:	4b48      	ldr	r3, [pc, #288]	; (8013b20 <tcp_input+0x4a4>)
 80139fe:	f240 121f 	movw	r2, #287	; 0x11f
 8013a02:	494d      	ldr	r1, [pc, #308]	; (8013b38 <tcp_input+0x4bc>)
 8013a04:	4848      	ldr	r0, [pc, #288]	; (8013b28 <tcp_input+0x4ac>)
 8013a06:	f007 fc0f 	bl	801b228 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	7a1b      	ldrb	r3, [r3, #8]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d009      	beq.n	8013a26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	7a1a      	ldrb	r2, [r3, #8]
 8013a16:	4b41      	ldr	r3, [pc, #260]	; (8013b1c <tcp_input+0x4a0>)
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a1e:	3301      	adds	r3, #1
 8013a20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d122      	bne.n	8013a6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	8b1a      	ldrh	r2, [r3, #24]
 8013a2a:	4b3b      	ldr	r3, [pc, #236]	; (8013b18 <tcp_input+0x49c>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d11b      	bne.n	8013a6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	8ada      	ldrh	r2, [r3, #22]
 8013a3a:	4b37      	ldr	r3, [pc, #220]	; (8013b18 <tcp_input+0x49c>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	885b      	ldrh	r3, [r3, #2]
 8013a40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d113      	bne.n	8013a6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	685a      	ldr	r2, [r3, #4]
 8013a4a:	4b34      	ldr	r3, [pc, #208]	; (8013b1c <tcp_input+0x4a0>)
 8013a4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d10d      	bne.n	8013a6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	4b31      	ldr	r3, [pc, #196]	; (8013b1c <tcp_input+0x4a0>)
 8013a58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d107      	bne.n	8013a6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013a5e:	69f8      	ldr	r0, [r7, #28]
 8013a60:	f000 fb56 	bl	8014110 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7fd fd3d 	bl	80114e4 <pbuf_free>
        return;
 8013a6a:	e1fd      	b.n	8013e68 <tcp_input+0x7ec>
        continue;
 8013a6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	61fb      	str	r3, [r7, #28]
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1bc      	bne.n	80139f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a7e:	4b2f      	ldr	r3, [pc, #188]	; (8013b3c <tcp_input+0x4c0>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	617b      	str	r3, [r7, #20]
 8013a84:	e02a      	b.n	8013adc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	7a1b      	ldrb	r3, [r3, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00c      	beq.n	8013aa8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	7a1a      	ldrb	r2, [r3, #8]
 8013a92:	4b22      	ldr	r3, [pc, #136]	; (8013b1c <tcp_input+0x4a0>)
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d002      	beq.n	8013aa8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	61bb      	str	r3, [r7, #24]
        continue;
 8013aa6:	e016      	b.n	8013ad6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	8ada      	ldrh	r2, [r3, #22]
 8013aac:	4b1a      	ldr	r3, [pc, #104]	; (8013b18 <tcp_input+0x49c>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	885b      	ldrh	r3, [r3, #2]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d10c      	bne.n	8013ad2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	4b17      	ldr	r3, [pc, #92]	; (8013b1c <tcp_input+0x4a0>)
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d00f      	beq.n	8013ae4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00d      	beq.n	8013ae6 <tcp_input+0x46a>
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d009      	beq.n	8013ae6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	617b      	str	r3, [r7, #20]
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1d1      	bne.n	8013a86 <tcp_input+0x40a>
 8013ae2:	e000      	b.n	8013ae6 <tcp_input+0x46a>
            break;
 8013ae4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d029      	beq.n	8013b40 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013aec:	69bb      	ldr	r3, [r7, #24]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00a      	beq.n	8013b08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	68da      	ldr	r2, [r3, #12]
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013afa:	4b10      	ldr	r3, [pc, #64]	; (8013b3c <tcp_input+0x4c0>)
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b02:	4a0e      	ldr	r2, [pc, #56]	; (8013b3c <tcp_input+0x4c0>)
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b08:	6978      	ldr	r0, [r7, #20]
 8013b0a:	f000 fa03 	bl	8013f14 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7fd fce8 	bl	80114e4 <pbuf_free>
      return;
 8013b14:	e1a8      	b.n	8013e68 <tcp_input+0x7ec>
 8013b16:	bf00      	nop
 8013b18:	20007074 	.word	0x20007074
 8013b1c:	20000770 	.word	0x20000770
 8013b20:	0801f478 	.word	0x0801f478
 8013b24:	0801f5a4 	.word	0x0801f5a4
 8013b28:	0801f4c4 	.word	0x0801f4c4
 8013b2c:	20007058 	.word	0x20007058
 8013b30:	0801f5d0 	.word	0x0801f5d0
 8013b34:	2000705c 	.word	0x2000705c
 8013b38:	0801f5fc 	.word	0x0801f5fc
 8013b3c:	20007054 	.word	0x20007054
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f000 8158 	beq.w	8013df8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b48:	4b95      	ldr	r3, [pc, #596]	; (8013da0 <tcp_input+0x724>)
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	891a      	ldrh	r2, [r3, #8]
 8013b52:	4b93      	ldr	r3, [pc, #588]	; (8013da0 <tcp_input+0x724>)
 8013b54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b56:	4a92      	ldr	r2, [pc, #584]	; (8013da0 <tcp_input+0x724>)
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b5c:	4b91      	ldr	r3, [pc, #580]	; (8013da4 <tcp_input+0x728>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4a8f      	ldr	r2, [pc, #572]	; (8013da0 <tcp_input+0x724>)
 8013b62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b64:	4b90      	ldr	r3, [pc, #576]	; (8013da8 <tcp_input+0x72c>)
 8013b66:	2200      	movs	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013b6a:	4b90      	ldr	r3, [pc, #576]	; (8013dac <tcp_input+0x730>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013b70:	4b8f      	ldr	r3, [pc, #572]	; (8013db0 <tcp_input+0x734>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013b76:	4b8f      	ldr	r3, [pc, #572]	; (8013db4 <tcp_input+0x738>)
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	f003 0308 	and.w	r3, r3, #8
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d006      	beq.n	8013b90 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	7b5b      	ldrb	r3, [r3, #13]
 8013b86:	f043 0301 	orr.w	r3, r3, #1
 8013b8a:	b2da      	uxtb	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013b90:	69fb      	ldr	r3, [r7, #28]
 8013b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d017      	beq.n	8013bc8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b98:	69f8      	ldr	r0, [r7, #28]
 8013b9a:	f7ff f877 	bl	8012c8c <tcp_process_refused_data>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	f113 0f0d 	cmn.w	r3, #13
 8013ba4:	d007      	beq.n	8013bb6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00c      	beq.n	8013bc8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bae:	4b82      	ldr	r3, [pc, #520]	; (8013db8 <tcp_input+0x73c>)
 8013bb0:	881b      	ldrh	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d008      	beq.n	8013bc8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	f040 80e4 	bne.w	8013d88 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013bc0:	69f8      	ldr	r0, [r7, #28]
 8013bc2:	f003 fe05 	bl	80177d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013bc6:	e0df      	b.n	8013d88 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013bc8:	4a7c      	ldr	r2, [pc, #496]	; (8013dbc <tcp_input+0x740>)
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013bce:	69f8      	ldr	r0, [r7, #28]
 8013bd0:	f000 fb18 	bl	8014204 <tcp_process>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bdc:	f113 0f0d 	cmn.w	r3, #13
 8013be0:	f000 80d4 	beq.w	8013d8c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013be4:	4b71      	ldr	r3, [pc, #452]	; (8013dac <tcp_input+0x730>)
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	f003 0308 	and.w	r3, r3, #8
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d015      	beq.n	8013c1c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d008      	beq.n	8013c0c <tcp_input+0x590>
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c00:	69fa      	ldr	r2, [r7, #28]
 8013c02:	6912      	ldr	r2, [r2, #16]
 8013c04:	f06f 010d 	mvn.w	r1, #13
 8013c08:	4610      	mov	r0, r2
 8013c0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c0c:	69f9      	ldr	r1, [r7, #28]
 8013c0e:	486c      	ldr	r0, [pc, #432]	; (8013dc0 <tcp_input+0x744>)
 8013c10:	f7ff fbbc 	bl	801338c <tcp_pcb_remove>
        tcp_free(pcb);
 8013c14:	69f8      	ldr	r0, [r7, #28]
 8013c16:	f7fd ff97 	bl	8011b48 <tcp_free>
 8013c1a:	e0da      	b.n	8013dd2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013c20:	4b63      	ldr	r3, [pc, #396]	; (8013db0 <tcp_input+0x734>)
 8013c22:	881b      	ldrh	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d01d      	beq.n	8013c64 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013c28:	4b61      	ldr	r3, [pc, #388]	; (8013db0 <tcp_input+0x734>)
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00a      	beq.n	8013c4e <tcp_input+0x5d2>
 8013c38:	69fb      	ldr	r3, [r7, #28]
 8013c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c3e:	69fa      	ldr	r2, [r7, #28]
 8013c40:	6910      	ldr	r0, [r2, #16]
 8013c42:	89fa      	ldrh	r2, [r7, #14]
 8013c44:	69f9      	ldr	r1, [r7, #28]
 8013c46:	4798      	blx	r3
 8013c48:	4603      	mov	r3, r0
 8013c4a:	74fb      	strb	r3, [r7, #19]
 8013c4c:	e001      	b.n	8013c52 <tcp_input+0x5d6>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c56:	f113 0f0d 	cmn.w	r3, #13
 8013c5a:	f000 8099 	beq.w	8013d90 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c5e:	4b54      	ldr	r3, [pc, #336]	; (8013db0 <tcp_input+0x734>)
 8013c60:	2200      	movs	r2, #0
 8013c62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013c64:	69f8      	ldr	r0, [r7, #28]
 8013c66:	f000 f915 	bl	8013e94 <tcp_input_delayed_close>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f040 8091 	bne.w	8013d94 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013c72:	4b4d      	ldr	r3, [pc, #308]	; (8013da8 <tcp_input+0x72c>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d041      	beq.n	8013cfe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d006      	beq.n	8013c90 <tcp_input+0x614>
 8013c82:	4b50      	ldr	r3, [pc, #320]	; (8013dc4 <tcp_input+0x748>)
 8013c84:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013c88:	494f      	ldr	r1, [pc, #316]	; (8013dc8 <tcp_input+0x74c>)
 8013c8a:	4850      	ldr	r0, [pc, #320]	; (8013dcc <tcp_input+0x750>)
 8013c8c:	f007 facc 	bl	801b228 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	8b5b      	ldrh	r3, [r3, #26]
 8013c94:	f003 0310 	and.w	r3, r3, #16
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d008      	beq.n	8013cae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013c9c:	4b42      	ldr	r3, [pc, #264]	; (8013da8 <tcp_input+0x72c>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fd fc1f 	bl	80114e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013ca6:	69f8      	ldr	r0, [r7, #28]
 8013ca8:	f7fe fa36 	bl	8012118 <tcp_abort>
            goto aborted;
 8013cac:	e091      	b.n	8013dd2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00c      	beq.n	8013cd2 <tcp_input+0x656>
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	6918      	ldr	r0, [r3, #16]
 8013cc2:	4b39      	ldr	r3, [pc, #228]	; (8013da8 <tcp_input+0x72c>)
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	69f9      	ldr	r1, [r7, #28]
 8013cca:	47a0      	blx	r4
 8013ccc:	4603      	mov	r3, r0
 8013cce:	74fb      	strb	r3, [r7, #19]
 8013cd0:	e008      	b.n	8013ce4 <tcp_input+0x668>
 8013cd2:	4b35      	ldr	r3, [pc, #212]	; (8013da8 <tcp_input+0x72c>)
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	69f9      	ldr	r1, [r7, #28]
 8013cda:	2000      	movs	r0, #0
 8013cdc:	f7ff f8ae 	bl	8012e3c <tcp_recv_null>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ce4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ce8:	f113 0f0d 	cmn.w	r3, #13
 8013cec:	d054      	beq.n	8013d98 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013cee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d003      	beq.n	8013cfe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013cf6:	4b2c      	ldr	r3, [pc, #176]	; (8013da8 <tcp_input+0x72c>)
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013cfe:	4b2b      	ldr	r3, [pc, #172]	; (8013dac <tcp_input+0x730>)
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	f003 0320 	and.w	r3, r3, #32
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d031      	beq.n	8013d6e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d009      	beq.n	8013d26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d16:	7b5a      	ldrb	r2, [r3, #13]
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d1c:	f042 0220 	orr.w	r2, r2, #32
 8013d20:	b2d2      	uxtb	r2, r2
 8013d22:	735a      	strb	r2, [r3, #13]
 8013d24:	e023      	b.n	8013d6e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d2a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013d2e:	4293      	cmp	r3, r2
 8013d30:	d005      	beq.n	8013d3e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d36:	3301      	adds	r3, #1
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d00b      	beq.n	8013d60 <tcp_input+0x6e4>
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d4e:	69fb      	ldr	r3, [r7, #28]
 8013d50:	6918      	ldr	r0, [r3, #16]
 8013d52:	2300      	movs	r3, #0
 8013d54:	2200      	movs	r2, #0
 8013d56:	69f9      	ldr	r1, [r7, #28]
 8013d58:	47a0      	blx	r4
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	74fb      	strb	r3, [r7, #19]
 8013d5e:	e001      	b.n	8013d64 <tcp_input+0x6e8>
 8013d60:	2300      	movs	r3, #0
 8013d62:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d68:	f113 0f0d 	cmn.w	r3, #13
 8013d6c:	d016      	beq.n	8013d9c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013d6e:	4b13      	ldr	r3, [pc, #76]	; (8013dbc <tcp_input+0x740>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013d74:	69f8      	ldr	r0, [r7, #28]
 8013d76:	f000 f88d 	bl	8013e94 <tcp_input_delayed_close>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d127      	bne.n	8013dd0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013d80:	69f8      	ldr	r0, [r7, #28]
 8013d82:	f002 ff1f 	bl	8016bc4 <tcp_output>
 8013d86:	e024      	b.n	8013dd2 <tcp_input+0x756>
        goto aborted;
 8013d88:	bf00      	nop
 8013d8a:	e022      	b.n	8013dd2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013d8c:	bf00      	nop
 8013d8e:	e020      	b.n	8013dd2 <tcp_input+0x756>
              goto aborted;
 8013d90:	bf00      	nop
 8013d92:	e01e      	b.n	8013dd2 <tcp_input+0x756>
          goto aborted;
 8013d94:	bf00      	nop
 8013d96:	e01c      	b.n	8013dd2 <tcp_input+0x756>
            goto aborted;
 8013d98:	bf00      	nop
 8013d9a:	e01a      	b.n	8013dd2 <tcp_input+0x756>
              goto aborted;
 8013d9c:	bf00      	nop
 8013d9e:	e018      	b.n	8013dd2 <tcp_input+0x756>
 8013da0:	20007064 	.word	0x20007064
 8013da4:	20007074 	.word	0x20007074
 8013da8:	20007094 	.word	0x20007094
 8013dac:	20007091 	.word	0x20007091
 8013db0:	2000708c 	.word	0x2000708c
 8013db4:	20007090 	.word	0x20007090
 8013db8:	2000708e 	.word	0x2000708e
 8013dbc:	20007098 	.word	0x20007098
 8013dc0:	20007058 	.word	0x20007058
 8013dc4:	0801f478 	.word	0x0801f478
 8013dc8:	0801f62c 	.word	0x0801f62c
 8013dcc:	0801f4c4 	.word	0x0801f4c4
          goto aborted;
 8013dd0:	bf00      	nop
    tcp_input_pcb = NULL;
 8013dd2:	4b27      	ldr	r3, [pc, #156]	; (8013e70 <tcp_input+0x7f4>)
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013dd8:	4b26      	ldr	r3, [pc, #152]	; (8013e74 <tcp_input+0x7f8>)
 8013dda:	2200      	movs	r2, #0
 8013ddc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013dde:	4b26      	ldr	r3, [pc, #152]	; (8013e78 <tcp_input+0x7fc>)
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d03f      	beq.n	8013e66 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013de6:	4b24      	ldr	r3, [pc, #144]	; (8013e78 <tcp_input+0x7fc>)
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fd fb7a 	bl	80114e4 <pbuf_free>
      inseg.p = NULL;
 8013df0:	4b21      	ldr	r3, [pc, #132]	; (8013e78 <tcp_input+0x7fc>)
 8013df2:	2200      	movs	r2, #0
 8013df4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013df6:	e036      	b.n	8013e66 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013df8:	4b20      	ldr	r3, [pc, #128]	; (8013e7c <tcp_input+0x800>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	899b      	ldrh	r3, [r3, #12]
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fb ff6b 	bl	800fcdc <lwip_htons>
 8013e06:	4603      	mov	r3, r0
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	f003 0304 	and.w	r3, r3, #4
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d118      	bne.n	8013e44 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e12:	4b1b      	ldr	r3, [pc, #108]	; (8013e80 <tcp_input+0x804>)
 8013e14:	6819      	ldr	r1, [r3, #0]
 8013e16:	4b1b      	ldr	r3, [pc, #108]	; (8013e84 <tcp_input+0x808>)
 8013e18:	881b      	ldrh	r3, [r3, #0]
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	4b1a      	ldr	r3, [pc, #104]	; (8013e88 <tcp_input+0x80c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e22:	4b16      	ldr	r3, [pc, #88]	; (8013e7c <tcp_input+0x800>)
 8013e24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e26:	885b      	ldrh	r3, [r3, #2]
 8013e28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e2a:	4a14      	ldr	r2, [pc, #80]	; (8013e7c <tcp_input+0x800>)
 8013e2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e2e:	8812      	ldrh	r2, [r2, #0]
 8013e30:	b292      	uxth	r2, r2
 8013e32:	9202      	str	r2, [sp, #8]
 8013e34:	9301      	str	r3, [sp, #4]
 8013e36:	4b15      	ldr	r3, [pc, #84]	; (8013e8c <tcp_input+0x810>)
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	4b15      	ldr	r3, [pc, #84]	; (8013e90 <tcp_input+0x814>)
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	2000      	movs	r0, #0
 8013e40:	f003 fc74 	bl	801772c <tcp_rst>
    pbuf_free(p);
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f7fd fb4d 	bl	80114e4 <pbuf_free>
  return;
 8013e4a:	e00c      	b.n	8013e66 <tcp_input+0x7ea>
    goto dropped;
 8013e4c:	bf00      	nop
 8013e4e:	e006      	b.n	8013e5e <tcp_input+0x7e2>
    goto dropped;
 8013e50:	bf00      	nop
 8013e52:	e004      	b.n	8013e5e <tcp_input+0x7e2>
    goto dropped;
 8013e54:	bf00      	nop
 8013e56:	e002      	b.n	8013e5e <tcp_input+0x7e2>
      goto dropped;
 8013e58:	bf00      	nop
 8013e5a:	e000      	b.n	8013e5e <tcp_input+0x7e2>
      goto dropped;
 8013e5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7fd fb40 	bl	80114e4 <pbuf_free>
 8013e64:	e000      	b.n	8013e68 <tcp_input+0x7ec>
  return;
 8013e66:	bf00      	nop
}
 8013e68:	3724      	adds	r7, #36	; 0x24
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd90      	pop	{r4, r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	20007098 	.word	0x20007098
 8013e74:	20007094 	.word	0x20007094
 8013e78:	20007064 	.word	0x20007064
 8013e7c:	20007074 	.word	0x20007074
 8013e80:	20007088 	.word	0x20007088
 8013e84:	2000708e 	.word	0x2000708e
 8013e88:	20007084 	.word	0x20007084
 8013e8c:	20000780 	.word	0x20000780
 8013e90:	20000784 	.word	0x20000784

08013e94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <tcp_input_delayed_close+0x1c>
 8013ea2:	4b17      	ldr	r3, [pc, #92]	; (8013f00 <tcp_input_delayed_close+0x6c>)
 8013ea4:	f240 225a 	movw	r2, #602	; 0x25a
 8013ea8:	4916      	ldr	r1, [pc, #88]	; (8013f04 <tcp_input_delayed_close+0x70>)
 8013eaa:	4817      	ldr	r0, [pc, #92]	; (8013f08 <tcp_input_delayed_close+0x74>)
 8013eac:	f007 f9bc 	bl	801b228 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013eb0:	4b16      	ldr	r3, [pc, #88]	; (8013f0c <tcp_input_delayed_close+0x78>)
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	f003 0310 	and.w	r3, r3, #16
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d01c      	beq.n	8013ef6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	8b5b      	ldrh	r3, [r3, #26]
 8013ec0:	f003 0310 	and.w	r3, r3, #16
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d10d      	bne.n	8013ee4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d008      	beq.n	8013ee4 <tcp_input_delayed_close+0x50>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ed8:	687a      	ldr	r2, [r7, #4]
 8013eda:	6912      	ldr	r2, [r2, #16]
 8013edc:	f06f 010e 	mvn.w	r1, #14
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013ee4:	6879      	ldr	r1, [r7, #4]
 8013ee6:	480a      	ldr	r0, [pc, #40]	; (8013f10 <tcp_input_delayed_close+0x7c>)
 8013ee8:	f7ff fa50 	bl	801338c <tcp_pcb_remove>
    tcp_free(pcb);
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f7fd fe2b 	bl	8011b48 <tcp_free>
    return 1;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e000      	b.n	8013ef8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3708      	adds	r7, #8
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	0801f478 	.word	0x0801f478
 8013f04:	0801f648 	.word	0x0801f648
 8013f08:	0801f4c4 	.word	0x0801f4c4
 8013f0c:	20007091 	.word	0x20007091
 8013f10:	20007058 	.word	0x20007058

08013f14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013f14:	b590      	push	{r4, r7, lr}
 8013f16:	b08b      	sub	sp, #44	; 0x2c
 8013f18:	af04      	add	r7, sp, #16
 8013f1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013f1c:	4b6f      	ldr	r3, [pc, #444]	; (80140dc <tcp_listen_input+0x1c8>)
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f003 0304 	and.w	r3, r3, #4
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f040 80d2 	bne.w	80140ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d106      	bne.n	8013f3e <tcp_listen_input+0x2a>
 8013f30:	4b6b      	ldr	r3, [pc, #428]	; (80140e0 <tcp_listen_input+0x1cc>)
 8013f32:	f240 2281 	movw	r2, #641	; 0x281
 8013f36:	496b      	ldr	r1, [pc, #428]	; (80140e4 <tcp_listen_input+0x1d0>)
 8013f38:	486b      	ldr	r0, [pc, #428]	; (80140e8 <tcp_listen_input+0x1d4>)
 8013f3a:	f007 f975 	bl	801b228 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f3e:	4b67      	ldr	r3, [pc, #412]	; (80140dc <tcp_listen_input+0x1c8>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	f003 0310 	and.w	r3, r3, #16
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d019      	beq.n	8013f7e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f4a:	4b68      	ldr	r3, [pc, #416]	; (80140ec <tcp_listen_input+0x1d8>)
 8013f4c:	6819      	ldr	r1, [r3, #0]
 8013f4e:	4b68      	ldr	r3, [pc, #416]	; (80140f0 <tcp_listen_input+0x1dc>)
 8013f50:	881b      	ldrh	r3, [r3, #0]
 8013f52:	461a      	mov	r2, r3
 8013f54:	4b67      	ldr	r3, [pc, #412]	; (80140f4 <tcp_listen_input+0x1e0>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f5a:	4b67      	ldr	r3, [pc, #412]	; (80140f8 <tcp_listen_input+0x1e4>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f5e:	885b      	ldrh	r3, [r3, #2]
 8013f60:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f62:	4a65      	ldr	r2, [pc, #404]	; (80140f8 <tcp_listen_input+0x1e4>)
 8013f64:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f66:	8812      	ldrh	r2, [r2, #0]
 8013f68:	b292      	uxth	r2, r2
 8013f6a:	9202      	str	r2, [sp, #8]
 8013f6c:	9301      	str	r3, [sp, #4]
 8013f6e:	4b63      	ldr	r3, [pc, #396]	; (80140fc <tcp_listen_input+0x1e8>)
 8013f70:	9300      	str	r3, [sp, #0]
 8013f72:	4b63      	ldr	r3, [pc, #396]	; (8014100 <tcp_listen_input+0x1ec>)
 8013f74:	4602      	mov	r2, r0
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f003 fbd8 	bl	801772c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013f7c:	e0a9      	b.n	80140d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013f7e:	4b57      	ldr	r3, [pc, #348]	; (80140dc <tcp_listen_input+0x1c8>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	f003 0302 	and.w	r3, r3, #2
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 80a3 	beq.w	80140d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	7d5b      	ldrb	r3, [r3, #21]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7ff f877 	bl	8013084 <tcp_alloc>
 8013f96:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d111      	bne.n	8013fc2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	699b      	ldr	r3, [r3, #24]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00a      	beq.n	8013fbc <tcp_listen_input+0xa8>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	6910      	ldr	r0, [r2, #16]
 8013fae:	f04f 32ff 	mov.w	r2, #4294967295
 8013fb2:	2100      	movs	r1, #0
 8013fb4:	4798      	blx	r3
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	73bb      	strb	r3, [r7, #14]
      return;
 8013fba:	e08b      	b.n	80140d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013fbc:	23f0      	movs	r3, #240	; 0xf0
 8013fbe:	73bb      	strb	r3, [r7, #14]
      return;
 8013fc0:	e088      	b.n	80140d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013fc2:	4b50      	ldr	r3, [pc, #320]	; (8014104 <tcp_listen_input+0x1f0>)
 8013fc4:	695a      	ldr	r2, [r3, #20]
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013fca:	4b4e      	ldr	r3, [pc, #312]	; (8014104 <tcp_listen_input+0x1f0>)
 8013fcc:	691a      	ldr	r2, [r3, #16]
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	8ada      	ldrh	r2, [r3, #22]
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013fda:	4b47      	ldr	r3, [pc, #284]	; (80140f8 <tcp_listen_input+0x1e4>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	881b      	ldrh	r3, [r3, #0]
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2203      	movs	r2, #3
 8013fea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013fec:	4b41      	ldr	r3, [pc, #260]	; (80140f4 <tcp_listen_input+0x1e0>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	1c5a      	adds	r2, r3, #1
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013ffe:	6978      	ldr	r0, [r7, #20]
 8014000:	f7ff fa58 	bl	80134b4 <tcp_next_iss>
 8014004:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	693a      	ldr	r2, [r7, #16]
 801400a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	693a      	ldr	r2, [r7, #16]
 8014010:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	693a      	ldr	r2, [r7, #16]
 8014016:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	693a      	ldr	r2, [r7, #16]
 801401c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801401e:	4b35      	ldr	r3, [pc, #212]	; (80140f4 <tcp_listen_input+0x1e0>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	1e5a      	subs	r2, r3, #1
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	691a      	ldr	r2, [r3, #16]
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	7a5b      	ldrb	r3, [r3, #9]
 801403a:	f003 030c 	and.w	r3, r3, #12
 801403e:	b2da      	uxtb	r2, r3
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	7a1a      	ldrb	r2, [r3, #8]
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801404c:	4b2e      	ldr	r3, [pc, #184]	; (8014108 <tcp_listen_input+0x1f4>)
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	60da      	str	r2, [r3, #12]
 8014054:	4a2c      	ldr	r2, [pc, #176]	; (8014108 <tcp_listen_input+0x1f4>)
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	6013      	str	r3, [r2, #0]
 801405a:	f003 fd29 	bl	8017ab0 <tcp_timer_needed>
 801405e:	4b2b      	ldr	r3, [pc, #172]	; (801410c <tcp_listen_input+0x1f8>)
 8014060:	2201      	movs	r2, #1
 8014062:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014064:	6978      	ldr	r0, [r7, #20]
 8014066:	f001 fd8f 	bl	8015b88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801406a:	4b23      	ldr	r3, [pc, #140]	; (80140f8 <tcp_listen_input+0x1e4>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	89db      	ldrh	r3, [r3, #14]
 8014070:	b29a      	uxth	r2, r3
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	3304      	adds	r3, #4
 801408c:	4618      	mov	r0, r3
 801408e:	f005 f913 	bl	80192b8 <ip4_route>
 8014092:	4601      	mov	r1, r0
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	3304      	adds	r3, #4
 8014098:	461a      	mov	r2, r3
 801409a:	4620      	mov	r0, r4
 801409c:	f7ff fa30 	bl	8013500 <tcp_eff_send_mss_netif>
 80140a0:	4603      	mov	r3, r0
 80140a2:	461a      	mov	r2, r3
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80140a8:	2112      	movs	r1, #18
 80140aa:	6978      	ldr	r0, [r7, #20]
 80140ac:	f002 fc9c 	bl	80169e8 <tcp_enqueue_flags>
 80140b0:	4603      	mov	r3, r0
 80140b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80140b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d004      	beq.n	80140c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80140bc:	2100      	movs	r1, #0
 80140be:	6978      	ldr	r0, [r7, #20]
 80140c0:	f7fd ff6c 	bl	8011f9c <tcp_abandon>
      return;
 80140c4:	e006      	b.n	80140d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80140c6:	6978      	ldr	r0, [r7, #20]
 80140c8:	f002 fd7c 	bl	8016bc4 <tcp_output>
  return;
 80140cc:	e001      	b.n	80140d2 <tcp_listen_input+0x1be>
    return;
 80140ce:	bf00      	nop
 80140d0:	e000      	b.n	80140d4 <tcp_listen_input+0x1c0>
  return;
 80140d2:	bf00      	nop
}
 80140d4:	371c      	adds	r7, #28
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd90      	pop	{r4, r7, pc}
 80140da:	bf00      	nop
 80140dc:	20007090 	.word	0x20007090
 80140e0:	0801f478 	.word	0x0801f478
 80140e4:	0801f670 	.word	0x0801f670
 80140e8:	0801f4c4 	.word	0x0801f4c4
 80140ec:	20007088 	.word	0x20007088
 80140f0:	2000708e 	.word	0x2000708e
 80140f4:	20007084 	.word	0x20007084
 80140f8:	20007074 	.word	0x20007074
 80140fc:	20000780 	.word	0x20000780
 8014100:	20000784 	.word	0x20000784
 8014104:	20000770 	.word	0x20000770
 8014108:	20007058 	.word	0x20007058
 801410c:	20007060 	.word	0x20007060

08014110 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b086      	sub	sp, #24
 8014114:	af04      	add	r7, sp, #16
 8014116:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014118:	4b2f      	ldr	r3, [pc, #188]	; (80141d8 <tcp_timewait_input+0xc8>)
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	f003 0304 	and.w	r3, r3, #4
 8014120:	2b00      	cmp	r3, #0
 8014122:	d153      	bne.n	80141cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d106      	bne.n	8014138 <tcp_timewait_input+0x28>
 801412a:	4b2c      	ldr	r3, [pc, #176]	; (80141dc <tcp_timewait_input+0xcc>)
 801412c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014130:	492b      	ldr	r1, [pc, #172]	; (80141e0 <tcp_timewait_input+0xd0>)
 8014132:	482c      	ldr	r0, [pc, #176]	; (80141e4 <tcp_timewait_input+0xd4>)
 8014134:	f007 f878 	bl	801b228 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014138:	4b27      	ldr	r3, [pc, #156]	; (80141d8 <tcp_timewait_input+0xc8>)
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 0302 	and.w	r3, r3, #2
 8014140:	2b00      	cmp	r3, #0
 8014142:	d02a      	beq.n	801419a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014144:	4b28      	ldr	r3, [pc, #160]	; (80141e8 <tcp_timewait_input+0xd8>)
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	2b00      	cmp	r3, #0
 8014150:	db2d      	blt.n	80141ae <tcp_timewait_input+0x9e>
 8014152:	4b25      	ldr	r3, [pc, #148]	; (80141e8 <tcp_timewait_input+0xd8>)
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801415a:	6879      	ldr	r1, [r7, #4]
 801415c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801415e:	440b      	add	r3, r1
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	dc23      	bgt.n	80141ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014166:	4b21      	ldr	r3, [pc, #132]	; (80141ec <tcp_timewait_input+0xdc>)
 8014168:	6819      	ldr	r1, [r3, #0]
 801416a:	4b21      	ldr	r3, [pc, #132]	; (80141f0 <tcp_timewait_input+0xe0>)
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	461a      	mov	r2, r3
 8014170:	4b1d      	ldr	r3, [pc, #116]	; (80141e8 <tcp_timewait_input+0xd8>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014176:	4b1f      	ldr	r3, [pc, #124]	; (80141f4 <tcp_timewait_input+0xe4>)
 8014178:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801417a:	885b      	ldrh	r3, [r3, #2]
 801417c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801417e:	4a1d      	ldr	r2, [pc, #116]	; (80141f4 <tcp_timewait_input+0xe4>)
 8014180:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014182:	8812      	ldrh	r2, [r2, #0]
 8014184:	b292      	uxth	r2, r2
 8014186:	9202      	str	r2, [sp, #8]
 8014188:	9301      	str	r3, [sp, #4]
 801418a:	4b1b      	ldr	r3, [pc, #108]	; (80141f8 <tcp_timewait_input+0xe8>)
 801418c:	9300      	str	r3, [sp, #0]
 801418e:	4b1b      	ldr	r3, [pc, #108]	; (80141fc <tcp_timewait_input+0xec>)
 8014190:	4602      	mov	r2, r0
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f003 faca 	bl	801772c <tcp_rst>
      return;
 8014198:	e01b      	b.n	80141d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801419a:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <tcp_timewait_input+0xc8>)
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	f003 0301 	and.w	r3, r3, #1
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d003      	beq.n	80141ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80141a6:	4b16      	ldr	r3, [pc, #88]	; (8014200 <tcp_timewait_input+0xf0>)
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80141ae:	4b10      	ldr	r3, [pc, #64]	; (80141f0 <tcp_timewait_input+0xe0>)
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d00c      	beq.n	80141d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	8b5b      	ldrh	r3, [r3, #26]
 80141ba:	f043 0302 	orr.w	r3, r3, #2
 80141be:	b29a      	uxth	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f002 fcfd 	bl	8016bc4 <tcp_output>
  }
  return;
 80141ca:	e001      	b.n	80141d0 <tcp_timewait_input+0xc0>
    return;
 80141cc:	bf00      	nop
 80141ce:	e000      	b.n	80141d2 <tcp_timewait_input+0xc2>
  return;
 80141d0:	bf00      	nop
}
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	20007090 	.word	0x20007090
 80141dc:	0801f478 	.word	0x0801f478
 80141e0:	0801f690 	.word	0x0801f690
 80141e4:	0801f4c4 	.word	0x0801f4c4
 80141e8:	20007084 	.word	0x20007084
 80141ec:	20007088 	.word	0x20007088
 80141f0:	2000708e 	.word	0x2000708e
 80141f4:	20007074 	.word	0x20007074
 80141f8:	20000780 	.word	0x20000780
 80141fc:	20000784 	.word	0x20000784
 8014200:	2000704c 	.word	0x2000704c

08014204 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014204:	b590      	push	{r4, r7, lr}
 8014206:	b08d      	sub	sp, #52	; 0x34
 8014208:	af04      	add	r7, sp, #16
 801420a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d106      	bne.n	8014228 <tcp_process+0x24>
 801421a:	4b9d      	ldr	r3, [pc, #628]	; (8014490 <tcp_process+0x28c>)
 801421c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014220:	499c      	ldr	r1, [pc, #624]	; (8014494 <tcp_process+0x290>)
 8014222:	489d      	ldr	r0, [pc, #628]	; (8014498 <tcp_process+0x294>)
 8014224:	f007 f800 	bl	801b228 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014228:	4b9c      	ldr	r3, [pc, #624]	; (801449c <tcp_process+0x298>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	f003 0304 	and.w	r3, r3, #4
 8014230:	2b00      	cmp	r3, #0
 8014232:	d04e      	beq.n	80142d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	7d1b      	ldrb	r3, [r3, #20]
 8014238:	2b02      	cmp	r3, #2
 801423a:	d108      	bne.n	801424e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014240:	4b97      	ldr	r3, [pc, #604]	; (80144a0 <tcp_process+0x29c>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	429a      	cmp	r2, r3
 8014246:	d123      	bne.n	8014290 <tcp_process+0x8c>
        acceptable = 1;
 8014248:	2301      	movs	r3, #1
 801424a:	76fb      	strb	r3, [r7, #27]
 801424c:	e020      	b.n	8014290 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014252:	4b94      	ldr	r3, [pc, #592]	; (80144a4 <tcp_process+0x2a0>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	429a      	cmp	r2, r3
 8014258:	d102      	bne.n	8014260 <tcp_process+0x5c>
        acceptable = 1;
 801425a:	2301      	movs	r3, #1
 801425c:	76fb      	strb	r3, [r7, #27]
 801425e:	e017      	b.n	8014290 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014260:	4b90      	ldr	r3, [pc, #576]	; (80144a4 <tcp_process+0x2a0>)
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	2b00      	cmp	r3, #0
 801426c:	db10      	blt.n	8014290 <tcp_process+0x8c>
 801426e:	4b8d      	ldr	r3, [pc, #564]	; (80144a4 <tcp_process+0x2a0>)
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014276:	6879      	ldr	r1, [r7, #4]
 8014278:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801427a:	440b      	add	r3, r1
 801427c:	1ad3      	subs	r3, r2, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	dc06      	bgt.n	8014290 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	8b5b      	ldrh	r3, [r3, #26]
 8014286:	f043 0302 	orr.w	r3, r3, #2
 801428a:	b29a      	uxth	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014290:	7efb      	ldrb	r3, [r7, #27]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d01b      	beq.n	80142ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	7d1b      	ldrb	r3, [r3, #20]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <tcp_process+0xa8>
 801429e:	4b7c      	ldr	r3, [pc, #496]	; (8014490 <tcp_process+0x28c>)
 80142a0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80142a4:	4980      	ldr	r1, [pc, #512]	; (80144a8 <tcp_process+0x2a4>)
 80142a6:	487c      	ldr	r0, [pc, #496]	; (8014498 <tcp_process+0x294>)
 80142a8:	f006 ffbe 	bl	801b228 <iprintf>
      recv_flags |= TF_RESET;
 80142ac:	4b7f      	ldr	r3, [pc, #508]	; (80144ac <tcp_process+0x2a8>)
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	f043 0308 	orr.w	r3, r3, #8
 80142b4:	b2da      	uxtb	r2, r3
 80142b6:	4b7d      	ldr	r3, [pc, #500]	; (80144ac <tcp_process+0x2a8>)
 80142b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	8b5b      	ldrh	r3, [r3, #26]
 80142be:	f023 0301 	bic.w	r3, r3, #1
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80142c8:	f06f 030d 	mvn.w	r3, #13
 80142cc:	e37a      	b.n	80149c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80142ce:	2300      	movs	r3, #0
 80142d0:	e378      	b.n	80149c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80142d2:	4b72      	ldr	r3, [pc, #456]	; (801449c <tcp_process+0x298>)
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	f003 0302 	and.w	r3, r3, #2
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d010      	beq.n	8014300 <tcp_process+0xfc>
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	7d1b      	ldrb	r3, [r3, #20]
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d00c      	beq.n	8014300 <tcp_process+0xfc>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	7d1b      	ldrb	r3, [r3, #20]
 80142ea:	2b03      	cmp	r3, #3
 80142ec:	d008      	beq.n	8014300 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	8b5b      	ldrh	r3, [r3, #26]
 80142f2:	f043 0302 	orr.w	r3, r3, #2
 80142f6:	b29a      	uxth	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80142fc:	2300      	movs	r3, #0
 80142fe:	e361      	b.n	80149c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	8b5b      	ldrh	r3, [r3, #26]
 8014304:	f003 0310 	and.w	r3, r3, #16
 8014308:	2b00      	cmp	r3, #0
 801430a:	d103      	bne.n	8014314 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801430c:	4b68      	ldr	r3, [pc, #416]	; (80144b0 <tcp_process+0x2ac>)
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2200      	movs	r2, #0
 8014320:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f001 fc2f 	bl	8015b88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	7d1b      	ldrb	r3, [r3, #20]
 801432e:	3b02      	subs	r3, #2
 8014330:	2b07      	cmp	r3, #7
 8014332:	f200 8337 	bhi.w	80149a4 <tcp_process+0x7a0>
 8014336:	a201      	add	r2, pc, #4	; (adr r2, 801433c <tcp_process+0x138>)
 8014338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801433c:	0801435d 	.word	0x0801435d
 8014340:	0801458d 	.word	0x0801458d
 8014344:	08014705 	.word	0x08014705
 8014348:	0801472f 	.word	0x0801472f
 801434c:	08014853 	.word	0x08014853
 8014350:	08014705 	.word	0x08014705
 8014354:	080148df 	.word	0x080148df
 8014358:	0801496f 	.word	0x0801496f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801435c:	4b4f      	ldr	r3, [pc, #316]	; (801449c <tcp_process+0x298>)
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	f003 0310 	and.w	r3, r3, #16
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 80e4 	beq.w	8014532 <tcp_process+0x32e>
 801436a:	4b4c      	ldr	r3, [pc, #304]	; (801449c <tcp_process+0x298>)
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	f003 0302 	and.w	r3, r3, #2
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 80dd 	beq.w	8014532 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801437c:	1c5a      	adds	r2, r3, #1
 801437e:	4b48      	ldr	r3, [pc, #288]	; (80144a0 <tcp_process+0x29c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	429a      	cmp	r2, r3
 8014384:	f040 80d5 	bne.w	8014532 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014388:	4b46      	ldr	r3, [pc, #280]	; (80144a4 <tcp_process+0x2a0>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	1c5a      	adds	r2, r3, #1
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801439a:	4b41      	ldr	r3, [pc, #260]	; (80144a0 <tcp_process+0x29c>)
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80143a2:	4b44      	ldr	r3, [pc, #272]	; (80144b4 <tcp_process+0x2b0>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	89db      	ldrh	r3, [r3, #14]
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80143bc:	4b39      	ldr	r3, [pc, #228]	; (80144a4 <tcp_process+0x2a0>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	1e5a      	subs	r2, r3, #1
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2204      	movs	r2, #4
 80143ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	3304      	adds	r3, #4
 80143d4:	4618      	mov	r0, r3
 80143d6:	f004 ff6f 	bl	80192b8 <ip4_route>
 80143da:	4601      	mov	r1, r0
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	3304      	adds	r3, #4
 80143e0:	461a      	mov	r2, r3
 80143e2:	4620      	mov	r0, r4
 80143e4:	f7ff f88c 	bl	8013500 <tcp_eff_send_mss_netif>
 80143e8:	4603      	mov	r3, r0
 80143ea:	461a      	mov	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143f4:	009a      	lsls	r2, r3, #2
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8014400:	428b      	cmp	r3, r1
 8014402:	bf38      	it	cc
 8014404:	460b      	movcc	r3, r1
 8014406:	429a      	cmp	r2, r3
 8014408:	d204      	bcs.n	8014414 <tcp_process+0x210>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	b29b      	uxth	r3, r3
 8014412:	e00d      	b.n	8014430 <tcp_process+0x22c>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014418:	005b      	lsls	r3, r3, #1
 801441a:	f241 121c 	movw	r2, #4380	; 0x111c
 801441e:	4293      	cmp	r3, r2
 8014420:	d904      	bls.n	801442c <tcp_process+0x228>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	b29b      	uxth	r3, r3
 801442a:	e001      	b.n	8014430 <tcp_process+0x22c>
 801442c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801443c:	2b00      	cmp	r3, #0
 801443e:	d106      	bne.n	801444e <tcp_process+0x24a>
 8014440:	4b13      	ldr	r3, [pc, #76]	; (8014490 <tcp_process+0x28c>)
 8014442:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014446:	491c      	ldr	r1, [pc, #112]	; (80144b8 <tcp_process+0x2b4>)
 8014448:	4813      	ldr	r0, [pc, #76]	; (8014498 <tcp_process+0x294>)
 801444a:	f006 feed 	bl	801b228 <iprintf>
        --pcb->snd_queuelen;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014454:	3b01      	subs	r3, #1
 8014456:	b29a      	uxth	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014462:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d12a      	bne.n	80144c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801446e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <tcp_process+0x280>
 8014476:	4b06      	ldr	r3, [pc, #24]	; (8014490 <tcp_process+0x28c>)
 8014478:	f44f 725d 	mov.w	r2, #884	; 0x374
 801447c:	490f      	ldr	r1, [pc, #60]	; (80144bc <tcp_process+0x2b8>)
 801447e:	4806      	ldr	r0, [pc, #24]	; (8014498 <tcp_process+0x294>)
 8014480:	f006 fed2 	bl	801b228 <iprintf>
          pcb->unsent = rseg->next;
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	66da      	str	r2, [r3, #108]	; 0x6c
 801448c:	e01c      	b.n	80144c8 <tcp_process+0x2c4>
 801448e:	bf00      	nop
 8014490:	0801f478 	.word	0x0801f478
 8014494:	0801f6b0 	.word	0x0801f6b0
 8014498:	0801f4c4 	.word	0x0801f4c4
 801449c:	20007090 	.word	0x20007090
 80144a0:	20007088 	.word	0x20007088
 80144a4:	20007084 	.word	0x20007084
 80144a8:	0801f6cc 	.word	0x0801f6cc
 80144ac:	20007091 	.word	0x20007091
 80144b0:	2000704c 	.word	0x2000704c
 80144b4:	20007074 	.word	0x20007074
 80144b8:	0801f6ec 	.word	0x0801f6ec
 80144bc:	0801f704 	.word	0x0801f704
        } else {
          pcb->unacked = rseg->next;
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80144c8:	69f8      	ldr	r0, [r7, #28]
 80144ca:	f7fe fc72 	bl	8012db2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d104      	bne.n	80144e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144dc:	861a      	strh	r2, [r3, #48]	; 0x30
 80144de:	e006      	b.n	80144ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d00a      	beq.n	801450e <tcp_process+0x30a>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	6910      	ldr	r0, [r2, #16]
 8014502:	2200      	movs	r2, #0
 8014504:	6879      	ldr	r1, [r7, #4]
 8014506:	4798      	blx	r3
 8014508:	4603      	mov	r3, r0
 801450a:	76bb      	strb	r3, [r7, #26]
 801450c:	e001      	b.n	8014512 <tcp_process+0x30e>
 801450e:	2300      	movs	r3, #0
 8014510:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014512:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014516:	f113 0f0d 	cmn.w	r3, #13
 801451a:	d102      	bne.n	8014522 <tcp_process+0x31e>
          return ERR_ABRT;
 801451c:	f06f 030c 	mvn.w	r3, #12
 8014520:	e250      	b.n	80149c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	8b5b      	ldrh	r3, [r3, #26]
 8014526:	f043 0302 	orr.w	r3, r3, #2
 801452a:	b29a      	uxth	r2, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014530:	e23a      	b.n	80149a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014532:	4b98      	ldr	r3, [pc, #608]	; (8014794 <tcp_process+0x590>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	f003 0310 	and.w	r3, r3, #16
 801453a:	2b00      	cmp	r3, #0
 801453c:	f000 8234 	beq.w	80149a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014540:	4b95      	ldr	r3, [pc, #596]	; (8014798 <tcp_process+0x594>)
 8014542:	6819      	ldr	r1, [r3, #0]
 8014544:	4b95      	ldr	r3, [pc, #596]	; (801479c <tcp_process+0x598>)
 8014546:	881b      	ldrh	r3, [r3, #0]
 8014548:	461a      	mov	r2, r3
 801454a:	4b95      	ldr	r3, [pc, #596]	; (80147a0 <tcp_process+0x59c>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014550:	4b94      	ldr	r3, [pc, #592]	; (80147a4 <tcp_process+0x5a0>)
 8014552:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014554:	885b      	ldrh	r3, [r3, #2]
 8014556:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014558:	4a92      	ldr	r2, [pc, #584]	; (80147a4 <tcp_process+0x5a0>)
 801455a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801455c:	8812      	ldrh	r2, [r2, #0]
 801455e:	b292      	uxth	r2, r2
 8014560:	9202      	str	r2, [sp, #8]
 8014562:	9301      	str	r3, [sp, #4]
 8014564:	4b90      	ldr	r3, [pc, #576]	; (80147a8 <tcp_process+0x5a4>)
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	4b90      	ldr	r3, [pc, #576]	; (80147ac <tcp_process+0x5a8>)
 801456a:	4602      	mov	r2, r0
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f003 f8dd 	bl	801772c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014578:	2b05      	cmp	r3, #5
 801457a:	f200 8215 	bhi.w	80149a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f002 fea9 	bl	80172dc <tcp_rexmit_rto>
      break;
 801458a:	e20d      	b.n	80149a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801458c:	4b81      	ldr	r3, [pc, #516]	; (8014794 <tcp_process+0x590>)
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	f003 0310 	and.w	r3, r3, #16
 8014594:	2b00      	cmp	r3, #0
 8014596:	f000 80a1 	beq.w	80146dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801459a:	4b7f      	ldr	r3, [pc, #508]	; (8014798 <tcp_process+0x594>)
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145a2:	1ad3      	subs	r3, r2, r3
 80145a4:	3b01      	subs	r3, #1
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	db7e      	blt.n	80146a8 <tcp_process+0x4a4>
 80145aa:	4b7b      	ldr	r3, [pc, #492]	; (8014798 <tcp_process+0x594>)
 80145ac:	681a      	ldr	r2, [r3, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145b2:	1ad3      	subs	r3, r2, r3
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	dc77      	bgt.n	80146a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2204      	movs	r2, #4
 80145bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d102      	bne.n	80145cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80145c6:	23fa      	movs	r3, #250	; 0xfa
 80145c8:	76bb      	strb	r3, [r7, #26]
 80145ca:	e01d      	b.n	8014608 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145d0:	699b      	ldr	r3, [r3, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d106      	bne.n	80145e4 <tcp_process+0x3e0>
 80145d6:	4b76      	ldr	r3, [pc, #472]	; (80147b0 <tcp_process+0x5ac>)
 80145d8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80145dc:	4975      	ldr	r1, [pc, #468]	; (80147b4 <tcp_process+0x5b0>)
 80145de:	4876      	ldr	r0, [pc, #472]	; (80147b8 <tcp_process+0x5b4>)
 80145e0:	f006 fe22 	bl	801b228 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145e8:	699b      	ldr	r3, [r3, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d00a      	beq.n	8014604 <tcp_process+0x400>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	6910      	ldr	r0, [r2, #16]
 80145f8:	2200      	movs	r2, #0
 80145fa:	6879      	ldr	r1, [r7, #4]
 80145fc:	4798      	blx	r3
 80145fe:	4603      	mov	r3, r0
 8014600:	76bb      	strb	r3, [r7, #26]
 8014602:	e001      	b.n	8014608 <tcp_process+0x404>
 8014604:	23f0      	movs	r3, #240	; 0xf0
 8014606:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014608:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d00a      	beq.n	8014626 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014610:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014614:	f113 0f0d 	cmn.w	r3, #13
 8014618:	d002      	beq.n	8014620 <tcp_process+0x41c>
              tcp_abort(pcb);
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f7fd fd7c 	bl	8012118 <tcp_abort>
            }
            return ERR_ABRT;
 8014620:	f06f 030c 	mvn.w	r3, #12
 8014624:	e1ce      	b.n	80149c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 fae0 	bl	8014bec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801462c:	4b63      	ldr	r3, [pc, #396]	; (80147bc <tcp_process+0x5b8>)
 801462e:	881b      	ldrh	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d005      	beq.n	8014640 <tcp_process+0x43c>
            recv_acked--;
 8014634:	4b61      	ldr	r3, [pc, #388]	; (80147bc <tcp_process+0x5b8>)
 8014636:	881b      	ldrh	r3, [r3, #0]
 8014638:	3b01      	subs	r3, #1
 801463a:	b29a      	uxth	r2, r3
 801463c:	4b5f      	ldr	r3, [pc, #380]	; (80147bc <tcp_process+0x5b8>)
 801463e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014644:	009a      	lsls	r2, r3, #2
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014650:	428b      	cmp	r3, r1
 8014652:	bf38      	it	cc
 8014654:	460b      	movcc	r3, r1
 8014656:	429a      	cmp	r2, r3
 8014658:	d204      	bcs.n	8014664 <tcp_process+0x460>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	b29b      	uxth	r3, r3
 8014662:	e00d      	b.n	8014680 <tcp_process+0x47c>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	f241 121c 	movw	r2, #4380	; 0x111c
 801466e:	4293      	cmp	r3, r2
 8014670:	d904      	bls.n	801467c <tcp_process+0x478>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	b29b      	uxth	r3, r3
 801467a:	e001      	b.n	8014680 <tcp_process+0x47c>
 801467c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014686:	4b4e      	ldr	r3, [pc, #312]	; (80147c0 <tcp_process+0x5bc>)
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	f003 0320 	and.w	r3, r3, #32
 801468e:	2b00      	cmp	r3, #0
 8014690:	d037      	beq.n	8014702 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	8b5b      	ldrh	r3, [r3, #26]
 8014696:	f043 0302 	orr.w	r3, r3, #2
 801469a:	b29a      	uxth	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2207      	movs	r2, #7
 80146a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80146a6:	e02c      	b.n	8014702 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146a8:	4b3b      	ldr	r3, [pc, #236]	; (8014798 <tcp_process+0x594>)
 80146aa:	6819      	ldr	r1, [r3, #0]
 80146ac:	4b3b      	ldr	r3, [pc, #236]	; (801479c <tcp_process+0x598>)
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	461a      	mov	r2, r3
 80146b2:	4b3b      	ldr	r3, [pc, #236]	; (80147a0 <tcp_process+0x59c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146b8:	4b3a      	ldr	r3, [pc, #232]	; (80147a4 <tcp_process+0x5a0>)
 80146ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146bc:	885b      	ldrh	r3, [r3, #2]
 80146be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146c0:	4a38      	ldr	r2, [pc, #224]	; (80147a4 <tcp_process+0x5a0>)
 80146c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146c4:	8812      	ldrh	r2, [r2, #0]
 80146c6:	b292      	uxth	r2, r2
 80146c8:	9202      	str	r2, [sp, #8]
 80146ca:	9301      	str	r3, [sp, #4]
 80146cc:	4b36      	ldr	r3, [pc, #216]	; (80147a8 <tcp_process+0x5a4>)
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	4b36      	ldr	r3, [pc, #216]	; (80147ac <tcp_process+0x5a8>)
 80146d2:	4602      	mov	r2, r0
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f003 f829 	bl	801772c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80146da:	e167      	b.n	80149ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80146dc:	4b2d      	ldr	r3, [pc, #180]	; (8014794 <tcp_process+0x590>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	f003 0302 	and.w	r3, r3, #2
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f000 8161 	beq.w	80149ac <tcp_process+0x7a8>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ee:	1e5a      	subs	r2, r3, #1
 80146f0:	4b2b      	ldr	r3, [pc, #172]	; (80147a0 <tcp_process+0x59c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	f040 8159 	bne.w	80149ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f002 fe10 	bl	8017320 <tcp_rexmit>
      break;
 8014700:	e154      	b.n	80149ac <tcp_process+0x7a8>
 8014702:	e153      	b.n	80149ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f000 fa71 	bl	8014bec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801470a:	4b2d      	ldr	r3, [pc, #180]	; (80147c0 <tcp_process+0x5bc>)
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	f003 0320 	and.w	r3, r3, #32
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 814c 	beq.w	80149b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	8b5b      	ldrh	r3, [r3, #26]
 801471c:	f043 0302 	orr.w	r3, r3, #2
 8014720:	b29a      	uxth	r2, r3
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2207      	movs	r2, #7
 801472a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801472c:	e140      	b.n	80149b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 fa5c 	bl	8014bec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014734:	4b22      	ldr	r3, [pc, #136]	; (80147c0 <tcp_process+0x5bc>)
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f003 0320 	and.w	r3, r3, #32
 801473c:	2b00      	cmp	r3, #0
 801473e:	d071      	beq.n	8014824 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014740:	4b14      	ldr	r3, [pc, #80]	; (8014794 <tcp_process+0x590>)
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	f003 0310 	and.w	r3, r3, #16
 8014748:	2b00      	cmp	r3, #0
 801474a:	d060      	beq.n	801480e <tcp_process+0x60a>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014750:	4b11      	ldr	r3, [pc, #68]	; (8014798 <tcp_process+0x594>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	429a      	cmp	r2, r3
 8014756:	d15a      	bne.n	801480e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801475c:	2b00      	cmp	r3, #0
 801475e:	d156      	bne.n	801480e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	8b5b      	ldrh	r3, [r3, #26]
 8014764:	f043 0302 	orr.w	r3, r3, #2
 8014768:	b29a      	uxth	r2, r3
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f7fe fdbc 	bl	80132ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014774:	4b13      	ldr	r3, [pc, #76]	; (80147c4 <tcp_process+0x5c0>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	429a      	cmp	r2, r3
 801477c:	d105      	bne.n	801478a <tcp_process+0x586>
 801477e:	4b11      	ldr	r3, [pc, #68]	; (80147c4 <tcp_process+0x5c0>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	68db      	ldr	r3, [r3, #12]
 8014784:	4a0f      	ldr	r2, [pc, #60]	; (80147c4 <tcp_process+0x5c0>)
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	e02e      	b.n	80147e8 <tcp_process+0x5e4>
 801478a:	4b0e      	ldr	r3, [pc, #56]	; (80147c4 <tcp_process+0x5c0>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	617b      	str	r3, [r7, #20]
 8014790:	e027      	b.n	80147e2 <tcp_process+0x5de>
 8014792:	bf00      	nop
 8014794:	20007090 	.word	0x20007090
 8014798:	20007088 	.word	0x20007088
 801479c:	2000708e 	.word	0x2000708e
 80147a0:	20007084 	.word	0x20007084
 80147a4:	20007074 	.word	0x20007074
 80147a8:	20000780 	.word	0x20000780
 80147ac:	20000784 	.word	0x20000784
 80147b0:	0801f478 	.word	0x0801f478
 80147b4:	0801f718 	.word	0x0801f718
 80147b8:	0801f4c4 	.word	0x0801f4c4
 80147bc:	2000708c 	.word	0x2000708c
 80147c0:	20007091 	.word	0x20007091
 80147c4:	20007058 	.word	0x20007058
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d104      	bne.n	80147dc <tcp_process+0x5d8>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	68da      	ldr	r2, [r3, #12]
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	60da      	str	r2, [r3, #12]
 80147da:	e005      	b.n	80147e8 <tcp_process+0x5e4>
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	617b      	str	r3, [r7, #20]
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d1ef      	bne.n	80147c8 <tcp_process+0x5c4>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2200      	movs	r2, #0
 80147ec:	60da      	str	r2, [r3, #12]
 80147ee:	4b77      	ldr	r3, [pc, #476]	; (80149cc <tcp_process+0x7c8>)
 80147f0:	2201      	movs	r2, #1
 80147f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	220a      	movs	r2, #10
 80147f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80147fa:	4b75      	ldr	r3, [pc, #468]	; (80149d0 <tcp_process+0x7cc>)
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	60da      	str	r2, [r3, #12]
 8014802:	4a73      	ldr	r2, [pc, #460]	; (80149d0 <tcp_process+0x7cc>)
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6013      	str	r3, [r2, #0]
 8014808:	f003 f952 	bl	8017ab0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801480c:	e0d2      	b.n	80149b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8b5b      	ldrh	r3, [r3, #26]
 8014812:	f043 0302 	orr.w	r3, r3, #2
 8014816:	b29a      	uxth	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2208      	movs	r2, #8
 8014820:	751a      	strb	r2, [r3, #20]
      break;
 8014822:	e0c7      	b.n	80149b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014824:	4b6b      	ldr	r3, [pc, #428]	; (80149d4 <tcp_process+0x7d0>)
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	f003 0310 	and.w	r3, r3, #16
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 80c1 	beq.w	80149b4 <tcp_process+0x7b0>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014836:	4b68      	ldr	r3, [pc, #416]	; (80149d8 <tcp_process+0x7d4>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	429a      	cmp	r2, r3
 801483c:	f040 80ba 	bne.w	80149b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014844:	2b00      	cmp	r3, #0
 8014846:	f040 80b5 	bne.w	80149b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2206      	movs	r2, #6
 801484e:	751a      	strb	r2, [r3, #20]
      break;
 8014850:	e0b0      	b.n	80149b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f9ca 	bl	8014bec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014858:	4b60      	ldr	r3, [pc, #384]	; (80149dc <tcp_process+0x7d8>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	f003 0320 	and.w	r3, r3, #32
 8014860:	2b00      	cmp	r3, #0
 8014862:	f000 80a9 	beq.w	80149b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	8b5b      	ldrh	r3, [r3, #26]
 801486a:	f043 0302 	orr.w	r3, r3, #2
 801486e:	b29a      	uxth	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7fe fd39 	bl	80132ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801487a:	4b59      	ldr	r3, [pc, #356]	; (80149e0 <tcp_process+0x7dc>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	429a      	cmp	r2, r3
 8014882:	d105      	bne.n	8014890 <tcp_process+0x68c>
 8014884:	4b56      	ldr	r3, [pc, #344]	; (80149e0 <tcp_process+0x7dc>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	4a55      	ldr	r2, [pc, #340]	; (80149e0 <tcp_process+0x7dc>)
 801488c:	6013      	str	r3, [r2, #0]
 801488e:	e013      	b.n	80148b8 <tcp_process+0x6b4>
 8014890:	4b53      	ldr	r3, [pc, #332]	; (80149e0 <tcp_process+0x7dc>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	613b      	str	r3, [r7, #16]
 8014896:	e00c      	b.n	80148b2 <tcp_process+0x6ae>
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d104      	bne.n	80148ac <tcp_process+0x6a8>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	68da      	ldr	r2, [r3, #12]
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	60da      	str	r2, [r3, #12]
 80148aa:	e005      	b.n	80148b8 <tcp_process+0x6b4>
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	613b      	str	r3, [r7, #16]
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1ef      	bne.n	8014898 <tcp_process+0x694>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2200      	movs	r2, #0
 80148bc:	60da      	str	r2, [r3, #12]
 80148be:	4b43      	ldr	r3, [pc, #268]	; (80149cc <tcp_process+0x7c8>)
 80148c0:	2201      	movs	r2, #1
 80148c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	220a      	movs	r2, #10
 80148c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80148ca:	4b41      	ldr	r3, [pc, #260]	; (80149d0 <tcp_process+0x7cc>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	60da      	str	r2, [r3, #12]
 80148d2:	4a3f      	ldr	r2, [pc, #252]	; (80149d0 <tcp_process+0x7cc>)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6013      	str	r3, [r2, #0]
 80148d8:	f003 f8ea 	bl	8017ab0 <tcp_timer_needed>
      }
      break;
 80148dc:	e06c      	b.n	80149b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 f984 	bl	8014bec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80148e4:	4b3b      	ldr	r3, [pc, #236]	; (80149d4 <tcp_process+0x7d0>)
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	f003 0310 	and.w	r3, r3, #16
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d065      	beq.n	80149bc <tcp_process+0x7b8>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148f4:	4b38      	ldr	r3, [pc, #224]	; (80149d8 <tcp_process+0x7d4>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d15f      	bne.n	80149bc <tcp_process+0x7b8>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014900:	2b00      	cmp	r3, #0
 8014902:	d15b      	bne.n	80149bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7fe fcf1 	bl	80132ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801490a:	4b35      	ldr	r3, [pc, #212]	; (80149e0 <tcp_process+0x7dc>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	429a      	cmp	r2, r3
 8014912:	d105      	bne.n	8014920 <tcp_process+0x71c>
 8014914:	4b32      	ldr	r3, [pc, #200]	; (80149e0 <tcp_process+0x7dc>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	4a31      	ldr	r2, [pc, #196]	; (80149e0 <tcp_process+0x7dc>)
 801491c:	6013      	str	r3, [r2, #0]
 801491e:	e013      	b.n	8014948 <tcp_process+0x744>
 8014920:	4b2f      	ldr	r3, [pc, #188]	; (80149e0 <tcp_process+0x7dc>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	60fb      	str	r3, [r7, #12]
 8014926:	e00c      	b.n	8014942 <tcp_process+0x73e>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	429a      	cmp	r2, r3
 8014930:	d104      	bne.n	801493c <tcp_process+0x738>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	60da      	str	r2, [r3, #12]
 801493a:	e005      	b.n	8014948 <tcp_process+0x744>
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	60fb      	str	r3, [r7, #12]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1ef      	bne.n	8014928 <tcp_process+0x724>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	60da      	str	r2, [r3, #12]
 801494e:	4b1f      	ldr	r3, [pc, #124]	; (80149cc <tcp_process+0x7c8>)
 8014950:	2201      	movs	r2, #1
 8014952:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	220a      	movs	r2, #10
 8014958:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801495a:	4b1d      	ldr	r3, [pc, #116]	; (80149d0 <tcp_process+0x7cc>)
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	60da      	str	r2, [r3, #12]
 8014962:	4a1b      	ldr	r2, [pc, #108]	; (80149d0 <tcp_process+0x7cc>)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6013      	str	r3, [r2, #0]
 8014968:	f003 f8a2 	bl	8017ab0 <tcp_timer_needed>
      }
      break;
 801496c:	e026      	b.n	80149bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f93c 	bl	8014bec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014974:	4b17      	ldr	r3, [pc, #92]	; (80149d4 <tcp_process+0x7d0>)
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	f003 0310 	and.w	r3, r3, #16
 801497c:	2b00      	cmp	r3, #0
 801497e:	d01f      	beq.n	80149c0 <tcp_process+0x7bc>
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014984:	4b14      	ldr	r3, [pc, #80]	; (80149d8 <tcp_process+0x7d4>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	429a      	cmp	r2, r3
 801498a:	d119      	bne.n	80149c0 <tcp_process+0x7bc>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d115      	bne.n	80149c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014994:	4b11      	ldr	r3, [pc, #68]	; (80149dc <tcp_process+0x7d8>)
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	f043 0310 	orr.w	r3, r3, #16
 801499c:	b2da      	uxtb	r2, r3
 801499e:	4b0f      	ldr	r3, [pc, #60]	; (80149dc <tcp_process+0x7d8>)
 80149a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149a2:	e00d      	b.n	80149c0 <tcp_process+0x7bc>
    default:
      break;
 80149a4:	bf00      	nop
 80149a6:	e00c      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149a8:	bf00      	nop
 80149aa:	e00a      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149ac:	bf00      	nop
 80149ae:	e008      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149b0:	bf00      	nop
 80149b2:	e006      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149b4:	bf00      	nop
 80149b6:	e004      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149b8:	bf00      	nop
 80149ba:	e002      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149bc:	bf00      	nop
 80149be:	e000      	b.n	80149c2 <tcp_process+0x7be>
      break;
 80149c0:	bf00      	nop
  }
  return ERR_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3724      	adds	r7, #36	; 0x24
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd90      	pop	{r4, r7, pc}
 80149cc:	20007060 	.word	0x20007060
 80149d0:	2000705c 	.word	0x2000705c
 80149d4:	20007090 	.word	0x20007090
 80149d8:	20007088 	.word	0x20007088
 80149dc:	20007091 	.word	0x20007091
 80149e0:	20007058 	.word	0x20007058

080149e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80149e4:	b590      	push	{r4, r7, lr}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d106      	bne.n	8014a02 <tcp_oos_insert_segment+0x1e>
 80149f4:	4b3b      	ldr	r3, [pc, #236]	; (8014ae4 <tcp_oos_insert_segment+0x100>)
 80149f6:	f240 421f 	movw	r2, #1055	; 0x41f
 80149fa:	493b      	ldr	r1, [pc, #236]	; (8014ae8 <tcp_oos_insert_segment+0x104>)
 80149fc:	483b      	ldr	r0, [pc, #236]	; (8014aec <tcp_oos_insert_segment+0x108>)
 80149fe:	f006 fc13 	bl	801b228 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	68db      	ldr	r3, [r3, #12]
 8014a06:	899b      	ldrh	r3, [r3, #12]
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7fb f966 	bl	800fcdc <lwip_htons>
 8014a10:	4603      	mov	r3, r0
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d028      	beq.n	8014a6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014a1c:	6838      	ldr	r0, [r7, #0]
 8014a1e:	f7fe f9b3 	bl	8012d88 <tcp_segs_free>
    next = NULL;
 8014a22:	2300      	movs	r3, #0
 8014a24:	603b      	str	r3, [r7, #0]
 8014a26:	e056      	b.n	8014ad6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	899b      	ldrh	r3, [r3, #12]
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7fb f953 	bl	800fcdc <lwip_htons>
 8014a36:	4603      	mov	r3, r0
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	f003 0301 	and.w	r3, r3, #1
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d00d      	beq.n	8014a5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	68db      	ldr	r3, [r3, #12]
 8014a46:	899b      	ldrh	r3, [r3, #12]
 8014a48:	b29c      	uxth	r4, r3
 8014a4a:	2001      	movs	r0, #1
 8014a4c:	f7fb f946 	bl	800fcdc <lwip_htons>
 8014a50:	4603      	mov	r3, r0
 8014a52:	461a      	mov	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	4322      	orrs	r2, r4
 8014a5a:	b292      	uxth	r2, r2
 8014a5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f7fe f9a2 	bl	8012db2 <tcp_seg_free>
    while (next &&
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00e      	beq.n	8014a92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	891b      	ldrh	r3, [r3, #8]
 8014a78:	461a      	mov	r2, r3
 8014a7a:	4b1d      	ldr	r3, [pc, #116]	; (8014af0 <tcp_oos_insert_segment+0x10c>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	441a      	add	r2, r3
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	6839      	ldr	r1, [r7, #0]
 8014a88:	8909      	ldrh	r1, [r1, #8]
 8014a8a:	440b      	add	r3, r1
 8014a8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	daca      	bge.n	8014a28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d01e      	beq.n	8014ad6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	891b      	ldrh	r3, [r3, #8]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	4b14      	ldr	r3, [pc, #80]	; (8014af0 <tcp_oos_insert_segment+0x10c>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	441a      	add	r2, r3
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	dd12      	ble.n	8014ad6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	4b0d      	ldr	r3, [pc, #52]	; (8014af0 <tcp_oos_insert_segment+0x10c>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	685a      	ldr	r2, [r3, #4]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	891b      	ldrh	r3, [r3, #8]
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	f7fc fb83 	bl	80111dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	683a      	ldr	r2, [r7, #0]
 8014ada:	601a      	str	r2, [r3, #0]
}
 8014adc:	bf00      	nop
 8014ade:	3714      	adds	r7, #20
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd90      	pop	{r4, r7, pc}
 8014ae4:	0801f478 	.word	0x0801f478
 8014ae8:	0801f738 	.word	0x0801f738
 8014aec:	0801f4c4 	.word	0x0801f4c4
 8014af0:	20007084 	.word	0x20007084

08014af4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014af4:	b5b0      	push	{r4, r5, r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	60b9      	str	r1, [r7, #8]
 8014afe:	607a      	str	r2, [r7, #4]
 8014b00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b02:	e03e      	b.n	8014b82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7fc fd6e 	bl	80115f4 <pbuf_clen>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b22:	8a7a      	ldrh	r2, [r7, #18]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d906      	bls.n	8014b36 <tcp_free_acked_segments+0x42>
 8014b28:	4b2a      	ldr	r3, [pc, #168]	; (8014bd4 <tcp_free_acked_segments+0xe0>)
 8014b2a:	f240 4257 	movw	r2, #1111	; 0x457
 8014b2e:	492a      	ldr	r1, [pc, #168]	; (8014bd8 <tcp_free_acked_segments+0xe4>)
 8014b30:	482a      	ldr	r0, [pc, #168]	; (8014bdc <tcp_free_acked_segments+0xe8>)
 8014b32:	f006 fb79 	bl	801b228 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014b3c:	8a7b      	ldrh	r3, [r7, #18]
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	b29a      	uxth	r2, r3
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	891a      	ldrh	r2, [r3, #8]
 8014b4c:	4b24      	ldr	r3, [pc, #144]	; (8014be0 <tcp_free_acked_segments+0xec>)
 8014b4e:	881b      	ldrh	r3, [r3, #0]
 8014b50:	4413      	add	r3, r2
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	4b22      	ldr	r3, [pc, #136]	; (8014be0 <tcp_free_acked_segments+0xec>)
 8014b56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b58:	6978      	ldr	r0, [r7, #20]
 8014b5a:	f7fe f92a 	bl	8012db2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00c      	beq.n	8014b82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d109      	bne.n	8014b82 <tcp_free_acked_segments+0x8e>
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d106      	bne.n	8014b82 <tcp_free_acked_segments+0x8e>
 8014b74:	4b17      	ldr	r3, [pc, #92]	; (8014bd4 <tcp_free_acked_segments+0xe0>)
 8014b76:	f240 4261 	movw	r2, #1121	; 0x461
 8014b7a:	491a      	ldr	r1, [pc, #104]	; (8014be4 <tcp_free_acked_segments+0xf0>)
 8014b7c:	4817      	ldr	r0, [pc, #92]	; (8014bdc <tcp_free_acked_segments+0xe8>)
 8014b7e:	f006 fb53 	bl	801b228 <iprintf>
  while (seg_list != NULL &&
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d020      	beq.n	8014bca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7fb f8b9 	bl	800fd06 <lwip_htonl>
 8014b94:	4604      	mov	r4, r0
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	891b      	ldrh	r3, [r3, #8]
 8014b9a:	461d      	mov	r5, r3
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	899b      	ldrh	r3, [r3, #12]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7fb f899 	bl	800fcdc <lwip_htons>
 8014baa:	4603      	mov	r3, r0
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	f003 0303 	and.w	r3, r3, #3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d001      	beq.n	8014bba <tcp_free_acked_segments+0xc6>
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	e000      	b.n	8014bbc <tcp_free_acked_segments+0xc8>
 8014bba:	2300      	movs	r3, #0
 8014bbc:	442b      	add	r3, r5
 8014bbe:	18e2      	adds	r2, r4, r3
 8014bc0:	4b09      	ldr	r3, [pc, #36]	; (8014be8 <tcp_free_acked_segments+0xf4>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	dd9c      	ble.n	8014b04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014bca:	68bb      	ldr	r3, [r7, #8]
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3718      	adds	r7, #24
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8014bd4:	0801f478 	.word	0x0801f478
 8014bd8:	0801f760 	.word	0x0801f760
 8014bdc:	0801f4c4 	.word	0x0801f4c4
 8014be0:	2000708c 	.word	0x2000708c
 8014be4:	0801f788 	.word	0x0801f788
 8014be8:	20007088 	.word	0x20007088

08014bec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014bec:	b5b0      	push	{r4, r5, r7, lr}
 8014bee:	b094      	sub	sp, #80	; 0x50
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <tcp_receive+0x20>
 8014bfe:	4b91      	ldr	r3, [pc, #580]	; (8014e44 <tcp_receive+0x258>)
 8014c00:	f240 427b 	movw	r2, #1147	; 0x47b
 8014c04:	4990      	ldr	r1, [pc, #576]	; (8014e48 <tcp_receive+0x25c>)
 8014c06:	4891      	ldr	r0, [pc, #580]	; (8014e4c <tcp_receive+0x260>)
 8014c08:	f006 fb0e 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7d1b      	ldrb	r3, [r3, #20]
 8014c10:	2b03      	cmp	r3, #3
 8014c12:	d806      	bhi.n	8014c22 <tcp_receive+0x36>
 8014c14:	4b8b      	ldr	r3, [pc, #556]	; (8014e44 <tcp_receive+0x258>)
 8014c16:	f240 427c 	movw	r2, #1148	; 0x47c
 8014c1a:	498d      	ldr	r1, [pc, #564]	; (8014e50 <tcp_receive+0x264>)
 8014c1c:	488b      	ldr	r0, [pc, #556]	; (8014e4c <tcp_receive+0x260>)
 8014c1e:	f006 fb03 	bl	801b228 <iprintf>

  if (flags & TCP_ACK) {
 8014c22:	4b8c      	ldr	r3, [pc, #560]	; (8014e54 <tcp_receive+0x268>)
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	f003 0310 	and.w	r3, r3, #16
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	f000 8264 	beq.w	80150f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c36:	461a      	mov	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c3c:	4413      	add	r3, r2
 8014c3e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c44:	4b84      	ldr	r3, [pc, #528]	; (8014e58 <tcp_receive+0x26c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	db1b      	blt.n	8014c86 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c52:	4b81      	ldr	r3, [pc, #516]	; (8014e58 <tcp_receive+0x26c>)
 8014c54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d106      	bne.n	8014c68 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c5e:	4b7f      	ldr	r3, [pc, #508]	; (8014e5c <tcp_receive+0x270>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	1ad3      	subs	r3, r2, r3
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	db0e      	blt.n	8014c86 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c6c:	4b7b      	ldr	r3, [pc, #492]	; (8014e5c <tcp_receive+0x270>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d125      	bne.n	8014cc0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c74:	4b7a      	ldr	r3, [pc, #488]	; (8014e60 <tcp_receive+0x274>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	89db      	ldrh	r3, [r3, #14]
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d91c      	bls.n	8014cc0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014c86:	4b76      	ldr	r3, [pc, #472]	; (8014e60 <tcp_receive+0x274>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	89db      	ldrh	r3, [r3, #14]
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d205      	bcs.n	8014cb0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014cb0:	4b69      	ldr	r3, [pc, #420]	; (8014e58 <tcp_receive+0x26c>)
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014cb8:	4b68      	ldr	r3, [pc, #416]	; (8014e5c <tcp_receive+0x270>)
 8014cba:	681a      	ldr	r2, [r3, #0]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014cc0:	4b66      	ldr	r3, [pc, #408]	; (8014e5c <tcp_receive+0x270>)
 8014cc2:	681a      	ldr	r2, [r3, #0]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014cc8:	1ad3      	subs	r3, r2, r3
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	dc58      	bgt.n	8014d80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014cce:	4b65      	ldr	r3, [pc, #404]	; (8014e64 <tcp_receive+0x278>)
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d14b      	bne.n	8014d6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014ce0:	4413      	add	r3, r2
 8014ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d142      	bne.n	8014d6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	db3d      	blt.n	8014d6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014cf6:	4b59      	ldr	r3, [pc, #356]	; (8014e5c <tcp_receive+0x270>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d137      	bne.n	8014d6e <tcp_receive+0x182>
              found_dupack = 1;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d08:	2bff      	cmp	r3, #255	; 0xff
 8014d0a:	d007      	beq.n	8014d1c <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d12:	3301      	adds	r3, #1
 8014d14:	b2da      	uxtb	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d22:	2b03      	cmp	r3, #3
 8014d24:	d91b      	bls.n	8014d5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d30:	4413      	add	r3, r2
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d30a      	bcc.n	8014d54 <tcp_receive+0x168>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d48:	4413      	add	r3, r2
 8014d4a:	b29a      	uxth	r2, r3
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d52:	e004      	b.n	8014d5e <tcp_receive+0x172>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d902      	bls.n	8014d6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f002 fb45 	bl	80173f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f040 8161 	bne.w	8015038 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d7e:	e15b      	b.n	8015038 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d80:	4b36      	ldr	r3, [pc, #216]	; (8014e5c <tcp_receive+0x270>)
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d88:	1ad3      	subs	r3, r2, r3
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f2c0 814e 	blt.w	801502e <tcp_receive+0x442>
 8014d92:	4b32      	ldr	r3, [pc, #200]	; (8014e5c <tcp_receive+0x270>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	f300 8146 	bgt.w	801502e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	8b5b      	ldrh	r3, [r3, #26]
 8014da6:	f003 0304 	and.w	r3, r3, #4
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d010      	beq.n	8014dd0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8b5b      	ldrh	r3, [r3, #26]
 8014db2:	f023 0304 	bic.w	r3, r3, #4
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014dde:	10db      	asrs	r3, r3, #3
 8014de0:	b21b      	sxth	r3, r3
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	4413      	add	r3, r2
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	b21a      	sxth	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014df8:	4b18      	ldr	r3, [pc, #96]	; (8014e5c <tcp_receive+0x270>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	b29a      	uxth	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014e10:	4b12      	ldr	r3, [pc, #72]	; (8014e5c <tcp_receive+0x270>)
 8014e12:	681a      	ldr	r2, [r3, #0]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	2b03      	cmp	r3, #3
 8014e1e:	f240 8097 	bls.w	8014f50 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d245      	bcs.n	8014ebe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	8b5b      	ldrh	r3, [r3, #26]
 8014e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d014      	beq.n	8014e68 <tcp_receive+0x27c>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	e013      	b.n	8014e6a <tcp_receive+0x27e>
 8014e42:	bf00      	nop
 8014e44:	0801f478 	.word	0x0801f478
 8014e48:	0801f7a8 	.word	0x0801f7a8
 8014e4c:	0801f4c4 	.word	0x0801f4c4
 8014e50:	0801f7c4 	.word	0x0801f7c4
 8014e54:	20007090 	.word	0x20007090
 8014e58:	20007084 	.word	0x20007084
 8014e5c:	20007088 	.word	0x20007088
 8014e60:	20007074 	.word	0x20007074
 8014e64:	2000708e 	.word	0x2000708e
 8014e68:	2302      	movs	r3, #2
 8014e6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014e6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e78:	fb12 f303 	smulbb	r3, r2, r3
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014e80:	4293      	cmp	r3, r2
 8014e82:	bf28      	it	cs
 8014e84:	4613      	movcs	r3, r2
 8014e86:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014e90:	4413      	add	r3, r2
 8014e92:	b29a      	uxth	r2, r3
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d309      	bcc.n	8014eb2 <tcp_receive+0x2c6>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ea4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ea6:	4413      	add	r3, r2
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014eb0:	e04e      	b.n	8014f50 <tcp_receive+0x364>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ebc:	e048      	b.n	8014f50 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ec6:	4413      	add	r3, r2
 8014ec8:	b29a      	uxth	r2, r3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d309      	bcc.n	8014ee8 <tcp_receive+0x2fc>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014edc:	4413      	add	r3, r2
 8014ede:	b29a      	uxth	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014ee6:	e004      	b.n	8014ef2 <tcp_receive+0x306>
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d326      	bcc.n	8014f50 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f0e:	1ad3      	subs	r3, r2, r3
 8014f10:	b29a      	uxth	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f22:	4413      	add	r3, r2
 8014f24:	b29a      	uxth	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d30a      	bcc.n	8014f46 <tcp_receive+0x35a>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f3a:	4413      	add	r3, r2
 8014f3c:	b29a      	uxth	r2, r3
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f44:	e004      	b.n	8014f50 <tcp_receive+0x364>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f58:	4a98      	ldr	r2, [pc, #608]	; (80151bc <tcp_receive+0x5d0>)
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff fdca 	bl	8014af4 <tcp_free_acked_segments>
 8014f60:	4602      	mov	r2, r0
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f6e:	4a94      	ldr	r2, [pc, #592]	; (80151c0 <tcp_receive+0x5d4>)
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7ff fdbf 	bl	8014af4 <tcp_free_acked_segments>
 8014f76:	4602      	mov	r2, r0
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d104      	bne.n	8014f8e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f8a:	861a      	strh	r2, [r3, #48]	; 0x30
 8014f8c:	e002      	b.n	8014f94 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2200      	movs	r2, #0
 8014f92:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d103      	bne.n	8014faa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014fb0:	4b84      	ldr	r3, [pc, #528]	; (80151c4 <tcp_receive+0x5d8>)
 8014fb2:	881b      	ldrh	r3, [r3, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	8b5b      	ldrh	r3, [r3, #26]
 8014fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d035      	beq.n	8015036 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d118      	bne.n	8015004 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00c      	beq.n	8014ff4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe2:	68db      	ldr	r3, [r3, #12]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fa fe8d 	bl	800fd06 <lwip_htonl>
 8014fec:	4603      	mov	r3, r0
 8014fee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	dc20      	bgt.n	8015036 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	8b5b      	ldrh	r3, [r3, #26]
 8014ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015002:	e018      	b.n	8015036 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801500c:	68db      	ldr	r3, [r3, #12]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	4618      	mov	r0, r3
 8015012:	f7fa fe78 	bl	800fd06 <lwip_htonl>
 8015016:	4603      	mov	r3, r0
 8015018:	1ae3      	subs	r3, r4, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	dc0b      	bgt.n	8015036 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	8b5b      	ldrh	r3, [r3, #26]
 8015022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015026:	b29a      	uxth	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801502c:	e003      	b.n	8015036 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f002 fbce 	bl	80177d0 <tcp_send_empty_ack>
 8015034:	e000      	b.n	8015038 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015036:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801503c:	2b00      	cmp	r3, #0
 801503e:	d05b      	beq.n	80150f8 <tcp_receive+0x50c>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015044:	4b60      	ldr	r3, [pc, #384]	; (80151c8 <tcp_receive+0x5dc>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	2b00      	cmp	r3, #0
 801504c:	da54      	bge.n	80150f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801504e:	4b5f      	ldr	r3, [pc, #380]	; (80151cc <tcp_receive+0x5e0>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	b29a      	uxth	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015058:	b29b      	uxth	r3, r3
 801505a:	1ad3      	subs	r3, r2, r3
 801505c:	b29b      	uxth	r3, r3
 801505e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015062:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801506c:	10db      	asrs	r3, r3, #3
 801506e:	b21b      	sxth	r3, r3
 8015070:	b29b      	uxth	r3, r3
 8015072:	1ad3      	subs	r3, r2, r3
 8015074:	b29b      	uxth	r3, r3
 8015076:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015080:	b29a      	uxth	r2, r3
 8015082:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015086:	4413      	add	r3, r2
 8015088:	b29b      	uxth	r3, r3
 801508a:	b21a      	sxth	r2, r3
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015090:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015094:	2b00      	cmp	r3, #0
 8015096:	da05      	bge.n	80150a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801509c:	425b      	negs	r3, r3
 801509e:	b29b      	uxth	r3, r3
 80150a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80150a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150ae:	109b      	asrs	r3, r3, #2
 80150b0:	b21b      	sxth	r3, r3
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150c2:	b29a      	uxth	r2, r3
 80150c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150c8:	4413      	add	r3, r2
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	b21a      	sxth	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150d8:	10db      	asrs	r3, r3, #3
 80150da:	b21b      	sxth	r3, r3
 80150dc:	b29a      	uxth	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4413      	add	r3, r2
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	b21a      	sxth	r2, r3
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2200      	movs	r2, #0
 80150f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80150f8:	4b35      	ldr	r3, [pc, #212]	; (80151d0 <tcp_receive+0x5e4>)
 80150fa:	881b      	ldrh	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 84e2 	beq.w	8015ac6 <tcp_receive+0xeda>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	7d1b      	ldrb	r3, [r3, #20]
 8015106:	2b06      	cmp	r3, #6
 8015108:	f200 84dd 	bhi.w	8015ac6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015110:	4b30      	ldr	r3, [pc, #192]	; (80151d4 <tcp_receive+0x5e8>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1ad3      	subs	r3, r2, r3
 8015116:	3b01      	subs	r3, #1
 8015118:	2b00      	cmp	r3, #0
 801511a:	f2c0 808f 	blt.w	801523c <tcp_receive+0x650>
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015122:	4b2b      	ldr	r3, [pc, #172]	; (80151d0 <tcp_receive+0x5e4>)
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	4619      	mov	r1, r3
 8015128:	4b2a      	ldr	r3, [pc, #168]	; (80151d4 <tcp_receive+0x5e8>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	440b      	add	r3, r1
 801512e:	1ad3      	subs	r3, r2, r3
 8015130:	3301      	adds	r3, #1
 8015132:	2b00      	cmp	r3, #0
 8015134:	f300 8082 	bgt.w	801523c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015138:	4b27      	ldr	r3, [pc, #156]	; (80151d8 <tcp_receive+0x5ec>)
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015142:	4b24      	ldr	r3, [pc, #144]	; (80151d4 <tcp_receive+0x5e8>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	1ad3      	subs	r3, r2, r3
 8015148:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801514a:	4b23      	ldr	r3, [pc, #140]	; (80151d8 <tcp_receive+0x5ec>)
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <tcp_receive+0x574>
 8015152:	4b22      	ldr	r3, [pc, #136]	; (80151dc <tcp_receive+0x5f0>)
 8015154:	f240 5294 	movw	r2, #1428	; 0x594
 8015158:	4921      	ldr	r1, [pc, #132]	; (80151e0 <tcp_receive+0x5f4>)
 801515a:	4822      	ldr	r0, [pc, #136]	; (80151e4 <tcp_receive+0x5f8>)
 801515c:	f006 f864 	bl	801b228 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015166:	4293      	cmp	r3, r2
 8015168:	d906      	bls.n	8015178 <tcp_receive+0x58c>
 801516a:	4b1c      	ldr	r3, [pc, #112]	; (80151dc <tcp_receive+0x5f0>)
 801516c:	f240 5295 	movw	r2, #1429	; 0x595
 8015170:	491d      	ldr	r1, [pc, #116]	; (80151e8 <tcp_receive+0x5fc>)
 8015172:	481c      	ldr	r0, [pc, #112]	; (80151e4 <tcp_receive+0x5f8>)
 8015174:	f006 f858 	bl	801b228 <iprintf>
      off = (u16_t)off32;
 8015178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801517e:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <tcp_receive+0x5ec>)
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	891b      	ldrh	r3, [r3, #8]
 8015184:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015188:	429a      	cmp	r2, r3
 801518a:	d906      	bls.n	801519a <tcp_receive+0x5ae>
 801518c:	4b13      	ldr	r3, [pc, #76]	; (80151dc <tcp_receive+0x5f0>)
 801518e:	f240 5297 	movw	r2, #1431	; 0x597
 8015192:	4916      	ldr	r1, [pc, #88]	; (80151ec <tcp_receive+0x600>)
 8015194:	4813      	ldr	r0, [pc, #76]	; (80151e4 <tcp_receive+0x5f8>)
 8015196:	f006 f847 	bl	801b228 <iprintf>
      inseg.len -= off;
 801519a:	4b0f      	ldr	r3, [pc, #60]	; (80151d8 <tcp_receive+0x5ec>)
 801519c:	891a      	ldrh	r2, [r3, #8]
 801519e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151a2:	1ad3      	subs	r3, r2, r3
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	4b0c      	ldr	r3, [pc, #48]	; (80151d8 <tcp_receive+0x5ec>)
 80151a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80151aa:	4b0b      	ldr	r3, [pc, #44]	; (80151d8 <tcp_receive+0x5ec>)
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	891a      	ldrh	r2, [r3, #8]
 80151b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80151b8:	e02a      	b.n	8015210 <tcp_receive+0x624>
 80151ba:	bf00      	nop
 80151bc:	0801f7e0 	.word	0x0801f7e0
 80151c0:	0801f7e8 	.word	0x0801f7e8
 80151c4:	2000708c 	.word	0x2000708c
 80151c8:	20007088 	.word	0x20007088
 80151cc:	2000704c 	.word	0x2000704c
 80151d0:	2000708e 	.word	0x2000708e
 80151d4:	20007084 	.word	0x20007084
 80151d8:	20007064 	.word	0x20007064
 80151dc:	0801f478 	.word	0x0801f478
 80151e0:	0801f7f0 	.word	0x0801f7f0
 80151e4:	0801f4c4 	.word	0x0801f4c4
 80151e8:	0801f800 	.word	0x0801f800
 80151ec:	0801f810 	.word	0x0801f810
        off -= p->len;
 80151f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151f2:	895b      	ldrh	r3, [r3, #10]
 80151f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151f8:	1ad3      	subs	r3, r2, r3
 80151fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80151fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015200:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015202:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015206:	2200      	movs	r2, #0
 8015208:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801520a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015212:	895b      	ldrh	r3, [r3, #10]
 8015214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015218:	429a      	cmp	r2, r3
 801521a:	d8e9      	bhi.n	80151f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801521c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015220:	4619      	mov	r1, r3
 8015222:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015224:	f7fc f8d8 	bl	80113d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801522c:	4a91      	ldr	r2, [pc, #580]	; (8015474 <tcp_receive+0x888>)
 801522e:	6013      	str	r3, [r2, #0]
 8015230:	4b91      	ldr	r3, [pc, #580]	; (8015478 <tcp_receive+0x88c>)
 8015232:	68db      	ldr	r3, [r3, #12]
 8015234:	4a8f      	ldr	r2, [pc, #572]	; (8015474 <tcp_receive+0x888>)
 8015236:	6812      	ldr	r2, [r2, #0]
 8015238:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801523a:	e00d      	b.n	8015258 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801523c:	4b8d      	ldr	r3, [pc, #564]	; (8015474 <tcp_receive+0x888>)
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015244:	1ad3      	subs	r3, r2, r3
 8015246:	2b00      	cmp	r3, #0
 8015248:	da06      	bge.n	8015258 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	8b5b      	ldrh	r3, [r3, #26]
 801524e:	f043 0302 	orr.w	r3, r3, #2
 8015252:	b29a      	uxth	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015258:	4b86      	ldr	r3, [pc, #536]	; (8015474 <tcp_receive+0x888>)
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	2b00      	cmp	r3, #0
 8015264:	f2c0 842a 	blt.w	8015abc <tcp_receive+0xed0>
 8015268:	4b82      	ldr	r3, [pc, #520]	; (8015474 <tcp_receive+0x888>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	6879      	ldr	r1, [r7, #4]
 8015272:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015274:	440b      	add	r3, r1
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	3301      	adds	r3, #1
 801527a:	2b00      	cmp	r3, #0
 801527c:	f300 841e 	bgt.w	8015abc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015284:	4b7b      	ldr	r3, [pc, #492]	; (8015474 <tcp_receive+0x888>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	429a      	cmp	r2, r3
 801528a:	f040 829a 	bne.w	80157c2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801528e:	4b7a      	ldr	r3, [pc, #488]	; (8015478 <tcp_receive+0x88c>)
 8015290:	891c      	ldrh	r4, [r3, #8]
 8015292:	4b79      	ldr	r3, [pc, #484]	; (8015478 <tcp_receive+0x88c>)
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	899b      	ldrh	r3, [r3, #12]
 8015298:	b29b      	uxth	r3, r3
 801529a:	4618      	mov	r0, r3
 801529c:	f7fa fd1e 	bl	800fcdc <lwip_htons>
 80152a0:	4603      	mov	r3, r0
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	f003 0303 	and.w	r3, r3, #3
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d001      	beq.n	80152b0 <tcp_receive+0x6c4>
 80152ac:	2301      	movs	r3, #1
 80152ae:	e000      	b.n	80152b2 <tcp_receive+0x6c6>
 80152b0:	2300      	movs	r3, #0
 80152b2:	4423      	add	r3, r4
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	4b71      	ldr	r3, [pc, #452]	; (801547c <tcp_receive+0x890>)
 80152b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80152be:	4b6f      	ldr	r3, [pc, #444]	; (801547c <tcp_receive+0x890>)
 80152c0:	881b      	ldrh	r3, [r3, #0]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d275      	bcs.n	80153b2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80152c6:	4b6c      	ldr	r3, [pc, #432]	; (8015478 <tcp_receive+0x88c>)
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	899b      	ldrh	r3, [r3, #12]
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fa fd04 	bl	800fcdc <lwip_htons>
 80152d4:	4603      	mov	r3, r0
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	f003 0301 	and.w	r3, r3, #1
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d01f      	beq.n	8015320 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80152e0:	4b65      	ldr	r3, [pc, #404]	; (8015478 <tcp_receive+0x88c>)
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	899b      	ldrh	r3, [r3, #12]
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	b21b      	sxth	r3, r3
 80152ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80152ee:	b21c      	sxth	r4, r3
 80152f0:	4b61      	ldr	r3, [pc, #388]	; (8015478 <tcp_receive+0x88c>)
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	899b      	ldrh	r3, [r3, #12]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7fa fcef 	bl	800fcdc <lwip_htons>
 80152fe:	4603      	mov	r3, r0
 8015300:	b2db      	uxtb	r3, r3
 8015302:	b29b      	uxth	r3, r3
 8015304:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015308:	b29b      	uxth	r3, r3
 801530a:	4618      	mov	r0, r3
 801530c:	f7fa fce6 	bl	800fcdc <lwip_htons>
 8015310:	4603      	mov	r3, r0
 8015312:	b21b      	sxth	r3, r3
 8015314:	4323      	orrs	r3, r4
 8015316:	b21a      	sxth	r2, r3
 8015318:	4b57      	ldr	r3, [pc, #348]	; (8015478 <tcp_receive+0x88c>)
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	b292      	uxth	r2, r2
 801531e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015324:	4b54      	ldr	r3, [pc, #336]	; (8015478 <tcp_receive+0x88c>)
 8015326:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015328:	4b53      	ldr	r3, [pc, #332]	; (8015478 <tcp_receive+0x88c>)
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	899b      	ldrh	r3, [r3, #12]
 801532e:	b29b      	uxth	r3, r3
 8015330:	4618      	mov	r0, r3
 8015332:	f7fa fcd3 	bl	800fcdc <lwip_htons>
 8015336:	4603      	mov	r3, r0
 8015338:	b2db      	uxtb	r3, r3
 801533a:	f003 0302 	and.w	r3, r3, #2
 801533e:	2b00      	cmp	r3, #0
 8015340:	d005      	beq.n	801534e <tcp_receive+0x762>
            inseg.len -= 1;
 8015342:	4b4d      	ldr	r3, [pc, #308]	; (8015478 <tcp_receive+0x88c>)
 8015344:	891b      	ldrh	r3, [r3, #8]
 8015346:	3b01      	subs	r3, #1
 8015348:	b29a      	uxth	r2, r3
 801534a:	4b4b      	ldr	r3, [pc, #300]	; (8015478 <tcp_receive+0x88c>)
 801534c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801534e:	4b4a      	ldr	r3, [pc, #296]	; (8015478 <tcp_receive+0x88c>)
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	4a49      	ldr	r2, [pc, #292]	; (8015478 <tcp_receive+0x88c>)
 8015354:	8912      	ldrh	r2, [r2, #8]
 8015356:	4611      	mov	r1, r2
 8015358:	4618      	mov	r0, r3
 801535a:	f7fb ff3f 	bl	80111dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801535e:	4b46      	ldr	r3, [pc, #280]	; (8015478 <tcp_receive+0x88c>)
 8015360:	891c      	ldrh	r4, [r3, #8]
 8015362:	4b45      	ldr	r3, [pc, #276]	; (8015478 <tcp_receive+0x88c>)
 8015364:	68db      	ldr	r3, [r3, #12]
 8015366:	899b      	ldrh	r3, [r3, #12]
 8015368:	b29b      	uxth	r3, r3
 801536a:	4618      	mov	r0, r3
 801536c:	f7fa fcb6 	bl	800fcdc <lwip_htons>
 8015370:	4603      	mov	r3, r0
 8015372:	b2db      	uxtb	r3, r3
 8015374:	f003 0303 	and.w	r3, r3, #3
 8015378:	2b00      	cmp	r3, #0
 801537a:	d001      	beq.n	8015380 <tcp_receive+0x794>
 801537c:	2301      	movs	r3, #1
 801537e:	e000      	b.n	8015382 <tcp_receive+0x796>
 8015380:	2300      	movs	r3, #0
 8015382:	4423      	add	r3, r4
 8015384:	b29a      	uxth	r2, r3
 8015386:	4b3d      	ldr	r3, [pc, #244]	; (801547c <tcp_receive+0x890>)
 8015388:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801538a:	4b3c      	ldr	r3, [pc, #240]	; (801547c <tcp_receive+0x890>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	461a      	mov	r2, r3
 8015390:	4b38      	ldr	r3, [pc, #224]	; (8015474 <tcp_receive+0x888>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	441a      	add	r2, r3
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801539a:	6879      	ldr	r1, [r7, #4]
 801539c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801539e:	440b      	add	r3, r1
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d006      	beq.n	80153b2 <tcp_receive+0x7c6>
 80153a4:	4b36      	ldr	r3, [pc, #216]	; (8015480 <tcp_receive+0x894>)
 80153a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80153aa:	4936      	ldr	r1, [pc, #216]	; (8015484 <tcp_receive+0x898>)
 80153ac:	4836      	ldr	r0, [pc, #216]	; (8015488 <tcp_receive+0x89c>)
 80153ae:	f005 ff3b 	bl	801b228 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f000 80e7 	beq.w	801558a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80153bc:	4b2e      	ldr	r3, [pc, #184]	; (8015478 <tcp_receive+0x88c>)
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	899b      	ldrh	r3, [r3, #12]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7fa fc89 	bl	800fcdc <lwip_htons>
 80153ca:	4603      	mov	r3, r0
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	f003 0301 	and.w	r3, r3, #1
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d010      	beq.n	80153f8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80153d6:	e00a      	b.n	80153ee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	f7fd fce2 	bl	8012db2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d1f0      	bne.n	80153d8 <tcp_receive+0x7ec>
 80153f6:	e0c8      	b.n	801558a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80153fe:	e052      	b.n	80154a6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015402:	68db      	ldr	r3, [r3, #12]
 8015404:	899b      	ldrh	r3, [r3, #12]
 8015406:	b29b      	uxth	r3, r3
 8015408:	4618      	mov	r0, r3
 801540a:	f7fa fc67 	bl	800fcdc <lwip_htons>
 801540e:	4603      	mov	r3, r0
 8015410:	b2db      	uxtb	r3, r3
 8015412:	f003 0301 	and.w	r3, r3, #1
 8015416:	2b00      	cmp	r3, #0
 8015418:	d03d      	beq.n	8015496 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801541a:	4b17      	ldr	r3, [pc, #92]	; (8015478 <tcp_receive+0x88c>)
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	899b      	ldrh	r3, [r3, #12]
 8015420:	b29b      	uxth	r3, r3
 8015422:	4618      	mov	r0, r3
 8015424:	f7fa fc5a 	bl	800fcdc <lwip_htons>
 8015428:	4603      	mov	r3, r0
 801542a:	b2db      	uxtb	r3, r3
 801542c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015430:	2b00      	cmp	r3, #0
 8015432:	d130      	bne.n	8015496 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015434:	4b10      	ldr	r3, [pc, #64]	; (8015478 <tcp_receive+0x88c>)
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	899b      	ldrh	r3, [r3, #12]
 801543a:	b29c      	uxth	r4, r3
 801543c:	2001      	movs	r0, #1
 801543e:	f7fa fc4d 	bl	800fcdc <lwip_htons>
 8015442:	4603      	mov	r3, r0
 8015444:	461a      	mov	r2, r3
 8015446:	4b0c      	ldr	r3, [pc, #48]	; (8015478 <tcp_receive+0x88c>)
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	4322      	orrs	r2, r4
 801544c:	b292      	uxth	r2, r2
 801544e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015450:	4b09      	ldr	r3, [pc, #36]	; (8015478 <tcp_receive+0x88c>)
 8015452:	891c      	ldrh	r4, [r3, #8]
 8015454:	4b08      	ldr	r3, [pc, #32]	; (8015478 <tcp_receive+0x88c>)
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	899b      	ldrh	r3, [r3, #12]
 801545a:	b29b      	uxth	r3, r3
 801545c:	4618      	mov	r0, r3
 801545e:	f7fa fc3d 	bl	800fcdc <lwip_htons>
 8015462:	4603      	mov	r3, r0
 8015464:	b2db      	uxtb	r3, r3
 8015466:	f003 0303 	and.w	r3, r3, #3
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00e      	beq.n	801548c <tcp_receive+0x8a0>
 801546e:	2301      	movs	r3, #1
 8015470:	e00d      	b.n	801548e <tcp_receive+0x8a2>
 8015472:	bf00      	nop
 8015474:	20007084 	.word	0x20007084
 8015478:	20007064 	.word	0x20007064
 801547c:	2000708e 	.word	0x2000708e
 8015480:	0801f478 	.word	0x0801f478
 8015484:	0801f820 	.word	0x0801f820
 8015488:	0801f4c4 	.word	0x0801f4c4
 801548c:	2300      	movs	r3, #0
 801548e:	4423      	add	r3, r4
 8015490:	b29a      	uxth	r2, r3
 8015492:	4b98      	ldr	r3, [pc, #608]	; (80156f4 <tcp_receive+0xb08>)
 8015494:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015498:	613b      	str	r3, [r7, #16]
              next = next->next;
 801549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80154a0:	6938      	ldr	r0, [r7, #16]
 80154a2:	f7fd fc86 	bl	8012db2 <tcp_seg_free>
            while (next &&
 80154a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d00e      	beq.n	80154ca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80154ac:	4b91      	ldr	r3, [pc, #580]	; (80156f4 <tcp_receive+0xb08>)
 80154ae:	881b      	ldrh	r3, [r3, #0]
 80154b0:	461a      	mov	r2, r3
 80154b2:	4b91      	ldr	r3, [pc, #580]	; (80156f8 <tcp_receive+0xb0c>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	441a      	add	r2, r3
 80154b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ba:	68db      	ldr	r3, [r3, #12]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80154c0:	8909      	ldrh	r1, [r1, #8]
 80154c2:	440b      	add	r3, r1
 80154c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	da9a      	bge.n	8015400 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80154ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d059      	beq.n	8015584 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80154d0:	4b88      	ldr	r3, [pc, #544]	; (80156f4 <tcp_receive+0xb08>)
 80154d2:	881b      	ldrh	r3, [r3, #0]
 80154d4:	461a      	mov	r2, r3
 80154d6:	4b88      	ldr	r3, [pc, #544]	; (80156f8 <tcp_receive+0xb0c>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	441a      	add	r2, r3
 80154dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	dd4d      	ble.n	8015584 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80154e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ea:	68db      	ldr	r3, [r3, #12]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	b29a      	uxth	r2, r3
 80154f0:	4b81      	ldr	r3, [pc, #516]	; (80156f8 <tcp_receive+0xb0c>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	4b80      	ldr	r3, [pc, #512]	; (80156fc <tcp_receive+0xb10>)
 80154fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154fe:	4b7f      	ldr	r3, [pc, #508]	; (80156fc <tcp_receive+0xb10>)
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	899b      	ldrh	r3, [r3, #12]
 8015504:	b29b      	uxth	r3, r3
 8015506:	4618      	mov	r0, r3
 8015508:	f7fa fbe8 	bl	800fcdc <lwip_htons>
 801550c:	4603      	mov	r3, r0
 801550e:	b2db      	uxtb	r3, r3
 8015510:	f003 0302 	and.w	r3, r3, #2
 8015514:	2b00      	cmp	r3, #0
 8015516:	d005      	beq.n	8015524 <tcp_receive+0x938>
                inseg.len -= 1;
 8015518:	4b78      	ldr	r3, [pc, #480]	; (80156fc <tcp_receive+0xb10>)
 801551a:	891b      	ldrh	r3, [r3, #8]
 801551c:	3b01      	subs	r3, #1
 801551e:	b29a      	uxth	r2, r3
 8015520:	4b76      	ldr	r3, [pc, #472]	; (80156fc <tcp_receive+0xb10>)
 8015522:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015524:	4b75      	ldr	r3, [pc, #468]	; (80156fc <tcp_receive+0xb10>)
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	4a74      	ldr	r2, [pc, #464]	; (80156fc <tcp_receive+0xb10>)
 801552a:	8912      	ldrh	r2, [r2, #8]
 801552c:	4611      	mov	r1, r2
 801552e:	4618      	mov	r0, r3
 8015530:	f7fb fe54 	bl	80111dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015534:	4b71      	ldr	r3, [pc, #452]	; (80156fc <tcp_receive+0xb10>)
 8015536:	891c      	ldrh	r4, [r3, #8]
 8015538:	4b70      	ldr	r3, [pc, #448]	; (80156fc <tcp_receive+0xb10>)
 801553a:	68db      	ldr	r3, [r3, #12]
 801553c:	899b      	ldrh	r3, [r3, #12]
 801553e:	b29b      	uxth	r3, r3
 8015540:	4618      	mov	r0, r3
 8015542:	f7fa fbcb 	bl	800fcdc <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	b2db      	uxtb	r3, r3
 801554a:	f003 0303 	and.w	r3, r3, #3
 801554e:	2b00      	cmp	r3, #0
 8015550:	d001      	beq.n	8015556 <tcp_receive+0x96a>
 8015552:	2301      	movs	r3, #1
 8015554:	e000      	b.n	8015558 <tcp_receive+0x96c>
 8015556:	2300      	movs	r3, #0
 8015558:	4423      	add	r3, r4
 801555a:	b29a      	uxth	r2, r3
 801555c:	4b65      	ldr	r3, [pc, #404]	; (80156f4 <tcp_receive+0xb08>)
 801555e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015560:	4b64      	ldr	r3, [pc, #400]	; (80156f4 <tcp_receive+0xb08>)
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	461a      	mov	r2, r3
 8015566:	4b64      	ldr	r3, [pc, #400]	; (80156f8 <tcp_receive+0xb0c>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	441a      	add	r2, r3
 801556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	429a      	cmp	r2, r3
 8015574:	d006      	beq.n	8015584 <tcp_receive+0x998>
 8015576:	4b62      	ldr	r3, [pc, #392]	; (8015700 <tcp_receive+0xb14>)
 8015578:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801557c:	4961      	ldr	r1, [pc, #388]	; (8015704 <tcp_receive+0xb18>)
 801557e:	4862      	ldr	r0, [pc, #392]	; (8015708 <tcp_receive+0xb1c>)
 8015580:	f005 fe52 	bl	801b228 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015588:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801558a:	4b5a      	ldr	r3, [pc, #360]	; (80156f4 <tcp_receive+0xb08>)
 801558c:	881b      	ldrh	r3, [r3, #0]
 801558e:	461a      	mov	r2, r3
 8015590:	4b59      	ldr	r3, [pc, #356]	; (80156f8 <tcp_receive+0xb0c>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	441a      	add	r2, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801559e:	4b55      	ldr	r3, [pc, #340]	; (80156f4 <tcp_receive+0xb08>)
 80155a0:	881b      	ldrh	r3, [r3, #0]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d206      	bcs.n	80155b4 <tcp_receive+0x9c8>
 80155a6:	4b56      	ldr	r3, [pc, #344]	; (8015700 <tcp_receive+0xb14>)
 80155a8:	f240 6207 	movw	r2, #1543	; 0x607
 80155ac:	4957      	ldr	r1, [pc, #348]	; (801570c <tcp_receive+0xb20>)
 80155ae:	4856      	ldr	r0, [pc, #344]	; (8015708 <tcp_receive+0xb1c>)
 80155b0:	f005 fe3a 	bl	801b228 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155b8:	4b4e      	ldr	r3, [pc, #312]	; (80156f4 <tcp_receive+0xb08>)
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	1ad3      	subs	r3, r2, r3
 80155be:	b29a      	uxth	r2, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7fc fdb3 	bl	8012130 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80155ca:	4b4c      	ldr	r3, [pc, #304]	; (80156fc <tcp_receive+0xb10>)
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	891b      	ldrh	r3, [r3, #8]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d006      	beq.n	80155e2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80155d4:	4b49      	ldr	r3, [pc, #292]	; (80156fc <tcp_receive+0xb10>)
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	4a4d      	ldr	r2, [pc, #308]	; (8015710 <tcp_receive+0xb24>)
 80155da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80155dc:	4b47      	ldr	r3, [pc, #284]	; (80156fc <tcp_receive+0xb10>)
 80155de:	2200      	movs	r2, #0
 80155e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155e2:	4b46      	ldr	r3, [pc, #280]	; (80156fc <tcp_receive+0xb10>)
 80155e4:	68db      	ldr	r3, [r3, #12]
 80155e6:	899b      	ldrh	r3, [r3, #12]
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fa fb76 	bl	800fcdc <lwip_htons>
 80155f0:	4603      	mov	r3, r0
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	f003 0301 	and.w	r3, r3, #1
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	f000 80b8 	beq.w	801576e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80155fe:	4b45      	ldr	r3, [pc, #276]	; (8015714 <tcp_receive+0xb28>)
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	f043 0320 	orr.w	r3, r3, #32
 8015606:	b2da      	uxtb	r2, r3
 8015608:	4b42      	ldr	r3, [pc, #264]	; (8015714 <tcp_receive+0xb28>)
 801560a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801560c:	e0af      	b.n	801576e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015612:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	4a36      	ldr	r2, [pc, #216]	; (80156f8 <tcp_receive+0xb0c>)
 801561e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	891b      	ldrh	r3, [r3, #8]
 8015624:	461c      	mov	r4, r3
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	899b      	ldrh	r3, [r3, #12]
 801562c:	b29b      	uxth	r3, r3
 801562e:	4618      	mov	r0, r3
 8015630:	f7fa fb54 	bl	800fcdc <lwip_htons>
 8015634:	4603      	mov	r3, r0
 8015636:	b2db      	uxtb	r3, r3
 8015638:	f003 0303 	and.w	r3, r3, #3
 801563c:	2b00      	cmp	r3, #0
 801563e:	d001      	beq.n	8015644 <tcp_receive+0xa58>
 8015640:	2301      	movs	r3, #1
 8015642:	e000      	b.n	8015646 <tcp_receive+0xa5a>
 8015644:	2300      	movs	r3, #0
 8015646:	191a      	adds	r2, r3, r4
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564c:	441a      	add	r2, r3
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015656:	461c      	mov	r4, r3
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	891b      	ldrh	r3, [r3, #8]
 801565c:	461d      	mov	r5, r3
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	899b      	ldrh	r3, [r3, #12]
 8015664:	b29b      	uxth	r3, r3
 8015666:	4618      	mov	r0, r3
 8015668:	f7fa fb38 	bl	800fcdc <lwip_htons>
 801566c:	4603      	mov	r3, r0
 801566e:	b2db      	uxtb	r3, r3
 8015670:	f003 0303 	and.w	r3, r3, #3
 8015674:	2b00      	cmp	r3, #0
 8015676:	d001      	beq.n	801567c <tcp_receive+0xa90>
 8015678:	2301      	movs	r3, #1
 801567a:	e000      	b.n	801567e <tcp_receive+0xa92>
 801567c:	2300      	movs	r3, #0
 801567e:	442b      	add	r3, r5
 8015680:	429c      	cmp	r4, r3
 8015682:	d206      	bcs.n	8015692 <tcp_receive+0xaa6>
 8015684:	4b1e      	ldr	r3, [pc, #120]	; (8015700 <tcp_receive+0xb14>)
 8015686:	f240 622b 	movw	r2, #1579	; 0x62b
 801568a:	4923      	ldr	r1, [pc, #140]	; (8015718 <tcp_receive+0xb2c>)
 801568c:	481e      	ldr	r0, [pc, #120]	; (8015708 <tcp_receive+0xb1c>)
 801568e:	f005 fdcb 	bl	801b228 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	891b      	ldrh	r3, [r3, #8]
 8015696:	461c      	mov	r4, r3
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	899b      	ldrh	r3, [r3, #12]
 801569e:	b29b      	uxth	r3, r3
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7fa fb1b 	bl	800fcdc <lwip_htons>
 80156a6:	4603      	mov	r3, r0
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	f003 0303 	and.w	r3, r3, #3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <tcp_receive+0xaca>
 80156b2:	2301      	movs	r3, #1
 80156b4:	e000      	b.n	80156b8 <tcp_receive+0xacc>
 80156b6:	2300      	movs	r3, #0
 80156b8:	1919      	adds	r1, r3, r4
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80156be:	b28b      	uxth	r3, r1
 80156c0:	1ad3      	subs	r3, r2, r3
 80156c2:	b29a      	uxth	r2, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7fc fd31 	bl	8012130 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	891b      	ldrh	r3, [r3, #8]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d028      	beq.n	801572a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80156d8:	4b0d      	ldr	r3, [pc, #52]	; (8015710 <tcp_receive+0xb24>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d01d      	beq.n	801571c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80156e0:	4b0b      	ldr	r3, [pc, #44]	; (8015710 <tcp_receive+0xb24>)
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	4619      	mov	r1, r3
 80156ea:	4610      	mov	r0, r2
 80156ec:	f7fb ffbc 	bl	8011668 <pbuf_cat>
 80156f0:	e018      	b.n	8015724 <tcp_receive+0xb38>
 80156f2:	bf00      	nop
 80156f4:	2000708e 	.word	0x2000708e
 80156f8:	20007084 	.word	0x20007084
 80156fc:	20007064 	.word	0x20007064
 8015700:	0801f478 	.word	0x0801f478
 8015704:	0801f858 	.word	0x0801f858
 8015708:	0801f4c4 	.word	0x0801f4c4
 801570c:	0801f894 	.word	0x0801f894
 8015710:	20007094 	.word	0x20007094
 8015714:	20007091 	.word	0x20007091
 8015718:	0801f8b4 	.word	0x0801f8b4
            } else {
              recv_data = cseg->p;
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	4a70      	ldr	r2, [pc, #448]	; (80158e4 <tcp_receive+0xcf8>)
 8015722:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	2200      	movs	r2, #0
 8015728:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	899b      	ldrh	r3, [r3, #12]
 8015730:	b29b      	uxth	r3, r3
 8015732:	4618      	mov	r0, r3
 8015734:	f7fa fad2 	bl	800fcdc <lwip_htons>
 8015738:	4603      	mov	r3, r0
 801573a:	b2db      	uxtb	r3, r3
 801573c:	f003 0301 	and.w	r3, r3, #1
 8015740:	2b00      	cmp	r3, #0
 8015742:	d00d      	beq.n	8015760 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015744:	4b68      	ldr	r3, [pc, #416]	; (80158e8 <tcp_receive+0xcfc>)
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	f043 0320 	orr.w	r3, r3, #32
 801574c:	b2da      	uxtb	r2, r3
 801574e:	4b66      	ldr	r3, [pc, #408]	; (80158e8 <tcp_receive+0xcfc>)
 8015750:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	7d1b      	ldrb	r3, [r3, #20]
 8015756:	2b04      	cmp	r3, #4
 8015758:	d102      	bne.n	8015760 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2207      	movs	r2, #7
 801575e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015768:	68b8      	ldr	r0, [r7, #8]
 801576a:	f7fd fb22 	bl	8012db2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015772:	2b00      	cmp	r3, #0
 8015774:	d008      	beq.n	8015788 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	685a      	ldr	r2, [r3, #4]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015782:	429a      	cmp	r2, r3
 8015784:	f43f af43 	beq.w	801560e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	8b5b      	ldrh	r3, [r3, #26]
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00e      	beq.n	80157b2 <tcp_receive+0xbc6>
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	8b5b      	ldrh	r3, [r3, #26]
 8015798:	f023 0301 	bic.w	r3, r3, #1
 801579c:	b29a      	uxth	r2, r3
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	835a      	strh	r2, [r3, #26]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	8b5b      	ldrh	r3, [r3, #26]
 80157a6:	f043 0302 	orr.w	r3, r3, #2
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80157b0:	e188      	b.n	8015ac4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	8b5b      	ldrh	r3, [r3, #26]
 80157b6:	f043 0301 	orr.w	r3, r3, #1
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80157c0:	e180      	b.n	8015ac4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d106      	bne.n	80157d8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80157ca:	4848      	ldr	r0, [pc, #288]	; (80158ec <tcp_receive+0xd00>)
 80157cc:	f7fd fb0a 	bl	8012de4 <tcp_seg_copy>
 80157d0:	4602      	mov	r2, r0
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	675a      	str	r2, [r3, #116]	; 0x74
 80157d6:	e16d      	b.n	8015ab4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80157d8:	2300      	movs	r3, #0
 80157da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80157e2:	e157      	b.n	8015a94 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80157e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	685a      	ldr	r2, [r3, #4]
 80157ea:	4b41      	ldr	r3, [pc, #260]	; (80158f0 <tcp_receive+0xd04>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d11d      	bne.n	801582e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80157f2:	4b3e      	ldr	r3, [pc, #248]	; (80158ec <tcp_receive+0xd00>)
 80157f4:	891a      	ldrh	r2, [r3, #8]
 80157f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157f8:	891b      	ldrh	r3, [r3, #8]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	f240 814f 	bls.w	8015a9e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015800:	483a      	ldr	r0, [pc, #232]	; (80158ec <tcp_receive+0xd00>)
 8015802:	f7fd faef 	bl	8012de4 <tcp_seg_copy>
 8015806:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	2b00      	cmp	r3, #0
 801580c:	f000 8149 	beq.w	8015aa2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015812:	2b00      	cmp	r3, #0
 8015814:	d003      	beq.n	801581e <tcp_receive+0xc32>
                    prev->next = cseg;
 8015816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015818:	697a      	ldr	r2, [r7, #20]
 801581a:	601a      	str	r2, [r3, #0]
 801581c:	e002      	b.n	8015824 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	697a      	ldr	r2, [r7, #20]
 8015822:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015826:	6978      	ldr	r0, [r7, #20]
 8015828:	f7ff f8dc 	bl	80149e4 <tcp_oos_insert_segment>
                }
                break;
 801582c:	e139      	b.n	8015aa2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015830:	2b00      	cmp	r3, #0
 8015832:	d117      	bne.n	8015864 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015834:	4b2e      	ldr	r3, [pc, #184]	; (80158f0 <tcp_receive+0xd04>)
 8015836:	681a      	ldr	r2, [r3, #0]
 8015838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	1ad3      	subs	r3, r2, r3
 8015840:	2b00      	cmp	r3, #0
 8015842:	da57      	bge.n	80158f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015844:	4829      	ldr	r0, [pc, #164]	; (80158ec <tcp_receive+0xd00>)
 8015846:	f7fd facd 	bl	8012de4 <tcp_seg_copy>
 801584a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801584c:	69bb      	ldr	r3, [r7, #24]
 801584e:	2b00      	cmp	r3, #0
 8015850:	f000 8129 	beq.w	8015aa6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	69ba      	ldr	r2, [r7, #24]
 8015858:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801585a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801585c:	69b8      	ldr	r0, [r7, #24]
 801585e:	f7ff f8c1 	bl	80149e4 <tcp_oos_insert_segment>
                  }
                  break;
 8015862:	e120      	b.n	8015aa6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015864:	4b22      	ldr	r3, [pc, #136]	; (80158f0 <tcp_receive+0xd04>)
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	685b      	ldr	r3, [r3, #4]
 801586e:	1ad3      	subs	r3, r2, r3
 8015870:	3b01      	subs	r3, #1
 8015872:	2b00      	cmp	r3, #0
 8015874:	db3e      	blt.n	80158f4 <tcp_receive+0xd08>
 8015876:	4b1e      	ldr	r3, [pc, #120]	; (80158f0 <tcp_receive+0xd04>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	3301      	adds	r3, #1
 8015884:	2b00      	cmp	r3, #0
 8015886:	dc35      	bgt.n	80158f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015888:	4818      	ldr	r0, [pc, #96]	; (80158ec <tcp_receive+0xd00>)
 801588a:	f7fd faab 	bl	8012de4 <tcp_seg_copy>
 801588e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	2b00      	cmp	r3, #0
 8015894:	f000 8109 	beq.w	8015aaa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158a0:	8912      	ldrh	r2, [r2, #8]
 80158a2:	441a      	add	r2, r3
 80158a4:	4b12      	ldr	r3, [pc, #72]	; (80158f0 <tcp_receive+0xd04>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	1ad3      	subs	r3, r2, r3
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	dd12      	ble.n	80158d4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80158ae:	4b10      	ldr	r3, [pc, #64]	; (80158f0 <tcp_receive+0xd04>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	b29a      	uxth	r2, r3
 80158b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	1ad3      	subs	r3, r2, r3
 80158be:	b29a      	uxth	r2, r3
 80158c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80158c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158c6:	685a      	ldr	r2, [r3, #4]
 80158c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158ca:	891b      	ldrh	r3, [r3, #8]
 80158cc:	4619      	mov	r1, r3
 80158ce:	4610      	mov	r0, r2
 80158d0:	f7fb fc84 	bl	80111dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80158d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158d6:	69fa      	ldr	r2, [r7, #28]
 80158d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80158da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158dc:	69f8      	ldr	r0, [r7, #28]
 80158de:	f7ff f881 	bl	80149e4 <tcp_oos_insert_segment>
                  }
                  break;
 80158e2:	e0e2      	b.n	8015aaa <tcp_receive+0xebe>
 80158e4:	20007094 	.word	0x20007094
 80158e8:	20007091 	.word	0x20007091
 80158ec:	20007064 	.word	0x20007064
 80158f0:	20007084 	.word	0x20007084
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80158f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80158f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f040 80c6 	bne.w	8015a8e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015902:	4b80      	ldr	r3, [pc, #512]	; (8015b04 <tcp_receive+0xf18>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801590e:	2b00      	cmp	r3, #0
 8015910:	f340 80bd 	ble.w	8015a8e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	899b      	ldrh	r3, [r3, #12]
 801591a:	b29b      	uxth	r3, r3
 801591c:	4618      	mov	r0, r3
 801591e:	f7fa f9dd 	bl	800fcdc <lwip_htons>
 8015922:	4603      	mov	r3, r0
 8015924:	b2db      	uxtb	r3, r3
 8015926:	f003 0301 	and.w	r3, r3, #1
 801592a:	2b00      	cmp	r3, #0
 801592c:	f040 80bf 	bne.w	8015aae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015930:	4875      	ldr	r0, [pc, #468]	; (8015b08 <tcp_receive+0xf1c>)
 8015932:	f7fd fa57 	bl	8012de4 <tcp_seg_copy>
 8015936:	4602      	mov	r2, r0
 8015938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	f000 80b6 	beq.w	8015ab2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015948:	68db      	ldr	r3, [r3, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801594e:	8912      	ldrh	r2, [r2, #8]
 8015950:	441a      	add	r2, r3
 8015952:	4b6c      	ldr	r3, [pc, #432]	; (8015b04 <tcp_receive+0xf18>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	1ad3      	subs	r3, r2, r3
 8015958:	2b00      	cmp	r3, #0
 801595a:	dd12      	ble.n	8015982 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801595c:	4b69      	ldr	r3, [pc, #420]	; (8015b04 <tcp_receive+0xf18>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	b29a      	uxth	r2, r3
 8015962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	b29b      	uxth	r3, r3
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	b29a      	uxth	r2, r3
 801596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015970:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015974:	685a      	ldr	r2, [r3, #4]
 8015976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015978:	891b      	ldrh	r3, [r3, #8]
 801597a:	4619      	mov	r1, r3
 801597c:	4610      	mov	r0, r2
 801597e:	f7fb fc2d 	bl	80111dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015982:	4b62      	ldr	r3, [pc, #392]	; (8015b0c <tcp_receive+0xf20>)
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	461a      	mov	r2, r3
 8015988:	4b5e      	ldr	r3, [pc, #376]	; (8015b04 <tcp_receive+0xf18>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	441a      	add	r2, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015992:	6879      	ldr	r1, [r7, #4]
 8015994:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015996:	440b      	add	r3, r1
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	2b00      	cmp	r3, #0
 801599c:	f340 8089 	ble.w	8015ab2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80159a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	899b      	ldrh	r3, [r3, #12]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7fa f996 	bl	800fcdc <lwip_htons>
 80159b0:	4603      	mov	r3, r0
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d022      	beq.n	8015a02 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80159bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	899b      	ldrh	r3, [r3, #12]
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	b21b      	sxth	r3, r3
 80159c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80159cc:	b21c      	sxth	r4, r3
 80159ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	899b      	ldrh	r3, [r3, #12]
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	4618      	mov	r0, r3
 80159da:	f7fa f97f 	bl	800fcdc <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fa f976 	bl	800fcdc <lwip_htons>
 80159f0:	4603      	mov	r3, r0
 80159f2:	b21b      	sxth	r3, r3
 80159f4:	4323      	orrs	r3, r4
 80159f6:	b21a      	sxth	r2, r3
 80159f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	b292      	uxth	r2, r2
 8015a00:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b299      	uxth	r1, r3
 8015a10:	4b3c      	ldr	r3, [pc, #240]	; (8015b04 <tcp_receive+0xf18>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	1a8a      	subs	r2, r1, r2
 8015a1c:	b292      	uxth	r2, r2
 8015a1e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	685a      	ldr	r2, [r3, #4]
 8015a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	891b      	ldrh	r3, [r3, #8]
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	4610      	mov	r0, r2
 8015a30:	f7fb fbd4 	bl	80111dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	891c      	ldrh	r4, [r3, #8]
 8015a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	899b      	ldrh	r3, [r3, #12]
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7fa f949 	bl	800fcdc <lwip_htons>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	f003 0303 	and.w	r3, r3, #3
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d001      	beq.n	8015a5a <tcp_receive+0xe6e>
 8015a56:	2301      	movs	r3, #1
 8015a58:	e000      	b.n	8015a5c <tcp_receive+0xe70>
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	4423      	add	r3, r4
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	4b2a      	ldr	r3, [pc, #168]	; (8015b0c <tcp_receive+0xf20>)
 8015a62:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015a64:	4b29      	ldr	r3, [pc, #164]	; (8015b0c <tcp_receive+0xf20>)
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	461a      	mov	r2, r3
 8015a6a:	4b26      	ldr	r3, [pc, #152]	; (8015b04 <tcp_receive+0xf18>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	441a      	add	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a74:	6879      	ldr	r1, [r7, #4]
 8015a76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a78:	440b      	add	r3, r1
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d019      	beq.n	8015ab2 <tcp_receive+0xec6>
 8015a7e:	4b24      	ldr	r3, [pc, #144]	; (8015b10 <tcp_receive+0xf24>)
 8015a80:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015a84:	4923      	ldr	r1, [pc, #140]	; (8015b14 <tcp_receive+0xf28>)
 8015a86:	4824      	ldr	r0, [pc, #144]	; (8015b18 <tcp_receive+0xf2c>)
 8015a88:	f005 fbce 	bl	801b228 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015a8c:	e011      	b.n	8015ab2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f47f aea4 	bne.w	80157e4 <tcp_receive+0xbf8>
 8015a9c:	e00a      	b.n	8015ab4 <tcp_receive+0xec8>
                break;
 8015a9e:	bf00      	nop
 8015aa0:	e008      	b.n	8015ab4 <tcp_receive+0xec8>
                break;
 8015aa2:	bf00      	nop
 8015aa4:	e006      	b.n	8015ab4 <tcp_receive+0xec8>
                  break;
 8015aa6:	bf00      	nop
 8015aa8:	e004      	b.n	8015ab4 <tcp_receive+0xec8>
                  break;
 8015aaa:	bf00      	nop
 8015aac:	e002      	b.n	8015ab4 <tcp_receive+0xec8>
                  break;
 8015aae:	bf00      	nop
 8015ab0:	e000      	b.n	8015ab4 <tcp_receive+0xec8>
                break;
 8015ab2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f001 fe8b 	bl	80177d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015aba:	e003      	b.n	8015ac4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f001 fe87 	bl	80177d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ac2:	e01a      	b.n	8015afa <tcp_receive+0xf0e>
 8015ac4:	e019      	b.n	8015afa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015ac6:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <tcp_receive+0xf18>)
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	db0a      	blt.n	8015aea <tcp_receive+0xefe>
 8015ad4:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <tcp_receive+0xf18>)
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015adc:	6879      	ldr	r1, [r7, #4]
 8015ade:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ae0:	440b      	add	r3, r1
 8015ae2:	1ad3      	subs	r3, r2, r3
 8015ae4:	3301      	adds	r3, #1
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	dd07      	ble.n	8015afa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	8b5b      	ldrh	r3, [r3, #26]
 8015aee:	f043 0302 	orr.w	r3, r3, #2
 8015af2:	b29a      	uxth	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015af8:	e7ff      	b.n	8015afa <tcp_receive+0xf0e>
 8015afa:	bf00      	nop
 8015afc:	3750      	adds	r7, #80	; 0x50
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bdb0      	pop	{r4, r5, r7, pc}
 8015b02:	bf00      	nop
 8015b04:	20007084 	.word	0x20007084
 8015b08:	20007064 	.word	0x20007064
 8015b0c:	2000708e 	.word	0x2000708e
 8015b10:	0801f478 	.word	0x0801f478
 8015b14:	0801f820 	.word	0x0801f820
 8015b18:	0801f4c4 	.word	0x0801f4c4

08015b1c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b083      	sub	sp, #12
 8015b20:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b22:	4b15      	ldr	r3, [pc, #84]	; (8015b78 <tcp_get_next_optbyte+0x5c>)
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	1c5a      	adds	r2, r3, #1
 8015b28:	b291      	uxth	r1, r2
 8015b2a:	4a13      	ldr	r2, [pc, #76]	; (8015b78 <tcp_get_next_optbyte+0x5c>)
 8015b2c:	8011      	strh	r1, [r2, #0]
 8015b2e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b30:	4b12      	ldr	r3, [pc, #72]	; (8015b7c <tcp_get_next_optbyte+0x60>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d004      	beq.n	8015b42 <tcp_get_next_optbyte+0x26>
 8015b38:	4b11      	ldr	r3, [pc, #68]	; (8015b80 <tcp_get_next_optbyte+0x64>)
 8015b3a:	881b      	ldrh	r3, [r3, #0]
 8015b3c:	88fa      	ldrh	r2, [r7, #6]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d208      	bcs.n	8015b54 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b42:	4b10      	ldr	r3, [pc, #64]	; (8015b84 <tcp_get_next_optbyte+0x68>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	3314      	adds	r3, #20
 8015b48:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b4a:	88fb      	ldrh	r3, [r7, #6]
 8015b4c:	683a      	ldr	r2, [r7, #0]
 8015b4e:	4413      	add	r3, r2
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	e00b      	b.n	8015b6c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b54:	88fb      	ldrh	r3, [r7, #6]
 8015b56:	b2da      	uxtb	r2, r3
 8015b58:	4b09      	ldr	r3, [pc, #36]	; (8015b80 <tcp_get_next_optbyte+0x64>)
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015b62:	4b06      	ldr	r3, [pc, #24]	; (8015b7c <tcp_get_next_optbyte+0x60>)
 8015b64:	681a      	ldr	r2, [r3, #0]
 8015b66:	797b      	ldrb	r3, [r7, #5]
 8015b68:	4413      	add	r3, r2
 8015b6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	370c      	adds	r7, #12
 8015b70:	46bd      	mov	sp, r7
 8015b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b76:	4770      	bx	lr
 8015b78:	20007080 	.word	0x20007080
 8015b7c:	2000707c 	.word	0x2000707c
 8015b80:	2000707a 	.word	0x2000707a
 8015b84:	20007074 	.word	0x20007074

08015b88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d106      	bne.n	8015ba4 <tcp_parseopt+0x1c>
 8015b96:	4b32      	ldr	r3, [pc, #200]	; (8015c60 <tcp_parseopt+0xd8>)
 8015b98:	f240 727d 	movw	r2, #1917	; 0x77d
 8015b9c:	4931      	ldr	r1, [pc, #196]	; (8015c64 <tcp_parseopt+0xdc>)
 8015b9e:	4832      	ldr	r0, [pc, #200]	; (8015c68 <tcp_parseopt+0xe0>)
 8015ba0:	f005 fb42 	bl	801b228 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ba4:	4b31      	ldr	r3, [pc, #196]	; (8015c6c <tcp_parseopt+0xe4>)
 8015ba6:	881b      	ldrh	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d056      	beq.n	8015c5a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bac:	4b30      	ldr	r3, [pc, #192]	; (8015c70 <tcp_parseopt+0xe8>)
 8015bae:	2200      	movs	r2, #0
 8015bb0:	801a      	strh	r2, [r3, #0]
 8015bb2:	e046      	b.n	8015c42 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015bb4:	f7ff ffb2 	bl	8015b1c <tcp_get_next_optbyte>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015bbc:	7bfb      	ldrb	r3, [r7, #15]
 8015bbe:	2b02      	cmp	r3, #2
 8015bc0:	d006      	beq.n	8015bd0 <tcp_parseopt+0x48>
 8015bc2:	2b02      	cmp	r3, #2
 8015bc4:	dc2c      	bgt.n	8015c20 <tcp_parseopt+0x98>
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d042      	beq.n	8015c50 <tcp_parseopt+0xc8>
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d128      	bne.n	8015c20 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015bce:	e038      	b.n	8015c42 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015bd0:	f7ff ffa4 	bl	8015b1c <tcp_get_next_optbyte>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b04      	cmp	r3, #4
 8015bd8:	d13c      	bne.n	8015c54 <tcp_parseopt+0xcc>
 8015bda:	4b25      	ldr	r3, [pc, #148]	; (8015c70 <tcp_parseopt+0xe8>)
 8015bdc:	881b      	ldrh	r3, [r3, #0]
 8015bde:	3301      	adds	r3, #1
 8015be0:	4a22      	ldr	r2, [pc, #136]	; (8015c6c <tcp_parseopt+0xe4>)
 8015be2:	8812      	ldrh	r2, [r2, #0]
 8015be4:	4293      	cmp	r3, r2
 8015be6:	da35      	bge.n	8015c54 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015be8:	f7ff ff98 	bl	8015b1c <tcp_get_next_optbyte>
 8015bec:	4603      	mov	r3, r0
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	021b      	lsls	r3, r3, #8
 8015bf2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015bf4:	f7ff ff92 	bl	8015b1c <tcp_get_next_optbyte>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	89bb      	ldrh	r3, [r7, #12]
 8015bfe:	4313      	orrs	r3, r2
 8015c00:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c02:	89bb      	ldrh	r3, [r7, #12]
 8015c04:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	d804      	bhi.n	8015c16 <tcp_parseopt+0x8e>
 8015c0c:	89bb      	ldrh	r3, [r7, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <tcp_parseopt+0x8e>
 8015c12:	89ba      	ldrh	r2, [r7, #12]
 8015c14:	e001      	b.n	8015c1a <tcp_parseopt+0x92>
 8015c16:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015c1e:	e010      	b.n	8015c42 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c20:	f7ff ff7c 	bl	8015b1c <tcp_get_next_optbyte>
 8015c24:	4603      	mov	r3, r0
 8015c26:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c28:	7afb      	ldrb	r3, [r7, #11]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d914      	bls.n	8015c58 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c2e:	7afb      	ldrb	r3, [r7, #11]
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <tcp_parseopt+0xe8>)
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	4413      	add	r3, r2
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	3b02      	subs	r3, #2
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	4b0c      	ldr	r3, [pc, #48]	; (8015c70 <tcp_parseopt+0xe8>)
 8015c40:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c42:	4b0b      	ldr	r3, [pc, #44]	; (8015c70 <tcp_parseopt+0xe8>)
 8015c44:	881a      	ldrh	r2, [r3, #0]
 8015c46:	4b09      	ldr	r3, [pc, #36]	; (8015c6c <tcp_parseopt+0xe4>)
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d3b2      	bcc.n	8015bb4 <tcp_parseopt+0x2c>
 8015c4e:	e004      	b.n	8015c5a <tcp_parseopt+0xd2>
          return;
 8015c50:	bf00      	nop
 8015c52:	e002      	b.n	8015c5a <tcp_parseopt+0xd2>
            return;
 8015c54:	bf00      	nop
 8015c56:	e000      	b.n	8015c5a <tcp_parseopt+0xd2>
            return;
 8015c58:	bf00      	nop
      }
    }
  }
}
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	0801f478 	.word	0x0801f478
 8015c64:	0801f8dc 	.word	0x0801f8dc
 8015c68:	0801f4c4 	.word	0x0801f4c4
 8015c6c:	20007078 	.word	0x20007078
 8015c70:	20007080 	.word	0x20007080

08015c74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015c74:	b480      	push	{r7}
 8015c76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015c78:	4b05      	ldr	r3, [pc, #20]	; (8015c90 <tcp_trigger_input_pcb_close+0x1c>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f043 0310 	orr.w	r3, r3, #16
 8015c80:	b2da      	uxtb	r2, r3
 8015c82:	4b03      	ldr	r3, [pc, #12]	; (8015c90 <tcp_trigger_input_pcb_close+0x1c>)
 8015c84:	701a      	strb	r2, [r3, #0]
}
 8015c86:	bf00      	nop
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8e:	4770      	bx	lr
 8015c90:	20007091 	.word	0x20007091

08015c94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00a      	beq.n	8015cbc <tcp_route+0x28>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	7a1b      	ldrb	r3, [r3, #8]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d006      	beq.n	8015cbc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	7a1b      	ldrb	r3, [r3, #8]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fb f8b6 	bl	8010e24 <netif_get_by_index>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	e003      	b.n	8015cc4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f003 fafb 	bl	80192b8 <ip4_route>
 8015cc2:	4603      	mov	r3, r0
  }
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3710      	adds	r7, #16
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}

08015ccc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015ccc:	b590      	push	{r4, r7, lr}
 8015cce:	b087      	sub	sp, #28
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	60b9      	str	r1, [r7, #8]
 8015cd6:	603b      	str	r3, [r7, #0]
 8015cd8:	4613      	mov	r3, r2
 8015cda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <tcp_create_segment+0x22>
 8015ce2:	4b44      	ldr	r3, [pc, #272]	; (8015df4 <tcp_create_segment+0x128>)
 8015ce4:	22a3      	movs	r2, #163	; 0xa3
 8015ce6:	4944      	ldr	r1, [pc, #272]	; (8015df8 <tcp_create_segment+0x12c>)
 8015ce8:	4844      	ldr	r0, [pc, #272]	; (8015dfc <tcp_create_segment+0x130>)
 8015cea:	f005 fa9d 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d105      	bne.n	8015d00 <tcp_create_segment+0x34>
 8015cf4:	4b3f      	ldr	r3, [pc, #252]	; (8015df4 <tcp_create_segment+0x128>)
 8015cf6:	22a4      	movs	r2, #164	; 0xa4
 8015cf8:	4941      	ldr	r1, [pc, #260]	; (8015e00 <tcp_create_segment+0x134>)
 8015cfa:	4840      	ldr	r0, [pc, #256]	; (8015dfc <tcp_create_segment+0x130>)
 8015cfc:	f005 fa94 	bl	801b228 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d04:	009b      	lsls	r3, r3, #2
 8015d06:	b2db      	uxtb	r3, r3
 8015d08:	f003 0304 	and.w	r3, r3, #4
 8015d0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d0e:	2003      	movs	r0, #3
 8015d10:	f7fa fd02 	bl	8010718 <memp_malloc>
 8015d14:	6138      	str	r0, [r7, #16]
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d104      	bne.n	8015d26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d1c:	68b8      	ldr	r0, [r7, #8]
 8015d1e:	f7fb fbe1 	bl	80114e4 <pbuf_free>
    return NULL;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e061      	b.n	8015dea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	2200      	movs	r2, #0
 8015d32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	68ba      	ldr	r2, [r7, #8]
 8015d38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	891a      	ldrh	r2, [r3, #8]
 8015d3e:	7dfb      	ldrb	r3, [r7, #23]
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d205      	bcs.n	8015d52 <tcp_create_segment+0x86>
 8015d46:	4b2b      	ldr	r3, [pc, #172]	; (8015df4 <tcp_create_segment+0x128>)
 8015d48:	22b0      	movs	r2, #176	; 0xb0
 8015d4a:	492e      	ldr	r1, [pc, #184]	; (8015e04 <tcp_create_segment+0x138>)
 8015d4c:	482b      	ldr	r0, [pc, #172]	; (8015dfc <tcp_create_segment+0x130>)
 8015d4e:	f005 fa6b 	bl	801b228 <iprintf>
  seg->len = p->tot_len - optlen;
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	891a      	ldrh	r2, [r3, #8]
 8015d56:	7dfb      	ldrb	r3, [r7, #23]
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	1ad3      	subs	r3, r2, r3
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015d62:	2114      	movs	r1, #20
 8015d64:	68b8      	ldr	r0, [r7, #8]
 8015d66:	f7fb fb27 	bl	80113b8 <pbuf_add_header>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d004      	beq.n	8015d7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015d70:	6938      	ldr	r0, [r7, #16]
 8015d72:	f7fd f81e 	bl	8012db2 <tcp_seg_free>
    return NULL;
 8015d76:	2300      	movs	r3, #0
 8015d78:	e037      	b.n	8015dea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	685b      	ldr	r3, [r3, #4]
 8015d7e:	685a      	ldr	r2, [r3, #4]
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	8ada      	ldrh	r2, [r3, #22]
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	68dc      	ldr	r4, [r3, #12]
 8015d8c:	4610      	mov	r0, r2
 8015d8e:	f7f9 ffa5 	bl	800fcdc <lwip_htons>
 8015d92:	4603      	mov	r3, r0
 8015d94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	8b1a      	ldrh	r2, [r3, #24]
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	68dc      	ldr	r4, [r3, #12]
 8015d9e:	4610      	mov	r0, r2
 8015da0:	f7f9 ff9c 	bl	800fcdc <lwip_htons>
 8015da4:	4603      	mov	r3, r0
 8015da6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	68dc      	ldr	r4, [r3, #12]
 8015dac:	6838      	ldr	r0, [r7, #0]
 8015dae:	f7f9 ffaa 	bl	800fd06 <lwip_htonl>
 8015db2:	4603      	mov	r3, r0
 8015db4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015db6:	7dfb      	ldrb	r3, [r7, #23]
 8015db8:	089b      	lsrs	r3, r3, #2
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	b29b      	uxth	r3, r3
 8015dbe:	3305      	adds	r3, #5
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	031b      	lsls	r3, r3, #12
 8015dc4:	b29a      	uxth	r2, r3
 8015dc6:	79fb      	ldrb	r3, [r7, #7]
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	4313      	orrs	r3, r2
 8015dcc:	b29a      	uxth	r2, r3
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	68dc      	ldr	r4, [r3, #12]
 8015dd2:	4610      	mov	r0, r2
 8015dd4:	f7f9 ff82 	bl	800fcdc <lwip_htons>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	2200      	movs	r2, #0
 8015de2:	749a      	strb	r2, [r3, #18]
 8015de4:	2200      	movs	r2, #0
 8015de6:	74da      	strb	r2, [r3, #19]
  return seg;
 8015de8:	693b      	ldr	r3, [r7, #16]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	371c      	adds	r7, #28
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd90      	pop	{r4, r7, pc}
 8015df2:	bf00      	nop
 8015df4:	0801f8f8 	.word	0x0801f8f8
 8015df8:	0801f92c 	.word	0x0801f92c
 8015dfc:	0801f94c 	.word	0x0801f94c
 8015e00:	0801f974 	.word	0x0801f974
 8015e04:	0801f998 	.word	0x0801f998

08015e08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b086      	sub	sp, #24
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	607b      	str	r3, [r7, #4]
 8015e10:	4603      	mov	r3, r0
 8015e12:	73fb      	strb	r3, [r7, #15]
 8015e14:	460b      	mov	r3, r1
 8015e16:	81bb      	strh	r3, [r7, #12]
 8015e18:	4613      	mov	r3, r2
 8015e1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015e1c:	89bb      	ldrh	r3, [r7, #12]
 8015e1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d105      	bne.n	8015e32 <tcp_pbuf_prealloc+0x2a>
 8015e26:	4b30      	ldr	r3, [pc, #192]	; (8015ee8 <tcp_pbuf_prealloc+0xe0>)
 8015e28:	22e8      	movs	r2, #232	; 0xe8
 8015e2a:	4930      	ldr	r1, [pc, #192]	; (8015eec <tcp_pbuf_prealloc+0xe4>)
 8015e2c:	4830      	ldr	r0, [pc, #192]	; (8015ef0 <tcp_pbuf_prealloc+0xe8>)
 8015e2e:	f005 f9fb 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015e32:	6a3b      	ldr	r3, [r7, #32]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d105      	bne.n	8015e44 <tcp_pbuf_prealloc+0x3c>
 8015e38:	4b2b      	ldr	r3, [pc, #172]	; (8015ee8 <tcp_pbuf_prealloc+0xe0>)
 8015e3a:	22e9      	movs	r2, #233	; 0xe9
 8015e3c:	492d      	ldr	r1, [pc, #180]	; (8015ef4 <tcp_pbuf_prealloc+0xec>)
 8015e3e:	482c      	ldr	r0, [pc, #176]	; (8015ef0 <tcp_pbuf_prealloc+0xe8>)
 8015e40:	f005 f9f2 	bl	801b228 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e44:	89ba      	ldrh	r2, [r7, #12]
 8015e46:	897b      	ldrh	r3, [r7, #10]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	d221      	bcs.n	8015e90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e50:	f003 0302 	and.w	r3, r3, #2
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d111      	bne.n	8015e7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e58:	6a3b      	ldr	r3, [r7, #32]
 8015e5a:	8b5b      	ldrh	r3, [r3, #26]
 8015e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d115      	bne.n	8015e90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015e64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d007      	beq.n	8015e7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015e6c:	6a3b      	ldr	r3, [r7, #32]
 8015e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d103      	bne.n	8015e7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015e74:	6a3b      	ldr	r3, [r7, #32]
 8015e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d009      	beq.n	8015e90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015e7c:	89bb      	ldrh	r3, [r7, #12]
 8015e7e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015e82:	f023 0203 	bic.w	r2, r3, #3
 8015e86:	897b      	ldrh	r3, [r7, #10]
 8015e88:	4293      	cmp	r3, r2
 8015e8a:	bf28      	it	cs
 8015e8c:	4613      	movcs	r3, r2
 8015e8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015e90:	8af9      	ldrh	r1, [r7, #22]
 8015e92:	7bfb      	ldrb	r3, [r7, #15]
 8015e94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fb f83f 	bl	8010f1c <pbuf_alloc>
 8015e9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e019      	b.n	8015ede <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d006      	beq.n	8015ec0 <tcp_pbuf_prealloc+0xb8>
 8015eb2:	4b0d      	ldr	r3, [pc, #52]	; (8015ee8 <tcp_pbuf_prealloc+0xe0>)
 8015eb4:	f240 120b 	movw	r2, #267	; 0x10b
 8015eb8:	490f      	ldr	r1, [pc, #60]	; (8015ef8 <tcp_pbuf_prealloc+0xf0>)
 8015eba:	480d      	ldr	r0, [pc, #52]	; (8015ef0 <tcp_pbuf_prealloc+0xe8>)
 8015ebc:	f005 f9b4 	bl	801b228 <iprintf>
  *oversize = p->len - length;
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	895a      	ldrh	r2, [r3, #10]
 8015ec4:	89bb      	ldrh	r3, [r7, #12]
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	b29a      	uxth	r2, r3
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	89ba      	ldrh	r2, [r7, #12]
 8015ed2:	811a      	strh	r2, [r3, #8]
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	891a      	ldrh	r2, [r3, #8]
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	815a      	strh	r2, [r3, #10]
  return p;
 8015edc:	693b      	ldr	r3, [r7, #16]
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3718      	adds	r7, #24
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	0801f8f8 	.word	0x0801f8f8
 8015eec:	0801f9b0 	.word	0x0801f9b0
 8015ef0:	0801f94c 	.word	0x0801f94c
 8015ef4:	0801f9d4 	.word	0x0801f9d4
 8015ef8:	0801f9f4 	.word	0x0801f9f4

08015efc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	460b      	mov	r3, r1
 8015f06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d106      	bne.n	8015f1c <tcp_write_checks+0x20>
 8015f0e:	4b33      	ldr	r3, [pc, #204]	; (8015fdc <tcp_write_checks+0xe0>)
 8015f10:	f240 1233 	movw	r2, #307	; 0x133
 8015f14:	4932      	ldr	r1, [pc, #200]	; (8015fe0 <tcp_write_checks+0xe4>)
 8015f16:	4833      	ldr	r0, [pc, #204]	; (8015fe4 <tcp_write_checks+0xe8>)
 8015f18:	f005 f986 	bl	801b228 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	7d1b      	ldrb	r3, [r3, #20]
 8015f20:	2b04      	cmp	r3, #4
 8015f22:	d00e      	beq.n	8015f42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015f28:	2b07      	cmp	r3, #7
 8015f2a:	d00a      	beq.n	8015f42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015f30:	2b02      	cmp	r3, #2
 8015f32:	d006      	beq.n	8015f42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015f38:	2b03      	cmp	r3, #3
 8015f3a:	d002      	beq.n	8015f42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f3c:	f06f 030a 	mvn.w	r3, #10
 8015f40:	e048      	b.n	8015fd4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f42:	887b      	ldrh	r3, [r7, #2]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d101      	bne.n	8015f4c <tcp_write_checks+0x50>
    return ERR_OK;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	e043      	b.n	8015fd4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f52:	887a      	ldrh	r2, [r7, #2]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d909      	bls.n	8015f6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	8b5b      	ldrh	r3, [r3, #26]
 8015f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f60:	b29a      	uxth	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f66:	f04f 33ff 	mov.w	r3, #4294967295
 8015f6a:	e033      	b.n	8015fd4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f72:	2b0f      	cmp	r3, #15
 8015f74:	d909      	bls.n	8015f8a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	8b5b      	ldrh	r3, [r3, #26]
 8015f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f7e:	b29a      	uxth	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f84:	f04f 33ff 	mov.w	r3, #4294967295
 8015f88:	e024      	b.n	8015fd4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d00f      	beq.n	8015fb4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d11a      	bne.n	8015fd2 <tcp_write_checks+0xd6>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d116      	bne.n	8015fd2 <tcp_write_checks+0xd6>
 8015fa4:	4b0d      	ldr	r3, [pc, #52]	; (8015fdc <tcp_write_checks+0xe0>)
 8015fa6:	f240 1255 	movw	r2, #341	; 0x155
 8015faa:	490f      	ldr	r1, [pc, #60]	; (8015fe8 <tcp_write_checks+0xec>)
 8015fac:	480d      	ldr	r0, [pc, #52]	; (8015fe4 <tcp_write_checks+0xe8>)
 8015fae:	f005 f93b 	bl	801b228 <iprintf>
 8015fb2:	e00e      	b.n	8015fd2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d103      	bne.n	8015fc4 <tcp_write_checks+0xc8>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d006      	beq.n	8015fd2 <tcp_write_checks+0xd6>
 8015fc4:	4b05      	ldr	r3, [pc, #20]	; (8015fdc <tcp_write_checks+0xe0>)
 8015fc6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015fca:	4908      	ldr	r1, [pc, #32]	; (8015fec <tcp_write_checks+0xf0>)
 8015fcc:	4805      	ldr	r0, [pc, #20]	; (8015fe4 <tcp_write_checks+0xe8>)
 8015fce:	f005 f92b 	bl	801b228 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015fd2:	2300      	movs	r3, #0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	0801f8f8 	.word	0x0801f8f8
 8015fe0:	0801fa08 	.word	0x0801fa08
 8015fe4:	0801f94c 	.word	0x0801f94c
 8015fe8:	0801fa28 	.word	0x0801fa28
 8015fec:	0801fa64 	.word	0x0801fa64

08015ff0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015ff0:	b590      	push	{r4, r7, lr}
 8015ff2:	b09b      	sub	sp, #108	; 0x6c
 8015ff4:	af04      	add	r7, sp, #16
 8015ff6:	60f8      	str	r0, [r7, #12]
 8015ff8:	60b9      	str	r1, [r7, #8]
 8015ffa:	4611      	mov	r1, r2
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	460b      	mov	r3, r1
 8016000:	80fb      	strh	r3, [r7, #6]
 8016002:	4613      	mov	r3, r2
 8016004:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016006:	2300      	movs	r3, #0
 8016008:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801600a:	2300      	movs	r3, #0
 801600c:	653b      	str	r3, [r7, #80]	; 0x50
 801600e:	2300      	movs	r3, #0
 8016010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016012:	2300      	movs	r3, #0
 8016014:	64bb      	str	r3, [r7, #72]	; 0x48
 8016016:	2300      	movs	r3, #0
 8016018:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801601a:	2300      	movs	r3, #0
 801601c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016020:	2300      	movs	r3, #0
 8016022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016026:	2300      	movs	r3, #0
 8016028:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801602a:	2300      	movs	r3, #0
 801602c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801602e:	2300      	movs	r3, #0
 8016030:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d109      	bne.n	801604c <tcp_write+0x5c>
 8016038:	4ba4      	ldr	r3, [pc, #656]	; (80162cc <tcp_write+0x2dc>)
 801603a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801603e:	49a4      	ldr	r1, [pc, #656]	; (80162d0 <tcp_write+0x2e0>)
 8016040:	48a4      	ldr	r0, [pc, #656]	; (80162d4 <tcp_write+0x2e4>)
 8016042:	f005 f8f1 	bl	801b228 <iprintf>
 8016046:	f06f 030f 	mvn.w	r3, #15
 801604a:	e32a      	b.n	80166a2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016052:	085b      	lsrs	r3, r3, #1
 8016054:	b29a      	uxth	r2, r3
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801605a:	4293      	cmp	r3, r2
 801605c:	bf28      	it	cs
 801605e:	4613      	movcs	r3, r2
 8016060:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016064:	2b00      	cmp	r3, #0
 8016066:	d102      	bne.n	801606e <tcp_write+0x7e>
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801606c:	e000      	b.n	8016070 <tcp_write+0x80>
 801606e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016070:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d109      	bne.n	801608c <tcp_write+0x9c>
 8016078:	4b94      	ldr	r3, [pc, #592]	; (80162cc <tcp_write+0x2dc>)
 801607a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801607e:	4996      	ldr	r1, [pc, #600]	; (80162d8 <tcp_write+0x2e8>)
 8016080:	4894      	ldr	r0, [pc, #592]	; (80162d4 <tcp_write+0x2e4>)
 8016082:	f005 f8d1 	bl	801b228 <iprintf>
 8016086:	f06f 030f 	mvn.w	r3, #15
 801608a:	e30a      	b.n	80166a2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801608c:	88fb      	ldrh	r3, [r7, #6]
 801608e:	4619      	mov	r1, r3
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	f7ff ff33 	bl	8015efc <tcp_write_checks>
 8016096:	4603      	mov	r3, r0
 8016098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801609c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d002      	beq.n	80160aa <tcp_write+0xba>
    return err;
 80160a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160a8:	e2fb      	b.n	80166a2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160b4:	2300      	movs	r3, #0
 80160b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f000 80f6 	beq.w	80162b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160c8:	653b      	str	r3, [r7, #80]	; 0x50
 80160ca:	e002      	b.n	80160d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80160cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80160d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1f8      	bne.n	80160cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80160da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160dc:	7a9b      	ldrb	r3, [r3, #10]
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	f003 0304 	and.w	r3, r3, #4
 80160e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80160e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ec:	891b      	ldrh	r3, [r3, #8]
 80160ee:	4619      	mov	r1, r3
 80160f0:	8c3b      	ldrh	r3, [r7, #32]
 80160f2:	440b      	add	r3, r1
 80160f4:	429a      	cmp	r2, r3
 80160f6:	da06      	bge.n	8016106 <tcp_write+0x116>
 80160f8:	4b74      	ldr	r3, [pc, #464]	; (80162cc <tcp_write+0x2dc>)
 80160fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80160fe:	4977      	ldr	r1, [pc, #476]	; (80162dc <tcp_write+0x2ec>)
 8016100:	4874      	ldr	r0, [pc, #464]	; (80162d4 <tcp_write+0x2e4>)
 8016102:	f005 f891 	bl	801b228 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016108:	891a      	ldrh	r2, [r3, #8]
 801610a:	8c3b      	ldrh	r3, [r7, #32]
 801610c:	4413      	add	r3, r2
 801610e:	b29b      	uxth	r3, r3
 8016110:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016112:	1ad3      	subs	r3, r2, r3
 8016114:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801611c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801611e:	8a7b      	ldrh	r3, [r7, #18]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d026      	beq.n	8016172 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016124:	8a7b      	ldrh	r3, [r7, #18]
 8016126:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016128:	429a      	cmp	r2, r3
 801612a:	d206      	bcs.n	801613a <tcp_write+0x14a>
 801612c:	4b67      	ldr	r3, [pc, #412]	; (80162cc <tcp_write+0x2dc>)
 801612e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016132:	496b      	ldr	r1, [pc, #428]	; (80162e0 <tcp_write+0x2f0>)
 8016134:	4867      	ldr	r0, [pc, #412]	; (80162d4 <tcp_write+0x2e4>)
 8016136:	f005 f877 	bl	801b228 <iprintf>
      seg = last_unsent;
 801613a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801613c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801613e:	8a7b      	ldrh	r3, [r7, #18]
 8016140:	88fa      	ldrh	r2, [r7, #6]
 8016142:	4293      	cmp	r3, r2
 8016144:	bf28      	it	cs
 8016146:	4613      	movcs	r3, r2
 8016148:	b29b      	uxth	r3, r3
 801614a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801614c:	4293      	cmp	r3, r2
 801614e:	bf28      	it	cs
 8016150:	4613      	movcs	r3, r2
 8016152:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801615a:	4413      	add	r3, r2
 801615c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016160:	8a7a      	ldrh	r2, [r7, #18]
 8016162:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016164:	1ad3      	subs	r3, r2, r3
 8016166:	b29b      	uxth	r3, r3
 8016168:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801616a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801616c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801616e:	1ad3      	subs	r3, r2, r3
 8016170:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016172:	8a7b      	ldrh	r3, [r7, #18]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00b      	beq.n	8016190 <tcp_write+0x1a0>
 8016178:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801617c:	88fb      	ldrh	r3, [r7, #6]
 801617e:	429a      	cmp	r2, r3
 8016180:	d006      	beq.n	8016190 <tcp_write+0x1a0>
 8016182:	4b52      	ldr	r3, [pc, #328]	; (80162cc <tcp_write+0x2dc>)
 8016184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016188:	4956      	ldr	r1, [pc, #344]	; (80162e4 <tcp_write+0x2f4>)
 801618a:	4852      	ldr	r0, [pc, #328]	; (80162d4 <tcp_write+0x2e4>)
 801618c:	f005 f84c 	bl	801b228 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016194:	88fb      	ldrh	r3, [r7, #6]
 8016196:	429a      	cmp	r2, r3
 8016198:	f080 8167 	bcs.w	801646a <tcp_write+0x47a>
 801619c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 8163 	beq.w	801646a <tcp_write+0x47a>
 80161a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161a6:	891b      	ldrh	r3, [r3, #8]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f000 815e 	beq.w	801646a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80161ae:	88fa      	ldrh	r2, [r7, #6]
 80161b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161b4:	1ad2      	subs	r2, r2, r3
 80161b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161b8:	4293      	cmp	r3, r2
 80161ba:	bfa8      	it	ge
 80161bc:	4613      	movge	r3, r2
 80161be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80161c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80161c4:	797b      	ldrb	r3, [r7, #5]
 80161c6:	f003 0301 	and.w	r3, r3, #1
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d027      	beq.n	801621e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80161ce:	f107 0012 	add.w	r0, r7, #18
 80161d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161d4:	8bf9      	ldrh	r1, [r7, #30]
 80161d6:	2301      	movs	r3, #1
 80161d8:	9302      	str	r3, [sp, #8]
 80161da:	797b      	ldrb	r3, [r7, #5]
 80161dc:	9301      	str	r3, [sp, #4]
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	4603      	mov	r3, r0
 80161e4:	2000      	movs	r0, #0
 80161e6:	f7ff fe0f 	bl	8015e08 <tcp_pbuf_prealloc>
 80161ea:	6578      	str	r0, [r7, #84]	; 0x54
 80161ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f000 8225 	beq.w	801663e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80161f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161f6:	6858      	ldr	r0, [r3, #4]
 80161f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161fc:	68ba      	ldr	r2, [r7, #8]
 80161fe:	4413      	add	r3, r2
 8016200:	8bfa      	ldrh	r2, [r7, #30]
 8016202:	4619      	mov	r1, r3
 8016204:	f005 fa19 	bl	801b63a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016208:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801620a:	f7fb f9f3 	bl	80115f4 <pbuf_clen>
 801620e:	4603      	mov	r3, r0
 8016210:	461a      	mov	r2, r3
 8016212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016216:	4413      	add	r3, r2
 8016218:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801621c:	e041      	b.n	80162a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	637b      	str	r3, [r7, #52]	; 0x34
 8016224:	e002      	b.n	801622c <tcp_write+0x23c>
 8016226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	637b      	str	r3, [r7, #52]	; 0x34
 801622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1f8      	bne.n	8016226 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016236:	7b1b      	ldrb	r3, [r3, #12]
 8016238:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d115      	bne.n	801626c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016246:	8952      	ldrh	r2, [r2, #10]
 8016248:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	429a      	cmp	r2, r3
 801624e:	d10d      	bne.n	801626c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016254:	2b00      	cmp	r3, #0
 8016256:	d006      	beq.n	8016266 <tcp_write+0x276>
 8016258:	4b1c      	ldr	r3, [pc, #112]	; (80162cc <tcp_write+0x2dc>)
 801625a:	f240 2231 	movw	r2, #561	; 0x231
 801625e:	4922      	ldr	r1, [pc, #136]	; (80162e8 <tcp_write+0x2f8>)
 8016260:	481c      	ldr	r0, [pc, #112]	; (80162d4 <tcp_write+0x2e4>)
 8016262:	f004 ffe1 	bl	801b228 <iprintf>
          extendlen = seglen;
 8016266:	8bfb      	ldrh	r3, [r7, #30]
 8016268:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801626a:	e01a      	b.n	80162a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801626c:	8bfb      	ldrh	r3, [r7, #30]
 801626e:	2201      	movs	r2, #1
 8016270:	4619      	mov	r1, r3
 8016272:	2000      	movs	r0, #0
 8016274:	f7fa fe52 	bl	8010f1c <pbuf_alloc>
 8016278:	6578      	str	r0, [r7, #84]	; 0x54
 801627a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801627c:	2b00      	cmp	r3, #0
 801627e:	f000 81e0 	beq.w	8016642 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016282:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016286:	68ba      	ldr	r2, [r7, #8]
 8016288:	441a      	add	r2, r3
 801628a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801628c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801628e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016290:	f7fb f9b0 	bl	80115f4 <pbuf_clen>
 8016294:	4603      	mov	r3, r0
 8016296:	461a      	mov	r2, r3
 8016298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801629c:	4413      	add	r3, r2
 801629e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80162a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162a6:	8bfb      	ldrh	r3, [r7, #30]
 80162a8:	4413      	add	r3, r2
 80162aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80162ae:	e0dc      	b.n	801646a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f000 80d7 	beq.w	801646a <tcp_write+0x47a>
 80162bc:	4b03      	ldr	r3, [pc, #12]	; (80162cc <tcp_write+0x2dc>)
 80162be:	f240 224a 	movw	r2, #586	; 0x24a
 80162c2:	490a      	ldr	r1, [pc, #40]	; (80162ec <tcp_write+0x2fc>)
 80162c4:	4803      	ldr	r0, [pc, #12]	; (80162d4 <tcp_write+0x2e4>)
 80162c6:	f004 ffaf 	bl	801b228 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80162ca:	e0ce      	b.n	801646a <tcp_write+0x47a>
 80162cc:	0801f8f8 	.word	0x0801f8f8
 80162d0:	0801fa98 	.word	0x0801fa98
 80162d4:	0801f94c 	.word	0x0801f94c
 80162d8:	0801fab0 	.word	0x0801fab0
 80162dc:	0801fae4 	.word	0x0801fae4
 80162e0:	0801fafc 	.word	0x0801fafc
 80162e4:	0801fb1c 	.word	0x0801fb1c
 80162e8:	0801fb3c 	.word	0x0801fb3c
 80162ec:	0801fb68 	.word	0x0801fb68
    struct pbuf *p;
    u16_t left = len - pos;
 80162f0:	88fa      	ldrh	r2, [r7, #6]
 80162f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162f6:	1ad3      	subs	r3, r2, r3
 80162f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80162fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80162fe:	b29b      	uxth	r3, r3
 8016300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016306:	8b7a      	ldrh	r2, [r7, #26]
 8016308:	8bbb      	ldrh	r3, [r7, #28]
 801630a:	4293      	cmp	r3, r2
 801630c:	bf28      	it	cs
 801630e:	4613      	movcs	r3, r2
 8016310:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016312:	797b      	ldrb	r3, [r7, #5]
 8016314:	f003 0301 	and.w	r3, r3, #1
 8016318:	2b00      	cmp	r3, #0
 801631a:	d036      	beq.n	801638a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801631c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016320:	b29a      	uxth	r2, r3
 8016322:	8b3b      	ldrh	r3, [r7, #24]
 8016324:	4413      	add	r3, r2
 8016326:	b299      	uxth	r1, r3
 8016328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801632a:	2b00      	cmp	r3, #0
 801632c:	bf0c      	ite	eq
 801632e:	2301      	moveq	r3, #1
 8016330:	2300      	movne	r3, #0
 8016332:	b2db      	uxtb	r3, r3
 8016334:	f107 0012 	add.w	r0, r7, #18
 8016338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	797b      	ldrb	r3, [r7, #5]
 801633e:	9301      	str	r3, [sp, #4]
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	4603      	mov	r3, r0
 8016346:	2036      	movs	r0, #54	; 0x36
 8016348:	f7ff fd5e 	bl	8015e08 <tcp_pbuf_prealloc>
 801634c:	6338      	str	r0, [r7, #48]	; 0x30
 801634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016350:	2b00      	cmp	r3, #0
 8016352:	f000 8178 	beq.w	8016646 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016358:	895b      	ldrh	r3, [r3, #10]
 801635a:	8b3a      	ldrh	r2, [r7, #24]
 801635c:	429a      	cmp	r2, r3
 801635e:	d906      	bls.n	801636e <tcp_write+0x37e>
 8016360:	4b8c      	ldr	r3, [pc, #560]	; (8016594 <tcp_write+0x5a4>)
 8016362:	f240 2266 	movw	r2, #614	; 0x266
 8016366:	498c      	ldr	r1, [pc, #560]	; (8016598 <tcp_write+0x5a8>)
 8016368:	488c      	ldr	r0, [pc, #560]	; (801659c <tcp_write+0x5ac>)
 801636a:	f004 ff5d 	bl	801b228 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016370:	685a      	ldr	r2, [r3, #4]
 8016372:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016376:	18d0      	adds	r0, r2, r3
 8016378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	4413      	add	r3, r2
 8016380:	8b3a      	ldrh	r2, [r7, #24]
 8016382:	4619      	mov	r1, r3
 8016384:	f005 f959 	bl	801b63a <memcpy>
 8016388:	e02f      	b.n	80163ea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801638a:	8a7b      	ldrh	r3, [r7, #18]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d006      	beq.n	801639e <tcp_write+0x3ae>
 8016390:	4b80      	ldr	r3, [pc, #512]	; (8016594 <tcp_write+0x5a4>)
 8016392:	f240 2271 	movw	r2, #625	; 0x271
 8016396:	4982      	ldr	r1, [pc, #520]	; (80165a0 <tcp_write+0x5b0>)
 8016398:	4880      	ldr	r0, [pc, #512]	; (801659c <tcp_write+0x5ac>)
 801639a:	f004 ff45 	bl	801b228 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801639e:	8b3b      	ldrh	r3, [r7, #24]
 80163a0:	2201      	movs	r2, #1
 80163a2:	4619      	mov	r1, r3
 80163a4:	2036      	movs	r0, #54	; 0x36
 80163a6:	f7fa fdb9 	bl	8010f1c <pbuf_alloc>
 80163aa:	6178      	str	r0, [r7, #20]
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	f000 814b 	beq.w	801664a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80163b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163b8:	68ba      	ldr	r2, [r7, #8]
 80163ba:	441a      	add	r2, r3
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80163c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163ca:	4619      	mov	r1, r3
 80163cc:	2036      	movs	r0, #54	; 0x36
 80163ce:	f7fa fda5 	bl	8010f1c <pbuf_alloc>
 80163d2:	6338      	str	r0, [r7, #48]	; 0x30
 80163d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d103      	bne.n	80163e2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80163da:	6978      	ldr	r0, [r7, #20]
 80163dc:	f7fb f882 	bl	80114e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80163e0:	e136      	b.n	8016650 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80163e2:	6979      	ldr	r1, [r7, #20]
 80163e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163e6:	f7fb f93f 	bl	8011668 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80163ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163ec:	f7fb f902 	bl	80115f4 <pbuf_clen>
 80163f0:	4603      	mov	r3, r0
 80163f2:	461a      	mov	r2, r3
 80163f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163f8:	4413      	add	r3, r2
 80163fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80163fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016402:	2b10      	cmp	r3, #16
 8016404:	d903      	bls.n	801640e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016408:	f7fb f86c 	bl	80114e4 <pbuf_free>
      goto memerr;
 801640c:	e120      	b.n	8016650 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016416:	441a      	add	r2, r3
 8016418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801641c:	9300      	str	r3, [sp, #0]
 801641e:	4613      	mov	r3, r2
 8016420:	2200      	movs	r2, #0
 8016422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f7ff fc51 	bl	8015ccc <tcp_create_segment>
 801642a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801642c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801642e:	2b00      	cmp	r3, #0
 8016430:	f000 810d 	beq.w	801664e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016436:	2b00      	cmp	r3, #0
 8016438:	d102      	bne.n	8016440 <tcp_write+0x450>
      queue = seg;
 801643a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801643c:	647b      	str	r3, [r7, #68]	; 0x44
 801643e:	e00c      	b.n	801645a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016442:	2b00      	cmp	r3, #0
 8016444:	d106      	bne.n	8016454 <tcp_write+0x464>
 8016446:	4b53      	ldr	r3, [pc, #332]	; (8016594 <tcp_write+0x5a4>)
 8016448:	f240 22ab 	movw	r2, #683	; 0x2ab
 801644c:	4955      	ldr	r1, [pc, #340]	; (80165a4 <tcp_write+0x5b4>)
 801644e:	4853      	ldr	r0, [pc, #332]	; (801659c <tcp_write+0x5ac>)
 8016450:	f004 feea 	bl	801b228 <iprintf>
      prev_seg->next = seg;
 8016454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016458:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801645a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801645c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801645e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016462:	8b3b      	ldrh	r3, [r7, #24]
 8016464:	4413      	add	r3, r2
 8016466:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801646a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801646e:	88fb      	ldrh	r3, [r7, #6]
 8016470:	429a      	cmp	r2, r3
 8016472:	f4ff af3d 	bcc.w	80162f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016476:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016478:	2b00      	cmp	r3, #0
 801647a:	d02c      	beq.n	80164d6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801647c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016482:	e01e      	b.n	80164c2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016486:	891a      	ldrh	r2, [r3, #8]
 8016488:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801648a:	4413      	add	r3, r2
 801648c:	b29a      	uxth	r2, r3
 801648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016490:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d110      	bne.n	80164bc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164a0:	8952      	ldrh	r2, [r2, #10]
 80164a2:	4413      	add	r3, r2
 80164a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164a6:	68b9      	ldr	r1, [r7, #8]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f005 f8c6 	bl	801b63a <memcpy>
        p->len += oversize_used;
 80164ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b0:	895a      	ldrh	r2, [r3, #10]
 80164b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164b4:	4413      	add	r3, r2
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80164bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d1dd      	bne.n	8016484 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80164c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164ca:	891a      	ldrh	r2, [r3, #8]
 80164cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164ce:	4413      	add	r3, r2
 80164d0:	b29a      	uxth	r2, r3
 80164d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80164d6:	8a7a      	ldrh	r2, [r7, #18]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80164de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d018      	beq.n	8016516 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80164e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d106      	bne.n	80164f8 <tcp_write+0x508>
 80164ea:	4b2a      	ldr	r3, [pc, #168]	; (8016594 <tcp_write+0x5a4>)
 80164ec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80164f0:	492d      	ldr	r1, [pc, #180]	; (80165a8 <tcp_write+0x5b8>)
 80164f2:	482a      	ldr	r0, [pc, #168]	; (801659c <tcp_write+0x5ac>)
 80164f4:	f004 fe98 	bl	801b228 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80164f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80164fe:	4618      	mov	r0, r3
 8016500:	f7fb f8b2 	bl	8011668 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016506:	891a      	ldrh	r2, [r3, #8]
 8016508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801650a:	891b      	ldrh	r3, [r3, #8]
 801650c:	4413      	add	r3, r2
 801650e:	b29a      	uxth	r2, r3
 8016510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016512:	811a      	strh	r2, [r3, #8]
 8016514:	e037      	b.n	8016586 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016516:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016518:	2b00      	cmp	r3, #0
 801651a:	d034      	beq.n	8016586 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801651c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801651e:	2b00      	cmp	r3, #0
 8016520:	d003      	beq.n	801652a <tcp_write+0x53a>
 8016522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d106      	bne.n	8016538 <tcp_write+0x548>
 801652a:	4b1a      	ldr	r3, [pc, #104]	; (8016594 <tcp_write+0x5a4>)
 801652c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016530:	491e      	ldr	r1, [pc, #120]	; (80165ac <tcp_write+0x5bc>)
 8016532:	481a      	ldr	r0, [pc, #104]	; (801659c <tcp_write+0x5ac>)
 8016534:	f004 fe78 	bl	801b228 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	62bb      	str	r3, [r7, #40]	; 0x28
 801653e:	e009      	b.n	8016554 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016542:	891a      	ldrh	r2, [r3, #8]
 8016544:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016546:	4413      	add	r3, r2
 8016548:	b29a      	uxth	r2, r3
 801654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	62bb      	str	r3, [r7, #40]	; 0x28
 8016554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1f1      	bne.n	8016540 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655e:	891a      	ldrh	r2, [r3, #8]
 8016560:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016562:	4413      	add	r3, r2
 8016564:	b29a      	uxth	r2, r3
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656c:	895a      	ldrh	r2, [r3, #10]
 801656e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016570:	4413      	add	r3, r2
 8016572:	b29a      	uxth	r2, r3
 8016574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016576:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657a:	891a      	ldrh	r2, [r3, #8]
 801657c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801657e:	4413      	add	r3, r2
 8016580:	b29a      	uxth	r2, r3
 8016582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016584:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016588:	2b00      	cmp	r3, #0
 801658a:	d111      	bne.n	80165b0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016590:	66da      	str	r2, [r3, #108]	; 0x6c
 8016592:	e010      	b.n	80165b6 <tcp_write+0x5c6>
 8016594:	0801f8f8 	.word	0x0801f8f8
 8016598:	0801fb98 	.word	0x0801fb98
 801659c:	0801f94c 	.word	0x0801f94c
 80165a0:	0801fbd8 	.word	0x0801fbd8
 80165a4:	0801fbe8 	.word	0x0801fbe8
 80165a8:	0801fbfc 	.word	0x0801fbfc
 80165ac:	0801fc34 	.word	0x0801fc34
  } else {
    last_unsent->next = queue;
 80165b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165ba:	88fb      	ldrh	r3, [r7, #6]
 80165bc:	441a      	add	r2, r3
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80165c8:	88fb      	ldrh	r3, [r7, #6]
 80165ca:	1ad3      	subs	r3, r2, r3
 80165cc:	b29a      	uxth	r2, r3
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80165da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d00e      	beq.n	8016606 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d10a      	bne.n	8016606 <tcp_write+0x616>
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d106      	bne.n	8016606 <tcp_write+0x616>
 80165f8:	4b2c      	ldr	r3, [pc, #176]	; (80166ac <tcp_write+0x6bc>)
 80165fa:	f240 3212 	movw	r2, #786	; 0x312
 80165fe:	492c      	ldr	r1, [pc, #176]	; (80166b0 <tcp_write+0x6c0>)
 8016600:	482c      	ldr	r0, [pc, #176]	; (80166b4 <tcp_write+0x6c4>)
 8016602:	f004 fe11 	bl	801b228 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016608:	2b00      	cmp	r3, #0
 801660a:	d016      	beq.n	801663a <tcp_write+0x64a>
 801660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d012      	beq.n	801663a <tcp_write+0x64a>
 8016614:	797b      	ldrb	r3, [r7, #5]
 8016616:	f003 0302 	and.w	r3, r3, #2
 801661a:	2b00      	cmp	r3, #0
 801661c:	d10d      	bne.n	801663a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801661e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	899b      	ldrh	r3, [r3, #12]
 8016624:	b29c      	uxth	r4, r3
 8016626:	2008      	movs	r0, #8
 8016628:	f7f9 fb58 	bl	800fcdc <lwip_htons>
 801662c:	4603      	mov	r3, r0
 801662e:	461a      	mov	r2, r3
 8016630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016632:	68db      	ldr	r3, [r3, #12]
 8016634:	4322      	orrs	r2, r4
 8016636:	b292      	uxth	r2, r2
 8016638:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801663a:	2300      	movs	r3, #0
 801663c:	e031      	b.n	80166a2 <tcp_write+0x6b2>
          goto memerr;
 801663e:	bf00      	nop
 8016640:	e006      	b.n	8016650 <tcp_write+0x660>
            goto memerr;
 8016642:	bf00      	nop
 8016644:	e004      	b.n	8016650 <tcp_write+0x660>
        goto memerr;
 8016646:	bf00      	nop
 8016648:	e002      	b.n	8016650 <tcp_write+0x660>
        goto memerr;
 801664a:	bf00      	nop
 801664c:	e000      	b.n	8016650 <tcp_write+0x660>
      goto memerr;
 801664e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	8b5b      	ldrh	r3, [r3, #26]
 8016654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016658:	b29a      	uxth	r2, r3
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801665e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016660:	2b00      	cmp	r3, #0
 8016662:	d002      	beq.n	801666a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016664:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016666:	f7fa ff3d 	bl	80114e4 <pbuf_free>
  }
  if (queue != NULL) {
 801666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801666c:	2b00      	cmp	r3, #0
 801666e:	d002      	beq.n	8016676 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016670:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016672:	f7fc fb89 	bl	8012d88 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801667c:	2b00      	cmp	r3, #0
 801667e:	d00e      	beq.n	801669e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016684:	2b00      	cmp	r3, #0
 8016686:	d10a      	bne.n	801669e <tcp_write+0x6ae>
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801668c:	2b00      	cmp	r3, #0
 801668e:	d106      	bne.n	801669e <tcp_write+0x6ae>
 8016690:	4b06      	ldr	r3, [pc, #24]	; (80166ac <tcp_write+0x6bc>)
 8016692:	f240 3227 	movw	r2, #807	; 0x327
 8016696:	4906      	ldr	r1, [pc, #24]	; (80166b0 <tcp_write+0x6c0>)
 8016698:	4806      	ldr	r0, [pc, #24]	; (80166b4 <tcp_write+0x6c4>)
 801669a:	f004 fdc5 	bl	801b228 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801669e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	375c      	adds	r7, #92	; 0x5c
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd90      	pop	{r4, r7, pc}
 80166aa:	bf00      	nop
 80166ac:	0801f8f8 	.word	0x0801f8f8
 80166b0:	0801fc6c 	.word	0x0801fc6c
 80166b4:	0801f94c 	.word	0x0801f94c

080166b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80166b8:	b590      	push	{r4, r7, lr}
 80166ba:	b08b      	sub	sp, #44	; 0x2c
 80166bc:	af02      	add	r7, sp, #8
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	460b      	mov	r3, r1
 80166c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80166c4:	2300      	movs	r3, #0
 80166c6:	61fb      	str	r3, [r7, #28]
 80166c8:	2300      	movs	r3, #0
 80166ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80166cc:	2300      	movs	r3, #0
 80166ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <tcp_split_unsent_seg+0x2c>
 80166d6:	4b95      	ldr	r3, [pc, #596]	; (801692c <tcp_split_unsent_seg+0x274>)
 80166d8:	f240 324b 	movw	r2, #843	; 0x34b
 80166dc:	4994      	ldr	r1, [pc, #592]	; (8016930 <tcp_split_unsent_seg+0x278>)
 80166de:	4895      	ldr	r0, [pc, #596]	; (8016934 <tcp_split_unsent_seg+0x27c>)
 80166e0:	f004 fda2 	bl	801b228 <iprintf>

  useg = pcb->unsent;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d102      	bne.n	80166f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	e116      	b.n	8016924 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80166f6:	887b      	ldrh	r3, [r7, #2]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d109      	bne.n	8016710 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80166fc:	4b8b      	ldr	r3, [pc, #556]	; (801692c <tcp_split_unsent_seg+0x274>)
 80166fe:	f240 3253 	movw	r2, #851	; 0x353
 8016702:	498d      	ldr	r1, [pc, #564]	; (8016938 <tcp_split_unsent_seg+0x280>)
 8016704:	488b      	ldr	r0, [pc, #556]	; (8016934 <tcp_split_unsent_seg+0x27c>)
 8016706:	f004 fd8f 	bl	801b228 <iprintf>
    return ERR_VAL;
 801670a:	f06f 0305 	mvn.w	r3, #5
 801670e:	e109      	b.n	8016924 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	891b      	ldrh	r3, [r3, #8]
 8016714:	887a      	ldrh	r2, [r7, #2]
 8016716:	429a      	cmp	r2, r3
 8016718:	d301      	bcc.n	801671e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801671a:	2300      	movs	r3, #0
 801671c:	e102      	b.n	8016924 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016722:	887a      	ldrh	r2, [r7, #2]
 8016724:	429a      	cmp	r2, r3
 8016726:	d906      	bls.n	8016736 <tcp_split_unsent_seg+0x7e>
 8016728:	4b80      	ldr	r3, [pc, #512]	; (801692c <tcp_split_unsent_seg+0x274>)
 801672a:	f240 325b 	movw	r2, #859	; 0x35b
 801672e:	4983      	ldr	r1, [pc, #524]	; (801693c <tcp_split_unsent_seg+0x284>)
 8016730:	4880      	ldr	r0, [pc, #512]	; (8016934 <tcp_split_unsent_seg+0x27c>)
 8016732:	f004 fd79 	bl	801b228 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016736:	697b      	ldr	r3, [r7, #20]
 8016738:	891b      	ldrh	r3, [r3, #8]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d106      	bne.n	801674c <tcp_split_unsent_seg+0x94>
 801673e:	4b7b      	ldr	r3, [pc, #492]	; (801692c <tcp_split_unsent_seg+0x274>)
 8016740:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016744:	497e      	ldr	r1, [pc, #504]	; (8016940 <tcp_split_unsent_seg+0x288>)
 8016746:	487b      	ldr	r0, [pc, #492]	; (8016934 <tcp_split_unsent_seg+0x27c>)
 8016748:	f004 fd6e 	bl	801b228 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	7a9b      	ldrb	r3, [r3, #10]
 8016750:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016752:	7bfb      	ldrb	r3, [r7, #15]
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	b2db      	uxtb	r3, r3
 8016758:	f003 0304 	and.w	r3, r3, #4
 801675c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	891a      	ldrh	r2, [r3, #8]
 8016762:	887b      	ldrh	r3, [r7, #2]
 8016764:	1ad3      	subs	r3, r2, r3
 8016766:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016768:	7bbb      	ldrb	r3, [r7, #14]
 801676a:	b29a      	uxth	r2, r3
 801676c:	89bb      	ldrh	r3, [r7, #12]
 801676e:	4413      	add	r3, r2
 8016770:	b29b      	uxth	r3, r3
 8016772:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016776:	4619      	mov	r1, r3
 8016778:	2036      	movs	r0, #54	; 0x36
 801677a:	f7fa fbcf 	bl	8010f1c <pbuf_alloc>
 801677e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	2b00      	cmp	r3, #0
 8016784:	f000 80b7 	beq.w	80168f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	891a      	ldrh	r2, [r3, #8]
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	891b      	ldrh	r3, [r3, #8]
 8016792:	1ad3      	subs	r3, r2, r3
 8016794:	b29a      	uxth	r2, r3
 8016796:	887b      	ldrh	r3, [r7, #2]
 8016798:	4413      	add	r3, r2
 801679a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	6858      	ldr	r0, [r3, #4]
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	685a      	ldr	r2, [r3, #4]
 80167a4:	7bbb      	ldrb	r3, [r7, #14]
 80167a6:	18d1      	adds	r1, r2, r3
 80167a8:	897b      	ldrh	r3, [r7, #10]
 80167aa:	89ba      	ldrh	r2, [r7, #12]
 80167ac:	f7fb f884 	bl	80118b8 <pbuf_copy_partial>
 80167b0:	4603      	mov	r3, r0
 80167b2:	461a      	mov	r2, r3
 80167b4:	89bb      	ldrh	r3, [r7, #12]
 80167b6:	4293      	cmp	r3, r2
 80167b8:	f040 809f 	bne.w	80168fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	899b      	ldrh	r3, [r3, #12]
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f9 fa89 	bl	800fcdc <lwip_htons>
 80167ca:	4603      	mov	r3, r0
 80167cc:	b2db      	uxtb	r3, r3
 80167ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80167d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80167d4:	2300      	movs	r3, #0
 80167d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80167d8:	7efb      	ldrb	r3, [r7, #27]
 80167da:	f003 0308 	and.w	r3, r3, #8
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d007      	beq.n	80167f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80167e2:	7efb      	ldrb	r3, [r7, #27]
 80167e4:	f023 0308 	bic.w	r3, r3, #8
 80167e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80167ea:	7ebb      	ldrb	r3, [r7, #26]
 80167ec:	f043 0308 	orr.w	r3, r3, #8
 80167f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80167f2:	7efb      	ldrb	r3, [r7, #27]
 80167f4:	f003 0301 	and.w	r3, r3, #1
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d007      	beq.n	801680c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80167fc:	7efb      	ldrb	r3, [r7, #27]
 80167fe:	f023 0301 	bic.w	r3, r3, #1
 8016802:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016804:	7ebb      	ldrb	r3, [r7, #26]
 8016806:	f043 0301 	orr.w	r3, r3, #1
 801680a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	68db      	ldr	r3, [r3, #12]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	4618      	mov	r0, r3
 8016814:	f7f9 fa77 	bl	800fd06 <lwip_htonl>
 8016818:	4602      	mov	r2, r0
 801681a:	887b      	ldrh	r3, [r7, #2]
 801681c:	18d1      	adds	r1, r2, r3
 801681e:	7eba      	ldrb	r2, [r7, #26]
 8016820:	7bfb      	ldrb	r3, [r7, #15]
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	460b      	mov	r3, r1
 8016826:	6939      	ldr	r1, [r7, #16]
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f7ff fa4f 	bl	8015ccc <tcp_create_segment>
 801682e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d063      	beq.n	80168fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	4618      	mov	r0, r3
 801683c:	f7fa feda 	bl	80115f4 <pbuf_clen>
 8016840:	4603      	mov	r3, r0
 8016842:	461a      	mov	r2, r3
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801684a:	1a9b      	subs	r3, r3, r2
 801684c:	b29a      	uxth	r2, r3
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	6858      	ldr	r0, [r3, #4]
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	891a      	ldrh	r2, [r3, #8]
 801685e:	89bb      	ldrh	r3, [r7, #12]
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	b29b      	uxth	r3, r3
 8016864:	4619      	mov	r1, r3
 8016866:	f7fa fcb9 	bl	80111dc <pbuf_realloc>
  useg->len -= remainder;
 801686a:	697b      	ldr	r3, [r7, #20]
 801686c:	891a      	ldrh	r2, [r3, #8]
 801686e:	89bb      	ldrh	r3, [r7, #12]
 8016870:	1ad3      	subs	r3, r2, r3
 8016872:	b29a      	uxth	r2, r3
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	68db      	ldr	r3, [r3, #12]
 801687c:	899b      	ldrh	r3, [r3, #12]
 801687e:	b29c      	uxth	r4, r3
 8016880:	7efb      	ldrb	r3, [r7, #27]
 8016882:	b29b      	uxth	r3, r3
 8016884:	4618      	mov	r0, r3
 8016886:	f7f9 fa29 	bl	800fcdc <lwip_htons>
 801688a:	4603      	mov	r3, r0
 801688c:	461a      	mov	r2, r3
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	4322      	orrs	r2, r4
 8016894:	b292      	uxth	r2, r2
 8016896:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	4618      	mov	r0, r3
 801689e:	f7fa fea9 	bl	80115f4 <pbuf_clen>
 80168a2:	4603      	mov	r3, r0
 80168a4:	461a      	mov	r2, r3
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168ac:	4413      	add	r3, r2
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fa fe9a 	bl	80115f4 <pbuf_clen>
 80168c0:	4603      	mov	r3, r0
 80168c2:	461a      	mov	r2, r3
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168ca:	4413      	add	r3, r2
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	69fa      	ldr	r2, [r7, #28]
 80168e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d103      	bne.n	80168f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80168f2:	2300      	movs	r3, #0
 80168f4:	e016      	b.n	8016924 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80168f6:	bf00      	nop
 80168f8:	e002      	b.n	8016900 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168fa:	bf00      	nop
 80168fc:	e000      	b.n	8016900 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d006      	beq.n	8016914 <tcp_split_unsent_seg+0x25c>
 8016906:	4b09      	ldr	r3, [pc, #36]	; (801692c <tcp_split_unsent_seg+0x274>)
 8016908:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801690c:	490d      	ldr	r1, [pc, #52]	; (8016944 <tcp_split_unsent_seg+0x28c>)
 801690e:	4809      	ldr	r0, [pc, #36]	; (8016934 <tcp_split_unsent_seg+0x27c>)
 8016910:	f004 fc8a 	bl	801b228 <iprintf>
  if (p != NULL) {
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d002      	beq.n	8016920 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801691a:	6938      	ldr	r0, [r7, #16]
 801691c:	f7fa fde2 	bl	80114e4 <pbuf_free>
  }

  return ERR_MEM;
 8016920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016924:	4618      	mov	r0, r3
 8016926:	3724      	adds	r7, #36	; 0x24
 8016928:	46bd      	mov	sp, r7
 801692a:	bd90      	pop	{r4, r7, pc}
 801692c:	0801f8f8 	.word	0x0801f8f8
 8016930:	0801fc8c 	.word	0x0801fc8c
 8016934:	0801f94c 	.word	0x0801f94c
 8016938:	0801fcb0 	.word	0x0801fcb0
 801693c:	0801fcd4 	.word	0x0801fcd4
 8016940:	0801fce4 	.word	0x0801fce4
 8016944:	0801fcf4 	.word	0x0801fcf4

08016948 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016948:	b590      	push	{r4, r7, lr}
 801694a:	b085      	sub	sp, #20
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d106      	bne.n	8016964 <tcp_send_fin+0x1c>
 8016956:	4b21      	ldr	r3, [pc, #132]	; (80169dc <tcp_send_fin+0x94>)
 8016958:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801695c:	4920      	ldr	r1, [pc, #128]	; (80169e0 <tcp_send_fin+0x98>)
 801695e:	4821      	ldr	r0, [pc, #132]	; (80169e4 <tcp_send_fin+0x9c>)
 8016960:	f004 fc62 	bl	801b228 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016968:	2b00      	cmp	r3, #0
 801696a:	d02e      	beq.n	80169ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016970:	60fb      	str	r3, [r7, #12]
 8016972:	e002      	b.n	801697a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d1f8      	bne.n	8016974 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	68db      	ldr	r3, [r3, #12]
 8016986:	899b      	ldrh	r3, [r3, #12]
 8016988:	b29b      	uxth	r3, r3
 801698a:	4618      	mov	r0, r3
 801698c:	f7f9 f9a6 	bl	800fcdc <lwip_htons>
 8016990:	4603      	mov	r3, r0
 8016992:	b2db      	uxtb	r3, r3
 8016994:	f003 0307 	and.w	r3, r3, #7
 8016998:	2b00      	cmp	r3, #0
 801699a:	d116      	bne.n	80169ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	68db      	ldr	r3, [r3, #12]
 80169a0:	899b      	ldrh	r3, [r3, #12]
 80169a2:	b29c      	uxth	r4, r3
 80169a4:	2001      	movs	r0, #1
 80169a6:	f7f9 f999 	bl	800fcdc <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	4322      	orrs	r2, r4
 80169b4:	b292      	uxth	r2, r2
 80169b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	8b5b      	ldrh	r3, [r3, #26]
 80169bc:	f043 0320 	orr.w	r3, r3, #32
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80169c6:	2300      	movs	r3, #0
 80169c8:	e004      	b.n	80169d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80169ca:	2101      	movs	r1, #1
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f000 f80b 	bl	80169e8 <tcp_enqueue_flags>
 80169d2:	4603      	mov	r3, r0
}
 80169d4:	4618      	mov	r0, r3
 80169d6:	3714      	adds	r7, #20
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd90      	pop	{r4, r7, pc}
 80169dc:	0801f8f8 	.word	0x0801f8f8
 80169e0:	0801fd00 	.word	0x0801fd00
 80169e4:	0801f94c 	.word	0x0801f94c

080169e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b08a      	sub	sp, #40	; 0x28
 80169ec:	af02      	add	r7, sp, #8
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	460b      	mov	r3, r1
 80169f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80169f4:	2300      	movs	r3, #0
 80169f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80169fc:	78fb      	ldrb	r3, [r7, #3]
 80169fe:	f003 0303 	and.w	r3, r3, #3
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d106      	bne.n	8016a14 <tcp_enqueue_flags+0x2c>
 8016a06:	4b67      	ldr	r3, [pc, #412]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016a08:	f240 4211 	movw	r2, #1041	; 0x411
 8016a0c:	4966      	ldr	r1, [pc, #408]	; (8016ba8 <tcp_enqueue_flags+0x1c0>)
 8016a0e:	4867      	ldr	r0, [pc, #412]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016a10:	f004 fc0a 	bl	801b228 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d106      	bne.n	8016a28 <tcp_enqueue_flags+0x40>
 8016a1a:	4b62      	ldr	r3, [pc, #392]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016a1c:	f240 4213 	movw	r2, #1043	; 0x413
 8016a20:	4963      	ldr	r1, [pc, #396]	; (8016bb0 <tcp_enqueue_flags+0x1c8>)
 8016a22:	4862      	ldr	r0, [pc, #392]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016a24:	f004 fc00 	bl	801b228 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a28:	78fb      	ldrb	r3, [r7, #3]
 8016a2a:	f003 0302 	and.w	r3, r3, #2
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d001      	beq.n	8016a36 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a32:	2301      	movs	r3, #1
 8016a34:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a36:	7ffb      	ldrb	r3, [r7, #31]
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	f003 0304 	and.w	r3, r3, #4
 8016a40:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a42:	7dfb      	ldrb	r3, [r7, #23]
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	2036      	movs	r0, #54	; 0x36
 8016a4e:	f7fa fa65 	bl	8010f1c <pbuf_alloc>
 8016a52:	6138      	str	r0, [r7, #16]
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d109      	bne.n	8016a6e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	8b5b      	ldrh	r3, [r3, #26]
 8016a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a68:	f04f 33ff 	mov.w	r3, #4294967295
 8016a6c:	e095      	b.n	8016b9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	895a      	ldrh	r2, [r3, #10]
 8016a72:	7dfb      	ldrb	r3, [r7, #23]
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d206      	bcs.n	8016a88 <tcp_enqueue_flags+0xa0>
 8016a7a:	4b4a      	ldr	r3, [pc, #296]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016a7c:	f240 4239 	movw	r2, #1081	; 0x439
 8016a80:	494c      	ldr	r1, [pc, #304]	; (8016bb4 <tcp_enqueue_flags+0x1cc>)
 8016a82:	484a      	ldr	r0, [pc, #296]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016a84:	f004 fbd0 	bl	801b228 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016a8c:	78fa      	ldrb	r2, [r7, #3]
 8016a8e:	7ffb      	ldrb	r3, [r7, #31]
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	460b      	mov	r3, r1
 8016a94:	6939      	ldr	r1, [r7, #16]
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7ff f918 	bl	8015ccc <tcp_create_segment>
 8016a9c:	60f8      	str	r0, [r7, #12]
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d109      	bne.n	8016ab8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	8b5b      	ldrh	r3, [r3, #26]
 8016aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aac:	b29a      	uxth	r2, r3
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab6:	e070      	b.n	8016b9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	f003 0303 	and.w	r3, r3, #3
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d006      	beq.n	8016ad2 <tcp_enqueue_flags+0xea>
 8016ac4:	4b37      	ldr	r3, [pc, #220]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016ac6:	f240 4242 	movw	r2, #1090	; 0x442
 8016aca:	493b      	ldr	r1, [pc, #236]	; (8016bb8 <tcp_enqueue_flags+0x1d0>)
 8016acc:	4837      	ldr	r0, [pc, #220]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016ace:	f004 fbab 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	891b      	ldrh	r3, [r3, #8]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d006      	beq.n	8016ae8 <tcp_enqueue_flags+0x100>
 8016ada:	4b32      	ldr	r3, [pc, #200]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016adc:	f240 4243 	movw	r2, #1091	; 0x443
 8016ae0:	4936      	ldr	r1, [pc, #216]	; (8016bbc <tcp_enqueue_flags+0x1d4>)
 8016ae2:	4832      	ldr	r0, [pc, #200]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016ae4:	f004 fba0 	bl	801b228 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d103      	bne.n	8016af8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	68fa      	ldr	r2, [r7, #12]
 8016af4:	66da      	str	r2, [r3, #108]	; 0x6c
 8016af6:	e00d      	b.n	8016b14 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016afc:	61bb      	str	r3, [r7, #24]
 8016afe:	e002      	b.n	8016b06 <tcp_enqueue_flags+0x11e>
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	61bb      	str	r3, [r7, #24]
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d1f8      	bne.n	8016b00 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	68fa      	ldr	r2, [r7, #12]
 8016b12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2200      	movs	r2, #0
 8016b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b1c:	78fb      	ldrb	r3, [r7, #3]
 8016b1e:	f003 0302 	and.w	r3, r3, #2
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d104      	bne.n	8016b30 <tcp_enqueue_flags+0x148>
 8016b26:	78fb      	ldrb	r3, [r7, #3]
 8016b28:	f003 0301 	and.w	r3, r3, #1
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d004      	beq.n	8016b3a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b34:	1c5a      	adds	r2, r3, #1
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b3a:	78fb      	ldrb	r3, [r7, #3]
 8016b3c:	f003 0301 	and.w	r3, r3, #1
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d006      	beq.n	8016b52 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	8b5b      	ldrh	r3, [r3, #26]
 8016b48:	f043 0320 	orr.w	r3, r3, #32
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7fa fd4c 	bl	80115f4 <pbuf_clen>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	461a      	mov	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b66:	4413      	add	r3, r2
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d00e      	beq.n	8016b98 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d10a      	bne.n	8016b98 <tcp_enqueue_flags+0x1b0>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <tcp_enqueue_flags+0x1b0>
 8016b8a:	4b06      	ldr	r3, [pc, #24]	; (8016ba4 <tcp_enqueue_flags+0x1bc>)
 8016b8c:	f240 4265 	movw	r2, #1125	; 0x465
 8016b90:	490b      	ldr	r1, [pc, #44]	; (8016bc0 <tcp_enqueue_flags+0x1d8>)
 8016b92:	4806      	ldr	r0, [pc, #24]	; (8016bac <tcp_enqueue_flags+0x1c4>)
 8016b94:	f004 fb48 	bl	801b228 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016b98:	2300      	movs	r3, #0
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3720      	adds	r7, #32
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	0801f8f8 	.word	0x0801f8f8
 8016ba8:	0801fd1c 	.word	0x0801fd1c
 8016bac:	0801f94c 	.word	0x0801f94c
 8016bb0:	0801fd74 	.word	0x0801fd74
 8016bb4:	0801fd94 	.word	0x0801fd94
 8016bb8:	0801fdd0 	.word	0x0801fdd0
 8016bbc:	0801fde8 	.word	0x0801fde8
 8016bc0:	0801fe14 	.word	0x0801fe14

08016bc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016bc4:	b5b0      	push	{r4, r5, r7, lr}
 8016bc6:	b08a      	sub	sp, #40	; 0x28
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d106      	bne.n	8016be0 <tcp_output+0x1c>
 8016bd2:	4b8a      	ldr	r3, [pc, #552]	; (8016dfc <tcp_output+0x238>)
 8016bd4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016bd8:	4989      	ldr	r1, [pc, #548]	; (8016e00 <tcp_output+0x23c>)
 8016bda:	488a      	ldr	r0, [pc, #552]	; (8016e04 <tcp_output+0x240>)
 8016bdc:	f004 fb24 	bl	801b228 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	7d1b      	ldrb	r3, [r3, #20]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d106      	bne.n	8016bf6 <tcp_output+0x32>
 8016be8:	4b84      	ldr	r3, [pc, #528]	; (8016dfc <tcp_output+0x238>)
 8016bea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016bee:	4986      	ldr	r1, [pc, #536]	; (8016e08 <tcp_output+0x244>)
 8016bf0:	4884      	ldr	r0, [pc, #528]	; (8016e04 <tcp_output+0x240>)
 8016bf2:	f004 fb19 	bl	801b228 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016bf6:	4b85      	ldr	r3, [pc, #532]	; (8016e0c <tcp_output+0x248>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d101      	bne.n	8016c04 <tcp_output+0x40>
    return ERR_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	e1ce      	b.n	8016fa2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c10:	4293      	cmp	r3, r2
 8016c12:	bf28      	it	cs
 8016c14:	4613      	movcs	r3, r2
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d10b      	bne.n	8016c3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	8b5b      	ldrh	r3, [r3, #26]
 8016c2a:	f003 0302 	and.w	r3, r3, #2
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	f000 81aa 	beq.w	8016f88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f000 fdcb 	bl	80177d0 <tcp_send_empty_ack>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	e1b1      	b.n	8016fa2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c3e:	6879      	ldr	r1, [r7, #4]
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	3304      	adds	r3, #4
 8016c44:	461a      	mov	r2, r3
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f7ff f824 	bl	8015c94 <tcp_route>
 8016c4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d102      	bne.n	8016c5a <tcp_output+0x96>
    return ERR_RTE;
 8016c54:	f06f 0303 	mvn.w	r3, #3
 8016c58:	e1a3      	b.n	8016fa2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d003      	beq.n	8016c68 <tcp_output+0xa4>
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d111      	bne.n	8016c8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d002      	beq.n	8016c74 <tcp_output+0xb0>
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	3304      	adds	r3, #4
 8016c72:	e000      	b.n	8016c76 <tcp_output+0xb2>
 8016c74:	2300      	movs	r3, #0
 8016c76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016c78:	693b      	ldr	r3, [r7, #16]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d102      	bne.n	8016c84 <tcp_output+0xc0>
      return ERR_RTE;
 8016c7e:	f06f 0303 	mvn.w	r3, #3
 8016c82:	e18e      	b.n	8016fa2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	681a      	ldr	r2, [r3, #0]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7f9 f837 	bl	800fd06 <lwip_htonl>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c9e:	1ad3      	subs	r3, r2, r3
 8016ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ca2:	8912      	ldrh	r2, [r2, #8]
 8016ca4:	4413      	add	r3, r2
 8016ca6:	69ba      	ldr	r2, [r7, #24]
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	d227      	bcs.n	8016cfc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	69bb      	ldr	r3, [r7, #24]
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d114      	bne.n	8016ce4 <tcp_output+0x120>
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d110      	bne.n	8016ce4 <tcp_output+0x120>
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d10b      	bne.n	8016ce4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2201      	movs	r2, #1
 8016cd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	8b5b      	ldrh	r3, [r3, #26]
 8016ce8:	f003 0302 	and.w	r3, r3, #2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f000 814d 	beq.w	8016f8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f000 fd6c 	bl	80177d0 <tcp_send_empty_ack>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	e152      	b.n	8016fa2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d0a:	6a3b      	ldr	r3, [r7, #32]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	f000 811c 	beq.w	8016f4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d12:	e002      	b.n	8016d1a <tcp_output+0x156>
 8016d14:	6a3b      	ldr	r3, [r7, #32]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	623b      	str	r3, [r7, #32]
 8016d1a:	6a3b      	ldr	r3, [r7, #32]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d1f8      	bne.n	8016d14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d22:	e112      	b.n	8016f4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d26:	68db      	ldr	r3, [r3, #12]
 8016d28:	899b      	ldrh	r3, [r3, #12]
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f8 ffd5 	bl	800fcdc <lwip_htons>
 8016d32:	4603      	mov	r3, r0
 8016d34:	b2db      	uxtb	r3, r3
 8016d36:	f003 0304 	and.w	r3, r3, #4
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d006      	beq.n	8016d4c <tcp_output+0x188>
 8016d3e:	4b2f      	ldr	r3, [pc, #188]	; (8016dfc <tcp_output+0x238>)
 8016d40:	f240 5236 	movw	r2, #1334	; 0x536
 8016d44:	4932      	ldr	r1, [pc, #200]	; (8016e10 <tcp_output+0x24c>)
 8016d46:	482f      	ldr	r0, [pc, #188]	; (8016e04 <tcp_output+0x240>)
 8016d48:	f004 fa6e 	bl	801b228 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d01f      	beq.n	8016d94 <tcp_output+0x1d0>
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	8b5b      	ldrh	r3, [r3, #26]
 8016d58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d119      	bne.n	8016d94 <tcp_output+0x1d0>
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d00b      	beq.n	8016d80 <tcp_output+0x1bc>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d110      	bne.n	8016d94 <tcp_output+0x1d0>
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d76:	891a      	ldrh	r2, [r3, #8]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d209      	bcs.n	8016d94 <tcp_output+0x1d0>
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d004      	beq.n	8016d94 <tcp_output+0x1d0>
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d90:	2b0f      	cmp	r3, #15
 8016d92:	d901      	bls.n	8016d98 <tcp_output+0x1d4>
 8016d94:	2301      	movs	r3, #1
 8016d96:	e000      	b.n	8016d9a <tcp_output+0x1d6>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d106      	bne.n	8016dac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	8b5b      	ldrh	r3, [r3, #26]
 8016da2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	f000 80e4 	beq.w	8016f74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	7d1b      	ldrb	r3, [r3, #20]
 8016db0:	2b02      	cmp	r3, #2
 8016db2:	d00d      	beq.n	8016dd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db6:	68db      	ldr	r3, [r3, #12]
 8016db8:	899b      	ldrh	r3, [r3, #12]
 8016dba:	b29c      	uxth	r4, r3
 8016dbc:	2010      	movs	r0, #16
 8016dbe:	f7f8 ff8d 	bl	800fcdc <lwip_htons>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	461a      	mov	r2, r3
 8016dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc8:	68db      	ldr	r3, [r3, #12]
 8016dca:	4322      	orrs	r2, r4
 8016dcc:	b292      	uxth	r2, r2
 8016dce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016dd0:	697a      	ldr	r2, [r7, #20]
 8016dd2:	6879      	ldr	r1, [r7, #4]
 8016dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dd6:	f000 f909 	bl	8016fec <tcp_output_segment>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d016      	beq.n	8016e14 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	8b5b      	ldrh	r3, [r3, #26]
 8016dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dee:	b29a      	uxth	r2, r3
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	835a      	strh	r2, [r3, #26]
      return err;
 8016df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016df8:	e0d3      	b.n	8016fa2 <tcp_output+0x3de>
 8016dfa:	bf00      	nop
 8016dfc:	0801f8f8 	.word	0x0801f8f8
 8016e00:	0801fe3c 	.word	0x0801fe3c
 8016e04:	0801f94c 	.word	0x0801f94c
 8016e08:	0801fe54 	.word	0x0801fe54
 8016e0c:	20007098 	.word	0x20007098
 8016e10:	0801fe7c 	.word	0x0801fe7c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e16:	681a      	ldr	r2, [r3, #0]
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	7d1b      	ldrb	r3, [r3, #20]
 8016e20:	2b02      	cmp	r3, #2
 8016e22:	d006      	beq.n	8016e32 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	8b5b      	ldrh	r3, [r3, #26]
 8016e28:	f023 0303 	bic.w	r3, r3, #3
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e34:	68db      	ldr	r3, [r3, #12]
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7f8 ff64 	bl	800fd06 <lwip_htonl>
 8016e3e:	4604      	mov	r4, r0
 8016e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e42:	891b      	ldrh	r3, [r3, #8]
 8016e44:	461d      	mov	r5, r3
 8016e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e48:	68db      	ldr	r3, [r3, #12]
 8016e4a:	899b      	ldrh	r3, [r3, #12]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7f8 ff44 	bl	800fcdc <lwip_htons>
 8016e54:	4603      	mov	r3, r0
 8016e56:	b2db      	uxtb	r3, r3
 8016e58:	f003 0303 	and.w	r3, r3, #3
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d001      	beq.n	8016e64 <tcp_output+0x2a0>
 8016e60:	2301      	movs	r3, #1
 8016e62:	e000      	b.n	8016e66 <tcp_output+0x2a2>
 8016e64:	2300      	movs	r3, #0
 8016e66:	442b      	add	r3, r5
 8016e68:	4423      	add	r3, r4
 8016e6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	1ad3      	subs	r3, r2, r3
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	da02      	bge.n	8016e7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e80:	891b      	ldrh	r3, [r3, #8]
 8016e82:	461c      	mov	r4, r3
 8016e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	899b      	ldrh	r3, [r3, #12]
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f8 ff25 	bl	800fcdc <lwip_htons>
 8016e92:	4603      	mov	r3, r0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	f003 0303 	and.w	r3, r3, #3
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d001      	beq.n	8016ea2 <tcp_output+0x2de>
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	e000      	b.n	8016ea4 <tcp_output+0x2e0>
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	4423      	add	r3, r4
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d049      	beq.n	8016f3e <tcp_output+0x37a>
      seg->next = NULL;
 8016eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eac:	2200      	movs	r2, #0
 8016eae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d105      	bne.n	8016ec4 <tcp_output+0x300>
        pcb->unacked = seg;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ebc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec0:	623b      	str	r3, [r7, #32]
 8016ec2:	e03f      	b.n	8016f44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7f8 ff1b 	bl	800fd06 <lwip_htonl>
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	6a3b      	ldr	r3, [r7, #32]
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7f8 ff14 	bl	800fd06 <lwip_htonl>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	1ae3      	subs	r3, r4, r3
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	da24      	bge.n	8016f30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	3370      	adds	r3, #112	; 0x70
 8016eea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016eec:	e002      	b.n	8016ef4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ef4:	69fb      	ldr	r3, [r7, #28]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d011      	beq.n	8016f20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016efc:	69fb      	ldr	r3, [r7, #28]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7f8 fefe 	bl	800fd06 <lwip_htonl>
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0e:	68db      	ldr	r3, [r3, #12]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7f8 fef7 	bl	800fd06 <lwip_htonl>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	dbe6      	blt.n	8016eee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	681a      	ldr	r2, [r3, #0]
 8016f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f2c:	601a      	str	r2, [r3, #0]
 8016f2e:	e009      	b.n	8016f44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f30:	6a3b      	ldr	r3, [r7, #32]
 8016f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f36:	6a3b      	ldr	r3, [r7, #32]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	623b      	str	r3, [r7, #32]
 8016f3c:	e002      	b.n	8016f44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f40:	f7fb ff37 	bl	8012db2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d012      	beq.n	8016f76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7f8 fed5 	bl	800fd06 <lwip_htonl>
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f62:	1ad3      	subs	r3, r2, r3
 8016f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f66:	8912      	ldrh	r2, [r2, #8]
 8016f68:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f6a:	69ba      	ldr	r2, [r7, #24]
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	f4bf aed9 	bcs.w	8016d24 <tcp_output+0x160>
 8016f72:	e000      	b.n	8016f76 <tcp_output+0x3b2>
      break;
 8016f74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d108      	bne.n	8016f90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2200      	movs	r2, #0
 8016f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016f86:	e004      	b.n	8016f92 <tcp_output+0x3ce>
    goto output_done;
 8016f88:	bf00      	nop
 8016f8a:	e002      	b.n	8016f92 <tcp_output+0x3ce>
    goto output_done;
 8016f8c:	bf00      	nop
 8016f8e:	e000      	b.n	8016f92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016f90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	8b5b      	ldrh	r3, [r3, #26]
 8016f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016f9a:	b29a      	uxth	r2, r3
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016fa0:	2300      	movs	r3, #0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3728      	adds	r7, #40	; 0x28
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8016faa:	bf00      	nop

08016fac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b082      	sub	sp, #8
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d106      	bne.n	8016fc8 <tcp_output_segment_busy+0x1c>
 8016fba:	4b09      	ldr	r3, [pc, #36]	; (8016fe0 <tcp_output_segment_busy+0x34>)
 8016fbc:	f240 529a 	movw	r2, #1434	; 0x59a
 8016fc0:	4908      	ldr	r1, [pc, #32]	; (8016fe4 <tcp_output_segment_busy+0x38>)
 8016fc2:	4809      	ldr	r0, [pc, #36]	; (8016fe8 <tcp_output_segment_busy+0x3c>)
 8016fc4:	f004 f930 	bl	801b228 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	685b      	ldr	r3, [r3, #4]
 8016fcc:	7b9b      	ldrb	r3, [r3, #14]
 8016fce:	2b01      	cmp	r3, #1
 8016fd0:	d001      	beq.n	8016fd6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	e000      	b.n	8016fd8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016fd6:	2300      	movs	r3, #0
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	0801f8f8 	.word	0x0801f8f8
 8016fe4:	0801fe94 	.word	0x0801fe94
 8016fe8:	0801f94c 	.word	0x0801f94c

08016fec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016fec:	b5b0      	push	{r4, r5, r7, lr}
 8016fee:	b08c      	sub	sp, #48	; 0x30
 8016ff0:	af04      	add	r7, sp, #16
 8016ff2:	60f8      	str	r0, [r7, #12]
 8016ff4:	60b9      	str	r1, [r7, #8]
 8016ff6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d106      	bne.n	801700c <tcp_output_segment+0x20>
 8016ffe:	4b64      	ldr	r3, [pc, #400]	; (8017190 <tcp_output_segment+0x1a4>)
 8017000:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017004:	4963      	ldr	r1, [pc, #396]	; (8017194 <tcp_output_segment+0x1a8>)
 8017006:	4864      	ldr	r0, [pc, #400]	; (8017198 <tcp_output_segment+0x1ac>)
 8017008:	f004 f90e 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d106      	bne.n	8017020 <tcp_output_segment+0x34>
 8017012:	4b5f      	ldr	r3, [pc, #380]	; (8017190 <tcp_output_segment+0x1a4>)
 8017014:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017018:	4960      	ldr	r1, [pc, #384]	; (801719c <tcp_output_segment+0x1b0>)
 801701a:	485f      	ldr	r0, [pc, #380]	; (8017198 <tcp_output_segment+0x1ac>)
 801701c:	f004 f904 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d106      	bne.n	8017034 <tcp_output_segment+0x48>
 8017026:	4b5a      	ldr	r3, [pc, #360]	; (8017190 <tcp_output_segment+0x1a4>)
 8017028:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801702c:	495c      	ldr	r1, [pc, #368]	; (80171a0 <tcp_output_segment+0x1b4>)
 801702e:	485a      	ldr	r0, [pc, #360]	; (8017198 <tcp_output_segment+0x1ac>)
 8017030:	f004 f8fa 	bl	801b228 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017034:	68f8      	ldr	r0, [r7, #12]
 8017036:	f7ff ffb9 	bl	8016fac <tcp_output_segment_busy>
 801703a:	4603      	mov	r3, r0
 801703c:	2b00      	cmp	r3, #0
 801703e:	d001      	beq.n	8017044 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017040:	2300      	movs	r3, #0
 8017042:	e0a1      	b.n	8017188 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	68dc      	ldr	r4, [r3, #12]
 801704c:	4610      	mov	r0, r2
 801704e:	f7f8 fe5a 	bl	800fd06 <lwip_htonl>
 8017052:	4603      	mov	r3, r0
 8017054:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	68dc      	ldr	r4, [r3, #12]
 801705e:	4610      	mov	r0, r2
 8017060:	f7f8 fe3c 	bl	800fcdc <lwip_htons>
 8017064:	4603      	mov	r3, r0
 8017066:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017070:	441a      	add	r2, r3
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	68db      	ldr	r3, [r3, #12]
 801707a:	3314      	adds	r3, #20
 801707c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	7a9b      	ldrb	r3, [r3, #10]
 8017082:	f003 0301 	and.w	r3, r3, #1
 8017086:	2b00      	cmp	r3, #0
 8017088:	d015      	beq.n	80170b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	3304      	adds	r3, #4
 801708e:	461a      	mov	r2, r3
 8017090:	6879      	ldr	r1, [r7, #4]
 8017092:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8017096:	f7fc fa33 	bl	8013500 <tcp_eff_send_mss_netif>
 801709a:	4603      	mov	r3, r0
 801709c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801709e:	8b7b      	ldrh	r3, [r7, #26]
 80170a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f8 fe2e 	bl	800fd06 <lwip_htonl>
 80170aa:	4602      	mov	r2, r0
 80170ac:	69fb      	ldr	r3, [r7, #28]
 80170ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	3304      	adds	r3, #4
 80170b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170bc:	2b00      	cmp	r3, #0
 80170be:	da02      	bge.n	80170c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	2200      	movs	r2, #0
 80170c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d10c      	bne.n	80170e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80170ce:	4b35      	ldr	r3, [pc, #212]	; (80171a4 <tcp_output_segment+0x1b8>)
 80170d0:	681a      	ldr	r2, [r3, #0]
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	4618      	mov	r0, r3
 80170de:	f7f8 fe12 	bl	800fd06 <lwip_htonl>
 80170e2:	4602      	mov	r2, r0
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	68da      	ldr	r2, [r3, #12]
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	8959      	ldrh	r1, [r3, #10]
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	685b      	ldr	r3, [r3, #4]
 8017100:	8b3a      	ldrh	r2, [r7, #24]
 8017102:	1a8a      	subs	r2, r1, r2
 8017104:	b292      	uxth	r2, r2
 8017106:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	8919      	ldrh	r1, [r3, #8]
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	685b      	ldr	r3, [r3, #4]
 8017112:	8b3a      	ldrh	r2, [r7, #24]
 8017114:	1a8a      	subs	r2, r1, r2
 8017116:	b292      	uxth	r2, r2
 8017118:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	68fa      	ldr	r2, [r7, #12]
 8017120:	68d2      	ldr	r2, [r2, #12]
 8017122:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	68db      	ldr	r3, [r3, #12]
 8017128:	2200      	movs	r2, #0
 801712a:	741a      	strb	r2, [r3, #16]
 801712c:	2200      	movs	r2, #0
 801712e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	68da      	ldr	r2, [r3, #12]
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	7a9b      	ldrb	r3, [r3, #10]
 8017138:	f003 0301 	and.w	r3, r3, #1
 801713c:	2b00      	cmp	r3, #0
 801713e:	d001      	beq.n	8017144 <tcp_output_segment+0x158>
 8017140:	2318      	movs	r3, #24
 8017142:	e000      	b.n	8017146 <tcp_output_segment+0x15a>
 8017144:	2314      	movs	r3, #20
 8017146:	4413      	add	r3, r2
 8017148:	69fa      	ldr	r2, [r7, #28]
 801714a:	429a      	cmp	r2, r3
 801714c:	d006      	beq.n	801715c <tcp_output_segment+0x170>
 801714e:	4b10      	ldr	r3, [pc, #64]	; (8017190 <tcp_output_segment+0x1a4>)
 8017150:	f240 621c 	movw	r2, #1564	; 0x61c
 8017154:	4914      	ldr	r1, [pc, #80]	; (80171a8 <tcp_output_segment+0x1bc>)
 8017156:	4810      	ldr	r0, [pc, #64]	; (8017198 <tcp_output_segment+0x1ac>)
 8017158:	f004 f866 	bl	801b228 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6858      	ldr	r0, [r3, #4]
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	1d1c      	adds	r4, r3, #4
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	7add      	ldrb	r5, [r3, #11]
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	7a9b      	ldrb	r3, [r3, #10]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	9202      	str	r2, [sp, #8]
 8017172:	2206      	movs	r2, #6
 8017174:	9201      	str	r2, [sp, #4]
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	462b      	mov	r3, r5
 801717a:	4622      	mov	r2, r4
 801717c:	f002 fa5a 	bl	8019634 <ip4_output_if>
 8017180:	4603      	mov	r3, r0
 8017182:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017188:	4618      	mov	r0, r3
 801718a:	3720      	adds	r7, #32
 801718c:	46bd      	mov	sp, r7
 801718e:	bdb0      	pop	{r4, r5, r7, pc}
 8017190:	0801f8f8 	.word	0x0801f8f8
 8017194:	0801febc 	.word	0x0801febc
 8017198:	0801f94c 	.word	0x0801f94c
 801719c:	0801fedc 	.word	0x0801fedc
 80171a0:	0801fefc 	.word	0x0801fefc
 80171a4:	2000704c 	.word	0x2000704c
 80171a8:	0801ff20 	.word	0x0801ff20

080171ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80171ac:	b5b0      	push	{r4, r5, r7, lr}
 80171ae:	b084      	sub	sp, #16
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <tcp_rexmit_rto_prepare+0x1c>
 80171ba:	4b31      	ldr	r3, [pc, #196]	; (8017280 <tcp_rexmit_rto_prepare+0xd4>)
 80171bc:	f240 6263 	movw	r2, #1635	; 0x663
 80171c0:	4930      	ldr	r1, [pc, #192]	; (8017284 <tcp_rexmit_rto_prepare+0xd8>)
 80171c2:	4831      	ldr	r0, [pc, #196]	; (8017288 <tcp_rexmit_rto_prepare+0xdc>)
 80171c4:	f004 f830 	bl	801b228 <iprintf>

  if (pcb->unacked == NULL) {
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d102      	bne.n	80171d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80171d0:	f06f 0305 	mvn.w	r3, #5
 80171d4:	e050      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171da:	60fb      	str	r3, [r7, #12]
 80171dc:	e00b      	b.n	80171f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f7ff fee4 	bl	8016fac <tcp_output_segment_busy>
 80171e4:	4603      	mov	r3, r0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d002      	beq.n	80171f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80171ea:	f06f 0305 	mvn.w	r3, #5
 80171ee:	e043      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1ef      	bne.n	80171de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80171fe:	68f8      	ldr	r0, [r7, #12]
 8017200:	f7ff fed4 	bl	8016fac <tcp_output_segment_busy>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d002      	beq.n	8017210 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801720a:	f06f 0305 	mvn.w	r3, #5
 801720e:	e033      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2200      	movs	r2, #0
 8017224:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	8b5b      	ldrh	r3, [r3, #26]
 801722a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801722e:	b29a      	uxth	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	68db      	ldr	r3, [r3, #12]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	4618      	mov	r0, r3
 801723c:	f7f8 fd63 	bl	800fd06 <lwip_htonl>
 8017240:	4604      	mov	r4, r0
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	891b      	ldrh	r3, [r3, #8]
 8017246:	461d      	mov	r5, r3
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	899b      	ldrh	r3, [r3, #12]
 801724e:	b29b      	uxth	r3, r3
 8017250:	4618      	mov	r0, r3
 8017252:	f7f8 fd43 	bl	800fcdc <lwip_htons>
 8017256:	4603      	mov	r3, r0
 8017258:	b2db      	uxtb	r3, r3
 801725a:	f003 0303 	and.w	r3, r3, #3
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <tcp_rexmit_rto_prepare+0xba>
 8017262:	2301      	movs	r3, #1
 8017264:	e000      	b.n	8017268 <tcp_rexmit_rto_prepare+0xbc>
 8017266:	2300      	movs	r3, #0
 8017268:	442b      	add	r3, r5
 801726a:	18e2      	adds	r2, r4, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2200      	movs	r2, #0
 8017274:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017276:	2300      	movs	r3, #0
}
 8017278:	4618      	mov	r0, r3
 801727a:	3710      	adds	r7, #16
 801727c:	46bd      	mov	sp, r7
 801727e:	bdb0      	pop	{r4, r5, r7, pc}
 8017280:	0801f8f8 	.word	0x0801f8f8
 8017284:	0801ff34 	.word	0x0801ff34
 8017288:	0801f94c 	.word	0x0801f94c

0801728c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d106      	bne.n	80172a8 <tcp_rexmit_rto_commit+0x1c>
 801729a:	4b0d      	ldr	r3, [pc, #52]	; (80172d0 <tcp_rexmit_rto_commit+0x44>)
 801729c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80172a0:	490c      	ldr	r1, [pc, #48]	; (80172d4 <tcp_rexmit_rto_commit+0x48>)
 80172a2:	480d      	ldr	r0, [pc, #52]	; (80172d8 <tcp_rexmit_rto_commit+0x4c>)
 80172a4:	f003 ffc0 	bl	801b228 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172ae:	2bff      	cmp	r3, #255	; 0xff
 80172b0:	d007      	beq.n	80172c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172b8:	3301      	adds	r3, #1
 80172ba:	b2da      	uxtb	r2, r3
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f7ff fc7e 	bl	8016bc4 <tcp_output>
}
 80172c8:	bf00      	nop
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	0801f8f8 	.word	0x0801f8f8
 80172d4:	0801ff58 	.word	0x0801ff58
 80172d8:	0801f94c 	.word	0x0801f94c

080172dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <tcp_rexmit_rto+0x1c>
 80172ea:	4b0a      	ldr	r3, [pc, #40]	; (8017314 <tcp_rexmit_rto+0x38>)
 80172ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80172f0:	4909      	ldr	r1, [pc, #36]	; (8017318 <tcp_rexmit_rto+0x3c>)
 80172f2:	480a      	ldr	r0, [pc, #40]	; (801731c <tcp_rexmit_rto+0x40>)
 80172f4:	f003 ff98 	bl	801b228 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7ff ff57 	bl	80171ac <tcp_rexmit_rto_prepare>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d102      	bne.n	801730a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7ff ffc1 	bl	801728c <tcp_rexmit_rto_commit>
  }
}
 801730a:	bf00      	nop
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	0801f8f8 	.word	0x0801f8f8
 8017318:	0801ff7c 	.word	0x0801ff7c
 801731c:	0801f94c 	.word	0x0801f94c

08017320 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b085      	sub	sp, #20
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d106      	bne.n	801733c <tcp_rexmit+0x1c>
 801732e:	4b2f      	ldr	r3, [pc, #188]	; (80173ec <tcp_rexmit+0xcc>)
 8017330:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017334:	492e      	ldr	r1, [pc, #184]	; (80173f0 <tcp_rexmit+0xd0>)
 8017336:	482f      	ldr	r0, [pc, #188]	; (80173f4 <tcp_rexmit+0xd4>)
 8017338:	f003 ff76 	bl	801b228 <iprintf>

  if (pcb->unacked == NULL) {
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017340:	2b00      	cmp	r3, #0
 8017342:	d102      	bne.n	801734a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017344:	f06f 0305 	mvn.w	r3, #5
 8017348:	e04c      	b.n	80173e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801734e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017350:	68b8      	ldr	r0, [r7, #8]
 8017352:	f7ff fe2b 	bl	8016fac <tcp_output_segment_busy>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d002      	beq.n	8017362 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801735c:	f06f 0305 	mvn.w	r3, #5
 8017360:	e040      	b.n	80173e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	336c      	adds	r3, #108	; 0x6c
 801736e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017370:	e002      	b.n	8017378 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d011      	beq.n	80173a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	68db      	ldr	r3, [r3, #12]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	4618      	mov	r0, r3
 801738a:	f7f8 fcbc 	bl	800fd06 <lwip_htonl>
 801738e:	4604      	mov	r4, r0
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	4618      	mov	r0, r3
 8017398:	f7f8 fcb5 	bl	800fd06 <lwip_htonl>
 801739c:	4603      	mov	r3, r0
 801739e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	dbe6      	blt.n	8017372 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	68ba      	ldr	r2, [r7, #8]
 80173b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d103      	bne.n	80173c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2200      	movs	r2, #0
 80173be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80173c8:	2bff      	cmp	r3, #255	; 0xff
 80173ca:	d007      	beq.n	80173dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80173d2:	3301      	adds	r3, #1
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3714      	adds	r7, #20
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd90      	pop	{r4, r7, pc}
 80173ec:	0801f8f8 	.word	0x0801f8f8
 80173f0:	0801ff98 	.word	0x0801ff98
 80173f4:	0801f94c 	.word	0x0801f94c

080173f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d106      	bne.n	8017414 <tcp_rexmit_fast+0x1c>
 8017406:	4b2a      	ldr	r3, [pc, #168]	; (80174b0 <tcp_rexmit_fast+0xb8>)
 8017408:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801740c:	4929      	ldr	r1, [pc, #164]	; (80174b4 <tcp_rexmit_fast+0xbc>)
 801740e:	482a      	ldr	r0, [pc, #168]	; (80174b8 <tcp_rexmit_fast+0xc0>)
 8017410:	f003 ff0a 	bl	801b228 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017418:	2b00      	cmp	r3, #0
 801741a:	d045      	beq.n	80174a8 <tcp_rexmit_fast+0xb0>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	8b5b      	ldrh	r3, [r3, #26]
 8017420:	f003 0304 	and.w	r3, r3, #4
 8017424:	2b00      	cmp	r3, #0
 8017426:	d13f      	bne.n	80174a8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f7ff ff79 	bl	8017320 <tcp_rexmit>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d139      	bne.n	80174a8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017440:	4293      	cmp	r3, r2
 8017442:	bf28      	it	cs
 8017444:	4613      	movcs	r3, r2
 8017446:	b29b      	uxth	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	da00      	bge.n	801744e <tcp_rexmit_fast+0x56>
 801744c:	3301      	adds	r3, #1
 801744e:	105b      	asrs	r3, r3, #1
 8017450:	b29a      	uxth	r2, r3
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801745e:	461a      	mov	r2, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	429a      	cmp	r2, r3
 8017468:	d206      	bcs.n	8017478 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	b29a      	uxth	r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017482:	4619      	mov	r1, r3
 8017484:	0049      	lsls	r1, r1, #1
 8017486:	440b      	add	r3, r1
 8017488:	b29b      	uxth	r3, r3
 801748a:	4413      	add	r3, r2
 801748c:	b29a      	uxth	r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	8b5b      	ldrh	r3, [r3, #26]
 8017498:	f043 0304 	orr.w	r3, r3, #4
 801749c:	b29a      	uxth	r2, r3
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80174a8:	bf00      	nop
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	0801f8f8 	.word	0x0801f8f8
 80174b4:	0801ffb0 	.word	0x0801ffb0
 80174b8:	0801f94c 	.word	0x0801f94c

080174bc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	607b      	str	r3, [r7, #4]
 80174c6:	460b      	mov	r3, r1
 80174c8:	817b      	strh	r3, [r7, #10]
 80174ca:	4613      	mov	r3, r2
 80174cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80174ce:	897a      	ldrh	r2, [r7, #10]
 80174d0:	893b      	ldrh	r3, [r7, #8]
 80174d2:	4413      	add	r3, r2
 80174d4:	b29b      	uxth	r3, r3
 80174d6:	3314      	adds	r3, #20
 80174d8:	b29b      	uxth	r3, r3
 80174da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174de:	4619      	mov	r1, r3
 80174e0:	2022      	movs	r0, #34	; 0x22
 80174e2:	f7f9 fd1b 	bl	8010f1c <pbuf_alloc>
 80174e6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d04d      	beq.n	801758a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80174ee:	897b      	ldrh	r3, [r7, #10]
 80174f0:	3313      	adds	r3, #19
 80174f2:	697a      	ldr	r2, [r7, #20]
 80174f4:	8952      	ldrh	r2, [r2, #10]
 80174f6:	4293      	cmp	r3, r2
 80174f8:	db06      	blt.n	8017508 <tcp_output_alloc_header_common+0x4c>
 80174fa:	4b26      	ldr	r3, [pc, #152]	; (8017594 <tcp_output_alloc_header_common+0xd8>)
 80174fc:	f240 7223 	movw	r2, #1827	; 0x723
 8017500:	4925      	ldr	r1, [pc, #148]	; (8017598 <tcp_output_alloc_header_common+0xdc>)
 8017502:	4826      	ldr	r0, [pc, #152]	; (801759c <tcp_output_alloc_header_common+0xe0>)
 8017504:	f003 fe90 	bl	801b228 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	685b      	ldr	r3, [r3, #4]
 801750c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801750e:	8c3b      	ldrh	r3, [r7, #32]
 8017510:	4618      	mov	r0, r3
 8017512:	f7f8 fbe3 	bl	800fcdc <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	461a      	mov	r2, r3
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801751e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017520:	4618      	mov	r0, r3
 8017522:	f7f8 fbdb 	bl	800fcdc <lwip_htons>
 8017526:	4603      	mov	r3, r0
 8017528:	461a      	mov	r2, r3
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f7f8 fbe6 	bl	800fd06 <lwip_htonl>
 801753a:	4602      	mov	r2, r0
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017540:	897b      	ldrh	r3, [r7, #10]
 8017542:	089b      	lsrs	r3, r3, #2
 8017544:	b29b      	uxth	r3, r3
 8017546:	3305      	adds	r3, #5
 8017548:	b29b      	uxth	r3, r3
 801754a:	031b      	lsls	r3, r3, #12
 801754c:	b29a      	uxth	r2, r3
 801754e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017552:	b29b      	uxth	r3, r3
 8017554:	4313      	orrs	r3, r2
 8017556:	b29b      	uxth	r3, r3
 8017558:	4618      	mov	r0, r3
 801755a:	f7f8 fbbf 	bl	800fcdc <lwip_htons>
 801755e:	4603      	mov	r3, r0
 8017560:	461a      	mov	r2, r3
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017568:	4618      	mov	r0, r3
 801756a:	f7f8 fbb7 	bl	800fcdc <lwip_htons>
 801756e:	4603      	mov	r3, r0
 8017570:	461a      	mov	r2, r3
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	2200      	movs	r2, #0
 801757a:	741a      	strb	r2, [r3, #16]
 801757c:	2200      	movs	r2, #0
 801757e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	2200      	movs	r2, #0
 8017584:	749a      	strb	r2, [r3, #18]
 8017586:	2200      	movs	r2, #0
 8017588:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801758a:	697b      	ldr	r3, [r7, #20]
}
 801758c:	4618      	mov	r0, r3
 801758e:	3718      	adds	r7, #24
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	0801f8f8 	.word	0x0801f8f8
 8017598:	0801ffd0 	.word	0x0801ffd0
 801759c:	0801f94c 	.word	0x0801f94c

080175a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175a0:	b5b0      	push	{r4, r5, r7, lr}
 80175a2:	b08a      	sub	sp, #40	; 0x28
 80175a4:	af04      	add	r7, sp, #16
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	607b      	str	r3, [r7, #4]
 80175aa:	460b      	mov	r3, r1
 80175ac:	817b      	strh	r3, [r7, #10]
 80175ae:	4613      	mov	r3, r2
 80175b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d106      	bne.n	80175c6 <tcp_output_alloc_header+0x26>
 80175b8:	4b15      	ldr	r3, [pc, #84]	; (8017610 <tcp_output_alloc_header+0x70>)
 80175ba:	f240 7242 	movw	r2, #1858	; 0x742
 80175be:	4915      	ldr	r1, [pc, #84]	; (8017614 <tcp_output_alloc_header+0x74>)
 80175c0:	4815      	ldr	r0, [pc, #84]	; (8017618 <tcp_output_alloc_header+0x78>)
 80175c2:	f003 fe31 	bl	801b228 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	8adb      	ldrh	r3, [r3, #22]
 80175ce:	68fa      	ldr	r2, [r7, #12]
 80175d0:	8b12      	ldrh	r2, [r2, #24]
 80175d2:	68f9      	ldr	r1, [r7, #12]
 80175d4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80175d6:	893d      	ldrh	r5, [r7, #8]
 80175d8:	897c      	ldrh	r4, [r7, #10]
 80175da:	9103      	str	r1, [sp, #12]
 80175dc:	2110      	movs	r1, #16
 80175de:	9102      	str	r1, [sp, #8]
 80175e0:	9201      	str	r2, [sp, #4]
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	462a      	mov	r2, r5
 80175e8:	4621      	mov	r1, r4
 80175ea:	f7ff ff67 	bl	80174bc <tcp_output_alloc_header_common>
 80175ee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80175f0:	697b      	ldr	r3, [r7, #20]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d006      	beq.n	8017604 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80175fe:	441a      	add	r2, r3
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017604:	697b      	ldr	r3, [r7, #20]
}
 8017606:	4618      	mov	r0, r3
 8017608:	3718      	adds	r7, #24
 801760a:	46bd      	mov	sp, r7
 801760c:	bdb0      	pop	{r4, r5, r7, pc}
 801760e:	bf00      	nop
 8017610:	0801f8f8 	.word	0x0801f8f8
 8017614:	08020000 	.word	0x08020000
 8017618:	0801f94c 	.word	0x0801f94c

0801761c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b088      	sub	sp, #32
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	4611      	mov	r1, r2
 8017628:	461a      	mov	r2, r3
 801762a:	460b      	mov	r3, r1
 801762c:	71fb      	strb	r3, [r7, #7]
 801762e:	4613      	mov	r3, r2
 8017630:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017632:	2300      	movs	r3, #0
 8017634:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <tcp_output_fill_options+0x2e>
 801763c:	4b12      	ldr	r3, [pc, #72]	; (8017688 <tcp_output_fill_options+0x6c>)
 801763e:	f240 7256 	movw	r2, #1878	; 0x756
 8017642:	4912      	ldr	r1, [pc, #72]	; (801768c <tcp_output_fill_options+0x70>)
 8017644:	4812      	ldr	r0, [pc, #72]	; (8017690 <tcp_output_fill_options+0x74>)
 8017646:	f003 fdef 	bl	801b228 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	3314      	adds	r3, #20
 8017654:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017656:	8bfb      	ldrh	r3, [r7, #30]
 8017658:	009b      	lsls	r3, r3, #2
 801765a:	461a      	mov	r2, r3
 801765c:	79fb      	ldrb	r3, [r7, #7]
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	f003 0304 	and.w	r3, r3, #4
 8017664:	4413      	add	r3, r2
 8017666:	3314      	adds	r3, #20
 8017668:	69ba      	ldr	r2, [r7, #24]
 801766a:	4413      	add	r3, r2
 801766c:	697a      	ldr	r2, [r7, #20]
 801766e:	429a      	cmp	r2, r3
 8017670:	d006      	beq.n	8017680 <tcp_output_fill_options+0x64>
 8017672:	4b05      	ldr	r3, [pc, #20]	; (8017688 <tcp_output_fill_options+0x6c>)
 8017674:	f240 7275 	movw	r2, #1909	; 0x775
 8017678:	4906      	ldr	r1, [pc, #24]	; (8017694 <tcp_output_fill_options+0x78>)
 801767a:	4805      	ldr	r0, [pc, #20]	; (8017690 <tcp_output_fill_options+0x74>)
 801767c:	f003 fdd4 	bl	801b228 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017680:	bf00      	nop
 8017682:	3720      	adds	r7, #32
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	0801f8f8 	.word	0x0801f8f8
 801768c:	08020028 	.word	0x08020028
 8017690:	0801f94c 	.word	0x0801f94c
 8017694:	0801ff20 	.word	0x0801ff20

08017698 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b08a      	sub	sp, #40	; 0x28
 801769c:	af04      	add	r7, sp, #16
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
 80176a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176a6:	68bb      	ldr	r3, [r7, #8]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d106      	bne.n	80176ba <tcp_output_control_segment+0x22>
 80176ac:	4b1c      	ldr	r3, [pc, #112]	; (8017720 <tcp_output_control_segment+0x88>)
 80176ae:	f240 7287 	movw	r2, #1927	; 0x787
 80176b2:	491c      	ldr	r1, [pc, #112]	; (8017724 <tcp_output_control_segment+0x8c>)
 80176b4:	481c      	ldr	r0, [pc, #112]	; (8017728 <tcp_output_control_segment+0x90>)
 80176b6:	f003 fdb7 	bl	801b228 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80176ba:	683a      	ldr	r2, [r7, #0]
 80176bc:	6879      	ldr	r1, [r7, #4]
 80176be:	68f8      	ldr	r0, [r7, #12]
 80176c0:	f7fe fae8 	bl	8015c94 <tcp_route>
 80176c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d102      	bne.n	80176d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80176cc:	23fc      	movs	r3, #252	; 0xfc
 80176ce:	75fb      	strb	r3, [r7, #23]
 80176d0:	e01c      	b.n	801770c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d006      	beq.n	80176e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	7adb      	ldrb	r3, [r3, #11]
 80176dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	7a9b      	ldrb	r3, [r3, #10]
 80176e2:	757b      	strb	r3, [r7, #21]
 80176e4:	e003      	b.n	80176ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80176e6:	23ff      	movs	r3, #255	; 0xff
 80176e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80176ea:	2300      	movs	r3, #0
 80176ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80176ee:	7dba      	ldrb	r2, [r7, #22]
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	9302      	str	r3, [sp, #8]
 80176f4:	2306      	movs	r3, #6
 80176f6:	9301      	str	r3, [sp, #4]
 80176f8:	7d7b      	ldrb	r3, [r7, #21]
 80176fa:	9300      	str	r3, [sp, #0]
 80176fc:	4613      	mov	r3, r2
 80176fe:	683a      	ldr	r2, [r7, #0]
 8017700:	6879      	ldr	r1, [r7, #4]
 8017702:	68b8      	ldr	r0, [r7, #8]
 8017704:	f001 ff96 	bl	8019634 <ip4_output_if>
 8017708:	4603      	mov	r3, r0
 801770a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801770c:	68b8      	ldr	r0, [r7, #8]
 801770e:	f7f9 fee9 	bl	80114e4 <pbuf_free>
  return err;
 8017712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017716:	4618      	mov	r0, r3
 8017718:	3718      	adds	r7, #24
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	0801f8f8 	.word	0x0801f8f8
 8017724:	08020050 	.word	0x08020050
 8017728:	0801f94c 	.word	0x0801f94c

0801772c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801772c:	b590      	push	{r4, r7, lr}
 801772e:	b08b      	sub	sp, #44	; 0x2c
 8017730:	af04      	add	r7, sp, #16
 8017732:	60f8      	str	r0, [r7, #12]
 8017734:	60b9      	str	r1, [r7, #8]
 8017736:	607a      	str	r2, [r7, #4]
 8017738:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801773a:	683b      	ldr	r3, [r7, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d106      	bne.n	801774e <tcp_rst+0x22>
 8017740:	4b1f      	ldr	r3, [pc, #124]	; (80177c0 <tcp_rst+0x94>)
 8017742:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017746:	491f      	ldr	r1, [pc, #124]	; (80177c4 <tcp_rst+0x98>)
 8017748:	481f      	ldr	r0, [pc, #124]	; (80177c8 <tcp_rst+0x9c>)
 801774a:	f003 fd6d 	bl	801b228 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	2b00      	cmp	r3, #0
 8017752:	d106      	bne.n	8017762 <tcp_rst+0x36>
 8017754:	4b1a      	ldr	r3, [pc, #104]	; (80177c0 <tcp_rst+0x94>)
 8017756:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801775a:	491c      	ldr	r1, [pc, #112]	; (80177cc <tcp_rst+0xa0>)
 801775c:	481a      	ldr	r0, [pc, #104]	; (80177c8 <tcp_rst+0x9c>)
 801775e:	f003 fd63 	bl	801b228 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017762:	2300      	movs	r3, #0
 8017764:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017766:	f24d 0316 	movw	r3, #53270	; 0xd016
 801776a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801776c:	7dfb      	ldrb	r3, [r7, #23]
 801776e:	b29c      	uxth	r4, r3
 8017770:	68b8      	ldr	r0, [r7, #8]
 8017772:	f7f8 fac8 	bl	800fd06 <lwip_htonl>
 8017776:	4602      	mov	r2, r0
 8017778:	8abb      	ldrh	r3, [r7, #20]
 801777a:	9303      	str	r3, [sp, #12]
 801777c:	2314      	movs	r3, #20
 801777e:	9302      	str	r3, [sp, #8]
 8017780:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017782:	9301      	str	r3, [sp, #4]
 8017784:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017786:	9300      	str	r3, [sp, #0]
 8017788:	4613      	mov	r3, r2
 801778a:	2200      	movs	r2, #0
 801778c:	4621      	mov	r1, r4
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f7ff fe94 	bl	80174bc <tcp_output_alloc_header_common>
 8017794:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017796:	693b      	ldr	r3, [r7, #16]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d00c      	beq.n	80177b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801779c:	7dfb      	ldrb	r3, [r7, #23]
 801779e:	2200      	movs	r2, #0
 80177a0:	6939      	ldr	r1, [r7, #16]
 80177a2:	68f8      	ldr	r0, [r7, #12]
 80177a4:	f7ff ff3a 	bl	801761c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80177a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177aa:	683a      	ldr	r2, [r7, #0]
 80177ac:	6939      	ldr	r1, [r7, #16]
 80177ae:	68f8      	ldr	r0, [r7, #12]
 80177b0:	f7ff ff72 	bl	8017698 <tcp_output_control_segment>
 80177b4:	e000      	b.n	80177b8 <tcp_rst+0x8c>
    return;
 80177b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80177b8:	371c      	adds	r7, #28
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd90      	pop	{r4, r7, pc}
 80177be:	bf00      	nop
 80177c0:	0801f8f8 	.word	0x0801f8f8
 80177c4:	0802007c 	.word	0x0802007c
 80177c8:	0801f94c 	.word	0x0801f94c
 80177cc:	08020098 	.word	0x08020098

080177d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80177d0:	b590      	push	{r4, r7, lr}
 80177d2:	b087      	sub	sp, #28
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80177d8:	2300      	movs	r3, #0
 80177da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d106      	bne.n	80177f4 <tcp_send_empty_ack+0x24>
 80177e6:	4b28      	ldr	r3, [pc, #160]	; (8017888 <tcp_send_empty_ack+0xb8>)
 80177e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80177ec:	4927      	ldr	r1, [pc, #156]	; (801788c <tcp_send_empty_ack+0xbc>)
 80177ee:	4828      	ldr	r0, [pc, #160]	; (8017890 <tcp_send_empty_ack+0xc0>)
 80177f0:	f003 fd1a 	bl	801b228 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177f4:	7dfb      	ldrb	r3, [r7, #23]
 80177f6:	009b      	lsls	r3, r3, #2
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	f003 0304 	and.w	r3, r3, #4
 80177fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017800:	7d7b      	ldrb	r3, [r7, #21]
 8017802:	b29c      	uxth	r4, r3
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017808:	4618      	mov	r0, r3
 801780a:	f7f8 fa7c 	bl	800fd06 <lwip_htonl>
 801780e:	4603      	mov	r3, r0
 8017810:	2200      	movs	r2, #0
 8017812:	4621      	mov	r1, r4
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7ff fec3 	bl	80175a0 <tcp_output_alloc_header>
 801781a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d109      	bne.n	8017836 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	8b5b      	ldrh	r3, [r3, #26]
 8017826:	f043 0303 	orr.w	r3, r3, #3
 801782a:	b29a      	uxth	r2, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017830:	f06f 0301 	mvn.w	r3, #1
 8017834:	e023      	b.n	801787e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017836:	7dbb      	ldrb	r3, [r7, #22]
 8017838:	7dfa      	ldrb	r2, [r7, #23]
 801783a:	6939      	ldr	r1, [r7, #16]
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f7ff feed 	bl	801761c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017842:	687a      	ldr	r2, [r7, #4]
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	3304      	adds	r3, #4
 8017848:	6939      	ldr	r1, [r7, #16]
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f7ff ff24 	bl	8017698 <tcp_output_control_segment>
 8017850:	4603      	mov	r3, r0
 8017852:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d007      	beq.n	801786c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	8b5b      	ldrh	r3, [r3, #26]
 8017860:	f043 0303 	orr.w	r3, r3, #3
 8017864:	b29a      	uxth	r2, r3
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	835a      	strh	r2, [r3, #26]
 801786a:	e006      	b.n	801787a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	8b5b      	ldrh	r3, [r3, #26]
 8017870:	f023 0303 	bic.w	r3, r3, #3
 8017874:	b29a      	uxth	r2, r3
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801787a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801787e:	4618      	mov	r0, r3
 8017880:	371c      	adds	r7, #28
 8017882:	46bd      	mov	sp, r7
 8017884:	bd90      	pop	{r4, r7, pc}
 8017886:	bf00      	nop
 8017888:	0801f8f8 	.word	0x0801f8f8
 801788c:	080200b4 	.word	0x080200b4
 8017890:	0801f94c 	.word	0x0801f94c

08017894 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017894:	b590      	push	{r4, r7, lr}
 8017896:	b087      	sub	sp, #28
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801789c:	2300      	movs	r3, #0
 801789e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d106      	bne.n	80178b4 <tcp_keepalive+0x20>
 80178a6:	4b18      	ldr	r3, [pc, #96]	; (8017908 <tcp_keepalive+0x74>)
 80178a8:	f640 0224 	movw	r2, #2084	; 0x824
 80178ac:	4917      	ldr	r1, [pc, #92]	; (801790c <tcp_keepalive+0x78>)
 80178ae:	4818      	ldr	r0, [pc, #96]	; (8017910 <tcp_keepalive+0x7c>)
 80178b0:	f003 fcba 	bl	801b228 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80178b4:	7dfb      	ldrb	r3, [r7, #23]
 80178b6:	b29c      	uxth	r4, r3
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178bc:	3b01      	subs	r3, #1
 80178be:	4618      	mov	r0, r3
 80178c0:	f7f8 fa21 	bl	800fd06 <lwip_htonl>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2200      	movs	r2, #0
 80178c8:	4621      	mov	r1, r4
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f7ff fe68 	bl	80175a0 <tcp_output_alloc_header>
 80178d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d102      	bne.n	80178de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80178d8:	f04f 33ff 	mov.w	r3, #4294967295
 80178dc:	e010      	b.n	8017900 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80178de:	7dfb      	ldrb	r3, [r7, #23]
 80178e0:	2200      	movs	r2, #0
 80178e2:	6939      	ldr	r1, [r7, #16]
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7ff fe99 	bl	801761c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	3304      	adds	r3, #4
 80178f0:	6939      	ldr	r1, [r7, #16]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ff fed0 	bl	8017698 <tcp_output_control_segment>
 80178f8:	4603      	mov	r3, r0
 80178fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80178fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017900:	4618      	mov	r0, r3
 8017902:	371c      	adds	r7, #28
 8017904:	46bd      	mov	sp, r7
 8017906:	bd90      	pop	{r4, r7, pc}
 8017908:	0801f8f8 	.word	0x0801f8f8
 801790c:	080200d4 	.word	0x080200d4
 8017910:	0801f94c 	.word	0x0801f94c

08017914 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017914:	b590      	push	{r4, r7, lr}
 8017916:	b08b      	sub	sp, #44	; 0x2c
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801791c:	2300      	movs	r3, #0
 801791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d106      	bne.n	8017936 <tcp_zero_window_probe+0x22>
 8017928:	4b4c      	ldr	r3, [pc, #304]	; (8017a5c <tcp_zero_window_probe+0x148>)
 801792a:	f640 024f 	movw	r2, #2127	; 0x84f
 801792e:	494c      	ldr	r1, [pc, #304]	; (8017a60 <tcp_zero_window_probe+0x14c>)
 8017930:	484c      	ldr	r0, [pc, #304]	; (8017a64 <tcp_zero_window_probe+0x150>)
 8017932:	f003 fc79 	bl	801b228 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801793a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801793c:	6a3b      	ldr	r3, [r7, #32]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d101      	bne.n	8017946 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017942:	2300      	movs	r3, #0
 8017944:	e086      	b.n	8017a54 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801794c:	2bff      	cmp	r3, #255	; 0xff
 801794e:	d007      	beq.n	8017960 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017956:	3301      	adds	r3, #1
 8017958:	b2da      	uxtb	r2, r3
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017960:	6a3b      	ldr	r3, [r7, #32]
 8017962:	68db      	ldr	r3, [r3, #12]
 8017964:	899b      	ldrh	r3, [r3, #12]
 8017966:	b29b      	uxth	r3, r3
 8017968:	4618      	mov	r0, r3
 801796a:	f7f8 f9b7 	bl	800fcdc <lwip_htons>
 801796e:	4603      	mov	r3, r0
 8017970:	b2db      	uxtb	r3, r3
 8017972:	f003 0301 	and.w	r3, r3, #1
 8017976:	2b00      	cmp	r3, #0
 8017978:	d005      	beq.n	8017986 <tcp_zero_window_probe+0x72>
 801797a:	6a3b      	ldr	r3, [r7, #32]
 801797c:	891b      	ldrh	r3, [r3, #8]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d101      	bne.n	8017986 <tcp_zero_window_probe+0x72>
 8017982:	2301      	movs	r3, #1
 8017984:	e000      	b.n	8017988 <tcp_zero_window_probe+0x74>
 8017986:	2300      	movs	r3, #0
 8017988:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801798a:	7ffb      	ldrb	r3, [r7, #31]
 801798c:	2b00      	cmp	r3, #0
 801798e:	bf0c      	ite	eq
 8017990:	2301      	moveq	r3, #1
 8017992:	2300      	movne	r3, #0
 8017994:	b2db      	uxtb	r3, r3
 8017996:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801799c:	b299      	uxth	r1, r3
 801799e:	6a3b      	ldr	r3, [r7, #32]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	8bba      	ldrh	r2, [r7, #28]
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f7ff fdfa 	bl	80175a0 <tcp_output_alloc_header>
 80179ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80179ae:	69bb      	ldr	r3, [r7, #24]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d102      	bne.n	80179ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80179b4:	f04f 33ff 	mov.w	r3, #4294967295
 80179b8:	e04c      	b.n	8017a54 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80179ba:	69bb      	ldr	r3, [r7, #24]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80179c0:	7ffb      	ldrb	r3, [r7, #31]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d011      	beq.n	80179ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	899b      	ldrh	r3, [r3, #12]
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	b21b      	sxth	r3, r3
 80179ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80179d2:	b21c      	sxth	r4, r3
 80179d4:	2011      	movs	r0, #17
 80179d6:	f7f8 f981 	bl	800fcdc <lwip_htons>
 80179da:	4603      	mov	r3, r0
 80179dc:	b21b      	sxth	r3, r3
 80179de:	4323      	orrs	r3, r4
 80179e0:	b21b      	sxth	r3, r3
 80179e2:	b29a      	uxth	r2, r3
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	819a      	strh	r2, [r3, #12]
 80179e8:	e010      	b.n	8017a0c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80179ea:	69bb      	ldr	r3, [r7, #24]
 80179ec:	685b      	ldr	r3, [r3, #4]
 80179ee:	3314      	adds	r3, #20
 80179f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	6858      	ldr	r0, [r3, #4]
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	685b      	ldr	r3, [r3, #4]
 80179fa:	891a      	ldrh	r2, [r3, #8]
 80179fc:	6a3b      	ldr	r3, [r7, #32]
 80179fe:	891b      	ldrh	r3, [r3, #8]
 8017a00:	1ad3      	subs	r3, r2, r3
 8017a02:	b29b      	uxth	r3, r3
 8017a04:	2201      	movs	r2, #1
 8017a06:	6939      	ldr	r1, [r7, #16]
 8017a08:	f7f9 ff56 	bl	80118b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a0c:	6a3b      	ldr	r3, [r7, #32]
 8017a0e:	68db      	ldr	r3, [r3, #12]
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7f8 f977 	bl	800fd06 <lwip_htonl>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	da02      	bge.n	8017a30 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a34:	2200      	movs	r2, #0
 8017a36:	69b9      	ldr	r1, [r7, #24]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff fdef 	bl	801761c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	3304      	adds	r3, #4
 8017a44:	69b9      	ldr	r1, [r7, #24]
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7ff fe26 	bl	8017698 <tcp_output_control_segment>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a50:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	372c      	adds	r7, #44	; 0x2c
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd90      	pop	{r4, r7, pc}
 8017a5c:	0801f8f8 	.word	0x0801f8f8
 8017a60:	080200f0 	.word	0x080200f0
 8017a64:	0801f94c 	.word	0x0801f94c

08017a68 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a70:	f7fa f8a2 	bl	8011bb8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a74:	4b0a      	ldr	r3, [pc, #40]	; (8017aa0 <tcpip_tcp_timer+0x38>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d103      	bne.n	8017a84 <tcpip_tcp_timer+0x1c>
 8017a7c:	4b09      	ldr	r3, [pc, #36]	; (8017aa4 <tcpip_tcp_timer+0x3c>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d005      	beq.n	8017a90 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a84:	2200      	movs	r2, #0
 8017a86:	4908      	ldr	r1, [pc, #32]	; (8017aa8 <tcpip_tcp_timer+0x40>)
 8017a88:	20fa      	movs	r0, #250	; 0xfa
 8017a8a:	f000 f8f3 	bl	8017c74 <sys_timeout>
 8017a8e:	e003      	b.n	8017a98 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a90:	4b06      	ldr	r3, [pc, #24]	; (8017aac <tcpip_tcp_timer+0x44>)
 8017a92:	2200      	movs	r2, #0
 8017a94:	601a      	str	r2, [r3, #0]
  }
}
 8017a96:	bf00      	nop
 8017a98:	bf00      	nop
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	20007058 	.word	0x20007058
 8017aa4:	2000705c 	.word	0x2000705c
 8017aa8:	08017a69 	.word	0x08017a69
 8017aac:	200070a4 	.word	0x200070a4

08017ab0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017ab4:	4b0a      	ldr	r3, [pc, #40]	; (8017ae0 <tcp_timer_needed+0x30>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d10f      	bne.n	8017adc <tcp_timer_needed+0x2c>
 8017abc:	4b09      	ldr	r3, [pc, #36]	; (8017ae4 <tcp_timer_needed+0x34>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d103      	bne.n	8017acc <tcp_timer_needed+0x1c>
 8017ac4:	4b08      	ldr	r3, [pc, #32]	; (8017ae8 <tcp_timer_needed+0x38>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d007      	beq.n	8017adc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017acc:	4b04      	ldr	r3, [pc, #16]	; (8017ae0 <tcp_timer_needed+0x30>)
 8017ace:	2201      	movs	r2, #1
 8017ad0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	4905      	ldr	r1, [pc, #20]	; (8017aec <tcp_timer_needed+0x3c>)
 8017ad6:	20fa      	movs	r0, #250	; 0xfa
 8017ad8:	f000 f8cc 	bl	8017c74 <sys_timeout>
  }
}
 8017adc:	bf00      	nop
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	200070a4 	.word	0x200070a4
 8017ae4:	20007058 	.word	0x20007058
 8017ae8:	2000705c 	.word	0x2000705c
 8017aec:	08017a69 	.word	0x08017a69

08017af0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b086      	sub	sp, #24
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017afc:	2006      	movs	r0, #6
 8017afe:	f7f8 fe0b 	bl	8010718 <memp_malloc>
 8017b02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d109      	bne.n	8017b1e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d151      	bne.n	8017bb4 <sys_timeout_abs+0xc4>
 8017b10:	4b2a      	ldr	r3, [pc, #168]	; (8017bbc <sys_timeout_abs+0xcc>)
 8017b12:	22be      	movs	r2, #190	; 0xbe
 8017b14:	492a      	ldr	r1, [pc, #168]	; (8017bc0 <sys_timeout_abs+0xd0>)
 8017b16:	482b      	ldr	r0, [pc, #172]	; (8017bc4 <sys_timeout_abs+0xd4>)
 8017b18:	f003 fb86 	bl	801b228 <iprintf>
    return;
 8017b1c:	e04a      	b.n	8017bb4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	2200      	movs	r2, #0
 8017b22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	68ba      	ldr	r2, [r7, #8]
 8017b28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	68fa      	ldr	r2, [r7, #12]
 8017b34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b36:	4b24      	ldr	r3, [pc, #144]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d103      	bne.n	8017b46 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b3e:	4a22      	ldr	r2, [pc, #136]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	6013      	str	r3, [r2, #0]
    return;
 8017b44:	e037      	b.n	8017bb6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	685a      	ldr	r2, [r3, #4]
 8017b4a:	4b1f      	ldr	r3, [pc, #124]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	1ad3      	subs	r3, r2, r3
 8017b52:	0fdb      	lsrs	r3, r3, #31
 8017b54:	f003 0301 	and.w	r3, r3, #1
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d007      	beq.n	8017b6e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b5e:	4b1a      	ldr	r3, [pc, #104]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b60:	681a      	ldr	r2, [r3, #0]
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b66:	4a18      	ldr	r2, [pc, #96]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	6013      	str	r3, [r2, #0]
 8017b6c:	e023      	b.n	8017bb6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b6e:	4b16      	ldr	r3, [pc, #88]	; (8017bc8 <sys_timeout_abs+0xd8>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	617b      	str	r3, [r7, #20]
 8017b74:	e01a      	b.n	8017bac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00b      	beq.n	8017b96 <sys_timeout_abs+0xa6>
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	685a      	ldr	r2, [r3, #4]
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	1ad3      	subs	r3, r2, r3
 8017b8a:	0fdb      	lsrs	r3, r3, #31
 8017b8c:	f003 0301 	and.w	r3, r3, #1
 8017b90:	b2db      	uxtb	r3, r3
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d007      	beq.n	8017ba6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	693a      	ldr	r2, [r7, #16]
 8017ba2:	601a      	str	r2, [r3, #0]
        break;
 8017ba4:	e007      	b.n	8017bb6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017ba6:	697b      	ldr	r3, [r7, #20]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	617b      	str	r3, [r7, #20]
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d1e1      	bne.n	8017b76 <sys_timeout_abs+0x86>
 8017bb2:	e000      	b.n	8017bb6 <sys_timeout_abs+0xc6>
    return;
 8017bb4:	bf00      	nop
      }
    }
  }
}
 8017bb6:	3718      	adds	r7, #24
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	08020114 	.word	0x08020114
 8017bc0:	08020148 	.word	0x08020148
 8017bc4:	08020188 	.word	0x08020188
 8017bc8:	2000709c 	.word	0x2000709c

08017bcc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b086      	sub	sp, #24
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017bd8:	697b      	ldr	r3, [r7, #20]
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	4798      	blx	r3

  now = sys_now();
 8017bde:	f7f7 fe35 	bl	800f84c <sys_now>
 8017be2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	681a      	ldr	r2, [r3, #0]
 8017be8:	4b0f      	ldr	r3, [pc, #60]	; (8017c28 <lwip_cyclic_timer+0x5c>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	4413      	add	r3, r2
 8017bee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017bf0:	68fa      	ldr	r2, [r7, #12]
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	1ad3      	subs	r3, r2, r3
 8017bf6:	0fdb      	lsrs	r3, r3, #31
 8017bf8:	f003 0301 	and.w	r3, r3, #1
 8017bfc:	b2db      	uxtb	r3, r3
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d009      	beq.n	8017c16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	4413      	add	r3, r2
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	4907      	ldr	r1, [pc, #28]	; (8017c2c <lwip_cyclic_timer+0x60>)
 8017c0e:	4618      	mov	r0, r3
 8017c10:	f7ff ff6e 	bl	8017af0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c14:	e004      	b.n	8017c20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	4904      	ldr	r1, [pc, #16]	; (8017c2c <lwip_cyclic_timer+0x60>)
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7ff ff68 	bl	8017af0 <sys_timeout_abs>
}
 8017c20:	bf00      	nop
 8017c22:	3718      	adds	r7, #24
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}
 8017c28:	200070a0 	.word	0x200070a0
 8017c2c:	08017bcd 	.word	0x08017bcd

08017c30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c36:	2301      	movs	r3, #1
 8017c38:	607b      	str	r3, [r7, #4]
 8017c3a:	e00e      	b.n	8017c5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c3c:	4a0b      	ldr	r2, [pc, #44]	; (8017c6c <sys_timeouts_init+0x3c>)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	00db      	lsls	r3, r3, #3
 8017c48:	4a08      	ldr	r2, [pc, #32]	; (8017c6c <sys_timeouts_init+0x3c>)
 8017c4a:	4413      	add	r3, r2
 8017c4c:	461a      	mov	r2, r3
 8017c4e:	4908      	ldr	r1, [pc, #32]	; (8017c70 <sys_timeouts_init+0x40>)
 8017c50:	f000 f810 	bl	8017c74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3301      	adds	r3, #1
 8017c58:	607b      	str	r3, [r7, #4]
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	2b02      	cmp	r3, #2
 8017c5e:	d9ed      	bls.n	8017c3c <sys_timeouts_init+0xc>
  }
}
 8017c60:	bf00      	nop
 8017c62:	bf00      	nop
 8017c64:	3708      	adds	r7, #8
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	08020d44 	.word	0x08020d44
 8017c70:	08017bcd 	.word	0x08017bcd

08017c74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b086      	sub	sp, #24
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017c86:	d306      	bcc.n	8017c96 <sys_timeout+0x22>
 8017c88:	4b0a      	ldr	r3, [pc, #40]	; (8017cb4 <sys_timeout+0x40>)
 8017c8a:	f240 1229 	movw	r2, #297	; 0x129
 8017c8e:	490a      	ldr	r1, [pc, #40]	; (8017cb8 <sys_timeout+0x44>)
 8017c90:	480a      	ldr	r0, [pc, #40]	; (8017cbc <sys_timeout+0x48>)
 8017c92:	f003 fac9 	bl	801b228 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c96:	f7f7 fdd9 	bl	800f84c <sys_now>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	4413      	add	r3, r2
 8017ca0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017ca2:	687a      	ldr	r2, [r7, #4]
 8017ca4:	68b9      	ldr	r1, [r7, #8]
 8017ca6:	6978      	ldr	r0, [r7, #20]
 8017ca8:	f7ff ff22 	bl	8017af0 <sys_timeout_abs>
#endif
}
 8017cac:	bf00      	nop
 8017cae:	3718      	adds	r7, #24
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	08020114 	.word	0x08020114
 8017cb8:	080201b0 	.word	0x080201b0
 8017cbc:	08020188 	.word	0x08020188

08017cc0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b084      	sub	sp, #16
 8017cc4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017cc6:	f7f7 fdc1 	bl	800f84c <sys_now>
 8017cca:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017ccc:	4b1a      	ldr	r3, [pc, #104]	; (8017d38 <sys_check_timeouts+0x78>)
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	b2db      	uxtb	r3, r3
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d001      	beq.n	8017cda <sys_check_timeouts+0x1a>
 8017cd6:	f7f9 f8cb 	bl	8010e70 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017cda:	4b18      	ldr	r3, [pc, #96]	; (8017d3c <sys_check_timeouts+0x7c>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d022      	beq.n	8017d2c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	68fa      	ldr	r2, [r7, #12]
 8017cec:	1ad3      	subs	r3, r2, r3
 8017cee:	0fdb      	lsrs	r3, r3, #31
 8017cf0:	f003 0301 	and.w	r3, r3, #1
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d11a      	bne.n	8017d30 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a0f      	ldr	r2, [pc, #60]	; (8017d3c <sys_check_timeouts+0x7c>)
 8017d00:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	689b      	ldr	r3, [r3, #8]
 8017d06:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	68db      	ldr	r3, [r3, #12]
 8017d0c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	685b      	ldr	r3, [r3, #4]
 8017d12:	4a0b      	ldr	r2, [pc, #44]	; (8017d40 <sys_check_timeouts+0x80>)
 8017d14:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d16:	68b9      	ldr	r1, [r7, #8]
 8017d18:	2006      	movs	r0, #6
 8017d1a:	f7f8 fd6d 	bl	80107f8 <memp_free>
    if (handler != NULL) {
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d0d3      	beq.n	8017ccc <sys_check_timeouts+0xc>
      handler(arg);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6838      	ldr	r0, [r7, #0]
 8017d28:	4798      	blx	r3
  do {
 8017d2a:	e7cf      	b.n	8017ccc <sys_check_timeouts+0xc>
      return;
 8017d2c:	bf00      	nop
 8017d2e:	e000      	b.n	8017d32 <sys_check_timeouts+0x72>
      return;
 8017d30:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d32:	3710      	adds	r7, #16
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}
 8017d38:	20007049 	.word	0x20007049
 8017d3c:	2000709c 	.word	0x2000709c
 8017d40:	200070a0 	.word	0x200070a0

08017d44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d48:	f002 fd32 	bl	801a7b0 <rand>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017d5a:	b29a      	uxth	r2, r3
 8017d5c:	4b01      	ldr	r3, [pc, #4]	; (8017d64 <udp_init+0x20>)
 8017d5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d60:	bf00      	nop
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	2000005c 	.word	0x2000005c

08017d68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b084      	sub	sp, #16
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	4613      	mov	r3, r2
 8017d74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d105      	bne.n	8017d88 <udp_input_local_match+0x20>
 8017d7c:	4b27      	ldr	r3, [pc, #156]	; (8017e1c <udp_input_local_match+0xb4>)
 8017d7e:	2287      	movs	r2, #135	; 0x87
 8017d80:	4927      	ldr	r1, [pc, #156]	; (8017e20 <udp_input_local_match+0xb8>)
 8017d82:	4828      	ldr	r0, [pc, #160]	; (8017e24 <udp_input_local_match+0xbc>)
 8017d84:	f003 fa50 	bl	801b228 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d105      	bne.n	8017d9a <udp_input_local_match+0x32>
 8017d8e:	4b23      	ldr	r3, [pc, #140]	; (8017e1c <udp_input_local_match+0xb4>)
 8017d90:	2288      	movs	r2, #136	; 0x88
 8017d92:	4925      	ldr	r1, [pc, #148]	; (8017e28 <udp_input_local_match+0xc0>)
 8017d94:	4823      	ldr	r0, [pc, #140]	; (8017e24 <udp_input_local_match+0xbc>)
 8017d96:	f003 fa47 	bl	801b228 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	7a1b      	ldrb	r3, [r3, #8]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d00b      	beq.n	8017dba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	7a1a      	ldrb	r2, [r3, #8]
 8017da6:	4b21      	ldr	r3, [pc, #132]	; (8017e2c <udp_input_local_match+0xc4>)
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dae:	3301      	adds	r3, #1
 8017db0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d001      	beq.n	8017dba <udp_input_local_match+0x52>
    return 0;
 8017db6:	2300      	movs	r3, #0
 8017db8:	e02b      	b.n	8017e12 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017dba:	79fb      	ldrb	r3, [r7, #7]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d018      	beq.n	8017df2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d013      	beq.n	8017dee <udp_input_local_match+0x86>
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d00f      	beq.n	8017dee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017dce:	4b17      	ldr	r3, [pc, #92]	; (8017e2c <udp_input_local_match+0xc4>)
 8017dd0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dd6:	d00a      	beq.n	8017dee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681a      	ldr	r2, [r3, #0]
 8017ddc:	4b13      	ldr	r3, [pc, #76]	; (8017e2c <udp_input_local_match+0xc4>)
 8017dde:	695b      	ldr	r3, [r3, #20]
 8017de0:	405a      	eors	r2, r3
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	3308      	adds	r3, #8
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d110      	bne.n	8017e10 <udp_input_local_match+0xa8>
          return 1;
 8017dee:	2301      	movs	r3, #1
 8017df0:	e00f      	b.n	8017e12 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d009      	beq.n	8017e0c <udp_input_local_match+0xa4>
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d005      	beq.n	8017e0c <udp_input_local_match+0xa4>
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	681a      	ldr	r2, [r3, #0]
 8017e04:	4b09      	ldr	r3, [pc, #36]	; (8017e2c <udp_input_local_match+0xc4>)
 8017e06:	695b      	ldr	r3, [r3, #20]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d101      	bne.n	8017e10 <udp_input_local_match+0xa8>
        return 1;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e000      	b.n	8017e12 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e10:	2300      	movs	r3, #0
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3710      	adds	r7, #16
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}
 8017e1a:	bf00      	nop
 8017e1c:	080201fc 	.word	0x080201fc
 8017e20:	0802022c 	.word	0x0802022c
 8017e24:	08020250 	.word	0x08020250
 8017e28:	08020278 	.word	0x08020278
 8017e2c:	20000770 	.word	0x20000770

08017e30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017e30:	b590      	push	{r4, r7, lr}
 8017e32:	b08d      	sub	sp, #52	; 0x34
 8017e34:	af02      	add	r7, sp, #8
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d105      	bne.n	8017e50 <udp_input+0x20>
 8017e44:	4b7c      	ldr	r3, [pc, #496]	; (8018038 <udp_input+0x208>)
 8017e46:	22cf      	movs	r2, #207	; 0xcf
 8017e48:	497c      	ldr	r1, [pc, #496]	; (801803c <udp_input+0x20c>)
 8017e4a:	487d      	ldr	r0, [pc, #500]	; (8018040 <udp_input+0x210>)
 8017e4c:	f003 f9ec 	bl	801b228 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d105      	bne.n	8017e62 <udp_input+0x32>
 8017e56:	4b78      	ldr	r3, [pc, #480]	; (8018038 <udp_input+0x208>)
 8017e58:	22d0      	movs	r2, #208	; 0xd0
 8017e5a:	497a      	ldr	r1, [pc, #488]	; (8018044 <udp_input+0x214>)
 8017e5c:	4878      	ldr	r0, [pc, #480]	; (8018040 <udp_input+0x210>)
 8017e5e:	f003 f9e3 	bl	801b228 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	895b      	ldrh	r3, [r3, #10]
 8017e66:	2b07      	cmp	r3, #7
 8017e68:	d803      	bhi.n	8017e72 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7f9 fb3a 	bl	80114e4 <pbuf_free>
    goto end;
 8017e70:	e0de      	b.n	8018030 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017e78:	4b73      	ldr	r3, [pc, #460]	; (8018048 <udp_input+0x218>)
 8017e7a:	695b      	ldr	r3, [r3, #20]
 8017e7c:	4a72      	ldr	r2, [pc, #456]	; (8018048 <udp_input+0x218>)
 8017e7e:	6812      	ldr	r2, [r2, #0]
 8017e80:	4611      	mov	r1, r2
 8017e82:	4618      	mov	r0, r3
 8017e84:	f001 fcae 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	881b      	ldrh	r3, [r3, #0]
 8017e90:	b29b      	uxth	r3, r3
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7f7 ff22 	bl	800fcdc <lwip_htons>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	885b      	ldrh	r3, [r3, #2]
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7f7 ff1a 	bl	800fcdc <lwip_htons>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017eac:	2300      	movs	r3, #0
 8017eae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017eb8:	4b64      	ldr	r3, [pc, #400]	; (801804c <udp_input+0x21c>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8017ebe:	e054      	b.n	8017f6a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	8a5b      	ldrh	r3, [r3, #18]
 8017ec4:	89fa      	ldrh	r2, [r7, #14]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d14a      	bne.n	8017f60 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017eca:	7cfb      	ldrb	r3, [r7, #19]
 8017ecc:	461a      	mov	r2, r3
 8017ece:	6839      	ldr	r1, [r7, #0]
 8017ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ed2:	f7ff ff49 	bl	8017d68 <udp_input_local_match>
 8017ed6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d041      	beq.n	8017f60 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ede:	7c1b      	ldrb	r3, [r3, #16]
 8017ee0:	f003 0304 	and.w	r3, r3, #4
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d11d      	bne.n	8017f24 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d102      	bne.n	8017ef4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef0:	61fb      	str	r3, [r7, #28]
 8017ef2:	e017      	b.n	8017f24 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017ef4:	7cfb      	ldrb	r3, [r7, #19]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d014      	beq.n	8017f24 <udp_input+0xf4>
 8017efa:	4b53      	ldr	r3, [pc, #332]	; (8018048 <udp_input+0x218>)
 8017efc:	695b      	ldr	r3, [r3, #20]
 8017efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f02:	d10f      	bne.n	8017f24 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	681a      	ldr	r2, [r3, #0]
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	3304      	adds	r3, #4
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	429a      	cmp	r2, r3
 8017f10:	d008      	beq.n	8017f24 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f14:	681a      	ldr	r2, [r3, #0]
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	3304      	adds	r3, #4
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d101      	bne.n	8017f24 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f22:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f26:	8a9b      	ldrh	r3, [r3, #20]
 8017f28:	8a3a      	ldrh	r2, [r7, #16]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d118      	bne.n	8017f60 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f30:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d005      	beq.n	8017f42 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f38:	685a      	ldr	r2, [r3, #4]
 8017f3a:	4b43      	ldr	r3, [pc, #268]	; (8018048 <udp_input+0x218>)
 8017f3c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	d10e      	bne.n	8017f60 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017f42:	6a3b      	ldr	r3, [r7, #32]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d014      	beq.n	8017f72 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4a:	68da      	ldr	r2, [r3, #12]
 8017f4c:	6a3b      	ldr	r3, [r7, #32]
 8017f4e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017f50:	4b3e      	ldr	r3, [pc, #248]	; (801804c <udp_input+0x21c>)
 8017f52:	681a      	ldr	r2, [r3, #0]
 8017f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f56:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017f58:	4a3c      	ldr	r2, [pc, #240]	; (801804c <udp_input+0x21c>)
 8017f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017f5e:	e008      	b.n	8017f72 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f66:	68db      	ldr	r3, [r3, #12]
 8017f68:	627b      	str	r3, [r7, #36]	; 0x24
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d1a7      	bne.n	8017ec0 <udp_input+0x90>
 8017f70:	e000      	b.n	8017f74 <udp_input+0x144>
        break;
 8017f72:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <udp_input+0x14e>
    pcb = uncon_pcb;
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d002      	beq.n	8017f8a <udp_input+0x15a>
    for_us = 1;
 8017f84:	2301      	movs	r3, #1
 8017f86:	76fb      	strb	r3, [r7, #27]
 8017f88:	e00a      	b.n	8017fa0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017f8a:	683b      	ldr	r3, [r7, #0]
 8017f8c:	3304      	adds	r3, #4
 8017f8e:	681a      	ldr	r2, [r3, #0]
 8017f90:	4b2d      	ldr	r3, [pc, #180]	; (8018048 <udp_input+0x218>)
 8017f92:	695b      	ldr	r3, [r3, #20]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	bf0c      	ite	eq
 8017f98:	2301      	moveq	r3, #1
 8017f9a:	2300      	movne	r3, #0
 8017f9c:	b2db      	uxtb	r3, r3
 8017f9e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017fa0:	7efb      	ldrb	r3, [r7, #27]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d041      	beq.n	801802a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017fa6:	2108      	movs	r1, #8
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7f9 fa15 	bl	80113d8 <pbuf_remove_header>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00a      	beq.n	8017fca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017fb4:	4b20      	ldr	r3, [pc, #128]	; (8018038 <udp_input+0x208>)
 8017fb6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017fba:	4925      	ldr	r1, [pc, #148]	; (8018050 <udp_input+0x220>)
 8017fbc:	4820      	ldr	r0, [pc, #128]	; (8018040 <udp_input+0x210>)
 8017fbe:	f003 f933 	bl	801b228 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f7f9 fa8e 	bl	80114e4 <pbuf_free>
      goto end;
 8017fc8:	e032      	b.n	8018030 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d012      	beq.n	8017ff6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd2:	699b      	ldr	r3, [r3, #24]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d00a      	beq.n	8017fee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	699c      	ldr	r4, [r3, #24]
 8017fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fde:	69d8      	ldr	r0, [r3, #28]
 8017fe0:	8a3b      	ldrh	r3, [r7, #16]
 8017fe2:	9300      	str	r3, [sp, #0]
 8017fe4:	4b1b      	ldr	r3, [pc, #108]	; (8018054 <udp_input+0x224>)
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017fec:	e021      	b.n	8018032 <udp_input+0x202>
        pbuf_free(p);
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f7f9 fa78 	bl	80114e4 <pbuf_free>
        goto end;
 8017ff4:	e01c      	b.n	8018030 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017ff6:	7cfb      	ldrb	r3, [r7, #19]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d112      	bne.n	8018022 <udp_input+0x1f2>
 8017ffc:	4b12      	ldr	r3, [pc, #72]	; (8018048 <udp_input+0x218>)
 8017ffe:	695b      	ldr	r3, [r3, #20]
 8018000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018004:	2be0      	cmp	r3, #224	; 0xe0
 8018006:	d00c      	beq.n	8018022 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018008:	4b0f      	ldr	r3, [pc, #60]	; (8018048 <udp_input+0x218>)
 801800a:	899b      	ldrh	r3, [r3, #12]
 801800c:	3308      	adds	r3, #8
 801800e:	b29b      	uxth	r3, r3
 8018010:	b21b      	sxth	r3, r3
 8018012:	4619      	mov	r1, r3
 8018014:	6878      	ldr	r0, [r7, #4]
 8018016:	f7f9 fa52 	bl	80114be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801801a:	2103      	movs	r1, #3
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f001 f8b7 	bl	8019190 <icmp_dest_unreach>
      pbuf_free(p);
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f7f9 fa5e 	bl	80114e4 <pbuf_free>
  return;
 8018028:	e003      	b.n	8018032 <udp_input+0x202>
    pbuf_free(p);
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f7f9 fa5a 	bl	80114e4 <pbuf_free>
  return;
 8018030:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018032:	372c      	adds	r7, #44	; 0x2c
 8018034:	46bd      	mov	sp, r7
 8018036:	bd90      	pop	{r4, r7, pc}
 8018038:	080201fc 	.word	0x080201fc
 801803c:	080202a0 	.word	0x080202a0
 8018040:	08020250 	.word	0x08020250
 8018044:	080202b8 	.word	0x080202b8
 8018048:	20000770 	.word	0x20000770
 801804c:	200070a8 	.word	0x200070a8
 8018050:	080202d4 	.word	0x080202d4
 8018054:	20000780 	.word	0x20000780

08018058 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018058:	b480      	push	{r7}
 801805a:	b085      	sub	sp, #20
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d01e      	beq.n	80180a6 <udp_netif_ip_addr_changed+0x4e>
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d01a      	beq.n	80180a6 <udp_netif_ip_addr_changed+0x4e>
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d017      	beq.n	80180a6 <udp_netif_ip_addr_changed+0x4e>
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d013      	beq.n	80180a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801807e:	4b0d      	ldr	r3, [pc, #52]	; (80180b4 <udp_netif_ip_addr_changed+0x5c>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	60fb      	str	r3, [r7, #12]
 8018084:	e00c      	b.n	80180a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	429a      	cmp	r2, r3
 8018090:	d103      	bne.n	801809a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	68db      	ldr	r3, [r3, #12]
 801809e:	60fb      	str	r3, [r7, #12]
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d1ef      	bne.n	8018086 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80180a6:	bf00      	nop
 80180a8:	3714      	adds	r7, #20
 80180aa:	46bd      	mov	sp, r7
 80180ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b0:	4770      	bx	lr
 80180b2:	bf00      	nop
 80180b4:	200070a8 	.word	0x200070a8

080180b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b082      	sub	sp, #8
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80180c0:	4915      	ldr	r1, [pc, #84]	; (8018118 <etharp_free_entry+0x60>)
 80180c2:	687a      	ldr	r2, [r7, #4]
 80180c4:	4613      	mov	r3, r2
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	4413      	add	r3, r2
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	440b      	add	r3, r1
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d013      	beq.n	80180fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80180d4:	4910      	ldr	r1, [pc, #64]	; (8018118 <etharp_free_entry+0x60>)
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	4613      	mov	r3, r2
 80180da:	005b      	lsls	r3, r3, #1
 80180dc:	4413      	add	r3, r2
 80180de:	00db      	lsls	r3, r3, #3
 80180e0:	440b      	add	r3, r1
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7f9 f9fd 	bl	80114e4 <pbuf_free>
    arp_table[i].q = NULL;
 80180ea:	490b      	ldr	r1, [pc, #44]	; (8018118 <etharp_free_entry+0x60>)
 80180ec:	687a      	ldr	r2, [r7, #4]
 80180ee:	4613      	mov	r3, r2
 80180f0:	005b      	lsls	r3, r3, #1
 80180f2:	4413      	add	r3, r2
 80180f4:	00db      	lsls	r3, r3, #3
 80180f6:	440b      	add	r3, r1
 80180f8:	2200      	movs	r2, #0
 80180fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80180fc:	4906      	ldr	r1, [pc, #24]	; (8018118 <etharp_free_entry+0x60>)
 80180fe:	687a      	ldr	r2, [r7, #4]
 8018100:	4613      	mov	r3, r2
 8018102:	005b      	lsls	r3, r3, #1
 8018104:	4413      	add	r3, r2
 8018106:	00db      	lsls	r3, r3, #3
 8018108:	440b      	add	r3, r1
 801810a:	3314      	adds	r3, #20
 801810c:	2200      	movs	r2, #0
 801810e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018110:	bf00      	nop
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	200070ac 	.word	0x200070ac

0801811c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018122:	2300      	movs	r3, #0
 8018124:	607b      	str	r3, [r7, #4]
 8018126:	e096      	b.n	8018256 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018128:	494f      	ldr	r1, [pc, #316]	; (8018268 <etharp_tmr+0x14c>)
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	4613      	mov	r3, r2
 801812e:	005b      	lsls	r3, r3, #1
 8018130:	4413      	add	r3, r2
 8018132:	00db      	lsls	r3, r3, #3
 8018134:	440b      	add	r3, r1
 8018136:	3314      	adds	r3, #20
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801813c:	78fb      	ldrb	r3, [r7, #3]
 801813e:	2b00      	cmp	r3, #0
 8018140:	f000 8086 	beq.w	8018250 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018144:	4948      	ldr	r1, [pc, #288]	; (8018268 <etharp_tmr+0x14c>)
 8018146:	687a      	ldr	r2, [r7, #4]
 8018148:	4613      	mov	r3, r2
 801814a:	005b      	lsls	r3, r3, #1
 801814c:	4413      	add	r3, r2
 801814e:	00db      	lsls	r3, r3, #3
 8018150:	440b      	add	r3, r1
 8018152:	3312      	adds	r3, #18
 8018154:	881b      	ldrh	r3, [r3, #0]
 8018156:	3301      	adds	r3, #1
 8018158:	b298      	uxth	r0, r3
 801815a:	4943      	ldr	r1, [pc, #268]	; (8018268 <etharp_tmr+0x14c>)
 801815c:	687a      	ldr	r2, [r7, #4]
 801815e:	4613      	mov	r3, r2
 8018160:	005b      	lsls	r3, r3, #1
 8018162:	4413      	add	r3, r2
 8018164:	00db      	lsls	r3, r3, #3
 8018166:	440b      	add	r3, r1
 8018168:	3312      	adds	r3, #18
 801816a:	4602      	mov	r2, r0
 801816c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801816e:	493e      	ldr	r1, [pc, #248]	; (8018268 <etharp_tmr+0x14c>)
 8018170:	687a      	ldr	r2, [r7, #4]
 8018172:	4613      	mov	r3, r2
 8018174:	005b      	lsls	r3, r3, #1
 8018176:	4413      	add	r3, r2
 8018178:	00db      	lsls	r3, r3, #3
 801817a:	440b      	add	r3, r1
 801817c:	3312      	adds	r3, #18
 801817e:	881b      	ldrh	r3, [r3, #0]
 8018180:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018184:	d215      	bcs.n	80181b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018186:	4938      	ldr	r1, [pc, #224]	; (8018268 <etharp_tmr+0x14c>)
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	4613      	mov	r3, r2
 801818c:	005b      	lsls	r3, r3, #1
 801818e:	4413      	add	r3, r2
 8018190:	00db      	lsls	r3, r3, #3
 8018192:	440b      	add	r3, r1
 8018194:	3314      	adds	r3, #20
 8018196:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018198:	2b01      	cmp	r3, #1
 801819a:	d10e      	bne.n	80181ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801819c:	4932      	ldr	r1, [pc, #200]	; (8018268 <etharp_tmr+0x14c>)
 801819e:	687a      	ldr	r2, [r7, #4]
 80181a0:	4613      	mov	r3, r2
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	4413      	add	r3, r2
 80181a6:	00db      	lsls	r3, r3, #3
 80181a8:	440b      	add	r3, r1
 80181aa:	3312      	adds	r3, #18
 80181ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80181ae:	2b04      	cmp	r3, #4
 80181b0:	d903      	bls.n	80181ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80181b2:	6878      	ldr	r0, [r7, #4]
 80181b4:	f7ff ff80 	bl	80180b8 <etharp_free_entry>
 80181b8:	e04a      	b.n	8018250 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80181ba:	492b      	ldr	r1, [pc, #172]	; (8018268 <etharp_tmr+0x14c>)
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	4613      	mov	r3, r2
 80181c0:	005b      	lsls	r3, r3, #1
 80181c2:	4413      	add	r3, r2
 80181c4:	00db      	lsls	r3, r3, #3
 80181c6:	440b      	add	r3, r1
 80181c8:	3314      	adds	r3, #20
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	2b03      	cmp	r3, #3
 80181ce:	d10a      	bne.n	80181e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80181d0:	4925      	ldr	r1, [pc, #148]	; (8018268 <etharp_tmr+0x14c>)
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	4613      	mov	r3, r2
 80181d6:	005b      	lsls	r3, r3, #1
 80181d8:	4413      	add	r3, r2
 80181da:	00db      	lsls	r3, r3, #3
 80181dc:	440b      	add	r3, r1
 80181de:	3314      	adds	r3, #20
 80181e0:	2204      	movs	r2, #4
 80181e2:	701a      	strb	r2, [r3, #0]
 80181e4:	e034      	b.n	8018250 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80181e6:	4920      	ldr	r1, [pc, #128]	; (8018268 <etharp_tmr+0x14c>)
 80181e8:	687a      	ldr	r2, [r7, #4]
 80181ea:	4613      	mov	r3, r2
 80181ec:	005b      	lsls	r3, r3, #1
 80181ee:	4413      	add	r3, r2
 80181f0:	00db      	lsls	r3, r3, #3
 80181f2:	440b      	add	r3, r1
 80181f4:	3314      	adds	r3, #20
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	2b04      	cmp	r3, #4
 80181fa:	d10a      	bne.n	8018212 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80181fc:	491a      	ldr	r1, [pc, #104]	; (8018268 <etharp_tmr+0x14c>)
 80181fe:	687a      	ldr	r2, [r7, #4]
 8018200:	4613      	mov	r3, r2
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	4413      	add	r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	440b      	add	r3, r1
 801820a:	3314      	adds	r3, #20
 801820c:	2202      	movs	r2, #2
 801820e:	701a      	strb	r2, [r3, #0]
 8018210:	e01e      	b.n	8018250 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018212:	4915      	ldr	r1, [pc, #84]	; (8018268 <etharp_tmr+0x14c>)
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	4613      	mov	r3, r2
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	4413      	add	r3, r2
 801821c:	00db      	lsls	r3, r3, #3
 801821e:	440b      	add	r3, r1
 8018220:	3314      	adds	r3, #20
 8018222:	781b      	ldrb	r3, [r3, #0]
 8018224:	2b01      	cmp	r3, #1
 8018226:	d113      	bne.n	8018250 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018228:	490f      	ldr	r1, [pc, #60]	; (8018268 <etharp_tmr+0x14c>)
 801822a:	687a      	ldr	r2, [r7, #4]
 801822c:	4613      	mov	r3, r2
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	4413      	add	r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	440b      	add	r3, r1
 8018236:	3308      	adds	r3, #8
 8018238:	6818      	ldr	r0, [r3, #0]
 801823a:	687a      	ldr	r2, [r7, #4]
 801823c:	4613      	mov	r3, r2
 801823e:	005b      	lsls	r3, r3, #1
 8018240:	4413      	add	r3, r2
 8018242:	00db      	lsls	r3, r3, #3
 8018244:	4a08      	ldr	r2, [pc, #32]	; (8018268 <etharp_tmr+0x14c>)
 8018246:	4413      	add	r3, r2
 8018248:	3304      	adds	r3, #4
 801824a:	4619      	mov	r1, r3
 801824c:	f000 fe6e 	bl	8018f2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	3301      	adds	r3, #1
 8018254:	607b      	str	r3, [r7, #4]
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2b09      	cmp	r3, #9
 801825a:	f77f af65 	ble.w	8018128 <etharp_tmr+0xc>
      }
    }
  }
}
 801825e:	bf00      	nop
 8018260:	bf00      	nop
 8018262:	3708      	adds	r7, #8
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}
 8018268:	200070ac 	.word	0x200070ac

0801826c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b08a      	sub	sp, #40	; 0x28
 8018270:	af00      	add	r7, sp, #0
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	460b      	mov	r3, r1
 8018276:	607a      	str	r2, [r7, #4]
 8018278:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801827a:	230a      	movs	r3, #10
 801827c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801827e:	230a      	movs	r3, #10
 8018280:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018282:	230a      	movs	r3, #10
 8018284:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801828a:	230a      	movs	r3, #10
 801828c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801828e:	2300      	movs	r3, #0
 8018290:	83bb      	strh	r3, [r7, #28]
 8018292:	2300      	movs	r3, #0
 8018294:	837b      	strh	r3, [r7, #26]
 8018296:	2300      	movs	r3, #0
 8018298:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801829a:	2300      	movs	r3, #0
 801829c:	843b      	strh	r3, [r7, #32]
 801829e:	e0ae      	b.n	80183fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80182a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182a4:	49a6      	ldr	r1, [pc, #664]	; (8018540 <etharp_find_entry+0x2d4>)
 80182a6:	4613      	mov	r3, r2
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	4413      	add	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	440b      	add	r3, r1
 80182b0:	3314      	adds	r3, #20
 80182b2:	781b      	ldrb	r3, [r3, #0]
 80182b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80182b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80182ba:	2b0a      	cmp	r3, #10
 80182bc:	d105      	bne.n	80182ca <etharp_find_entry+0x5e>
 80182be:	7dfb      	ldrb	r3, [r7, #23]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d102      	bne.n	80182ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80182c4:	8c3b      	ldrh	r3, [r7, #32]
 80182c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80182c8:	e095      	b.n	80183f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80182ca:	7dfb      	ldrb	r3, [r7, #23]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	f000 8092 	beq.w	80183f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80182d2:	7dfb      	ldrb	r3, [r7, #23]
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	d009      	beq.n	80182ec <etharp_find_entry+0x80>
 80182d8:	7dfb      	ldrb	r3, [r7, #23]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d806      	bhi.n	80182ec <etharp_find_entry+0x80>
 80182de:	4b99      	ldr	r3, [pc, #612]	; (8018544 <etharp_find_entry+0x2d8>)
 80182e0:	f240 1223 	movw	r2, #291	; 0x123
 80182e4:	4998      	ldr	r1, [pc, #608]	; (8018548 <etharp_find_entry+0x2dc>)
 80182e6:	4899      	ldr	r0, [pc, #612]	; (801854c <etharp_find_entry+0x2e0>)
 80182e8:	f002 ff9e 	bl	801b228 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d020      	beq.n	8018334 <etharp_find_entry+0xc8>
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	6819      	ldr	r1, [r3, #0]
 80182f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182fa:	4891      	ldr	r0, [pc, #580]	; (8018540 <etharp_find_entry+0x2d4>)
 80182fc:	4613      	mov	r3, r2
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	4403      	add	r3, r0
 8018306:	3304      	adds	r3, #4
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	4299      	cmp	r1, r3
 801830c:	d112      	bne.n	8018334 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d00c      	beq.n	801832e <etharp_find_entry+0xc2>
 8018314:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018318:	4989      	ldr	r1, [pc, #548]	; (8018540 <etharp_find_entry+0x2d4>)
 801831a:	4613      	mov	r3, r2
 801831c:	005b      	lsls	r3, r3, #1
 801831e:	4413      	add	r3, r2
 8018320:	00db      	lsls	r3, r3, #3
 8018322:	440b      	add	r3, r1
 8018324:	3308      	adds	r3, #8
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	687a      	ldr	r2, [r7, #4]
 801832a:	429a      	cmp	r2, r3
 801832c:	d102      	bne.n	8018334 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801832e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018332:	e100      	b.n	8018536 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018334:	7dfb      	ldrb	r3, [r7, #23]
 8018336:	2b01      	cmp	r3, #1
 8018338:	d140      	bne.n	80183bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801833a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801833e:	4980      	ldr	r1, [pc, #512]	; (8018540 <etharp_find_entry+0x2d4>)
 8018340:	4613      	mov	r3, r2
 8018342:	005b      	lsls	r3, r3, #1
 8018344:	4413      	add	r3, r2
 8018346:	00db      	lsls	r3, r3, #3
 8018348:	440b      	add	r3, r1
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d01a      	beq.n	8018386 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018350:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018354:	497a      	ldr	r1, [pc, #488]	; (8018540 <etharp_find_entry+0x2d4>)
 8018356:	4613      	mov	r3, r2
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	4413      	add	r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	440b      	add	r3, r1
 8018360:	3312      	adds	r3, #18
 8018362:	881b      	ldrh	r3, [r3, #0]
 8018364:	8bba      	ldrh	r2, [r7, #28]
 8018366:	429a      	cmp	r2, r3
 8018368:	d845      	bhi.n	80183f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801836a:	8c3b      	ldrh	r3, [r7, #32]
 801836c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801836e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018372:	4973      	ldr	r1, [pc, #460]	; (8018540 <etharp_find_entry+0x2d4>)
 8018374:	4613      	mov	r3, r2
 8018376:	005b      	lsls	r3, r3, #1
 8018378:	4413      	add	r3, r2
 801837a:	00db      	lsls	r3, r3, #3
 801837c:	440b      	add	r3, r1
 801837e:	3312      	adds	r3, #18
 8018380:	881b      	ldrh	r3, [r3, #0]
 8018382:	83bb      	strh	r3, [r7, #28]
 8018384:	e037      	b.n	80183f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801838a:	496d      	ldr	r1, [pc, #436]	; (8018540 <etharp_find_entry+0x2d4>)
 801838c:	4613      	mov	r3, r2
 801838e:	005b      	lsls	r3, r3, #1
 8018390:	4413      	add	r3, r2
 8018392:	00db      	lsls	r3, r3, #3
 8018394:	440b      	add	r3, r1
 8018396:	3312      	adds	r3, #18
 8018398:	881b      	ldrh	r3, [r3, #0]
 801839a:	8b7a      	ldrh	r2, [r7, #26]
 801839c:	429a      	cmp	r2, r3
 801839e:	d82a      	bhi.n	80183f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80183a0:	8c3b      	ldrh	r3, [r7, #32]
 80183a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80183a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183a8:	4965      	ldr	r1, [pc, #404]	; (8018540 <etharp_find_entry+0x2d4>)
 80183aa:	4613      	mov	r3, r2
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	4413      	add	r3, r2
 80183b0:	00db      	lsls	r3, r3, #3
 80183b2:	440b      	add	r3, r1
 80183b4:	3312      	adds	r3, #18
 80183b6:	881b      	ldrh	r3, [r3, #0]
 80183b8:	837b      	strh	r3, [r7, #26]
 80183ba:	e01c      	b.n	80183f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80183bc:	7dfb      	ldrb	r3, [r7, #23]
 80183be:	2b01      	cmp	r3, #1
 80183c0:	d919      	bls.n	80183f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80183c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183c6:	495e      	ldr	r1, [pc, #376]	; (8018540 <etharp_find_entry+0x2d4>)
 80183c8:	4613      	mov	r3, r2
 80183ca:	005b      	lsls	r3, r3, #1
 80183cc:	4413      	add	r3, r2
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	440b      	add	r3, r1
 80183d2:	3312      	adds	r3, #18
 80183d4:	881b      	ldrh	r3, [r3, #0]
 80183d6:	8b3a      	ldrh	r2, [r7, #24]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d80c      	bhi.n	80183f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80183dc:	8c3b      	ldrh	r3, [r7, #32]
 80183de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80183e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183e4:	4956      	ldr	r1, [pc, #344]	; (8018540 <etharp_find_entry+0x2d4>)
 80183e6:	4613      	mov	r3, r2
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	4413      	add	r3, r2
 80183ec:	00db      	lsls	r3, r3, #3
 80183ee:	440b      	add	r3, r1
 80183f0:	3312      	adds	r3, #18
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183f6:	8c3b      	ldrh	r3, [r7, #32]
 80183f8:	3301      	adds	r3, #1
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	843b      	strh	r3, [r7, #32]
 80183fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018402:	2b09      	cmp	r3, #9
 8018404:	f77f af4c 	ble.w	80182a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018408:	7afb      	ldrb	r3, [r7, #11]
 801840a:	f003 0302 	and.w	r3, r3, #2
 801840e:	2b00      	cmp	r3, #0
 8018410:	d108      	bne.n	8018424 <etharp_find_entry+0x1b8>
 8018412:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018416:	2b0a      	cmp	r3, #10
 8018418:	d107      	bne.n	801842a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801841a:	7afb      	ldrb	r3, [r7, #11]
 801841c:	f003 0301 	and.w	r3, r3, #1
 8018420:	2b00      	cmp	r3, #0
 8018422:	d102      	bne.n	801842a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018424:	f04f 33ff 	mov.w	r3, #4294967295
 8018428:	e085      	b.n	8018536 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801842a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801842e:	2b09      	cmp	r3, #9
 8018430:	dc02      	bgt.n	8018438 <etharp_find_entry+0x1cc>
    i = empty;
 8018432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018434:	843b      	strh	r3, [r7, #32]
 8018436:	e039      	b.n	80184ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018438:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801843c:	2b09      	cmp	r3, #9
 801843e:	dc14      	bgt.n	801846a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018442:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018444:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018448:	493d      	ldr	r1, [pc, #244]	; (8018540 <etharp_find_entry+0x2d4>)
 801844a:	4613      	mov	r3, r2
 801844c:	005b      	lsls	r3, r3, #1
 801844e:	4413      	add	r3, r2
 8018450:	00db      	lsls	r3, r3, #3
 8018452:	440b      	add	r3, r1
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d018      	beq.n	801848c <etharp_find_entry+0x220>
 801845a:	4b3a      	ldr	r3, [pc, #232]	; (8018544 <etharp_find_entry+0x2d8>)
 801845c:	f240 126d 	movw	r2, #365	; 0x16d
 8018460:	493b      	ldr	r1, [pc, #236]	; (8018550 <etharp_find_entry+0x2e4>)
 8018462:	483a      	ldr	r0, [pc, #232]	; (801854c <etharp_find_entry+0x2e0>)
 8018464:	f002 fee0 	bl	801b228 <iprintf>
 8018468:	e010      	b.n	801848c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801846a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801846e:	2b09      	cmp	r3, #9
 8018470:	dc02      	bgt.n	8018478 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018474:	843b      	strh	r3, [r7, #32]
 8018476:	e009      	b.n	801848c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018478:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801847c:	2b09      	cmp	r3, #9
 801847e:	dc02      	bgt.n	8018486 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018480:	8bfb      	ldrh	r3, [r7, #30]
 8018482:	843b      	strh	r3, [r7, #32]
 8018484:	e002      	b.n	801848c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018486:	f04f 33ff 	mov.w	r3, #4294967295
 801848a:	e054      	b.n	8018536 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801848c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018490:	2b09      	cmp	r3, #9
 8018492:	dd06      	ble.n	80184a2 <etharp_find_entry+0x236>
 8018494:	4b2b      	ldr	r3, [pc, #172]	; (8018544 <etharp_find_entry+0x2d8>)
 8018496:	f240 127f 	movw	r2, #383	; 0x17f
 801849a:	492e      	ldr	r1, [pc, #184]	; (8018554 <etharp_find_entry+0x2e8>)
 801849c:	482b      	ldr	r0, [pc, #172]	; (801854c <etharp_find_entry+0x2e0>)
 801849e:	f002 fec3 	bl	801b228 <iprintf>
    etharp_free_entry(i);
 80184a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184a6:	4618      	mov	r0, r3
 80184a8:	f7ff fe06 	bl	80180b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80184ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184b0:	2b09      	cmp	r3, #9
 80184b2:	dd06      	ble.n	80184c2 <etharp_find_entry+0x256>
 80184b4:	4b23      	ldr	r3, [pc, #140]	; (8018544 <etharp_find_entry+0x2d8>)
 80184b6:	f240 1283 	movw	r2, #387	; 0x183
 80184ba:	4926      	ldr	r1, [pc, #152]	; (8018554 <etharp_find_entry+0x2e8>)
 80184bc:	4823      	ldr	r0, [pc, #140]	; (801854c <etharp_find_entry+0x2e0>)
 80184be:	f002 feb3 	bl	801b228 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80184c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184c6:	491e      	ldr	r1, [pc, #120]	; (8018540 <etharp_find_entry+0x2d4>)
 80184c8:	4613      	mov	r3, r2
 80184ca:	005b      	lsls	r3, r3, #1
 80184cc:	4413      	add	r3, r2
 80184ce:	00db      	lsls	r3, r3, #3
 80184d0:	440b      	add	r3, r1
 80184d2:	3314      	adds	r3, #20
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d006      	beq.n	80184e8 <etharp_find_entry+0x27c>
 80184da:	4b1a      	ldr	r3, [pc, #104]	; (8018544 <etharp_find_entry+0x2d8>)
 80184dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80184e0:	491d      	ldr	r1, [pc, #116]	; (8018558 <etharp_find_entry+0x2ec>)
 80184e2:	481a      	ldr	r0, [pc, #104]	; (801854c <etharp_find_entry+0x2e0>)
 80184e4:	f002 fea0 	bl	801b228 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00b      	beq.n	8018506 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80184ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	6819      	ldr	r1, [r3, #0]
 80184f6:	4812      	ldr	r0, [pc, #72]	; (8018540 <etharp_find_entry+0x2d4>)
 80184f8:	4613      	mov	r3, r2
 80184fa:	005b      	lsls	r3, r3, #1
 80184fc:	4413      	add	r3, r2
 80184fe:	00db      	lsls	r3, r3, #3
 8018500:	4403      	add	r3, r0
 8018502:	3304      	adds	r3, #4
 8018504:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801850a:	490d      	ldr	r1, [pc, #52]	; (8018540 <etharp_find_entry+0x2d4>)
 801850c:	4613      	mov	r3, r2
 801850e:	005b      	lsls	r3, r3, #1
 8018510:	4413      	add	r3, r2
 8018512:	00db      	lsls	r3, r3, #3
 8018514:	440b      	add	r3, r1
 8018516:	3312      	adds	r3, #18
 8018518:	2200      	movs	r2, #0
 801851a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801851c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018520:	4907      	ldr	r1, [pc, #28]	; (8018540 <etharp_find_entry+0x2d4>)
 8018522:	4613      	mov	r3, r2
 8018524:	005b      	lsls	r3, r3, #1
 8018526:	4413      	add	r3, r2
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	440b      	add	r3, r1
 801852c:	3308      	adds	r3, #8
 801852e:	687a      	ldr	r2, [r7, #4]
 8018530:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018536:	4618      	mov	r0, r3
 8018538:	3728      	adds	r7, #40	; 0x28
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}
 801853e:	bf00      	nop
 8018540:	200070ac 	.word	0x200070ac
 8018544:	08020560 	.word	0x08020560
 8018548:	08020598 	.word	0x08020598
 801854c:	080205d8 	.word	0x080205d8
 8018550:	08020600 	.word	0x08020600
 8018554:	08020618 	.word	0x08020618
 8018558:	0802062c 	.word	0x0802062c

0801855c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b088      	sub	sp, #32
 8018560:	af02      	add	r7, sp, #8
 8018562:	60f8      	str	r0, [r7, #12]
 8018564:	60b9      	str	r1, [r7, #8]
 8018566:	607a      	str	r2, [r7, #4]
 8018568:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018570:	2b06      	cmp	r3, #6
 8018572:	d006      	beq.n	8018582 <etharp_update_arp_entry+0x26>
 8018574:	4b48      	ldr	r3, [pc, #288]	; (8018698 <etharp_update_arp_entry+0x13c>)
 8018576:	f240 12a9 	movw	r2, #425	; 0x1a9
 801857a:	4948      	ldr	r1, [pc, #288]	; (801869c <etharp_update_arp_entry+0x140>)
 801857c:	4848      	ldr	r0, [pc, #288]	; (80186a0 <etharp_update_arp_entry+0x144>)
 801857e:	f002 fe53 	bl	801b228 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d012      	beq.n	80185ae <etharp_update_arp_entry+0x52>
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d00e      	beq.n	80185ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	68f9      	ldr	r1, [r7, #12]
 8018596:	4618      	mov	r0, r3
 8018598:	f001 f924 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 801859c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d105      	bne.n	80185ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185aa:	2be0      	cmp	r3, #224	; 0xe0
 80185ac:	d102      	bne.n	80185b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185ae:	f06f 030f 	mvn.w	r3, #15
 80185b2:	e06c      	b.n	801868e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80185b4:	78fb      	ldrb	r3, [r7, #3]
 80185b6:	68fa      	ldr	r2, [r7, #12]
 80185b8:	4619      	mov	r1, r3
 80185ba:	68b8      	ldr	r0, [r7, #8]
 80185bc:	f7ff fe56 	bl	801826c <etharp_find_entry>
 80185c0:	4603      	mov	r3, r0
 80185c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80185c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	da02      	bge.n	80185d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80185cc:	8afb      	ldrh	r3, [r7, #22]
 80185ce:	b25b      	sxtb	r3, r3
 80185d0:	e05d      	b.n	801868e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80185d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185d6:	4933      	ldr	r1, [pc, #204]	; (80186a4 <etharp_update_arp_entry+0x148>)
 80185d8:	4613      	mov	r3, r2
 80185da:	005b      	lsls	r3, r3, #1
 80185dc:	4413      	add	r3, r2
 80185de:	00db      	lsls	r3, r3, #3
 80185e0:	440b      	add	r3, r1
 80185e2:	3314      	adds	r3, #20
 80185e4:	2202      	movs	r2, #2
 80185e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80185e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185ec:	492d      	ldr	r1, [pc, #180]	; (80186a4 <etharp_update_arp_entry+0x148>)
 80185ee:	4613      	mov	r3, r2
 80185f0:	005b      	lsls	r3, r3, #1
 80185f2:	4413      	add	r3, r2
 80185f4:	00db      	lsls	r3, r3, #3
 80185f6:	440b      	add	r3, r1
 80185f8:	3308      	adds	r3, #8
 80185fa:	68fa      	ldr	r2, [r7, #12]
 80185fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80185fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018602:	4613      	mov	r3, r2
 8018604:	005b      	lsls	r3, r3, #1
 8018606:	4413      	add	r3, r2
 8018608:	00db      	lsls	r3, r3, #3
 801860a:	3308      	adds	r3, #8
 801860c:	4a25      	ldr	r2, [pc, #148]	; (80186a4 <etharp_update_arp_entry+0x148>)
 801860e:	4413      	add	r3, r2
 8018610:	3304      	adds	r3, #4
 8018612:	2206      	movs	r2, #6
 8018614:	6879      	ldr	r1, [r7, #4]
 8018616:	4618      	mov	r0, r3
 8018618:	f003 f80f 	bl	801b63a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801861c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018620:	4920      	ldr	r1, [pc, #128]	; (80186a4 <etharp_update_arp_entry+0x148>)
 8018622:	4613      	mov	r3, r2
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	4413      	add	r3, r2
 8018628:	00db      	lsls	r3, r3, #3
 801862a:	440b      	add	r3, r1
 801862c:	3312      	adds	r3, #18
 801862e:	2200      	movs	r2, #0
 8018630:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018636:	491b      	ldr	r1, [pc, #108]	; (80186a4 <etharp_update_arp_entry+0x148>)
 8018638:	4613      	mov	r3, r2
 801863a:	005b      	lsls	r3, r3, #1
 801863c:	4413      	add	r3, r2
 801863e:	00db      	lsls	r3, r3, #3
 8018640:	440b      	add	r3, r1
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d021      	beq.n	801868c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801864c:	4915      	ldr	r1, [pc, #84]	; (80186a4 <etharp_update_arp_entry+0x148>)
 801864e:	4613      	mov	r3, r2
 8018650:	005b      	lsls	r3, r3, #1
 8018652:	4413      	add	r3, r2
 8018654:	00db      	lsls	r3, r3, #3
 8018656:	440b      	add	r3, r1
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801865c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018660:	4910      	ldr	r1, [pc, #64]	; (80186a4 <etharp_update_arp_entry+0x148>)
 8018662:	4613      	mov	r3, r2
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	4413      	add	r3, r2
 8018668:	00db      	lsls	r3, r3, #3
 801866a:	440b      	add	r3, r1
 801866c:	2200      	movs	r2, #0
 801866e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801867a:	9300      	str	r3, [sp, #0]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6939      	ldr	r1, [r7, #16]
 8018680:	68f8      	ldr	r0, [r7, #12]
 8018682:	f002 f84d 	bl	801a720 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018686:	6938      	ldr	r0, [r7, #16]
 8018688:	f7f8 ff2c 	bl	80114e4 <pbuf_free>
  }
  return ERR_OK;
 801868c:	2300      	movs	r3, #0
}
 801868e:	4618      	mov	r0, r3
 8018690:	3718      	adds	r7, #24
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}
 8018696:	bf00      	nop
 8018698:	08020560 	.word	0x08020560
 801869c:	08020658 	.word	0x08020658
 80186a0:	080205d8 	.word	0x080205d8
 80186a4:	200070ac 	.word	0x200070ac

080186a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b084      	sub	sp, #16
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186b0:	2300      	movs	r3, #0
 80186b2:	60fb      	str	r3, [r7, #12]
 80186b4:	e01e      	b.n	80186f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80186b6:	4913      	ldr	r1, [pc, #76]	; (8018704 <etharp_cleanup_netif+0x5c>)
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	4613      	mov	r3, r2
 80186bc:	005b      	lsls	r3, r3, #1
 80186be:	4413      	add	r3, r2
 80186c0:	00db      	lsls	r3, r3, #3
 80186c2:	440b      	add	r3, r1
 80186c4:	3314      	adds	r3, #20
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80186ca:	7afb      	ldrb	r3, [r7, #11]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d00e      	beq.n	80186ee <etharp_cleanup_netif+0x46>
 80186d0:	490c      	ldr	r1, [pc, #48]	; (8018704 <etharp_cleanup_netif+0x5c>)
 80186d2:	68fa      	ldr	r2, [r7, #12]
 80186d4:	4613      	mov	r3, r2
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	4413      	add	r3, r2
 80186da:	00db      	lsls	r3, r3, #3
 80186dc:	440b      	add	r3, r1
 80186de:	3308      	adds	r3, #8
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d102      	bne.n	80186ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f7ff fce5 	bl	80180b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	3301      	adds	r3, #1
 80186f2:	60fb      	str	r3, [r7, #12]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	2b09      	cmp	r3, #9
 80186f8:	dddd      	ble.n	80186b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80186fa:	bf00      	nop
 80186fc:	bf00      	nop
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}
 8018704:	200070ac 	.word	0x200070ac

08018708 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018708:	b5b0      	push	{r4, r5, r7, lr}
 801870a:	b08a      	sub	sp, #40	; 0x28
 801870c:	af04      	add	r7, sp, #16
 801870e:	6078      	str	r0, [r7, #4]
 8018710:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d107      	bne.n	8018728 <etharp_input+0x20>
 8018718:	4b3d      	ldr	r3, [pc, #244]	; (8018810 <etharp_input+0x108>)
 801871a:	f240 228a 	movw	r2, #650	; 0x28a
 801871e:	493d      	ldr	r1, [pc, #244]	; (8018814 <etharp_input+0x10c>)
 8018720:	483d      	ldr	r0, [pc, #244]	; (8018818 <etharp_input+0x110>)
 8018722:	f002 fd81 	bl	801b228 <iprintf>
 8018726:	e06f      	b.n	8018808 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	881b      	ldrh	r3, [r3, #0]
 8018732:	b29b      	uxth	r3, r3
 8018734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018738:	d10c      	bne.n	8018754 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801873a:	693b      	ldr	r3, [r7, #16]
 801873c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801873e:	2b06      	cmp	r3, #6
 8018740:	d108      	bne.n	8018754 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018746:	2b04      	cmp	r3, #4
 8018748:	d104      	bne.n	8018754 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	885b      	ldrh	r3, [r3, #2]
 801874e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018750:	2b08      	cmp	r3, #8
 8018752:	d003      	beq.n	801875c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f7f8 fec5 	bl	80114e4 <pbuf_free>
    return;
 801875a:	e055      	b.n	8018808 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	330e      	adds	r3, #14
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	3318      	adds	r3, #24
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	3304      	adds	r3, #4
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d102      	bne.n	801877c <etharp_input+0x74>
    for_us = 0;
 8018776:	2300      	movs	r3, #0
 8018778:	75fb      	strb	r3, [r7, #23]
 801877a:	e009      	b.n	8018790 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801877c:	68ba      	ldr	r2, [r7, #8]
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	3304      	adds	r3, #4
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	429a      	cmp	r2, r3
 8018786:	bf0c      	ite	eq
 8018788:	2301      	moveq	r3, #1
 801878a:	2300      	movne	r3, #0
 801878c:	b2db      	uxtb	r3, r3
 801878e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	f103 0208 	add.w	r2, r3, #8
 8018796:	7dfb      	ldrb	r3, [r7, #23]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d001      	beq.n	80187a0 <etharp_input+0x98>
 801879c:	2301      	movs	r3, #1
 801879e:	e000      	b.n	80187a2 <etharp_input+0x9a>
 80187a0:	2302      	movs	r3, #2
 80187a2:	f107 010c 	add.w	r1, r7, #12
 80187a6:	6838      	ldr	r0, [r7, #0]
 80187a8:	f7ff fed8 	bl	801855c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	88db      	ldrh	r3, [r3, #6]
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187b6:	d003      	beq.n	80187c0 <etharp_input+0xb8>
 80187b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80187bc:	d01e      	beq.n	80187fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80187be:	e020      	b.n	8018802 <etharp_input+0xfa>
      if (for_us) {
 80187c0:	7dfb      	ldrb	r3, [r7, #23]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d01c      	beq.n	8018800 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80187cc:	693b      	ldr	r3, [r7, #16]
 80187ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80187d2:	683b      	ldr	r3, [r7, #0]
 80187d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80187dc:	693a      	ldr	r2, [r7, #16]
 80187de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80187e0:	2102      	movs	r1, #2
 80187e2:	9103      	str	r1, [sp, #12]
 80187e4:	f107 010c 	add.w	r1, r7, #12
 80187e8:	9102      	str	r1, [sp, #8]
 80187ea:	9201      	str	r2, [sp, #4]
 80187ec:	9300      	str	r3, [sp, #0]
 80187ee:	462b      	mov	r3, r5
 80187f0:	4622      	mov	r2, r4
 80187f2:	4601      	mov	r1, r0
 80187f4:	6838      	ldr	r0, [r7, #0]
 80187f6:	f000 faeb 	bl	8018dd0 <etharp_raw>
      break;
 80187fa:	e001      	b.n	8018800 <etharp_input+0xf8>
      break;
 80187fc:	bf00      	nop
 80187fe:	e000      	b.n	8018802 <etharp_input+0xfa>
      break;
 8018800:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7f8 fe6e 	bl	80114e4 <pbuf_free>
}
 8018808:	3718      	adds	r7, #24
 801880a:	46bd      	mov	sp, r7
 801880c:	bdb0      	pop	{r4, r5, r7, pc}
 801880e:	bf00      	nop
 8018810:	08020560 	.word	0x08020560
 8018814:	080206b0 	.word	0x080206b0
 8018818:	080205d8 	.word	0x080205d8

0801881c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b086      	sub	sp, #24
 8018820:	af02      	add	r7, sp, #8
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	4613      	mov	r3, r2
 8018828:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801882a:	79fa      	ldrb	r2, [r7, #7]
 801882c:	4944      	ldr	r1, [pc, #272]	; (8018940 <etharp_output_to_arp_index+0x124>)
 801882e:	4613      	mov	r3, r2
 8018830:	005b      	lsls	r3, r3, #1
 8018832:	4413      	add	r3, r2
 8018834:	00db      	lsls	r3, r3, #3
 8018836:	440b      	add	r3, r1
 8018838:	3314      	adds	r3, #20
 801883a:	781b      	ldrb	r3, [r3, #0]
 801883c:	2b01      	cmp	r3, #1
 801883e:	d806      	bhi.n	801884e <etharp_output_to_arp_index+0x32>
 8018840:	4b40      	ldr	r3, [pc, #256]	; (8018944 <etharp_output_to_arp_index+0x128>)
 8018842:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018846:	4940      	ldr	r1, [pc, #256]	; (8018948 <etharp_output_to_arp_index+0x12c>)
 8018848:	4840      	ldr	r0, [pc, #256]	; (801894c <etharp_output_to_arp_index+0x130>)
 801884a:	f002 fced 	bl	801b228 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801884e:	79fa      	ldrb	r2, [r7, #7]
 8018850:	493b      	ldr	r1, [pc, #236]	; (8018940 <etharp_output_to_arp_index+0x124>)
 8018852:	4613      	mov	r3, r2
 8018854:	005b      	lsls	r3, r3, #1
 8018856:	4413      	add	r3, r2
 8018858:	00db      	lsls	r3, r3, #3
 801885a:	440b      	add	r3, r1
 801885c:	3314      	adds	r3, #20
 801885e:	781b      	ldrb	r3, [r3, #0]
 8018860:	2b02      	cmp	r3, #2
 8018862:	d153      	bne.n	801890c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018864:	79fa      	ldrb	r2, [r7, #7]
 8018866:	4936      	ldr	r1, [pc, #216]	; (8018940 <etharp_output_to_arp_index+0x124>)
 8018868:	4613      	mov	r3, r2
 801886a:	005b      	lsls	r3, r3, #1
 801886c:	4413      	add	r3, r2
 801886e:	00db      	lsls	r3, r3, #3
 8018870:	440b      	add	r3, r1
 8018872:	3312      	adds	r3, #18
 8018874:	881b      	ldrh	r3, [r3, #0]
 8018876:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801887a:	d919      	bls.n	80188b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801887c:	79fa      	ldrb	r2, [r7, #7]
 801887e:	4613      	mov	r3, r2
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	4413      	add	r3, r2
 8018884:	00db      	lsls	r3, r3, #3
 8018886:	4a2e      	ldr	r2, [pc, #184]	; (8018940 <etharp_output_to_arp_index+0x124>)
 8018888:	4413      	add	r3, r2
 801888a:	3304      	adds	r3, #4
 801888c:	4619      	mov	r1, r3
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f000 fb4c 	bl	8018f2c <etharp_request>
 8018894:	4603      	mov	r3, r0
 8018896:	2b00      	cmp	r3, #0
 8018898:	d138      	bne.n	801890c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801889a:	79fa      	ldrb	r2, [r7, #7]
 801889c:	4928      	ldr	r1, [pc, #160]	; (8018940 <etharp_output_to_arp_index+0x124>)
 801889e:	4613      	mov	r3, r2
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4413      	add	r3, r2
 80188a4:	00db      	lsls	r3, r3, #3
 80188a6:	440b      	add	r3, r1
 80188a8:	3314      	adds	r3, #20
 80188aa:	2203      	movs	r2, #3
 80188ac:	701a      	strb	r2, [r3, #0]
 80188ae:	e02d      	b.n	801890c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80188b0:	79fa      	ldrb	r2, [r7, #7]
 80188b2:	4923      	ldr	r1, [pc, #140]	; (8018940 <etharp_output_to_arp_index+0x124>)
 80188b4:	4613      	mov	r3, r2
 80188b6:	005b      	lsls	r3, r3, #1
 80188b8:	4413      	add	r3, r2
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	440b      	add	r3, r1
 80188be:	3312      	adds	r3, #18
 80188c0:	881b      	ldrh	r3, [r3, #0]
 80188c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80188c6:	d321      	bcc.n	801890c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80188c8:	79fa      	ldrb	r2, [r7, #7]
 80188ca:	4613      	mov	r3, r2
 80188cc:	005b      	lsls	r3, r3, #1
 80188ce:	4413      	add	r3, r2
 80188d0:	00db      	lsls	r3, r3, #3
 80188d2:	4a1b      	ldr	r2, [pc, #108]	; (8018940 <etharp_output_to_arp_index+0x124>)
 80188d4:	4413      	add	r3, r2
 80188d6:	1d19      	adds	r1, r3, #4
 80188d8:	79fa      	ldrb	r2, [r7, #7]
 80188da:	4613      	mov	r3, r2
 80188dc:	005b      	lsls	r3, r3, #1
 80188de:	4413      	add	r3, r2
 80188e0:	00db      	lsls	r3, r3, #3
 80188e2:	3308      	adds	r3, #8
 80188e4:	4a16      	ldr	r2, [pc, #88]	; (8018940 <etharp_output_to_arp_index+0x124>)
 80188e6:	4413      	add	r3, r2
 80188e8:	3304      	adds	r3, #4
 80188ea:	461a      	mov	r2, r3
 80188ec:	68f8      	ldr	r0, [r7, #12]
 80188ee:	f000 fafb 	bl	8018ee8 <etharp_request_dst>
 80188f2:	4603      	mov	r3, r0
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d109      	bne.n	801890c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188f8:	79fa      	ldrb	r2, [r7, #7]
 80188fa:	4911      	ldr	r1, [pc, #68]	; (8018940 <etharp_output_to_arp_index+0x124>)
 80188fc:	4613      	mov	r3, r2
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	4413      	add	r3, r2
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	440b      	add	r3, r1
 8018906:	3314      	adds	r3, #20
 8018908:	2203      	movs	r2, #3
 801890a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018912:	79fa      	ldrb	r2, [r7, #7]
 8018914:	4613      	mov	r3, r2
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	4413      	add	r3, r2
 801891a:	00db      	lsls	r3, r3, #3
 801891c:	3308      	adds	r3, #8
 801891e:	4a08      	ldr	r2, [pc, #32]	; (8018940 <etharp_output_to_arp_index+0x124>)
 8018920:	4413      	add	r3, r2
 8018922:	3304      	adds	r3, #4
 8018924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018928:	9200      	str	r2, [sp, #0]
 801892a:	460a      	mov	r2, r1
 801892c:	68b9      	ldr	r1, [r7, #8]
 801892e:	68f8      	ldr	r0, [r7, #12]
 8018930:	f001 fef6 	bl	801a720 <ethernet_output>
 8018934:	4603      	mov	r3, r0
}
 8018936:	4618      	mov	r0, r3
 8018938:	3710      	adds	r7, #16
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}
 801893e:	bf00      	nop
 8018940:	200070ac 	.word	0x200070ac
 8018944:	08020560 	.word	0x08020560
 8018948:	080206d0 	.word	0x080206d0
 801894c:	080205d8 	.word	0x080205d8

08018950 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b08a      	sub	sp, #40	; 0x28
 8018954:	af02      	add	r7, sp, #8
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	60b9      	str	r1, [r7, #8]
 801895a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d106      	bne.n	8018974 <etharp_output+0x24>
 8018966:	4b73      	ldr	r3, [pc, #460]	; (8018b34 <etharp_output+0x1e4>)
 8018968:	f240 321e 	movw	r2, #798	; 0x31e
 801896c:	4972      	ldr	r1, [pc, #456]	; (8018b38 <etharp_output+0x1e8>)
 801896e:	4873      	ldr	r0, [pc, #460]	; (8018b3c <etharp_output+0x1ec>)
 8018970:	f002 fc5a 	bl	801b228 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d106      	bne.n	8018988 <etharp_output+0x38>
 801897a:	4b6e      	ldr	r3, [pc, #440]	; (8018b34 <etharp_output+0x1e4>)
 801897c:	f240 321f 	movw	r2, #799	; 0x31f
 8018980:	496f      	ldr	r1, [pc, #444]	; (8018b40 <etharp_output+0x1f0>)
 8018982:	486e      	ldr	r0, [pc, #440]	; (8018b3c <etharp_output+0x1ec>)
 8018984:	f002 fc50 	bl	801b228 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d106      	bne.n	801899c <etharp_output+0x4c>
 801898e:	4b69      	ldr	r3, [pc, #420]	; (8018b34 <etharp_output+0x1e4>)
 8018990:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018994:	496b      	ldr	r1, [pc, #428]	; (8018b44 <etharp_output+0x1f4>)
 8018996:	4869      	ldr	r0, [pc, #420]	; (8018b3c <etharp_output+0x1ec>)
 8018998:	f002 fc46 	bl	801b228 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	68f9      	ldr	r1, [r7, #12]
 80189a2:	4618      	mov	r0, r3
 80189a4:	f000 ff1e 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d002      	beq.n	80189b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80189ae:	4b66      	ldr	r3, [pc, #408]	; (8018b48 <etharp_output+0x1f8>)
 80189b0:	61fb      	str	r3, [r7, #28]
 80189b2:	e0af      	b.n	8018b14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80189bc:	2be0      	cmp	r3, #224	; 0xe0
 80189be:	d118      	bne.n	80189f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80189c0:	2301      	movs	r3, #1
 80189c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80189c4:	2300      	movs	r3, #0
 80189c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80189c8:	235e      	movs	r3, #94	; 0x5e
 80189ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	3301      	adds	r3, #1
 80189d0:	781b      	ldrb	r3, [r3, #0]
 80189d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	3302      	adds	r3, #2
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	3303      	adds	r3, #3
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80189ea:	f107 0310 	add.w	r3, r7, #16
 80189ee:	61fb      	str	r3, [r7, #28]
 80189f0:	e090      	b.n	8018b14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681a      	ldr	r2, [r3, #0]
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	3304      	adds	r3, #4
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	405a      	eors	r2, r3
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	3308      	adds	r3, #8
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	4013      	ands	r3, r2
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d012      	beq.n	8018a30 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a10:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018a14:	4293      	cmp	r3, r2
 8018a16:	d00b      	beq.n	8018a30 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	330c      	adds	r3, #12
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d003      	beq.n	8018a2a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	330c      	adds	r3, #12
 8018a26:	61bb      	str	r3, [r7, #24]
 8018a28:	e002      	b.n	8018a30 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a2a:	f06f 0303 	mvn.w	r3, #3
 8018a2e:	e07d      	b.n	8018b2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a30:	4b46      	ldr	r3, [pc, #280]	; (8018b4c <etharp_output+0x1fc>)
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	4619      	mov	r1, r3
 8018a36:	4a46      	ldr	r2, [pc, #280]	; (8018b50 <etharp_output+0x200>)
 8018a38:	460b      	mov	r3, r1
 8018a3a:	005b      	lsls	r3, r3, #1
 8018a3c:	440b      	add	r3, r1
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	4413      	add	r3, r2
 8018a42:	3314      	adds	r3, #20
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	2b01      	cmp	r3, #1
 8018a48:	d925      	bls.n	8018a96 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a4a:	4b40      	ldr	r3, [pc, #256]	; (8018b4c <etharp_output+0x1fc>)
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	4619      	mov	r1, r3
 8018a50:	4a3f      	ldr	r2, [pc, #252]	; (8018b50 <etharp_output+0x200>)
 8018a52:	460b      	mov	r3, r1
 8018a54:	005b      	lsls	r3, r3, #1
 8018a56:	440b      	add	r3, r1
 8018a58:	00db      	lsls	r3, r3, #3
 8018a5a:	4413      	add	r3, r2
 8018a5c:	3308      	adds	r3, #8
 8018a5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a60:	68fa      	ldr	r2, [r7, #12]
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d117      	bne.n	8018a96 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018a66:	69bb      	ldr	r3, [r7, #24]
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	4b38      	ldr	r3, [pc, #224]	; (8018b4c <etharp_output+0x1fc>)
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	4937      	ldr	r1, [pc, #220]	; (8018b50 <etharp_output+0x200>)
 8018a72:	4603      	mov	r3, r0
 8018a74:	005b      	lsls	r3, r3, #1
 8018a76:	4403      	add	r3, r0
 8018a78:	00db      	lsls	r3, r3, #3
 8018a7a:	440b      	add	r3, r1
 8018a7c:	3304      	adds	r3, #4
 8018a7e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d108      	bne.n	8018a96 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018a84:	4b31      	ldr	r3, [pc, #196]	; (8018b4c <etharp_output+0x1fc>)
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	461a      	mov	r2, r3
 8018a8a:	68b9      	ldr	r1, [r7, #8]
 8018a8c:	68f8      	ldr	r0, [r7, #12]
 8018a8e:	f7ff fec5 	bl	801881c <etharp_output_to_arp_index>
 8018a92:	4603      	mov	r3, r0
 8018a94:	e04a      	b.n	8018b2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a96:	2300      	movs	r3, #0
 8018a98:	75fb      	strb	r3, [r7, #23]
 8018a9a:	e031      	b.n	8018b00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018a9c:	7dfa      	ldrb	r2, [r7, #23]
 8018a9e:	492c      	ldr	r1, [pc, #176]	; (8018b50 <etharp_output+0x200>)
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	005b      	lsls	r3, r3, #1
 8018aa4:	4413      	add	r3, r2
 8018aa6:	00db      	lsls	r3, r3, #3
 8018aa8:	440b      	add	r3, r1
 8018aaa:	3314      	adds	r3, #20
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	2b01      	cmp	r3, #1
 8018ab0:	d923      	bls.n	8018afa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018ab2:	7dfa      	ldrb	r2, [r7, #23]
 8018ab4:	4926      	ldr	r1, [pc, #152]	; (8018b50 <etharp_output+0x200>)
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	005b      	lsls	r3, r3, #1
 8018aba:	4413      	add	r3, r2
 8018abc:	00db      	lsls	r3, r3, #3
 8018abe:	440b      	add	r3, r1
 8018ac0:	3308      	adds	r3, #8
 8018ac2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ac4:	68fa      	ldr	r2, [r7, #12]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d117      	bne.n	8018afa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018aca:	69bb      	ldr	r3, [r7, #24]
 8018acc:	6819      	ldr	r1, [r3, #0]
 8018ace:	7dfa      	ldrb	r2, [r7, #23]
 8018ad0:	481f      	ldr	r0, [pc, #124]	; (8018b50 <etharp_output+0x200>)
 8018ad2:	4613      	mov	r3, r2
 8018ad4:	005b      	lsls	r3, r3, #1
 8018ad6:	4413      	add	r3, r2
 8018ad8:	00db      	lsls	r3, r3, #3
 8018ada:	4403      	add	r3, r0
 8018adc:	3304      	adds	r3, #4
 8018ade:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018ae0:	4299      	cmp	r1, r3
 8018ae2:	d10a      	bne.n	8018afa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018ae4:	4a19      	ldr	r2, [pc, #100]	; (8018b4c <etharp_output+0x1fc>)
 8018ae6:	7dfb      	ldrb	r3, [r7, #23]
 8018ae8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018aea:	7dfb      	ldrb	r3, [r7, #23]
 8018aec:	461a      	mov	r2, r3
 8018aee:	68b9      	ldr	r1, [r7, #8]
 8018af0:	68f8      	ldr	r0, [r7, #12]
 8018af2:	f7ff fe93 	bl	801881c <etharp_output_to_arp_index>
 8018af6:	4603      	mov	r3, r0
 8018af8:	e018      	b.n	8018b2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018afa:	7dfb      	ldrb	r3, [r7, #23]
 8018afc:	3301      	adds	r3, #1
 8018afe:	75fb      	strb	r3, [r7, #23]
 8018b00:	7dfb      	ldrb	r3, [r7, #23]
 8018b02:	2b09      	cmp	r3, #9
 8018b04:	d9ca      	bls.n	8018a9c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b06:	68ba      	ldr	r2, [r7, #8]
 8018b08:	69b9      	ldr	r1, [r7, #24]
 8018b0a:	68f8      	ldr	r0, [r7, #12]
 8018b0c:	f000 f822 	bl	8018b54 <etharp_query>
 8018b10:	4603      	mov	r3, r0
 8018b12:	e00b      	b.n	8018b2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b1e:	9300      	str	r3, [sp, #0]
 8018b20:	69fb      	ldr	r3, [r7, #28]
 8018b22:	68b9      	ldr	r1, [r7, #8]
 8018b24:	68f8      	ldr	r0, [r7, #12]
 8018b26:	f001 fdfb 	bl	801a720 <ethernet_output>
 8018b2a:	4603      	mov	r3, r0
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3720      	adds	r7, #32
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	08020560 	.word	0x08020560
 8018b38:	080206b0 	.word	0x080206b0
 8018b3c:	080205d8 	.word	0x080205d8
 8018b40:	08020700 	.word	0x08020700
 8018b44:	080206a0 	.word	0x080206a0
 8018b48:	08020d60 	.word	0x08020d60
 8018b4c:	2000719c 	.word	0x2000719c
 8018b50:	200070ac 	.word	0x200070ac

08018b54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b08c      	sub	sp, #48	; 0x30
 8018b58:	af02      	add	r7, sp, #8
 8018b5a:	60f8      	str	r0, [r7, #12]
 8018b5c:	60b9      	str	r1, [r7, #8]
 8018b5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	3326      	adds	r3, #38	; 0x26
 8018b64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018b66:	23ff      	movs	r3, #255	; 0xff
 8018b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	68f9      	ldr	r1, [r7, #12]
 8018b76:	4618      	mov	r0, r3
 8018b78:	f000 fe34 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d10c      	bne.n	8018b9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b8a:	2be0      	cmp	r3, #224	; 0xe0
 8018b8c:	d006      	beq.n	8018b9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d003      	beq.n	8018b9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018b94:	68bb      	ldr	r3, [r7, #8]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d102      	bne.n	8018ba2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018b9c:	f06f 030f 	mvn.w	r3, #15
 8018ba0:	e101      	b.n	8018da6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018ba2:	68fa      	ldr	r2, [r7, #12]
 8018ba4:	2101      	movs	r1, #1
 8018ba6:	68b8      	ldr	r0, [r7, #8]
 8018ba8:	f7ff fb60 	bl	801826c <etharp_find_entry>
 8018bac:	4603      	mov	r3, r0
 8018bae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018bb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	da02      	bge.n	8018bbe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018bb8:	8a7b      	ldrh	r3, [r7, #18]
 8018bba:	b25b      	sxtb	r3, r3
 8018bbc:	e0f3      	b.n	8018da6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018bbe:	8a7b      	ldrh	r3, [r7, #18]
 8018bc0:	2b7e      	cmp	r3, #126	; 0x7e
 8018bc2:	d906      	bls.n	8018bd2 <etharp_query+0x7e>
 8018bc4:	4b7a      	ldr	r3, [pc, #488]	; (8018db0 <etharp_query+0x25c>)
 8018bc6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018bca:	497a      	ldr	r1, [pc, #488]	; (8018db4 <etharp_query+0x260>)
 8018bcc:	487a      	ldr	r0, [pc, #488]	; (8018db8 <etharp_query+0x264>)
 8018bce:	f002 fb2b 	bl	801b228 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018bd2:	8a7b      	ldrh	r3, [r7, #18]
 8018bd4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018bd6:	7c7a      	ldrb	r2, [r7, #17]
 8018bd8:	4978      	ldr	r1, [pc, #480]	; (8018dbc <etharp_query+0x268>)
 8018bda:	4613      	mov	r3, r2
 8018bdc:	005b      	lsls	r3, r3, #1
 8018bde:	4413      	add	r3, r2
 8018be0:	00db      	lsls	r3, r3, #3
 8018be2:	440b      	add	r3, r1
 8018be4:	3314      	adds	r3, #20
 8018be6:	781b      	ldrb	r3, [r3, #0]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d115      	bne.n	8018c18 <etharp_query+0xc4>
    is_new_entry = 1;
 8018bec:	2301      	movs	r3, #1
 8018bee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018bf0:	7c7a      	ldrb	r2, [r7, #17]
 8018bf2:	4972      	ldr	r1, [pc, #456]	; (8018dbc <etharp_query+0x268>)
 8018bf4:	4613      	mov	r3, r2
 8018bf6:	005b      	lsls	r3, r3, #1
 8018bf8:	4413      	add	r3, r2
 8018bfa:	00db      	lsls	r3, r3, #3
 8018bfc:	440b      	add	r3, r1
 8018bfe:	3314      	adds	r3, #20
 8018c00:	2201      	movs	r2, #1
 8018c02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c04:	7c7a      	ldrb	r2, [r7, #17]
 8018c06:	496d      	ldr	r1, [pc, #436]	; (8018dbc <etharp_query+0x268>)
 8018c08:	4613      	mov	r3, r2
 8018c0a:	005b      	lsls	r3, r3, #1
 8018c0c:	4413      	add	r3, r2
 8018c0e:	00db      	lsls	r3, r3, #3
 8018c10:	440b      	add	r3, r1
 8018c12:	3308      	adds	r3, #8
 8018c14:	68fa      	ldr	r2, [r7, #12]
 8018c16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018c18:	7c7a      	ldrb	r2, [r7, #17]
 8018c1a:	4968      	ldr	r1, [pc, #416]	; (8018dbc <etharp_query+0x268>)
 8018c1c:	4613      	mov	r3, r2
 8018c1e:	005b      	lsls	r3, r3, #1
 8018c20:	4413      	add	r3, r2
 8018c22:	00db      	lsls	r3, r3, #3
 8018c24:	440b      	add	r3, r1
 8018c26:	3314      	adds	r3, #20
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	2b01      	cmp	r3, #1
 8018c2c:	d011      	beq.n	8018c52 <etharp_query+0xfe>
 8018c2e:	7c7a      	ldrb	r2, [r7, #17]
 8018c30:	4962      	ldr	r1, [pc, #392]	; (8018dbc <etharp_query+0x268>)
 8018c32:	4613      	mov	r3, r2
 8018c34:	005b      	lsls	r3, r3, #1
 8018c36:	4413      	add	r3, r2
 8018c38:	00db      	lsls	r3, r3, #3
 8018c3a:	440b      	add	r3, r1
 8018c3c:	3314      	adds	r3, #20
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	2b01      	cmp	r3, #1
 8018c42:	d806      	bhi.n	8018c52 <etharp_query+0xfe>
 8018c44:	4b5a      	ldr	r3, [pc, #360]	; (8018db0 <etharp_query+0x25c>)
 8018c46:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018c4a:	495d      	ldr	r1, [pc, #372]	; (8018dc0 <etharp_query+0x26c>)
 8018c4c:	485a      	ldr	r0, [pc, #360]	; (8018db8 <etharp_query+0x264>)
 8018c4e:	f002 faeb 	bl	801b228 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018c52:	6a3b      	ldr	r3, [r7, #32]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d102      	bne.n	8018c5e <etharp_query+0x10a>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d10c      	bne.n	8018c78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018c5e:	68b9      	ldr	r1, [r7, #8]
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	f000 f963 	bl	8018f2c <etharp_request>
 8018c66:	4603      	mov	r3, r0
 8018c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d102      	bne.n	8018c78 <etharp_query+0x124>
      return result;
 8018c72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018c76:	e096      	b.n	8018da6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d106      	bne.n	8018c8c <etharp_query+0x138>
 8018c7e:	4b4c      	ldr	r3, [pc, #304]	; (8018db0 <etharp_query+0x25c>)
 8018c80:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018c84:	494f      	ldr	r1, [pc, #316]	; (8018dc4 <etharp_query+0x270>)
 8018c86:	484c      	ldr	r0, [pc, #304]	; (8018db8 <etharp_query+0x264>)
 8018c88:	f002 face 	bl	801b228 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018c8c:	7c7a      	ldrb	r2, [r7, #17]
 8018c8e:	494b      	ldr	r1, [pc, #300]	; (8018dbc <etharp_query+0x268>)
 8018c90:	4613      	mov	r3, r2
 8018c92:	005b      	lsls	r3, r3, #1
 8018c94:	4413      	add	r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	440b      	add	r3, r1
 8018c9a:	3314      	adds	r3, #20
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d917      	bls.n	8018cd2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018ca2:	4a49      	ldr	r2, [pc, #292]	; (8018dc8 <etharp_query+0x274>)
 8018ca4:	7c7b      	ldrb	r3, [r7, #17]
 8018ca6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018ca8:	7c7a      	ldrb	r2, [r7, #17]
 8018caa:	4613      	mov	r3, r2
 8018cac:	005b      	lsls	r3, r3, #1
 8018cae:	4413      	add	r3, r2
 8018cb0:	00db      	lsls	r3, r3, #3
 8018cb2:	3308      	adds	r3, #8
 8018cb4:	4a41      	ldr	r2, [pc, #260]	; (8018dbc <etharp_query+0x268>)
 8018cb6:	4413      	add	r3, r2
 8018cb8:	3304      	adds	r3, #4
 8018cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018cbe:	9200      	str	r2, [sp, #0]
 8018cc0:	697a      	ldr	r2, [r7, #20]
 8018cc2:	6879      	ldr	r1, [r7, #4]
 8018cc4:	68f8      	ldr	r0, [r7, #12]
 8018cc6:	f001 fd2b 	bl	801a720 <ethernet_output>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018cd0:	e067      	b.n	8018da2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018cd2:	7c7a      	ldrb	r2, [r7, #17]
 8018cd4:	4939      	ldr	r1, [pc, #228]	; (8018dbc <etharp_query+0x268>)
 8018cd6:	4613      	mov	r3, r2
 8018cd8:	005b      	lsls	r3, r3, #1
 8018cda:	4413      	add	r3, r2
 8018cdc:	00db      	lsls	r3, r3, #3
 8018cde:	440b      	add	r3, r1
 8018ce0:	3314      	adds	r3, #20
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	2b01      	cmp	r3, #1
 8018ce6:	d15c      	bne.n	8018da2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018cf0:	e01c      	b.n	8018d2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	895a      	ldrh	r2, [r3, #10]
 8018cf6:	69fb      	ldr	r3, [r7, #28]
 8018cf8:	891b      	ldrh	r3, [r3, #8]
 8018cfa:	429a      	cmp	r2, r3
 8018cfc:	d10a      	bne.n	8018d14 <etharp_query+0x1c0>
 8018cfe:	69fb      	ldr	r3, [r7, #28]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d006      	beq.n	8018d14 <etharp_query+0x1c0>
 8018d06:	4b2a      	ldr	r3, [pc, #168]	; (8018db0 <etharp_query+0x25c>)
 8018d08:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018d0c:	492f      	ldr	r1, [pc, #188]	; (8018dcc <etharp_query+0x278>)
 8018d0e:	482a      	ldr	r0, [pc, #168]	; (8018db8 <etharp_query+0x264>)
 8018d10:	f002 fa8a 	bl	801b228 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018d14:	69fb      	ldr	r3, [r7, #28]
 8018d16:	7b1b      	ldrb	r3, [r3, #12]
 8018d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d002      	beq.n	8018d26 <etharp_query+0x1d2>
        copy_needed = 1;
 8018d20:	2301      	movs	r3, #1
 8018d22:	61bb      	str	r3, [r7, #24]
        break;
 8018d24:	e005      	b.n	8018d32 <etharp_query+0x1de>
      }
      p = p->next;
 8018d26:	69fb      	ldr	r3, [r7, #28]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d1df      	bne.n	8018cf2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018d32:	69bb      	ldr	r3, [r7, #24]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d007      	beq.n	8018d48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018d38:	687a      	ldr	r2, [r7, #4]
 8018d3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018d3e:	200e      	movs	r0, #14
 8018d40:	f7f8 febe 	bl	8011ac0 <pbuf_clone>
 8018d44:	61f8      	str	r0, [r7, #28]
 8018d46:	e004      	b.n	8018d52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018d4c:	69f8      	ldr	r0, [r7, #28]
 8018d4e:	f7f8 fc69 	bl	8011624 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d021      	beq.n	8018d9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018d58:	7c7a      	ldrb	r2, [r7, #17]
 8018d5a:	4918      	ldr	r1, [pc, #96]	; (8018dbc <etharp_query+0x268>)
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	005b      	lsls	r3, r3, #1
 8018d60:	4413      	add	r3, r2
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	440b      	add	r3, r1
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d00a      	beq.n	8018d82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018d6c:	7c7a      	ldrb	r2, [r7, #17]
 8018d6e:	4913      	ldr	r1, [pc, #76]	; (8018dbc <etharp_query+0x268>)
 8018d70:	4613      	mov	r3, r2
 8018d72:	005b      	lsls	r3, r3, #1
 8018d74:	4413      	add	r3, r2
 8018d76:	00db      	lsls	r3, r3, #3
 8018d78:	440b      	add	r3, r1
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7f8 fbb1 	bl	80114e4 <pbuf_free>
      }
      arp_table[i].q = p;
 8018d82:	7c7a      	ldrb	r2, [r7, #17]
 8018d84:	490d      	ldr	r1, [pc, #52]	; (8018dbc <etharp_query+0x268>)
 8018d86:	4613      	mov	r3, r2
 8018d88:	005b      	lsls	r3, r3, #1
 8018d8a:	4413      	add	r3, r2
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	440b      	add	r3, r1
 8018d90:	69fa      	ldr	r2, [r7, #28]
 8018d92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018d94:	2300      	movs	r3, #0
 8018d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d9a:	e002      	b.n	8018da2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018d9c:	23ff      	movs	r3, #255	; 0xff
 8018d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018da2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3728      	adds	r7, #40	; 0x28
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	08020560 	.word	0x08020560
 8018db4:	0802070c 	.word	0x0802070c
 8018db8:	080205d8 	.word	0x080205d8
 8018dbc:	200070ac 	.word	0x200070ac
 8018dc0:	0802071c 	.word	0x0802071c
 8018dc4:	08020700 	.word	0x08020700
 8018dc8:	2000719c 	.word	0x2000719c
 8018dcc:	08020744 	.word	0x08020744

08018dd0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b08a      	sub	sp, #40	; 0x28
 8018dd4:	af02      	add	r7, sp, #8
 8018dd6:	60f8      	str	r0, [r7, #12]
 8018dd8:	60b9      	str	r1, [r7, #8]
 8018dda:	607a      	str	r2, [r7, #4]
 8018ddc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018dde:	2300      	movs	r3, #0
 8018de0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d106      	bne.n	8018df6 <etharp_raw+0x26>
 8018de8:	4b3a      	ldr	r3, [pc, #232]	; (8018ed4 <etharp_raw+0x104>)
 8018dea:	f240 4257 	movw	r2, #1111	; 0x457
 8018dee:	493a      	ldr	r1, [pc, #232]	; (8018ed8 <etharp_raw+0x108>)
 8018df0:	483a      	ldr	r0, [pc, #232]	; (8018edc <etharp_raw+0x10c>)
 8018df2:	f002 fa19 	bl	801b228 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018df6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018dfa:	211c      	movs	r1, #28
 8018dfc:	200e      	movs	r0, #14
 8018dfe:	f7f8 f88d 	bl	8010f1c <pbuf_alloc>
 8018e02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018e04:	69bb      	ldr	r3, [r7, #24]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d102      	bne.n	8018e10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0e:	e05d      	b.n	8018ecc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	895b      	ldrh	r3, [r3, #10]
 8018e14:	2b1b      	cmp	r3, #27
 8018e16:	d806      	bhi.n	8018e26 <etharp_raw+0x56>
 8018e18:	4b2e      	ldr	r3, [pc, #184]	; (8018ed4 <etharp_raw+0x104>)
 8018e1a:	f240 4262 	movw	r2, #1122	; 0x462
 8018e1e:	4930      	ldr	r1, [pc, #192]	; (8018ee0 <etharp_raw+0x110>)
 8018e20:	482e      	ldr	r0, [pc, #184]	; (8018edc <etharp_raw+0x10c>)
 8018e22:	f002 fa01 	bl	801b228 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018e26:	69bb      	ldr	r3, [r7, #24]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018e2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7f6 ff54 	bl	800fcdc <lwip_htons>
 8018e34:	4603      	mov	r3, r0
 8018e36:	461a      	mov	r2, r3
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018e42:	2b06      	cmp	r3, #6
 8018e44:	d006      	beq.n	8018e54 <etharp_raw+0x84>
 8018e46:	4b23      	ldr	r3, [pc, #140]	; (8018ed4 <etharp_raw+0x104>)
 8018e48:	f240 4269 	movw	r2, #1129	; 0x469
 8018e4c:	4925      	ldr	r1, [pc, #148]	; (8018ee4 <etharp_raw+0x114>)
 8018e4e:	4823      	ldr	r0, [pc, #140]	; (8018edc <etharp_raw+0x10c>)
 8018e50:	f002 f9ea 	bl	801b228 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	3308      	adds	r3, #8
 8018e58:	2206      	movs	r2, #6
 8018e5a:	6839      	ldr	r1, [r7, #0]
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f002 fbec 	bl	801b63a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	3312      	adds	r3, #18
 8018e66:	2206      	movs	r2, #6
 8018e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f002 fbe5 	bl	801b63a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	330e      	adds	r3, #14
 8018e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e76:	6812      	ldr	r2, [r2, #0]
 8018e78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	3318      	adds	r3, #24
 8018e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e80:	6812      	ldr	r2, [r2, #0]
 8018e82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018e84:	697b      	ldr	r3, [r7, #20]
 8018e86:	2200      	movs	r2, #0
 8018e88:	701a      	strb	r2, [r3, #0]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	f042 0201 	orr.w	r2, r2, #1
 8018e90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	2200      	movs	r2, #0
 8018e96:	f042 0208 	orr.w	r2, r2, #8
 8018e9a:	709a      	strb	r2, [r3, #2]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	2206      	movs	r2, #6
 8018ea4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	2204      	movs	r2, #4
 8018eaa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018eac:	f640 0306 	movw	r3, #2054	; 0x806
 8018eb0:	9300      	str	r3, [sp, #0]
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	68ba      	ldr	r2, [r7, #8]
 8018eb6:	69b9      	ldr	r1, [r7, #24]
 8018eb8:	68f8      	ldr	r0, [r7, #12]
 8018eba:	f001 fc31 	bl	801a720 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018ebe:	69b8      	ldr	r0, [r7, #24]
 8018ec0:	f7f8 fb10 	bl	80114e4 <pbuf_free>
  p = NULL;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018ecc:	4618      	mov	r0, r3
 8018ece:	3720      	adds	r7, #32
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	08020560 	.word	0x08020560
 8018ed8:	080206b0 	.word	0x080206b0
 8018edc:	080205d8 	.word	0x080205d8
 8018ee0:	08020760 	.word	0x08020760
 8018ee4:	08020794 	.word	0x08020794

08018ee8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b088      	sub	sp, #32
 8018eec:	af04      	add	r7, sp, #16
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f04:	2201      	movs	r2, #1
 8018f06:	9203      	str	r2, [sp, #12]
 8018f08:	68ba      	ldr	r2, [r7, #8]
 8018f0a:	9202      	str	r2, [sp, #8]
 8018f0c:	4a06      	ldr	r2, [pc, #24]	; (8018f28 <etharp_request_dst+0x40>)
 8018f0e:	9201      	str	r2, [sp, #4]
 8018f10:	9300      	str	r3, [sp, #0]
 8018f12:	4603      	mov	r3, r0
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	68f8      	ldr	r0, [r7, #12]
 8018f18:	f7ff ff5a 	bl	8018dd0 <etharp_raw>
 8018f1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	08020d68 	.word	0x08020d68

08018f2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018f36:	4a05      	ldr	r2, [pc, #20]	; (8018f4c <etharp_request+0x20>)
 8018f38:	6839      	ldr	r1, [r7, #0]
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f7ff ffd4 	bl	8018ee8 <etharp_request_dst>
 8018f40:	4603      	mov	r3, r0
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3708      	adds	r7, #8
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop
 8018f4c:	08020d60 	.word	0x08020d60

08018f50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b08e      	sub	sp, #56	; 0x38
 8018f54:	af04      	add	r7, sp, #16
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018f5a:	4b87      	ldr	r3, [pc, #540]	; (8019178 <icmp_input+0x228>)
 8018f5c:	689b      	ldr	r3, [r3, #8]
 8018f5e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f62:	781b      	ldrb	r3, [r3, #0]
 8018f64:	f003 030f 	and.w	r3, r3, #15
 8018f68:	b2db      	uxtb	r3, r3
 8018f6a:	009b      	lsls	r3, r3, #2
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f72:	2b13      	cmp	r3, #19
 8018f74:	f240 80e8 	bls.w	8019148 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	895b      	ldrh	r3, [r3, #10]
 8018f7c:	2b03      	cmp	r3, #3
 8018f7e:	f240 80e5 	bls.w	801914c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	685b      	ldr	r3, [r3, #4]
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018f8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	f000 80d2 	beq.w	801913a <icmp_input+0x1ea>
 8018f96:	2b08      	cmp	r3, #8
 8018f98:	f040 80d2 	bne.w	8019140 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018f9c:	4b77      	ldr	r3, [pc, #476]	; (801917c <icmp_input+0x22c>)
 8018f9e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018fa0:	4b75      	ldr	r3, [pc, #468]	; (8019178 <icmp_input+0x228>)
 8018fa2:	695b      	ldr	r3, [r3, #20]
 8018fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018fa8:	2be0      	cmp	r3, #224	; 0xe0
 8018faa:	f000 80d6 	beq.w	801915a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018fae:	4b72      	ldr	r3, [pc, #456]	; (8019178 <icmp_input+0x228>)
 8018fb0:	695b      	ldr	r3, [r3, #20]
 8018fb2:	4a71      	ldr	r2, [pc, #452]	; (8019178 <icmp_input+0x228>)
 8018fb4:	6812      	ldr	r2, [r2, #0]
 8018fb6:	4611      	mov	r1, r2
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f000 fc13 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f040 80cc 	bne.w	801915e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	891b      	ldrh	r3, [r3, #8]
 8018fca:	2b07      	cmp	r3, #7
 8018fcc:	f240 80c0 	bls.w	8019150 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f7f6 ff20 	bl	800fe16 <inet_chksum_pbuf>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d003      	beq.n	8018fe4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018fdc:	6878      	ldr	r0, [r7, #4]
 8018fde:	f7f8 fa81 	bl	80114e4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018fe2:	e0c5      	b.n	8019170 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fe6:	330e      	adds	r3, #14
 8018fe8:	4619      	mov	r1, r3
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f7f8 f9e4 	bl	80113b8 <pbuf_add_header>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d04b      	beq.n	801908e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	891a      	ldrh	r2, [r3, #8]
 8018ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ffc:	4413      	add	r3, r2
 8018ffe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	891b      	ldrh	r3, [r3, #8]
 8019004:	8b7a      	ldrh	r2, [r7, #26]
 8019006:	429a      	cmp	r2, r3
 8019008:	f0c0 80ab 	bcc.w	8019162 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801900c:	8b7b      	ldrh	r3, [r7, #26]
 801900e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019012:	4619      	mov	r1, r3
 8019014:	200e      	movs	r0, #14
 8019016:	f7f7 ff81 	bl	8010f1c <pbuf_alloc>
 801901a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	2b00      	cmp	r3, #0
 8019020:	f000 80a1 	beq.w	8019166 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	895b      	ldrh	r3, [r3, #10]
 8019028:	461a      	mov	r2, r3
 801902a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801902c:	3308      	adds	r3, #8
 801902e:	429a      	cmp	r2, r3
 8019030:	d203      	bcs.n	801903a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019032:	6978      	ldr	r0, [r7, #20]
 8019034:	f7f8 fa56 	bl	80114e4 <pbuf_free>
          goto icmperr;
 8019038:	e096      	b.n	8019168 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019042:	4618      	mov	r0, r3
 8019044:	f002 faf9 	bl	801b63a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801904a:	4619      	mov	r1, r3
 801904c:	6978      	ldr	r0, [r7, #20]
 801904e:	f7f8 f9c3 	bl	80113d8 <pbuf_remove_header>
 8019052:	4603      	mov	r3, r0
 8019054:	2b00      	cmp	r3, #0
 8019056:	d009      	beq.n	801906c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019058:	4b49      	ldr	r3, [pc, #292]	; (8019180 <icmp_input+0x230>)
 801905a:	22b6      	movs	r2, #182	; 0xb6
 801905c:	4949      	ldr	r1, [pc, #292]	; (8019184 <icmp_input+0x234>)
 801905e:	484a      	ldr	r0, [pc, #296]	; (8019188 <icmp_input+0x238>)
 8019060:	f002 f8e2 	bl	801b228 <iprintf>
          pbuf_free(r);
 8019064:	6978      	ldr	r0, [r7, #20]
 8019066:	f7f8 fa3d 	bl	80114e4 <pbuf_free>
          goto icmperr;
 801906a:	e07d      	b.n	8019168 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801906c:	6879      	ldr	r1, [r7, #4]
 801906e:	6978      	ldr	r0, [r7, #20]
 8019070:	f7f8 fb50 	bl	8011714 <pbuf_copy>
 8019074:	4603      	mov	r3, r0
 8019076:	2b00      	cmp	r3, #0
 8019078:	d003      	beq.n	8019082 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801907a:	6978      	ldr	r0, [r7, #20]
 801907c:	f7f8 fa32 	bl	80114e4 <pbuf_free>
          goto icmperr;
 8019080:	e072      	b.n	8019168 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f7f8 fa2e 	bl	80114e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019088:	697b      	ldr	r3, [r7, #20]
 801908a:	607b      	str	r3, [r7, #4]
 801908c:	e00f      	b.n	80190ae <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801908e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019090:	330e      	adds	r3, #14
 8019092:	4619      	mov	r1, r3
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f7f8 f99f 	bl	80113d8 <pbuf_remove_header>
 801909a:	4603      	mov	r3, r0
 801909c:	2b00      	cmp	r3, #0
 801909e:	d006      	beq.n	80190ae <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80190a0:	4b37      	ldr	r3, [pc, #220]	; (8019180 <icmp_input+0x230>)
 80190a2:	22c7      	movs	r2, #199	; 0xc7
 80190a4:	4939      	ldr	r1, [pc, #228]	; (801918c <icmp_input+0x23c>)
 80190a6:	4838      	ldr	r0, [pc, #224]	; (8019188 <icmp_input+0x238>)
 80190a8:	f002 f8be 	bl	801b228 <iprintf>
          goto icmperr;
 80190ac:	e05c      	b.n	8019168 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	685b      	ldr	r3, [r3, #4]
 80190b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80190b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190b6:	4619      	mov	r1, r3
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f7f8 f97d 	bl	80113b8 <pbuf_add_header>
 80190be:	4603      	mov	r3, r0
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d13c      	bne.n	801913e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	685b      	ldr	r3, [r3, #4]
 80190c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80190ca:	69fb      	ldr	r3, [r7, #28]
 80190cc:	681a      	ldr	r2, [r3, #0]
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80190d2:	4b29      	ldr	r3, [pc, #164]	; (8019178 <icmp_input+0x228>)
 80190d4:	691a      	ldr	r2, [r3, #16]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80190da:	693b      	ldr	r3, [r7, #16]
 80190dc:	2200      	movs	r2, #0
 80190de:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80190e0:	693b      	ldr	r3, [r7, #16]
 80190e2:	885b      	ldrh	r3, [r3, #2]
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80190ea:	4293      	cmp	r3, r2
 80190ec:	d907      	bls.n	80190fe <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	885b      	ldrh	r3, [r3, #2]
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	3309      	adds	r3, #9
 80190f6:	b29a      	uxth	r2, r3
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	805a      	strh	r2, [r3, #2]
 80190fc:	e006      	b.n	801910c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80190fe:	693b      	ldr	r3, [r7, #16]
 8019100:	885b      	ldrh	r3, [r3, #2]
 8019102:	b29b      	uxth	r3, r3
 8019104:	3308      	adds	r3, #8
 8019106:	b29a      	uxth	r2, r3
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	22ff      	movs	r2, #255	; 0xff
 8019110:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2200      	movs	r2, #0
 8019116:	729a      	strb	r2, [r3, #10]
 8019118:	2200      	movs	r2, #0
 801911a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	9302      	str	r3, [sp, #8]
 8019120:	2301      	movs	r3, #1
 8019122:	9301      	str	r3, [sp, #4]
 8019124:	2300      	movs	r3, #0
 8019126:	9300      	str	r3, [sp, #0]
 8019128:	23ff      	movs	r3, #255	; 0xff
 801912a:	2200      	movs	r2, #0
 801912c:	69f9      	ldr	r1, [r7, #28]
 801912e:	6878      	ldr	r0, [r7, #4]
 8019130:	f000 fa80 	bl	8019634 <ip4_output_if>
 8019134:	4603      	mov	r3, r0
 8019136:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019138:	e001      	b.n	801913e <icmp_input+0x1ee>
      break;
 801913a:	bf00      	nop
 801913c:	e000      	b.n	8019140 <icmp_input+0x1f0>
      break;
 801913e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f7f8 f9cf 	bl	80114e4 <pbuf_free>
  return;
 8019146:	e013      	b.n	8019170 <icmp_input+0x220>
    goto lenerr;
 8019148:	bf00      	nop
 801914a:	e002      	b.n	8019152 <icmp_input+0x202>
    goto lenerr;
 801914c:	bf00      	nop
 801914e:	e000      	b.n	8019152 <icmp_input+0x202>
        goto lenerr;
 8019150:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f7f8 f9c6 	bl	80114e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019158:	e00a      	b.n	8019170 <icmp_input+0x220>
        goto icmperr;
 801915a:	bf00      	nop
 801915c:	e004      	b.n	8019168 <icmp_input+0x218>
        goto icmperr;
 801915e:	bf00      	nop
 8019160:	e002      	b.n	8019168 <icmp_input+0x218>
          goto icmperr;
 8019162:	bf00      	nop
 8019164:	e000      	b.n	8019168 <icmp_input+0x218>
          goto icmperr;
 8019166:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019168:	6878      	ldr	r0, [r7, #4]
 801916a:	f7f8 f9bb 	bl	80114e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801916e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019170:	3728      	adds	r7, #40	; 0x28
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
 8019176:	bf00      	nop
 8019178:	20000770 	.word	0x20000770
 801917c:	20000784 	.word	0x20000784
 8019180:	080207d8 	.word	0x080207d8
 8019184:	08020810 	.word	0x08020810
 8019188:	08020848 	.word	0x08020848
 801918c:	08020870 	.word	0x08020870

08019190 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
 8019198:	460b      	mov	r3, r1
 801919a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801919c:	78fb      	ldrb	r3, [r7, #3]
 801919e:	461a      	mov	r2, r3
 80191a0:	2103      	movs	r1, #3
 80191a2:	6878      	ldr	r0, [r7, #4]
 80191a4:	f000 f814 	bl	80191d0 <icmp_send_response>
}
 80191a8:	bf00      	nop
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
 80191b8:	460b      	mov	r3, r1
 80191ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80191bc:	78fb      	ldrb	r3, [r7, #3]
 80191be:	461a      	mov	r2, r3
 80191c0:	210b      	movs	r1, #11
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f000 f804 	bl	80191d0 <icmp_send_response>
}
 80191c8:	bf00      	nop
 80191ca:	3708      	adds	r7, #8
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd80      	pop	{r7, pc}

080191d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b08c      	sub	sp, #48	; 0x30
 80191d4:	af04      	add	r7, sp, #16
 80191d6:	6078      	str	r0, [r7, #4]
 80191d8:	460b      	mov	r3, r1
 80191da:	70fb      	strb	r3, [r7, #3]
 80191dc:	4613      	mov	r3, r2
 80191de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80191e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80191e4:	2124      	movs	r1, #36	; 0x24
 80191e6:	2022      	movs	r0, #34	; 0x22
 80191e8:	f7f7 fe98 	bl	8010f1c <pbuf_alloc>
 80191ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80191ee:	69fb      	ldr	r3, [r7, #28]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d056      	beq.n	80192a2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80191f4:	69fb      	ldr	r3, [r7, #28]
 80191f6:	895b      	ldrh	r3, [r3, #10]
 80191f8:	2b23      	cmp	r3, #35	; 0x23
 80191fa:	d806      	bhi.n	801920a <icmp_send_response+0x3a>
 80191fc:	4b2b      	ldr	r3, [pc, #172]	; (80192ac <icmp_send_response+0xdc>)
 80191fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019202:	492b      	ldr	r1, [pc, #172]	; (80192b0 <icmp_send_response+0xe0>)
 8019204:	482b      	ldr	r0, [pc, #172]	; (80192b4 <icmp_send_response+0xe4>)
 8019206:	f002 f80f 	bl	801b228 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	685b      	ldr	r3, [r3, #4]
 801920e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019210:	69fb      	ldr	r3, [r7, #28]
 8019212:	685b      	ldr	r3, [r3, #4]
 8019214:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019216:	697b      	ldr	r3, [r7, #20]
 8019218:	78fa      	ldrb	r2, [r7, #3]
 801921a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	78ba      	ldrb	r2, [r7, #2]
 8019220:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	2200      	movs	r2, #0
 8019226:	711a      	strb	r2, [r3, #4]
 8019228:	2200      	movs	r2, #0
 801922a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	2200      	movs	r2, #0
 8019230:	719a      	strb	r2, [r3, #6]
 8019232:	2200      	movs	r2, #0
 8019234:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019236:	69fb      	ldr	r3, [r7, #28]
 8019238:	685b      	ldr	r3, [r3, #4]
 801923a:	f103 0008 	add.w	r0, r3, #8
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	685b      	ldr	r3, [r3, #4]
 8019242:	221c      	movs	r2, #28
 8019244:	4619      	mov	r1, r3
 8019246:	f002 f9f8 	bl	801b63a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801924a:	69bb      	ldr	r3, [r7, #24]
 801924c:	68db      	ldr	r3, [r3, #12]
 801924e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019250:	f107 030c 	add.w	r3, r7, #12
 8019254:	4618      	mov	r0, r3
 8019256:	f000 f82f 	bl	80192b8 <ip4_route>
 801925a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d01b      	beq.n	801929a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	2200      	movs	r2, #0
 8019266:	709a      	strb	r2, [r3, #2]
 8019268:	2200      	movs	r2, #0
 801926a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801926c:	69fb      	ldr	r3, [r7, #28]
 801926e:	895b      	ldrh	r3, [r3, #10]
 8019270:	4619      	mov	r1, r3
 8019272:	6978      	ldr	r0, [r7, #20]
 8019274:	f7f6 fdbd 	bl	800fdf2 <inet_chksum>
 8019278:	4603      	mov	r3, r0
 801927a:	461a      	mov	r2, r3
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019280:	f107 020c 	add.w	r2, r7, #12
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	9302      	str	r3, [sp, #8]
 8019288:	2301      	movs	r3, #1
 801928a:	9301      	str	r3, [sp, #4]
 801928c:	2300      	movs	r3, #0
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	23ff      	movs	r3, #255	; 0xff
 8019292:	2100      	movs	r1, #0
 8019294:	69f8      	ldr	r0, [r7, #28]
 8019296:	f000 f9cd 	bl	8019634 <ip4_output_if>
  }
  pbuf_free(q);
 801929a:	69f8      	ldr	r0, [r7, #28]
 801929c:	f7f8 f922 	bl	80114e4 <pbuf_free>
 80192a0:	e000      	b.n	80192a4 <icmp_send_response+0xd4>
    return;
 80192a2:	bf00      	nop
}
 80192a4:	3720      	adds	r7, #32
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}
 80192aa:	bf00      	nop
 80192ac:	080207d8 	.word	0x080207d8
 80192b0:	080208a4 	.word	0x080208a4
 80192b4:	08020848 	.word	0x08020848

080192b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80192b8:	b480      	push	{r7}
 80192ba:	b085      	sub	sp, #20
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80192c0:	4b33      	ldr	r3, [pc, #204]	; (8019390 <ip4_route+0xd8>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	60fb      	str	r3, [r7, #12]
 80192c6:	e036      	b.n	8019336 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80192ce:	f003 0301 	and.w	r3, r3, #1
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d02b      	beq.n	8019330 <ip4_route+0x78>
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80192de:	089b      	lsrs	r3, r3, #2
 80192e0:	f003 0301 	and.w	r3, r3, #1
 80192e4:	b2db      	uxtb	r3, r3
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d022      	beq.n	8019330 <ip4_route+0x78>
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	3304      	adds	r3, #4
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d01d      	beq.n	8019330 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681a      	ldr	r2, [r3, #0]
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	3304      	adds	r3, #4
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	405a      	eors	r2, r3
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	3308      	adds	r3, #8
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	4013      	ands	r3, r2
 8019308:	2b00      	cmp	r3, #0
 801930a:	d101      	bne.n	8019310 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	e038      	b.n	8019382 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019316:	f003 0302 	and.w	r3, r3, #2
 801931a:	2b00      	cmp	r3, #0
 801931c:	d108      	bne.n	8019330 <ip4_route+0x78>
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681a      	ldr	r2, [r3, #0]
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	330c      	adds	r3, #12
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	429a      	cmp	r2, r3
 801932a:	d101      	bne.n	8019330 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	e028      	b.n	8019382 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	60fb      	str	r3, [r7, #12]
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d1c5      	bne.n	80192c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801933c:	4b15      	ldr	r3, [pc, #84]	; (8019394 <ip4_route+0xdc>)
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d01a      	beq.n	801937a <ip4_route+0xc2>
 8019344:	4b13      	ldr	r3, [pc, #76]	; (8019394 <ip4_route+0xdc>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801934c:	f003 0301 	and.w	r3, r3, #1
 8019350:	2b00      	cmp	r3, #0
 8019352:	d012      	beq.n	801937a <ip4_route+0xc2>
 8019354:	4b0f      	ldr	r3, [pc, #60]	; (8019394 <ip4_route+0xdc>)
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801935c:	f003 0304 	and.w	r3, r3, #4
 8019360:	2b00      	cmp	r3, #0
 8019362:	d00a      	beq.n	801937a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019364:	4b0b      	ldr	r3, [pc, #44]	; (8019394 <ip4_route+0xdc>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	3304      	adds	r3, #4
 801936a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801936c:	2b00      	cmp	r3, #0
 801936e:	d004      	beq.n	801937a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	b2db      	uxtb	r3, r3
 8019376:	2b7f      	cmp	r3, #127	; 0x7f
 8019378:	d101      	bne.n	801937e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801937a:	2300      	movs	r3, #0
 801937c:	e001      	b.n	8019382 <ip4_route+0xca>
  }

  return netif_default;
 801937e:	4b05      	ldr	r3, [pc, #20]	; (8019394 <ip4_route+0xdc>)
 8019380:	681b      	ldr	r3, [r3, #0]
}
 8019382:	4618      	mov	r0, r3
 8019384:	3714      	adds	r7, #20
 8019386:	46bd      	mov	sp, r7
 8019388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938c:	4770      	bx	lr
 801938e:	bf00      	nop
 8019390:	20007040 	.word	0x20007040
 8019394:	20007044 	.word	0x20007044

08019398 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193a6:	f003 0301 	and.w	r3, r3, #1
 80193aa:	b2db      	uxtb	r3, r3
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d016      	beq.n	80193de <ip4_input_accept+0x46>
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	3304      	adds	r3, #4
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d011      	beq.n	80193de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193ba:	4b0b      	ldr	r3, [pc, #44]	; (80193e8 <ip4_input_accept+0x50>)
 80193bc:	695a      	ldr	r2, [r3, #20]
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	3304      	adds	r3, #4
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d008      	beq.n	80193da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80193c8:	4b07      	ldr	r3, [pc, #28]	; (80193e8 <ip4_input_accept+0x50>)
 80193ca:	695b      	ldr	r3, [r3, #20]
 80193cc:	6879      	ldr	r1, [r7, #4]
 80193ce:	4618      	mov	r0, r3
 80193d0:	f000 fa08 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 80193d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d001      	beq.n	80193de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80193da:	2301      	movs	r3, #1
 80193dc:	e000      	b.n	80193e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80193de:	2300      	movs	r3, #0
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3708      	adds	r7, #8
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd80      	pop	{r7, pc}
 80193e8:	20000770 	.word	0x20000770

080193ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b086      	sub	sp, #24
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	685b      	ldr	r3, [r3, #4]
 80193fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80193fc:	697b      	ldr	r3, [r7, #20]
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	091b      	lsrs	r3, r3, #4
 8019402:	b2db      	uxtb	r3, r3
 8019404:	2b04      	cmp	r3, #4
 8019406:	d004      	beq.n	8019412 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019408:	6878      	ldr	r0, [r7, #4]
 801940a:	f7f8 f86b 	bl	80114e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801940e:	2300      	movs	r3, #0
 8019410:	e107      	b.n	8019622 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019412:	697b      	ldr	r3, [r7, #20]
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	f003 030f 	and.w	r3, r3, #15
 801941a:	b2db      	uxtb	r3, r3
 801941c:	009b      	lsls	r3, r3, #2
 801941e:	b2db      	uxtb	r3, r3
 8019420:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019422:	697b      	ldr	r3, [r7, #20]
 8019424:	885b      	ldrh	r3, [r3, #2]
 8019426:	b29b      	uxth	r3, r3
 8019428:	4618      	mov	r0, r3
 801942a:	f7f6 fc57 	bl	800fcdc <lwip_htons>
 801942e:	4603      	mov	r3, r0
 8019430:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	891b      	ldrh	r3, [r3, #8]
 8019436:	89ba      	ldrh	r2, [r7, #12]
 8019438:	429a      	cmp	r2, r3
 801943a:	d204      	bcs.n	8019446 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801943c:	89bb      	ldrh	r3, [r7, #12]
 801943e:	4619      	mov	r1, r3
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f7f7 fecb 	bl	80111dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	895b      	ldrh	r3, [r3, #10]
 801944a:	89fa      	ldrh	r2, [r7, #14]
 801944c:	429a      	cmp	r2, r3
 801944e:	d807      	bhi.n	8019460 <ip4_input+0x74>
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	891b      	ldrh	r3, [r3, #8]
 8019454:	89ba      	ldrh	r2, [r7, #12]
 8019456:	429a      	cmp	r2, r3
 8019458:	d802      	bhi.n	8019460 <ip4_input+0x74>
 801945a:	89fb      	ldrh	r3, [r7, #14]
 801945c:	2b13      	cmp	r3, #19
 801945e:	d804      	bhi.n	801946a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019460:	6878      	ldr	r0, [r7, #4]
 8019462:	f7f8 f83f 	bl	80114e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019466:	2300      	movs	r3, #0
 8019468:	e0db      	b.n	8019622 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801946a:	697b      	ldr	r3, [r7, #20]
 801946c:	691b      	ldr	r3, [r3, #16]
 801946e:	4a6f      	ldr	r2, [pc, #444]	; (801962c <ip4_input+0x240>)
 8019470:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	68db      	ldr	r3, [r3, #12]
 8019476:	4a6d      	ldr	r2, [pc, #436]	; (801962c <ip4_input+0x240>)
 8019478:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801947a:	4b6c      	ldr	r3, [pc, #432]	; (801962c <ip4_input+0x240>)
 801947c:	695b      	ldr	r3, [r3, #20]
 801947e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019482:	2be0      	cmp	r3, #224	; 0xe0
 8019484:	d112      	bne.n	80194ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019486:	683b      	ldr	r3, [r7, #0]
 8019488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801948c:	f003 0301 	and.w	r3, r3, #1
 8019490:	b2db      	uxtb	r3, r3
 8019492:	2b00      	cmp	r3, #0
 8019494:	d007      	beq.n	80194a6 <ip4_input+0xba>
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	3304      	adds	r3, #4
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d002      	beq.n	80194a6 <ip4_input+0xba>
      netif = inp;
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	613b      	str	r3, [r7, #16]
 80194a4:	e02a      	b.n	80194fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80194a6:	2300      	movs	r3, #0
 80194a8:	613b      	str	r3, [r7, #16]
 80194aa:	e027      	b.n	80194fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80194ac:	6838      	ldr	r0, [r7, #0]
 80194ae:	f7ff ff73 	bl	8019398 <ip4_input_accept>
 80194b2:	4603      	mov	r3, r0
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d002      	beq.n	80194be <ip4_input+0xd2>
      netif = inp;
 80194b8:	683b      	ldr	r3, [r7, #0]
 80194ba:	613b      	str	r3, [r7, #16]
 80194bc:	e01e      	b.n	80194fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80194be:	2300      	movs	r3, #0
 80194c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80194c2:	4b5a      	ldr	r3, [pc, #360]	; (801962c <ip4_input+0x240>)
 80194c4:	695b      	ldr	r3, [r3, #20]
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	2b7f      	cmp	r3, #127	; 0x7f
 80194ca:	d017      	beq.n	80194fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80194cc:	4b58      	ldr	r3, [pc, #352]	; (8019630 <ip4_input+0x244>)
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	613b      	str	r3, [r7, #16]
 80194d2:	e00e      	b.n	80194f2 <ip4_input+0x106>
          if (netif == inp) {
 80194d4:	693a      	ldr	r2, [r7, #16]
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	429a      	cmp	r2, r3
 80194da:	d006      	beq.n	80194ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80194dc:	6938      	ldr	r0, [r7, #16]
 80194de:	f7ff ff5b 	bl	8019398 <ip4_input_accept>
 80194e2:	4603      	mov	r3, r0
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d108      	bne.n	80194fa <ip4_input+0x10e>
 80194e8:	e000      	b.n	80194ec <ip4_input+0x100>
            continue;
 80194ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80194ec:	693b      	ldr	r3, [r7, #16]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	613b      	str	r3, [r7, #16]
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d1ed      	bne.n	80194d4 <ip4_input+0xe8>
 80194f8:	e000      	b.n	80194fc <ip4_input+0x110>
            break;
 80194fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80194fc:	4b4b      	ldr	r3, [pc, #300]	; (801962c <ip4_input+0x240>)
 80194fe:	691b      	ldr	r3, [r3, #16]
 8019500:	6839      	ldr	r1, [r7, #0]
 8019502:	4618      	mov	r0, r3
 8019504:	f000 f96e 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 8019508:	4603      	mov	r3, r0
 801950a:	2b00      	cmp	r3, #0
 801950c:	d105      	bne.n	801951a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801950e:	4b47      	ldr	r3, [pc, #284]	; (801962c <ip4_input+0x240>)
 8019510:	691b      	ldr	r3, [r3, #16]
 8019512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019516:	2be0      	cmp	r3, #224	; 0xe0
 8019518:	d104      	bne.n	8019524 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801951a:	6878      	ldr	r0, [r7, #4]
 801951c:	f7f7 ffe2 	bl	80114e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019520:	2300      	movs	r3, #0
 8019522:	e07e      	b.n	8019622 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019524:	693b      	ldr	r3, [r7, #16]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d104      	bne.n	8019534 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f7f7 ffda 	bl	80114e4 <pbuf_free>
    return ERR_OK;
 8019530:	2300      	movs	r3, #0
 8019532:	e076      	b.n	8019622 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019534:	697b      	ldr	r3, [r7, #20]
 8019536:	88db      	ldrh	r3, [r3, #6]
 8019538:	b29b      	uxth	r3, r3
 801953a:	461a      	mov	r2, r3
 801953c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019540:	4013      	ands	r3, r2
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00b      	beq.n	801955e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019546:	6878      	ldr	r0, [r7, #4]
 8019548:	f000 fd22 	bl	8019f90 <ip4_reass>
 801954c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d101      	bne.n	8019558 <ip4_input+0x16c>
      return ERR_OK;
 8019554:	2300      	movs	r3, #0
 8019556:	e064      	b.n	8019622 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801955e:	4a33      	ldr	r2, [pc, #204]	; (801962c <ip4_input+0x240>)
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019564:	4a31      	ldr	r2, [pc, #196]	; (801962c <ip4_input+0x240>)
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801956a:	4a30      	ldr	r2, [pc, #192]	; (801962c <ip4_input+0x240>)
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019570:	697b      	ldr	r3, [r7, #20]
 8019572:	781b      	ldrb	r3, [r3, #0]
 8019574:	f003 030f 	and.w	r3, r3, #15
 8019578:	b2db      	uxtb	r3, r3
 801957a:	009b      	lsls	r3, r3, #2
 801957c:	b2db      	uxtb	r3, r3
 801957e:	b29a      	uxth	r2, r3
 8019580:	4b2a      	ldr	r3, [pc, #168]	; (801962c <ip4_input+0x240>)
 8019582:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019584:	89fb      	ldrh	r3, [r7, #14]
 8019586:	4619      	mov	r1, r3
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f7f7 ff25 	bl	80113d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	7a5b      	ldrb	r3, [r3, #9]
 8019592:	2b11      	cmp	r3, #17
 8019594:	d006      	beq.n	80195a4 <ip4_input+0x1b8>
 8019596:	2b11      	cmp	r3, #17
 8019598:	dc13      	bgt.n	80195c2 <ip4_input+0x1d6>
 801959a:	2b01      	cmp	r3, #1
 801959c:	d00c      	beq.n	80195b8 <ip4_input+0x1cc>
 801959e:	2b06      	cmp	r3, #6
 80195a0:	d005      	beq.n	80195ae <ip4_input+0x1c2>
 80195a2:	e00e      	b.n	80195c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80195a4:	6839      	ldr	r1, [r7, #0]
 80195a6:	6878      	ldr	r0, [r7, #4]
 80195a8:	f7fe fc42 	bl	8017e30 <udp_input>
        break;
 80195ac:	e026      	b.n	80195fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80195ae:	6839      	ldr	r1, [r7, #0]
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f7fa f863 	bl	801367c <tcp_input>
        break;
 80195b6:	e021      	b.n	80195fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80195b8:	6839      	ldr	r1, [r7, #0]
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f7ff fcc8 	bl	8018f50 <icmp_input>
        break;
 80195c0:	e01c      	b.n	80195fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195c2:	4b1a      	ldr	r3, [pc, #104]	; (801962c <ip4_input+0x240>)
 80195c4:	695b      	ldr	r3, [r3, #20]
 80195c6:	6939      	ldr	r1, [r7, #16]
 80195c8:	4618      	mov	r0, r3
 80195ca:	f000 f90b 	bl	80197e4 <ip4_addr_isbroadcast_u32>
 80195ce:	4603      	mov	r3, r0
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d10f      	bne.n	80195f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80195d4:	4b15      	ldr	r3, [pc, #84]	; (801962c <ip4_input+0x240>)
 80195d6:	695b      	ldr	r3, [r3, #20]
 80195d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80195dc:	2be0      	cmp	r3, #224	; 0xe0
 80195de:	d009      	beq.n	80195f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80195e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80195e4:	4619      	mov	r1, r3
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7f7 ff69 	bl	80114be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80195ec:	2102      	movs	r1, #2
 80195ee:	6878      	ldr	r0, [r7, #4]
 80195f0:	f7ff fdce 	bl	8019190 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80195f4:	6878      	ldr	r0, [r7, #4]
 80195f6:	f7f7 ff75 	bl	80114e4 <pbuf_free>
        break;
 80195fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80195fc:	4b0b      	ldr	r3, [pc, #44]	; (801962c <ip4_input+0x240>)
 80195fe:	2200      	movs	r2, #0
 8019600:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019602:	4b0a      	ldr	r3, [pc, #40]	; (801962c <ip4_input+0x240>)
 8019604:	2200      	movs	r2, #0
 8019606:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019608:	4b08      	ldr	r3, [pc, #32]	; (801962c <ip4_input+0x240>)
 801960a:	2200      	movs	r2, #0
 801960c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801960e:	4b07      	ldr	r3, [pc, #28]	; (801962c <ip4_input+0x240>)
 8019610:	2200      	movs	r2, #0
 8019612:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019614:	4b05      	ldr	r3, [pc, #20]	; (801962c <ip4_input+0x240>)
 8019616:	2200      	movs	r2, #0
 8019618:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801961a:	4b04      	ldr	r3, [pc, #16]	; (801962c <ip4_input+0x240>)
 801961c:	2200      	movs	r2, #0
 801961e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019620:	2300      	movs	r3, #0
}
 8019622:	4618      	mov	r0, r3
 8019624:	3718      	adds	r7, #24
 8019626:	46bd      	mov	sp, r7
 8019628:	bd80      	pop	{r7, pc}
 801962a:	bf00      	nop
 801962c:	20000770 	.word	0x20000770
 8019630:	20007040 	.word	0x20007040

08019634 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b08a      	sub	sp, #40	; 0x28
 8019638:	af04      	add	r7, sp, #16
 801963a:	60f8      	str	r0, [r7, #12]
 801963c:	60b9      	str	r1, [r7, #8]
 801963e:	607a      	str	r2, [r7, #4]
 8019640:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d009      	beq.n	8019660 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d003      	beq.n	801965a <ip4_output_if+0x26>
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d102      	bne.n	8019660 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801965c:	3304      	adds	r3, #4
 801965e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019660:	78fa      	ldrb	r2, [r7, #3]
 8019662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019664:	9302      	str	r3, [sp, #8]
 8019666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801966a:	9301      	str	r3, [sp, #4]
 801966c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019670:	9300      	str	r3, [sp, #0]
 8019672:	4613      	mov	r3, r2
 8019674:	687a      	ldr	r2, [r7, #4]
 8019676:	6979      	ldr	r1, [r7, #20]
 8019678:	68f8      	ldr	r0, [r7, #12]
 801967a:	f000 f805 	bl	8019688 <ip4_output_if_src>
 801967e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019680:	4618      	mov	r0, r3
 8019682:	3718      	adds	r7, #24
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b088      	sub	sp, #32
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	607a      	str	r2, [r7, #4]
 8019694:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	7b9b      	ldrb	r3, [r3, #14]
 801969a:	2b01      	cmp	r3, #1
 801969c:	d006      	beq.n	80196ac <ip4_output_if_src+0x24>
 801969e:	4b4b      	ldr	r3, [pc, #300]	; (80197cc <ip4_output_if_src+0x144>)
 80196a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80196a4:	494a      	ldr	r1, [pc, #296]	; (80197d0 <ip4_output_if_src+0x148>)
 80196a6:	484b      	ldr	r0, [pc, #300]	; (80197d4 <ip4_output_if_src+0x14c>)
 80196a8:	f001 fdbe 	bl	801b228 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d060      	beq.n	8019774 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80196b2:	2314      	movs	r3, #20
 80196b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80196b6:	2114      	movs	r1, #20
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f7f7 fe7d 	bl	80113b8 <pbuf_add_header>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d002      	beq.n	80196ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80196c4:	f06f 0301 	mvn.w	r3, #1
 80196c8:	e07c      	b.n	80197c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	685b      	ldr	r3, [r3, #4]
 80196ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	895b      	ldrh	r3, [r3, #10]
 80196d4:	2b13      	cmp	r3, #19
 80196d6:	d806      	bhi.n	80196e6 <ip4_output_if_src+0x5e>
 80196d8:	4b3c      	ldr	r3, [pc, #240]	; (80197cc <ip4_output_if_src+0x144>)
 80196da:	f44f 7262 	mov.w	r2, #904	; 0x388
 80196de:	493e      	ldr	r1, [pc, #248]	; (80197d8 <ip4_output_if_src+0x150>)
 80196e0:	483c      	ldr	r0, [pc, #240]	; (80197d4 <ip4_output_if_src+0x14c>)
 80196e2:	f001 fda1 	bl	801b228 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80196e6:	69fb      	ldr	r3, [r7, #28]
 80196e8:	78fa      	ldrb	r2, [r7, #3]
 80196ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80196f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681a      	ldr	r2, [r3, #0]
 80196f8:	69fb      	ldr	r3, [r7, #28]
 80196fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80196fc:	8b7b      	ldrh	r3, [r7, #26]
 80196fe:	089b      	lsrs	r3, r3, #2
 8019700:	b29b      	uxth	r3, r3
 8019702:	b2db      	uxtb	r3, r3
 8019704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019708:	b2da      	uxtb	r2, r3
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019714:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	891b      	ldrh	r3, [r3, #8]
 801971a:	4618      	mov	r0, r3
 801971c:	f7f6 fade 	bl	800fcdc <lwip_htons>
 8019720:	4603      	mov	r3, r0
 8019722:	461a      	mov	r2, r3
 8019724:	69fb      	ldr	r3, [r7, #28]
 8019726:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	2200      	movs	r2, #0
 801972c:	719a      	strb	r2, [r3, #6]
 801972e:	2200      	movs	r2, #0
 8019730:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019732:	4b2a      	ldr	r3, [pc, #168]	; (80197dc <ip4_output_if_src+0x154>)
 8019734:	881b      	ldrh	r3, [r3, #0]
 8019736:	4618      	mov	r0, r3
 8019738:	f7f6 fad0 	bl	800fcdc <lwip_htons>
 801973c:	4603      	mov	r3, r0
 801973e:	461a      	mov	r2, r3
 8019740:	69fb      	ldr	r3, [r7, #28]
 8019742:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019744:	4b25      	ldr	r3, [pc, #148]	; (80197dc <ip4_output_if_src+0x154>)
 8019746:	881b      	ldrh	r3, [r3, #0]
 8019748:	3301      	adds	r3, #1
 801974a:	b29a      	uxth	r2, r3
 801974c:	4b23      	ldr	r3, [pc, #140]	; (80197dc <ip4_output_if_src+0x154>)
 801974e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d104      	bne.n	8019760 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019756:	4b22      	ldr	r3, [pc, #136]	; (80197e0 <ip4_output_if_src+0x158>)
 8019758:	681a      	ldr	r2, [r3, #0]
 801975a:	69fb      	ldr	r3, [r7, #28]
 801975c:	60da      	str	r2, [r3, #12]
 801975e:	e003      	b.n	8019768 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	681a      	ldr	r2, [r3, #0]
 8019764:	69fb      	ldr	r3, [r7, #28]
 8019766:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	2200      	movs	r2, #0
 801976c:	729a      	strb	r2, [r3, #10]
 801976e:	2200      	movs	r2, #0
 8019770:	72da      	strb	r2, [r3, #11]
 8019772:	e00f      	b.n	8019794 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	895b      	ldrh	r3, [r3, #10]
 8019778:	2b13      	cmp	r3, #19
 801977a:	d802      	bhi.n	8019782 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801977c:	f06f 0301 	mvn.w	r3, #1
 8019780:	e020      	b.n	80197c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	691b      	ldr	r3, [r3, #16]
 801978c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801978e:	f107 0314 	add.w	r3, r7, #20
 8019792:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019798:	2b00      	cmp	r3, #0
 801979a:	d00c      	beq.n	80197b6 <ip4_output_if_src+0x12e>
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	891a      	ldrh	r2, [r3, #8]
 80197a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d906      	bls.n	80197b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80197ac:	68f8      	ldr	r0, [r7, #12]
 80197ae:	f000 fde3 	bl	801a378 <ip4_frag>
 80197b2:	4603      	mov	r3, r0
 80197b4:	e006      	b.n	80197c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80197b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b8:	695b      	ldr	r3, [r3, #20]
 80197ba:	687a      	ldr	r2, [r7, #4]
 80197bc:	68f9      	ldr	r1, [r7, #12]
 80197be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197c0:	4798      	blx	r3
 80197c2:	4603      	mov	r3, r0
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3720      	adds	r7, #32
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	080208d0 	.word	0x080208d0
 80197d0:	08020904 	.word	0x08020904
 80197d4:	08020910 	.word	0x08020910
 80197d8:	08020938 	.word	0x08020938
 80197dc:	2000719e 	.word	0x2000719e
 80197e0:	08020d5c 	.word	0x08020d5c

080197e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80197e4:	b480      	push	{r7}
 80197e6:	b085      	sub	sp, #20
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197f8:	d002      	beq.n	8019800 <ip4_addr_isbroadcast_u32+0x1c>
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d101      	bne.n	8019804 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019800:	2301      	movs	r3, #1
 8019802:	e02a      	b.n	801985a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801980a:	f003 0302 	and.w	r3, r3, #2
 801980e:	2b00      	cmp	r3, #0
 8019810:	d101      	bne.n	8019816 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019812:	2300      	movs	r3, #0
 8019814:	e021      	b.n	801985a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	3304      	adds	r3, #4
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	687a      	ldr	r2, [r7, #4]
 801981e:	429a      	cmp	r2, r3
 8019820:	d101      	bne.n	8019826 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019822:	2300      	movs	r3, #0
 8019824:	e019      	b.n	801985a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019826:	68fa      	ldr	r2, [r7, #12]
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	3304      	adds	r3, #4
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	405a      	eors	r2, r3
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	3308      	adds	r3, #8
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	4013      	ands	r3, r2
 8019838:	2b00      	cmp	r3, #0
 801983a:	d10d      	bne.n	8019858 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	3308      	adds	r3, #8
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	43da      	mvns	r2, r3
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	3308      	adds	r3, #8
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019850:	429a      	cmp	r2, r3
 8019852:	d101      	bne.n	8019858 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019854:	2301      	movs	r3, #1
 8019856:	e000      	b.n	801985a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019858:	2300      	movs	r3, #0
  }
}
 801985a:	4618      	mov	r0, r3
 801985c:	3714      	adds	r7, #20
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr
	...

08019868 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019870:	2210      	movs	r2, #16
 8019872:	4904      	ldr	r1, [pc, #16]	; (8019884 <ip4addr_ntoa+0x1c>)
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	f000 f807 	bl	8019888 <ip4addr_ntoa_r>
 801987a:	4603      	mov	r3, r0
}
 801987c:	4618      	mov	r0, r3
 801987e:	3708      	adds	r7, #8
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	200071a0 	.word	0x200071a0

08019888 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019888:	b480      	push	{r7}
 801988a:	b08d      	sub	sp, #52	; 0x34
 801988c:	af00      	add	r7, sp, #0
 801988e:	60f8      	str	r0, [r7, #12]
 8019890:	60b9      	str	r1, [r7, #8]
 8019892:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019894:	2300      	movs	r3, #0
 8019896:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80198a2:	f107 0318 	add.w	r3, r7, #24
 80198a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80198a8:	2300      	movs	r3, #0
 80198aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80198ae:	e058      	b.n	8019962 <ip4addr_ntoa_r+0xda>
    i = 0;
 80198b0:	2300      	movs	r3, #0
 80198b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80198b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b8:	781a      	ldrb	r2, [r3, #0]
 80198ba:	4b32      	ldr	r3, [pc, #200]	; (8019984 <ip4addr_ntoa_r+0xfc>)
 80198bc:	fba3 1302 	umull	r1, r3, r3, r2
 80198c0:	08d9      	lsrs	r1, r3, #3
 80198c2:	460b      	mov	r3, r1
 80198c4:	009b      	lsls	r3, r3, #2
 80198c6:	440b      	add	r3, r1
 80198c8:	005b      	lsls	r3, r3, #1
 80198ca:	1ad3      	subs	r3, r2, r3
 80198cc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80198ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	4a2c      	ldr	r2, [pc, #176]	; (8019984 <ip4addr_ntoa_r+0xfc>)
 80198d4:	fba2 2303 	umull	r2, r3, r2, r3
 80198d8:	08db      	lsrs	r3, r3, #3
 80198da:	b2da      	uxtb	r2, r3
 80198dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198de:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80198e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198e4:	1c5a      	adds	r2, r3, #1
 80198e6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80198ea:	4619      	mov	r1, r3
 80198ec:	7ffb      	ldrb	r3, [r7, #31]
 80198ee:	3330      	adds	r3, #48	; 0x30
 80198f0:	b2da      	uxtb	r2, r3
 80198f2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80198f6:	443b      	add	r3, r7
 80198f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80198fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d1d8      	bne.n	80198b6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019904:	e011      	b.n	801992a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019906:	6a3b      	ldr	r3, [r7, #32]
 8019908:	1c5a      	adds	r2, r3, #1
 801990a:	623a      	str	r2, [r7, #32]
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	429a      	cmp	r2, r3
 8019910:	dc01      	bgt.n	8019916 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019912:	2300      	movs	r3, #0
 8019914:	e030      	b.n	8019978 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019916:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991c:	1c59      	adds	r1, r3, #1
 801991e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019920:	3230      	adds	r2, #48	; 0x30
 8019922:	443a      	add	r2, r7
 8019924:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019928:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801992a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801992e:	1e5a      	subs	r2, r3, #1
 8019930:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019934:	2b00      	cmp	r3, #0
 8019936:	d1e6      	bne.n	8019906 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019938:	6a3b      	ldr	r3, [r7, #32]
 801993a:	1c5a      	adds	r2, r3, #1
 801993c:	623a      	str	r2, [r7, #32]
 801993e:	687a      	ldr	r2, [r7, #4]
 8019940:	429a      	cmp	r2, r3
 8019942:	dc01      	bgt.n	8019948 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019944:	2300      	movs	r3, #0
 8019946:	e017      	b.n	8019978 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801994a:	1c5a      	adds	r2, r3, #1
 801994c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801994e:	222e      	movs	r2, #46	; 0x2e
 8019950:	701a      	strb	r2, [r3, #0]
    ap++;
 8019952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019954:	3301      	adds	r3, #1
 8019956:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801995c:	3301      	adds	r3, #1
 801995e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019966:	2b03      	cmp	r3, #3
 8019968:	d9a2      	bls.n	80198b0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801996c:	3b01      	subs	r3, #1
 801996e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019972:	2200      	movs	r2, #0
 8019974:	701a      	strb	r2, [r3, #0]
  return buf;
 8019976:	68bb      	ldr	r3, [r7, #8]
}
 8019978:	4618      	mov	r0, r3
 801997a:	3734      	adds	r7, #52	; 0x34
 801997c:	46bd      	mov	sp, r7
 801997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019982:	4770      	bx	lr
 8019984:	cccccccd 	.word	0xcccccccd

08019988 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b084      	sub	sp, #16
 801998c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801998e:	2300      	movs	r3, #0
 8019990:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019992:	4b12      	ldr	r3, [pc, #72]	; (80199dc <ip_reass_tmr+0x54>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019998:	e018      	b.n	80199cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	7fdb      	ldrb	r3, [r3, #31]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d00b      	beq.n	80199ba <ip_reass_tmr+0x32>
      r->timer--;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	7fdb      	ldrb	r3, [r3, #31]
 80199a6:	3b01      	subs	r3, #1
 80199a8:	b2da      	uxtb	r2, r3
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	60fb      	str	r3, [r7, #12]
 80199b8:	e008      	b.n	80199cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80199c4:	68b9      	ldr	r1, [r7, #8]
 80199c6:	6878      	ldr	r0, [r7, #4]
 80199c8:	f000 f80a 	bl	80199e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d1e3      	bne.n	801999a <ip_reass_tmr+0x12>
    }
  }
}
 80199d2:	bf00      	nop
 80199d4:	bf00      	nop
 80199d6:	3710      	adds	r7, #16
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}
 80199dc:	200071b0 	.word	0x200071b0

080199e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b088      	sub	sp, #32
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
 80199e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80199ea:	2300      	movs	r3, #0
 80199ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80199ee:	683a      	ldr	r2, [r7, #0]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	429a      	cmp	r2, r3
 80199f4:	d105      	bne.n	8019a02 <ip_reass_free_complete_datagram+0x22>
 80199f6:	4b45      	ldr	r3, [pc, #276]	; (8019b0c <ip_reass_free_complete_datagram+0x12c>)
 80199f8:	22ab      	movs	r2, #171	; 0xab
 80199fa:	4945      	ldr	r1, [pc, #276]	; (8019b10 <ip_reass_free_complete_datagram+0x130>)
 80199fc:	4845      	ldr	r0, [pc, #276]	; (8019b14 <ip_reass_free_complete_datagram+0x134>)
 80199fe:	f001 fc13 	bl	801b228 <iprintf>
  if (prev != NULL) {
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d00a      	beq.n	8019a1e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	d005      	beq.n	8019a1e <ip_reass_free_complete_datagram+0x3e>
 8019a12:	4b3e      	ldr	r3, [pc, #248]	; (8019b0c <ip_reass_free_complete_datagram+0x12c>)
 8019a14:	22ad      	movs	r2, #173	; 0xad
 8019a16:	4940      	ldr	r1, [pc, #256]	; (8019b18 <ip_reass_free_complete_datagram+0x138>)
 8019a18:	483e      	ldr	r0, [pc, #248]	; (8019b14 <ip_reass_free_complete_datagram+0x134>)
 8019a1a:	f001 fc05 	bl	801b228 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	685b      	ldr	r3, [r3, #4]
 8019a24:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	889b      	ldrh	r3, [r3, #4]
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d12a      	bne.n	8019a86 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	681a      	ldr	r2, [r3, #0]
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019a3e:	69bb      	ldr	r3, [r7, #24]
 8019a40:	6858      	ldr	r0, [r3, #4]
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	3308      	adds	r3, #8
 8019a46:	2214      	movs	r2, #20
 8019a48:	4619      	mov	r1, r3
 8019a4a:	f001 fdf6 	bl	801b63a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019a4e:	2101      	movs	r1, #1
 8019a50:	69b8      	ldr	r0, [r7, #24]
 8019a52:	f7ff fbad 	bl	80191b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019a56:	69b8      	ldr	r0, [r7, #24]
 8019a58:	f7f7 fdcc 	bl	80115f4 <pbuf_clen>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019a60:	8bfa      	ldrh	r2, [r7, #30]
 8019a62:	8a7b      	ldrh	r3, [r7, #18]
 8019a64:	4413      	add	r3, r2
 8019a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019a6a:	db05      	blt.n	8019a78 <ip_reass_free_complete_datagram+0x98>
 8019a6c:	4b27      	ldr	r3, [pc, #156]	; (8019b0c <ip_reass_free_complete_datagram+0x12c>)
 8019a6e:	22bc      	movs	r2, #188	; 0xbc
 8019a70:	492a      	ldr	r1, [pc, #168]	; (8019b1c <ip_reass_free_complete_datagram+0x13c>)
 8019a72:	4828      	ldr	r0, [pc, #160]	; (8019b14 <ip_reass_free_complete_datagram+0x134>)
 8019a74:	f001 fbd8 	bl	801b228 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019a78:	8bfa      	ldrh	r2, [r7, #30]
 8019a7a:	8a7b      	ldrh	r3, [r7, #18]
 8019a7c:	4413      	add	r3, r2
 8019a7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019a80:	69b8      	ldr	r0, [r7, #24]
 8019a82:	f7f7 fd2f 	bl	80114e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	685b      	ldr	r3, [r3, #4]
 8019a8a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019a8c:	e01f      	b.n	8019ace <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	685b      	ldr	r3, [r3, #4]
 8019a92:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019a9e:	68f8      	ldr	r0, [r7, #12]
 8019aa0:	f7f7 fda8 	bl	80115f4 <pbuf_clen>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019aa8:	8bfa      	ldrh	r2, [r7, #30]
 8019aaa:	8a7b      	ldrh	r3, [r7, #18]
 8019aac:	4413      	add	r3, r2
 8019aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ab2:	db05      	blt.n	8019ac0 <ip_reass_free_complete_datagram+0xe0>
 8019ab4:	4b15      	ldr	r3, [pc, #84]	; (8019b0c <ip_reass_free_complete_datagram+0x12c>)
 8019ab6:	22cc      	movs	r2, #204	; 0xcc
 8019ab8:	4918      	ldr	r1, [pc, #96]	; (8019b1c <ip_reass_free_complete_datagram+0x13c>)
 8019aba:	4816      	ldr	r0, [pc, #88]	; (8019b14 <ip_reass_free_complete_datagram+0x134>)
 8019abc:	f001 fbb4 	bl	801b228 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ac0:	8bfa      	ldrh	r2, [r7, #30]
 8019ac2:	8a7b      	ldrh	r3, [r7, #18]
 8019ac4:	4413      	add	r3, r2
 8019ac6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019ac8:	68f8      	ldr	r0, [r7, #12]
 8019aca:	f7f7 fd0b 	bl	80114e4 <pbuf_free>
  while (p != NULL) {
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d1dc      	bne.n	8019a8e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019ad4:	6839      	ldr	r1, [r7, #0]
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f000 f8c2 	bl	8019c60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019adc:	4b10      	ldr	r3, [pc, #64]	; (8019b20 <ip_reass_free_complete_datagram+0x140>)
 8019ade:	881b      	ldrh	r3, [r3, #0]
 8019ae0:	8bfa      	ldrh	r2, [r7, #30]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d905      	bls.n	8019af2 <ip_reass_free_complete_datagram+0x112>
 8019ae6:	4b09      	ldr	r3, [pc, #36]	; (8019b0c <ip_reass_free_complete_datagram+0x12c>)
 8019ae8:	22d2      	movs	r2, #210	; 0xd2
 8019aea:	490e      	ldr	r1, [pc, #56]	; (8019b24 <ip_reass_free_complete_datagram+0x144>)
 8019aec:	4809      	ldr	r0, [pc, #36]	; (8019b14 <ip_reass_free_complete_datagram+0x134>)
 8019aee:	f001 fb9b 	bl	801b228 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019af2:	4b0b      	ldr	r3, [pc, #44]	; (8019b20 <ip_reass_free_complete_datagram+0x140>)
 8019af4:	881a      	ldrh	r2, [r3, #0]
 8019af6:	8bfb      	ldrh	r3, [r7, #30]
 8019af8:	1ad3      	subs	r3, r2, r3
 8019afa:	b29a      	uxth	r2, r3
 8019afc:	4b08      	ldr	r3, [pc, #32]	; (8019b20 <ip_reass_free_complete_datagram+0x140>)
 8019afe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b00:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b02:	4618      	mov	r0, r3
 8019b04:	3720      	adds	r7, #32
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	08020968 	.word	0x08020968
 8019b10:	080209a4 	.word	0x080209a4
 8019b14:	080209b0 	.word	0x080209b0
 8019b18:	080209d8 	.word	0x080209d8
 8019b1c:	080209ec 	.word	0x080209ec
 8019b20:	200071b4 	.word	0x200071b4
 8019b24:	08020a0c 	.word	0x08020a0c

08019b28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b08a      	sub	sp, #40	; 0x28
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019b32:	2300      	movs	r3, #0
 8019b34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019b36:	2300      	movs	r3, #0
 8019b38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019b3e:	2300      	movs	r3, #0
 8019b40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019b42:	2300      	movs	r3, #0
 8019b44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019b46:	4b28      	ldr	r3, [pc, #160]	; (8019be8 <ip_reass_remove_oldest_datagram+0xc0>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019b4c:	e030      	b.n	8019bb0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b50:	695a      	ldr	r2, [r3, #20]
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	68db      	ldr	r3, [r3, #12]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d10c      	bne.n	8019b74 <ip_reass_remove_oldest_datagram+0x4c>
 8019b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b5c:	699a      	ldr	r2, [r3, #24]
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	691b      	ldr	r3, [r3, #16]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d106      	bne.n	8019b74 <ip_reass_remove_oldest_datagram+0x4c>
 8019b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b68:	899a      	ldrh	r2, [r3, #12]
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	889b      	ldrh	r3, [r3, #4]
 8019b6e:	b29b      	uxth	r3, r3
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d014      	beq.n	8019b9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019b74:	693b      	ldr	r3, [r7, #16]
 8019b76:	3301      	adds	r3, #1
 8019b78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019b7a:	6a3b      	ldr	r3, [r7, #32]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d104      	bne.n	8019b8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b84:	69fb      	ldr	r3, [r7, #28]
 8019b86:	61bb      	str	r3, [r7, #24]
 8019b88:	e009      	b.n	8019b9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8c:	7fda      	ldrb	r2, [r3, #31]
 8019b8e:	6a3b      	ldr	r3, [r7, #32]
 8019b90:	7fdb      	ldrb	r3, [r3, #31]
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d803      	bhi.n	8019b9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b9a:	69fb      	ldr	r3, [r7, #28]
 8019b9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d001      	beq.n	8019baa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d1cb      	bne.n	8019b4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019bb6:	6a3b      	ldr	r3, [r7, #32]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d008      	beq.n	8019bce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019bbc:	69b9      	ldr	r1, [r7, #24]
 8019bbe:	6a38      	ldr	r0, [r7, #32]
 8019bc0:	f7ff ff0e 	bl	80199e0 <ip_reass_free_complete_datagram>
 8019bc4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019bc6:	697a      	ldr	r2, [r7, #20]
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	4413      	add	r3, r2
 8019bcc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019bce:	697a      	ldr	r2, [r7, #20]
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	da02      	bge.n	8019bdc <ip_reass_remove_oldest_datagram+0xb4>
 8019bd6:	693b      	ldr	r3, [r7, #16]
 8019bd8:	2b01      	cmp	r3, #1
 8019bda:	dcac      	bgt.n	8019b36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019bdc:	697b      	ldr	r3, [r7, #20]
}
 8019bde:	4618      	mov	r0, r3
 8019be0:	3728      	adds	r7, #40	; 0x28
 8019be2:	46bd      	mov	sp, r7
 8019be4:	bd80      	pop	{r7, pc}
 8019be6:	bf00      	nop
 8019be8:	200071b0 	.word	0x200071b0

08019bec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b084      	sub	sp, #16
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019bf6:	2004      	movs	r0, #4
 8019bf8:	f7f6 fd8e 	bl	8010718 <memp_malloc>
 8019bfc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d110      	bne.n	8019c26 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c04:	6839      	ldr	r1, [r7, #0]
 8019c06:	6878      	ldr	r0, [r7, #4]
 8019c08:	f7ff ff8e 	bl	8019b28 <ip_reass_remove_oldest_datagram>
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	4293      	cmp	r3, r2
 8019c12:	dc03      	bgt.n	8019c1c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c14:	2004      	movs	r0, #4
 8019c16:	f7f6 fd7f 	bl	8010718 <memp_malloc>
 8019c1a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d101      	bne.n	8019c26 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019c22:	2300      	movs	r3, #0
 8019c24:	e016      	b.n	8019c54 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019c26:	2220      	movs	r2, #32
 8019c28:	2100      	movs	r1, #0
 8019c2a:	68f8      	ldr	r0, [r7, #12]
 8019c2c:	f001 fc8c 	bl	801b548 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	220f      	movs	r2, #15
 8019c34:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019c36:	4b09      	ldr	r3, [pc, #36]	; (8019c5c <ip_reass_enqueue_new_datagram+0x70>)
 8019c38:	681a      	ldr	r2, [r3, #0]
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019c3e:	4a07      	ldr	r2, [pc, #28]	; (8019c5c <ip_reass_enqueue_new_datagram+0x70>)
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	3308      	adds	r3, #8
 8019c48:	2214      	movs	r2, #20
 8019c4a:	6879      	ldr	r1, [r7, #4]
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f001 fcf4 	bl	801b63a <memcpy>
  return ipr;
 8019c52:	68fb      	ldr	r3, [r7, #12]
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	200071b0 	.word	0x200071b0

08019c60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b082      	sub	sp, #8
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019c6a:	4b10      	ldr	r3, [pc, #64]	; (8019cac <ip_reass_dequeue_datagram+0x4c>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	687a      	ldr	r2, [r7, #4]
 8019c70:	429a      	cmp	r2, r3
 8019c72:	d104      	bne.n	8019c7e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	4a0c      	ldr	r2, [pc, #48]	; (8019cac <ip_reass_dequeue_datagram+0x4c>)
 8019c7a:	6013      	str	r3, [r2, #0]
 8019c7c:	e00d      	b.n	8019c9a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d106      	bne.n	8019c92 <ip_reass_dequeue_datagram+0x32>
 8019c84:	4b0a      	ldr	r3, [pc, #40]	; (8019cb0 <ip_reass_dequeue_datagram+0x50>)
 8019c86:	f240 1245 	movw	r2, #325	; 0x145
 8019c8a:	490a      	ldr	r1, [pc, #40]	; (8019cb4 <ip_reass_dequeue_datagram+0x54>)
 8019c8c:	480a      	ldr	r0, [pc, #40]	; (8019cb8 <ip_reass_dequeue_datagram+0x58>)
 8019c8e:	f001 facb 	bl	801b228 <iprintf>
    prev->next = ipr->next;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681a      	ldr	r2, [r3, #0]
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019c9a:	6879      	ldr	r1, [r7, #4]
 8019c9c:	2004      	movs	r0, #4
 8019c9e:	f7f6 fdab 	bl	80107f8 <memp_free>
}
 8019ca2:	bf00      	nop
 8019ca4:	3708      	adds	r7, #8
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	200071b0 	.word	0x200071b0
 8019cb0:	08020968 	.word	0x08020968
 8019cb4:	08020a30 	.word	0x08020a30
 8019cb8:	080209b0 	.word	0x080209b0

08019cbc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b08c      	sub	sp, #48	; 0x30
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019cc8:	2300      	movs	r3, #0
 8019cca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019ccc:	2301      	movs	r3, #1
 8019cce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019cd6:	69fb      	ldr	r3, [r7, #28]
 8019cd8:	885b      	ldrh	r3, [r3, #2]
 8019cda:	b29b      	uxth	r3, r3
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7f5 fffd 	bl	800fcdc <lwip_htons>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019ce6:	69fb      	ldr	r3, [r7, #28]
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	f003 030f 	and.w	r3, r3, #15
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	009b      	lsls	r3, r3, #2
 8019cf2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019cf4:	7e7b      	ldrb	r3, [r7, #25]
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	8b7a      	ldrh	r2, [r7, #26]
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d202      	bcs.n	8019d04 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8019d02:	e135      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d04:	7e7b      	ldrb	r3, [r7, #25]
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	8b7a      	ldrh	r2, [r7, #26]
 8019d0a:	1ad3      	subs	r3, r2, r3
 8019d0c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d0e:	69fb      	ldr	r3, [r7, #28]
 8019d10:	88db      	ldrh	r3, [r3, #6]
 8019d12:	b29b      	uxth	r3, r3
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7f5 ffe1 	bl	800fcdc <lwip_htons>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	00db      	lsls	r3, r3, #3
 8019d24:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	685b      	ldr	r3, [r3, #4]
 8019d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2e:	2200      	movs	r2, #0
 8019d30:	701a      	strb	r2, [r3, #0]
 8019d32:	2200      	movs	r2, #0
 8019d34:	705a      	strb	r2, [r3, #1]
 8019d36:	2200      	movs	r2, #0
 8019d38:	709a      	strb	r2, [r3, #2]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d40:	8afa      	ldrh	r2, [r7, #22]
 8019d42:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019d44:	8afa      	ldrh	r2, [r7, #22]
 8019d46:	8b7b      	ldrh	r3, [r7, #26]
 8019d48:	4413      	add	r3, r2
 8019d4a:	b29a      	uxth	r2, r3
 8019d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d52:	88db      	ldrh	r3, [r3, #6]
 8019d54:	b29b      	uxth	r3, r3
 8019d56:	8afa      	ldrh	r2, [r7, #22]
 8019d58:	429a      	cmp	r2, r3
 8019d5a:	d902      	bls.n	8019d62 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d60:	e106      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	685b      	ldr	r3, [r3, #4]
 8019d66:	627b      	str	r3, [r7, #36]	; 0x24
 8019d68:	e068      	b.n	8019e3c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6c:	685b      	ldr	r3, [r3, #4]
 8019d6e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d72:	889b      	ldrh	r3, [r3, #4]
 8019d74:	b29a      	uxth	r2, r3
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	889b      	ldrh	r3, [r3, #4]
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d235      	bcs.n	8019dec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d84:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d020      	beq.n	8019dce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8e:	889b      	ldrh	r3, [r3, #4]
 8019d90:	b29a      	uxth	r2, r3
 8019d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d94:	88db      	ldrh	r3, [r3, #6]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	d307      	bcc.n	8019dac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d9e:	88db      	ldrh	r3, [r3, #6]
 8019da0:	b29a      	uxth	r2, r3
 8019da2:	693b      	ldr	r3, [r7, #16]
 8019da4:	889b      	ldrh	r3, [r3, #4]
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	429a      	cmp	r2, r3
 8019daa:	d902      	bls.n	8019db2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dac:	f04f 33ff 	mov.w	r3, #4294967295
 8019db0:	e0de      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019db4:	68ba      	ldr	r2, [r7, #8]
 8019db6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dba:	88db      	ldrh	r3, [r3, #6]
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc0:	889b      	ldrh	r3, [r3, #4]
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	429a      	cmp	r2, r3
 8019dc6:	d03d      	beq.n	8019e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019dc8:	2300      	movs	r3, #0
 8019dca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019dcc:	e03a      	b.n	8019e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	88db      	ldrh	r3, [r3, #6]
 8019dd2:	b29a      	uxth	r2, r3
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	889b      	ldrh	r3, [r3, #4]
 8019dd8:	b29b      	uxth	r3, r3
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d902      	bls.n	8019de4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dde:	f04f 33ff 	mov.w	r3, #4294967295
 8019de2:	e0c5      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	68ba      	ldr	r2, [r7, #8]
 8019de8:	605a      	str	r2, [r3, #4]
      break;
 8019dea:	e02b      	b.n	8019e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dee:	889b      	ldrh	r3, [r3, #4]
 8019df0:	b29a      	uxth	r2, r3
 8019df2:	693b      	ldr	r3, [r7, #16]
 8019df4:	889b      	ldrh	r3, [r3, #4]
 8019df6:	b29b      	uxth	r3, r3
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	d102      	bne.n	8019e02 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8019e00:	e0b6      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e04:	889b      	ldrh	r3, [r3, #4]
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	88db      	ldrh	r3, [r3, #6]
 8019e0c:	b29b      	uxth	r3, r3
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d202      	bcs.n	8019e18 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e12:	f04f 33ff 	mov.w	r3, #4294967295
 8019e16:	e0ab      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d009      	beq.n	8019e32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e20:	88db      	ldrh	r3, [r3, #6]
 8019e22:	b29a      	uxth	r2, r3
 8019e24:	693b      	ldr	r3, [r7, #16]
 8019e26:	889b      	ldrh	r3, [r3, #4]
 8019e28:	b29b      	uxth	r3, r3
 8019e2a:	429a      	cmp	r2, r3
 8019e2c:	d001      	beq.n	8019e32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d193      	bne.n	8019d6a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019e42:	e000      	b.n	8019e46 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019e44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d12d      	bne.n	8019ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d01c      	beq.n	8019e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e54:	88db      	ldrh	r3, [r3, #6]
 8019e56:	b29a      	uxth	r2, r3
 8019e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5a:	889b      	ldrh	r3, [r3, #4]
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	d906      	bls.n	8019e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019e62:	4b45      	ldr	r3, [pc, #276]	; (8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e64:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019e68:	4944      	ldr	r1, [pc, #272]	; (8019f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019e6a:	4845      	ldr	r0, [pc, #276]	; (8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e6c:	f001 f9dc 	bl	801b228 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e72:	68ba      	ldr	r2, [r7, #8]
 8019e74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e78:	88db      	ldrh	r3, [r3, #6]
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7e:	889b      	ldrh	r3, [r3, #4]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	429a      	cmp	r2, r3
 8019e84:	d010      	beq.n	8019ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019e86:	2300      	movs	r3, #0
 8019e88:	623b      	str	r3, [r7, #32]
 8019e8a:	e00d      	b.n	8019ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	685b      	ldr	r3, [r3, #4]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d006      	beq.n	8019ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019e94:	4b38      	ldr	r3, [pc, #224]	; (8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e96:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019e9a:	493a      	ldr	r1, [pc, #232]	; (8019f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019e9c:	4838      	ldr	r0, [pc, #224]	; (8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e9e:	f001 f9c3 	bl	801b228 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	68ba      	ldr	r2, [r7, #8]
 8019ea6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d105      	bne.n	8019eba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	7f9b      	ldrb	r3, [r3, #30]
 8019eb2:	f003 0301 	and.w	r3, r3, #1
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d059      	beq.n	8019f6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019eba:	6a3b      	ldr	r3, [r7, #32]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d04f      	beq.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	685b      	ldr	r3, [r3, #4]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d006      	beq.n	8019ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	889b      	ldrh	r3, [r3, #4]
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d002      	beq.n	8019edc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	623b      	str	r3, [r7, #32]
 8019eda:	e041      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ede:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019ee6:	e012      	b.n	8019f0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef0:	88db      	ldrh	r3, [r3, #6]
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	889b      	ldrh	r3, [r3, #4]
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	429a      	cmp	r2, r3
 8019efc:	d002      	beq.n	8019f04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019efe:	2300      	movs	r3, #0
 8019f00:	623b      	str	r3, [r7, #32]
            break;
 8019f02:	e007      	b.n	8019f14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d1e9      	bne.n	8019ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019f14:	6a3b      	ldr	r3, [r7, #32]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d022      	beq.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	685b      	ldr	r3, [r3, #4]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d106      	bne.n	8019f30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019f22:	4b15      	ldr	r3, [pc, #84]	; (8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f24:	f240 12df 	movw	r2, #479	; 0x1df
 8019f28:	4917      	ldr	r1, [pc, #92]	; (8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f2a:	4815      	ldr	r0, [pc, #84]	; (8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f2c:	f001 f97c 	bl	801b228 <iprintf>
          LWIP_ASSERT("sanity check",
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	685b      	ldr	r3, [r3, #4]
 8019f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d106      	bne.n	8019f4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019f3c:	4b0e      	ldr	r3, [pc, #56]	; (8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019f42:	4911      	ldr	r1, [pc, #68]	; (8019f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f44:	480e      	ldr	r0, [pc, #56]	; (8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f46:	f001 f96f 	bl	801b228 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d006      	beq.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019f52:	4b09      	ldr	r3, [pc, #36]	; (8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f54:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019f58:	490c      	ldr	r1, [pc, #48]	; (8019f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019f5a:	4809      	ldr	r0, [pc, #36]	; (8019f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f5c:	f001 f964 	bl	801b228 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019f60:	6a3b      	ldr	r3, [r7, #32]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	bf14      	ite	ne
 8019f66:	2301      	movne	r3, #1
 8019f68:	2300      	moveq	r3, #0
 8019f6a:	b2db      	uxtb	r3, r3
 8019f6c:	e000      	b.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019f6e:	2300      	movs	r3, #0
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	3730      	adds	r7, #48	; 0x30
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	08020968 	.word	0x08020968
 8019f7c:	08020a4c 	.word	0x08020a4c
 8019f80:	080209b0 	.word	0x080209b0
 8019f84:	08020a6c 	.word	0x08020a6c
 8019f88:	08020aa4 	.word	0x08020aa4
 8019f8c:	08020ab4 	.word	0x08020ab4

08019f90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019f90:	b580      	push	{r7, lr}
 8019f92:	b08e      	sub	sp, #56	; 0x38
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	f003 030f 	and.w	r3, r3, #15
 8019fa6:	b2db      	uxtb	r3, r3
 8019fa8:	009b      	lsls	r3, r3, #2
 8019faa:	b2db      	uxtb	r3, r3
 8019fac:	2b14      	cmp	r3, #20
 8019fae:	f040 8171 	bne.w	801a294 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb4:	88db      	ldrh	r3, [r3, #6]
 8019fb6:	b29b      	uxth	r3, r3
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7f5 fe8f 	bl	800fcdc <lwip_htons>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fcc:	885b      	ldrh	r3, [r3, #2]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7f5 fe83 	bl	800fcdc <lwip_htons>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fdc:	781b      	ldrb	r3, [r3, #0]
 8019fde:	f003 030f 	and.w	r3, r3, #15
 8019fe2:	b2db      	uxtb	r3, r3
 8019fe4:	009b      	lsls	r3, r3, #2
 8019fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019fee:	b29b      	uxth	r3, r3
 8019ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019ff2:	429a      	cmp	r2, r3
 8019ff4:	f0c0 8150 	bcc.w	801a298 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a000:	1ad3      	subs	r3, r2, r3
 801a002:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a004:	6878      	ldr	r0, [r7, #4]
 801a006:	f7f7 faf5 	bl	80115f4 <pbuf_clen>
 801a00a:	4603      	mov	r3, r0
 801a00c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a00e:	4b8c      	ldr	r3, [pc, #560]	; (801a240 <ip4_reass+0x2b0>)
 801a010:	881b      	ldrh	r3, [r3, #0]
 801a012:	461a      	mov	r2, r3
 801a014:	8c3b      	ldrh	r3, [r7, #32]
 801a016:	4413      	add	r3, r2
 801a018:	2b0a      	cmp	r3, #10
 801a01a:	dd10      	ble.n	801a03e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a01c:	8c3b      	ldrh	r3, [r7, #32]
 801a01e:	4619      	mov	r1, r3
 801a020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a022:	f7ff fd81 	bl	8019b28 <ip_reass_remove_oldest_datagram>
 801a026:	4603      	mov	r3, r0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f000 8137 	beq.w	801a29c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a02e:	4b84      	ldr	r3, [pc, #528]	; (801a240 <ip4_reass+0x2b0>)
 801a030:	881b      	ldrh	r3, [r3, #0]
 801a032:	461a      	mov	r2, r3
 801a034:	8c3b      	ldrh	r3, [r7, #32]
 801a036:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a038:	2b0a      	cmp	r3, #10
 801a03a:	f300 812f 	bgt.w	801a29c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a03e:	4b81      	ldr	r3, [pc, #516]	; (801a244 <ip4_reass+0x2b4>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	633b      	str	r3, [r7, #48]	; 0x30
 801a044:	e015      	b.n	801a072 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a048:	695a      	ldr	r2, [r3, #20]
 801a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04c:	68db      	ldr	r3, [r3, #12]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d10c      	bne.n	801a06c <ip4_reass+0xdc>
 801a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a054:	699a      	ldr	r2, [r3, #24]
 801a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a058:	691b      	ldr	r3, [r3, #16]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d106      	bne.n	801a06c <ip4_reass+0xdc>
 801a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a060:	899a      	ldrh	r2, [r3, #12]
 801a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a064:	889b      	ldrh	r3, [r3, #4]
 801a066:	b29b      	uxth	r3, r3
 801a068:	429a      	cmp	r2, r3
 801a06a:	d006      	beq.n	801a07a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	633b      	str	r3, [r7, #48]	; 0x30
 801a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a074:	2b00      	cmp	r3, #0
 801a076:	d1e6      	bne.n	801a046 <ip4_reass+0xb6>
 801a078:	e000      	b.n	801a07c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a07a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d109      	bne.n	801a096 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a082:	8c3b      	ldrh	r3, [r7, #32]
 801a084:	4619      	mov	r1, r3
 801a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a088:	f7ff fdb0 	bl	8019bec <ip_reass_enqueue_new_datagram>
 801a08c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a090:	2b00      	cmp	r3, #0
 801a092:	d11c      	bne.n	801a0ce <ip4_reass+0x13e>
      goto nullreturn;
 801a094:	e105      	b.n	801a2a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a098:	88db      	ldrh	r3, [r3, #6]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7f5 fe1d 	bl	800fcdc <lwip_htons>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d110      	bne.n	801a0ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ae:	89db      	ldrh	r3, [r3, #14]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7f5 fe13 	bl	800fcdc <lwip_htons>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d006      	beq.n	801a0ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0c2:	3308      	adds	r3, #8
 801a0c4:	2214      	movs	r2, #20
 801a0c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f001 fab6 	bl	801b63a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0d0:	88db      	ldrh	r3, [r3, #6]
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	f003 0320 	and.w	r3, r3, #32
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	bf0c      	ite	eq
 801a0dc:	2301      	moveq	r3, #1
 801a0de:	2300      	movne	r3, #0
 801a0e0:	b2db      	uxtb	r3, r3
 801a0e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a0e4:	69fb      	ldr	r3, [r7, #28]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d00e      	beq.n	801a108 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a0ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a0ee:	4413      	add	r3, r2
 801a0f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a0f2:	8b7a      	ldrh	r2, [r7, #26]
 801a0f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	f0c0 80a0 	bcc.w	801a23c <ip4_reass+0x2ac>
 801a0fc:	8b7b      	ldrh	r3, [r7, #26]
 801a0fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a102:	4293      	cmp	r3, r2
 801a104:	f200 809a 	bhi.w	801a23c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a108:	69fa      	ldr	r2, [r7, #28]
 801a10a:	6879      	ldr	r1, [r7, #4]
 801a10c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a10e:	f7ff fdd5 	bl	8019cbc <ip_reass_chain_frag_into_datagram_and_validate>
 801a112:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a114:	697b      	ldr	r3, [r7, #20]
 801a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a11a:	f000 809b 	beq.w	801a254 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a11e:	4b48      	ldr	r3, [pc, #288]	; (801a240 <ip4_reass+0x2b0>)
 801a120:	881a      	ldrh	r2, [r3, #0]
 801a122:	8c3b      	ldrh	r3, [r7, #32]
 801a124:	4413      	add	r3, r2
 801a126:	b29a      	uxth	r2, r3
 801a128:	4b45      	ldr	r3, [pc, #276]	; (801a240 <ip4_reass+0x2b0>)
 801a12a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a12c:	69fb      	ldr	r3, [r7, #28]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d00d      	beq.n	801a14e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a136:	4413      	add	r3, r2
 801a138:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a13c:	8a7a      	ldrh	r2, [r7, #18]
 801a13e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a142:	7f9b      	ldrb	r3, [r3, #30]
 801a144:	f043 0301 	orr.w	r3, r3, #1
 801a148:	b2da      	uxtb	r2, r3
 801a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a14c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	2b01      	cmp	r3, #1
 801a152:	d171      	bne.n	801a238 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a156:	8b9b      	ldrh	r3, [r3, #28]
 801a158:	3314      	adds	r3, #20
 801a15a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	685b      	ldr	r3, [r3, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a168:	685b      	ldr	r3, [r3, #4]
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a170:	3308      	adds	r3, #8
 801a172:	2214      	movs	r2, #20
 801a174:	4619      	mov	r1, r3
 801a176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a178:	f001 fa5f 	bl	801b63a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a17c:	8a3b      	ldrh	r3, [r7, #16]
 801a17e:	4618      	mov	r0, r3
 801a180:	f7f5 fdac 	bl	800fcdc <lwip_htons>
 801a184:	4603      	mov	r3, r0
 801a186:	461a      	mov	r2, r3
 801a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a18a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a18e:	2200      	movs	r2, #0
 801a190:	719a      	strb	r2, [r3, #6]
 801a192:	2200      	movs	r2, #0
 801a194:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a198:	2200      	movs	r2, #0
 801a19a:	729a      	strb	r2, [r3, #10]
 801a19c:	2200      	movs	r2, #0
 801a19e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a2:	685b      	ldr	r3, [r3, #4]
 801a1a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a1a6:	e00d      	b.n	801a1c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a1ae:	2114      	movs	r1, #20
 801a1b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a1b2:	f7f7 f911 	bl	80113d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a1b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f7f7 fa55 	bl	8011668 <pbuf_cat>
      r = iprh->next_pbuf;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d1ee      	bne.n	801a1a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a1ca:	4b1e      	ldr	r3, [pc, #120]	; (801a244 <ip4_reass+0x2b4>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d102      	bne.n	801a1da <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1d8:	e010      	b.n	801a1fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a1da:	4b1a      	ldr	r3, [pc, #104]	; (801a244 <ip4_reass+0x2b4>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1e0:	e007      	b.n	801a1f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d006      	beq.n	801a1fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d1f4      	bne.n	801a1e2 <ip4_reass+0x252>
 801a1f8:	e000      	b.n	801a1fc <ip4_reass+0x26c>
          break;
 801a1fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a1fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a200:	f7ff fd2e 	bl	8019c60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a204:	6878      	ldr	r0, [r7, #4]
 801a206:	f7f7 f9f5 	bl	80115f4 <pbuf_clen>
 801a20a:	4603      	mov	r3, r0
 801a20c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a20e:	4b0c      	ldr	r3, [pc, #48]	; (801a240 <ip4_reass+0x2b0>)
 801a210:	881b      	ldrh	r3, [r3, #0]
 801a212:	8c3a      	ldrh	r2, [r7, #32]
 801a214:	429a      	cmp	r2, r3
 801a216:	d906      	bls.n	801a226 <ip4_reass+0x296>
 801a218:	4b0b      	ldr	r3, [pc, #44]	; (801a248 <ip4_reass+0x2b8>)
 801a21a:	f240 229b 	movw	r2, #667	; 0x29b
 801a21e:	490b      	ldr	r1, [pc, #44]	; (801a24c <ip4_reass+0x2bc>)
 801a220:	480b      	ldr	r0, [pc, #44]	; (801a250 <ip4_reass+0x2c0>)
 801a222:	f001 f801 	bl	801b228 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a226:	4b06      	ldr	r3, [pc, #24]	; (801a240 <ip4_reass+0x2b0>)
 801a228:	881a      	ldrh	r2, [r3, #0]
 801a22a:	8c3b      	ldrh	r3, [r7, #32]
 801a22c:	1ad3      	subs	r3, r2, r3
 801a22e:	b29a      	uxth	r2, r3
 801a230:	4b03      	ldr	r3, [pc, #12]	; (801a240 <ip4_reass+0x2b0>)
 801a232:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	e038      	b.n	801a2aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a238:	2300      	movs	r3, #0
 801a23a:	e036      	b.n	801a2aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a23c:	bf00      	nop
 801a23e:	e00a      	b.n	801a256 <ip4_reass+0x2c6>
 801a240:	200071b4 	.word	0x200071b4
 801a244:	200071b0 	.word	0x200071b0
 801a248:	08020968 	.word	0x08020968
 801a24c:	08020ad8 	.word	0x08020ad8
 801a250:	080209b0 	.word	0x080209b0
    goto nullreturn_ipr;
 801a254:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d106      	bne.n	801a26a <ip4_reass+0x2da>
 801a25c:	4b15      	ldr	r3, [pc, #84]	; (801a2b4 <ip4_reass+0x324>)
 801a25e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a262:	4915      	ldr	r1, [pc, #84]	; (801a2b8 <ip4_reass+0x328>)
 801a264:	4815      	ldr	r0, [pc, #84]	; (801a2bc <ip4_reass+0x32c>)
 801a266:	f000 ffdf 	bl	801b228 <iprintf>
  if (ipr->p == NULL) {
 801a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a26c:	685b      	ldr	r3, [r3, #4]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d116      	bne.n	801a2a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a272:	4b13      	ldr	r3, [pc, #76]	; (801a2c0 <ip4_reass+0x330>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a278:	429a      	cmp	r2, r3
 801a27a:	d006      	beq.n	801a28a <ip4_reass+0x2fa>
 801a27c:	4b0d      	ldr	r3, [pc, #52]	; (801a2b4 <ip4_reass+0x324>)
 801a27e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a282:	4910      	ldr	r1, [pc, #64]	; (801a2c4 <ip4_reass+0x334>)
 801a284:	480d      	ldr	r0, [pc, #52]	; (801a2bc <ip4_reass+0x32c>)
 801a286:	f000 ffcf 	bl	801b228 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a28a:	2100      	movs	r1, #0
 801a28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a28e:	f7ff fce7 	bl	8019c60 <ip_reass_dequeue_datagram>
 801a292:	e006      	b.n	801a2a2 <ip4_reass+0x312>
    goto nullreturn;
 801a294:	bf00      	nop
 801a296:	e004      	b.n	801a2a2 <ip4_reass+0x312>
    goto nullreturn;
 801a298:	bf00      	nop
 801a29a:	e002      	b.n	801a2a2 <ip4_reass+0x312>
      goto nullreturn;
 801a29c:	bf00      	nop
 801a29e:	e000      	b.n	801a2a2 <ip4_reass+0x312>
  }

nullreturn:
 801a2a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f7f7 f91e 	bl	80114e4 <pbuf_free>
  return NULL;
 801a2a8:	2300      	movs	r3, #0
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	3738      	adds	r7, #56	; 0x38
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd80      	pop	{r7, pc}
 801a2b2:	bf00      	nop
 801a2b4:	08020968 	.word	0x08020968
 801a2b8:	08020af4 	.word	0x08020af4
 801a2bc:	080209b0 	.word	0x080209b0
 801a2c0:	200071b0 	.word	0x200071b0
 801a2c4:	08020b00 	.word	0x08020b00

0801a2c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a2cc:	2005      	movs	r0, #5
 801a2ce:	f7f6 fa23 	bl	8010718 <memp_malloc>
 801a2d2:	4603      	mov	r3, r0
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d106      	bne.n	801a2f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a2e6:	4b07      	ldr	r3, [pc, #28]	; (801a304 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a2e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a2ec:	4906      	ldr	r1, [pc, #24]	; (801a308 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a2ee:	4807      	ldr	r0, [pc, #28]	; (801a30c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a2f0:	f000 ff9a 	bl	801b228 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a2f4:	6879      	ldr	r1, [r7, #4]
 801a2f6:	2005      	movs	r0, #5
 801a2f8:	f7f6 fa7e 	bl	80107f8 <memp_free>
}
 801a2fc:	bf00      	nop
 801a2fe:	3708      	adds	r7, #8
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	08020968 	.word	0x08020968
 801a308:	08020b20 	.word	0x08020b20
 801a30c:	080209b0 	.word	0x080209b0

0801a310 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b084      	sub	sp, #16
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d106      	bne.n	801a330 <ipfrag_free_pbuf_custom+0x20>
 801a322:	4b11      	ldr	r3, [pc, #68]	; (801a368 <ipfrag_free_pbuf_custom+0x58>)
 801a324:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a328:	4910      	ldr	r1, [pc, #64]	; (801a36c <ipfrag_free_pbuf_custom+0x5c>)
 801a32a:	4811      	ldr	r0, [pc, #68]	; (801a370 <ipfrag_free_pbuf_custom+0x60>)
 801a32c:	f000 ff7c 	bl	801b228 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a330:	68fa      	ldr	r2, [r7, #12]
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	429a      	cmp	r2, r3
 801a336:	d006      	beq.n	801a346 <ipfrag_free_pbuf_custom+0x36>
 801a338:	4b0b      	ldr	r3, [pc, #44]	; (801a368 <ipfrag_free_pbuf_custom+0x58>)
 801a33a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a33e:	490d      	ldr	r1, [pc, #52]	; (801a374 <ipfrag_free_pbuf_custom+0x64>)
 801a340:	480b      	ldr	r0, [pc, #44]	; (801a370 <ipfrag_free_pbuf_custom+0x60>)
 801a342:	f000 ff71 	bl	801b228 <iprintf>
  if (pcr->original != NULL) {
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	695b      	ldr	r3, [r3, #20]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d004      	beq.n	801a358 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	695b      	ldr	r3, [r3, #20]
 801a352:	4618      	mov	r0, r3
 801a354:	f7f7 f8c6 	bl	80114e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a358:	68f8      	ldr	r0, [r7, #12]
 801a35a:	f7ff ffbd 	bl	801a2d8 <ip_frag_free_pbuf_custom_ref>
}
 801a35e:	bf00      	nop
 801a360:	3710      	adds	r7, #16
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
 801a366:	bf00      	nop
 801a368:	08020968 	.word	0x08020968
 801a36c:	08020b2c 	.word	0x08020b2c
 801a370:	080209b0 	.word	0x080209b0
 801a374:	08020b38 	.word	0x08020b38

0801a378 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b094      	sub	sp, #80	; 0x50
 801a37c:	af02      	add	r7, sp, #8
 801a37e:	60f8      	str	r0, [r7, #12]
 801a380:	60b9      	str	r1, [r7, #8]
 801a382:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a384:	2300      	movs	r3, #0
 801a386:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a38a:	68bb      	ldr	r3, [r7, #8]
 801a38c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a38e:	3b14      	subs	r3, #20
 801a390:	2b00      	cmp	r3, #0
 801a392:	da00      	bge.n	801a396 <ip4_frag+0x1e>
 801a394:	3307      	adds	r3, #7
 801a396:	10db      	asrs	r3, r3, #3
 801a398:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a39a:	2314      	movs	r3, #20
 801a39c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3aa:	781b      	ldrb	r3, [r3, #0]
 801a3ac:	f003 030f 	and.w	r3, r3, #15
 801a3b0:	b2db      	uxtb	r3, r3
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	2b14      	cmp	r3, #20
 801a3b8:	d002      	beq.n	801a3c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a3ba:	f06f 0305 	mvn.w	r3, #5
 801a3be:	e110      	b.n	801a5e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	895b      	ldrh	r3, [r3, #10]
 801a3c4:	2b13      	cmp	r3, #19
 801a3c6:	d809      	bhi.n	801a3dc <ip4_frag+0x64>
 801a3c8:	4b88      	ldr	r3, [pc, #544]	; (801a5ec <ip4_frag+0x274>)
 801a3ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a3ce:	4988      	ldr	r1, [pc, #544]	; (801a5f0 <ip4_frag+0x278>)
 801a3d0:	4888      	ldr	r0, [pc, #544]	; (801a5f4 <ip4_frag+0x27c>)
 801a3d2:	f000 ff29 	bl	801b228 <iprintf>
 801a3d6:	f06f 0305 	mvn.w	r3, #5
 801a3da:	e102      	b.n	801a5e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3de:	88db      	ldrh	r3, [r3, #6]
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7f5 fc7a 	bl	800fcdc <lwip_htons>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a3ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a3f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	891b      	ldrh	r3, [r3, #8]
 801a402:	3b14      	subs	r3, #20
 801a404:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a408:	e0e1      	b.n	801a5ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a40a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	b29b      	uxth	r3, r3
 801a410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a414:	4293      	cmp	r3, r2
 801a416:	bf28      	it	cs
 801a418:	4613      	movcs	r3, r2
 801a41a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a41c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a420:	2114      	movs	r1, #20
 801a422:	200e      	movs	r0, #14
 801a424:	f7f6 fd7a 	bl	8010f1c <pbuf_alloc>
 801a428:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	f000 80d5 	beq.w	801a5dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a434:	895b      	ldrh	r3, [r3, #10]
 801a436:	2b13      	cmp	r3, #19
 801a438:	d806      	bhi.n	801a448 <ip4_frag+0xd0>
 801a43a:	4b6c      	ldr	r3, [pc, #432]	; (801a5ec <ip4_frag+0x274>)
 801a43c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a440:	496d      	ldr	r1, [pc, #436]	; (801a5f8 <ip4_frag+0x280>)
 801a442:	486c      	ldr	r0, [pc, #432]	; (801a5f4 <ip4_frag+0x27c>)
 801a444:	f000 fef0 	bl	801b228 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44a:	685b      	ldr	r3, [r3, #4]
 801a44c:	2214      	movs	r2, #20
 801a44e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a450:	4618      	mov	r0, r3
 801a452:	f001 f8f2 	bl	801b63a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a45c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a45e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a462:	e064      	b.n	801a52e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	895a      	ldrh	r2, [r3, #10]
 801a468:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	895b      	ldrh	r3, [r3, #10]
 801a472:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a474:	429a      	cmp	r2, r3
 801a476:	d906      	bls.n	801a486 <ip4_frag+0x10e>
 801a478:	4b5c      	ldr	r3, [pc, #368]	; (801a5ec <ip4_frag+0x274>)
 801a47a:	f240 322d 	movw	r2, #813	; 0x32d
 801a47e:	495f      	ldr	r1, [pc, #380]	; (801a5fc <ip4_frag+0x284>)
 801a480:	485c      	ldr	r0, [pc, #368]	; (801a5f4 <ip4_frag+0x27c>)
 801a482:	f000 fed1 	bl	801b228 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a486:	8bfa      	ldrh	r2, [r7, #30]
 801a488:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a48c:	4293      	cmp	r3, r2
 801a48e:	bf28      	it	cs
 801a490:	4613      	movcs	r3, r2
 801a492:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d105      	bne.n	801a4aa <ip4_frag+0x132>
        poff = 0;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	60fb      	str	r3, [r7, #12]
        continue;
 801a4a8:	e041      	b.n	801a52e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a4aa:	f7ff ff0d 	bl	801a2c8 <ip_frag_alloc_pbuf_custom_ref>
 801a4ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a4b0:	69bb      	ldr	r3, [r7, #24]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d103      	bne.n	801a4be <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a4b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a4b8:	f7f7 f814 	bl	80114e4 <pbuf_free>
        goto memerr;
 801a4bc:	e08f      	b.n	801a5de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a4be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a4c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4c6:	4413      	add	r3, r2
 801a4c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a4cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a4d0:	9201      	str	r2, [sp, #4]
 801a4d2:	9300      	str	r3, [sp, #0]
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	2241      	movs	r2, #65	; 0x41
 801a4d8:	2000      	movs	r0, #0
 801a4da:	f7f6 fe4b 	bl	8011174 <pbuf_alloced_custom>
 801a4de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a4e0:	697b      	ldr	r3, [r7, #20]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d106      	bne.n	801a4f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a4e6:	69b8      	ldr	r0, [r7, #24]
 801a4e8:	f7ff fef6 	bl	801a2d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a4ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a4ee:	f7f6 fff9 	bl	80114e4 <pbuf_free>
        goto memerr;
 801a4f2:	e074      	b.n	801a5de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a4f4:	68f8      	ldr	r0, [r7, #12]
 801a4f6:	f7f7 f895 	bl	8011624 <pbuf_ref>
      pcr->original = p;
 801a4fa:	69bb      	ldr	r3, [r7, #24]
 801a4fc:	68fa      	ldr	r2, [r7, #12]
 801a4fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a500:	69bb      	ldr	r3, [r7, #24]
 801a502:	4a3f      	ldr	r2, [pc, #252]	; (801a600 <ip4_frag+0x288>)
 801a504:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a506:	6979      	ldr	r1, [r7, #20]
 801a508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a50a:	f7f7 f8ad 	bl	8011668 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a50e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a512:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a516:	1ad3      	subs	r3, r2, r3
 801a518:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a51c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a520:	2b00      	cmp	r3, #0
 801a522:	d004      	beq.n	801a52e <ip4_frag+0x1b6>
        poff = 0;
 801a524:	2300      	movs	r3, #0
 801a526:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a52e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a532:	2b00      	cmp	r3, #0
 801a534:	d196      	bne.n	801a464 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a53c:	4413      	add	r3, r2
 801a53e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a540:	68bb      	ldr	r3, [r7, #8]
 801a542:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a544:	f1a3 0213 	sub.w	r2, r3, #19
 801a548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a54c:	429a      	cmp	r2, r3
 801a54e:	bfcc      	ite	gt
 801a550:	2301      	movgt	r3, #1
 801a552:	2300      	movle	r3, #0
 801a554:	b2db      	uxtb	r3, r3
 801a556:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a558:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a55c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a560:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a562:	6a3b      	ldr	r3, [r7, #32]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d002      	beq.n	801a56e <ip4_frag+0x1f6>
 801a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d003      	beq.n	801a576 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a56e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a574:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a578:	4618      	mov	r0, r3
 801a57a:	f7f5 fbaf 	bl	800fcdc <lwip_htons>
 801a57e:	4603      	mov	r3, r0
 801a580:	461a      	mov	r2, r3
 801a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a584:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a586:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a588:	3314      	adds	r3, #20
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	4618      	mov	r0, r3
 801a58e:	f7f5 fba5 	bl	800fcdc <lwip_htons>
 801a592:	4603      	mov	r3, r0
 801a594:	461a      	mov	r2, r3
 801a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a598:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a59c:	2200      	movs	r2, #0
 801a59e:	729a      	strb	r2, [r3, #10]
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	695b      	ldr	r3, [r3, #20]
 801a5a8:	687a      	ldr	r2, [r7, #4]
 801a5aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a5ac:	68b8      	ldr	r0, [r7, #8]
 801a5ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a5b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5b2:	f7f6 ff97 	bl	80114e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a5b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a5ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a5bc:	1ad3      	subs	r3, r2, r3
 801a5be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a5c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a5c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a5c8:	4413      	add	r3, r2
 801a5ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a5ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	f47f af19 	bne.w	801a40a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a5d8:	2300      	movs	r3, #0
 801a5da:	e002      	b.n	801a5e2 <ip4_frag+0x26a>
      goto memerr;
 801a5dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a5de:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	3748      	adds	r7, #72	; 0x48
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	08020968 	.word	0x08020968
 801a5f0:	08020b44 	.word	0x08020b44
 801a5f4:	080209b0 	.word	0x080209b0
 801a5f8:	08020b60 	.word	0x08020b60
 801a5fc:	08020b80 	.word	0x08020b80
 801a600:	0801a311 	.word	0x0801a311

0801a604 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b086      	sub	sp, #24
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
 801a60c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a60e:	230e      	movs	r3, #14
 801a610:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	895b      	ldrh	r3, [r3, #10]
 801a616:	2b0e      	cmp	r3, #14
 801a618:	d96e      	bls.n	801a6f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	7bdb      	ldrb	r3, [r3, #15]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d106      	bne.n	801a630 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a628:	3301      	adds	r3, #1
 801a62a:	b2da      	uxtb	r2, r3
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a636:	693b      	ldr	r3, [r7, #16]
 801a638:	7b1a      	ldrb	r2, [r3, #12]
 801a63a:	7b5b      	ldrb	r3, [r3, #13]
 801a63c:	021b      	lsls	r3, r3, #8
 801a63e:	4313      	orrs	r3, r2
 801a640:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a642:	693b      	ldr	r3, [r7, #16]
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	f003 0301 	and.w	r3, r3, #1
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d023      	beq.n	801a696 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	2b01      	cmp	r3, #1
 801a654:	d10f      	bne.n	801a676 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	785b      	ldrb	r3, [r3, #1]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d11b      	bne.n	801a696 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a65e:	693b      	ldr	r3, [r7, #16]
 801a660:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a662:	2b5e      	cmp	r3, #94	; 0x5e
 801a664:	d117      	bne.n	801a696 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	7b5b      	ldrb	r3, [r3, #13]
 801a66a:	f043 0310 	orr.w	r3, r3, #16
 801a66e:	b2da      	uxtb	r2, r3
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	735a      	strb	r2, [r3, #13]
 801a674:	e00f      	b.n	801a696 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	2206      	movs	r2, #6
 801a67a:	4928      	ldr	r1, [pc, #160]	; (801a71c <ethernet_input+0x118>)
 801a67c:	4618      	mov	r0, r3
 801a67e:	f000 ff39 	bl	801b4f4 <memcmp>
 801a682:	4603      	mov	r3, r0
 801a684:	2b00      	cmp	r3, #0
 801a686:	d106      	bne.n	801a696 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	7b5b      	ldrb	r3, [r3, #13]
 801a68c:	f043 0308 	orr.w	r3, r3, #8
 801a690:	b2da      	uxtb	r2, r3
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a696:	89fb      	ldrh	r3, [r7, #14]
 801a698:	2b08      	cmp	r3, #8
 801a69a:	d003      	beq.n	801a6a4 <ethernet_input+0xa0>
 801a69c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a6a0:	d014      	beq.n	801a6cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a6a2:	e032      	b.n	801a70a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a6a4:	683b      	ldr	r3, [r7, #0]
 801a6a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a6aa:	f003 0308 	and.w	r3, r3, #8
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d024      	beq.n	801a6fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a6b2:	8afb      	ldrh	r3, [r7, #22]
 801a6b4:	4619      	mov	r1, r3
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	f7f6 fe8e 	bl	80113d8 <pbuf_remove_header>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d11e      	bne.n	801a700 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a6c2:	6839      	ldr	r1, [r7, #0]
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	f7fe fe91 	bl	80193ec <ip4_input>
      break;
 801a6ca:	e013      	b.n	801a6f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a6cc:	683b      	ldr	r3, [r7, #0]
 801a6ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a6d2:	f003 0308 	and.w	r3, r3, #8
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d014      	beq.n	801a704 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a6da:	8afb      	ldrh	r3, [r7, #22]
 801a6dc:	4619      	mov	r1, r3
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	f7f6 fe7a 	bl	80113d8 <pbuf_remove_header>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d10e      	bne.n	801a708 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a6ea:	6839      	ldr	r1, [r7, #0]
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7fe f80b 	bl	8018708 <etharp_input>
      break;
 801a6f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	e00c      	b.n	801a712 <ethernet_input+0x10e>
    goto free_and_return;
 801a6f8:	bf00      	nop
 801a6fa:	e006      	b.n	801a70a <ethernet_input+0x106>
        goto free_and_return;
 801a6fc:	bf00      	nop
 801a6fe:	e004      	b.n	801a70a <ethernet_input+0x106>
        goto free_and_return;
 801a700:	bf00      	nop
 801a702:	e002      	b.n	801a70a <ethernet_input+0x106>
        goto free_and_return;
 801a704:	bf00      	nop
 801a706:	e000      	b.n	801a70a <ethernet_input+0x106>
        goto free_and_return;
 801a708:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7f6 feea 	bl	80114e4 <pbuf_free>
  return ERR_OK;
 801a710:	2300      	movs	r3, #0
}
 801a712:	4618      	mov	r0, r3
 801a714:	3718      	adds	r7, #24
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}
 801a71a:	bf00      	nop
 801a71c:	08020d60 	.word	0x08020d60

0801a720 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a720:	b580      	push	{r7, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	af00      	add	r7, sp, #0
 801a726:	60f8      	str	r0, [r7, #12]
 801a728:	60b9      	str	r1, [r7, #8]
 801a72a:	607a      	str	r2, [r7, #4]
 801a72c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a72e:	8c3b      	ldrh	r3, [r7, #32]
 801a730:	4618      	mov	r0, r3
 801a732:	f7f5 fad3 	bl	800fcdc <lwip_htons>
 801a736:	4603      	mov	r3, r0
 801a738:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a73a:	210e      	movs	r1, #14
 801a73c:	68b8      	ldr	r0, [r7, #8]
 801a73e:	f7f6 fe3b 	bl	80113b8 <pbuf_add_header>
 801a742:	4603      	mov	r3, r0
 801a744:	2b00      	cmp	r3, #0
 801a746:	d125      	bne.n	801a794 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a748:	68bb      	ldr	r3, [r7, #8]
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	8afa      	ldrh	r2, [r7, #22]
 801a752:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a754:	693b      	ldr	r3, [r7, #16]
 801a756:	2206      	movs	r2, #6
 801a758:	6839      	ldr	r1, [r7, #0]
 801a75a:	4618      	mov	r0, r3
 801a75c:	f000 ff6d 	bl	801b63a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a760:	693b      	ldr	r3, [r7, #16]
 801a762:	3306      	adds	r3, #6
 801a764:	2206      	movs	r2, #6
 801a766:	6879      	ldr	r1, [r7, #4]
 801a768:	4618      	mov	r0, r3
 801a76a:	f000 ff66 	bl	801b63a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a774:	2b06      	cmp	r3, #6
 801a776:	d006      	beq.n	801a786 <ethernet_output+0x66>
 801a778:	4b0a      	ldr	r3, [pc, #40]	; (801a7a4 <ethernet_output+0x84>)
 801a77a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a77e:	490a      	ldr	r1, [pc, #40]	; (801a7a8 <ethernet_output+0x88>)
 801a780:	480a      	ldr	r0, [pc, #40]	; (801a7ac <ethernet_output+0x8c>)
 801a782:	f000 fd51 	bl	801b228 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	699b      	ldr	r3, [r3, #24]
 801a78a:	68b9      	ldr	r1, [r7, #8]
 801a78c:	68f8      	ldr	r0, [r7, #12]
 801a78e:	4798      	blx	r3
 801a790:	4603      	mov	r3, r0
 801a792:	e002      	b.n	801a79a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a794:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a796:	f06f 0301 	mvn.w	r3, #1
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	3718      	adds	r7, #24
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	08020b90 	.word	0x08020b90
 801a7a8:	08020bc8 	.word	0x08020bc8
 801a7ac:	08020bfc 	.word	0x08020bfc

0801a7b0 <rand>:
 801a7b0:	4b16      	ldr	r3, [pc, #88]	; (801a80c <rand+0x5c>)
 801a7b2:	b510      	push	{r4, lr}
 801a7b4:	681c      	ldr	r4, [r3, #0]
 801a7b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a7b8:	b9b3      	cbnz	r3, 801a7e8 <rand+0x38>
 801a7ba:	2018      	movs	r0, #24
 801a7bc:	f001 fdac 	bl	801c318 <malloc>
 801a7c0:	4602      	mov	r2, r0
 801a7c2:	6320      	str	r0, [r4, #48]	; 0x30
 801a7c4:	b920      	cbnz	r0, 801a7d0 <rand+0x20>
 801a7c6:	4b12      	ldr	r3, [pc, #72]	; (801a810 <rand+0x60>)
 801a7c8:	4812      	ldr	r0, [pc, #72]	; (801a814 <rand+0x64>)
 801a7ca:	2152      	movs	r1, #82	; 0x52
 801a7cc:	f000 ff44 	bl	801b658 <__assert_func>
 801a7d0:	4911      	ldr	r1, [pc, #68]	; (801a818 <rand+0x68>)
 801a7d2:	4b12      	ldr	r3, [pc, #72]	; (801a81c <rand+0x6c>)
 801a7d4:	e9c0 1300 	strd	r1, r3, [r0]
 801a7d8:	4b11      	ldr	r3, [pc, #68]	; (801a820 <rand+0x70>)
 801a7da:	6083      	str	r3, [r0, #8]
 801a7dc:	230b      	movs	r3, #11
 801a7de:	8183      	strh	r3, [r0, #12]
 801a7e0:	2100      	movs	r1, #0
 801a7e2:	2001      	movs	r0, #1
 801a7e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a7e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a7ea:	480e      	ldr	r0, [pc, #56]	; (801a824 <rand+0x74>)
 801a7ec:	690b      	ldr	r3, [r1, #16]
 801a7ee:	694c      	ldr	r4, [r1, #20]
 801a7f0:	4a0d      	ldr	r2, [pc, #52]	; (801a828 <rand+0x78>)
 801a7f2:	4358      	muls	r0, r3
 801a7f4:	fb02 0004 	mla	r0, r2, r4, r0
 801a7f8:	fba3 3202 	umull	r3, r2, r3, r2
 801a7fc:	3301      	adds	r3, #1
 801a7fe:	eb40 0002 	adc.w	r0, r0, r2
 801a802:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a806:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a80a:	bd10      	pop	{r4, pc}
 801a80c:	200000b8 	.word	0x200000b8
 801a810:	08020d6e 	.word	0x08020d6e
 801a814:	08020d85 	.word	0x08020d85
 801a818:	abcd330e 	.word	0xabcd330e
 801a81c:	e66d1234 	.word	0xe66d1234
 801a820:	0005deec 	.word	0x0005deec
 801a824:	5851f42d 	.word	0x5851f42d
 801a828:	4c957f2d 	.word	0x4c957f2d

0801a82c <__cvt>:
 801a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a82e:	ed2d 8b02 	vpush	{d8}
 801a832:	eeb0 8b40 	vmov.f64	d8, d0
 801a836:	b085      	sub	sp, #20
 801a838:	4617      	mov	r7, r2
 801a83a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a83c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a83e:	ee18 2a90 	vmov	r2, s17
 801a842:	f025 0520 	bic.w	r5, r5, #32
 801a846:	2a00      	cmp	r2, #0
 801a848:	bfb6      	itet	lt
 801a84a:	222d      	movlt	r2, #45	; 0x2d
 801a84c:	2200      	movge	r2, #0
 801a84e:	eeb1 8b40 	vneglt.f64	d8, d0
 801a852:	2d46      	cmp	r5, #70	; 0x46
 801a854:	460c      	mov	r4, r1
 801a856:	701a      	strb	r2, [r3, #0]
 801a858:	d004      	beq.n	801a864 <__cvt+0x38>
 801a85a:	2d45      	cmp	r5, #69	; 0x45
 801a85c:	d100      	bne.n	801a860 <__cvt+0x34>
 801a85e:	3401      	adds	r4, #1
 801a860:	2102      	movs	r1, #2
 801a862:	e000      	b.n	801a866 <__cvt+0x3a>
 801a864:	2103      	movs	r1, #3
 801a866:	ab03      	add	r3, sp, #12
 801a868:	9301      	str	r3, [sp, #4]
 801a86a:	ab02      	add	r3, sp, #8
 801a86c:	9300      	str	r3, [sp, #0]
 801a86e:	4622      	mov	r2, r4
 801a870:	4633      	mov	r3, r6
 801a872:	eeb0 0b48 	vmov.f64	d0, d8
 801a876:	f000 ff97 	bl	801b7a8 <_dtoa_r>
 801a87a:	2d47      	cmp	r5, #71	; 0x47
 801a87c:	d101      	bne.n	801a882 <__cvt+0x56>
 801a87e:	07fb      	lsls	r3, r7, #31
 801a880:	d51a      	bpl.n	801a8b8 <__cvt+0x8c>
 801a882:	2d46      	cmp	r5, #70	; 0x46
 801a884:	eb00 0204 	add.w	r2, r0, r4
 801a888:	d10c      	bne.n	801a8a4 <__cvt+0x78>
 801a88a:	7803      	ldrb	r3, [r0, #0]
 801a88c:	2b30      	cmp	r3, #48	; 0x30
 801a88e:	d107      	bne.n	801a8a0 <__cvt+0x74>
 801a890:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a898:	bf1c      	itt	ne
 801a89a:	f1c4 0401 	rsbne	r4, r4, #1
 801a89e:	6034      	strne	r4, [r6, #0]
 801a8a0:	6833      	ldr	r3, [r6, #0]
 801a8a2:	441a      	add	r2, r3
 801a8a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ac:	bf08      	it	eq
 801a8ae:	9203      	streq	r2, [sp, #12]
 801a8b0:	2130      	movs	r1, #48	; 0x30
 801a8b2:	9b03      	ldr	r3, [sp, #12]
 801a8b4:	4293      	cmp	r3, r2
 801a8b6:	d307      	bcc.n	801a8c8 <__cvt+0x9c>
 801a8b8:	9b03      	ldr	r3, [sp, #12]
 801a8ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8bc:	1a1b      	subs	r3, r3, r0
 801a8be:	6013      	str	r3, [r2, #0]
 801a8c0:	b005      	add	sp, #20
 801a8c2:	ecbd 8b02 	vpop	{d8}
 801a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8c8:	1c5c      	adds	r4, r3, #1
 801a8ca:	9403      	str	r4, [sp, #12]
 801a8cc:	7019      	strb	r1, [r3, #0]
 801a8ce:	e7f0      	b.n	801a8b2 <__cvt+0x86>

0801a8d0 <__exponent>:
 801a8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	2900      	cmp	r1, #0
 801a8d6:	bfb8      	it	lt
 801a8d8:	4249      	neglt	r1, r1
 801a8da:	f803 2b02 	strb.w	r2, [r3], #2
 801a8de:	bfb4      	ite	lt
 801a8e0:	222d      	movlt	r2, #45	; 0x2d
 801a8e2:	222b      	movge	r2, #43	; 0x2b
 801a8e4:	2909      	cmp	r1, #9
 801a8e6:	7042      	strb	r2, [r0, #1]
 801a8e8:	dd2a      	ble.n	801a940 <__exponent+0x70>
 801a8ea:	f10d 0207 	add.w	r2, sp, #7
 801a8ee:	4617      	mov	r7, r2
 801a8f0:	260a      	movs	r6, #10
 801a8f2:	4694      	mov	ip, r2
 801a8f4:	fb91 f5f6 	sdiv	r5, r1, r6
 801a8f8:	fb06 1415 	mls	r4, r6, r5, r1
 801a8fc:	3430      	adds	r4, #48	; 0x30
 801a8fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a902:	460c      	mov	r4, r1
 801a904:	2c63      	cmp	r4, #99	; 0x63
 801a906:	f102 32ff 	add.w	r2, r2, #4294967295
 801a90a:	4629      	mov	r1, r5
 801a90c:	dcf1      	bgt.n	801a8f2 <__exponent+0x22>
 801a90e:	3130      	adds	r1, #48	; 0x30
 801a910:	f1ac 0402 	sub.w	r4, ip, #2
 801a914:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a918:	1c41      	adds	r1, r0, #1
 801a91a:	4622      	mov	r2, r4
 801a91c:	42ba      	cmp	r2, r7
 801a91e:	d30a      	bcc.n	801a936 <__exponent+0x66>
 801a920:	f10d 0209 	add.w	r2, sp, #9
 801a924:	eba2 020c 	sub.w	r2, r2, ip
 801a928:	42bc      	cmp	r4, r7
 801a92a:	bf88      	it	hi
 801a92c:	2200      	movhi	r2, #0
 801a92e:	4413      	add	r3, r2
 801a930:	1a18      	subs	r0, r3, r0
 801a932:	b003      	add	sp, #12
 801a934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a936:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a93a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a93e:	e7ed      	b.n	801a91c <__exponent+0x4c>
 801a940:	2330      	movs	r3, #48	; 0x30
 801a942:	3130      	adds	r1, #48	; 0x30
 801a944:	7083      	strb	r3, [r0, #2]
 801a946:	70c1      	strb	r1, [r0, #3]
 801a948:	1d03      	adds	r3, r0, #4
 801a94a:	e7f1      	b.n	801a930 <__exponent+0x60>
 801a94c:	0000      	movs	r0, r0
	...

0801a950 <_printf_float>:
 801a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a954:	b08b      	sub	sp, #44	; 0x2c
 801a956:	460c      	mov	r4, r1
 801a958:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a95c:	4616      	mov	r6, r2
 801a95e:	461f      	mov	r7, r3
 801a960:	4605      	mov	r5, r0
 801a962:	f000 fdf9 	bl	801b558 <_localeconv_r>
 801a966:	f8d0 b000 	ldr.w	fp, [r0]
 801a96a:	4658      	mov	r0, fp
 801a96c:	f7e7 fb90 	bl	8002090 <strlen>
 801a970:	2300      	movs	r3, #0
 801a972:	9308      	str	r3, [sp, #32]
 801a974:	f8d8 3000 	ldr.w	r3, [r8]
 801a978:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a97c:	6822      	ldr	r2, [r4, #0]
 801a97e:	3307      	adds	r3, #7
 801a980:	f023 0307 	bic.w	r3, r3, #7
 801a984:	f103 0108 	add.w	r1, r3, #8
 801a988:	f8c8 1000 	str.w	r1, [r8]
 801a98c:	ed93 0b00 	vldr	d0, [r3]
 801a990:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801abf0 <_printf_float+0x2a0>
 801a994:	eeb0 7bc0 	vabs.f64	d7, d0
 801a998:	eeb4 7b46 	vcmp.f64	d7, d6
 801a99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9a0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801a9a4:	4682      	mov	sl, r0
 801a9a6:	dd24      	ble.n	801a9f2 <_printf_float+0xa2>
 801a9a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b0:	d502      	bpl.n	801a9b8 <_printf_float+0x68>
 801a9b2:	232d      	movs	r3, #45	; 0x2d
 801a9b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9b8:	498f      	ldr	r1, [pc, #572]	; (801abf8 <_printf_float+0x2a8>)
 801a9ba:	4b90      	ldr	r3, [pc, #576]	; (801abfc <_printf_float+0x2ac>)
 801a9bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a9c0:	bf94      	ite	ls
 801a9c2:	4688      	movls	r8, r1
 801a9c4:	4698      	movhi	r8, r3
 801a9c6:	2303      	movs	r3, #3
 801a9c8:	6123      	str	r3, [r4, #16]
 801a9ca:	f022 0204 	bic.w	r2, r2, #4
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	6022      	str	r2, [r4, #0]
 801a9d2:	9304      	str	r3, [sp, #16]
 801a9d4:	9700      	str	r7, [sp, #0]
 801a9d6:	4633      	mov	r3, r6
 801a9d8:	aa09      	add	r2, sp, #36	; 0x24
 801a9da:	4621      	mov	r1, r4
 801a9dc:	4628      	mov	r0, r5
 801a9de:	f000 f9d1 	bl	801ad84 <_printf_common>
 801a9e2:	3001      	adds	r0, #1
 801a9e4:	f040 808a 	bne.w	801aafc <_printf_float+0x1ac>
 801a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ec:	b00b      	add	sp, #44	; 0x2c
 801a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f2:	eeb4 0b40 	vcmp.f64	d0, d0
 801a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9fa:	d709      	bvc.n	801aa10 <_printf_float+0xc0>
 801a9fc:	ee10 3a90 	vmov	r3, s1
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	bfbc      	itt	lt
 801aa04:	232d      	movlt	r3, #45	; 0x2d
 801aa06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa0a:	497d      	ldr	r1, [pc, #500]	; (801ac00 <_printf_float+0x2b0>)
 801aa0c:	4b7d      	ldr	r3, [pc, #500]	; (801ac04 <_printf_float+0x2b4>)
 801aa0e:	e7d5      	b.n	801a9bc <_printf_float+0x6c>
 801aa10:	6863      	ldr	r3, [r4, #4]
 801aa12:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801aa16:	9104      	str	r1, [sp, #16]
 801aa18:	1c59      	adds	r1, r3, #1
 801aa1a:	d13c      	bne.n	801aa96 <_printf_float+0x146>
 801aa1c:	2306      	movs	r3, #6
 801aa1e:	6063      	str	r3, [r4, #4]
 801aa20:	2300      	movs	r3, #0
 801aa22:	9303      	str	r3, [sp, #12]
 801aa24:	ab08      	add	r3, sp, #32
 801aa26:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aa2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aa2e:	ab07      	add	r3, sp, #28
 801aa30:	6861      	ldr	r1, [r4, #4]
 801aa32:	9300      	str	r3, [sp, #0]
 801aa34:	6022      	str	r2, [r4, #0]
 801aa36:	f10d 031b 	add.w	r3, sp, #27
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	f7ff fef6 	bl	801a82c <__cvt>
 801aa40:	9b04      	ldr	r3, [sp, #16]
 801aa42:	9907      	ldr	r1, [sp, #28]
 801aa44:	2b47      	cmp	r3, #71	; 0x47
 801aa46:	4680      	mov	r8, r0
 801aa48:	d108      	bne.n	801aa5c <_printf_float+0x10c>
 801aa4a:	1cc8      	adds	r0, r1, #3
 801aa4c:	db02      	blt.n	801aa54 <_printf_float+0x104>
 801aa4e:	6863      	ldr	r3, [r4, #4]
 801aa50:	4299      	cmp	r1, r3
 801aa52:	dd41      	ble.n	801aad8 <_printf_float+0x188>
 801aa54:	f1a9 0902 	sub.w	r9, r9, #2
 801aa58:	fa5f f989 	uxtb.w	r9, r9
 801aa5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aa60:	d820      	bhi.n	801aaa4 <_printf_float+0x154>
 801aa62:	3901      	subs	r1, #1
 801aa64:	464a      	mov	r2, r9
 801aa66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aa6a:	9107      	str	r1, [sp, #28]
 801aa6c:	f7ff ff30 	bl	801a8d0 <__exponent>
 801aa70:	9a08      	ldr	r2, [sp, #32]
 801aa72:	9004      	str	r0, [sp, #16]
 801aa74:	1813      	adds	r3, r2, r0
 801aa76:	2a01      	cmp	r2, #1
 801aa78:	6123      	str	r3, [r4, #16]
 801aa7a:	dc02      	bgt.n	801aa82 <_printf_float+0x132>
 801aa7c:	6822      	ldr	r2, [r4, #0]
 801aa7e:	07d2      	lsls	r2, r2, #31
 801aa80:	d501      	bpl.n	801aa86 <_printf_float+0x136>
 801aa82:	3301      	adds	r3, #1
 801aa84:	6123      	str	r3, [r4, #16]
 801aa86:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d0a2      	beq.n	801a9d4 <_printf_float+0x84>
 801aa8e:	232d      	movs	r3, #45	; 0x2d
 801aa90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa94:	e79e      	b.n	801a9d4 <_printf_float+0x84>
 801aa96:	9904      	ldr	r1, [sp, #16]
 801aa98:	2947      	cmp	r1, #71	; 0x47
 801aa9a:	d1c1      	bne.n	801aa20 <_printf_float+0xd0>
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d1bf      	bne.n	801aa20 <_printf_float+0xd0>
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	e7bc      	b.n	801aa1e <_printf_float+0xce>
 801aaa4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801aaa8:	d118      	bne.n	801aadc <_printf_float+0x18c>
 801aaaa:	2900      	cmp	r1, #0
 801aaac:	6863      	ldr	r3, [r4, #4]
 801aaae:	dd0b      	ble.n	801aac8 <_printf_float+0x178>
 801aab0:	6121      	str	r1, [r4, #16]
 801aab2:	b913      	cbnz	r3, 801aaba <_printf_float+0x16a>
 801aab4:	6822      	ldr	r2, [r4, #0]
 801aab6:	07d0      	lsls	r0, r2, #31
 801aab8:	d502      	bpl.n	801aac0 <_printf_float+0x170>
 801aaba:	3301      	adds	r3, #1
 801aabc:	440b      	add	r3, r1
 801aabe:	6123      	str	r3, [r4, #16]
 801aac0:	2300      	movs	r3, #0
 801aac2:	65a1      	str	r1, [r4, #88]	; 0x58
 801aac4:	9304      	str	r3, [sp, #16]
 801aac6:	e7de      	b.n	801aa86 <_printf_float+0x136>
 801aac8:	b913      	cbnz	r3, 801aad0 <_printf_float+0x180>
 801aaca:	6822      	ldr	r2, [r4, #0]
 801aacc:	07d2      	lsls	r2, r2, #31
 801aace:	d501      	bpl.n	801aad4 <_printf_float+0x184>
 801aad0:	3302      	adds	r3, #2
 801aad2:	e7f4      	b.n	801aabe <_printf_float+0x16e>
 801aad4:	2301      	movs	r3, #1
 801aad6:	e7f2      	b.n	801aabe <_printf_float+0x16e>
 801aad8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801aadc:	9b08      	ldr	r3, [sp, #32]
 801aade:	4299      	cmp	r1, r3
 801aae0:	db05      	blt.n	801aaee <_printf_float+0x19e>
 801aae2:	6823      	ldr	r3, [r4, #0]
 801aae4:	6121      	str	r1, [r4, #16]
 801aae6:	07d8      	lsls	r0, r3, #31
 801aae8:	d5ea      	bpl.n	801aac0 <_printf_float+0x170>
 801aaea:	1c4b      	adds	r3, r1, #1
 801aaec:	e7e7      	b.n	801aabe <_printf_float+0x16e>
 801aaee:	2900      	cmp	r1, #0
 801aaf0:	bfd4      	ite	le
 801aaf2:	f1c1 0202 	rsble	r2, r1, #2
 801aaf6:	2201      	movgt	r2, #1
 801aaf8:	4413      	add	r3, r2
 801aafa:	e7e0      	b.n	801aabe <_printf_float+0x16e>
 801aafc:	6823      	ldr	r3, [r4, #0]
 801aafe:	055a      	lsls	r2, r3, #21
 801ab00:	d407      	bmi.n	801ab12 <_printf_float+0x1c2>
 801ab02:	6923      	ldr	r3, [r4, #16]
 801ab04:	4642      	mov	r2, r8
 801ab06:	4631      	mov	r1, r6
 801ab08:	4628      	mov	r0, r5
 801ab0a:	47b8      	blx	r7
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	d12a      	bne.n	801ab66 <_printf_float+0x216>
 801ab10:	e76a      	b.n	801a9e8 <_printf_float+0x98>
 801ab12:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ab16:	f240 80e0 	bls.w	801acda <_printf_float+0x38a>
 801ab1a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ab1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab26:	d133      	bne.n	801ab90 <_printf_float+0x240>
 801ab28:	4a37      	ldr	r2, [pc, #220]	; (801ac08 <_printf_float+0x2b8>)
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	4631      	mov	r1, r6
 801ab2e:	4628      	mov	r0, r5
 801ab30:	47b8      	blx	r7
 801ab32:	3001      	adds	r0, #1
 801ab34:	f43f af58 	beq.w	801a9e8 <_printf_float+0x98>
 801ab38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	db02      	blt.n	801ab46 <_printf_float+0x1f6>
 801ab40:	6823      	ldr	r3, [r4, #0]
 801ab42:	07d8      	lsls	r0, r3, #31
 801ab44:	d50f      	bpl.n	801ab66 <_printf_float+0x216>
 801ab46:	4653      	mov	r3, sl
 801ab48:	465a      	mov	r2, fp
 801ab4a:	4631      	mov	r1, r6
 801ab4c:	4628      	mov	r0, r5
 801ab4e:	47b8      	blx	r7
 801ab50:	3001      	adds	r0, #1
 801ab52:	f43f af49 	beq.w	801a9e8 <_printf_float+0x98>
 801ab56:	f04f 0800 	mov.w	r8, #0
 801ab5a:	f104 091a 	add.w	r9, r4, #26
 801ab5e:	9b08      	ldr	r3, [sp, #32]
 801ab60:	3b01      	subs	r3, #1
 801ab62:	4543      	cmp	r3, r8
 801ab64:	dc09      	bgt.n	801ab7a <_printf_float+0x22a>
 801ab66:	6823      	ldr	r3, [r4, #0]
 801ab68:	079b      	lsls	r3, r3, #30
 801ab6a:	f100 8106 	bmi.w	801ad7a <_printf_float+0x42a>
 801ab6e:	68e0      	ldr	r0, [r4, #12]
 801ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab72:	4298      	cmp	r0, r3
 801ab74:	bfb8      	it	lt
 801ab76:	4618      	movlt	r0, r3
 801ab78:	e738      	b.n	801a9ec <_printf_float+0x9c>
 801ab7a:	2301      	movs	r3, #1
 801ab7c:	464a      	mov	r2, r9
 801ab7e:	4631      	mov	r1, r6
 801ab80:	4628      	mov	r0, r5
 801ab82:	47b8      	blx	r7
 801ab84:	3001      	adds	r0, #1
 801ab86:	f43f af2f 	beq.w	801a9e8 <_printf_float+0x98>
 801ab8a:	f108 0801 	add.w	r8, r8, #1
 801ab8e:	e7e6      	b.n	801ab5e <_printf_float+0x20e>
 801ab90:	9b07      	ldr	r3, [sp, #28]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	dc3a      	bgt.n	801ac0c <_printf_float+0x2bc>
 801ab96:	4a1c      	ldr	r2, [pc, #112]	; (801ac08 <_printf_float+0x2b8>)
 801ab98:	2301      	movs	r3, #1
 801ab9a:	4631      	mov	r1, r6
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	47b8      	blx	r7
 801aba0:	3001      	adds	r0, #1
 801aba2:	f43f af21 	beq.w	801a9e8 <_printf_float+0x98>
 801aba6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801abaa:	4313      	orrs	r3, r2
 801abac:	d102      	bne.n	801abb4 <_printf_float+0x264>
 801abae:	6823      	ldr	r3, [r4, #0]
 801abb0:	07d9      	lsls	r1, r3, #31
 801abb2:	d5d8      	bpl.n	801ab66 <_printf_float+0x216>
 801abb4:	4653      	mov	r3, sl
 801abb6:	465a      	mov	r2, fp
 801abb8:	4631      	mov	r1, r6
 801abba:	4628      	mov	r0, r5
 801abbc:	47b8      	blx	r7
 801abbe:	3001      	adds	r0, #1
 801abc0:	f43f af12 	beq.w	801a9e8 <_printf_float+0x98>
 801abc4:	f04f 0900 	mov.w	r9, #0
 801abc8:	f104 0a1a 	add.w	sl, r4, #26
 801abcc:	9b07      	ldr	r3, [sp, #28]
 801abce:	425b      	negs	r3, r3
 801abd0:	454b      	cmp	r3, r9
 801abd2:	dc01      	bgt.n	801abd8 <_printf_float+0x288>
 801abd4:	9b08      	ldr	r3, [sp, #32]
 801abd6:	e795      	b.n	801ab04 <_printf_float+0x1b4>
 801abd8:	2301      	movs	r3, #1
 801abda:	4652      	mov	r2, sl
 801abdc:	4631      	mov	r1, r6
 801abde:	4628      	mov	r0, r5
 801abe0:	47b8      	blx	r7
 801abe2:	3001      	adds	r0, #1
 801abe4:	f43f af00 	beq.w	801a9e8 <_printf_float+0x98>
 801abe8:	f109 0901 	add.w	r9, r9, #1
 801abec:	e7ee      	b.n	801abcc <_printf_float+0x27c>
 801abee:	bf00      	nop
 801abf0:	ffffffff 	.word	0xffffffff
 801abf4:	7fefffff 	.word	0x7fefffff
 801abf8:	08020ede 	.word	0x08020ede
 801abfc:	08020ee2 	.word	0x08020ee2
 801ac00:	08020ee6 	.word	0x08020ee6
 801ac04:	08020eea 	.word	0x08020eea
 801ac08:	08020eee 	.word	0x08020eee
 801ac0c:	9a08      	ldr	r2, [sp, #32]
 801ac0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac10:	429a      	cmp	r2, r3
 801ac12:	bfa8      	it	ge
 801ac14:	461a      	movge	r2, r3
 801ac16:	2a00      	cmp	r2, #0
 801ac18:	4691      	mov	r9, r2
 801ac1a:	dc38      	bgt.n	801ac8e <_printf_float+0x33e>
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	9305      	str	r3, [sp, #20]
 801ac20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac24:	f104 021a 	add.w	r2, r4, #26
 801ac28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac2a:	9905      	ldr	r1, [sp, #20]
 801ac2c:	9304      	str	r3, [sp, #16]
 801ac2e:	eba3 0309 	sub.w	r3, r3, r9
 801ac32:	428b      	cmp	r3, r1
 801ac34:	dc33      	bgt.n	801ac9e <_printf_float+0x34e>
 801ac36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac3a:	429a      	cmp	r2, r3
 801ac3c:	db3c      	blt.n	801acb8 <_printf_float+0x368>
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	07da      	lsls	r2, r3, #31
 801ac42:	d439      	bmi.n	801acb8 <_printf_float+0x368>
 801ac44:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ac48:	eba2 0903 	sub.w	r9, r2, r3
 801ac4c:	9b04      	ldr	r3, [sp, #16]
 801ac4e:	1ad2      	subs	r2, r2, r3
 801ac50:	4591      	cmp	r9, r2
 801ac52:	bfa8      	it	ge
 801ac54:	4691      	movge	r9, r2
 801ac56:	f1b9 0f00 	cmp.w	r9, #0
 801ac5a:	dc35      	bgt.n	801acc8 <_printf_float+0x378>
 801ac5c:	f04f 0800 	mov.w	r8, #0
 801ac60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac64:	f104 0a1a 	add.w	sl, r4, #26
 801ac68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac6c:	1a9b      	subs	r3, r3, r2
 801ac6e:	eba3 0309 	sub.w	r3, r3, r9
 801ac72:	4543      	cmp	r3, r8
 801ac74:	f77f af77 	ble.w	801ab66 <_printf_float+0x216>
 801ac78:	2301      	movs	r3, #1
 801ac7a:	4652      	mov	r2, sl
 801ac7c:	4631      	mov	r1, r6
 801ac7e:	4628      	mov	r0, r5
 801ac80:	47b8      	blx	r7
 801ac82:	3001      	adds	r0, #1
 801ac84:	f43f aeb0 	beq.w	801a9e8 <_printf_float+0x98>
 801ac88:	f108 0801 	add.w	r8, r8, #1
 801ac8c:	e7ec      	b.n	801ac68 <_printf_float+0x318>
 801ac8e:	4613      	mov	r3, r2
 801ac90:	4631      	mov	r1, r6
 801ac92:	4642      	mov	r2, r8
 801ac94:	4628      	mov	r0, r5
 801ac96:	47b8      	blx	r7
 801ac98:	3001      	adds	r0, #1
 801ac9a:	d1bf      	bne.n	801ac1c <_printf_float+0x2cc>
 801ac9c:	e6a4      	b.n	801a9e8 <_printf_float+0x98>
 801ac9e:	2301      	movs	r3, #1
 801aca0:	4631      	mov	r1, r6
 801aca2:	4628      	mov	r0, r5
 801aca4:	9204      	str	r2, [sp, #16]
 801aca6:	47b8      	blx	r7
 801aca8:	3001      	adds	r0, #1
 801acaa:	f43f ae9d 	beq.w	801a9e8 <_printf_float+0x98>
 801acae:	9b05      	ldr	r3, [sp, #20]
 801acb0:	9a04      	ldr	r2, [sp, #16]
 801acb2:	3301      	adds	r3, #1
 801acb4:	9305      	str	r3, [sp, #20]
 801acb6:	e7b7      	b.n	801ac28 <_printf_float+0x2d8>
 801acb8:	4653      	mov	r3, sl
 801acba:	465a      	mov	r2, fp
 801acbc:	4631      	mov	r1, r6
 801acbe:	4628      	mov	r0, r5
 801acc0:	47b8      	blx	r7
 801acc2:	3001      	adds	r0, #1
 801acc4:	d1be      	bne.n	801ac44 <_printf_float+0x2f4>
 801acc6:	e68f      	b.n	801a9e8 <_printf_float+0x98>
 801acc8:	9a04      	ldr	r2, [sp, #16]
 801acca:	464b      	mov	r3, r9
 801accc:	4442      	add	r2, r8
 801acce:	4631      	mov	r1, r6
 801acd0:	4628      	mov	r0, r5
 801acd2:	47b8      	blx	r7
 801acd4:	3001      	adds	r0, #1
 801acd6:	d1c1      	bne.n	801ac5c <_printf_float+0x30c>
 801acd8:	e686      	b.n	801a9e8 <_printf_float+0x98>
 801acda:	9a08      	ldr	r2, [sp, #32]
 801acdc:	2a01      	cmp	r2, #1
 801acde:	dc01      	bgt.n	801ace4 <_printf_float+0x394>
 801ace0:	07db      	lsls	r3, r3, #31
 801ace2:	d537      	bpl.n	801ad54 <_printf_float+0x404>
 801ace4:	2301      	movs	r3, #1
 801ace6:	4642      	mov	r2, r8
 801ace8:	4631      	mov	r1, r6
 801acea:	4628      	mov	r0, r5
 801acec:	47b8      	blx	r7
 801acee:	3001      	adds	r0, #1
 801acf0:	f43f ae7a 	beq.w	801a9e8 <_printf_float+0x98>
 801acf4:	4653      	mov	r3, sl
 801acf6:	465a      	mov	r2, fp
 801acf8:	4631      	mov	r1, r6
 801acfa:	4628      	mov	r0, r5
 801acfc:	47b8      	blx	r7
 801acfe:	3001      	adds	r0, #1
 801ad00:	f43f ae72 	beq.w	801a9e8 <_printf_float+0x98>
 801ad04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ad08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad10:	9b08      	ldr	r3, [sp, #32]
 801ad12:	d01a      	beq.n	801ad4a <_printf_float+0x3fa>
 801ad14:	3b01      	subs	r3, #1
 801ad16:	f108 0201 	add.w	r2, r8, #1
 801ad1a:	4631      	mov	r1, r6
 801ad1c:	4628      	mov	r0, r5
 801ad1e:	47b8      	blx	r7
 801ad20:	3001      	adds	r0, #1
 801ad22:	d10e      	bne.n	801ad42 <_printf_float+0x3f2>
 801ad24:	e660      	b.n	801a9e8 <_printf_float+0x98>
 801ad26:	2301      	movs	r3, #1
 801ad28:	464a      	mov	r2, r9
 801ad2a:	4631      	mov	r1, r6
 801ad2c:	4628      	mov	r0, r5
 801ad2e:	47b8      	blx	r7
 801ad30:	3001      	adds	r0, #1
 801ad32:	f43f ae59 	beq.w	801a9e8 <_printf_float+0x98>
 801ad36:	f108 0801 	add.w	r8, r8, #1
 801ad3a:	9b08      	ldr	r3, [sp, #32]
 801ad3c:	3b01      	subs	r3, #1
 801ad3e:	4543      	cmp	r3, r8
 801ad40:	dcf1      	bgt.n	801ad26 <_printf_float+0x3d6>
 801ad42:	9b04      	ldr	r3, [sp, #16]
 801ad44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad48:	e6dd      	b.n	801ab06 <_printf_float+0x1b6>
 801ad4a:	f04f 0800 	mov.w	r8, #0
 801ad4e:	f104 091a 	add.w	r9, r4, #26
 801ad52:	e7f2      	b.n	801ad3a <_printf_float+0x3ea>
 801ad54:	2301      	movs	r3, #1
 801ad56:	4642      	mov	r2, r8
 801ad58:	e7df      	b.n	801ad1a <_printf_float+0x3ca>
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	464a      	mov	r2, r9
 801ad5e:	4631      	mov	r1, r6
 801ad60:	4628      	mov	r0, r5
 801ad62:	47b8      	blx	r7
 801ad64:	3001      	adds	r0, #1
 801ad66:	f43f ae3f 	beq.w	801a9e8 <_printf_float+0x98>
 801ad6a:	f108 0801 	add.w	r8, r8, #1
 801ad6e:	68e3      	ldr	r3, [r4, #12]
 801ad70:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad72:	1a5b      	subs	r3, r3, r1
 801ad74:	4543      	cmp	r3, r8
 801ad76:	dcf0      	bgt.n	801ad5a <_printf_float+0x40a>
 801ad78:	e6f9      	b.n	801ab6e <_printf_float+0x21e>
 801ad7a:	f04f 0800 	mov.w	r8, #0
 801ad7e:	f104 0919 	add.w	r9, r4, #25
 801ad82:	e7f4      	b.n	801ad6e <_printf_float+0x41e>

0801ad84 <_printf_common>:
 801ad84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad88:	4616      	mov	r6, r2
 801ad8a:	4699      	mov	r9, r3
 801ad8c:	688a      	ldr	r2, [r1, #8]
 801ad8e:	690b      	ldr	r3, [r1, #16]
 801ad90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad94:	4293      	cmp	r3, r2
 801ad96:	bfb8      	it	lt
 801ad98:	4613      	movlt	r3, r2
 801ad9a:	6033      	str	r3, [r6, #0]
 801ad9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ada0:	4607      	mov	r7, r0
 801ada2:	460c      	mov	r4, r1
 801ada4:	b10a      	cbz	r2, 801adaa <_printf_common+0x26>
 801ada6:	3301      	adds	r3, #1
 801ada8:	6033      	str	r3, [r6, #0]
 801adaa:	6823      	ldr	r3, [r4, #0]
 801adac:	0699      	lsls	r1, r3, #26
 801adae:	bf42      	ittt	mi
 801adb0:	6833      	ldrmi	r3, [r6, #0]
 801adb2:	3302      	addmi	r3, #2
 801adb4:	6033      	strmi	r3, [r6, #0]
 801adb6:	6825      	ldr	r5, [r4, #0]
 801adb8:	f015 0506 	ands.w	r5, r5, #6
 801adbc:	d106      	bne.n	801adcc <_printf_common+0x48>
 801adbe:	f104 0a19 	add.w	sl, r4, #25
 801adc2:	68e3      	ldr	r3, [r4, #12]
 801adc4:	6832      	ldr	r2, [r6, #0]
 801adc6:	1a9b      	subs	r3, r3, r2
 801adc8:	42ab      	cmp	r3, r5
 801adca:	dc26      	bgt.n	801ae1a <_printf_common+0x96>
 801adcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801add0:	1e13      	subs	r3, r2, #0
 801add2:	6822      	ldr	r2, [r4, #0]
 801add4:	bf18      	it	ne
 801add6:	2301      	movne	r3, #1
 801add8:	0692      	lsls	r2, r2, #26
 801adda:	d42b      	bmi.n	801ae34 <_printf_common+0xb0>
 801addc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ade0:	4649      	mov	r1, r9
 801ade2:	4638      	mov	r0, r7
 801ade4:	47c0      	blx	r8
 801ade6:	3001      	adds	r0, #1
 801ade8:	d01e      	beq.n	801ae28 <_printf_common+0xa4>
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	6922      	ldr	r2, [r4, #16]
 801adee:	f003 0306 	and.w	r3, r3, #6
 801adf2:	2b04      	cmp	r3, #4
 801adf4:	bf02      	ittt	eq
 801adf6:	68e5      	ldreq	r5, [r4, #12]
 801adf8:	6833      	ldreq	r3, [r6, #0]
 801adfa:	1aed      	subeq	r5, r5, r3
 801adfc:	68a3      	ldr	r3, [r4, #8]
 801adfe:	bf0c      	ite	eq
 801ae00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae04:	2500      	movne	r5, #0
 801ae06:	4293      	cmp	r3, r2
 801ae08:	bfc4      	itt	gt
 801ae0a:	1a9b      	subgt	r3, r3, r2
 801ae0c:	18ed      	addgt	r5, r5, r3
 801ae0e:	2600      	movs	r6, #0
 801ae10:	341a      	adds	r4, #26
 801ae12:	42b5      	cmp	r5, r6
 801ae14:	d11a      	bne.n	801ae4c <_printf_common+0xc8>
 801ae16:	2000      	movs	r0, #0
 801ae18:	e008      	b.n	801ae2c <_printf_common+0xa8>
 801ae1a:	2301      	movs	r3, #1
 801ae1c:	4652      	mov	r2, sl
 801ae1e:	4649      	mov	r1, r9
 801ae20:	4638      	mov	r0, r7
 801ae22:	47c0      	blx	r8
 801ae24:	3001      	adds	r0, #1
 801ae26:	d103      	bne.n	801ae30 <_printf_common+0xac>
 801ae28:	f04f 30ff 	mov.w	r0, #4294967295
 801ae2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae30:	3501      	adds	r5, #1
 801ae32:	e7c6      	b.n	801adc2 <_printf_common+0x3e>
 801ae34:	18e1      	adds	r1, r4, r3
 801ae36:	1c5a      	adds	r2, r3, #1
 801ae38:	2030      	movs	r0, #48	; 0x30
 801ae3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae3e:	4422      	add	r2, r4
 801ae40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae48:	3302      	adds	r3, #2
 801ae4a:	e7c7      	b.n	801addc <_printf_common+0x58>
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	4622      	mov	r2, r4
 801ae50:	4649      	mov	r1, r9
 801ae52:	4638      	mov	r0, r7
 801ae54:	47c0      	blx	r8
 801ae56:	3001      	adds	r0, #1
 801ae58:	d0e6      	beq.n	801ae28 <_printf_common+0xa4>
 801ae5a:	3601      	adds	r6, #1
 801ae5c:	e7d9      	b.n	801ae12 <_printf_common+0x8e>
	...

0801ae60 <_printf_i>:
 801ae60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae64:	7e0f      	ldrb	r7, [r1, #24]
 801ae66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ae68:	2f78      	cmp	r7, #120	; 0x78
 801ae6a:	4691      	mov	r9, r2
 801ae6c:	4680      	mov	r8, r0
 801ae6e:	460c      	mov	r4, r1
 801ae70:	469a      	mov	sl, r3
 801ae72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ae76:	d807      	bhi.n	801ae88 <_printf_i+0x28>
 801ae78:	2f62      	cmp	r7, #98	; 0x62
 801ae7a:	d80a      	bhi.n	801ae92 <_printf_i+0x32>
 801ae7c:	2f00      	cmp	r7, #0
 801ae7e:	f000 80d4 	beq.w	801b02a <_printf_i+0x1ca>
 801ae82:	2f58      	cmp	r7, #88	; 0x58
 801ae84:	f000 80c0 	beq.w	801b008 <_printf_i+0x1a8>
 801ae88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae90:	e03a      	b.n	801af08 <_printf_i+0xa8>
 801ae92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae96:	2b15      	cmp	r3, #21
 801ae98:	d8f6      	bhi.n	801ae88 <_printf_i+0x28>
 801ae9a:	a101      	add	r1, pc, #4	; (adr r1, 801aea0 <_printf_i+0x40>)
 801ae9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aea0:	0801aef9 	.word	0x0801aef9
 801aea4:	0801af0d 	.word	0x0801af0d
 801aea8:	0801ae89 	.word	0x0801ae89
 801aeac:	0801ae89 	.word	0x0801ae89
 801aeb0:	0801ae89 	.word	0x0801ae89
 801aeb4:	0801ae89 	.word	0x0801ae89
 801aeb8:	0801af0d 	.word	0x0801af0d
 801aebc:	0801ae89 	.word	0x0801ae89
 801aec0:	0801ae89 	.word	0x0801ae89
 801aec4:	0801ae89 	.word	0x0801ae89
 801aec8:	0801ae89 	.word	0x0801ae89
 801aecc:	0801b011 	.word	0x0801b011
 801aed0:	0801af39 	.word	0x0801af39
 801aed4:	0801afcb 	.word	0x0801afcb
 801aed8:	0801ae89 	.word	0x0801ae89
 801aedc:	0801ae89 	.word	0x0801ae89
 801aee0:	0801b033 	.word	0x0801b033
 801aee4:	0801ae89 	.word	0x0801ae89
 801aee8:	0801af39 	.word	0x0801af39
 801aeec:	0801ae89 	.word	0x0801ae89
 801aef0:	0801ae89 	.word	0x0801ae89
 801aef4:	0801afd3 	.word	0x0801afd3
 801aef8:	682b      	ldr	r3, [r5, #0]
 801aefa:	1d1a      	adds	r2, r3, #4
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	602a      	str	r2, [r5, #0]
 801af00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af08:	2301      	movs	r3, #1
 801af0a:	e09f      	b.n	801b04c <_printf_i+0x1ec>
 801af0c:	6820      	ldr	r0, [r4, #0]
 801af0e:	682b      	ldr	r3, [r5, #0]
 801af10:	0607      	lsls	r7, r0, #24
 801af12:	f103 0104 	add.w	r1, r3, #4
 801af16:	6029      	str	r1, [r5, #0]
 801af18:	d501      	bpl.n	801af1e <_printf_i+0xbe>
 801af1a:	681e      	ldr	r6, [r3, #0]
 801af1c:	e003      	b.n	801af26 <_printf_i+0xc6>
 801af1e:	0646      	lsls	r6, r0, #25
 801af20:	d5fb      	bpl.n	801af1a <_printf_i+0xba>
 801af22:	f9b3 6000 	ldrsh.w	r6, [r3]
 801af26:	2e00      	cmp	r6, #0
 801af28:	da03      	bge.n	801af32 <_printf_i+0xd2>
 801af2a:	232d      	movs	r3, #45	; 0x2d
 801af2c:	4276      	negs	r6, r6
 801af2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af32:	485a      	ldr	r0, [pc, #360]	; (801b09c <_printf_i+0x23c>)
 801af34:	230a      	movs	r3, #10
 801af36:	e012      	b.n	801af5e <_printf_i+0xfe>
 801af38:	682b      	ldr	r3, [r5, #0]
 801af3a:	6820      	ldr	r0, [r4, #0]
 801af3c:	1d19      	adds	r1, r3, #4
 801af3e:	6029      	str	r1, [r5, #0]
 801af40:	0605      	lsls	r5, r0, #24
 801af42:	d501      	bpl.n	801af48 <_printf_i+0xe8>
 801af44:	681e      	ldr	r6, [r3, #0]
 801af46:	e002      	b.n	801af4e <_printf_i+0xee>
 801af48:	0641      	lsls	r1, r0, #25
 801af4a:	d5fb      	bpl.n	801af44 <_printf_i+0xe4>
 801af4c:	881e      	ldrh	r6, [r3, #0]
 801af4e:	4853      	ldr	r0, [pc, #332]	; (801b09c <_printf_i+0x23c>)
 801af50:	2f6f      	cmp	r7, #111	; 0x6f
 801af52:	bf0c      	ite	eq
 801af54:	2308      	moveq	r3, #8
 801af56:	230a      	movne	r3, #10
 801af58:	2100      	movs	r1, #0
 801af5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af5e:	6865      	ldr	r5, [r4, #4]
 801af60:	60a5      	str	r5, [r4, #8]
 801af62:	2d00      	cmp	r5, #0
 801af64:	bfa2      	ittt	ge
 801af66:	6821      	ldrge	r1, [r4, #0]
 801af68:	f021 0104 	bicge.w	r1, r1, #4
 801af6c:	6021      	strge	r1, [r4, #0]
 801af6e:	b90e      	cbnz	r6, 801af74 <_printf_i+0x114>
 801af70:	2d00      	cmp	r5, #0
 801af72:	d04b      	beq.n	801b00c <_printf_i+0x1ac>
 801af74:	4615      	mov	r5, r2
 801af76:	fbb6 f1f3 	udiv	r1, r6, r3
 801af7a:	fb03 6711 	mls	r7, r3, r1, r6
 801af7e:	5dc7      	ldrb	r7, [r0, r7]
 801af80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801af84:	4637      	mov	r7, r6
 801af86:	42bb      	cmp	r3, r7
 801af88:	460e      	mov	r6, r1
 801af8a:	d9f4      	bls.n	801af76 <_printf_i+0x116>
 801af8c:	2b08      	cmp	r3, #8
 801af8e:	d10b      	bne.n	801afa8 <_printf_i+0x148>
 801af90:	6823      	ldr	r3, [r4, #0]
 801af92:	07de      	lsls	r6, r3, #31
 801af94:	d508      	bpl.n	801afa8 <_printf_i+0x148>
 801af96:	6923      	ldr	r3, [r4, #16]
 801af98:	6861      	ldr	r1, [r4, #4]
 801af9a:	4299      	cmp	r1, r3
 801af9c:	bfde      	ittt	le
 801af9e:	2330      	movle	r3, #48	; 0x30
 801afa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801afa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801afa8:	1b52      	subs	r2, r2, r5
 801afaa:	6122      	str	r2, [r4, #16]
 801afac:	f8cd a000 	str.w	sl, [sp]
 801afb0:	464b      	mov	r3, r9
 801afb2:	aa03      	add	r2, sp, #12
 801afb4:	4621      	mov	r1, r4
 801afb6:	4640      	mov	r0, r8
 801afb8:	f7ff fee4 	bl	801ad84 <_printf_common>
 801afbc:	3001      	adds	r0, #1
 801afbe:	d14a      	bne.n	801b056 <_printf_i+0x1f6>
 801afc0:	f04f 30ff 	mov.w	r0, #4294967295
 801afc4:	b004      	add	sp, #16
 801afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afca:	6823      	ldr	r3, [r4, #0]
 801afcc:	f043 0320 	orr.w	r3, r3, #32
 801afd0:	6023      	str	r3, [r4, #0]
 801afd2:	4833      	ldr	r0, [pc, #204]	; (801b0a0 <_printf_i+0x240>)
 801afd4:	2778      	movs	r7, #120	; 0x78
 801afd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801afda:	6823      	ldr	r3, [r4, #0]
 801afdc:	6829      	ldr	r1, [r5, #0]
 801afde:	061f      	lsls	r7, r3, #24
 801afe0:	f851 6b04 	ldr.w	r6, [r1], #4
 801afe4:	d402      	bmi.n	801afec <_printf_i+0x18c>
 801afe6:	065f      	lsls	r7, r3, #25
 801afe8:	bf48      	it	mi
 801afea:	b2b6      	uxthmi	r6, r6
 801afec:	07df      	lsls	r7, r3, #31
 801afee:	bf48      	it	mi
 801aff0:	f043 0320 	orrmi.w	r3, r3, #32
 801aff4:	6029      	str	r1, [r5, #0]
 801aff6:	bf48      	it	mi
 801aff8:	6023      	strmi	r3, [r4, #0]
 801affa:	b91e      	cbnz	r6, 801b004 <_printf_i+0x1a4>
 801affc:	6823      	ldr	r3, [r4, #0]
 801affe:	f023 0320 	bic.w	r3, r3, #32
 801b002:	6023      	str	r3, [r4, #0]
 801b004:	2310      	movs	r3, #16
 801b006:	e7a7      	b.n	801af58 <_printf_i+0xf8>
 801b008:	4824      	ldr	r0, [pc, #144]	; (801b09c <_printf_i+0x23c>)
 801b00a:	e7e4      	b.n	801afd6 <_printf_i+0x176>
 801b00c:	4615      	mov	r5, r2
 801b00e:	e7bd      	b.n	801af8c <_printf_i+0x12c>
 801b010:	682b      	ldr	r3, [r5, #0]
 801b012:	6826      	ldr	r6, [r4, #0]
 801b014:	6961      	ldr	r1, [r4, #20]
 801b016:	1d18      	adds	r0, r3, #4
 801b018:	6028      	str	r0, [r5, #0]
 801b01a:	0635      	lsls	r5, r6, #24
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	d501      	bpl.n	801b024 <_printf_i+0x1c4>
 801b020:	6019      	str	r1, [r3, #0]
 801b022:	e002      	b.n	801b02a <_printf_i+0x1ca>
 801b024:	0670      	lsls	r0, r6, #25
 801b026:	d5fb      	bpl.n	801b020 <_printf_i+0x1c0>
 801b028:	8019      	strh	r1, [r3, #0]
 801b02a:	2300      	movs	r3, #0
 801b02c:	6123      	str	r3, [r4, #16]
 801b02e:	4615      	mov	r5, r2
 801b030:	e7bc      	b.n	801afac <_printf_i+0x14c>
 801b032:	682b      	ldr	r3, [r5, #0]
 801b034:	1d1a      	adds	r2, r3, #4
 801b036:	602a      	str	r2, [r5, #0]
 801b038:	681d      	ldr	r5, [r3, #0]
 801b03a:	6862      	ldr	r2, [r4, #4]
 801b03c:	2100      	movs	r1, #0
 801b03e:	4628      	mov	r0, r5
 801b040:	f7e6 ffd6 	bl	8001ff0 <memchr>
 801b044:	b108      	cbz	r0, 801b04a <_printf_i+0x1ea>
 801b046:	1b40      	subs	r0, r0, r5
 801b048:	6060      	str	r0, [r4, #4]
 801b04a:	6863      	ldr	r3, [r4, #4]
 801b04c:	6123      	str	r3, [r4, #16]
 801b04e:	2300      	movs	r3, #0
 801b050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b054:	e7aa      	b.n	801afac <_printf_i+0x14c>
 801b056:	6923      	ldr	r3, [r4, #16]
 801b058:	462a      	mov	r2, r5
 801b05a:	4649      	mov	r1, r9
 801b05c:	4640      	mov	r0, r8
 801b05e:	47d0      	blx	sl
 801b060:	3001      	adds	r0, #1
 801b062:	d0ad      	beq.n	801afc0 <_printf_i+0x160>
 801b064:	6823      	ldr	r3, [r4, #0]
 801b066:	079b      	lsls	r3, r3, #30
 801b068:	d413      	bmi.n	801b092 <_printf_i+0x232>
 801b06a:	68e0      	ldr	r0, [r4, #12]
 801b06c:	9b03      	ldr	r3, [sp, #12]
 801b06e:	4298      	cmp	r0, r3
 801b070:	bfb8      	it	lt
 801b072:	4618      	movlt	r0, r3
 801b074:	e7a6      	b.n	801afc4 <_printf_i+0x164>
 801b076:	2301      	movs	r3, #1
 801b078:	4632      	mov	r2, r6
 801b07a:	4649      	mov	r1, r9
 801b07c:	4640      	mov	r0, r8
 801b07e:	47d0      	blx	sl
 801b080:	3001      	adds	r0, #1
 801b082:	d09d      	beq.n	801afc0 <_printf_i+0x160>
 801b084:	3501      	adds	r5, #1
 801b086:	68e3      	ldr	r3, [r4, #12]
 801b088:	9903      	ldr	r1, [sp, #12]
 801b08a:	1a5b      	subs	r3, r3, r1
 801b08c:	42ab      	cmp	r3, r5
 801b08e:	dcf2      	bgt.n	801b076 <_printf_i+0x216>
 801b090:	e7eb      	b.n	801b06a <_printf_i+0x20a>
 801b092:	2500      	movs	r5, #0
 801b094:	f104 0619 	add.w	r6, r4, #25
 801b098:	e7f5      	b.n	801b086 <_printf_i+0x226>
 801b09a:	bf00      	nop
 801b09c:	08020ef0 	.word	0x08020ef0
 801b0a0:	08020f01 	.word	0x08020f01

0801b0a4 <std>:
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	b510      	push	{r4, lr}
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	e9c0 3300 	strd	r3, r3, [r0]
 801b0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0b2:	6083      	str	r3, [r0, #8]
 801b0b4:	8181      	strh	r1, [r0, #12]
 801b0b6:	6643      	str	r3, [r0, #100]	; 0x64
 801b0b8:	81c2      	strh	r2, [r0, #14]
 801b0ba:	6183      	str	r3, [r0, #24]
 801b0bc:	4619      	mov	r1, r3
 801b0be:	2208      	movs	r2, #8
 801b0c0:	305c      	adds	r0, #92	; 0x5c
 801b0c2:	f000 fa41 	bl	801b548 <memset>
 801b0c6:	4b0d      	ldr	r3, [pc, #52]	; (801b0fc <std+0x58>)
 801b0c8:	6263      	str	r3, [r4, #36]	; 0x24
 801b0ca:	4b0d      	ldr	r3, [pc, #52]	; (801b100 <std+0x5c>)
 801b0cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801b0ce:	4b0d      	ldr	r3, [pc, #52]	; (801b104 <std+0x60>)
 801b0d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b0d2:	4b0d      	ldr	r3, [pc, #52]	; (801b108 <std+0x64>)
 801b0d4:	6323      	str	r3, [r4, #48]	; 0x30
 801b0d6:	4b0d      	ldr	r3, [pc, #52]	; (801b10c <std+0x68>)
 801b0d8:	6224      	str	r4, [r4, #32]
 801b0da:	429c      	cmp	r4, r3
 801b0dc:	d006      	beq.n	801b0ec <std+0x48>
 801b0de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b0e2:	4294      	cmp	r4, r2
 801b0e4:	d002      	beq.n	801b0ec <std+0x48>
 801b0e6:	33d0      	adds	r3, #208	; 0xd0
 801b0e8:	429c      	cmp	r4, r3
 801b0ea:	d105      	bne.n	801b0f8 <std+0x54>
 801b0ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0f4:	f000 ba9e 	b.w	801b634 <__retarget_lock_init_recursive>
 801b0f8:	bd10      	pop	{r4, pc}
 801b0fa:	bf00      	nop
 801b0fc:	0801b345 	.word	0x0801b345
 801b100:	0801b367 	.word	0x0801b367
 801b104:	0801b39f 	.word	0x0801b39f
 801b108:	0801b3c3 	.word	0x0801b3c3
 801b10c:	200071b8 	.word	0x200071b8

0801b110 <stdio_exit_handler>:
 801b110:	4a02      	ldr	r2, [pc, #8]	; (801b11c <stdio_exit_handler+0xc>)
 801b112:	4903      	ldr	r1, [pc, #12]	; (801b120 <stdio_exit_handler+0x10>)
 801b114:	4803      	ldr	r0, [pc, #12]	; (801b124 <stdio_exit_handler+0x14>)
 801b116:	f000 b869 	b.w	801b1ec <_fwalk_sglue>
 801b11a:	bf00      	nop
 801b11c:	20000060 	.word	0x20000060
 801b120:	0801d1bd 	.word	0x0801d1bd
 801b124:	2000006c 	.word	0x2000006c

0801b128 <cleanup_stdio>:
 801b128:	6841      	ldr	r1, [r0, #4]
 801b12a:	4b0c      	ldr	r3, [pc, #48]	; (801b15c <cleanup_stdio+0x34>)
 801b12c:	4299      	cmp	r1, r3
 801b12e:	b510      	push	{r4, lr}
 801b130:	4604      	mov	r4, r0
 801b132:	d001      	beq.n	801b138 <cleanup_stdio+0x10>
 801b134:	f002 f842 	bl	801d1bc <_fflush_r>
 801b138:	68a1      	ldr	r1, [r4, #8]
 801b13a:	4b09      	ldr	r3, [pc, #36]	; (801b160 <cleanup_stdio+0x38>)
 801b13c:	4299      	cmp	r1, r3
 801b13e:	d002      	beq.n	801b146 <cleanup_stdio+0x1e>
 801b140:	4620      	mov	r0, r4
 801b142:	f002 f83b 	bl	801d1bc <_fflush_r>
 801b146:	68e1      	ldr	r1, [r4, #12]
 801b148:	4b06      	ldr	r3, [pc, #24]	; (801b164 <cleanup_stdio+0x3c>)
 801b14a:	4299      	cmp	r1, r3
 801b14c:	d004      	beq.n	801b158 <cleanup_stdio+0x30>
 801b14e:	4620      	mov	r0, r4
 801b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b154:	f002 b832 	b.w	801d1bc <_fflush_r>
 801b158:	bd10      	pop	{r4, pc}
 801b15a:	bf00      	nop
 801b15c:	200071b8 	.word	0x200071b8
 801b160:	20007220 	.word	0x20007220
 801b164:	20007288 	.word	0x20007288

0801b168 <global_stdio_init.part.0>:
 801b168:	b510      	push	{r4, lr}
 801b16a:	4b0b      	ldr	r3, [pc, #44]	; (801b198 <global_stdio_init.part.0+0x30>)
 801b16c:	4c0b      	ldr	r4, [pc, #44]	; (801b19c <global_stdio_init.part.0+0x34>)
 801b16e:	4a0c      	ldr	r2, [pc, #48]	; (801b1a0 <global_stdio_init.part.0+0x38>)
 801b170:	601a      	str	r2, [r3, #0]
 801b172:	4620      	mov	r0, r4
 801b174:	2200      	movs	r2, #0
 801b176:	2104      	movs	r1, #4
 801b178:	f7ff ff94 	bl	801b0a4 <std>
 801b17c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b180:	2201      	movs	r2, #1
 801b182:	2109      	movs	r1, #9
 801b184:	f7ff ff8e 	bl	801b0a4 <std>
 801b188:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b18c:	2202      	movs	r2, #2
 801b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b192:	2112      	movs	r1, #18
 801b194:	f7ff bf86 	b.w	801b0a4 <std>
 801b198:	200072f0 	.word	0x200072f0
 801b19c:	200071b8 	.word	0x200071b8
 801b1a0:	0801b111 	.word	0x0801b111

0801b1a4 <__sfp_lock_acquire>:
 801b1a4:	4801      	ldr	r0, [pc, #4]	; (801b1ac <__sfp_lock_acquire+0x8>)
 801b1a6:	f000 ba46 	b.w	801b636 <__retarget_lock_acquire_recursive>
 801b1aa:	bf00      	nop
 801b1ac:	200072f9 	.word	0x200072f9

0801b1b0 <__sfp_lock_release>:
 801b1b0:	4801      	ldr	r0, [pc, #4]	; (801b1b8 <__sfp_lock_release+0x8>)
 801b1b2:	f000 ba41 	b.w	801b638 <__retarget_lock_release_recursive>
 801b1b6:	bf00      	nop
 801b1b8:	200072f9 	.word	0x200072f9

0801b1bc <__sinit>:
 801b1bc:	b510      	push	{r4, lr}
 801b1be:	4604      	mov	r4, r0
 801b1c0:	f7ff fff0 	bl	801b1a4 <__sfp_lock_acquire>
 801b1c4:	6a23      	ldr	r3, [r4, #32]
 801b1c6:	b11b      	cbz	r3, 801b1d0 <__sinit+0x14>
 801b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1cc:	f7ff bff0 	b.w	801b1b0 <__sfp_lock_release>
 801b1d0:	4b04      	ldr	r3, [pc, #16]	; (801b1e4 <__sinit+0x28>)
 801b1d2:	6223      	str	r3, [r4, #32]
 801b1d4:	4b04      	ldr	r3, [pc, #16]	; (801b1e8 <__sinit+0x2c>)
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d1f5      	bne.n	801b1c8 <__sinit+0xc>
 801b1dc:	f7ff ffc4 	bl	801b168 <global_stdio_init.part.0>
 801b1e0:	e7f2      	b.n	801b1c8 <__sinit+0xc>
 801b1e2:	bf00      	nop
 801b1e4:	0801b129 	.word	0x0801b129
 801b1e8:	200072f0 	.word	0x200072f0

0801b1ec <_fwalk_sglue>:
 801b1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1f0:	4607      	mov	r7, r0
 801b1f2:	4688      	mov	r8, r1
 801b1f4:	4614      	mov	r4, r2
 801b1f6:	2600      	movs	r6, #0
 801b1f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1fc:	f1b9 0901 	subs.w	r9, r9, #1
 801b200:	d505      	bpl.n	801b20e <_fwalk_sglue+0x22>
 801b202:	6824      	ldr	r4, [r4, #0]
 801b204:	2c00      	cmp	r4, #0
 801b206:	d1f7      	bne.n	801b1f8 <_fwalk_sglue+0xc>
 801b208:	4630      	mov	r0, r6
 801b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b20e:	89ab      	ldrh	r3, [r5, #12]
 801b210:	2b01      	cmp	r3, #1
 801b212:	d907      	bls.n	801b224 <_fwalk_sglue+0x38>
 801b214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b218:	3301      	adds	r3, #1
 801b21a:	d003      	beq.n	801b224 <_fwalk_sglue+0x38>
 801b21c:	4629      	mov	r1, r5
 801b21e:	4638      	mov	r0, r7
 801b220:	47c0      	blx	r8
 801b222:	4306      	orrs	r6, r0
 801b224:	3568      	adds	r5, #104	; 0x68
 801b226:	e7e9      	b.n	801b1fc <_fwalk_sglue+0x10>

0801b228 <iprintf>:
 801b228:	b40f      	push	{r0, r1, r2, r3}
 801b22a:	b507      	push	{r0, r1, r2, lr}
 801b22c:	4906      	ldr	r1, [pc, #24]	; (801b248 <iprintf+0x20>)
 801b22e:	ab04      	add	r3, sp, #16
 801b230:	6808      	ldr	r0, [r1, #0]
 801b232:	f853 2b04 	ldr.w	r2, [r3], #4
 801b236:	6881      	ldr	r1, [r0, #8]
 801b238:	9301      	str	r3, [sp, #4]
 801b23a:	f001 fe1f 	bl	801ce7c <_vfiprintf_r>
 801b23e:	b003      	add	sp, #12
 801b240:	f85d eb04 	ldr.w	lr, [sp], #4
 801b244:	b004      	add	sp, #16
 801b246:	4770      	bx	lr
 801b248:	200000b8 	.word	0x200000b8

0801b24c <_puts_r>:
 801b24c:	6a03      	ldr	r3, [r0, #32]
 801b24e:	b570      	push	{r4, r5, r6, lr}
 801b250:	6884      	ldr	r4, [r0, #8]
 801b252:	4605      	mov	r5, r0
 801b254:	460e      	mov	r6, r1
 801b256:	b90b      	cbnz	r3, 801b25c <_puts_r+0x10>
 801b258:	f7ff ffb0 	bl	801b1bc <__sinit>
 801b25c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b25e:	07db      	lsls	r3, r3, #31
 801b260:	d405      	bmi.n	801b26e <_puts_r+0x22>
 801b262:	89a3      	ldrh	r3, [r4, #12]
 801b264:	0598      	lsls	r0, r3, #22
 801b266:	d402      	bmi.n	801b26e <_puts_r+0x22>
 801b268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b26a:	f000 f9e4 	bl	801b636 <__retarget_lock_acquire_recursive>
 801b26e:	89a3      	ldrh	r3, [r4, #12]
 801b270:	0719      	lsls	r1, r3, #28
 801b272:	d513      	bpl.n	801b29c <_puts_r+0x50>
 801b274:	6923      	ldr	r3, [r4, #16]
 801b276:	b18b      	cbz	r3, 801b29c <_puts_r+0x50>
 801b278:	3e01      	subs	r6, #1
 801b27a:	68a3      	ldr	r3, [r4, #8]
 801b27c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b280:	3b01      	subs	r3, #1
 801b282:	60a3      	str	r3, [r4, #8]
 801b284:	b9e9      	cbnz	r1, 801b2c2 <_puts_r+0x76>
 801b286:	2b00      	cmp	r3, #0
 801b288:	da2e      	bge.n	801b2e8 <_puts_r+0x9c>
 801b28a:	4622      	mov	r2, r4
 801b28c:	210a      	movs	r1, #10
 801b28e:	4628      	mov	r0, r5
 801b290:	f000 f89b 	bl	801b3ca <__swbuf_r>
 801b294:	3001      	adds	r0, #1
 801b296:	d007      	beq.n	801b2a8 <_puts_r+0x5c>
 801b298:	250a      	movs	r5, #10
 801b29a:	e007      	b.n	801b2ac <_puts_r+0x60>
 801b29c:	4621      	mov	r1, r4
 801b29e:	4628      	mov	r0, r5
 801b2a0:	f000 f8d0 	bl	801b444 <__swsetup_r>
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d0e7      	beq.n	801b278 <_puts_r+0x2c>
 801b2a8:	f04f 35ff 	mov.w	r5, #4294967295
 801b2ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2ae:	07da      	lsls	r2, r3, #31
 801b2b0:	d405      	bmi.n	801b2be <_puts_r+0x72>
 801b2b2:	89a3      	ldrh	r3, [r4, #12]
 801b2b4:	059b      	lsls	r3, r3, #22
 801b2b6:	d402      	bmi.n	801b2be <_puts_r+0x72>
 801b2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2ba:	f000 f9bd 	bl	801b638 <__retarget_lock_release_recursive>
 801b2be:	4628      	mov	r0, r5
 801b2c0:	bd70      	pop	{r4, r5, r6, pc}
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	da04      	bge.n	801b2d0 <_puts_r+0x84>
 801b2c6:	69a2      	ldr	r2, [r4, #24]
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	dc06      	bgt.n	801b2da <_puts_r+0x8e>
 801b2cc:	290a      	cmp	r1, #10
 801b2ce:	d004      	beq.n	801b2da <_puts_r+0x8e>
 801b2d0:	6823      	ldr	r3, [r4, #0]
 801b2d2:	1c5a      	adds	r2, r3, #1
 801b2d4:	6022      	str	r2, [r4, #0]
 801b2d6:	7019      	strb	r1, [r3, #0]
 801b2d8:	e7cf      	b.n	801b27a <_puts_r+0x2e>
 801b2da:	4622      	mov	r2, r4
 801b2dc:	4628      	mov	r0, r5
 801b2de:	f000 f874 	bl	801b3ca <__swbuf_r>
 801b2e2:	3001      	adds	r0, #1
 801b2e4:	d1c9      	bne.n	801b27a <_puts_r+0x2e>
 801b2e6:	e7df      	b.n	801b2a8 <_puts_r+0x5c>
 801b2e8:	6823      	ldr	r3, [r4, #0]
 801b2ea:	250a      	movs	r5, #10
 801b2ec:	1c5a      	adds	r2, r3, #1
 801b2ee:	6022      	str	r2, [r4, #0]
 801b2f0:	701d      	strb	r5, [r3, #0]
 801b2f2:	e7db      	b.n	801b2ac <_puts_r+0x60>

0801b2f4 <puts>:
 801b2f4:	4b02      	ldr	r3, [pc, #8]	; (801b300 <puts+0xc>)
 801b2f6:	4601      	mov	r1, r0
 801b2f8:	6818      	ldr	r0, [r3, #0]
 801b2fa:	f7ff bfa7 	b.w	801b24c <_puts_r>
 801b2fe:	bf00      	nop
 801b300:	200000b8 	.word	0x200000b8

0801b304 <siprintf>:
 801b304:	b40e      	push	{r1, r2, r3}
 801b306:	b500      	push	{lr}
 801b308:	b09c      	sub	sp, #112	; 0x70
 801b30a:	ab1d      	add	r3, sp, #116	; 0x74
 801b30c:	9002      	str	r0, [sp, #8]
 801b30e:	9006      	str	r0, [sp, #24]
 801b310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b314:	4809      	ldr	r0, [pc, #36]	; (801b33c <siprintf+0x38>)
 801b316:	9107      	str	r1, [sp, #28]
 801b318:	9104      	str	r1, [sp, #16]
 801b31a:	4909      	ldr	r1, [pc, #36]	; (801b340 <siprintf+0x3c>)
 801b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b320:	9105      	str	r1, [sp, #20]
 801b322:	6800      	ldr	r0, [r0, #0]
 801b324:	9301      	str	r3, [sp, #4]
 801b326:	a902      	add	r1, sp, #8
 801b328:	f001 fc80 	bl	801cc2c <_svfiprintf_r>
 801b32c:	9b02      	ldr	r3, [sp, #8]
 801b32e:	2200      	movs	r2, #0
 801b330:	701a      	strb	r2, [r3, #0]
 801b332:	b01c      	add	sp, #112	; 0x70
 801b334:	f85d eb04 	ldr.w	lr, [sp], #4
 801b338:	b003      	add	sp, #12
 801b33a:	4770      	bx	lr
 801b33c:	200000b8 	.word	0x200000b8
 801b340:	ffff0208 	.word	0xffff0208

0801b344 <__sread>:
 801b344:	b510      	push	{r4, lr}
 801b346:	460c      	mov	r4, r1
 801b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b34c:	f000 f92a 	bl	801b5a4 <_read_r>
 801b350:	2800      	cmp	r0, #0
 801b352:	bfab      	itete	ge
 801b354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b356:	89a3      	ldrhlt	r3, [r4, #12]
 801b358:	181b      	addge	r3, r3, r0
 801b35a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b35e:	bfac      	ite	ge
 801b360:	6563      	strge	r3, [r4, #84]	; 0x54
 801b362:	81a3      	strhlt	r3, [r4, #12]
 801b364:	bd10      	pop	{r4, pc}

0801b366 <__swrite>:
 801b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b36a:	461f      	mov	r7, r3
 801b36c:	898b      	ldrh	r3, [r1, #12]
 801b36e:	05db      	lsls	r3, r3, #23
 801b370:	4605      	mov	r5, r0
 801b372:	460c      	mov	r4, r1
 801b374:	4616      	mov	r6, r2
 801b376:	d505      	bpl.n	801b384 <__swrite+0x1e>
 801b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b37c:	2302      	movs	r3, #2
 801b37e:	2200      	movs	r2, #0
 801b380:	f000 f8fe 	bl	801b580 <_lseek_r>
 801b384:	89a3      	ldrh	r3, [r4, #12]
 801b386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b38e:	81a3      	strh	r3, [r4, #12]
 801b390:	4632      	mov	r2, r6
 801b392:	463b      	mov	r3, r7
 801b394:	4628      	mov	r0, r5
 801b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b39a:	f000 b915 	b.w	801b5c8 <_write_r>

0801b39e <__sseek>:
 801b39e:	b510      	push	{r4, lr}
 801b3a0:	460c      	mov	r4, r1
 801b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3a6:	f000 f8eb 	bl	801b580 <_lseek_r>
 801b3aa:	1c43      	adds	r3, r0, #1
 801b3ac:	89a3      	ldrh	r3, [r4, #12]
 801b3ae:	bf15      	itete	ne
 801b3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b3ba:	81a3      	strheq	r3, [r4, #12]
 801b3bc:	bf18      	it	ne
 801b3be:	81a3      	strhne	r3, [r4, #12]
 801b3c0:	bd10      	pop	{r4, pc}

0801b3c2 <__sclose>:
 801b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3c6:	f000 b8cb 	b.w	801b560 <_close_r>

0801b3ca <__swbuf_r>:
 801b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3cc:	460e      	mov	r6, r1
 801b3ce:	4614      	mov	r4, r2
 801b3d0:	4605      	mov	r5, r0
 801b3d2:	b118      	cbz	r0, 801b3dc <__swbuf_r+0x12>
 801b3d4:	6a03      	ldr	r3, [r0, #32]
 801b3d6:	b90b      	cbnz	r3, 801b3dc <__swbuf_r+0x12>
 801b3d8:	f7ff fef0 	bl	801b1bc <__sinit>
 801b3dc:	69a3      	ldr	r3, [r4, #24]
 801b3de:	60a3      	str	r3, [r4, #8]
 801b3e0:	89a3      	ldrh	r3, [r4, #12]
 801b3e2:	071a      	lsls	r2, r3, #28
 801b3e4:	d525      	bpl.n	801b432 <__swbuf_r+0x68>
 801b3e6:	6923      	ldr	r3, [r4, #16]
 801b3e8:	b31b      	cbz	r3, 801b432 <__swbuf_r+0x68>
 801b3ea:	6823      	ldr	r3, [r4, #0]
 801b3ec:	6922      	ldr	r2, [r4, #16]
 801b3ee:	1a98      	subs	r0, r3, r2
 801b3f0:	6963      	ldr	r3, [r4, #20]
 801b3f2:	b2f6      	uxtb	r6, r6
 801b3f4:	4283      	cmp	r3, r0
 801b3f6:	4637      	mov	r7, r6
 801b3f8:	dc04      	bgt.n	801b404 <__swbuf_r+0x3a>
 801b3fa:	4621      	mov	r1, r4
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	f001 fedd 	bl	801d1bc <_fflush_r>
 801b402:	b9e0      	cbnz	r0, 801b43e <__swbuf_r+0x74>
 801b404:	68a3      	ldr	r3, [r4, #8]
 801b406:	3b01      	subs	r3, #1
 801b408:	60a3      	str	r3, [r4, #8]
 801b40a:	6823      	ldr	r3, [r4, #0]
 801b40c:	1c5a      	adds	r2, r3, #1
 801b40e:	6022      	str	r2, [r4, #0]
 801b410:	701e      	strb	r6, [r3, #0]
 801b412:	6962      	ldr	r2, [r4, #20]
 801b414:	1c43      	adds	r3, r0, #1
 801b416:	429a      	cmp	r2, r3
 801b418:	d004      	beq.n	801b424 <__swbuf_r+0x5a>
 801b41a:	89a3      	ldrh	r3, [r4, #12]
 801b41c:	07db      	lsls	r3, r3, #31
 801b41e:	d506      	bpl.n	801b42e <__swbuf_r+0x64>
 801b420:	2e0a      	cmp	r6, #10
 801b422:	d104      	bne.n	801b42e <__swbuf_r+0x64>
 801b424:	4621      	mov	r1, r4
 801b426:	4628      	mov	r0, r5
 801b428:	f001 fec8 	bl	801d1bc <_fflush_r>
 801b42c:	b938      	cbnz	r0, 801b43e <__swbuf_r+0x74>
 801b42e:	4638      	mov	r0, r7
 801b430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b432:	4621      	mov	r1, r4
 801b434:	4628      	mov	r0, r5
 801b436:	f000 f805 	bl	801b444 <__swsetup_r>
 801b43a:	2800      	cmp	r0, #0
 801b43c:	d0d5      	beq.n	801b3ea <__swbuf_r+0x20>
 801b43e:	f04f 37ff 	mov.w	r7, #4294967295
 801b442:	e7f4      	b.n	801b42e <__swbuf_r+0x64>

0801b444 <__swsetup_r>:
 801b444:	b538      	push	{r3, r4, r5, lr}
 801b446:	4b2a      	ldr	r3, [pc, #168]	; (801b4f0 <__swsetup_r+0xac>)
 801b448:	4605      	mov	r5, r0
 801b44a:	6818      	ldr	r0, [r3, #0]
 801b44c:	460c      	mov	r4, r1
 801b44e:	b118      	cbz	r0, 801b458 <__swsetup_r+0x14>
 801b450:	6a03      	ldr	r3, [r0, #32]
 801b452:	b90b      	cbnz	r3, 801b458 <__swsetup_r+0x14>
 801b454:	f7ff feb2 	bl	801b1bc <__sinit>
 801b458:	89a3      	ldrh	r3, [r4, #12]
 801b45a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b45e:	0718      	lsls	r0, r3, #28
 801b460:	d422      	bmi.n	801b4a8 <__swsetup_r+0x64>
 801b462:	06d9      	lsls	r1, r3, #27
 801b464:	d407      	bmi.n	801b476 <__swsetup_r+0x32>
 801b466:	2309      	movs	r3, #9
 801b468:	602b      	str	r3, [r5, #0]
 801b46a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b46e:	81a3      	strh	r3, [r4, #12]
 801b470:	f04f 30ff 	mov.w	r0, #4294967295
 801b474:	e034      	b.n	801b4e0 <__swsetup_r+0x9c>
 801b476:	0758      	lsls	r0, r3, #29
 801b478:	d512      	bpl.n	801b4a0 <__swsetup_r+0x5c>
 801b47a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b47c:	b141      	cbz	r1, 801b490 <__swsetup_r+0x4c>
 801b47e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b482:	4299      	cmp	r1, r3
 801b484:	d002      	beq.n	801b48c <__swsetup_r+0x48>
 801b486:	4628      	mov	r0, r5
 801b488:	f000 fefa 	bl	801c280 <_free_r>
 801b48c:	2300      	movs	r3, #0
 801b48e:	6363      	str	r3, [r4, #52]	; 0x34
 801b490:	89a3      	ldrh	r3, [r4, #12]
 801b492:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b496:	81a3      	strh	r3, [r4, #12]
 801b498:	2300      	movs	r3, #0
 801b49a:	6063      	str	r3, [r4, #4]
 801b49c:	6923      	ldr	r3, [r4, #16]
 801b49e:	6023      	str	r3, [r4, #0]
 801b4a0:	89a3      	ldrh	r3, [r4, #12]
 801b4a2:	f043 0308 	orr.w	r3, r3, #8
 801b4a6:	81a3      	strh	r3, [r4, #12]
 801b4a8:	6923      	ldr	r3, [r4, #16]
 801b4aa:	b94b      	cbnz	r3, 801b4c0 <__swsetup_r+0x7c>
 801b4ac:	89a3      	ldrh	r3, [r4, #12]
 801b4ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4b6:	d003      	beq.n	801b4c0 <__swsetup_r+0x7c>
 801b4b8:	4621      	mov	r1, r4
 801b4ba:	4628      	mov	r0, r5
 801b4bc:	f001 fede 	bl	801d27c <__smakebuf_r>
 801b4c0:	89a0      	ldrh	r0, [r4, #12]
 801b4c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4c6:	f010 0301 	ands.w	r3, r0, #1
 801b4ca:	d00a      	beq.n	801b4e2 <__swsetup_r+0x9e>
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	60a3      	str	r3, [r4, #8]
 801b4d0:	6963      	ldr	r3, [r4, #20]
 801b4d2:	425b      	negs	r3, r3
 801b4d4:	61a3      	str	r3, [r4, #24]
 801b4d6:	6923      	ldr	r3, [r4, #16]
 801b4d8:	b943      	cbnz	r3, 801b4ec <__swsetup_r+0xa8>
 801b4da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4de:	d1c4      	bne.n	801b46a <__swsetup_r+0x26>
 801b4e0:	bd38      	pop	{r3, r4, r5, pc}
 801b4e2:	0781      	lsls	r1, r0, #30
 801b4e4:	bf58      	it	pl
 801b4e6:	6963      	ldrpl	r3, [r4, #20]
 801b4e8:	60a3      	str	r3, [r4, #8]
 801b4ea:	e7f4      	b.n	801b4d6 <__swsetup_r+0x92>
 801b4ec:	2000      	movs	r0, #0
 801b4ee:	e7f7      	b.n	801b4e0 <__swsetup_r+0x9c>
 801b4f0:	200000b8 	.word	0x200000b8

0801b4f4 <memcmp>:
 801b4f4:	b510      	push	{r4, lr}
 801b4f6:	3901      	subs	r1, #1
 801b4f8:	4402      	add	r2, r0
 801b4fa:	4290      	cmp	r0, r2
 801b4fc:	d101      	bne.n	801b502 <memcmp+0xe>
 801b4fe:	2000      	movs	r0, #0
 801b500:	e005      	b.n	801b50e <memcmp+0x1a>
 801b502:	7803      	ldrb	r3, [r0, #0]
 801b504:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b508:	42a3      	cmp	r3, r4
 801b50a:	d001      	beq.n	801b510 <memcmp+0x1c>
 801b50c:	1b18      	subs	r0, r3, r4
 801b50e:	bd10      	pop	{r4, pc}
 801b510:	3001      	adds	r0, #1
 801b512:	e7f2      	b.n	801b4fa <memcmp+0x6>

0801b514 <memmove>:
 801b514:	4288      	cmp	r0, r1
 801b516:	b510      	push	{r4, lr}
 801b518:	eb01 0402 	add.w	r4, r1, r2
 801b51c:	d902      	bls.n	801b524 <memmove+0x10>
 801b51e:	4284      	cmp	r4, r0
 801b520:	4623      	mov	r3, r4
 801b522:	d807      	bhi.n	801b534 <memmove+0x20>
 801b524:	1e43      	subs	r3, r0, #1
 801b526:	42a1      	cmp	r1, r4
 801b528:	d008      	beq.n	801b53c <memmove+0x28>
 801b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b532:	e7f8      	b.n	801b526 <memmove+0x12>
 801b534:	4402      	add	r2, r0
 801b536:	4601      	mov	r1, r0
 801b538:	428a      	cmp	r2, r1
 801b53a:	d100      	bne.n	801b53e <memmove+0x2a>
 801b53c:	bd10      	pop	{r4, pc}
 801b53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b546:	e7f7      	b.n	801b538 <memmove+0x24>

0801b548 <memset>:
 801b548:	4402      	add	r2, r0
 801b54a:	4603      	mov	r3, r0
 801b54c:	4293      	cmp	r3, r2
 801b54e:	d100      	bne.n	801b552 <memset+0xa>
 801b550:	4770      	bx	lr
 801b552:	f803 1b01 	strb.w	r1, [r3], #1
 801b556:	e7f9      	b.n	801b54c <memset+0x4>

0801b558 <_localeconv_r>:
 801b558:	4800      	ldr	r0, [pc, #0]	; (801b55c <_localeconv_r+0x4>)
 801b55a:	4770      	bx	lr
 801b55c:	200001ac 	.word	0x200001ac

0801b560 <_close_r>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	4d06      	ldr	r5, [pc, #24]	; (801b57c <_close_r+0x1c>)
 801b564:	2300      	movs	r3, #0
 801b566:	4604      	mov	r4, r0
 801b568:	4608      	mov	r0, r1
 801b56a:	602b      	str	r3, [r5, #0]
 801b56c:	f7e8 faad 	bl	8003aca <_close>
 801b570:	1c43      	adds	r3, r0, #1
 801b572:	d102      	bne.n	801b57a <_close_r+0x1a>
 801b574:	682b      	ldr	r3, [r5, #0]
 801b576:	b103      	cbz	r3, 801b57a <_close_r+0x1a>
 801b578:	6023      	str	r3, [r4, #0]
 801b57a:	bd38      	pop	{r3, r4, r5, pc}
 801b57c:	200072f4 	.word	0x200072f4

0801b580 <_lseek_r>:
 801b580:	b538      	push	{r3, r4, r5, lr}
 801b582:	4d07      	ldr	r5, [pc, #28]	; (801b5a0 <_lseek_r+0x20>)
 801b584:	4604      	mov	r4, r0
 801b586:	4608      	mov	r0, r1
 801b588:	4611      	mov	r1, r2
 801b58a:	2200      	movs	r2, #0
 801b58c:	602a      	str	r2, [r5, #0]
 801b58e:	461a      	mov	r2, r3
 801b590:	f7e8 fac2 	bl	8003b18 <_lseek>
 801b594:	1c43      	adds	r3, r0, #1
 801b596:	d102      	bne.n	801b59e <_lseek_r+0x1e>
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	b103      	cbz	r3, 801b59e <_lseek_r+0x1e>
 801b59c:	6023      	str	r3, [r4, #0]
 801b59e:	bd38      	pop	{r3, r4, r5, pc}
 801b5a0:	200072f4 	.word	0x200072f4

0801b5a4 <_read_r>:
 801b5a4:	b538      	push	{r3, r4, r5, lr}
 801b5a6:	4d07      	ldr	r5, [pc, #28]	; (801b5c4 <_read_r+0x20>)
 801b5a8:	4604      	mov	r4, r0
 801b5aa:	4608      	mov	r0, r1
 801b5ac:	4611      	mov	r1, r2
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	602a      	str	r2, [r5, #0]
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	f7e8 fa50 	bl	8003a58 <_read>
 801b5b8:	1c43      	adds	r3, r0, #1
 801b5ba:	d102      	bne.n	801b5c2 <_read_r+0x1e>
 801b5bc:	682b      	ldr	r3, [r5, #0]
 801b5be:	b103      	cbz	r3, 801b5c2 <_read_r+0x1e>
 801b5c0:	6023      	str	r3, [r4, #0]
 801b5c2:	bd38      	pop	{r3, r4, r5, pc}
 801b5c4:	200072f4 	.word	0x200072f4

0801b5c8 <_write_r>:
 801b5c8:	b538      	push	{r3, r4, r5, lr}
 801b5ca:	4d07      	ldr	r5, [pc, #28]	; (801b5e8 <_write_r+0x20>)
 801b5cc:	4604      	mov	r4, r0
 801b5ce:	4608      	mov	r0, r1
 801b5d0:	4611      	mov	r1, r2
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	602a      	str	r2, [r5, #0]
 801b5d6:	461a      	mov	r2, r3
 801b5d8:	f7e8 fa5b 	bl	8003a92 <_write>
 801b5dc:	1c43      	adds	r3, r0, #1
 801b5de:	d102      	bne.n	801b5e6 <_write_r+0x1e>
 801b5e0:	682b      	ldr	r3, [r5, #0]
 801b5e2:	b103      	cbz	r3, 801b5e6 <_write_r+0x1e>
 801b5e4:	6023      	str	r3, [r4, #0]
 801b5e6:	bd38      	pop	{r3, r4, r5, pc}
 801b5e8:	200072f4 	.word	0x200072f4

0801b5ec <__libc_init_array>:
 801b5ec:	b570      	push	{r4, r5, r6, lr}
 801b5ee:	4d0d      	ldr	r5, [pc, #52]	; (801b624 <__libc_init_array+0x38>)
 801b5f0:	4c0d      	ldr	r4, [pc, #52]	; (801b628 <__libc_init_array+0x3c>)
 801b5f2:	1b64      	subs	r4, r4, r5
 801b5f4:	10a4      	asrs	r4, r4, #2
 801b5f6:	2600      	movs	r6, #0
 801b5f8:	42a6      	cmp	r6, r4
 801b5fa:	d109      	bne.n	801b610 <__libc_init_array+0x24>
 801b5fc:	4d0b      	ldr	r5, [pc, #44]	; (801b62c <__libc_init_array+0x40>)
 801b5fe:	4c0c      	ldr	r4, [pc, #48]	; (801b630 <__libc_init_array+0x44>)
 801b600:	f001 ff62 	bl	801d4c8 <_init>
 801b604:	1b64      	subs	r4, r4, r5
 801b606:	10a4      	asrs	r4, r4, #2
 801b608:	2600      	movs	r6, #0
 801b60a:	42a6      	cmp	r6, r4
 801b60c:	d105      	bne.n	801b61a <__libc_init_array+0x2e>
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	f855 3b04 	ldr.w	r3, [r5], #4
 801b614:	4798      	blx	r3
 801b616:	3601      	adds	r6, #1
 801b618:	e7ee      	b.n	801b5f8 <__libc_init_array+0xc>
 801b61a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b61e:	4798      	blx	r3
 801b620:	3601      	adds	r6, #1
 801b622:	e7f2      	b.n	801b60a <__libc_init_array+0x1e>
 801b624:	08021140 	.word	0x08021140
 801b628:	08021140 	.word	0x08021140
 801b62c:	08021140 	.word	0x08021140
 801b630:	08021144 	.word	0x08021144

0801b634 <__retarget_lock_init_recursive>:
 801b634:	4770      	bx	lr

0801b636 <__retarget_lock_acquire_recursive>:
 801b636:	4770      	bx	lr

0801b638 <__retarget_lock_release_recursive>:
 801b638:	4770      	bx	lr

0801b63a <memcpy>:
 801b63a:	440a      	add	r2, r1
 801b63c:	4291      	cmp	r1, r2
 801b63e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b642:	d100      	bne.n	801b646 <memcpy+0xc>
 801b644:	4770      	bx	lr
 801b646:	b510      	push	{r4, lr}
 801b648:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b64c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b650:	4291      	cmp	r1, r2
 801b652:	d1f9      	bne.n	801b648 <memcpy+0xe>
 801b654:	bd10      	pop	{r4, pc}
	...

0801b658 <__assert_func>:
 801b658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b65a:	4614      	mov	r4, r2
 801b65c:	461a      	mov	r2, r3
 801b65e:	4b09      	ldr	r3, [pc, #36]	; (801b684 <__assert_func+0x2c>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	4605      	mov	r5, r0
 801b664:	68d8      	ldr	r0, [r3, #12]
 801b666:	b14c      	cbz	r4, 801b67c <__assert_func+0x24>
 801b668:	4b07      	ldr	r3, [pc, #28]	; (801b688 <__assert_func+0x30>)
 801b66a:	9100      	str	r1, [sp, #0]
 801b66c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b670:	4906      	ldr	r1, [pc, #24]	; (801b68c <__assert_func+0x34>)
 801b672:	462b      	mov	r3, r5
 801b674:	f001 fdca 	bl	801d20c <fiprintf>
 801b678:	f001 fe6e 	bl	801d358 <abort>
 801b67c:	4b04      	ldr	r3, [pc, #16]	; (801b690 <__assert_func+0x38>)
 801b67e:	461c      	mov	r4, r3
 801b680:	e7f3      	b.n	801b66a <__assert_func+0x12>
 801b682:	bf00      	nop
 801b684:	200000b8 	.word	0x200000b8
 801b688:	08020f12 	.word	0x08020f12
 801b68c:	08020f1f 	.word	0x08020f1f
 801b690:	08020f4d 	.word	0x08020f4d

0801b694 <quorem>:
 801b694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b698:	6903      	ldr	r3, [r0, #16]
 801b69a:	690c      	ldr	r4, [r1, #16]
 801b69c:	42a3      	cmp	r3, r4
 801b69e:	4607      	mov	r7, r0
 801b6a0:	db7e      	blt.n	801b7a0 <quorem+0x10c>
 801b6a2:	3c01      	subs	r4, #1
 801b6a4:	f101 0814 	add.w	r8, r1, #20
 801b6a8:	f100 0514 	add.w	r5, r0, #20
 801b6ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b6b0:	9301      	str	r3, [sp, #4]
 801b6b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b6b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b6ba:	3301      	adds	r3, #1
 801b6bc:	429a      	cmp	r2, r3
 801b6be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b6c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b6c6:	fbb2 f6f3 	udiv	r6, r2, r3
 801b6ca:	d331      	bcc.n	801b730 <quorem+0x9c>
 801b6cc:	f04f 0e00 	mov.w	lr, #0
 801b6d0:	4640      	mov	r0, r8
 801b6d2:	46ac      	mov	ip, r5
 801b6d4:	46f2      	mov	sl, lr
 801b6d6:	f850 2b04 	ldr.w	r2, [r0], #4
 801b6da:	b293      	uxth	r3, r2
 801b6dc:	fb06 e303 	mla	r3, r6, r3, lr
 801b6e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b6e4:	0c1a      	lsrs	r2, r3, #16
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	ebaa 0303 	sub.w	r3, sl, r3
 801b6ec:	f8dc a000 	ldr.w	sl, [ip]
 801b6f0:	fa13 f38a 	uxtah	r3, r3, sl
 801b6f4:	fb06 220e 	mla	r2, r6, lr, r2
 801b6f8:	9300      	str	r3, [sp, #0]
 801b6fa:	9b00      	ldr	r3, [sp, #0]
 801b6fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b700:	b292      	uxth	r2, r2
 801b702:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b70a:	f8bd 3000 	ldrh.w	r3, [sp]
 801b70e:	4581      	cmp	r9, r0
 801b710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b714:	f84c 3b04 	str.w	r3, [ip], #4
 801b718:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b71c:	d2db      	bcs.n	801b6d6 <quorem+0x42>
 801b71e:	f855 300b 	ldr.w	r3, [r5, fp]
 801b722:	b92b      	cbnz	r3, 801b730 <quorem+0x9c>
 801b724:	9b01      	ldr	r3, [sp, #4]
 801b726:	3b04      	subs	r3, #4
 801b728:	429d      	cmp	r5, r3
 801b72a:	461a      	mov	r2, r3
 801b72c:	d32c      	bcc.n	801b788 <quorem+0xf4>
 801b72e:	613c      	str	r4, [r7, #16]
 801b730:	4638      	mov	r0, r7
 801b732:	f001 f921 	bl	801c978 <__mcmp>
 801b736:	2800      	cmp	r0, #0
 801b738:	db22      	blt.n	801b780 <quorem+0xec>
 801b73a:	3601      	adds	r6, #1
 801b73c:	4629      	mov	r1, r5
 801b73e:	2000      	movs	r0, #0
 801b740:	f858 2b04 	ldr.w	r2, [r8], #4
 801b744:	f8d1 c000 	ldr.w	ip, [r1]
 801b748:	b293      	uxth	r3, r2
 801b74a:	1ac3      	subs	r3, r0, r3
 801b74c:	0c12      	lsrs	r2, r2, #16
 801b74e:	fa13 f38c 	uxtah	r3, r3, ip
 801b752:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b75a:	b29b      	uxth	r3, r3
 801b75c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b760:	45c1      	cmp	r9, r8
 801b762:	f841 3b04 	str.w	r3, [r1], #4
 801b766:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b76a:	d2e9      	bcs.n	801b740 <quorem+0xac>
 801b76c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b774:	b922      	cbnz	r2, 801b780 <quorem+0xec>
 801b776:	3b04      	subs	r3, #4
 801b778:	429d      	cmp	r5, r3
 801b77a:	461a      	mov	r2, r3
 801b77c:	d30a      	bcc.n	801b794 <quorem+0x100>
 801b77e:	613c      	str	r4, [r7, #16]
 801b780:	4630      	mov	r0, r6
 801b782:	b003      	add	sp, #12
 801b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b788:	6812      	ldr	r2, [r2, #0]
 801b78a:	3b04      	subs	r3, #4
 801b78c:	2a00      	cmp	r2, #0
 801b78e:	d1ce      	bne.n	801b72e <quorem+0x9a>
 801b790:	3c01      	subs	r4, #1
 801b792:	e7c9      	b.n	801b728 <quorem+0x94>
 801b794:	6812      	ldr	r2, [r2, #0]
 801b796:	3b04      	subs	r3, #4
 801b798:	2a00      	cmp	r2, #0
 801b79a:	d1f0      	bne.n	801b77e <quorem+0xea>
 801b79c:	3c01      	subs	r4, #1
 801b79e:	e7eb      	b.n	801b778 <quorem+0xe4>
 801b7a0:	2000      	movs	r0, #0
 801b7a2:	e7ee      	b.n	801b782 <quorem+0xee>
 801b7a4:	0000      	movs	r0, r0
	...

0801b7a8 <_dtoa_r>:
 801b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ac:	ed2d 8b02 	vpush	{d8}
 801b7b0:	69c5      	ldr	r5, [r0, #28]
 801b7b2:	b091      	sub	sp, #68	; 0x44
 801b7b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b7b8:	ec59 8b10 	vmov	r8, r9, d0
 801b7bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b7be:	9106      	str	r1, [sp, #24]
 801b7c0:	4606      	mov	r6, r0
 801b7c2:	9208      	str	r2, [sp, #32]
 801b7c4:	930c      	str	r3, [sp, #48]	; 0x30
 801b7c6:	b975      	cbnz	r5, 801b7e6 <_dtoa_r+0x3e>
 801b7c8:	2010      	movs	r0, #16
 801b7ca:	f000 fda5 	bl	801c318 <malloc>
 801b7ce:	4602      	mov	r2, r0
 801b7d0:	61f0      	str	r0, [r6, #28]
 801b7d2:	b920      	cbnz	r0, 801b7de <_dtoa_r+0x36>
 801b7d4:	4ba6      	ldr	r3, [pc, #664]	; (801ba70 <_dtoa_r+0x2c8>)
 801b7d6:	21ef      	movs	r1, #239	; 0xef
 801b7d8:	48a6      	ldr	r0, [pc, #664]	; (801ba74 <_dtoa_r+0x2cc>)
 801b7da:	f7ff ff3d 	bl	801b658 <__assert_func>
 801b7de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b7e2:	6005      	str	r5, [r0, #0]
 801b7e4:	60c5      	str	r5, [r0, #12]
 801b7e6:	69f3      	ldr	r3, [r6, #28]
 801b7e8:	6819      	ldr	r1, [r3, #0]
 801b7ea:	b151      	cbz	r1, 801b802 <_dtoa_r+0x5a>
 801b7ec:	685a      	ldr	r2, [r3, #4]
 801b7ee:	604a      	str	r2, [r1, #4]
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	4093      	lsls	r3, r2
 801b7f4:	608b      	str	r3, [r1, #8]
 801b7f6:	4630      	mov	r0, r6
 801b7f8:	f000 fe82 	bl	801c500 <_Bfree>
 801b7fc:	69f3      	ldr	r3, [r6, #28]
 801b7fe:	2200      	movs	r2, #0
 801b800:	601a      	str	r2, [r3, #0]
 801b802:	f1b9 0300 	subs.w	r3, r9, #0
 801b806:	bfbb      	ittet	lt
 801b808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b80c:	9303      	strlt	r3, [sp, #12]
 801b80e:	2300      	movge	r3, #0
 801b810:	2201      	movlt	r2, #1
 801b812:	bfac      	ite	ge
 801b814:	6023      	strge	r3, [r4, #0]
 801b816:	6022      	strlt	r2, [r4, #0]
 801b818:	4b97      	ldr	r3, [pc, #604]	; (801ba78 <_dtoa_r+0x2d0>)
 801b81a:	9c03      	ldr	r4, [sp, #12]
 801b81c:	43a3      	bics	r3, r4
 801b81e:	d11c      	bne.n	801b85a <_dtoa_r+0xb2>
 801b820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b822:	f242 730f 	movw	r3, #9999	; 0x270f
 801b826:	6013      	str	r3, [r2, #0]
 801b828:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b82c:	ea53 0308 	orrs.w	r3, r3, r8
 801b830:	f000 84fb 	beq.w	801c22a <_dtoa_r+0xa82>
 801b834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b836:	b963      	cbnz	r3, 801b852 <_dtoa_r+0xaa>
 801b838:	4b90      	ldr	r3, [pc, #576]	; (801ba7c <_dtoa_r+0x2d4>)
 801b83a:	e020      	b.n	801b87e <_dtoa_r+0xd6>
 801b83c:	4b90      	ldr	r3, [pc, #576]	; (801ba80 <_dtoa_r+0x2d8>)
 801b83e:	9301      	str	r3, [sp, #4]
 801b840:	3308      	adds	r3, #8
 801b842:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b844:	6013      	str	r3, [r2, #0]
 801b846:	9801      	ldr	r0, [sp, #4]
 801b848:	b011      	add	sp, #68	; 0x44
 801b84a:	ecbd 8b02 	vpop	{d8}
 801b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b852:	4b8a      	ldr	r3, [pc, #552]	; (801ba7c <_dtoa_r+0x2d4>)
 801b854:	9301      	str	r3, [sp, #4]
 801b856:	3303      	adds	r3, #3
 801b858:	e7f3      	b.n	801b842 <_dtoa_r+0x9a>
 801b85a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b85e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b866:	d10c      	bne.n	801b882 <_dtoa_r+0xda>
 801b868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b86a:	2301      	movs	r3, #1
 801b86c:	6013      	str	r3, [r2, #0]
 801b86e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b870:	2b00      	cmp	r3, #0
 801b872:	f000 84d7 	beq.w	801c224 <_dtoa_r+0xa7c>
 801b876:	4b83      	ldr	r3, [pc, #524]	; (801ba84 <_dtoa_r+0x2dc>)
 801b878:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b87a:	6013      	str	r3, [r2, #0]
 801b87c:	3b01      	subs	r3, #1
 801b87e:	9301      	str	r3, [sp, #4]
 801b880:	e7e1      	b.n	801b846 <_dtoa_r+0x9e>
 801b882:	aa0e      	add	r2, sp, #56	; 0x38
 801b884:	a90f      	add	r1, sp, #60	; 0x3c
 801b886:	4630      	mov	r0, r6
 801b888:	eeb0 0b48 	vmov.f64	d0, d8
 801b88c:	f001 f91a 	bl	801cac4 <__d2b>
 801b890:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b896:	4605      	mov	r5, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d046      	beq.n	801b92a <_dtoa_r+0x182>
 801b89c:	eeb0 7b48 	vmov.f64	d7, d8
 801b8a0:	ee18 1a90 	vmov	r1, s17
 801b8a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b8a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b8ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b8b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8b4:	2000      	movs	r0, #0
 801b8b6:	ee07 1a90 	vmov	s15, r1
 801b8ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b8be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ba58 <_dtoa_r+0x2b0>
 801b8c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b8c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801ba60 <_dtoa_r+0x2b8>
 801b8ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b8ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ba68 <_dtoa_r+0x2c0>
 801b8d2:	ee07 3a90 	vmov	s15, r3
 801b8d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b8da:	eeb0 7b46 	vmov.f64	d7, d6
 801b8de:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b8e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b8e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ee:	ee16 ba90 	vmov	fp, s13
 801b8f2:	9009      	str	r0, [sp, #36]	; 0x24
 801b8f4:	d508      	bpl.n	801b908 <_dtoa_r+0x160>
 801b8f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b8fa:	eeb4 6b47 	vcmp.f64	d6, d7
 801b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b902:	bf18      	it	ne
 801b904:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b908:	f1bb 0f16 	cmp.w	fp, #22
 801b90c:	d82b      	bhi.n	801b966 <_dtoa_r+0x1be>
 801b90e:	495e      	ldr	r1, [pc, #376]	; (801ba88 <_dtoa_r+0x2e0>)
 801b910:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b914:	ed91 7b00 	vldr	d7, [r1]
 801b918:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b920:	d501      	bpl.n	801b926 <_dtoa_r+0x17e>
 801b922:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b926:	2100      	movs	r1, #0
 801b928:	e01e      	b.n	801b968 <_dtoa_r+0x1c0>
 801b92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b92c:	4413      	add	r3, r2
 801b92e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b932:	2920      	cmp	r1, #32
 801b934:	bfc1      	itttt	gt
 801b936:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b93a:	408c      	lslgt	r4, r1
 801b93c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b940:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b944:	bfd6      	itet	le
 801b946:	f1c1 0120 	rsble	r1, r1, #32
 801b94a:	4321      	orrgt	r1, r4
 801b94c:	fa08 f101 	lslle.w	r1, r8, r1
 801b950:	ee07 1a90 	vmov	s15, r1
 801b954:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b958:	3b01      	subs	r3, #1
 801b95a:	ee17 1a90 	vmov	r1, s15
 801b95e:	2001      	movs	r0, #1
 801b960:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801b964:	e7a7      	b.n	801b8b6 <_dtoa_r+0x10e>
 801b966:	2101      	movs	r1, #1
 801b968:	1ad2      	subs	r2, r2, r3
 801b96a:	1e53      	subs	r3, r2, #1
 801b96c:	9305      	str	r3, [sp, #20]
 801b96e:	bf45      	ittet	mi
 801b970:	f1c2 0301 	rsbmi	r3, r2, #1
 801b974:	9304      	strmi	r3, [sp, #16]
 801b976:	2300      	movpl	r3, #0
 801b978:	2300      	movmi	r3, #0
 801b97a:	bf4c      	ite	mi
 801b97c:	9305      	strmi	r3, [sp, #20]
 801b97e:	9304      	strpl	r3, [sp, #16]
 801b980:	f1bb 0f00 	cmp.w	fp, #0
 801b984:	910b      	str	r1, [sp, #44]	; 0x2c
 801b986:	db18      	blt.n	801b9ba <_dtoa_r+0x212>
 801b988:	9b05      	ldr	r3, [sp, #20]
 801b98a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b98e:	445b      	add	r3, fp
 801b990:	9305      	str	r3, [sp, #20]
 801b992:	2300      	movs	r3, #0
 801b994:	9a06      	ldr	r2, [sp, #24]
 801b996:	2a09      	cmp	r2, #9
 801b998:	d848      	bhi.n	801ba2c <_dtoa_r+0x284>
 801b99a:	2a05      	cmp	r2, #5
 801b99c:	bfc4      	itt	gt
 801b99e:	3a04      	subgt	r2, #4
 801b9a0:	9206      	strgt	r2, [sp, #24]
 801b9a2:	9a06      	ldr	r2, [sp, #24]
 801b9a4:	f1a2 0202 	sub.w	r2, r2, #2
 801b9a8:	bfcc      	ite	gt
 801b9aa:	2400      	movgt	r4, #0
 801b9ac:	2401      	movle	r4, #1
 801b9ae:	2a03      	cmp	r2, #3
 801b9b0:	d847      	bhi.n	801ba42 <_dtoa_r+0x29a>
 801b9b2:	e8df f002 	tbb	[pc, r2]
 801b9b6:	2d0b      	.short	0x2d0b
 801b9b8:	392b      	.short	0x392b
 801b9ba:	9b04      	ldr	r3, [sp, #16]
 801b9bc:	2200      	movs	r2, #0
 801b9be:	eba3 030b 	sub.w	r3, r3, fp
 801b9c2:	9304      	str	r3, [sp, #16]
 801b9c4:	920a      	str	r2, [sp, #40]	; 0x28
 801b9c6:	f1cb 0300 	rsb	r3, fp, #0
 801b9ca:	e7e3      	b.n	801b994 <_dtoa_r+0x1ec>
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	9207      	str	r2, [sp, #28]
 801b9d0:	9a08      	ldr	r2, [sp, #32]
 801b9d2:	2a00      	cmp	r2, #0
 801b9d4:	dc38      	bgt.n	801ba48 <_dtoa_r+0x2a0>
 801b9d6:	f04f 0a01 	mov.w	sl, #1
 801b9da:	46d1      	mov	r9, sl
 801b9dc:	4652      	mov	r2, sl
 801b9de:	f8cd a020 	str.w	sl, [sp, #32]
 801b9e2:	69f7      	ldr	r7, [r6, #28]
 801b9e4:	2100      	movs	r1, #0
 801b9e6:	2004      	movs	r0, #4
 801b9e8:	f100 0c14 	add.w	ip, r0, #20
 801b9ec:	4594      	cmp	ip, r2
 801b9ee:	d930      	bls.n	801ba52 <_dtoa_r+0x2aa>
 801b9f0:	6079      	str	r1, [r7, #4]
 801b9f2:	4630      	mov	r0, r6
 801b9f4:	930d      	str	r3, [sp, #52]	; 0x34
 801b9f6:	f000 fd43 	bl	801c480 <_Balloc>
 801b9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9fc:	9001      	str	r0, [sp, #4]
 801b9fe:	4602      	mov	r2, r0
 801ba00:	2800      	cmp	r0, #0
 801ba02:	d145      	bne.n	801ba90 <_dtoa_r+0x2e8>
 801ba04:	4b21      	ldr	r3, [pc, #132]	; (801ba8c <_dtoa_r+0x2e4>)
 801ba06:	f240 11af 	movw	r1, #431	; 0x1af
 801ba0a:	e6e5      	b.n	801b7d8 <_dtoa_r+0x30>
 801ba0c:	2201      	movs	r2, #1
 801ba0e:	e7de      	b.n	801b9ce <_dtoa_r+0x226>
 801ba10:	2200      	movs	r2, #0
 801ba12:	9207      	str	r2, [sp, #28]
 801ba14:	9a08      	ldr	r2, [sp, #32]
 801ba16:	eb0b 0a02 	add.w	sl, fp, r2
 801ba1a:	f10a 0901 	add.w	r9, sl, #1
 801ba1e:	464a      	mov	r2, r9
 801ba20:	2a01      	cmp	r2, #1
 801ba22:	bfb8      	it	lt
 801ba24:	2201      	movlt	r2, #1
 801ba26:	e7dc      	b.n	801b9e2 <_dtoa_r+0x23a>
 801ba28:	2201      	movs	r2, #1
 801ba2a:	e7f2      	b.n	801ba12 <_dtoa_r+0x26a>
 801ba2c:	2401      	movs	r4, #1
 801ba2e:	2200      	movs	r2, #0
 801ba30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801ba34:	f04f 3aff 	mov.w	sl, #4294967295
 801ba38:	2100      	movs	r1, #0
 801ba3a:	46d1      	mov	r9, sl
 801ba3c:	2212      	movs	r2, #18
 801ba3e:	9108      	str	r1, [sp, #32]
 801ba40:	e7cf      	b.n	801b9e2 <_dtoa_r+0x23a>
 801ba42:	2201      	movs	r2, #1
 801ba44:	9207      	str	r2, [sp, #28]
 801ba46:	e7f5      	b.n	801ba34 <_dtoa_r+0x28c>
 801ba48:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ba4c:	46d1      	mov	r9, sl
 801ba4e:	4652      	mov	r2, sl
 801ba50:	e7c7      	b.n	801b9e2 <_dtoa_r+0x23a>
 801ba52:	3101      	adds	r1, #1
 801ba54:	0040      	lsls	r0, r0, #1
 801ba56:	e7c7      	b.n	801b9e8 <_dtoa_r+0x240>
 801ba58:	636f4361 	.word	0x636f4361
 801ba5c:	3fd287a7 	.word	0x3fd287a7
 801ba60:	8b60c8b3 	.word	0x8b60c8b3
 801ba64:	3fc68a28 	.word	0x3fc68a28
 801ba68:	509f79fb 	.word	0x509f79fb
 801ba6c:	3fd34413 	.word	0x3fd34413
 801ba70:	08020d6e 	.word	0x08020d6e
 801ba74:	08020f5b 	.word	0x08020f5b
 801ba78:	7ff00000 	.word	0x7ff00000
 801ba7c:	08020f57 	.word	0x08020f57
 801ba80:	08020f4e 	.word	0x08020f4e
 801ba84:	08020eef 	.word	0x08020eef
 801ba88:	08021048 	.word	0x08021048
 801ba8c:	08020fb3 	.word	0x08020fb3
 801ba90:	69f2      	ldr	r2, [r6, #28]
 801ba92:	9901      	ldr	r1, [sp, #4]
 801ba94:	6011      	str	r1, [r2, #0]
 801ba96:	f1b9 0f0e 	cmp.w	r9, #14
 801ba9a:	d86c      	bhi.n	801bb76 <_dtoa_r+0x3ce>
 801ba9c:	2c00      	cmp	r4, #0
 801ba9e:	d06a      	beq.n	801bb76 <_dtoa_r+0x3ce>
 801baa0:	f1bb 0f00 	cmp.w	fp, #0
 801baa4:	f340 80a0 	ble.w	801bbe8 <_dtoa_r+0x440>
 801baa8:	4ac1      	ldr	r2, [pc, #772]	; (801bdb0 <_dtoa_r+0x608>)
 801baaa:	f00b 010f 	and.w	r1, fp, #15
 801baae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801bab2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bab6:	ed92 7b00 	vldr	d7, [r2]
 801baba:	ea4f 122b 	mov.w	r2, fp, asr #4
 801babe:	f000 8087 	beq.w	801bbd0 <_dtoa_r+0x428>
 801bac2:	49bc      	ldr	r1, [pc, #752]	; (801bdb4 <_dtoa_r+0x60c>)
 801bac4:	ed91 6b08 	vldr	d6, [r1, #32]
 801bac8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801bacc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bad0:	f002 020f 	and.w	r2, r2, #15
 801bad4:	2103      	movs	r1, #3
 801bad6:	48b7      	ldr	r0, [pc, #732]	; (801bdb4 <_dtoa_r+0x60c>)
 801bad8:	2a00      	cmp	r2, #0
 801bada:	d17b      	bne.n	801bbd4 <_dtoa_r+0x42c>
 801badc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bae0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801baea:	ed9d 7b02 	vldr	d7, [sp, #8]
 801baee:	2a00      	cmp	r2, #0
 801baf0:	f000 80a0 	beq.w	801bc34 <_dtoa_r+0x48c>
 801baf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801baf8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb00:	f140 8098 	bpl.w	801bc34 <_dtoa_r+0x48c>
 801bb04:	f1b9 0f00 	cmp.w	r9, #0
 801bb08:	f000 8094 	beq.w	801bc34 <_dtoa_r+0x48c>
 801bb0c:	f1ba 0f00 	cmp.w	sl, #0
 801bb10:	dd2f      	ble.n	801bb72 <_dtoa_r+0x3ca>
 801bb12:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801bb16:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bb1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb1e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801bb22:	3101      	adds	r1, #1
 801bb24:	4654      	mov	r4, sl
 801bb26:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bb2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801bb2e:	ee07 1a90 	vmov	s15, r1
 801bb32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bb36:	eea7 5b06 	vfma.f64	d5, d7, d6
 801bb3a:	ee15 7a90 	vmov	r7, s11
 801bb3e:	ec51 0b15 	vmov	r0, r1, d5
 801bb42:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801bb46:	2c00      	cmp	r4, #0
 801bb48:	d177      	bne.n	801bc3a <_dtoa_r+0x492>
 801bb4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bb4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801bb52:	ec41 0b17 	vmov	d7, r0, r1
 801bb56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb5e:	f300 826a 	bgt.w	801c036 <_dtoa_r+0x88e>
 801bb62:	eeb1 7b47 	vneg.f64	d7, d7
 801bb66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb6e:	f100 8260 	bmi.w	801c032 <_dtoa_r+0x88a>
 801bb72:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bb76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb78:	2a00      	cmp	r2, #0
 801bb7a:	f2c0 811d 	blt.w	801bdb8 <_dtoa_r+0x610>
 801bb7e:	f1bb 0f0e 	cmp.w	fp, #14
 801bb82:	f300 8119 	bgt.w	801bdb8 <_dtoa_r+0x610>
 801bb86:	4b8a      	ldr	r3, [pc, #552]	; (801bdb0 <_dtoa_r+0x608>)
 801bb88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bb8c:	ed93 6b00 	vldr	d6, [r3]
 801bb90:	9b08      	ldr	r3, [sp, #32]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	f280 80b7 	bge.w	801bd06 <_dtoa_r+0x55e>
 801bb98:	f1b9 0f00 	cmp.w	r9, #0
 801bb9c:	f300 80b3 	bgt.w	801bd06 <_dtoa_r+0x55e>
 801bba0:	f040 8246 	bne.w	801c030 <_dtoa_r+0x888>
 801bba4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bba8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bbac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bbb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb8:	464c      	mov	r4, r9
 801bbba:	464f      	mov	r7, r9
 801bbbc:	f280 821c 	bge.w	801bff8 <_dtoa_r+0x850>
 801bbc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bbc4:	2331      	movs	r3, #49	; 0x31
 801bbc6:	f808 3b01 	strb.w	r3, [r8], #1
 801bbca:	f10b 0b01 	add.w	fp, fp, #1
 801bbce:	e218      	b.n	801c002 <_dtoa_r+0x85a>
 801bbd0:	2102      	movs	r1, #2
 801bbd2:	e780      	b.n	801bad6 <_dtoa_r+0x32e>
 801bbd4:	07d4      	lsls	r4, r2, #31
 801bbd6:	d504      	bpl.n	801bbe2 <_dtoa_r+0x43a>
 801bbd8:	ed90 6b00 	vldr	d6, [r0]
 801bbdc:	3101      	adds	r1, #1
 801bbde:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bbe2:	1052      	asrs	r2, r2, #1
 801bbe4:	3008      	adds	r0, #8
 801bbe6:	e777      	b.n	801bad8 <_dtoa_r+0x330>
 801bbe8:	d022      	beq.n	801bc30 <_dtoa_r+0x488>
 801bbea:	f1cb 0200 	rsb	r2, fp, #0
 801bbee:	4970      	ldr	r1, [pc, #448]	; (801bdb0 <_dtoa_r+0x608>)
 801bbf0:	f002 000f 	and.w	r0, r2, #15
 801bbf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bbf8:	ed91 7b00 	vldr	d7, [r1]
 801bbfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bc00:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bc04:	486b      	ldr	r0, [pc, #428]	; (801bdb4 <_dtoa_r+0x60c>)
 801bc06:	1112      	asrs	r2, r2, #4
 801bc08:	2400      	movs	r4, #0
 801bc0a:	2102      	movs	r1, #2
 801bc0c:	b92a      	cbnz	r2, 801bc1a <_dtoa_r+0x472>
 801bc0e:	2c00      	cmp	r4, #0
 801bc10:	f43f af6a 	beq.w	801bae8 <_dtoa_r+0x340>
 801bc14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bc18:	e766      	b.n	801bae8 <_dtoa_r+0x340>
 801bc1a:	07d7      	lsls	r7, r2, #31
 801bc1c:	d505      	bpl.n	801bc2a <_dtoa_r+0x482>
 801bc1e:	ed90 6b00 	vldr	d6, [r0]
 801bc22:	3101      	adds	r1, #1
 801bc24:	2401      	movs	r4, #1
 801bc26:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bc2a:	1052      	asrs	r2, r2, #1
 801bc2c:	3008      	adds	r0, #8
 801bc2e:	e7ed      	b.n	801bc0c <_dtoa_r+0x464>
 801bc30:	2102      	movs	r1, #2
 801bc32:	e759      	b.n	801bae8 <_dtoa_r+0x340>
 801bc34:	465a      	mov	r2, fp
 801bc36:	464c      	mov	r4, r9
 801bc38:	e775      	b.n	801bb26 <_dtoa_r+0x37e>
 801bc3a:	ec41 0b17 	vmov	d7, r0, r1
 801bc3e:	495c      	ldr	r1, [pc, #368]	; (801bdb0 <_dtoa_r+0x608>)
 801bc40:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801bc44:	ed11 4b02 	vldr	d4, [r1, #-8]
 801bc48:	9901      	ldr	r1, [sp, #4]
 801bc4a:	440c      	add	r4, r1
 801bc4c:	9907      	ldr	r1, [sp, #28]
 801bc4e:	b351      	cbz	r1, 801bca6 <_dtoa_r+0x4fe>
 801bc50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bc54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bc58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bc5c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bc60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bc64:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bc68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bc6c:	ee14 1a90 	vmov	r1, s9
 801bc70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bc74:	3130      	adds	r1, #48	; 0x30
 801bc76:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bc7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc82:	f808 1b01 	strb.w	r1, [r8], #1
 801bc86:	d439      	bmi.n	801bcfc <_dtoa_r+0x554>
 801bc88:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bc8c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc94:	d472      	bmi.n	801bd7c <_dtoa_r+0x5d4>
 801bc96:	45a0      	cmp	r8, r4
 801bc98:	f43f af6b 	beq.w	801bb72 <_dtoa_r+0x3ca>
 801bc9c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bca0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bca4:	e7e0      	b.n	801bc68 <_dtoa_r+0x4c0>
 801bca6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bcaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bcae:	4620      	mov	r0, r4
 801bcb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bcb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bcb8:	ee14 1a90 	vmov	r1, s9
 801bcbc:	3130      	adds	r1, #48	; 0x30
 801bcbe:	f808 1b01 	strb.w	r1, [r8], #1
 801bcc2:	45a0      	cmp	r8, r4
 801bcc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bcc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bccc:	d118      	bne.n	801bd00 <_dtoa_r+0x558>
 801bcce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bcd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bcd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcde:	dc4d      	bgt.n	801bd7c <_dtoa_r+0x5d4>
 801bce0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bce4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcec:	f57f af41 	bpl.w	801bb72 <_dtoa_r+0x3ca>
 801bcf0:	4680      	mov	r8, r0
 801bcf2:	3801      	subs	r0, #1
 801bcf4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bcf8:	2b30      	cmp	r3, #48	; 0x30
 801bcfa:	d0f9      	beq.n	801bcf0 <_dtoa_r+0x548>
 801bcfc:	4693      	mov	fp, r2
 801bcfe:	e02a      	b.n	801bd56 <_dtoa_r+0x5ae>
 801bd00:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bd04:	e7d6      	b.n	801bcb4 <_dtoa_r+0x50c>
 801bd06:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bd0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bd0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bd16:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bd1a:	ee15 3a10 	vmov	r3, s10
 801bd1e:	3330      	adds	r3, #48	; 0x30
 801bd20:	f808 3b01 	strb.w	r3, [r8], #1
 801bd24:	9b01      	ldr	r3, [sp, #4]
 801bd26:	eba8 0303 	sub.w	r3, r8, r3
 801bd2a:	4599      	cmp	r9, r3
 801bd2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bd30:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bd34:	d133      	bne.n	801bd9e <_dtoa_r+0x5f6>
 801bd36:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bd3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd42:	dc1a      	bgt.n	801bd7a <_dtoa_r+0x5d2>
 801bd44:	eeb4 7b46 	vcmp.f64	d7, d6
 801bd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd4c:	d103      	bne.n	801bd56 <_dtoa_r+0x5ae>
 801bd4e:	ee15 3a10 	vmov	r3, s10
 801bd52:	07d9      	lsls	r1, r3, #31
 801bd54:	d411      	bmi.n	801bd7a <_dtoa_r+0x5d2>
 801bd56:	4629      	mov	r1, r5
 801bd58:	4630      	mov	r0, r6
 801bd5a:	f000 fbd1 	bl	801c500 <_Bfree>
 801bd5e:	2300      	movs	r3, #0
 801bd60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd62:	f888 3000 	strb.w	r3, [r8]
 801bd66:	f10b 0301 	add.w	r3, fp, #1
 801bd6a:	6013      	str	r3, [r2, #0]
 801bd6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	f43f ad69 	beq.w	801b846 <_dtoa_r+0x9e>
 801bd74:	f8c3 8000 	str.w	r8, [r3]
 801bd78:	e565      	b.n	801b846 <_dtoa_r+0x9e>
 801bd7a:	465a      	mov	r2, fp
 801bd7c:	4643      	mov	r3, r8
 801bd7e:	4698      	mov	r8, r3
 801bd80:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801bd84:	2939      	cmp	r1, #57	; 0x39
 801bd86:	d106      	bne.n	801bd96 <_dtoa_r+0x5ee>
 801bd88:	9901      	ldr	r1, [sp, #4]
 801bd8a:	4299      	cmp	r1, r3
 801bd8c:	d1f7      	bne.n	801bd7e <_dtoa_r+0x5d6>
 801bd8e:	9801      	ldr	r0, [sp, #4]
 801bd90:	2130      	movs	r1, #48	; 0x30
 801bd92:	3201      	adds	r2, #1
 801bd94:	7001      	strb	r1, [r0, #0]
 801bd96:	7819      	ldrb	r1, [r3, #0]
 801bd98:	3101      	adds	r1, #1
 801bd9a:	7019      	strb	r1, [r3, #0]
 801bd9c:	e7ae      	b.n	801bcfc <_dtoa_r+0x554>
 801bd9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bda2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdaa:	d1b2      	bne.n	801bd12 <_dtoa_r+0x56a>
 801bdac:	e7d3      	b.n	801bd56 <_dtoa_r+0x5ae>
 801bdae:	bf00      	nop
 801bdb0:	08021048 	.word	0x08021048
 801bdb4:	08021020 	.word	0x08021020
 801bdb8:	9907      	ldr	r1, [sp, #28]
 801bdba:	2900      	cmp	r1, #0
 801bdbc:	f000 80d0 	beq.w	801bf60 <_dtoa_r+0x7b8>
 801bdc0:	9906      	ldr	r1, [sp, #24]
 801bdc2:	2901      	cmp	r1, #1
 801bdc4:	f300 80b4 	bgt.w	801bf30 <_dtoa_r+0x788>
 801bdc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdca:	2900      	cmp	r1, #0
 801bdcc:	f000 80ac 	beq.w	801bf28 <_dtoa_r+0x780>
 801bdd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bdd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bdd8:	461c      	mov	r4, r3
 801bdda:	9309      	str	r3, [sp, #36]	; 0x24
 801bddc:	9b04      	ldr	r3, [sp, #16]
 801bdde:	4413      	add	r3, r2
 801bde0:	9304      	str	r3, [sp, #16]
 801bde2:	9b05      	ldr	r3, [sp, #20]
 801bde4:	2101      	movs	r1, #1
 801bde6:	4413      	add	r3, r2
 801bde8:	4630      	mov	r0, r6
 801bdea:	9305      	str	r3, [sp, #20]
 801bdec:	f000 fc3e 	bl	801c66c <__i2b>
 801bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf2:	4607      	mov	r7, r0
 801bdf4:	f1b8 0f00 	cmp.w	r8, #0
 801bdf8:	d00d      	beq.n	801be16 <_dtoa_r+0x66e>
 801bdfa:	9a05      	ldr	r2, [sp, #20]
 801bdfc:	2a00      	cmp	r2, #0
 801bdfe:	dd0a      	ble.n	801be16 <_dtoa_r+0x66e>
 801be00:	4542      	cmp	r2, r8
 801be02:	9904      	ldr	r1, [sp, #16]
 801be04:	bfa8      	it	ge
 801be06:	4642      	movge	r2, r8
 801be08:	1a89      	subs	r1, r1, r2
 801be0a:	9104      	str	r1, [sp, #16]
 801be0c:	9905      	ldr	r1, [sp, #20]
 801be0e:	eba8 0802 	sub.w	r8, r8, r2
 801be12:	1a8a      	subs	r2, r1, r2
 801be14:	9205      	str	r2, [sp, #20]
 801be16:	b303      	cbz	r3, 801be5a <_dtoa_r+0x6b2>
 801be18:	9a07      	ldr	r2, [sp, #28]
 801be1a:	2a00      	cmp	r2, #0
 801be1c:	f000 80a5 	beq.w	801bf6a <_dtoa_r+0x7c2>
 801be20:	2c00      	cmp	r4, #0
 801be22:	dd13      	ble.n	801be4c <_dtoa_r+0x6a4>
 801be24:	4639      	mov	r1, r7
 801be26:	4622      	mov	r2, r4
 801be28:	4630      	mov	r0, r6
 801be2a:	930d      	str	r3, [sp, #52]	; 0x34
 801be2c:	f000 fcde 	bl	801c7ec <__pow5mult>
 801be30:	462a      	mov	r2, r5
 801be32:	4601      	mov	r1, r0
 801be34:	4607      	mov	r7, r0
 801be36:	4630      	mov	r0, r6
 801be38:	f000 fc2e 	bl	801c698 <__multiply>
 801be3c:	4629      	mov	r1, r5
 801be3e:	9009      	str	r0, [sp, #36]	; 0x24
 801be40:	4630      	mov	r0, r6
 801be42:	f000 fb5d 	bl	801c500 <_Bfree>
 801be46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be4a:	4615      	mov	r5, r2
 801be4c:	1b1a      	subs	r2, r3, r4
 801be4e:	d004      	beq.n	801be5a <_dtoa_r+0x6b2>
 801be50:	4629      	mov	r1, r5
 801be52:	4630      	mov	r0, r6
 801be54:	f000 fcca 	bl	801c7ec <__pow5mult>
 801be58:	4605      	mov	r5, r0
 801be5a:	2101      	movs	r1, #1
 801be5c:	4630      	mov	r0, r6
 801be5e:	f000 fc05 	bl	801c66c <__i2b>
 801be62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be64:	2b00      	cmp	r3, #0
 801be66:	4604      	mov	r4, r0
 801be68:	f340 8081 	ble.w	801bf6e <_dtoa_r+0x7c6>
 801be6c:	461a      	mov	r2, r3
 801be6e:	4601      	mov	r1, r0
 801be70:	4630      	mov	r0, r6
 801be72:	f000 fcbb 	bl	801c7ec <__pow5mult>
 801be76:	9b06      	ldr	r3, [sp, #24]
 801be78:	2b01      	cmp	r3, #1
 801be7a:	4604      	mov	r4, r0
 801be7c:	dd7a      	ble.n	801bf74 <_dtoa_r+0x7cc>
 801be7e:	2300      	movs	r3, #0
 801be80:	9309      	str	r3, [sp, #36]	; 0x24
 801be82:	6922      	ldr	r2, [r4, #16]
 801be84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801be88:	6910      	ldr	r0, [r2, #16]
 801be8a:	f000 fba1 	bl	801c5d0 <__hi0bits>
 801be8e:	f1c0 0020 	rsb	r0, r0, #32
 801be92:	9b05      	ldr	r3, [sp, #20]
 801be94:	4418      	add	r0, r3
 801be96:	f010 001f 	ands.w	r0, r0, #31
 801be9a:	f000 8093 	beq.w	801bfc4 <_dtoa_r+0x81c>
 801be9e:	f1c0 0220 	rsb	r2, r0, #32
 801bea2:	2a04      	cmp	r2, #4
 801bea4:	f340 8085 	ble.w	801bfb2 <_dtoa_r+0x80a>
 801bea8:	9b04      	ldr	r3, [sp, #16]
 801beaa:	f1c0 001c 	rsb	r0, r0, #28
 801beae:	4403      	add	r3, r0
 801beb0:	9304      	str	r3, [sp, #16]
 801beb2:	9b05      	ldr	r3, [sp, #20]
 801beb4:	4480      	add	r8, r0
 801beb6:	4403      	add	r3, r0
 801beb8:	9305      	str	r3, [sp, #20]
 801beba:	9b04      	ldr	r3, [sp, #16]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	dd05      	ble.n	801becc <_dtoa_r+0x724>
 801bec0:	4629      	mov	r1, r5
 801bec2:	461a      	mov	r2, r3
 801bec4:	4630      	mov	r0, r6
 801bec6:	f000 fceb 	bl	801c8a0 <__lshift>
 801beca:	4605      	mov	r5, r0
 801becc:	9b05      	ldr	r3, [sp, #20]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	dd05      	ble.n	801bede <_dtoa_r+0x736>
 801bed2:	4621      	mov	r1, r4
 801bed4:	461a      	mov	r2, r3
 801bed6:	4630      	mov	r0, r6
 801bed8:	f000 fce2 	bl	801c8a0 <__lshift>
 801bedc:	4604      	mov	r4, r0
 801bede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d071      	beq.n	801bfc8 <_dtoa_r+0x820>
 801bee4:	4621      	mov	r1, r4
 801bee6:	4628      	mov	r0, r5
 801bee8:	f000 fd46 	bl	801c978 <__mcmp>
 801beec:	2800      	cmp	r0, #0
 801beee:	da6b      	bge.n	801bfc8 <_dtoa_r+0x820>
 801bef0:	2300      	movs	r3, #0
 801bef2:	4629      	mov	r1, r5
 801bef4:	220a      	movs	r2, #10
 801bef6:	4630      	mov	r0, r6
 801bef8:	f000 fb24 	bl	801c544 <__multadd>
 801befc:	9b07      	ldr	r3, [sp, #28]
 801befe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bf02:	4605      	mov	r5, r0
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	f000 8197 	beq.w	801c238 <_dtoa_r+0xa90>
 801bf0a:	4639      	mov	r1, r7
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	220a      	movs	r2, #10
 801bf10:	4630      	mov	r0, r6
 801bf12:	f000 fb17 	bl	801c544 <__multadd>
 801bf16:	f1ba 0f00 	cmp.w	sl, #0
 801bf1a:	4607      	mov	r7, r0
 801bf1c:	f300 8093 	bgt.w	801c046 <_dtoa_r+0x89e>
 801bf20:	9b06      	ldr	r3, [sp, #24]
 801bf22:	2b02      	cmp	r3, #2
 801bf24:	dc57      	bgt.n	801bfd6 <_dtoa_r+0x82e>
 801bf26:	e08e      	b.n	801c046 <_dtoa_r+0x89e>
 801bf28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bf2e:	e751      	b.n	801bdd4 <_dtoa_r+0x62c>
 801bf30:	f109 34ff 	add.w	r4, r9, #4294967295
 801bf34:	42a3      	cmp	r3, r4
 801bf36:	bfbf      	itttt	lt
 801bf38:	1ae2      	sublt	r2, r4, r3
 801bf3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bf3c:	189b      	addlt	r3, r3, r2
 801bf3e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bf40:	bfae      	itee	ge
 801bf42:	1b1c      	subge	r4, r3, r4
 801bf44:	4623      	movlt	r3, r4
 801bf46:	2400      	movlt	r4, #0
 801bf48:	f1b9 0f00 	cmp.w	r9, #0
 801bf4c:	bfb5      	itete	lt
 801bf4e:	9a04      	ldrlt	r2, [sp, #16]
 801bf50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801bf54:	eba2 0809 	sublt.w	r8, r2, r9
 801bf58:	464a      	movge	r2, r9
 801bf5a:	bfb8      	it	lt
 801bf5c:	2200      	movlt	r2, #0
 801bf5e:	e73c      	b.n	801bdda <_dtoa_r+0x632>
 801bf60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bf64:	9f07      	ldr	r7, [sp, #28]
 801bf66:	461c      	mov	r4, r3
 801bf68:	e744      	b.n	801bdf4 <_dtoa_r+0x64c>
 801bf6a:	461a      	mov	r2, r3
 801bf6c:	e770      	b.n	801be50 <_dtoa_r+0x6a8>
 801bf6e:	9b06      	ldr	r3, [sp, #24]
 801bf70:	2b01      	cmp	r3, #1
 801bf72:	dc18      	bgt.n	801bfa6 <_dtoa_r+0x7fe>
 801bf74:	9b02      	ldr	r3, [sp, #8]
 801bf76:	b9b3      	cbnz	r3, 801bfa6 <_dtoa_r+0x7fe>
 801bf78:	9b03      	ldr	r3, [sp, #12]
 801bf7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bf7e:	b9a2      	cbnz	r2, 801bfaa <_dtoa_r+0x802>
 801bf80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bf84:	0d12      	lsrs	r2, r2, #20
 801bf86:	0512      	lsls	r2, r2, #20
 801bf88:	b18a      	cbz	r2, 801bfae <_dtoa_r+0x806>
 801bf8a:	9b04      	ldr	r3, [sp, #16]
 801bf8c:	3301      	adds	r3, #1
 801bf8e:	9304      	str	r3, [sp, #16]
 801bf90:	9b05      	ldr	r3, [sp, #20]
 801bf92:	3301      	adds	r3, #1
 801bf94:	9305      	str	r3, [sp, #20]
 801bf96:	2301      	movs	r3, #1
 801bf98:	9309      	str	r3, [sp, #36]	; 0x24
 801bf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f47f af70 	bne.w	801be82 <_dtoa_r+0x6da>
 801bfa2:	2001      	movs	r0, #1
 801bfa4:	e775      	b.n	801be92 <_dtoa_r+0x6ea>
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	e7f6      	b.n	801bf98 <_dtoa_r+0x7f0>
 801bfaa:	9b02      	ldr	r3, [sp, #8]
 801bfac:	e7f4      	b.n	801bf98 <_dtoa_r+0x7f0>
 801bfae:	9209      	str	r2, [sp, #36]	; 0x24
 801bfb0:	e7f3      	b.n	801bf9a <_dtoa_r+0x7f2>
 801bfb2:	d082      	beq.n	801beba <_dtoa_r+0x712>
 801bfb4:	9b04      	ldr	r3, [sp, #16]
 801bfb6:	321c      	adds	r2, #28
 801bfb8:	4413      	add	r3, r2
 801bfba:	9304      	str	r3, [sp, #16]
 801bfbc:	9b05      	ldr	r3, [sp, #20]
 801bfbe:	4490      	add	r8, r2
 801bfc0:	4413      	add	r3, r2
 801bfc2:	e779      	b.n	801beb8 <_dtoa_r+0x710>
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	e7f5      	b.n	801bfb4 <_dtoa_r+0x80c>
 801bfc8:	f1b9 0f00 	cmp.w	r9, #0
 801bfcc:	dc36      	bgt.n	801c03c <_dtoa_r+0x894>
 801bfce:	9b06      	ldr	r3, [sp, #24]
 801bfd0:	2b02      	cmp	r3, #2
 801bfd2:	dd33      	ble.n	801c03c <_dtoa_r+0x894>
 801bfd4:	46ca      	mov	sl, r9
 801bfd6:	f1ba 0f00 	cmp.w	sl, #0
 801bfda:	d10d      	bne.n	801bff8 <_dtoa_r+0x850>
 801bfdc:	4621      	mov	r1, r4
 801bfde:	4653      	mov	r3, sl
 801bfe0:	2205      	movs	r2, #5
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	f000 faae 	bl	801c544 <__multadd>
 801bfe8:	4601      	mov	r1, r0
 801bfea:	4604      	mov	r4, r0
 801bfec:	4628      	mov	r0, r5
 801bfee:	f000 fcc3 	bl	801c978 <__mcmp>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	f73f ade4 	bgt.w	801bbc0 <_dtoa_r+0x418>
 801bff8:	9b08      	ldr	r3, [sp, #32]
 801bffa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bffe:	ea6f 0b03 	mvn.w	fp, r3
 801c002:	f04f 0900 	mov.w	r9, #0
 801c006:	4621      	mov	r1, r4
 801c008:	4630      	mov	r0, r6
 801c00a:	f000 fa79 	bl	801c500 <_Bfree>
 801c00e:	2f00      	cmp	r7, #0
 801c010:	f43f aea1 	beq.w	801bd56 <_dtoa_r+0x5ae>
 801c014:	f1b9 0f00 	cmp.w	r9, #0
 801c018:	d005      	beq.n	801c026 <_dtoa_r+0x87e>
 801c01a:	45b9      	cmp	r9, r7
 801c01c:	d003      	beq.n	801c026 <_dtoa_r+0x87e>
 801c01e:	4649      	mov	r1, r9
 801c020:	4630      	mov	r0, r6
 801c022:	f000 fa6d 	bl	801c500 <_Bfree>
 801c026:	4639      	mov	r1, r7
 801c028:	4630      	mov	r0, r6
 801c02a:	f000 fa69 	bl	801c500 <_Bfree>
 801c02e:	e692      	b.n	801bd56 <_dtoa_r+0x5ae>
 801c030:	2400      	movs	r4, #0
 801c032:	4627      	mov	r7, r4
 801c034:	e7e0      	b.n	801bff8 <_dtoa_r+0x850>
 801c036:	4693      	mov	fp, r2
 801c038:	4627      	mov	r7, r4
 801c03a:	e5c1      	b.n	801bbc0 <_dtoa_r+0x418>
 801c03c:	9b07      	ldr	r3, [sp, #28]
 801c03e:	46ca      	mov	sl, r9
 801c040:	2b00      	cmp	r3, #0
 801c042:	f000 8100 	beq.w	801c246 <_dtoa_r+0xa9e>
 801c046:	f1b8 0f00 	cmp.w	r8, #0
 801c04a:	dd05      	ble.n	801c058 <_dtoa_r+0x8b0>
 801c04c:	4639      	mov	r1, r7
 801c04e:	4642      	mov	r2, r8
 801c050:	4630      	mov	r0, r6
 801c052:	f000 fc25 	bl	801c8a0 <__lshift>
 801c056:	4607      	mov	r7, r0
 801c058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d05d      	beq.n	801c11a <_dtoa_r+0x972>
 801c05e:	6879      	ldr	r1, [r7, #4]
 801c060:	4630      	mov	r0, r6
 801c062:	f000 fa0d 	bl	801c480 <_Balloc>
 801c066:	4680      	mov	r8, r0
 801c068:	b928      	cbnz	r0, 801c076 <_dtoa_r+0x8ce>
 801c06a:	4b82      	ldr	r3, [pc, #520]	; (801c274 <_dtoa_r+0xacc>)
 801c06c:	4602      	mov	r2, r0
 801c06e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c072:	f7ff bbb1 	b.w	801b7d8 <_dtoa_r+0x30>
 801c076:	693a      	ldr	r2, [r7, #16]
 801c078:	3202      	adds	r2, #2
 801c07a:	0092      	lsls	r2, r2, #2
 801c07c:	f107 010c 	add.w	r1, r7, #12
 801c080:	300c      	adds	r0, #12
 801c082:	f7ff fada 	bl	801b63a <memcpy>
 801c086:	2201      	movs	r2, #1
 801c088:	4641      	mov	r1, r8
 801c08a:	4630      	mov	r0, r6
 801c08c:	f000 fc08 	bl	801c8a0 <__lshift>
 801c090:	9b01      	ldr	r3, [sp, #4]
 801c092:	3301      	adds	r3, #1
 801c094:	9304      	str	r3, [sp, #16]
 801c096:	9b01      	ldr	r3, [sp, #4]
 801c098:	4453      	add	r3, sl
 801c09a:	9308      	str	r3, [sp, #32]
 801c09c:	9b02      	ldr	r3, [sp, #8]
 801c09e:	f003 0301 	and.w	r3, r3, #1
 801c0a2:	46b9      	mov	r9, r7
 801c0a4:	9307      	str	r3, [sp, #28]
 801c0a6:	4607      	mov	r7, r0
 801c0a8:	9b04      	ldr	r3, [sp, #16]
 801c0aa:	4621      	mov	r1, r4
 801c0ac:	3b01      	subs	r3, #1
 801c0ae:	4628      	mov	r0, r5
 801c0b0:	9302      	str	r3, [sp, #8]
 801c0b2:	f7ff faef 	bl	801b694 <quorem>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	3330      	adds	r3, #48	; 0x30
 801c0ba:	9005      	str	r0, [sp, #20]
 801c0bc:	4649      	mov	r1, r9
 801c0be:	4628      	mov	r0, r5
 801c0c0:	9309      	str	r3, [sp, #36]	; 0x24
 801c0c2:	f000 fc59 	bl	801c978 <__mcmp>
 801c0c6:	463a      	mov	r2, r7
 801c0c8:	4682      	mov	sl, r0
 801c0ca:	4621      	mov	r1, r4
 801c0cc:	4630      	mov	r0, r6
 801c0ce:	f000 fc6f 	bl	801c9b0 <__mdiff>
 801c0d2:	68c2      	ldr	r2, [r0, #12]
 801c0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0d6:	4680      	mov	r8, r0
 801c0d8:	bb0a      	cbnz	r2, 801c11e <_dtoa_r+0x976>
 801c0da:	4601      	mov	r1, r0
 801c0dc:	4628      	mov	r0, r5
 801c0de:	f000 fc4b 	bl	801c978 <__mcmp>
 801c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e4:	4602      	mov	r2, r0
 801c0e6:	4641      	mov	r1, r8
 801c0e8:	4630      	mov	r0, r6
 801c0ea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c0ee:	f000 fa07 	bl	801c500 <_Bfree>
 801c0f2:	9b06      	ldr	r3, [sp, #24]
 801c0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0f6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c0fa:	ea43 0102 	orr.w	r1, r3, r2
 801c0fe:	9b07      	ldr	r3, [sp, #28]
 801c100:	4319      	orrs	r1, r3
 801c102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c104:	d10d      	bne.n	801c122 <_dtoa_r+0x97a>
 801c106:	2b39      	cmp	r3, #57	; 0x39
 801c108:	d029      	beq.n	801c15e <_dtoa_r+0x9b6>
 801c10a:	f1ba 0f00 	cmp.w	sl, #0
 801c10e:	dd01      	ble.n	801c114 <_dtoa_r+0x96c>
 801c110:	9b05      	ldr	r3, [sp, #20]
 801c112:	3331      	adds	r3, #49	; 0x31
 801c114:	9a02      	ldr	r2, [sp, #8]
 801c116:	7013      	strb	r3, [r2, #0]
 801c118:	e775      	b.n	801c006 <_dtoa_r+0x85e>
 801c11a:	4638      	mov	r0, r7
 801c11c:	e7b8      	b.n	801c090 <_dtoa_r+0x8e8>
 801c11e:	2201      	movs	r2, #1
 801c120:	e7e1      	b.n	801c0e6 <_dtoa_r+0x93e>
 801c122:	f1ba 0f00 	cmp.w	sl, #0
 801c126:	db06      	blt.n	801c136 <_dtoa_r+0x98e>
 801c128:	9906      	ldr	r1, [sp, #24]
 801c12a:	ea41 0a0a 	orr.w	sl, r1, sl
 801c12e:	9907      	ldr	r1, [sp, #28]
 801c130:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c134:	d120      	bne.n	801c178 <_dtoa_r+0x9d0>
 801c136:	2a00      	cmp	r2, #0
 801c138:	ddec      	ble.n	801c114 <_dtoa_r+0x96c>
 801c13a:	4629      	mov	r1, r5
 801c13c:	2201      	movs	r2, #1
 801c13e:	4630      	mov	r0, r6
 801c140:	9304      	str	r3, [sp, #16]
 801c142:	f000 fbad 	bl	801c8a0 <__lshift>
 801c146:	4621      	mov	r1, r4
 801c148:	4605      	mov	r5, r0
 801c14a:	f000 fc15 	bl	801c978 <__mcmp>
 801c14e:	2800      	cmp	r0, #0
 801c150:	9b04      	ldr	r3, [sp, #16]
 801c152:	dc02      	bgt.n	801c15a <_dtoa_r+0x9b2>
 801c154:	d1de      	bne.n	801c114 <_dtoa_r+0x96c>
 801c156:	07da      	lsls	r2, r3, #31
 801c158:	d5dc      	bpl.n	801c114 <_dtoa_r+0x96c>
 801c15a:	2b39      	cmp	r3, #57	; 0x39
 801c15c:	d1d8      	bne.n	801c110 <_dtoa_r+0x968>
 801c15e:	9a02      	ldr	r2, [sp, #8]
 801c160:	2339      	movs	r3, #57	; 0x39
 801c162:	7013      	strb	r3, [r2, #0]
 801c164:	4643      	mov	r3, r8
 801c166:	4698      	mov	r8, r3
 801c168:	3b01      	subs	r3, #1
 801c16a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c16e:	2a39      	cmp	r2, #57	; 0x39
 801c170:	d051      	beq.n	801c216 <_dtoa_r+0xa6e>
 801c172:	3201      	adds	r2, #1
 801c174:	701a      	strb	r2, [r3, #0]
 801c176:	e746      	b.n	801c006 <_dtoa_r+0x85e>
 801c178:	2a00      	cmp	r2, #0
 801c17a:	dd03      	ble.n	801c184 <_dtoa_r+0x9dc>
 801c17c:	2b39      	cmp	r3, #57	; 0x39
 801c17e:	d0ee      	beq.n	801c15e <_dtoa_r+0x9b6>
 801c180:	3301      	adds	r3, #1
 801c182:	e7c7      	b.n	801c114 <_dtoa_r+0x96c>
 801c184:	9a04      	ldr	r2, [sp, #16]
 801c186:	9908      	ldr	r1, [sp, #32]
 801c188:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c18c:	428a      	cmp	r2, r1
 801c18e:	d02b      	beq.n	801c1e8 <_dtoa_r+0xa40>
 801c190:	4629      	mov	r1, r5
 801c192:	2300      	movs	r3, #0
 801c194:	220a      	movs	r2, #10
 801c196:	4630      	mov	r0, r6
 801c198:	f000 f9d4 	bl	801c544 <__multadd>
 801c19c:	45b9      	cmp	r9, r7
 801c19e:	4605      	mov	r5, r0
 801c1a0:	f04f 0300 	mov.w	r3, #0
 801c1a4:	f04f 020a 	mov.w	r2, #10
 801c1a8:	4649      	mov	r1, r9
 801c1aa:	4630      	mov	r0, r6
 801c1ac:	d107      	bne.n	801c1be <_dtoa_r+0xa16>
 801c1ae:	f000 f9c9 	bl	801c544 <__multadd>
 801c1b2:	4681      	mov	r9, r0
 801c1b4:	4607      	mov	r7, r0
 801c1b6:	9b04      	ldr	r3, [sp, #16]
 801c1b8:	3301      	adds	r3, #1
 801c1ba:	9304      	str	r3, [sp, #16]
 801c1bc:	e774      	b.n	801c0a8 <_dtoa_r+0x900>
 801c1be:	f000 f9c1 	bl	801c544 <__multadd>
 801c1c2:	4639      	mov	r1, r7
 801c1c4:	4681      	mov	r9, r0
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	220a      	movs	r2, #10
 801c1ca:	4630      	mov	r0, r6
 801c1cc:	f000 f9ba 	bl	801c544 <__multadd>
 801c1d0:	4607      	mov	r7, r0
 801c1d2:	e7f0      	b.n	801c1b6 <_dtoa_r+0xa0e>
 801c1d4:	f1ba 0f00 	cmp.w	sl, #0
 801c1d8:	9a01      	ldr	r2, [sp, #4]
 801c1da:	bfcc      	ite	gt
 801c1dc:	46d0      	movgt	r8, sl
 801c1de:	f04f 0801 	movle.w	r8, #1
 801c1e2:	4490      	add	r8, r2
 801c1e4:	f04f 0900 	mov.w	r9, #0
 801c1e8:	4629      	mov	r1, r5
 801c1ea:	2201      	movs	r2, #1
 801c1ec:	4630      	mov	r0, r6
 801c1ee:	9302      	str	r3, [sp, #8]
 801c1f0:	f000 fb56 	bl	801c8a0 <__lshift>
 801c1f4:	4621      	mov	r1, r4
 801c1f6:	4605      	mov	r5, r0
 801c1f8:	f000 fbbe 	bl	801c978 <__mcmp>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	dcb1      	bgt.n	801c164 <_dtoa_r+0x9bc>
 801c200:	d102      	bne.n	801c208 <_dtoa_r+0xa60>
 801c202:	9b02      	ldr	r3, [sp, #8]
 801c204:	07db      	lsls	r3, r3, #31
 801c206:	d4ad      	bmi.n	801c164 <_dtoa_r+0x9bc>
 801c208:	4643      	mov	r3, r8
 801c20a:	4698      	mov	r8, r3
 801c20c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c210:	2a30      	cmp	r2, #48	; 0x30
 801c212:	d0fa      	beq.n	801c20a <_dtoa_r+0xa62>
 801c214:	e6f7      	b.n	801c006 <_dtoa_r+0x85e>
 801c216:	9a01      	ldr	r2, [sp, #4]
 801c218:	429a      	cmp	r2, r3
 801c21a:	d1a4      	bne.n	801c166 <_dtoa_r+0x9be>
 801c21c:	f10b 0b01 	add.w	fp, fp, #1
 801c220:	2331      	movs	r3, #49	; 0x31
 801c222:	e778      	b.n	801c116 <_dtoa_r+0x96e>
 801c224:	4b14      	ldr	r3, [pc, #80]	; (801c278 <_dtoa_r+0xad0>)
 801c226:	f7ff bb2a 	b.w	801b87e <_dtoa_r+0xd6>
 801c22a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	f47f ab05 	bne.w	801b83c <_dtoa_r+0x94>
 801c232:	4b12      	ldr	r3, [pc, #72]	; (801c27c <_dtoa_r+0xad4>)
 801c234:	f7ff bb23 	b.w	801b87e <_dtoa_r+0xd6>
 801c238:	f1ba 0f00 	cmp.w	sl, #0
 801c23c:	dc03      	bgt.n	801c246 <_dtoa_r+0xa9e>
 801c23e:	9b06      	ldr	r3, [sp, #24]
 801c240:	2b02      	cmp	r3, #2
 801c242:	f73f aec8 	bgt.w	801bfd6 <_dtoa_r+0x82e>
 801c246:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c24a:	4621      	mov	r1, r4
 801c24c:	4628      	mov	r0, r5
 801c24e:	f7ff fa21 	bl	801b694 <quorem>
 801c252:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c256:	f808 3b01 	strb.w	r3, [r8], #1
 801c25a:	9a01      	ldr	r2, [sp, #4]
 801c25c:	eba8 0202 	sub.w	r2, r8, r2
 801c260:	4592      	cmp	sl, r2
 801c262:	ddb7      	ble.n	801c1d4 <_dtoa_r+0xa2c>
 801c264:	4629      	mov	r1, r5
 801c266:	2300      	movs	r3, #0
 801c268:	220a      	movs	r2, #10
 801c26a:	4630      	mov	r0, r6
 801c26c:	f000 f96a 	bl	801c544 <__multadd>
 801c270:	4605      	mov	r5, r0
 801c272:	e7ea      	b.n	801c24a <_dtoa_r+0xaa2>
 801c274:	08020fb3 	.word	0x08020fb3
 801c278:	08020eee 	.word	0x08020eee
 801c27c:	08020f4e 	.word	0x08020f4e

0801c280 <_free_r>:
 801c280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c282:	2900      	cmp	r1, #0
 801c284:	d044      	beq.n	801c310 <_free_r+0x90>
 801c286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c28a:	9001      	str	r0, [sp, #4]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	f1a1 0404 	sub.w	r4, r1, #4
 801c292:	bfb8      	it	lt
 801c294:	18e4      	addlt	r4, r4, r3
 801c296:	f000 f8e7 	bl	801c468 <__malloc_lock>
 801c29a:	4a1e      	ldr	r2, [pc, #120]	; (801c314 <_free_r+0x94>)
 801c29c:	9801      	ldr	r0, [sp, #4]
 801c29e:	6813      	ldr	r3, [r2, #0]
 801c2a0:	b933      	cbnz	r3, 801c2b0 <_free_r+0x30>
 801c2a2:	6063      	str	r3, [r4, #4]
 801c2a4:	6014      	str	r4, [r2, #0]
 801c2a6:	b003      	add	sp, #12
 801c2a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2ac:	f000 b8e2 	b.w	801c474 <__malloc_unlock>
 801c2b0:	42a3      	cmp	r3, r4
 801c2b2:	d908      	bls.n	801c2c6 <_free_r+0x46>
 801c2b4:	6825      	ldr	r5, [r4, #0]
 801c2b6:	1961      	adds	r1, r4, r5
 801c2b8:	428b      	cmp	r3, r1
 801c2ba:	bf01      	itttt	eq
 801c2bc:	6819      	ldreq	r1, [r3, #0]
 801c2be:	685b      	ldreq	r3, [r3, #4]
 801c2c0:	1949      	addeq	r1, r1, r5
 801c2c2:	6021      	streq	r1, [r4, #0]
 801c2c4:	e7ed      	b.n	801c2a2 <_free_r+0x22>
 801c2c6:	461a      	mov	r2, r3
 801c2c8:	685b      	ldr	r3, [r3, #4]
 801c2ca:	b10b      	cbz	r3, 801c2d0 <_free_r+0x50>
 801c2cc:	42a3      	cmp	r3, r4
 801c2ce:	d9fa      	bls.n	801c2c6 <_free_r+0x46>
 801c2d0:	6811      	ldr	r1, [r2, #0]
 801c2d2:	1855      	adds	r5, r2, r1
 801c2d4:	42a5      	cmp	r5, r4
 801c2d6:	d10b      	bne.n	801c2f0 <_free_r+0x70>
 801c2d8:	6824      	ldr	r4, [r4, #0]
 801c2da:	4421      	add	r1, r4
 801c2dc:	1854      	adds	r4, r2, r1
 801c2de:	42a3      	cmp	r3, r4
 801c2e0:	6011      	str	r1, [r2, #0]
 801c2e2:	d1e0      	bne.n	801c2a6 <_free_r+0x26>
 801c2e4:	681c      	ldr	r4, [r3, #0]
 801c2e6:	685b      	ldr	r3, [r3, #4]
 801c2e8:	6053      	str	r3, [r2, #4]
 801c2ea:	440c      	add	r4, r1
 801c2ec:	6014      	str	r4, [r2, #0]
 801c2ee:	e7da      	b.n	801c2a6 <_free_r+0x26>
 801c2f0:	d902      	bls.n	801c2f8 <_free_r+0x78>
 801c2f2:	230c      	movs	r3, #12
 801c2f4:	6003      	str	r3, [r0, #0]
 801c2f6:	e7d6      	b.n	801c2a6 <_free_r+0x26>
 801c2f8:	6825      	ldr	r5, [r4, #0]
 801c2fa:	1961      	adds	r1, r4, r5
 801c2fc:	428b      	cmp	r3, r1
 801c2fe:	bf04      	itt	eq
 801c300:	6819      	ldreq	r1, [r3, #0]
 801c302:	685b      	ldreq	r3, [r3, #4]
 801c304:	6063      	str	r3, [r4, #4]
 801c306:	bf04      	itt	eq
 801c308:	1949      	addeq	r1, r1, r5
 801c30a:	6021      	streq	r1, [r4, #0]
 801c30c:	6054      	str	r4, [r2, #4]
 801c30e:	e7ca      	b.n	801c2a6 <_free_r+0x26>
 801c310:	b003      	add	sp, #12
 801c312:	bd30      	pop	{r4, r5, pc}
 801c314:	200072fc 	.word	0x200072fc

0801c318 <malloc>:
 801c318:	4b02      	ldr	r3, [pc, #8]	; (801c324 <malloc+0xc>)
 801c31a:	4601      	mov	r1, r0
 801c31c:	6818      	ldr	r0, [r3, #0]
 801c31e:	f000 b823 	b.w	801c368 <_malloc_r>
 801c322:	bf00      	nop
 801c324:	200000b8 	.word	0x200000b8

0801c328 <sbrk_aligned>:
 801c328:	b570      	push	{r4, r5, r6, lr}
 801c32a:	4e0e      	ldr	r6, [pc, #56]	; (801c364 <sbrk_aligned+0x3c>)
 801c32c:	460c      	mov	r4, r1
 801c32e:	6831      	ldr	r1, [r6, #0]
 801c330:	4605      	mov	r5, r0
 801c332:	b911      	cbnz	r1, 801c33a <sbrk_aligned+0x12>
 801c334:	f001 f800 	bl	801d338 <_sbrk_r>
 801c338:	6030      	str	r0, [r6, #0]
 801c33a:	4621      	mov	r1, r4
 801c33c:	4628      	mov	r0, r5
 801c33e:	f000 fffb 	bl	801d338 <_sbrk_r>
 801c342:	1c43      	adds	r3, r0, #1
 801c344:	d00a      	beq.n	801c35c <sbrk_aligned+0x34>
 801c346:	1cc4      	adds	r4, r0, #3
 801c348:	f024 0403 	bic.w	r4, r4, #3
 801c34c:	42a0      	cmp	r0, r4
 801c34e:	d007      	beq.n	801c360 <sbrk_aligned+0x38>
 801c350:	1a21      	subs	r1, r4, r0
 801c352:	4628      	mov	r0, r5
 801c354:	f000 fff0 	bl	801d338 <_sbrk_r>
 801c358:	3001      	adds	r0, #1
 801c35a:	d101      	bne.n	801c360 <sbrk_aligned+0x38>
 801c35c:	f04f 34ff 	mov.w	r4, #4294967295
 801c360:	4620      	mov	r0, r4
 801c362:	bd70      	pop	{r4, r5, r6, pc}
 801c364:	20007300 	.word	0x20007300

0801c368 <_malloc_r>:
 801c368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c36c:	1ccd      	adds	r5, r1, #3
 801c36e:	f025 0503 	bic.w	r5, r5, #3
 801c372:	3508      	adds	r5, #8
 801c374:	2d0c      	cmp	r5, #12
 801c376:	bf38      	it	cc
 801c378:	250c      	movcc	r5, #12
 801c37a:	2d00      	cmp	r5, #0
 801c37c:	4607      	mov	r7, r0
 801c37e:	db01      	blt.n	801c384 <_malloc_r+0x1c>
 801c380:	42a9      	cmp	r1, r5
 801c382:	d905      	bls.n	801c390 <_malloc_r+0x28>
 801c384:	230c      	movs	r3, #12
 801c386:	603b      	str	r3, [r7, #0]
 801c388:	2600      	movs	r6, #0
 801c38a:	4630      	mov	r0, r6
 801c38c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c464 <_malloc_r+0xfc>
 801c394:	f000 f868 	bl	801c468 <__malloc_lock>
 801c398:	f8d8 3000 	ldr.w	r3, [r8]
 801c39c:	461c      	mov	r4, r3
 801c39e:	bb5c      	cbnz	r4, 801c3f8 <_malloc_r+0x90>
 801c3a0:	4629      	mov	r1, r5
 801c3a2:	4638      	mov	r0, r7
 801c3a4:	f7ff ffc0 	bl	801c328 <sbrk_aligned>
 801c3a8:	1c43      	adds	r3, r0, #1
 801c3aa:	4604      	mov	r4, r0
 801c3ac:	d155      	bne.n	801c45a <_malloc_r+0xf2>
 801c3ae:	f8d8 4000 	ldr.w	r4, [r8]
 801c3b2:	4626      	mov	r6, r4
 801c3b4:	2e00      	cmp	r6, #0
 801c3b6:	d145      	bne.n	801c444 <_malloc_r+0xdc>
 801c3b8:	2c00      	cmp	r4, #0
 801c3ba:	d048      	beq.n	801c44e <_malloc_r+0xe6>
 801c3bc:	6823      	ldr	r3, [r4, #0]
 801c3be:	4631      	mov	r1, r6
 801c3c0:	4638      	mov	r0, r7
 801c3c2:	eb04 0903 	add.w	r9, r4, r3
 801c3c6:	f000 ffb7 	bl	801d338 <_sbrk_r>
 801c3ca:	4581      	cmp	r9, r0
 801c3cc:	d13f      	bne.n	801c44e <_malloc_r+0xe6>
 801c3ce:	6821      	ldr	r1, [r4, #0]
 801c3d0:	1a6d      	subs	r5, r5, r1
 801c3d2:	4629      	mov	r1, r5
 801c3d4:	4638      	mov	r0, r7
 801c3d6:	f7ff ffa7 	bl	801c328 <sbrk_aligned>
 801c3da:	3001      	adds	r0, #1
 801c3dc:	d037      	beq.n	801c44e <_malloc_r+0xe6>
 801c3de:	6823      	ldr	r3, [r4, #0]
 801c3e0:	442b      	add	r3, r5
 801c3e2:	6023      	str	r3, [r4, #0]
 801c3e4:	f8d8 3000 	ldr.w	r3, [r8]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d038      	beq.n	801c45e <_malloc_r+0xf6>
 801c3ec:	685a      	ldr	r2, [r3, #4]
 801c3ee:	42a2      	cmp	r2, r4
 801c3f0:	d12b      	bne.n	801c44a <_malloc_r+0xe2>
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	605a      	str	r2, [r3, #4]
 801c3f6:	e00f      	b.n	801c418 <_malloc_r+0xb0>
 801c3f8:	6822      	ldr	r2, [r4, #0]
 801c3fa:	1b52      	subs	r2, r2, r5
 801c3fc:	d41f      	bmi.n	801c43e <_malloc_r+0xd6>
 801c3fe:	2a0b      	cmp	r2, #11
 801c400:	d917      	bls.n	801c432 <_malloc_r+0xca>
 801c402:	1961      	adds	r1, r4, r5
 801c404:	42a3      	cmp	r3, r4
 801c406:	6025      	str	r5, [r4, #0]
 801c408:	bf18      	it	ne
 801c40a:	6059      	strne	r1, [r3, #4]
 801c40c:	6863      	ldr	r3, [r4, #4]
 801c40e:	bf08      	it	eq
 801c410:	f8c8 1000 	streq.w	r1, [r8]
 801c414:	5162      	str	r2, [r4, r5]
 801c416:	604b      	str	r3, [r1, #4]
 801c418:	4638      	mov	r0, r7
 801c41a:	f104 060b 	add.w	r6, r4, #11
 801c41e:	f000 f829 	bl	801c474 <__malloc_unlock>
 801c422:	f026 0607 	bic.w	r6, r6, #7
 801c426:	1d23      	adds	r3, r4, #4
 801c428:	1af2      	subs	r2, r6, r3
 801c42a:	d0ae      	beq.n	801c38a <_malloc_r+0x22>
 801c42c:	1b9b      	subs	r3, r3, r6
 801c42e:	50a3      	str	r3, [r4, r2]
 801c430:	e7ab      	b.n	801c38a <_malloc_r+0x22>
 801c432:	42a3      	cmp	r3, r4
 801c434:	6862      	ldr	r2, [r4, #4]
 801c436:	d1dd      	bne.n	801c3f4 <_malloc_r+0x8c>
 801c438:	f8c8 2000 	str.w	r2, [r8]
 801c43c:	e7ec      	b.n	801c418 <_malloc_r+0xb0>
 801c43e:	4623      	mov	r3, r4
 801c440:	6864      	ldr	r4, [r4, #4]
 801c442:	e7ac      	b.n	801c39e <_malloc_r+0x36>
 801c444:	4634      	mov	r4, r6
 801c446:	6876      	ldr	r6, [r6, #4]
 801c448:	e7b4      	b.n	801c3b4 <_malloc_r+0x4c>
 801c44a:	4613      	mov	r3, r2
 801c44c:	e7cc      	b.n	801c3e8 <_malloc_r+0x80>
 801c44e:	230c      	movs	r3, #12
 801c450:	603b      	str	r3, [r7, #0]
 801c452:	4638      	mov	r0, r7
 801c454:	f000 f80e 	bl	801c474 <__malloc_unlock>
 801c458:	e797      	b.n	801c38a <_malloc_r+0x22>
 801c45a:	6025      	str	r5, [r4, #0]
 801c45c:	e7dc      	b.n	801c418 <_malloc_r+0xb0>
 801c45e:	605b      	str	r3, [r3, #4]
 801c460:	deff      	udf	#255	; 0xff
 801c462:	bf00      	nop
 801c464:	200072fc 	.word	0x200072fc

0801c468 <__malloc_lock>:
 801c468:	4801      	ldr	r0, [pc, #4]	; (801c470 <__malloc_lock+0x8>)
 801c46a:	f7ff b8e4 	b.w	801b636 <__retarget_lock_acquire_recursive>
 801c46e:	bf00      	nop
 801c470:	200072f8 	.word	0x200072f8

0801c474 <__malloc_unlock>:
 801c474:	4801      	ldr	r0, [pc, #4]	; (801c47c <__malloc_unlock+0x8>)
 801c476:	f7ff b8df 	b.w	801b638 <__retarget_lock_release_recursive>
 801c47a:	bf00      	nop
 801c47c:	200072f8 	.word	0x200072f8

0801c480 <_Balloc>:
 801c480:	b570      	push	{r4, r5, r6, lr}
 801c482:	69c6      	ldr	r6, [r0, #28]
 801c484:	4604      	mov	r4, r0
 801c486:	460d      	mov	r5, r1
 801c488:	b976      	cbnz	r6, 801c4a8 <_Balloc+0x28>
 801c48a:	2010      	movs	r0, #16
 801c48c:	f7ff ff44 	bl	801c318 <malloc>
 801c490:	4602      	mov	r2, r0
 801c492:	61e0      	str	r0, [r4, #28]
 801c494:	b920      	cbnz	r0, 801c4a0 <_Balloc+0x20>
 801c496:	4b18      	ldr	r3, [pc, #96]	; (801c4f8 <_Balloc+0x78>)
 801c498:	4818      	ldr	r0, [pc, #96]	; (801c4fc <_Balloc+0x7c>)
 801c49a:	216b      	movs	r1, #107	; 0x6b
 801c49c:	f7ff f8dc 	bl	801b658 <__assert_func>
 801c4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c4a4:	6006      	str	r6, [r0, #0]
 801c4a6:	60c6      	str	r6, [r0, #12]
 801c4a8:	69e6      	ldr	r6, [r4, #28]
 801c4aa:	68f3      	ldr	r3, [r6, #12]
 801c4ac:	b183      	cbz	r3, 801c4d0 <_Balloc+0x50>
 801c4ae:	69e3      	ldr	r3, [r4, #28]
 801c4b0:	68db      	ldr	r3, [r3, #12]
 801c4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c4b6:	b9b8      	cbnz	r0, 801c4e8 <_Balloc+0x68>
 801c4b8:	2101      	movs	r1, #1
 801c4ba:	fa01 f605 	lsl.w	r6, r1, r5
 801c4be:	1d72      	adds	r2, r6, #5
 801c4c0:	0092      	lsls	r2, r2, #2
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	f000 ff4f 	bl	801d366 <_calloc_r>
 801c4c8:	b160      	cbz	r0, 801c4e4 <_Balloc+0x64>
 801c4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c4ce:	e00e      	b.n	801c4ee <_Balloc+0x6e>
 801c4d0:	2221      	movs	r2, #33	; 0x21
 801c4d2:	2104      	movs	r1, #4
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f000 ff46 	bl	801d366 <_calloc_r>
 801c4da:	69e3      	ldr	r3, [r4, #28]
 801c4dc:	60f0      	str	r0, [r6, #12]
 801c4de:	68db      	ldr	r3, [r3, #12]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d1e4      	bne.n	801c4ae <_Balloc+0x2e>
 801c4e4:	2000      	movs	r0, #0
 801c4e6:	bd70      	pop	{r4, r5, r6, pc}
 801c4e8:	6802      	ldr	r2, [r0, #0]
 801c4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c4f4:	e7f7      	b.n	801c4e6 <_Balloc+0x66>
 801c4f6:	bf00      	nop
 801c4f8:	08020d6e 	.word	0x08020d6e
 801c4fc:	08020fc4 	.word	0x08020fc4

0801c500 <_Bfree>:
 801c500:	b570      	push	{r4, r5, r6, lr}
 801c502:	69c6      	ldr	r6, [r0, #28]
 801c504:	4605      	mov	r5, r0
 801c506:	460c      	mov	r4, r1
 801c508:	b976      	cbnz	r6, 801c528 <_Bfree+0x28>
 801c50a:	2010      	movs	r0, #16
 801c50c:	f7ff ff04 	bl	801c318 <malloc>
 801c510:	4602      	mov	r2, r0
 801c512:	61e8      	str	r0, [r5, #28]
 801c514:	b920      	cbnz	r0, 801c520 <_Bfree+0x20>
 801c516:	4b09      	ldr	r3, [pc, #36]	; (801c53c <_Bfree+0x3c>)
 801c518:	4809      	ldr	r0, [pc, #36]	; (801c540 <_Bfree+0x40>)
 801c51a:	218f      	movs	r1, #143	; 0x8f
 801c51c:	f7ff f89c 	bl	801b658 <__assert_func>
 801c520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c524:	6006      	str	r6, [r0, #0]
 801c526:	60c6      	str	r6, [r0, #12]
 801c528:	b13c      	cbz	r4, 801c53a <_Bfree+0x3a>
 801c52a:	69eb      	ldr	r3, [r5, #28]
 801c52c:	6862      	ldr	r2, [r4, #4]
 801c52e:	68db      	ldr	r3, [r3, #12]
 801c530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c534:	6021      	str	r1, [r4, #0]
 801c536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c53a:	bd70      	pop	{r4, r5, r6, pc}
 801c53c:	08020d6e 	.word	0x08020d6e
 801c540:	08020fc4 	.word	0x08020fc4

0801c544 <__multadd>:
 801c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c548:	690d      	ldr	r5, [r1, #16]
 801c54a:	4607      	mov	r7, r0
 801c54c:	460c      	mov	r4, r1
 801c54e:	461e      	mov	r6, r3
 801c550:	f101 0c14 	add.w	ip, r1, #20
 801c554:	2000      	movs	r0, #0
 801c556:	f8dc 3000 	ldr.w	r3, [ip]
 801c55a:	b299      	uxth	r1, r3
 801c55c:	fb02 6101 	mla	r1, r2, r1, r6
 801c560:	0c1e      	lsrs	r6, r3, #16
 801c562:	0c0b      	lsrs	r3, r1, #16
 801c564:	fb02 3306 	mla	r3, r2, r6, r3
 801c568:	b289      	uxth	r1, r1
 801c56a:	3001      	adds	r0, #1
 801c56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c570:	4285      	cmp	r5, r0
 801c572:	f84c 1b04 	str.w	r1, [ip], #4
 801c576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c57a:	dcec      	bgt.n	801c556 <__multadd+0x12>
 801c57c:	b30e      	cbz	r6, 801c5c2 <__multadd+0x7e>
 801c57e:	68a3      	ldr	r3, [r4, #8]
 801c580:	42ab      	cmp	r3, r5
 801c582:	dc19      	bgt.n	801c5b8 <__multadd+0x74>
 801c584:	6861      	ldr	r1, [r4, #4]
 801c586:	4638      	mov	r0, r7
 801c588:	3101      	adds	r1, #1
 801c58a:	f7ff ff79 	bl	801c480 <_Balloc>
 801c58e:	4680      	mov	r8, r0
 801c590:	b928      	cbnz	r0, 801c59e <__multadd+0x5a>
 801c592:	4602      	mov	r2, r0
 801c594:	4b0c      	ldr	r3, [pc, #48]	; (801c5c8 <__multadd+0x84>)
 801c596:	480d      	ldr	r0, [pc, #52]	; (801c5cc <__multadd+0x88>)
 801c598:	21ba      	movs	r1, #186	; 0xba
 801c59a:	f7ff f85d 	bl	801b658 <__assert_func>
 801c59e:	6922      	ldr	r2, [r4, #16]
 801c5a0:	3202      	adds	r2, #2
 801c5a2:	f104 010c 	add.w	r1, r4, #12
 801c5a6:	0092      	lsls	r2, r2, #2
 801c5a8:	300c      	adds	r0, #12
 801c5aa:	f7ff f846 	bl	801b63a <memcpy>
 801c5ae:	4621      	mov	r1, r4
 801c5b0:	4638      	mov	r0, r7
 801c5b2:	f7ff ffa5 	bl	801c500 <_Bfree>
 801c5b6:	4644      	mov	r4, r8
 801c5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c5bc:	3501      	adds	r5, #1
 801c5be:	615e      	str	r6, [r3, #20]
 801c5c0:	6125      	str	r5, [r4, #16]
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5c8:	08020fb3 	.word	0x08020fb3
 801c5cc:	08020fc4 	.word	0x08020fc4

0801c5d0 <__hi0bits>:
 801c5d0:	0c03      	lsrs	r3, r0, #16
 801c5d2:	041b      	lsls	r3, r3, #16
 801c5d4:	b9d3      	cbnz	r3, 801c60c <__hi0bits+0x3c>
 801c5d6:	0400      	lsls	r0, r0, #16
 801c5d8:	2310      	movs	r3, #16
 801c5da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c5de:	bf04      	itt	eq
 801c5e0:	0200      	lsleq	r0, r0, #8
 801c5e2:	3308      	addeq	r3, #8
 801c5e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c5e8:	bf04      	itt	eq
 801c5ea:	0100      	lsleq	r0, r0, #4
 801c5ec:	3304      	addeq	r3, #4
 801c5ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c5f2:	bf04      	itt	eq
 801c5f4:	0080      	lsleq	r0, r0, #2
 801c5f6:	3302      	addeq	r3, #2
 801c5f8:	2800      	cmp	r0, #0
 801c5fa:	db05      	blt.n	801c608 <__hi0bits+0x38>
 801c5fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c600:	f103 0301 	add.w	r3, r3, #1
 801c604:	bf08      	it	eq
 801c606:	2320      	moveq	r3, #32
 801c608:	4618      	mov	r0, r3
 801c60a:	4770      	bx	lr
 801c60c:	2300      	movs	r3, #0
 801c60e:	e7e4      	b.n	801c5da <__hi0bits+0xa>

0801c610 <__lo0bits>:
 801c610:	6803      	ldr	r3, [r0, #0]
 801c612:	f013 0207 	ands.w	r2, r3, #7
 801c616:	d00c      	beq.n	801c632 <__lo0bits+0x22>
 801c618:	07d9      	lsls	r1, r3, #31
 801c61a:	d422      	bmi.n	801c662 <__lo0bits+0x52>
 801c61c:	079a      	lsls	r2, r3, #30
 801c61e:	bf49      	itett	mi
 801c620:	085b      	lsrmi	r3, r3, #1
 801c622:	089b      	lsrpl	r3, r3, #2
 801c624:	6003      	strmi	r3, [r0, #0]
 801c626:	2201      	movmi	r2, #1
 801c628:	bf5c      	itt	pl
 801c62a:	6003      	strpl	r3, [r0, #0]
 801c62c:	2202      	movpl	r2, #2
 801c62e:	4610      	mov	r0, r2
 801c630:	4770      	bx	lr
 801c632:	b299      	uxth	r1, r3
 801c634:	b909      	cbnz	r1, 801c63a <__lo0bits+0x2a>
 801c636:	0c1b      	lsrs	r3, r3, #16
 801c638:	2210      	movs	r2, #16
 801c63a:	b2d9      	uxtb	r1, r3
 801c63c:	b909      	cbnz	r1, 801c642 <__lo0bits+0x32>
 801c63e:	3208      	adds	r2, #8
 801c640:	0a1b      	lsrs	r3, r3, #8
 801c642:	0719      	lsls	r1, r3, #28
 801c644:	bf04      	itt	eq
 801c646:	091b      	lsreq	r3, r3, #4
 801c648:	3204      	addeq	r2, #4
 801c64a:	0799      	lsls	r1, r3, #30
 801c64c:	bf04      	itt	eq
 801c64e:	089b      	lsreq	r3, r3, #2
 801c650:	3202      	addeq	r2, #2
 801c652:	07d9      	lsls	r1, r3, #31
 801c654:	d403      	bmi.n	801c65e <__lo0bits+0x4e>
 801c656:	085b      	lsrs	r3, r3, #1
 801c658:	f102 0201 	add.w	r2, r2, #1
 801c65c:	d003      	beq.n	801c666 <__lo0bits+0x56>
 801c65e:	6003      	str	r3, [r0, #0]
 801c660:	e7e5      	b.n	801c62e <__lo0bits+0x1e>
 801c662:	2200      	movs	r2, #0
 801c664:	e7e3      	b.n	801c62e <__lo0bits+0x1e>
 801c666:	2220      	movs	r2, #32
 801c668:	e7e1      	b.n	801c62e <__lo0bits+0x1e>
	...

0801c66c <__i2b>:
 801c66c:	b510      	push	{r4, lr}
 801c66e:	460c      	mov	r4, r1
 801c670:	2101      	movs	r1, #1
 801c672:	f7ff ff05 	bl	801c480 <_Balloc>
 801c676:	4602      	mov	r2, r0
 801c678:	b928      	cbnz	r0, 801c686 <__i2b+0x1a>
 801c67a:	4b05      	ldr	r3, [pc, #20]	; (801c690 <__i2b+0x24>)
 801c67c:	4805      	ldr	r0, [pc, #20]	; (801c694 <__i2b+0x28>)
 801c67e:	f240 1145 	movw	r1, #325	; 0x145
 801c682:	f7fe ffe9 	bl	801b658 <__assert_func>
 801c686:	2301      	movs	r3, #1
 801c688:	6144      	str	r4, [r0, #20]
 801c68a:	6103      	str	r3, [r0, #16]
 801c68c:	bd10      	pop	{r4, pc}
 801c68e:	bf00      	nop
 801c690:	08020fb3 	.word	0x08020fb3
 801c694:	08020fc4 	.word	0x08020fc4

0801c698 <__multiply>:
 801c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69c:	4691      	mov	r9, r2
 801c69e:	690a      	ldr	r2, [r1, #16]
 801c6a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c6a4:	429a      	cmp	r2, r3
 801c6a6:	bfb8      	it	lt
 801c6a8:	460b      	movlt	r3, r1
 801c6aa:	460c      	mov	r4, r1
 801c6ac:	bfbc      	itt	lt
 801c6ae:	464c      	movlt	r4, r9
 801c6b0:	4699      	movlt	r9, r3
 801c6b2:	6927      	ldr	r7, [r4, #16]
 801c6b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c6b8:	68a3      	ldr	r3, [r4, #8]
 801c6ba:	6861      	ldr	r1, [r4, #4]
 801c6bc:	eb07 060a 	add.w	r6, r7, sl
 801c6c0:	42b3      	cmp	r3, r6
 801c6c2:	b085      	sub	sp, #20
 801c6c4:	bfb8      	it	lt
 801c6c6:	3101      	addlt	r1, #1
 801c6c8:	f7ff feda 	bl	801c480 <_Balloc>
 801c6cc:	b930      	cbnz	r0, 801c6dc <__multiply+0x44>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	4b44      	ldr	r3, [pc, #272]	; (801c7e4 <__multiply+0x14c>)
 801c6d2:	4845      	ldr	r0, [pc, #276]	; (801c7e8 <__multiply+0x150>)
 801c6d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c6d8:	f7fe ffbe 	bl	801b658 <__assert_func>
 801c6dc:	f100 0514 	add.w	r5, r0, #20
 801c6e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c6e4:	462b      	mov	r3, r5
 801c6e6:	2200      	movs	r2, #0
 801c6e8:	4543      	cmp	r3, r8
 801c6ea:	d321      	bcc.n	801c730 <__multiply+0x98>
 801c6ec:	f104 0314 	add.w	r3, r4, #20
 801c6f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c6f4:	f109 0314 	add.w	r3, r9, #20
 801c6f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c6fc:	9202      	str	r2, [sp, #8]
 801c6fe:	1b3a      	subs	r2, r7, r4
 801c700:	3a15      	subs	r2, #21
 801c702:	f022 0203 	bic.w	r2, r2, #3
 801c706:	3204      	adds	r2, #4
 801c708:	f104 0115 	add.w	r1, r4, #21
 801c70c:	428f      	cmp	r7, r1
 801c70e:	bf38      	it	cc
 801c710:	2204      	movcc	r2, #4
 801c712:	9201      	str	r2, [sp, #4]
 801c714:	9a02      	ldr	r2, [sp, #8]
 801c716:	9303      	str	r3, [sp, #12]
 801c718:	429a      	cmp	r2, r3
 801c71a:	d80c      	bhi.n	801c736 <__multiply+0x9e>
 801c71c:	2e00      	cmp	r6, #0
 801c71e:	dd03      	ble.n	801c728 <__multiply+0x90>
 801c720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c724:	2b00      	cmp	r3, #0
 801c726:	d05b      	beq.n	801c7e0 <__multiply+0x148>
 801c728:	6106      	str	r6, [r0, #16]
 801c72a:	b005      	add	sp, #20
 801c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c730:	f843 2b04 	str.w	r2, [r3], #4
 801c734:	e7d8      	b.n	801c6e8 <__multiply+0x50>
 801c736:	f8b3 a000 	ldrh.w	sl, [r3]
 801c73a:	f1ba 0f00 	cmp.w	sl, #0
 801c73e:	d024      	beq.n	801c78a <__multiply+0xf2>
 801c740:	f104 0e14 	add.w	lr, r4, #20
 801c744:	46a9      	mov	r9, r5
 801c746:	f04f 0c00 	mov.w	ip, #0
 801c74a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c74e:	f8d9 1000 	ldr.w	r1, [r9]
 801c752:	fa1f fb82 	uxth.w	fp, r2
 801c756:	b289      	uxth	r1, r1
 801c758:	fb0a 110b 	mla	r1, sl, fp, r1
 801c75c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c760:	f8d9 2000 	ldr.w	r2, [r9]
 801c764:	4461      	add	r1, ip
 801c766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c76a:	fb0a c20b 	mla	r2, sl, fp, ip
 801c76e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c772:	b289      	uxth	r1, r1
 801c774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c778:	4577      	cmp	r7, lr
 801c77a:	f849 1b04 	str.w	r1, [r9], #4
 801c77e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c782:	d8e2      	bhi.n	801c74a <__multiply+0xb2>
 801c784:	9a01      	ldr	r2, [sp, #4]
 801c786:	f845 c002 	str.w	ip, [r5, r2]
 801c78a:	9a03      	ldr	r2, [sp, #12]
 801c78c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c790:	3304      	adds	r3, #4
 801c792:	f1b9 0f00 	cmp.w	r9, #0
 801c796:	d021      	beq.n	801c7dc <__multiply+0x144>
 801c798:	6829      	ldr	r1, [r5, #0]
 801c79a:	f104 0c14 	add.w	ip, r4, #20
 801c79e:	46ae      	mov	lr, r5
 801c7a0:	f04f 0a00 	mov.w	sl, #0
 801c7a4:	f8bc b000 	ldrh.w	fp, [ip]
 801c7a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c7ac:	fb09 220b 	mla	r2, r9, fp, r2
 801c7b0:	4452      	add	r2, sl
 801c7b2:	b289      	uxth	r1, r1
 801c7b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c7b8:	f84e 1b04 	str.w	r1, [lr], #4
 801c7bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c7c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c7c4:	f8be 1000 	ldrh.w	r1, [lr]
 801c7c8:	fb09 110a 	mla	r1, r9, sl, r1
 801c7cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c7d0:	4567      	cmp	r7, ip
 801c7d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c7d6:	d8e5      	bhi.n	801c7a4 <__multiply+0x10c>
 801c7d8:	9a01      	ldr	r2, [sp, #4]
 801c7da:	50a9      	str	r1, [r5, r2]
 801c7dc:	3504      	adds	r5, #4
 801c7de:	e799      	b.n	801c714 <__multiply+0x7c>
 801c7e0:	3e01      	subs	r6, #1
 801c7e2:	e79b      	b.n	801c71c <__multiply+0x84>
 801c7e4:	08020fb3 	.word	0x08020fb3
 801c7e8:	08020fc4 	.word	0x08020fc4

0801c7ec <__pow5mult>:
 801c7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7f0:	4615      	mov	r5, r2
 801c7f2:	f012 0203 	ands.w	r2, r2, #3
 801c7f6:	4606      	mov	r6, r0
 801c7f8:	460f      	mov	r7, r1
 801c7fa:	d007      	beq.n	801c80c <__pow5mult+0x20>
 801c7fc:	4c25      	ldr	r4, [pc, #148]	; (801c894 <__pow5mult+0xa8>)
 801c7fe:	3a01      	subs	r2, #1
 801c800:	2300      	movs	r3, #0
 801c802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c806:	f7ff fe9d 	bl	801c544 <__multadd>
 801c80a:	4607      	mov	r7, r0
 801c80c:	10ad      	asrs	r5, r5, #2
 801c80e:	d03d      	beq.n	801c88c <__pow5mult+0xa0>
 801c810:	69f4      	ldr	r4, [r6, #28]
 801c812:	b97c      	cbnz	r4, 801c834 <__pow5mult+0x48>
 801c814:	2010      	movs	r0, #16
 801c816:	f7ff fd7f 	bl	801c318 <malloc>
 801c81a:	4602      	mov	r2, r0
 801c81c:	61f0      	str	r0, [r6, #28]
 801c81e:	b928      	cbnz	r0, 801c82c <__pow5mult+0x40>
 801c820:	4b1d      	ldr	r3, [pc, #116]	; (801c898 <__pow5mult+0xac>)
 801c822:	481e      	ldr	r0, [pc, #120]	; (801c89c <__pow5mult+0xb0>)
 801c824:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c828:	f7fe ff16 	bl	801b658 <__assert_func>
 801c82c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c830:	6004      	str	r4, [r0, #0]
 801c832:	60c4      	str	r4, [r0, #12]
 801c834:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c83c:	b94c      	cbnz	r4, 801c852 <__pow5mult+0x66>
 801c83e:	f240 2171 	movw	r1, #625	; 0x271
 801c842:	4630      	mov	r0, r6
 801c844:	f7ff ff12 	bl	801c66c <__i2b>
 801c848:	2300      	movs	r3, #0
 801c84a:	f8c8 0008 	str.w	r0, [r8, #8]
 801c84e:	4604      	mov	r4, r0
 801c850:	6003      	str	r3, [r0, #0]
 801c852:	f04f 0900 	mov.w	r9, #0
 801c856:	07eb      	lsls	r3, r5, #31
 801c858:	d50a      	bpl.n	801c870 <__pow5mult+0x84>
 801c85a:	4639      	mov	r1, r7
 801c85c:	4622      	mov	r2, r4
 801c85e:	4630      	mov	r0, r6
 801c860:	f7ff ff1a 	bl	801c698 <__multiply>
 801c864:	4639      	mov	r1, r7
 801c866:	4680      	mov	r8, r0
 801c868:	4630      	mov	r0, r6
 801c86a:	f7ff fe49 	bl	801c500 <_Bfree>
 801c86e:	4647      	mov	r7, r8
 801c870:	106d      	asrs	r5, r5, #1
 801c872:	d00b      	beq.n	801c88c <__pow5mult+0xa0>
 801c874:	6820      	ldr	r0, [r4, #0]
 801c876:	b938      	cbnz	r0, 801c888 <__pow5mult+0x9c>
 801c878:	4622      	mov	r2, r4
 801c87a:	4621      	mov	r1, r4
 801c87c:	4630      	mov	r0, r6
 801c87e:	f7ff ff0b 	bl	801c698 <__multiply>
 801c882:	6020      	str	r0, [r4, #0]
 801c884:	f8c0 9000 	str.w	r9, [r0]
 801c888:	4604      	mov	r4, r0
 801c88a:	e7e4      	b.n	801c856 <__pow5mult+0x6a>
 801c88c:	4638      	mov	r0, r7
 801c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c892:	bf00      	nop
 801c894:	08021110 	.word	0x08021110
 801c898:	08020d6e 	.word	0x08020d6e
 801c89c:	08020fc4 	.word	0x08020fc4

0801c8a0 <__lshift>:
 801c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8a4:	460c      	mov	r4, r1
 801c8a6:	6849      	ldr	r1, [r1, #4]
 801c8a8:	6923      	ldr	r3, [r4, #16]
 801c8aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c8ae:	68a3      	ldr	r3, [r4, #8]
 801c8b0:	4607      	mov	r7, r0
 801c8b2:	4691      	mov	r9, r2
 801c8b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c8b8:	f108 0601 	add.w	r6, r8, #1
 801c8bc:	42b3      	cmp	r3, r6
 801c8be:	db0b      	blt.n	801c8d8 <__lshift+0x38>
 801c8c0:	4638      	mov	r0, r7
 801c8c2:	f7ff fddd 	bl	801c480 <_Balloc>
 801c8c6:	4605      	mov	r5, r0
 801c8c8:	b948      	cbnz	r0, 801c8de <__lshift+0x3e>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	4b28      	ldr	r3, [pc, #160]	; (801c970 <__lshift+0xd0>)
 801c8ce:	4829      	ldr	r0, [pc, #164]	; (801c974 <__lshift+0xd4>)
 801c8d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c8d4:	f7fe fec0 	bl	801b658 <__assert_func>
 801c8d8:	3101      	adds	r1, #1
 801c8da:	005b      	lsls	r3, r3, #1
 801c8dc:	e7ee      	b.n	801c8bc <__lshift+0x1c>
 801c8de:	2300      	movs	r3, #0
 801c8e0:	f100 0114 	add.w	r1, r0, #20
 801c8e4:	f100 0210 	add.w	r2, r0, #16
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	4553      	cmp	r3, sl
 801c8ec:	db33      	blt.n	801c956 <__lshift+0xb6>
 801c8ee:	6920      	ldr	r0, [r4, #16]
 801c8f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c8f4:	f104 0314 	add.w	r3, r4, #20
 801c8f8:	f019 091f 	ands.w	r9, r9, #31
 801c8fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c904:	d02b      	beq.n	801c95e <__lshift+0xbe>
 801c906:	f1c9 0e20 	rsb	lr, r9, #32
 801c90a:	468a      	mov	sl, r1
 801c90c:	2200      	movs	r2, #0
 801c90e:	6818      	ldr	r0, [r3, #0]
 801c910:	fa00 f009 	lsl.w	r0, r0, r9
 801c914:	4310      	orrs	r0, r2
 801c916:	f84a 0b04 	str.w	r0, [sl], #4
 801c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c91e:	459c      	cmp	ip, r3
 801c920:	fa22 f20e 	lsr.w	r2, r2, lr
 801c924:	d8f3      	bhi.n	801c90e <__lshift+0x6e>
 801c926:	ebac 0304 	sub.w	r3, ip, r4
 801c92a:	3b15      	subs	r3, #21
 801c92c:	f023 0303 	bic.w	r3, r3, #3
 801c930:	3304      	adds	r3, #4
 801c932:	f104 0015 	add.w	r0, r4, #21
 801c936:	4584      	cmp	ip, r0
 801c938:	bf38      	it	cc
 801c93a:	2304      	movcc	r3, #4
 801c93c:	50ca      	str	r2, [r1, r3]
 801c93e:	b10a      	cbz	r2, 801c944 <__lshift+0xa4>
 801c940:	f108 0602 	add.w	r6, r8, #2
 801c944:	3e01      	subs	r6, #1
 801c946:	4638      	mov	r0, r7
 801c948:	612e      	str	r6, [r5, #16]
 801c94a:	4621      	mov	r1, r4
 801c94c:	f7ff fdd8 	bl	801c500 <_Bfree>
 801c950:	4628      	mov	r0, r5
 801c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c956:	f842 0f04 	str.w	r0, [r2, #4]!
 801c95a:	3301      	adds	r3, #1
 801c95c:	e7c5      	b.n	801c8ea <__lshift+0x4a>
 801c95e:	3904      	subs	r1, #4
 801c960:	f853 2b04 	ldr.w	r2, [r3], #4
 801c964:	f841 2f04 	str.w	r2, [r1, #4]!
 801c968:	459c      	cmp	ip, r3
 801c96a:	d8f9      	bhi.n	801c960 <__lshift+0xc0>
 801c96c:	e7ea      	b.n	801c944 <__lshift+0xa4>
 801c96e:	bf00      	nop
 801c970:	08020fb3 	.word	0x08020fb3
 801c974:	08020fc4 	.word	0x08020fc4

0801c978 <__mcmp>:
 801c978:	b530      	push	{r4, r5, lr}
 801c97a:	6902      	ldr	r2, [r0, #16]
 801c97c:	690c      	ldr	r4, [r1, #16]
 801c97e:	1b12      	subs	r2, r2, r4
 801c980:	d10e      	bne.n	801c9a0 <__mcmp+0x28>
 801c982:	f100 0314 	add.w	r3, r0, #20
 801c986:	3114      	adds	r1, #20
 801c988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c98c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c998:	42a5      	cmp	r5, r4
 801c99a:	d003      	beq.n	801c9a4 <__mcmp+0x2c>
 801c99c:	d305      	bcc.n	801c9aa <__mcmp+0x32>
 801c99e:	2201      	movs	r2, #1
 801c9a0:	4610      	mov	r0, r2
 801c9a2:	bd30      	pop	{r4, r5, pc}
 801c9a4:	4283      	cmp	r3, r0
 801c9a6:	d3f3      	bcc.n	801c990 <__mcmp+0x18>
 801c9a8:	e7fa      	b.n	801c9a0 <__mcmp+0x28>
 801c9aa:	f04f 32ff 	mov.w	r2, #4294967295
 801c9ae:	e7f7      	b.n	801c9a0 <__mcmp+0x28>

0801c9b0 <__mdiff>:
 801c9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b4:	460c      	mov	r4, r1
 801c9b6:	4606      	mov	r6, r0
 801c9b8:	4611      	mov	r1, r2
 801c9ba:	4620      	mov	r0, r4
 801c9bc:	4690      	mov	r8, r2
 801c9be:	f7ff ffdb 	bl	801c978 <__mcmp>
 801c9c2:	1e05      	subs	r5, r0, #0
 801c9c4:	d110      	bne.n	801c9e8 <__mdiff+0x38>
 801c9c6:	4629      	mov	r1, r5
 801c9c8:	4630      	mov	r0, r6
 801c9ca:	f7ff fd59 	bl	801c480 <_Balloc>
 801c9ce:	b930      	cbnz	r0, 801c9de <__mdiff+0x2e>
 801c9d0:	4b3a      	ldr	r3, [pc, #232]	; (801cabc <__mdiff+0x10c>)
 801c9d2:	4602      	mov	r2, r0
 801c9d4:	f240 2137 	movw	r1, #567	; 0x237
 801c9d8:	4839      	ldr	r0, [pc, #228]	; (801cac0 <__mdiff+0x110>)
 801c9da:	f7fe fe3d 	bl	801b658 <__assert_func>
 801c9de:	2301      	movs	r3, #1
 801c9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e8:	bfa4      	itt	ge
 801c9ea:	4643      	movge	r3, r8
 801c9ec:	46a0      	movge	r8, r4
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c9f4:	bfa6      	itte	ge
 801c9f6:	461c      	movge	r4, r3
 801c9f8:	2500      	movge	r5, #0
 801c9fa:	2501      	movlt	r5, #1
 801c9fc:	f7ff fd40 	bl	801c480 <_Balloc>
 801ca00:	b920      	cbnz	r0, 801ca0c <__mdiff+0x5c>
 801ca02:	4b2e      	ldr	r3, [pc, #184]	; (801cabc <__mdiff+0x10c>)
 801ca04:	4602      	mov	r2, r0
 801ca06:	f240 2145 	movw	r1, #581	; 0x245
 801ca0a:	e7e5      	b.n	801c9d8 <__mdiff+0x28>
 801ca0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ca10:	6926      	ldr	r6, [r4, #16]
 801ca12:	60c5      	str	r5, [r0, #12]
 801ca14:	f104 0914 	add.w	r9, r4, #20
 801ca18:	f108 0514 	add.w	r5, r8, #20
 801ca1c:	f100 0e14 	add.w	lr, r0, #20
 801ca20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ca24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ca28:	f108 0210 	add.w	r2, r8, #16
 801ca2c:	46f2      	mov	sl, lr
 801ca2e:	2100      	movs	r1, #0
 801ca30:	f859 3b04 	ldr.w	r3, [r9], #4
 801ca34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ca38:	fa11 f88b 	uxtah	r8, r1, fp
 801ca3c:	b299      	uxth	r1, r3
 801ca3e:	0c1b      	lsrs	r3, r3, #16
 801ca40:	eba8 0801 	sub.w	r8, r8, r1
 801ca44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ca48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ca4c:	fa1f f888 	uxth.w	r8, r8
 801ca50:	1419      	asrs	r1, r3, #16
 801ca52:	454e      	cmp	r6, r9
 801ca54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ca58:	f84a 3b04 	str.w	r3, [sl], #4
 801ca5c:	d8e8      	bhi.n	801ca30 <__mdiff+0x80>
 801ca5e:	1b33      	subs	r3, r6, r4
 801ca60:	3b15      	subs	r3, #21
 801ca62:	f023 0303 	bic.w	r3, r3, #3
 801ca66:	3304      	adds	r3, #4
 801ca68:	3415      	adds	r4, #21
 801ca6a:	42a6      	cmp	r6, r4
 801ca6c:	bf38      	it	cc
 801ca6e:	2304      	movcc	r3, #4
 801ca70:	441d      	add	r5, r3
 801ca72:	4473      	add	r3, lr
 801ca74:	469e      	mov	lr, r3
 801ca76:	462e      	mov	r6, r5
 801ca78:	4566      	cmp	r6, ip
 801ca7a:	d30e      	bcc.n	801ca9a <__mdiff+0xea>
 801ca7c:	f10c 0203 	add.w	r2, ip, #3
 801ca80:	1b52      	subs	r2, r2, r5
 801ca82:	f022 0203 	bic.w	r2, r2, #3
 801ca86:	3d03      	subs	r5, #3
 801ca88:	45ac      	cmp	ip, r5
 801ca8a:	bf38      	it	cc
 801ca8c:	2200      	movcc	r2, #0
 801ca8e:	4413      	add	r3, r2
 801ca90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ca94:	b17a      	cbz	r2, 801cab6 <__mdiff+0x106>
 801ca96:	6107      	str	r7, [r0, #16]
 801ca98:	e7a4      	b.n	801c9e4 <__mdiff+0x34>
 801ca9a:	f856 8b04 	ldr.w	r8, [r6], #4
 801ca9e:	fa11 f288 	uxtah	r2, r1, r8
 801caa2:	1414      	asrs	r4, r2, #16
 801caa4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801caa8:	b292      	uxth	r2, r2
 801caaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801caae:	f84e 2b04 	str.w	r2, [lr], #4
 801cab2:	1421      	asrs	r1, r4, #16
 801cab4:	e7e0      	b.n	801ca78 <__mdiff+0xc8>
 801cab6:	3f01      	subs	r7, #1
 801cab8:	e7ea      	b.n	801ca90 <__mdiff+0xe0>
 801caba:	bf00      	nop
 801cabc:	08020fb3 	.word	0x08020fb3
 801cac0:	08020fc4 	.word	0x08020fc4

0801cac4 <__d2b>:
 801cac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cac8:	460f      	mov	r7, r1
 801caca:	2101      	movs	r1, #1
 801cacc:	ec59 8b10 	vmov	r8, r9, d0
 801cad0:	4616      	mov	r6, r2
 801cad2:	f7ff fcd5 	bl	801c480 <_Balloc>
 801cad6:	4604      	mov	r4, r0
 801cad8:	b930      	cbnz	r0, 801cae8 <__d2b+0x24>
 801cada:	4602      	mov	r2, r0
 801cadc:	4b24      	ldr	r3, [pc, #144]	; (801cb70 <__d2b+0xac>)
 801cade:	4825      	ldr	r0, [pc, #148]	; (801cb74 <__d2b+0xb0>)
 801cae0:	f240 310f 	movw	r1, #783	; 0x30f
 801cae4:	f7fe fdb8 	bl	801b658 <__assert_func>
 801cae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801caec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801caf0:	bb2d      	cbnz	r5, 801cb3e <__d2b+0x7a>
 801caf2:	9301      	str	r3, [sp, #4]
 801caf4:	f1b8 0300 	subs.w	r3, r8, #0
 801caf8:	d026      	beq.n	801cb48 <__d2b+0x84>
 801cafa:	4668      	mov	r0, sp
 801cafc:	9300      	str	r3, [sp, #0]
 801cafe:	f7ff fd87 	bl	801c610 <__lo0bits>
 801cb02:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cb06:	b1e8      	cbz	r0, 801cb44 <__d2b+0x80>
 801cb08:	f1c0 0320 	rsb	r3, r0, #32
 801cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 801cb10:	430b      	orrs	r3, r1
 801cb12:	40c2      	lsrs	r2, r0
 801cb14:	6163      	str	r3, [r4, #20]
 801cb16:	9201      	str	r2, [sp, #4]
 801cb18:	9b01      	ldr	r3, [sp, #4]
 801cb1a:	61a3      	str	r3, [r4, #24]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	bf14      	ite	ne
 801cb20:	2202      	movne	r2, #2
 801cb22:	2201      	moveq	r2, #1
 801cb24:	6122      	str	r2, [r4, #16]
 801cb26:	b1bd      	cbz	r5, 801cb58 <__d2b+0x94>
 801cb28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cb2c:	4405      	add	r5, r0
 801cb2e:	603d      	str	r5, [r7, #0]
 801cb30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cb34:	6030      	str	r0, [r6, #0]
 801cb36:	4620      	mov	r0, r4
 801cb38:	b003      	add	sp, #12
 801cb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb42:	e7d6      	b.n	801caf2 <__d2b+0x2e>
 801cb44:	6161      	str	r1, [r4, #20]
 801cb46:	e7e7      	b.n	801cb18 <__d2b+0x54>
 801cb48:	a801      	add	r0, sp, #4
 801cb4a:	f7ff fd61 	bl	801c610 <__lo0bits>
 801cb4e:	9b01      	ldr	r3, [sp, #4]
 801cb50:	6163      	str	r3, [r4, #20]
 801cb52:	3020      	adds	r0, #32
 801cb54:	2201      	movs	r2, #1
 801cb56:	e7e5      	b.n	801cb24 <__d2b+0x60>
 801cb58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cb5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cb60:	6038      	str	r0, [r7, #0]
 801cb62:	6918      	ldr	r0, [r3, #16]
 801cb64:	f7ff fd34 	bl	801c5d0 <__hi0bits>
 801cb68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cb6c:	e7e2      	b.n	801cb34 <__d2b+0x70>
 801cb6e:	bf00      	nop
 801cb70:	08020fb3 	.word	0x08020fb3
 801cb74:	08020fc4 	.word	0x08020fc4

0801cb78 <__ssputs_r>:
 801cb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb7c:	688e      	ldr	r6, [r1, #8]
 801cb7e:	461f      	mov	r7, r3
 801cb80:	42be      	cmp	r6, r7
 801cb82:	680b      	ldr	r3, [r1, #0]
 801cb84:	4682      	mov	sl, r0
 801cb86:	460c      	mov	r4, r1
 801cb88:	4690      	mov	r8, r2
 801cb8a:	d82c      	bhi.n	801cbe6 <__ssputs_r+0x6e>
 801cb8c:	898a      	ldrh	r2, [r1, #12]
 801cb8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cb92:	d026      	beq.n	801cbe2 <__ssputs_r+0x6a>
 801cb94:	6965      	ldr	r5, [r4, #20]
 801cb96:	6909      	ldr	r1, [r1, #16]
 801cb98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb9c:	eba3 0901 	sub.w	r9, r3, r1
 801cba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cba4:	1c7b      	adds	r3, r7, #1
 801cba6:	444b      	add	r3, r9
 801cba8:	106d      	asrs	r5, r5, #1
 801cbaa:	429d      	cmp	r5, r3
 801cbac:	bf38      	it	cc
 801cbae:	461d      	movcc	r5, r3
 801cbb0:	0553      	lsls	r3, r2, #21
 801cbb2:	d527      	bpl.n	801cc04 <__ssputs_r+0x8c>
 801cbb4:	4629      	mov	r1, r5
 801cbb6:	f7ff fbd7 	bl	801c368 <_malloc_r>
 801cbba:	4606      	mov	r6, r0
 801cbbc:	b360      	cbz	r0, 801cc18 <__ssputs_r+0xa0>
 801cbbe:	6921      	ldr	r1, [r4, #16]
 801cbc0:	464a      	mov	r2, r9
 801cbc2:	f7fe fd3a 	bl	801b63a <memcpy>
 801cbc6:	89a3      	ldrh	r3, [r4, #12]
 801cbc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbd0:	81a3      	strh	r3, [r4, #12]
 801cbd2:	6126      	str	r6, [r4, #16]
 801cbd4:	6165      	str	r5, [r4, #20]
 801cbd6:	444e      	add	r6, r9
 801cbd8:	eba5 0509 	sub.w	r5, r5, r9
 801cbdc:	6026      	str	r6, [r4, #0]
 801cbde:	60a5      	str	r5, [r4, #8]
 801cbe0:	463e      	mov	r6, r7
 801cbe2:	42be      	cmp	r6, r7
 801cbe4:	d900      	bls.n	801cbe8 <__ssputs_r+0x70>
 801cbe6:	463e      	mov	r6, r7
 801cbe8:	6820      	ldr	r0, [r4, #0]
 801cbea:	4632      	mov	r2, r6
 801cbec:	4641      	mov	r1, r8
 801cbee:	f7fe fc91 	bl	801b514 <memmove>
 801cbf2:	68a3      	ldr	r3, [r4, #8]
 801cbf4:	1b9b      	subs	r3, r3, r6
 801cbf6:	60a3      	str	r3, [r4, #8]
 801cbf8:	6823      	ldr	r3, [r4, #0]
 801cbfa:	4433      	add	r3, r6
 801cbfc:	6023      	str	r3, [r4, #0]
 801cbfe:	2000      	movs	r0, #0
 801cc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc04:	462a      	mov	r2, r5
 801cc06:	f000 fbd6 	bl	801d3b6 <_realloc_r>
 801cc0a:	4606      	mov	r6, r0
 801cc0c:	2800      	cmp	r0, #0
 801cc0e:	d1e0      	bne.n	801cbd2 <__ssputs_r+0x5a>
 801cc10:	6921      	ldr	r1, [r4, #16]
 801cc12:	4650      	mov	r0, sl
 801cc14:	f7ff fb34 	bl	801c280 <_free_r>
 801cc18:	230c      	movs	r3, #12
 801cc1a:	f8ca 3000 	str.w	r3, [sl]
 801cc1e:	89a3      	ldrh	r3, [r4, #12]
 801cc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc24:	81a3      	strh	r3, [r4, #12]
 801cc26:	f04f 30ff 	mov.w	r0, #4294967295
 801cc2a:	e7e9      	b.n	801cc00 <__ssputs_r+0x88>

0801cc2c <_svfiprintf_r>:
 801cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc30:	4698      	mov	r8, r3
 801cc32:	898b      	ldrh	r3, [r1, #12]
 801cc34:	061b      	lsls	r3, r3, #24
 801cc36:	b09d      	sub	sp, #116	; 0x74
 801cc38:	4607      	mov	r7, r0
 801cc3a:	460d      	mov	r5, r1
 801cc3c:	4614      	mov	r4, r2
 801cc3e:	d50e      	bpl.n	801cc5e <_svfiprintf_r+0x32>
 801cc40:	690b      	ldr	r3, [r1, #16]
 801cc42:	b963      	cbnz	r3, 801cc5e <_svfiprintf_r+0x32>
 801cc44:	2140      	movs	r1, #64	; 0x40
 801cc46:	f7ff fb8f 	bl	801c368 <_malloc_r>
 801cc4a:	6028      	str	r0, [r5, #0]
 801cc4c:	6128      	str	r0, [r5, #16]
 801cc4e:	b920      	cbnz	r0, 801cc5a <_svfiprintf_r+0x2e>
 801cc50:	230c      	movs	r3, #12
 801cc52:	603b      	str	r3, [r7, #0]
 801cc54:	f04f 30ff 	mov.w	r0, #4294967295
 801cc58:	e0d0      	b.n	801cdfc <_svfiprintf_r+0x1d0>
 801cc5a:	2340      	movs	r3, #64	; 0x40
 801cc5c:	616b      	str	r3, [r5, #20]
 801cc5e:	2300      	movs	r3, #0
 801cc60:	9309      	str	r3, [sp, #36]	; 0x24
 801cc62:	2320      	movs	r3, #32
 801cc64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cc68:	f8cd 800c 	str.w	r8, [sp, #12]
 801cc6c:	2330      	movs	r3, #48	; 0x30
 801cc6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ce14 <_svfiprintf_r+0x1e8>
 801cc72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cc76:	f04f 0901 	mov.w	r9, #1
 801cc7a:	4623      	mov	r3, r4
 801cc7c:	469a      	mov	sl, r3
 801cc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc82:	b10a      	cbz	r2, 801cc88 <_svfiprintf_r+0x5c>
 801cc84:	2a25      	cmp	r2, #37	; 0x25
 801cc86:	d1f9      	bne.n	801cc7c <_svfiprintf_r+0x50>
 801cc88:	ebba 0b04 	subs.w	fp, sl, r4
 801cc8c:	d00b      	beq.n	801cca6 <_svfiprintf_r+0x7a>
 801cc8e:	465b      	mov	r3, fp
 801cc90:	4622      	mov	r2, r4
 801cc92:	4629      	mov	r1, r5
 801cc94:	4638      	mov	r0, r7
 801cc96:	f7ff ff6f 	bl	801cb78 <__ssputs_r>
 801cc9a:	3001      	adds	r0, #1
 801cc9c:	f000 80a9 	beq.w	801cdf2 <_svfiprintf_r+0x1c6>
 801cca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cca2:	445a      	add	r2, fp
 801cca4:	9209      	str	r2, [sp, #36]	; 0x24
 801cca6:	f89a 3000 	ldrb.w	r3, [sl]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	f000 80a1 	beq.w	801cdf2 <_svfiprintf_r+0x1c6>
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	f04f 32ff 	mov.w	r2, #4294967295
 801ccb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ccba:	f10a 0a01 	add.w	sl, sl, #1
 801ccbe:	9304      	str	r3, [sp, #16]
 801ccc0:	9307      	str	r3, [sp, #28]
 801ccc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ccc6:	931a      	str	r3, [sp, #104]	; 0x68
 801ccc8:	4654      	mov	r4, sl
 801ccca:	2205      	movs	r2, #5
 801cccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccd0:	4850      	ldr	r0, [pc, #320]	; (801ce14 <_svfiprintf_r+0x1e8>)
 801ccd2:	f7e5 f98d 	bl	8001ff0 <memchr>
 801ccd6:	9a04      	ldr	r2, [sp, #16]
 801ccd8:	b9d8      	cbnz	r0, 801cd12 <_svfiprintf_r+0xe6>
 801ccda:	06d0      	lsls	r0, r2, #27
 801ccdc:	bf44      	itt	mi
 801ccde:	2320      	movmi	r3, #32
 801cce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cce4:	0711      	lsls	r1, r2, #28
 801cce6:	bf44      	itt	mi
 801cce8:	232b      	movmi	r3, #43	; 0x2b
 801ccea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ccee:	f89a 3000 	ldrb.w	r3, [sl]
 801ccf2:	2b2a      	cmp	r3, #42	; 0x2a
 801ccf4:	d015      	beq.n	801cd22 <_svfiprintf_r+0xf6>
 801ccf6:	9a07      	ldr	r2, [sp, #28]
 801ccf8:	4654      	mov	r4, sl
 801ccfa:	2000      	movs	r0, #0
 801ccfc:	f04f 0c0a 	mov.w	ip, #10
 801cd00:	4621      	mov	r1, r4
 801cd02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd06:	3b30      	subs	r3, #48	; 0x30
 801cd08:	2b09      	cmp	r3, #9
 801cd0a:	d94d      	bls.n	801cda8 <_svfiprintf_r+0x17c>
 801cd0c:	b1b0      	cbz	r0, 801cd3c <_svfiprintf_r+0x110>
 801cd0e:	9207      	str	r2, [sp, #28]
 801cd10:	e014      	b.n	801cd3c <_svfiprintf_r+0x110>
 801cd12:	eba0 0308 	sub.w	r3, r0, r8
 801cd16:	fa09 f303 	lsl.w	r3, r9, r3
 801cd1a:	4313      	orrs	r3, r2
 801cd1c:	9304      	str	r3, [sp, #16]
 801cd1e:	46a2      	mov	sl, r4
 801cd20:	e7d2      	b.n	801ccc8 <_svfiprintf_r+0x9c>
 801cd22:	9b03      	ldr	r3, [sp, #12]
 801cd24:	1d19      	adds	r1, r3, #4
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	9103      	str	r1, [sp, #12]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	bfbb      	ittet	lt
 801cd2e:	425b      	neglt	r3, r3
 801cd30:	f042 0202 	orrlt.w	r2, r2, #2
 801cd34:	9307      	strge	r3, [sp, #28]
 801cd36:	9307      	strlt	r3, [sp, #28]
 801cd38:	bfb8      	it	lt
 801cd3a:	9204      	strlt	r2, [sp, #16]
 801cd3c:	7823      	ldrb	r3, [r4, #0]
 801cd3e:	2b2e      	cmp	r3, #46	; 0x2e
 801cd40:	d10c      	bne.n	801cd5c <_svfiprintf_r+0x130>
 801cd42:	7863      	ldrb	r3, [r4, #1]
 801cd44:	2b2a      	cmp	r3, #42	; 0x2a
 801cd46:	d134      	bne.n	801cdb2 <_svfiprintf_r+0x186>
 801cd48:	9b03      	ldr	r3, [sp, #12]
 801cd4a:	1d1a      	adds	r2, r3, #4
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	9203      	str	r2, [sp, #12]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	bfb8      	it	lt
 801cd54:	f04f 33ff 	movlt.w	r3, #4294967295
 801cd58:	3402      	adds	r4, #2
 801cd5a:	9305      	str	r3, [sp, #20]
 801cd5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ce24 <_svfiprintf_r+0x1f8>
 801cd60:	7821      	ldrb	r1, [r4, #0]
 801cd62:	2203      	movs	r2, #3
 801cd64:	4650      	mov	r0, sl
 801cd66:	f7e5 f943 	bl	8001ff0 <memchr>
 801cd6a:	b138      	cbz	r0, 801cd7c <_svfiprintf_r+0x150>
 801cd6c:	9b04      	ldr	r3, [sp, #16]
 801cd6e:	eba0 000a 	sub.w	r0, r0, sl
 801cd72:	2240      	movs	r2, #64	; 0x40
 801cd74:	4082      	lsls	r2, r0
 801cd76:	4313      	orrs	r3, r2
 801cd78:	3401      	adds	r4, #1
 801cd7a:	9304      	str	r3, [sp, #16]
 801cd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd80:	4825      	ldr	r0, [pc, #148]	; (801ce18 <_svfiprintf_r+0x1ec>)
 801cd82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cd86:	2206      	movs	r2, #6
 801cd88:	f7e5 f932 	bl	8001ff0 <memchr>
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	d038      	beq.n	801ce02 <_svfiprintf_r+0x1d6>
 801cd90:	4b22      	ldr	r3, [pc, #136]	; (801ce1c <_svfiprintf_r+0x1f0>)
 801cd92:	bb1b      	cbnz	r3, 801cddc <_svfiprintf_r+0x1b0>
 801cd94:	9b03      	ldr	r3, [sp, #12]
 801cd96:	3307      	adds	r3, #7
 801cd98:	f023 0307 	bic.w	r3, r3, #7
 801cd9c:	3308      	adds	r3, #8
 801cd9e:	9303      	str	r3, [sp, #12]
 801cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cda2:	4433      	add	r3, r6
 801cda4:	9309      	str	r3, [sp, #36]	; 0x24
 801cda6:	e768      	b.n	801cc7a <_svfiprintf_r+0x4e>
 801cda8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cdac:	460c      	mov	r4, r1
 801cdae:	2001      	movs	r0, #1
 801cdb0:	e7a6      	b.n	801cd00 <_svfiprintf_r+0xd4>
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	3401      	adds	r4, #1
 801cdb6:	9305      	str	r3, [sp, #20]
 801cdb8:	4619      	mov	r1, r3
 801cdba:	f04f 0c0a 	mov.w	ip, #10
 801cdbe:	4620      	mov	r0, r4
 801cdc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cdc4:	3a30      	subs	r2, #48	; 0x30
 801cdc6:	2a09      	cmp	r2, #9
 801cdc8:	d903      	bls.n	801cdd2 <_svfiprintf_r+0x1a6>
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d0c6      	beq.n	801cd5c <_svfiprintf_r+0x130>
 801cdce:	9105      	str	r1, [sp, #20]
 801cdd0:	e7c4      	b.n	801cd5c <_svfiprintf_r+0x130>
 801cdd2:	fb0c 2101 	mla	r1, ip, r1, r2
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	2301      	movs	r3, #1
 801cdda:	e7f0      	b.n	801cdbe <_svfiprintf_r+0x192>
 801cddc:	ab03      	add	r3, sp, #12
 801cdde:	9300      	str	r3, [sp, #0]
 801cde0:	462a      	mov	r2, r5
 801cde2:	4b0f      	ldr	r3, [pc, #60]	; (801ce20 <_svfiprintf_r+0x1f4>)
 801cde4:	a904      	add	r1, sp, #16
 801cde6:	4638      	mov	r0, r7
 801cde8:	f7fd fdb2 	bl	801a950 <_printf_float>
 801cdec:	1c42      	adds	r2, r0, #1
 801cdee:	4606      	mov	r6, r0
 801cdf0:	d1d6      	bne.n	801cda0 <_svfiprintf_r+0x174>
 801cdf2:	89ab      	ldrh	r3, [r5, #12]
 801cdf4:	065b      	lsls	r3, r3, #25
 801cdf6:	f53f af2d 	bmi.w	801cc54 <_svfiprintf_r+0x28>
 801cdfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cdfc:	b01d      	add	sp, #116	; 0x74
 801cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce02:	ab03      	add	r3, sp, #12
 801ce04:	9300      	str	r3, [sp, #0]
 801ce06:	462a      	mov	r2, r5
 801ce08:	4b05      	ldr	r3, [pc, #20]	; (801ce20 <_svfiprintf_r+0x1f4>)
 801ce0a:	a904      	add	r1, sp, #16
 801ce0c:	4638      	mov	r0, r7
 801ce0e:	f7fe f827 	bl	801ae60 <_printf_i>
 801ce12:	e7eb      	b.n	801cdec <_svfiprintf_r+0x1c0>
 801ce14:	0802111c 	.word	0x0802111c
 801ce18:	08021126 	.word	0x08021126
 801ce1c:	0801a951 	.word	0x0801a951
 801ce20:	0801cb79 	.word	0x0801cb79
 801ce24:	08021122 	.word	0x08021122

0801ce28 <__sfputc_r>:
 801ce28:	6893      	ldr	r3, [r2, #8]
 801ce2a:	3b01      	subs	r3, #1
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	b410      	push	{r4}
 801ce30:	6093      	str	r3, [r2, #8]
 801ce32:	da08      	bge.n	801ce46 <__sfputc_r+0x1e>
 801ce34:	6994      	ldr	r4, [r2, #24]
 801ce36:	42a3      	cmp	r3, r4
 801ce38:	db01      	blt.n	801ce3e <__sfputc_r+0x16>
 801ce3a:	290a      	cmp	r1, #10
 801ce3c:	d103      	bne.n	801ce46 <__sfputc_r+0x1e>
 801ce3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce42:	f7fe bac2 	b.w	801b3ca <__swbuf_r>
 801ce46:	6813      	ldr	r3, [r2, #0]
 801ce48:	1c58      	adds	r0, r3, #1
 801ce4a:	6010      	str	r0, [r2, #0]
 801ce4c:	7019      	strb	r1, [r3, #0]
 801ce4e:	4608      	mov	r0, r1
 801ce50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce54:	4770      	bx	lr

0801ce56 <__sfputs_r>:
 801ce56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce58:	4606      	mov	r6, r0
 801ce5a:	460f      	mov	r7, r1
 801ce5c:	4614      	mov	r4, r2
 801ce5e:	18d5      	adds	r5, r2, r3
 801ce60:	42ac      	cmp	r4, r5
 801ce62:	d101      	bne.n	801ce68 <__sfputs_r+0x12>
 801ce64:	2000      	movs	r0, #0
 801ce66:	e007      	b.n	801ce78 <__sfputs_r+0x22>
 801ce68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce6c:	463a      	mov	r2, r7
 801ce6e:	4630      	mov	r0, r6
 801ce70:	f7ff ffda 	bl	801ce28 <__sfputc_r>
 801ce74:	1c43      	adds	r3, r0, #1
 801ce76:	d1f3      	bne.n	801ce60 <__sfputs_r+0xa>
 801ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ce7c <_vfiprintf_r>:
 801ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce80:	460d      	mov	r5, r1
 801ce82:	b09d      	sub	sp, #116	; 0x74
 801ce84:	4614      	mov	r4, r2
 801ce86:	4698      	mov	r8, r3
 801ce88:	4606      	mov	r6, r0
 801ce8a:	b118      	cbz	r0, 801ce94 <_vfiprintf_r+0x18>
 801ce8c:	6a03      	ldr	r3, [r0, #32]
 801ce8e:	b90b      	cbnz	r3, 801ce94 <_vfiprintf_r+0x18>
 801ce90:	f7fe f994 	bl	801b1bc <__sinit>
 801ce94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce96:	07d9      	lsls	r1, r3, #31
 801ce98:	d405      	bmi.n	801cea6 <_vfiprintf_r+0x2a>
 801ce9a:	89ab      	ldrh	r3, [r5, #12]
 801ce9c:	059a      	lsls	r2, r3, #22
 801ce9e:	d402      	bmi.n	801cea6 <_vfiprintf_r+0x2a>
 801cea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cea2:	f7fe fbc8 	bl	801b636 <__retarget_lock_acquire_recursive>
 801cea6:	89ab      	ldrh	r3, [r5, #12]
 801cea8:	071b      	lsls	r3, r3, #28
 801ceaa:	d501      	bpl.n	801ceb0 <_vfiprintf_r+0x34>
 801ceac:	692b      	ldr	r3, [r5, #16]
 801ceae:	b99b      	cbnz	r3, 801ced8 <_vfiprintf_r+0x5c>
 801ceb0:	4629      	mov	r1, r5
 801ceb2:	4630      	mov	r0, r6
 801ceb4:	f7fe fac6 	bl	801b444 <__swsetup_r>
 801ceb8:	b170      	cbz	r0, 801ced8 <_vfiprintf_r+0x5c>
 801ceba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cebc:	07dc      	lsls	r4, r3, #31
 801cebe:	d504      	bpl.n	801ceca <_vfiprintf_r+0x4e>
 801cec0:	f04f 30ff 	mov.w	r0, #4294967295
 801cec4:	b01d      	add	sp, #116	; 0x74
 801cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceca:	89ab      	ldrh	r3, [r5, #12]
 801cecc:	0598      	lsls	r0, r3, #22
 801cece:	d4f7      	bmi.n	801cec0 <_vfiprintf_r+0x44>
 801ced0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ced2:	f7fe fbb1 	bl	801b638 <__retarget_lock_release_recursive>
 801ced6:	e7f3      	b.n	801cec0 <_vfiprintf_r+0x44>
 801ced8:	2300      	movs	r3, #0
 801ceda:	9309      	str	r3, [sp, #36]	; 0x24
 801cedc:	2320      	movs	r3, #32
 801cede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cee2:	f8cd 800c 	str.w	r8, [sp, #12]
 801cee6:	2330      	movs	r3, #48	; 0x30
 801cee8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d09c <_vfiprintf_r+0x220>
 801ceec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cef0:	f04f 0901 	mov.w	r9, #1
 801cef4:	4623      	mov	r3, r4
 801cef6:	469a      	mov	sl, r3
 801cef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cefc:	b10a      	cbz	r2, 801cf02 <_vfiprintf_r+0x86>
 801cefe:	2a25      	cmp	r2, #37	; 0x25
 801cf00:	d1f9      	bne.n	801cef6 <_vfiprintf_r+0x7a>
 801cf02:	ebba 0b04 	subs.w	fp, sl, r4
 801cf06:	d00b      	beq.n	801cf20 <_vfiprintf_r+0xa4>
 801cf08:	465b      	mov	r3, fp
 801cf0a:	4622      	mov	r2, r4
 801cf0c:	4629      	mov	r1, r5
 801cf0e:	4630      	mov	r0, r6
 801cf10:	f7ff ffa1 	bl	801ce56 <__sfputs_r>
 801cf14:	3001      	adds	r0, #1
 801cf16:	f000 80a9 	beq.w	801d06c <_vfiprintf_r+0x1f0>
 801cf1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf1c:	445a      	add	r2, fp
 801cf1e:	9209      	str	r2, [sp, #36]	; 0x24
 801cf20:	f89a 3000 	ldrb.w	r3, [sl]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	f000 80a1 	beq.w	801d06c <_vfiprintf_r+0x1f0>
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf34:	f10a 0a01 	add.w	sl, sl, #1
 801cf38:	9304      	str	r3, [sp, #16]
 801cf3a:	9307      	str	r3, [sp, #28]
 801cf3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cf40:	931a      	str	r3, [sp, #104]	; 0x68
 801cf42:	4654      	mov	r4, sl
 801cf44:	2205      	movs	r2, #5
 801cf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf4a:	4854      	ldr	r0, [pc, #336]	; (801d09c <_vfiprintf_r+0x220>)
 801cf4c:	f7e5 f850 	bl	8001ff0 <memchr>
 801cf50:	9a04      	ldr	r2, [sp, #16]
 801cf52:	b9d8      	cbnz	r0, 801cf8c <_vfiprintf_r+0x110>
 801cf54:	06d1      	lsls	r1, r2, #27
 801cf56:	bf44      	itt	mi
 801cf58:	2320      	movmi	r3, #32
 801cf5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf5e:	0713      	lsls	r3, r2, #28
 801cf60:	bf44      	itt	mi
 801cf62:	232b      	movmi	r3, #43	; 0x2b
 801cf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf68:	f89a 3000 	ldrb.w	r3, [sl]
 801cf6c:	2b2a      	cmp	r3, #42	; 0x2a
 801cf6e:	d015      	beq.n	801cf9c <_vfiprintf_r+0x120>
 801cf70:	9a07      	ldr	r2, [sp, #28]
 801cf72:	4654      	mov	r4, sl
 801cf74:	2000      	movs	r0, #0
 801cf76:	f04f 0c0a 	mov.w	ip, #10
 801cf7a:	4621      	mov	r1, r4
 801cf7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf80:	3b30      	subs	r3, #48	; 0x30
 801cf82:	2b09      	cmp	r3, #9
 801cf84:	d94d      	bls.n	801d022 <_vfiprintf_r+0x1a6>
 801cf86:	b1b0      	cbz	r0, 801cfb6 <_vfiprintf_r+0x13a>
 801cf88:	9207      	str	r2, [sp, #28]
 801cf8a:	e014      	b.n	801cfb6 <_vfiprintf_r+0x13a>
 801cf8c:	eba0 0308 	sub.w	r3, r0, r8
 801cf90:	fa09 f303 	lsl.w	r3, r9, r3
 801cf94:	4313      	orrs	r3, r2
 801cf96:	9304      	str	r3, [sp, #16]
 801cf98:	46a2      	mov	sl, r4
 801cf9a:	e7d2      	b.n	801cf42 <_vfiprintf_r+0xc6>
 801cf9c:	9b03      	ldr	r3, [sp, #12]
 801cf9e:	1d19      	adds	r1, r3, #4
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	9103      	str	r1, [sp, #12]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	bfbb      	ittet	lt
 801cfa8:	425b      	neglt	r3, r3
 801cfaa:	f042 0202 	orrlt.w	r2, r2, #2
 801cfae:	9307      	strge	r3, [sp, #28]
 801cfb0:	9307      	strlt	r3, [sp, #28]
 801cfb2:	bfb8      	it	lt
 801cfb4:	9204      	strlt	r2, [sp, #16]
 801cfb6:	7823      	ldrb	r3, [r4, #0]
 801cfb8:	2b2e      	cmp	r3, #46	; 0x2e
 801cfba:	d10c      	bne.n	801cfd6 <_vfiprintf_r+0x15a>
 801cfbc:	7863      	ldrb	r3, [r4, #1]
 801cfbe:	2b2a      	cmp	r3, #42	; 0x2a
 801cfc0:	d134      	bne.n	801d02c <_vfiprintf_r+0x1b0>
 801cfc2:	9b03      	ldr	r3, [sp, #12]
 801cfc4:	1d1a      	adds	r2, r3, #4
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	9203      	str	r2, [sp, #12]
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	bfb8      	it	lt
 801cfce:	f04f 33ff 	movlt.w	r3, #4294967295
 801cfd2:	3402      	adds	r4, #2
 801cfd4:	9305      	str	r3, [sp, #20]
 801cfd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d0ac <_vfiprintf_r+0x230>
 801cfda:	7821      	ldrb	r1, [r4, #0]
 801cfdc:	2203      	movs	r2, #3
 801cfde:	4650      	mov	r0, sl
 801cfe0:	f7e5 f806 	bl	8001ff0 <memchr>
 801cfe4:	b138      	cbz	r0, 801cff6 <_vfiprintf_r+0x17a>
 801cfe6:	9b04      	ldr	r3, [sp, #16]
 801cfe8:	eba0 000a 	sub.w	r0, r0, sl
 801cfec:	2240      	movs	r2, #64	; 0x40
 801cfee:	4082      	lsls	r2, r0
 801cff0:	4313      	orrs	r3, r2
 801cff2:	3401      	adds	r4, #1
 801cff4:	9304      	str	r3, [sp, #16]
 801cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cffa:	4829      	ldr	r0, [pc, #164]	; (801d0a0 <_vfiprintf_r+0x224>)
 801cffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d000:	2206      	movs	r2, #6
 801d002:	f7e4 fff5 	bl	8001ff0 <memchr>
 801d006:	2800      	cmp	r0, #0
 801d008:	d03f      	beq.n	801d08a <_vfiprintf_r+0x20e>
 801d00a:	4b26      	ldr	r3, [pc, #152]	; (801d0a4 <_vfiprintf_r+0x228>)
 801d00c:	bb1b      	cbnz	r3, 801d056 <_vfiprintf_r+0x1da>
 801d00e:	9b03      	ldr	r3, [sp, #12]
 801d010:	3307      	adds	r3, #7
 801d012:	f023 0307 	bic.w	r3, r3, #7
 801d016:	3308      	adds	r3, #8
 801d018:	9303      	str	r3, [sp, #12]
 801d01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d01c:	443b      	add	r3, r7
 801d01e:	9309      	str	r3, [sp, #36]	; 0x24
 801d020:	e768      	b.n	801cef4 <_vfiprintf_r+0x78>
 801d022:	fb0c 3202 	mla	r2, ip, r2, r3
 801d026:	460c      	mov	r4, r1
 801d028:	2001      	movs	r0, #1
 801d02a:	e7a6      	b.n	801cf7a <_vfiprintf_r+0xfe>
 801d02c:	2300      	movs	r3, #0
 801d02e:	3401      	adds	r4, #1
 801d030:	9305      	str	r3, [sp, #20]
 801d032:	4619      	mov	r1, r3
 801d034:	f04f 0c0a 	mov.w	ip, #10
 801d038:	4620      	mov	r0, r4
 801d03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d03e:	3a30      	subs	r2, #48	; 0x30
 801d040:	2a09      	cmp	r2, #9
 801d042:	d903      	bls.n	801d04c <_vfiprintf_r+0x1d0>
 801d044:	2b00      	cmp	r3, #0
 801d046:	d0c6      	beq.n	801cfd6 <_vfiprintf_r+0x15a>
 801d048:	9105      	str	r1, [sp, #20]
 801d04a:	e7c4      	b.n	801cfd6 <_vfiprintf_r+0x15a>
 801d04c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d050:	4604      	mov	r4, r0
 801d052:	2301      	movs	r3, #1
 801d054:	e7f0      	b.n	801d038 <_vfiprintf_r+0x1bc>
 801d056:	ab03      	add	r3, sp, #12
 801d058:	9300      	str	r3, [sp, #0]
 801d05a:	462a      	mov	r2, r5
 801d05c:	4b12      	ldr	r3, [pc, #72]	; (801d0a8 <_vfiprintf_r+0x22c>)
 801d05e:	a904      	add	r1, sp, #16
 801d060:	4630      	mov	r0, r6
 801d062:	f7fd fc75 	bl	801a950 <_printf_float>
 801d066:	4607      	mov	r7, r0
 801d068:	1c78      	adds	r0, r7, #1
 801d06a:	d1d6      	bne.n	801d01a <_vfiprintf_r+0x19e>
 801d06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d06e:	07d9      	lsls	r1, r3, #31
 801d070:	d405      	bmi.n	801d07e <_vfiprintf_r+0x202>
 801d072:	89ab      	ldrh	r3, [r5, #12]
 801d074:	059a      	lsls	r2, r3, #22
 801d076:	d402      	bmi.n	801d07e <_vfiprintf_r+0x202>
 801d078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d07a:	f7fe fadd 	bl	801b638 <__retarget_lock_release_recursive>
 801d07e:	89ab      	ldrh	r3, [r5, #12]
 801d080:	065b      	lsls	r3, r3, #25
 801d082:	f53f af1d 	bmi.w	801cec0 <_vfiprintf_r+0x44>
 801d086:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d088:	e71c      	b.n	801cec4 <_vfiprintf_r+0x48>
 801d08a:	ab03      	add	r3, sp, #12
 801d08c:	9300      	str	r3, [sp, #0]
 801d08e:	462a      	mov	r2, r5
 801d090:	4b05      	ldr	r3, [pc, #20]	; (801d0a8 <_vfiprintf_r+0x22c>)
 801d092:	a904      	add	r1, sp, #16
 801d094:	4630      	mov	r0, r6
 801d096:	f7fd fee3 	bl	801ae60 <_printf_i>
 801d09a:	e7e4      	b.n	801d066 <_vfiprintf_r+0x1ea>
 801d09c:	0802111c 	.word	0x0802111c
 801d0a0:	08021126 	.word	0x08021126
 801d0a4:	0801a951 	.word	0x0801a951
 801d0a8:	0801ce57 	.word	0x0801ce57
 801d0ac:	08021122 	.word	0x08021122

0801d0b0 <__sflush_r>:
 801d0b0:	898a      	ldrh	r2, [r1, #12]
 801d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0b6:	4605      	mov	r5, r0
 801d0b8:	0710      	lsls	r0, r2, #28
 801d0ba:	460c      	mov	r4, r1
 801d0bc:	d458      	bmi.n	801d170 <__sflush_r+0xc0>
 801d0be:	684b      	ldr	r3, [r1, #4]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	dc05      	bgt.n	801d0d0 <__sflush_r+0x20>
 801d0c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	dc02      	bgt.n	801d0d0 <__sflush_r+0x20>
 801d0ca:	2000      	movs	r0, #0
 801d0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0d2:	2e00      	cmp	r6, #0
 801d0d4:	d0f9      	beq.n	801d0ca <__sflush_r+0x1a>
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d0dc:	682f      	ldr	r7, [r5, #0]
 801d0de:	6a21      	ldr	r1, [r4, #32]
 801d0e0:	602b      	str	r3, [r5, #0]
 801d0e2:	d032      	beq.n	801d14a <__sflush_r+0x9a>
 801d0e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d0e6:	89a3      	ldrh	r3, [r4, #12]
 801d0e8:	075a      	lsls	r2, r3, #29
 801d0ea:	d505      	bpl.n	801d0f8 <__sflush_r+0x48>
 801d0ec:	6863      	ldr	r3, [r4, #4]
 801d0ee:	1ac0      	subs	r0, r0, r3
 801d0f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d0f2:	b10b      	cbz	r3, 801d0f8 <__sflush_r+0x48>
 801d0f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d0f6:	1ac0      	subs	r0, r0, r3
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	4602      	mov	r2, r0
 801d0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0fe:	6a21      	ldr	r1, [r4, #32]
 801d100:	4628      	mov	r0, r5
 801d102:	47b0      	blx	r6
 801d104:	1c43      	adds	r3, r0, #1
 801d106:	89a3      	ldrh	r3, [r4, #12]
 801d108:	d106      	bne.n	801d118 <__sflush_r+0x68>
 801d10a:	6829      	ldr	r1, [r5, #0]
 801d10c:	291d      	cmp	r1, #29
 801d10e:	d82b      	bhi.n	801d168 <__sflush_r+0xb8>
 801d110:	4a29      	ldr	r2, [pc, #164]	; (801d1b8 <__sflush_r+0x108>)
 801d112:	410a      	asrs	r2, r1
 801d114:	07d6      	lsls	r6, r2, #31
 801d116:	d427      	bmi.n	801d168 <__sflush_r+0xb8>
 801d118:	2200      	movs	r2, #0
 801d11a:	6062      	str	r2, [r4, #4]
 801d11c:	04d9      	lsls	r1, r3, #19
 801d11e:	6922      	ldr	r2, [r4, #16]
 801d120:	6022      	str	r2, [r4, #0]
 801d122:	d504      	bpl.n	801d12e <__sflush_r+0x7e>
 801d124:	1c42      	adds	r2, r0, #1
 801d126:	d101      	bne.n	801d12c <__sflush_r+0x7c>
 801d128:	682b      	ldr	r3, [r5, #0]
 801d12a:	b903      	cbnz	r3, 801d12e <__sflush_r+0x7e>
 801d12c:	6560      	str	r0, [r4, #84]	; 0x54
 801d12e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d130:	602f      	str	r7, [r5, #0]
 801d132:	2900      	cmp	r1, #0
 801d134:	d0c9      	beq.n	801d0ca <__sflush_r+0x1a>
 801d136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d13a:	4299      	cmp	r1, r3
 801d13c:	d002      	beq.n	801d144 <__sflush_r+0x94>
 801d13e:	4628      	mov	r0, r5
 801d140:	f7ff f89e 	bl	801c280 <_free_r>
 801d144:	2000      	movs	r0, #0
 801d146:	6360      	str	r0, [r4, #52]	; 0x34
 801d148:	e7c0      	b.n	801d0cc <__sflush_r+0x1c>
 801d14a:	2301      	movs	r3, #1
 801d14c:	4628      	mov	r0, r5
 801d14e:	47b0      	blx	r6
 801d150:	1c41      	adds	r1, r0, #1
 801d152:	d1c8      	bne.n	801d0e6 <__sflush_r+0x36>
 801d154:	682b      	ldr	r3, [r5, #0]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d0c5      	beq.n	801d0e6 <__sflush_r+0x36>
 801d15a:	2b1d      	cmp	r3, #29
 801d15c:	d001      	beq.n	801d162 <__sflush_r+0xb2>
 801d15e:	2b16      	cmp	r3, #22
 801d160:	d101      	bne.n	801d166 <__sflush_r+0xb6>
 801d162:	602f      	str	r7, [r5, #0]
 801d164:	e7b1      	b.n	801d0ca <__sflush_r+0x1a>
 801d166:	89a3      	ldrh	r3, [r4, #12]
 801d168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d16c:	81a3      	strh	r3, [r4, #12]
 801d16e:	e7ad      	b.n	801d0cc <__sflush_r+0x1c>
 801d170:	690f      	ldr	r7, [r1, #16]
 801d172:	2f00      	cmp	r7, #0
 801d174:	d0a9      	beq.n	801d0ca <__sflush_r+0x1a>
 801d176:	0793      	lsls	r3, r2, #30
 801d178:	680e      	ldr	r6, [r1, #0]
 801d17a:	bf08      	it	eq
 801d17c:	694b      	ldreq	r3, [r1, #20]
 801d17e:	600f      	str	r7, [r1, #0]
 801d180:	bf18      	it	ne
 801d182:	2300      	movne	r3, #0
 801d184:	eba6 0807 	sub.w	r8, r6, r7
 801d188:	608b      	str	r3, [r1, #8]
 801d18a:	f1b8 0f00 	cmp.w	r8, #0
 801d18e:	dd9c      	ble.n	801d0ca <__sflush_r+0x1a>
 801d190:	6a21      	ldr	r1, [r4, #32]
 801d192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d194:	4643      	mov	r3, r8
 801d196:	463a      	mov	r2, r7
 801d198:	4628      	mov	r0, r5
 801d19a:	47b0      	blx	r6
 801d19c:	2800      	cmp	r0, #0
 801d19e:	dc06      	bgt.n	801d1ae <__sflush_r+0xfe>
 801d1a0:	89a3      	ldrh	r3, [r4, #12]
 801d1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1a6:	81a3      	strh	r3, [r4, #12]
 801d1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801d1ac:	e78e      	b.n	801d0cc <__sflush_r+0x1c>
 801d1ae:	4407      	add	r7, r0
 801d1b0:	eba8 0800 	sub.w	r8, r8, r0
 801d1b4:	e7e9      	b.n	801d18a <__sflush_r+0xda>
 801d1b6:	bf00      	nop
 801d1b8:	dfbffffe 	.word	0xdfbffffe

0801d1bc <_fflush_r>:
 801d1bc:	b538      	push	{r3, r4, r5, lr}
 801d1be:	690b      	ldr	r3, [r1, #16]
 801d1c0:	4605      	mov	r5, r0
 801d1c2:	460c      	mov	r4, r1
 801d1c4:	b913      	cbnz	r3, 801d1cc <_fflush_r+0x10>
 801d1c6:	2500      	movs	r5, #0
 801d1c8:	4628      	mov	r0, r5
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
 801d1cc:	b118      	cbz	r0, 801d1d6 <_fflush_r+0x1a>
 801d1ce:	6a03      	ldr	r3, [r0, #32]
 801d1d0:	b90b      	cbnz	r3, 801d1d6 <_fflush_r+0x1a>
 801d1d2:	f7fd fff3 	bl	801b1bc <__sinit>
 801d1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d0f3      	beq.n	801d1c6 <_fflush_r+0xa>
 801d1de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d1e0:	07d0      	lsls	r0, r2, #31
 801d1e2:	d404      	bmi.n	801d1ee <_fflush_r+0x32>
 801d1e4:	0599      	lsls	r1, r3, #22
 801d1e6:	d402      	bmi.n	801d1ee <_fflush_r+0x32>
 801d1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1ea:	f7fe fa24 	bl	801b636 <__retarget_lock_acquire_recursive>
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	4621      	mov	r1, r4
 801d1f2:	f7ff ff5d 	bl	801d0b0 <__sflush_r>
 801d1f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1f8:	07da      	lsls	r2, r3, #31
 801d1fa:	4605      	mov	r5, r0
 801d1fc:	d4e4      	bmi.n	801d1c8 <_fflush_r+0xc>
 801d1fe:	89a3      	ldrh	r3, [r4, #12]
 801d200:	059b      	lsls	r3, r3, #22
 801d202:	d4e1      	bmi.n	801d1c8 <_fflush_r+0xc>
 801d204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d206:	f7fe fa17 	bl	801b638 <__retarget_lock_release_recursive>
 801d20a:	e7dd      	b.n	801d1c8 <_fflush_r+0xc>

0801d20c <fiprintf>:
 801d20c:	b40e      	push	{r1, r2, r3}
 801d20e:	b503      	push	{r0, r1, lr}
 801d210:	4601      	mov	r1, r0
 801d212:	ab03      	add	r3, sp, #12
 801d214:	4805      	ldr	r0, [pc, #20]	; (801d22c <fiprintf+0x20>)
 801d216:	f853 2b04 	ldr.w	r2, [r3], #4
 801d21a:	6800      	ldr	r0, [r0, #0]
 801d21c:	9301      	str	r3, [sp, #4]
 801d21e:	f7ff fe2d 	bl	801ce7c <_vfiprintf_r>
 801d222:	b002      	add	sp, #8
 801d224:	f85d eb04 	ldr.w	lr, [sp], #4
 801d228:	b003      	add	sp, #12
 801d22a:	4770      	bx	lr
 801d22c:	200000b8 	.word	0x200000b8

0801d230 <__swhatbuf_r>:
 801d230:	b570      	push	{r4, r5, r6, lr}
 801d232:	460c      	mov	r4, r1
 801d234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d238:	2900      	cmp	r1, #0
 801d23a:	b096      	sub	sp, #88	; 0x58
 801d23c:	4615      	mov	r5, r2
 801d23e:	461e      	mov	r6, r3
 801d240:	da0d      	bge.n	801d25e <__swhatbuf_r+0x2e>
 801d242:	89a3      	ldrh	r3, [r4, #12]
 801d244:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d248:	f04f 0100 	mov.w	r1, #0
 801d24c:	bf0c      	ite	eq
 801d24e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d252:	2340      	movne	r3, #64	; 0x40
 801d254:	2000      	movs	r0, #0
 801d256:	6031      	str	r1, [r6, #0]
 801d258:	602b      	str	r3, [r5, #0]
 801d25a:	b016      	add	sp, #88	; 0x58
 801d25c:	bd70      	pop	{r4, r5, r6, pc}
 801d25e:	466a      	mov	r2, sp
 801d260:	f000 f848 	bl	801d2f4 <_fstat_r>
 801d264:	2800      	cmp	r0, #0
 801d266:	dbec      	blt.n	801d242 <__swhatbuf_r+0x12>
 801d268:	9901      	ldr	r1, [sp, #4]
 801d26a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d26e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d272:	4259      	negs	r1, r3
 801d274:	4159      	adcs	r1, r3
 801d276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d27a:	e7eb      	b.n	801d254 <__swhatbuf_r+0x24>

0801d27c <__smakebuf_r>:
 801d27c:	898b      	ldrh	r3, [r1, #12]
 801d27e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d280:	079d      	lsls	r5, r3, #30
 801d282:	4606      	mov	r6, r0
 801d284:	460c      	mov	r4, r1
 801d286:	d507      	bpl.n	801d298 <__smakebuf_r+0x1c>
 801d288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d28c:	6023      	str	r3, [r4, #0]
 801d28e:	6123      	str	r3, [r4, #16]
 801d290:	2301      	movs	r3, #1
 801d292:	6163      	str	r3, [r4, #20]
 801d294:	b002      	add	sp, #8
 801d296:	bd70      	pop	{r4, r5, r6, pc}
 801d298:	ab01      	add	r3, sp, #4
 801d29a:	466a      	mov	r2, sp
 801d29c:	f7ff ffc8 	bl	801d230 <__swhatbuf_r>
 801d2a0:	9900      	ldr	r1, [sp, #0]
 801d2a2:	4605      	mov	r5, r0
 801d2a4:	4630      	mov	r0, r6
 801d2a6:	f7ff f85f 	bl	801c368 <_malloc_r>
 801d2aa:	b948      	cbnz	r0, 801d2c0 <__smakebuf_r+0x44>
 801d2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2b0:	059a      	lsls	r2, r3, #22
 801d2b2:	d4ef      	bmi.n	801d294 <__smakebuf_r+0x18>
 801d2b4:	f023 0303 	bic.w	r3, r3, #3
 801d2b8:	f043 0302 	orr.w	r3, r3, #2
 801d2bc:	81a3      	strh	r3, [r4, #12]
 801d2be:	e7e3      	b.n	801d288 <__smakebuf_r+0xc>
 801d2c0:	89a3      	ldrh	r3, [r4, #12]
 801d2c2:	6020      	str	r0, [r4, #0]
 801d2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2c8:	81a3      	strh	r3, [r4, #12]
 801d2ca:	9b00      	ldr	r3, [sp, #0]
 801d2cc:	6163      	str	r3, [r4, #20]
 801d2ce:	9b01      	ldr	r3, [sp, #4]
 801d2d0:	6120      	str	r0, [r4, #16]
 801d2d2:	b15b      	cbz	r3, 801d2ec <__smakebuf_r+0x70>
 801d2d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d2d8:	4630      	mov	r0, r6
 801d2da:	f000 f81d 	bl	801d318 <_isatty_r>
 801d2de:	b128      	cbz	r0, 801d2ec <__smakebuf_r+0x70>
 801d2e0:	89a3      	ldrh	r3, [r4, #12]
 801d2e2:	f023 0303 	bic.w	r3, r3, #3
 801d2e6:	f043 0301 	orr.w	r3, r3, #1
 801d2ea:	81a3      	strh	r3, [r4, #12]
 801d2ec:	89a3      	ldrh	r3, [r4, #12]
 801d2ee:	431d      	orrs	r5, r3
 801d2f0:	81a5      	strh	r5, [r4, #12]
 801d2f2:	e7cf      	b.n	801d294 <__smakebuf_r+0x18>

0801d2f4 <_fstat_r>:
 801d2f4:	b538      	push	{r3, r4, r5, lr}
 801d2f6:	4d07      	ldr	r5, [pc, #28]	; (801d314 <_fstat_r+0x20>)
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	4604      	mov	r4, r0
 801d2fc:	4608      	mov	r0, r1
 801d2fe:	4611      	mov	r1, r2
 801d300:	602b      	str	r3, [r5, #0]
 801d302:	f7e6 fbee 	bl	8003ae2 <_fstat>
 801d306:	1c43      	adds	r3, r0, #1
 801d308:	d102      	bne.n	801d310 <_fstat_r+0x1c>
 801d30a:	682b      	ldr	r3, [r5, #0]
 801d30c:	b103      	cbz	r3, 801d310 <_fstat_r+0x1c>
 801d30e:	6023      	str	r3, [r4, #0]
 801d310:	bd38      	pop	{r3, r4, r5, pc}
 801d312:	bf00      	nop
 801d314:	200072f4 	.word	0x200072f4

0801d318 <_isatty_r>:
 801d318:	b538      	push	{r3, r4, r5, lr}
 801d31a:	4d06      	ldr	r5, [pc, #24]	; (801d334 <_isatty_r+0x1c>)
 801d31c:	2300      	movs	r3, #0
 801d31e:	4604      	mov	r4, r0
 801d320:	4608      	mov	r0, r1
 801d322:	602b      	str	r3, [r5, #0]
 801d324:	f7e6 fbed 	bl	8003b02 <_isatty>
 801d328:	1c43      	adds	r3, r0, #1
 801d32a:	d102      	bne.n	801d332 <_isatty_r+0x1a>
 801d32c:	682b      	ldr	r3, [r5, #0]
 801d32e:	b103      	cbz	r3, 801d332 <_isatty_r+0x1a>
 801d330:	6023      	str	r3, [r4, #0]
 801d332:	bd38      	pop	{r3, r4, r5, pc}
 801d334:	200072f4 	.word	0x200072f4

0801d338 <_sbrk_r>:
 801d338:	b538      	push	{r3, r4, r5, lr}
 801d33a:	4d06      	ldr	r5, [pc, #24]	; (801d354 <_sbrk_r+0x1c>)
 801d33c:	2300      	movs	r3, #0
 801d33e:	4604      	mov	r4, r0
 801d340:	4608      	mov	r0, r1
 801d342:	602b      	str	r3, [r5, #0]
 801d344:	f7e6 fbf6 	bl	8003b34 <_sbrk>
 801d348:	1c43      	adds	r3, r0, #1
 801d34a:	d102      	bne.n	801d352 <_sbrk_r+0x1a>
 801d34c:	682b      	ldr	r3, [r5, #0]
 801d34e:	b103      	cbz	r3, 801d352 <_sbrk_r+0x1a>
 801d350:	6023      	str	r3, [r4, #0]
 801d352:	bd38      	pop	{r3, r4, r5, pc}
 801d354:	200072f4 	.word	0x200072f4

0801d358 <abort>:
 801d358:	b508      	push	{r3, lr}
 801d35a:	2006      	movs	r0, #6
 801d35c:	f000 f890 	bl	801d480 <raise>
 801d360:	2001      	movs	r0, #1
 801d362:	f7e6 fb6f 	bl	8003a44 <_exit>

0801d366 <_calloc_r>:
 801d366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d368:	fba1 2402 	umull	r2, r4, r1, r2
 801d36c:	b94c      	cbnz	r4, 801d382 <_calloc_r+0x1c>
 801d36e:	4611      	mov	r1, r2
 801d370:	9201      	str	r2, [sp, #4]
 801d372:	f7fe fff9 	bl	801c368 <_malloc_r>
 801d376:	9a01      	ldr	r2, [sp, #4]
 801d378:	4605      	mov	r5, r0
 801d37a:	b930      	cbnz	r0, 801d38a <_calloc_r+0x24>
 801d37c:	4628      	mov	r0, r5
 801d37e:	b003      	add	sp, #12
 801d380:	bd30      	pop	{r4, r5, pc}
 801d382:	220c      	movs	r2, #12
 801d384:	6002      	str	r2, [r0, #0]
 801d386:	2500      	movs	r5, #0
 801d388:	e7f8      	b.n	801d37c <_calloc_r+0x16>
 801d38a:	4621      	mov	r1, r4
 801d38c:	f7fe f8dc 	bl	801b548 <memset>
 801d390:	e7f4      	b.n	801d37c <_calloc_r+0x16>

0801d392 <__ascii_mbtowc>:
 801d392:	b082      	sub	sp, #8
 801d394:	b901      	cbnz	r1, 801d398 <__ascii_mbtowc+0x6>
 801d396:	a901      	add	r1, sp, #4
 801d398:	b142      	cbz	r2, 801d3ac <__ascii_mbtowc+0x1a>
 801d39a:	b14b      	cbz	r3, 801d3b0 <__ascii_mbtowc+0x1e>
 801d39c:	7813      	ldrb	r3, [r2, #0]
 801d39e:	600b      	str	r3, [r1, #0]
 801d3a0:	7812      	ldrb	r2, [r2, #0]
 801d3a2:	1e10      	subs	r0, r2, #0
 801d3a4:	bf18      	it	ne
 801d3a6:	2001      	movne	r0, #1
 801d3a8:	b002      	add	sp, #8
 801d3aa:	4770      	bx	lr
 801d3ac:	4610      	mov	r0, r2
 801d3ae:	e7fb      	b.n	801d3a8 <__ascii_mbtowc+0x16>
 801d3b0:	f06f 0001 	mvn.w	r0, #1
 801d3b4:	e7f8      	b.n	801d3a8 <__ascii_mbtowc+0x16>

0801d3b6 <_realloc_r>:
 801d3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ba:	4680      	mov	r8, r0
 801d3bc:	4614      	mov	r4, r2
 801d3be:	460e      	mov	r6, r1
 801d3c0:	b921      	cbnz	r1, 801d3cc <_realloc_r+0x16>
 801d3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3c6:	4611      	mov	r1, r2
 801d3c8:	f7fe bfce 	b.w	801c368 <_malloc_r>
 801d3cc:	b92a      	cbnz	r2, 801d3da <_realloc_r+0x24>
 801d3ce:	f7fe ff57 	bl	801c280 <_free_r>
 801d3d2:	4625      	mov	r5, r4
 801d3d4:	4628      	mov	r0, r5
 801d3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3da:	f000 f86d 	bl	801d4b8 <_malloc_usable_size_r>
 801d3de:	4284      	cmp	r4, r0
 801d3e0:	4607      	mov	r7, r0
 801d3e2:	d802      	bhi.n	801d3ea <_realloc_r+0x34>
 801d3e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d3e8:	d812      	bhi.n	801d410 <_realloc_r+0x5a>
 801d3ea:	4621      	mov	r1, r4
 801d3ec:	4640      	mov	r0, r8
 801d3ee:	f7fe ffbb 	bl	801c368 <_malloc_r>
 801d3f2:	4605      	mov	r5, r0
 801d3f4:	2800      	cmp	r0, #0
 801d3f6:	d0ed      	beq.n	801d3d4 <_realloc_r+0x1e>
 801d3f8:	42bc      	cmp	r4, r7
 801d3fa:	4622      	mov	r2, r4
 801d3fc:	4631      	mov	r1, r6
 801d3fe:	bf28      	it	cs
 801d400:	463a      	movcs	r2, r7
 801d402:	f7fe f91a 	bl	801b63a <memcpy>
 801d406:	4631      	mov	r1, r6
 801d408:	4640      	mov	r0, r8
 801d40a:	f7fe ff39 	bl	801c280 <_free_r>
 801d40e:	e7e1      	b.n	801d3d4 <_realloc_r+0x1e>
 801d410:	4635      	mov	r5, r6
 801d412:	e7df      	b.n	801d3d4 <_realloc_r+0x1e>

0801d414 <__ascii_wctomb>:
 801d414:	b149      	cbz	r1, 801d42a <__ascii_wctomb+0x16>
 801d416:	2aff      	cmp	r2, #255	; 0xff
 801d418:	bf85      	ittet	hi
 801d41a:	238a      	movhi	r3, #138	; 0x8a
 801d41c:	6003      	strhi	r3, [r0, #0]
 801d41e:	700a      	strbls	r2, [r1, #0]
 801d420:	f04f 30ff 	movhi.w	r0, #4294967295
 801d424:	bf98      	it	ls
 801d426:	2001      	movls	r0, #1
 801d428:	4770      	bx	lr
 801d42a:	4608      	mov	r0, r1
 801d42c:	4770      	bx	lr

0801d42e <_raise_r>:
 801d42e:	291f      	cmp	r1, #31
 801d430:	b538      	push	{r3, r4, r5, lr}
 801d432:	4604      	mov	r4, r0
 801d434:	460d      	mov	r5, r1
 801d436:	d904      	bls.n	801d442 <_raise_r+0x14>
 801d438:	2316      	movs	r3, #22
 801d43a:	6003      	str	r3, [r0, #0]
 801d43c:	f04f 30ff 	mov.w	r0, #4294967295
 801d440:	bd38      	pop	{r3, r4, r5, pc}
 801d442:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d444:	b112      	cbz	r2, 801d44c <_raise_r+0x1e>
 801d446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d44a:	b94b      	cbnz	r3, 801d460 <_raise_r+0x32>
 801d44c:	4620      	mov	r0, r4
 801d44e:	f000 f831 	bl	801d4b4 <_getpid_r>
 801d452:	462a      	mov	r2, r5
 801d454:	4601      	mov	r1, r0
 801d456:	4620      	mov	r0, r4
 801d458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d45c:	f000 b818 	b.w	801d490 <_kill_r>
 801d460:	2b01      	cmp	r3, #1
 801d462:	d00a      	beq.n	801d47a <_raise_r+0x4c>
 801d464:	1c59      	adds	r1, r3, #1
 801d466:	d103      	bne.n	801d470 <_raise_r+0x42>
 801d468:	2316      	movs	r3, #22
 801d46a:	6003      	str	r3, [r0, #0]
 801d46c:	2001      	movs	r0, #1
 801d46e:	e7e7      	b.n	801d440 <_raise_r+0x12>
 801d470:	2400      	movs	r4, #0
 801d472:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d476:	4628      	mov	r0, r5
 801d478:	4798      	blx	r3
 801d47a:	2000      	movs	r0, #0
 801d47c:	e7e0      	b.n	801d440 <_raise_r+0x12>
	...

0801d480 <raise>:
 801d480:	4b02      	ldr	r3, [pc, #8]	; (801d48c <raise+0xc>)
 801d482:	4601      	mov	r1, r0
 801d484:	6818      	ldr	r0, [r3, #0]
 801d486:	f7ff bfd2 	b.w	801d42e <_raise_r>
 801d48a:	bf00      	nop
 801d48c:	200000b8 	.word	0x200000b8

0801d490 <_kill_r>:
 801d490:	b538      	push	{r3, r4, r5, lr}
 801d492:	4d07      	ldr	r5, [pc, #28]	; (801d4b0 <_kill_r+0x20>)
 801d494:	2300      	movs	r3, #0
 801d496:	4604      	mov	r4, r0
 801d498:	4608      	mov	r0, r1
 801d49a:	4611      	mov	r1, r2
 801d49c:	602b      	str	r3, [r5, #0]
 801d49e:	f7e6 fabf 	bl	8003a20 <_kill>
 801d4a2:	1c43      	adds	r3, r0, #1
 801d4a4:	d102      	bne.n	801d4ac <_kill_r+0x1c>
 801d4a6:	682b      	ldr	r3, [r5, #0]
 801d4a8:	b103      	cbz	r3, 801d4ac <_kill_r+0x1c>
 801d4aa:	6023      	str	r3, [r4, #0]
 801d4ac:	bd38      	pop	{r3, r4, r5, pc}
 801d4ae:	bf00      	nop
 801d4b0:	200072f4 	.word	0x200072f4

0801d4b4 <_getpid_r>:
 801d4b4:	f7e6 baac 	b.w	8003a10 <_getpid>

0801d4b8 <_malloc_usable_size_r>:
 801d4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4bc:	1f18      	subs	r0, r3, #4
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	bfbc      	itt	lt
 801d4c2:	580b      	ldrlt	r3, [r1, r0]
 801d4c4:	18c0      	addlt	r0, r0, r3
 801d4c6:	4770      	bx	lr

0801d4c8 <_init>:
 801d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4ca:	bf00      	nop
 801d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4ce:	bc08      	pop	{r3}
 801d4d0:	469e      	mov	lr, r3
 801d4d2:	4770      	bx	lr

0801d4d4 <_fini>:
 801d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4d6:	bf00      	nop
 801d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4da:	bc08      	pop	{r3}
 801d4dc:	469e      	mov	lr, r3
 801d4de:	4770      	bx	lr

0801d4e0 <__calc_fixed_time_MW_sweep_veneer>:
 801d4e0:	f85f f000 	ldr.w	pc, [pc]	; 801d4e4 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801d4e4:	00000fa1 	.word	0x00000fa1

0801d4e8 <__MW_update_veneer>:
 801d4e8:	f85f f000 	ldr.w	pc, [pc]	; 801d4ec <__MW_update_veneer+0x4>
 801d4ec:	00001535 	.word	0x00001535

0801d4f0 <__stop_timer_veneer>:
 801d4f0:	f85f f000 	ldr.w	pc, [pc]	; 801d4f4 <__stop_timer_veneer+0x4>
 801d4f4:	00001a19 	.word	0x00001a19

0801d4f8 <__start_POP_calibration_veneer>:
 801d4f8:	f85f f000 	ldr.w	pc, [pc]	; 801d4fc <__start_POP_calibration_veneer+0x4>
 801d4fc:	00001419 	.word	0x00001419

0801d500 <__timer_delay_veneer>:
 801d500:	f85f f000 	ldr.w	pc, [pc]	; 801d504 <__timer_delay_veneer+0x4>
 801d504:	00001a55 	.word	0x00001a55

0801d508 <__start_timer_veneer>:
 801d508:	f85f f000 	ldr.w	pc, [pc]	; 801d50c <__start_timer_veneer+0x4>
 801d50c:	000019dd 	.word	0x000019dd

0801d510 <__check_timer_veneer>:
 801d510:	f85f f000 	ldr.w	pc, [pc]	; 801d514 <__check_timer_veneer+0x4>
 801d514:	00001a3d 	.word	0x00001a3d

0801d518 <__start_pop_veneer>:
 801d518:	f85f f000 	ldr.w	pc, [pc]	; 801d51c <__start_pop_veneer+0x4>
 801d51c:	00001b45 	.word	0x00001b45

0801d520 <__init_ldc_comms_veneer>:
 801d520:	f85f f000 	ldr.w	pc, [pc]	; 801d524 <__init_ldc_comms_veneer+0x4>
 801d524:	00000019 	.word	0x00000019

0801d528 <__stop_pop_veneer>:
 801d528:	f85f f000 	ldr.w	pc, [pc]	; 801d52c <__stop_pop_veneer+0x4>
 801d52c:	00001ba1 	.word	0x00001ba1
