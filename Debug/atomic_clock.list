
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000898  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eb58  08000b30  08000b30  00020b30  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000302cc  2**0
                  CONTENTS
  4 .rodata       00000914  0800f688  0800f688  0002f688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800ff9c  0800ff9c  0002ff9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800ffa4  0800ffa4  0002ffa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffa8  0800ffa8  0002ffa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ffac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2000020c  080101b8  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2000026c  08010218  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003f0  200002cc  08010278  000302cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006bc  08010278  000306bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028f7e  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039f5  00000000  00000000  00059278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e30  00000000  00000000  0005cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cd8  00000000  00000000  0005eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000058f2  00000000  00000000  00060778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023626  00000000  00000000  0006606a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001977c7  00000000  00000000  00089690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00220e57  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000939c  00000000  00000000  00220ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
  bc:	b580      	push	{r7, lr}
  be:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
  c0:	f240 1103 	movw	r1, #259	; 0x103
  c4:	4821      	ldr	r0, [pc, #132]	; (14c <start_pop+0x90>)
  c6:	f000 fbe3 	bl	890 <__HAL_HRTIM_WaveformOutputStart_veneer>
  ca:	4603      	mov	r3, r0
  cc:	2b00      	cmp	r3, #0
  ce:	d004      	beq.n	da <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
  d0:	481f      	ldr	r0, [pc, #124]	; (150 <start_pop+0x94>)
  d2:	f000 fbcd 	bl	870 <__puts_veneer>
		Error_Handler();
  d6:	f000 fbb3 	bl	840 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
  da:	2302      	movs	r3, #2
  dc:	2202      	movs	r2, #2
  de:	2100      	movs	r1, #0
  e0:	481a      	ldr	r0, [pc, #104]	; (14c <start_pop+0x90>)
  e2:	f000 fbc9 	bl	878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
  e6:	4603      	mov	r3, r0
  e8:	2b00      	cmp	r3, #0
  ea:	d004      	beq.n	f6 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <start_pop+0x98>)
  ee:	f000 fbbf 	bl	870 <__puts_veneer>
		Error_Handler();
  f2:	f000 fba5 	bl	840 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
  f6:	4b18      	ldr	r3, [pc, #96]	; (158 <start_pop+0x9c>)
  f8:	681b      	ldr	r3, [r3, #0]
  fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  fe:	4618      	mov	r0, r3
 100:	f7ff ffae 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 104:	2301      	movs	r3, #1
 106:	2202      	movs	r2, #2
 108:	2100      	movs	r1, #0
 10a:	4810      	ldr	r0, [pc, #64]	; (14c <start_pop+0x90>)
 10c:	f000 fbb4 	bl	878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 110:	4603      	mov	r3, r0
 112:	2b00      	cmp	r3, #0
 114:	d004      	beq.n	120 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 116:	4811      	ldr	r0, [pc, #68]	; (15c <start_pop+0xa0>)
 118:	f000 fbaa 	bl	870 <__puts_veneer>
		Error_Handler();
 11c:	f000 fb90 	bl	840 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 120:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 124:	4809      	ldr	r0, [pc, #36]	; (14c <start_pop+0x90>)
 126:	f000 fb9f 	bl	868 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 12a:	4603      	mov	r3, r0
 12c:	2b00      	cmp	r3, #0
 12e:	d004      	beq.n	13a <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 130:	480b      	ldr	r0, [pc, #44]	; (160 <start_pop+0xa4>)
 132:	f000 fb9d 	bl	870 <__puts_veneer>
		Error_Handler();
 136:	f000 fb83 	bl	840 <__Error_Handler_veneer>
	}

	pop_running = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <start_pop+0xa8>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 140:	4809      	ldr	r0, [pc, #36]	; (168 <start_pop+0xac>)
 142:	f000 fb95 	bl	870 <__puts_veneer>

}
 146:	bf00      	nop
 148:	bd80      	pop	{r7, pc}
 14a:	bf00      	nop
 14c:	20000448 	.word	0x20000448
 150:	0800f688 	.word	0x0800f688
 154:	0800f6a0 	.word	0x0800f6a0
 158:	20000000 	.word	0x20000000
 15c:	0800f6b8 	.word	0x0800f6b8
 160:	0800f6d0 	.word	0x0800f6d0
 164:	20000688 	.word	0x20000688
 168:	0800f6e8 	.word	0x0800f6e8

0000016c <stop_pop>:
static void stop_pop() {
 16c:	b580      	push	{r7, lr}
 16e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 170:	f240 1103 	movw	r1, #259	; 0x103
 174:	4813      	ldr	r0, [pc, #76]	; (1c4 <stop_pop+0x58>)
 176:	f000 fb87 	bl	888 <__HAL_HRTIM_WaveformOutputStop_veneer>
 17a:	4603      	mov	r3, r0
 17c:	2b00      	cmp	r3, #0
 17e:	d004      	beq.n	18a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 180:	4811      	ldr	r0, [pc, #68]	; (1c8 <stop_pop+0x5c>)
 182:	f000 fb75 	bl	870 <__puts_veneer>
		Error_Handler();
 186:	f000 fb5b 	bl	840 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 18a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 18e:	480d      	ldr	r0, [pc, #52]	; (1c4 <stop_pop+0x58>)
 190:	f000 fb76 	bl	880 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 194:	4603      	mov	r3, r0
 196:	2b00      	cmp	r3, #0
 198:	d004      	beq.n	1a4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 19a:	480c      	ldr	r0, [pc, #48]	; (1cc <stop_pop+0x60>)
 19c:	f000 fb68 	bl	870 <__puts_veneer>
		Error_Handler();
 1a0:	f000 fb4e 	bl	840 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 1a4:	4b0a      	ldr	r3, [pc, #40]	; (1d0 <stop_pop+0x64>)
 1a6:	2200      	movs	r2, #0
 1a8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 1aa:	4b0a      	ldr	r3, [pc, #40]	; (1d4 <stop_pop+0x68>)
 1ac:	2200      	movs	r2, #0
 1ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 1b0:	2200      	movs	r2, #0
 1b2:	2102      	movs	r1, #2
 1b4:	4808      	ldr	r0, [pc, #32]	; (1d8 <stop_pop+0x6c>)
 1b6:	f000 fb4f 	bl	858 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 1ba:	4808      	ldr	r0, [pc, #32]	; (1dc <stop_pop+0x70>)
 1bc:	f000 fb58 	bl	870 <__puts_veneer>
}
 1c0:	bf00      	nop
 1c2:	bd80      	pop	{r7, pc}
 1c4:	20000448 	.word	0x20000448
 1c8:	0800f6fc 	.word	0x0800f6fc
 1cc:	0800f714 	.word	0x0800f714
 1d0:	2000068c 	.word	0x2000068c
 1d4:	20000688 	.word	0x20000688
 1d8:	58021000 	.word	0x58021000
 1dc:	0800f72c 	.word	0x0800f72c

000001e0 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 1e0:	b580      	push	{r7, lr}
 1e2:	b082      	sub	sp, #8
 1e4:	af00      	add	r7, sp, #0
 1e6:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 1e8:	2201      	movs	r2, #1
 1ea:	2180      	movs	r1, #128	; 0x80
 1ec:	4822      	ldr	r0, [pc, #136]	; (278 <_Min_Heap_Size+0x78>)
 1ee:	f000 fb33 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 1f2:	793b      	ldrb	r3, [r7, #4]
 1f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 1f8:	b2db      	uxtb	r3, r3
 1fa:	461a      	mov	r2, r3
 1fc:	2140      	movs	r1, #64	; 0x40
 1fe:	481e      	ldr	r0, [pc, #120]	; (278 <_Min_Heap_Size+0x78>)
 200:	f000 fb2a 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 204:	793b      	ldrb	r3, [r7, #4]
 206:	f3c3 0340 	ubfx	r3, r3, #1, #1
 20a:	b2db      	uxtb	r3, r3
 20c:	461a      	mov	r2, r3
 20e:	2120      	movs	r1, #32
 210:	4819      	ldr	r0, [pc, #100]	; (278 <_Min_Heap_Size+0x78>)
 212:	f000 fb21 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 216:	793b      	ldrb	r3, [r7, #4]
 218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 21c:	b2db      	uxtb	r3, r3
 21e:	461a      	mov	r2, r3
 220:	2110      	movs	r1, #16
 222:	4815      	ldr	r0, [pc, #84]	; (278 <_Min_Heap_Size+0x78>)
 224:	f000 fb18 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 228:	793b      	ldrb	r3, [r7, #4]
 22a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 22e:	b2db      	uxtb	r3, r3
 230:	461a      	mov	r2, r3
 232:	2108      	movs	r1, #8
 234:	4810      	ldr	r0, [pc, #64]	; (278 <_Min_Heap_Size+0x78>)
 236:	f000 fb0f 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 23a:	793b      	ldrb	r3, [r7, #4]
 23c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 240:	b2db      	uxtb	r3, r3
 242:	461a      	mov	r2, r3
 244:	2104      	movs	r1, #4
 246:	480d      	ldr	r0, [pc, #52]	; (27c <_Min_Heap_Size+0x7c>)
 248:	f000 fb06 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 24c:	793b      	ldrb	r3, [r7, #4]
 24e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 252:	b2db      	uxtb	r3, r3
 254:	461a      	mov	r2, r3
 256:	2110      	movs	r1, #16
 258:	4808      	ldr	r0, [pc, #32]	; (27c <_Min_Heap_Size+0x7c>)
 25a:	f000 fafd 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 25e:	793b      	ldrb	r3, [r7, #4]
 260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 264:	b2db      	uxtb	r3, r3
 266:	461a      	mov	r2, r3
 268:	2120      	movs	r1, #32
 26a:	4804      	ldr	r0, [pc, #16]	; (27c <_Min_Heap_Size+0x7c>)
 26c:	f000 faf4 	bl	858 <__HAL_GPIO_WritePin_veneer>
}
 270:	bf00      	nop
 272:	3708      	adds	r7, #8
 274:	46bd      	mov	sp, r7
 276:	bd80      	pop	{r7, pc}
 278:	58020c00 	.word	0x58020c00
 27c:	58021000 	.word	0x58021000

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fad5 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 facf 	bl	858 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fab5 	bl	858 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 faaf 	bl	858 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 faa9 	bl	858 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 faa8 	bl	860 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fa8b 	bl	858 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fa89 	bl	870 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fa6f 	bl	840 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800f9c8 	.word	0x0800f9c8

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <init_synthesiser>:

uint32_t init_synthesiser() {
 3a2:	b580      	push	{r7, lr}
 3a4:	b082      	sub	sp, #8
 3a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 3a8:	2200      	movs	r2, #0
 3aa:	2102      	movs	r1, #2
 3ac:	485a      	ldr	r0, [pc, #360]	; (518 <_Min_Stack_Size+0x118>)
 3ae:	f000 fa53 	bl	858 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 3b2:	2200      	movs	r2, #0
 3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 3b8:	4858      	ldr	r0, [pc, #352]	; (51c <_Min_Stack_Size+0x11c>)
 3ba:	f000 fa4d 	bl	858 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 3be:	2201      	movs	r2, #1
 3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 3c4:	4855      	ldr	r0, [pc, #340]	; (51c <_Min_Stack_Size+0x11c>)
 3c6:	f000 fa47 	bl	858 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 3ca:	2201      	movs	r2, #1
 3cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 3d0:	4852      	ldr	r0, [pc, #328]	; (51c <_Min_Stack_Size+0x11c>)
 3d2:	f000 fa41 	bl	858 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 3d6:	2064      	movs	r0, #100	; 0x64
 3d8:	f000 fa3a 	bl	850 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 3dc:	2300      	movs	r3, #0
 3de:	2200      	movs	r2, #0
 3e0:	2100      	movs	r1, #0
 3e2:	2020      	movs	r0, #32
 3e4:	f7ff ff4c 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 3e8:	2301      	movs	r3, #1
 3ea:	2200      	movs	r2, #0
 3ec:	2108      	movs	r1, #8
 3ee:	484c      	ldr	r0, [pc, #304]	; (520 <_Min_Stack_Size+0x120>)
 3f0:	f7ff ff46 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 3f4:	2000      	movs	r0, #0
 3f6:	f7ff ffbd 	bl	374 <synth_readreg>
 3fa:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 3fc:	4a49      	ldr	r2, [pc, #292]	; (524 <_Min_Stack_Size+0x124>)
 3fe:	687b      	ldr	r3, [r7, #4]
 400:	4293      	cmp	r3, r2
 402:	d00a      	beq.n	41a <_Min_Stack_Size+0x1a>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 404:	2200      	movs	r2, #0
 406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 40a:	4844      	ldr	r0, [pc, #272]	; (51c <_Min_Stack_Size+0x11c>)
 40c:	f000 fa24 	bl	858 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 410:	4845      	ldr	r0, [pc, #276]	; (528 <_Min_Stack_Size+0x128>)
 412:	f000 fa2d 	bl	870 <__puts_veneer>
		return ERROR;
 416:	2301      	movs	r3, #1
 418:	e073      	b.n	502 <_Min_Stack_Size+0x102>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 41a:	4844      	ldr	r0, [pc, #272]	; (52c <_Min_Stack_Size+0x12c>)
 41c:	f000 fa28 	bl	870 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 420:	2017      	movs	r0, #23
 422:	f7ff ffa7 	bl	374 <synth_readreg>
 426:	6078      	str	r0, [r7, #4]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
 428:	6879      	ldr	r1, [r7, #4]
 42a:	4841      	ldr	r0, [pc, #260]	; (530 <_Min_Stack_Size+0x130>)
 42c:	f000 fa0c 	bl	848 <__printf_veneer>
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 430:	687b      	ldr	r3, [r7, #4]
 432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 436:	607b      	str	r3, [r7, #4]
	read_data  &= ~(AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 438:	2301      	movs	r3, #1
 43a:	01db      	lsls	r3, r3, #7
 43c:	43db      	mvns	r3, r3
 43e:	461a      	mov	r2, r3
 440:	687b      	ldr	r3, [r7, #4]
 442:	4013      	ands	r3, r2
 444:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 446:	2301      	movs	r3, #1
 448:	2200      	movs	r2, #0
 44a:	2117      	movs	r1, #23
 44c:	6878      	ldr	r0, [r7, #4]
 44e:	f7ff ff17 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED MODES REGISTER: 0x%lX \r\n", read_data);
 452:	6879      	ldr	r1, [r7, #4]
 454:	4837      	ldr	r0, [pc, #220]	; (534 <_Min_Stack_Size+0x134>)
 456:	f000 f9f7 	bl	848 <__printf_veneer>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 45a:	2301      	movs	r3, #1
 45c:	2200      	movs	r2, #0
 45e:	2102      	movs	r1, #2
 460:	2001      	movs	r0, #1
 462:	f7ff ff0d 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
 466:	4834      	ldr	r0, [pc, #208]	; (538 <_Min_Stack_Size+0x138>)
 468:	f000 fa02 	bl	870 <__puts_veneer>
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 46c:	2007      	movs	r0, #7
 46e:	f7ff ff81 	bl	374 <synth_readreg>
 472:	6078      	str	r0, [r7, #4]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
 474:	6879      	ldr	r1, [r7, #4]
 476:	4831      	ldr	r0, [pc, #196]	; (53c <_Min_Stack_Size+0x13c>)
 478:	f000 f9e6 	bl	848 <__printf_veneer>
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 47c:	687b      	ldr	r3, [r7, #4]
 47e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 482:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 484:	687b      	ldr	r3, [r7, #4]
 486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 48a:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 48c:	687b      	ldr	r3, [r7, #4]
 48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 492:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 494:	2301      	movs	r3, #1
 496:	2200      	movs	r2, #0
 498:	2107      	movs	r1, #7
 49a:	6878      	ldr	r0, [r7, #4]
 49c:	f7ff fef0 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
 4a0:	6879      	ldr	r1, [r7, #4]
 4a2:	4827      	ldr	r0, [pc, #156]	; (540 <_Min_Stack_Size+0x140>)
 4a4:	f000 f9d0 	bl	848 <__printf_veneer>
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 4a8:	200a      	movs	r0, #10
 4aa:	f000 f9d1 	bl	850 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 4ae:	2016      	movs	r0, #22
 4b0:	f7ff ff60 	bl	374 <synth_readreg>
 4b4:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 4b6:	687b      	ldr	r3, [r7, #4]
 4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 4bc:	607b      	str	r3, [r7, #4]
	read_data |= (LO2GAIN << 8);	// Set LO2GAIN value.
 4be:	2303      	movs	r3, #3
 4c0:	021b      	lsls	r3, r3, #8
 4c2:	461a      	mov	r2, r3
 4c4:	687b      	ldr	r3, [r7, #4]
 4c6:	4313      	orrs	r3, r2
 4c8:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 4ca:	2301      	movs	r3, #1
 4cc:	2200      	movs	r2, #0
 4ce:	2116      	movs	r1, #22
 4d0:	6878      	ldr	r0, [r7, #4]
 4d2:	f7ff fed5 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
 4d6:	6879      	ldr	r1, [r7, #4]
 4d8:	481a      	ldr	r0, [pc, #104]	; (544 <_Min_Stack_Size+0x144>)
 4da:	f000 f9b5 	bl	848 <__printf_veneer>
	printf("LO2 gain setting: %u \r\n", LO2GAIN);
 4de:	2303      	movs	r3, #3
 4e0:	4619      	mov	r1, r3
 4e2:	4819      	ldr	r0, [pc, #100]	; (548 <_Min_Stack_Size+0x148>)
 4e4:	f000 f9b0 	bl	848 <__printf_veneer>
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 4e8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 510 <_Min_Stack_Size+0x110>
 4ec:	eeb0 0b47 	vmov.f64	d0, d7
 4f0:	f000 f8f4 	bl	6dc <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 4f4:	a306      	add	r3, pc, #24	; (adr r3, 510 <_Min_Stack_Size+0x110>)
 4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 4fa:	4814      	ldr	r0, [pc, #80]	; (54c <_Min_Stack_Size+0x14c>)
 4fc:	f000 f9a4 	bl	848 <__printf_veneer>
	return SUCCESS;
 500:	2300      	movs	r3, #0
}
 502:	4618      	mov	r0, r3
 504:	3708      	adds	r7, #8
 506:	46bd      	mov	sp, r7
 508:	bd80      	pop	{r7, pc}
 50a:	bf00      	nop
 50c:	f3af 8000 	nop.w
 510:	6d600000 	.word	0x6d600000
 514:	41e69e35 	.word	0x41e69e35
 518:	58021000 	.word	0x58021000
 51c:	58020800 	.word	0x58020800
 520:	0041bfff 	.word	0x0041bfff
 524:	00c7701a 	.word	0x00c7701a
 528:	0800f9e0 	.word	0x0800f9e0
 52c:	0800f9fc 	.word	0x0800f9fc
 530:	0800fa10 	.word	0x0800fa10
 534:	0800fa30 	.word	0x0800fa30
 538:	0800fa54 	.word	0x0800fa54
 53c:	0800fa78 	.word	0x0800fa78
 540:	0800fa9c 	.word	0x0800fa9c
 544:	0800fac8 	.word	0x0800fac8
 548:	0800faf4 	.word	0x0800faf4
 54c:	0800fb0c 	.word	0x0800fb0c

00000550 <check_lock>:

static const bool check_lock(uint32_t timeout) {
 550:	b580      	push	{r7, lr}
 552:	b084      	sub	sp, #16
 554:	af00      	add	r7, sp, #0
 556:	6078      	str	r0, [r7, #4]

	bool locked = false;
 558:	2300      	movs	r3, #0
 55a:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 55c:	4b16      	ldr	r3, [pc, #88]	; (5b8 <check_lock+0x68>)
 55e:	681b      	ldr	r3, [r3, #0]
 560:	4618      	mov	r0, r3
 562:	f7ff fd4d 	bl	0 <start_timer>
 566:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 568:	e014      	b.n	594 <check_lock+0x44>
		//printf("Debug lock while condition\r\n");
		//locked = synth_readreg(0x12) & (1UL << 1);
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 56a:	2012      	movs	r0, #18
 56c:	f7ff ff02 	bl	374 <synth_readreg>
 570:	4603      	mov	r3, r0
 572:	f003 0302 	and.w	r3, r3, #2
 576:	2b00      	cmp	r3, #0
 578:	bf14      	ite	ne
 57a:	2301      	movne	r3, #1
 57c:	2300      	moveq	r3, #0
 57e:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 580:	7bfb      	ldrb	r3, [r7, #15]
 582:	2b00      	cmp	r3, #0
 584:	d006      	beq.n	594 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 586:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <check_lock+0x68>)
 588:	681b      	ldr	r3, [r3, #0]
 58a:	4618      	mov	r0, r3
 58c:	f7ff fd56 	bl	3c <stop_timer>
			return true;
 590:	2301      	movs	r3, #1
 592:	e00d      	b.n	5b0 <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <check_lock+0x68>)
 596:	681b      	ldr	r3, [r3, #0]
 598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 59a:	68bb      	ldr	r3, [r7, #8]
 59c:	1ad3      	subs	r3, r2, r3
 59e:	687a      	ldr	r2, [r7, #4]
 5a0:	429a      	cmp	r2, r3
 5a2:	d8e2      	bhi.n	56a <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 5a4:	4b04      	ldr	r3, [pc, #16]	; (5b8 <check_lock+0x68>)
 5a6:	681b      	ldr	r3, [r3, #0]
 5a8:	4618      	mov	r0, r3
 5aa:	f7ff fd47 	bl	3c <stop_timer>
	return false;
 5ae:	2300      	movs	r3, #0
}
 5b0:	4618      	mov	r0, r3
 5b2:	3710      	adds	r7, #16
 5b4:	46bd      	mov	sp, r7
 5b6:	bd80      	pop	{r7, pc}
 5b8:	20000004 	.word	0x20000004

000005bc <mute_mw_outputs>:

static void mute_mw_outputs() {
 5bc:	b580      	push	{r7, lr}
 5be:	b082      	sub	sp, #8
 5c0:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 5c2:	2300      	movs	r3, #0
 5c4:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 5c6:	2016      	movs	r0, #22
 5c8:	f7ff fed4 	bl	374 <synth_readreg>
 5cc:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 5ce:	687b      	ldr	r3, [r7, #4]
 5d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 5d4:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 5d6:	2301      	movs	r3, #1
 5d8:	2200      	movs	r2, #0
 5da:	2116      	movs	r1, #22
 5dc:	6878      	ldr	r0, [r7, #4]
 5de:	f7ff fe4f 	bl	280 <synth_writereg>
}
 5e2:	bf00      	nop
 5e4:	3708      	adds	r7, #8
 5e6:	46bd      	mov	sp, r7
 5e8:	bd80      	pop	{r7, pc}

000005ea <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 5ea:	b580      	push	{r7, lr}
 5ec:	b086      	sub	sp, #24
 5ee:	af00      	add	r7, sp, #0
 5f0:	60f8      	str	r0, [r7, #12]
 5f2:	60b9      	str	r1, [r7, #8]
 5f4:	607a      	str	r2, [r7, #4]
 5f6:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 5f8:	2300      	movs	r3, #0
 5fa:	617b      	str	r3, [r7, #20]

	if (mute) {
 5fc:	78fb      	ldrb	r3, [r7, #3]
 5fe:	2b00      	cmp	r3, #0
 600:	d001      	beq.n	606 <set_frequency+0x1c>
		mute_mw_outputs();
 602:	f7ff ffdb 	bl	5bc <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 606:	4b30      	ldr	r3, [pc, #192]	; (6c8 <set_frequency+0xde>)
 608:	681b      	ldr	r3, [r3, #0]
 60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 60e:	d004      	beq.n	61a <set_frequency+0x30>
 610:	4b2d      	ldr	r3, [pc, #180]	; (6c8 <set_frequency+0xde>)
 612:	681b      	ldr	r3, [r3, #0]
 614:	68fa      	ldr	r2, [r7, #12]
 616:	429a      	cmp	r2, r3
 618:	d008      	beq.n	62c <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 61a:	2301      	movs	r3, #1
 61c:	2200      	movs	r2, #0
 61e:	2103      	movs	r1, #3
 620:	68f8      	ldr	r0, [r7, #12]
 622:	f7ff fe2d 	bl	280 <synth_writereg>
		last_integer = integer;
 626:	4a28      	ldr	r2, [pc, #160]	; (6c8 <set_frequency+0xde>)
 628:	68fb      	ldr	r3, [r7, #12]
 62a:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 62c:	4b27      	ldr	r3, [pc, #156]	; (6cc <set_frequency+0xe2>)
 62e:	681b      	ldr	r3, [r3, #0]
 630:	f1b3 3fff 	cmp.w	r3, #4294967295
 634:	d004      	beq.n	640 <set_frequency+0x56>
 636:	4b25      	ldr	r3, [pc, #148]	; (6cc <set_frequency+0xe2>)
 638:	681b      	ldr	r3, [r3, #0]
 63a:	68ba      	ldr	r2, [r7, #8]
 63c:	429a      	cmp	r2, r3
 63e:	d008      	beq.n	652 <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 640:	2301      	movs	r3, #1
 642:	2200      	movs	r2, #0
 644:	2104      	movs	r1, #4
 646:	68b8      	ldr	r0, [r7, #8]
 648:	f7ff fe1a 	bl	280 <synth_writereg>
		last_fraction = fraction;
 64c:	4a1f      	ldr	r2, [pc, #124]	; (6cc <set_frequency+0xe2>)
 64e:	68bb      	ldr	r3, [r7, #8]
 650:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 652:	4b1f      	ldr	r3, [pc, #124]	; (6d0 <set_frequency+0xe6>)
 654:	681b      	ldr	r3, [r3, #0]
 656:	f1b3 3fff 	cmp.w	r3, #4294967295
 65a:	d007      	beq.n	66c <set_frequency+0x82>
 65c:	4b1c      	ldr	r3, [pc, #112]	; (6d0 <set_frequency+0xe6>)
 65e:	681b      	ldr	r3, [r3, #0]
 660:	687a      	ldr	r2, [r7, #4]
 662:	429a      	cmp	r2, r3
 664:	d102      	bne.n	66c <set_frequency+0x82>
 666:	78fb      	ldrb	r3, [r7, #3]
 668:	2b00      	cmp	r3, #0
 66a:	d014      	beq.n	696 <set_frequency+0xac>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 66c:	2016      	movs	r0, #22
 66e:	f7ff fe81 	bl	374 <synth_readreg>
 672:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 674:	697b      	ldr	r3, [r7, #20]
 676:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 67a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 67c:	697a      	ldr	r2, [r7, #20]
 67e:	687b      	ldr	r3, [r7, #4]
 680:	4313      	orrs	r3, r2
 682:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 684:	2301      	movs	r3, #1
 686:	2200      	movs	r2, #0
 688:	2116      	movs	r1, #22
 68a:	6978      	ldr	r0, [r7, #20]
 68c:	f7ff fdf8 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 690:	4a0f      	ldr	r2, [pc, #60]	; (6d0 <set_frequency+0xe6>)
 692:	687b      	ldr	r3, [r7, #4]
 694:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 69a:	4618      	mov	r0, r3
 69c:	f7ff ff58 	bl	550 <check_lock>
 6a0:	4603      	mov	r3, r0
 6a2:	f083 0301 	eor.w	r3, r3, #1
 6a6:	b2db      	uxtb	r3, r3
 6a8:	2b00      	cmp	r3, #0
 6aa:	d009      	beq.n	6c0 <set_frequency+0xd6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 6ac:	2200      	movs	r2, #0
 6ae:	2102      	movs	r1, #2
 6b0:	4808      	ldr	r0, [pc, #32]	; (6d4 <set_frequency+0xea>)
 6b2:	f000 f8d1 	bl	858 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed within set_frequency!\r\n");
 6b6:	4808      	ldr	r0, [pc, #32]	; (6d8 <set_frequency+0xee>)
 6b8:	f000 f8da 	bl	870 <__puts_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 6bc:	f000 f8c0 	bl	840 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
	}

}
 6c0:	bf00      	nop
 6c2:	3718      	adds	r7, #24
 6c4:	46bd      	mov	sp, r7
 6c6:	bd80      	pop	{r7, pc}
 6c8:	20000008 	.word	0x20000008
 6cc:	2000000c 	.word	0x2000000c
 6d0:	20000010 	.word	0x20000010
 6d4:	58021000 	.word	0x58021000
 6d8:	0800fb30 	.word	0x0800fb30

000006dc <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 6dc:	b580      	push	{r7, lr}
 6de:	b088      	sub	sp, #32
 6e0:	af00      	add	r7, sp, #0
 6e2:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 6e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 788 <set_frequency_hz+0xac>
 6ea:	ed97 6b00 	vldr	d6, [r7]
 6ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6f6:	ee17 3a90 	vmov	r3, s15
 6fa:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 6fc:	69fb      	ldr	r3, [r7, #28]
 6fe:	2b01      	cmp	r3, #1
 700:	d00b      	beq.n	71a <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 702:	e002      	b.n	70a <set_frequency_hz+0x2e>
			k = k - 1;
 704:	69fb      	ldr	r3, [r7, #28]
 706:	3b01      	subs	r3, #1
 708:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 70a:	69fb      	ldr	r3, [r7, #28]
 70c:	2b3e      	cmp	r3, #62	; 0x3e
 70e:	d8f9      	bhi.n	704 <set_frequency_hz+0x28>
 710:	69fb      	ldr	r3, [r7, #28]
 712:	f003 0301 	and.w	r3, r3, #1
 716:	2b00      	cmp	r3, #0
 718:	d1f4      	bne.n	704 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 71a:	69fb      	ldr	r3, [r7, #28]
 71c:	ee07 3a90 	vmov	s15, r3
 720:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 724:	ed97 7b00 	vldr	d7, [r7]
 728:	ee26 6b07 	vmul.f64	d6, d6, d7
 72c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 790 <set_frequency_hz+0xb4>
 730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 734:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 738:	ed97 7b04 	vldr	d7, [r7, #16]
 73c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 740:	ee17 3a90 	vmov	r3, s15
 744:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 746:	68fb      	ldr	r3, [r7, #12]
 748:	ee07 3a90 	vmov	s15, r3
 74c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 750:	ed97 6b04 	vldr	d6, [r7, #16]
 754:	ee36 7b47 	vsub.f64	d7, d6, d7
 758:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 798 <set_frequency_hz+0xbc>
 75c:	ee27 7b06 	vmul.f64	d7, d7, d6
 760:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 764:	ee37 7b06 	vadd.f64	d7, d7, d6
 768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 76c:	ee17 3a90 	vmov	r3, s15
 770:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	set_frequency(NINT, NFRAC, k, MANUAL_MUTE);
 772:	2301      	movs	r3, #1
 774:	69fa      	ldr	r2, [r7, #28]
 776:	68b9      	ldr	r1, [r7, #8]
 778:	68f8      	ldr	r0, [r7, #12]
 77a:	f7ff ff36 	bl	5ea <set_frequency>

}
 77e:	bf00      	nop
 780:	3720      	adds	r7, #32
 782:	46bd      	mov	sp, r7
 784:	bd80      	pop	{r7, pc}
 786:	bf00      	nop
 788:	20000000 	.word	0x20000000
 78c:	41ee8c21 	.word	0x41ee8c21
 790:	00000000 	.word	0x00000000
 794:	4187d784 	.word	0x4187d784
 798:	00000000 	.word	0x00000000
 79c:	41700000 	.word	0x41700000

000007a0 <run_sweep>:

void run_sweep() {
 7a0:	b580      	push	{r7, lr}
 7a2:	b084      	sub	sp, #16
 7a4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 7a6:	2201      	movs	r2, #1
 7a8:	2102      	movs	r1, #2
 7aa:	481f      	ldr	r0, [pc, #124]	; (828 <run_sweep+0x88>)
 7ac:	f000 f854 	bl	858 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 7b0:	b672      	cpsid	i
}
 7b2:	bf00      	nop
	double dac_val = 0;
#endif

	__disable_irq();

	for (uint32_t i = 0; i < num_points; i++) {
 7b4:	2300      	movs	r3, #0
 7b6:	60fb      	str	r3, [r7, #12]
 7b8:	e01e      	b.n	7f8 <run_sweep+0x58>

		double fo = start_freq + (i * sweep_settings.step_size);
 7ba:	68fb      	ldr	r3, [r7, #12]
 7bc:	ee07 3a90 	vmov	s15, r3
 7c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7c4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 820 <run_sweep+0x80>
 7c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 7cc:	4b17      	ldr	r3, [pc, #92]	; (82c <run_sweep+0x8c>)
 7ce:	ed93 7b00 	vldr	d7, [r3]
 7d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 7d6:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 7da:	ed97 0b00 	vldr	d0, [r7]
 7de:	f7ff ff7d 	bl	6dc <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 7e2:	4b13      	ldr	r3, [pc, #76]	; (830 <run_sweep+0x90>)
 7e4:	681b      	ldr	r3, [r3, #0]
 7e6:	f241 1208 	movw	r2, #4360	; 0x1108
 7ea:	4611      	mov	r1, r2
 7ec:	4618      	mov	r0, r3
 7ee:	f7ff fc37 	bl	60 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 7f2:	68fb      	ldr	r3, [r7, #12]
 7f4:	3301      	adds	r3, #1
 7f6:	60fb      	str	r3, [r7, #12]
 7f8:	4b0e      	ldr	r3, [pc, #56]	; (834 <run_sweep+0x94>)
 7fa:	681b      	ldr	r3, [r3, #0]
 7fc:	68fa      	ldr	r2, [r7, #12]
 7fe:	429a      	cmp	r2, r3
 800:	d3db      	bcc.n	7ba <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 802:	b662      	cpsie	i
}
 804:	bf00      	nop

	}

	__enable_irq();

	printf("Total Points: %lu\r\n", num_points);
 806:	4b0b      	ldr	r3, [pc, #44]	; (834 <run_sweep+0x94>)
 808:	681b      	ldr	r3, [r3, #0]
 80a:	4619      	mov	r1, r3
 80c:	480a      	ldr	r0, [pc, #40]	; (838 <run_sweep+0x98>)
 80e:	f000 f81b 	bl	848 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 812:	bf00      	nop
 814:	3710      	adds	r7, #16
 816:	46bd      	mov	sp, r7
 818:	bd80      	pop	{r7, pc}
 81a:	bf00      	nop
 81c:	f3af 8000 	nop.w
 820:	00000000 	.word	0x00000000
 824:	4017d784 	.word	0x4017d784
 828:	58021000 	.word	0x58021000
 82c:	0800fb80 	.word	0x0800fb80
 830:	20000004 	.word	0x20000004
 834:	0800fb88 	.word	0x0800fb88
 838:	0800fb54 	.word	0x0800fb54
 83c:	00000000 	.word	0x00000000

00000840 <__Error_Handler_veneer>:
 840:	f85f f000 	ldr.w	pc, [pc]	; 844 <__Error_Handler_veneer+0x4>
 844:	08001e49 	.word	0x08001e49

00000848 <__printf_veneer>:
 848:	f85f f000 	ldr.w	pc, [pc]	; 84c <__printf_veneer+0x4>
 84c:	0800d4ed 	.word	0x0800d4ed

00000850 <__HAL_Delay_veneer>:
 850:	f85f f000 	ldr.w	pc, [pc]	; 854 <__HAL_Delay_veneer+0x4>
 854:	080029c1 	.word	0x080029c1

00000858 <__HAL_GPIO_WritePin_veneer>:
 858:	f85f f000 	ldr.w	pc, [pc]	; 85c <__HAL_GPIO_WritePin_veneer+0x4>
 85c:	080056e9 	.word	0x080056e9

00000860 <__HAL_GPIO_ReadPin_veneer>:
 860:	f85f f000 	ldr.w	pc, [pc]	; 864 <__HAL_GPIO_ReadPin_veneer+0x4>
 864:	080056b9 	.word	0x080056b9

00000868 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 868:	f85f f000 	ldr.w	pc, [pc]	; 86c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 86c:	08006005 	.word	0x08006005

00000870 <__puts_veneer>:
 870:	f85f f000 	ldr.w	pc, [pc]	; 874 <__puts_veneer+0x4>
 874:	0800d5f9 	.word	0x0800d5f9

00000878 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 878:	f85f f000 	ldr.w	pc, [pc]	; 87c <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 87c:	08005d65 	.word	0x08005d65

00000880 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 880:	f85f f000 	ldr.w	pc, [pc]	; 884 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 884:	080060e5 	.word	0x080060e5

00000888 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 888:	f85f f000 	ldr.w	pc, [pc]	; 88c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 88c:	08005fab 	.word	0x08005fab

00000890 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 890:	f85f f000 	ldr.w	pc, [pc]	; 894 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 894:	08005f51 	.word	0x08005f51

Disassembly of section .text:

08000b30 <__do_global_dtors_aux>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c05      	ldr	r4, [pc, #20]	; (8000b48 <__do_global_dtors_aux+0x18>)
 8000b34:	7823      	ldrb	r3, [r4, #0]
 8000b36:	b933      	cbnz	r3, 8000b46 <__do_global_dtors_aux+0x16>
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__do_global_dtors_aux+0x1c>)
 8000b3a:	b113      	cbz	r3, 8000b42 <__do_global_dtors_aux+0x12>
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <__do_global_dtors_aux+0x20>)
 8000b3e:	f3af 8000 	nop.w
 8000b42:	2301      	movs	r3, #1
 8000b44:	7023      	strb	r3, [r4, #0]
 8000b46:	bd10      	pop	{r4, pc}
 8000b48:	200002cc 	.word	0x200002cc
 8000b4c:	00000000 	.word	0x00000000
 8000b50:	0800f640 	.word	0x0800f640

08000b54 <frame_dummy>:
 8000b54:	b508      	push	{r3, lr}
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <frame_dummy+0x10>)
 8000b58:	b11b      	cbz	r3, 8000b62 <frame_dummy+0xe>
 8000b5a:	4903      	ldr	r1, [pc, #12]	; (8000b68 <frame_dummy+0x14>)
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <frame_dummy+0x18>)
 8000b5e:	f3af 8000 	nop.w
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	00000000 	.word	0x00000000
 8000b68:	200002d0 	.word	0x200002d0
 8000b6c:	0800f640 	.word	0x0800f640

08000b70 <strlen>:
 8000b70:	4603      	mov	r3, r0
 8000b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d1fb      	bne.n	8000b72 <strlen+0x2>
 8000b7a:	1a18      	subs	r0, r3, r0
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <memchr>:
 8000b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b84:	2a10      	cmp	r2, #16
 8000b86:	db2b      	blt.n	8000be0 <memchr+0x60>
 8000b88:	f010 0f07 	tst.w	r0, #7
 8000b8c:	d008      	beq.n	8000ba0 <memchr+0x20>
 8000b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d02d      	beq.n	8000bf4 <memchr+0x74>
 8000b98:	f010 0f07 	tst.w	r0, #7
 8000b9c:	b342      	cbz	r2, 8000bf0 <memchr+0x70>
 8000b9e:	d1f6      	bne.n	8000b8e <memchr+0xe>
 8000ba0:	b4f0      	push	{r4, r5, r6, r7}
 8000ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000baa:	f022 0407 	bic.w	r4, r2, #7
 8000bae:	f07f 0700 	mvns.w	r7, #0
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000bb8:	3c08      	subs	r4, #8
 8000bba:	ea85 0501 	eor.w	r5, r5, r1
 8000bbe:	ea86 0601 	eor.w	r6, r6, r1
 8000bc2:	fa85 f547 	uadd8	r5, r5, r7
 8000bc6:	faa3 f587 	sel	r5, r3, r7
 8000bca:	fa86 f647 	uadd8	r6, r6, r7
 8000bce:	faa5 f687 	sel	r6, r5, r7
 8000bd2:	b98e      	cbnz	r6, 8000bf8 <memchr+0x78>
 8000bd4:	d1ee      	bne.n	8000bb4 <memchr+0x34>
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bdc:	f002 0207 	and.w	r2, r2, #7
 8000be0:	b132      	cbz	r2, 8000bf0 <memchr+0x70>
 8000be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be6:	3a01      	subs	r2, #1
 8000be8:	ea83 0301 	eor.w	r3, r3, r1
 8000bec:	b113      	cbz	r3, 8000bf4 <memchr+0x74>
 8000bee:	d1f8      	bne.n	8000be2 <memchr+0x62>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	bf06      	itte	eq
 8000bfc:	4635      	moveq	r5, r6
 8000bfe:	3803      	subeq	r0, #3
 8000c00:	3807      	subne	r0, #7
 8000c02:	f015 0f01 	tst.w	r5, #1
 8000c06:	d107      	bne.n	8000c18 <memchr+0x98>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c0e:	bf02      	ittt	eq
 8000c10:	3001      	addeq	r0, #1
 8000c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c16:	3001      	addeq	r0, #1
 8000c18:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b974 	b.w	8000f20 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468e      	mov	lr, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14d      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4694      	mov	ip, r2
 8000c62:	d969      	bls.n	8000d38 <__udivmoddi4+0xe8>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b152      	cbz	r2, 8000c80 <__udivmoddi4+0x30>
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	f1c2 0120 	rsb	r1, r2, #32
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	0c21      	lsrs	r1, r4, #16
 8000c86:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8a:	fa1f f78c 	uxth.w	r7, ip
 8000c8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c96:	fb06 f107 	mul.w	r1, r6, r7
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 811f 	bcs.w	8000ee8 <__udivmoddi4+0x298>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 811c 	bls.w	8000ee8 <__udivmoddi4+0x298>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 f707 	mul.w	r7, r0, r7
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x92>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	f080 810a 	bcs.w	8000eec <__udivmoddi4+0x29c>
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	f240 8107 	bls.w	8000eec <__udivmoddi4+0x29c>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce6:	1be4      	subs	r4, r4, r7
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa4>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xc2>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80ef 	beq.w	8000ee2 <__udivmoddi4+0x292>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x160>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80f9 	bhi.w	8000f16 <__udivmoddi4+0x2c6>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa4>
 8000d32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xec>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 8092 	bne.w	8000e6a <__udivmoddi4+0x21a>
 8000d46:	eba1 010c 	sub.w	r1, r1, ip
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2601      	movs	r6, #1
 8000d54:	0c20      	lsrs	r0, r4, #16
 8000d56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d62:	fb0e f003 	mul.w	r0, lr, r3
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x12c>
 8000d6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x12a>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2c0>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	1a09      	subs	r1, r1, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1110 	mls	r1, r7, r0, r1
 8000d88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x156>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x154>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000da4:	4608      	mov	r0, r1
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dae:	e79c      	b.n	8000cea <__udivmoddi4+0x9a>
 8000db0:	f1c6 0720 	rsb	r7, r6, #32
 8000db4:	40b3      	lsls	r3, r6
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	40f9      	lsrs	r1, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd6:	0c20      	lsrs	r0, r4, #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fb09 1118 	mls	r1, r9, r8, r1
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	fb08 f00e 	mul.w	r0, r8, lr
 8000de8:	4288      	cmp	r0, r1
 8000dea:	fa02 f206 	lsl.w	r2, r2, r6
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b8>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2bc>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2bc>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e10:	fb09 1110 	mls	r1, r9, r0, r1
 8000e14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1c:	458e      	cmp	lr, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1e2>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e36:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3a:	eba1 010e 	sub.w	r1, r1, lr
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46a6      	mov	lr, r4
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x212>
 8000e4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e52:	fa01 f707 	lsl.w	r7, r1, r7
 8000e56:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5a:	40f1      	lsrs	r1, r6
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c2 0320 	rsb	r3, r2, #32
 8000e6e:	40d8      	lsrs	r0, r3
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e88:	fb07 3610 	mls	r6, r7, r0, r3
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e92:	fb00 f60e 	mul.w	r6, r0, lr
 8000e96:	429e      	cmp	r6, r3
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x260>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b8>
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b8>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	b289      	uxth	r1, r1
 8000eb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x28a>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed6:	3e02      	subs	r6, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0x104>
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e705      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6f8      	b.n	8000ce2 <__udivmoddi4+0x92>
 8000ef0:	454b      	cmp	r3, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f8>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f8>
 8000f00:	4646      	mov	r6, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x28a>
 8000f04:	4620      	mov	r0, r4
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1e2>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b8>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x12c>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e709      	b.n	8000d2e <__udivmoddi4+0xde>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x156>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	2201      	movs	r2, #1
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <__io_putchar+0x20>)
 8000f36:	f00a fd41 	bl	800b9bc <HAL_UART_Transmit>
	return ch;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200005f4 	.word	0x200005f4

08000f48 <HAL_LPTIM_AutoReloadMatchCallback>:
		}

	}
}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8000f50:	2101      	movs	r1, #1
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8000f54:	f004 fbe1 	bl	800571a <HAL_GPIO_TogglePin>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58020400 	.word	0x58020400

08000f64 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d11e      	bne.n	8000fb2 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8000f74:	7b3b      	ldrb	r3, [r7, #12]
 8000f76:	f36f 0300 	bfc	r3, #0, #1
 8000f7a:	733b      	strb	r3, [r7, #12]
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	f36f 0341 	bfc	r3, #1, #1
 8000f82:	733b      	strb	r3, [r7, #12]
 8000f84:	7b3b      	ldrb	r3, [r7, #12]
 8000f86:	f36f 0382 	bfc	r3, #2, #1
 8000f8a:	733b      	strb	r3, [r7, #12]
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	f36f 03c3 	bfc	r3, #3, #1
 8000f92:	733b      	strb	r3, [r7, #12]
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	f36f 1304 	bfc	r3, #4, #1
 8000f9a:	733b      	strb	r3, [r7, #12]
 8000f9c:	7b3b      	ldrb	r3, [r7, #12]
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	733b      	strb	r3, [r7, #12]
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	f36f 1386 	bfc	r3, #6, #1
 8000faa:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8000fac:	7b38      	ldrb	r0, [r7, #12]
 8000fae:	f00e fb67 	bl	800f680 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d175      	bne.n	80010b8 <HAL_HRTIM_Compare3EventCallback+0xfc>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8000fd0:	7a38      	ldrb	r0, [r7, #8]
 8000fd2:	f00e fb55 	bl	800f680 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8000fd8:	ed93 5b00 	vldr	d5, [r3]
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8000fde:	ed93 6b04 	vldr	d6, [r3, #16]
 8000fe2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fe6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8000ff0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ff4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ff8:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8000ffe:	ed93 5b02 	vldr	d5, [r3, #8]
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001004:	ed93 6b04 	vldr	d6, [r3, #16]
 8001008:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800100c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001014:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001018:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800101e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001022:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001026:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800102a:	ed97 6b04 	vldr	d6, [r7, #16]
 800102e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001032:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001038:	ed93 6b04 	vldr	d6, [r3, #16]
 800103c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001040:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001044:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001048:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800104c:	ee17 3a90 	vmov	r3, s15
 8001050:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d106      	bne.n	800106a <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 800105c:	f00e fb08 	bl	800f670 <__stop_pop_veneer>
			i = 0;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
			start_pop();
 8001066:	f00e faf7 	bl	800f658 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001078:	ed93 7b04 	vldr	d7, [r3, #16]
 800107c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001080:	ed97 7b06 	vldr	d7, [r7, #24]
 8001084:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001088:	eeb0 0b47 	vmov.f64	d0, d7
 800108c:	f00e fae8 	bl	800f660 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001098:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80010a2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 80010a4:	2102      	movs	r1, #2
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_HRTIM_Compare3EventCallback+0x110>)
 80010a8:	f004 fb37 	bl	800571a <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_HRTIM_Compare3EventCallback+0x114>)
 80010b4:	f00c fa1a 	bl	800d4ec <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0800fb68 	.word	0x0800fb68
 80010c4:	20000698 	.word	0x20000698
 80010c8:	2000068c 	.word	0x2000068c
 80010cc:	58021000 	.word	0x58021000
 80010d0:	0800f7dc 	.word	0x0800f7dc

080010d4 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80010f2:	4a75      	ldr	r2, [pc, #468]	; (80012c8 <main+0x1dc>)
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <main+0x1e0>)
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	4975      	ldr	r1, [pc, #468]	; (80012d0 <main+0x1e4>)
 80010fc:	4873      	ldr	r0, [pc, #460]	; (80012cc <main+0x1e0>)
 80010fe:	f00b fd9b 	bl	800cc38 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <main+0x1e8>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
}
 8001112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001114:	f3bf 8f6f 	isb	sy
}
 8001118:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800111a:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <main+0x1e8>)
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001122:	f3bf 8f4f 	dsb	sy
}
 8001126:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001128:	f3bf 8f6f 	isb	sy
}
 800112c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <main+0x1e8>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <main+0x1e8>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	e000      	b.n	8001148 <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001146:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001148:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <main+0x1e8>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d138      	bne.n	80011c6 <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <main+0x1e8>)
 8001156:	2200      	movs	r2, #0
 8001158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800115c:	f3bf 8f4f 	dsb	sy
}
 8001160:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <main+0x1e8>)
 8001164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001168:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	0b5b      	lsrs	r3, r3, #13
 800116e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001172:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	08db      	lsrs	r3, r3, #3
 8001178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800117c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	015a      	lsls	r2, r3, #5
 8001182:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001186:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800118c:	4951      	ldr	r1, [pc, #324]	; (80012d4 <main+0x1e8>)
 800118e:	4313      	orrs	r3, r2
 8001190:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ef      	bne.n	800117e <main+0x92>
    } while(sets-- != 0U);
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	60ba      	str	r2, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e5      	bne.n	8001174 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80011a8:	f3bf 8f4f 	dsb	sy
}
 80011ac:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <main+0x1e8>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <main+0x1e8>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ba:	f3bf 8f4f 	dsb	sy
}
 80011be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c0:	f3bf 8f6f 	isb	sy
}
 80011c4:	e000      	b.n	80011c8 <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011c6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f001 fb68 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f8a8 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 fcb4 	bl	8001b3c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80011d4:	f000 fb94 	bl	8001900 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80011d8:	f000 f9c2 	bl	8001560 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80011dc:	f000 fc60 	bl	8001aa0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80011e0:	f000 fc10 	bl	8001a04 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011e4:	f000 fbba 	bl	800195c <MX_TIM1_Init>
  MX_HRTIM_Init();
 80011e8:	f000 fa38 	bl	800165c <MX_HRTIM_Init>
  MX_ETH_Init();
 80011ec:	f000 f9ea 	bl	80015c4 <MX_ETH_Init>
  MX_ADC3_Init();
 80011f0:	f000 f954 	bl	800149c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80011f4:	4838      	ldr	r0, [pc, #224]	; (80012d8 <main+0x1ec>)
 80011f6:	f00c f979 	bl	800d4ec <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80011fa:	4938      	ldr	r1, [pc, #224]	; (80012dc <main+0x1f0>)
 80011fc:	4838      	ldr	r0, [pc, #224]	; (80012e0 <main+0x1f4>)
 80011fe:	f00c f975 	bl	800d4ec <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser() != SUCCESS) {
 8001202:	f00e fa39 	bl	800f678 <__init_synthesiser_veneer>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <main+0x12a>
		printf("Synthesiser initialisation failed!\r\n");
 800120c:	4835      	ldr	r0, [pc, #212]	; (80012e4 <main+0x1f8>)
 800120e:	f00c f9f3 	bl	800d5f8 <puts>
		Error_Handler();
 8001212:	f000 fe19 	bl	8001e48 <Error_Handler>
	}
#endif

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121a:	4833      	ldr	r0, [pc, #204]	; (80012e8 <main+0x1fc>)
 800121c:	f005 ff68 	bl	80070f0 <HAL_LPTIM_Counter_Start_IT>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <main+0x144>
		printf("Failed to start slow flashing LED!\r\n");
 8001226:	4831      	ldr	r0, [pc, #196]	; (80012ec <main+0x200>)
 8001228:	f00c f9e6 	bl	800d5f8 <puts>
		Error_Handler();
 800122c:	f000 fe0c 	bl	8001e48 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001230:	2100      	movs	r1, #0
 8001232:	482f      	ldr	r0, [pc, #188]	; (80012f0 <main+0x204>)
 8001234:	f003 fab7 	bl	80047a6 <HAL_DAC_Start>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <main+0x15c>
		printf("Failure to initialise DAC \r\n");
 800123e:	482d      	ldr	r0, [pc, #180]	; (80012f4 <main+0x208>)
 8001240:	f00c f9da 	bl	800d5f8 <puts>
		Error_Handler();
 8001244:	f000 fe00 	bl	8001e48 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 8001248:	482b      	ldr	r0, [pc, #172]	; (80012f8 <main+0x20c>)
 800124a:	f00c f9d5 	bl	800d5f8 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 800124e:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	4826      	ldr	r0, [pc, #152]	; (80012f0 <main+0x204>)
 8001258:	f003 faf7 	bl	800484a <HAL_DAC_SetValue>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <main+0x180>
			printf("DAC setup failed!\r\n");
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <main+0x210>)
 8001264:	f00c f9c8 	bl	800d5f8 <puts>
		Error_Handler();
 8001268:	f000 fdee 	bl	8001e48 <Error_Handler>
	}

//	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
//	printf("Setting trigger output high \r\n");
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output high
 800126c:	2200      	movs	r2, #0
 800126e:	2101      	movs	r1, #1
 8001270:	4823      	ldr	r0, [pc, #140]	; (8001300 <main+0x214>)
 8001272:	f004 fa39 	bl	80056e8 <HAL_GPIO_WritePin>
	printf("Setting trigger output low \r\n");
 8001276:	4823      	ldr	r0, [pc, #140]	; (8001304 <main+0x218>)
 8001278:	f00c f9be 	bl	800d5f8 <puts>
//	GPIO_PIN_RESET
//	GPIO_PIN_SET

	/* Spare SMA pin control works */
//	SPARE_SMA_GPIO_Port, SPARE_SMA_Pin
	HAL_GPIO_WritePin(SPARE_SMA_GPIO_Port, SPARE_SMA_Pin, GPIO_PIN_SET); // Sets spare SMA output high
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001282:	4821      	ldr	r0, [pc, #132]	; (8001308 <main+0x21c>)
 8001284:	f004 fa30 	bl	80056e8 <HAL_GPIO_WritePin>
	printf("Setting spare SMA output high \r\n");
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <main+0x220>)
 800128a:	f00c f9b5 	bl	800d5f8 <puts>
	// store the converted voltage value
	// from analog value
	//float voltage;
	/* Fire up the ADC - continuous conversion */
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800128e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001292:	2100      	movs	r1, #0
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <main+0x224>)
 8001296:	f003 f8bf 	bl	8004418 <HAL_ADCEx_Calibration_Start>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <main+0x1be>
		printf("ADC calibration failure \r\n");
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <main+0x228>)
 80012a2:	f00c f9a9 	bl	800d5f8 <puts>
		Error_Handler();
 80012a6:	f000 fdcf 	bl	8001e48 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 80012aa:	481b      	ldr	r0, [pc, #108]	; (8001318 <main+0x22c>)
 80012ac:	f00c f9a4 	bl	800d5f8 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <main+0x224>)
 80012b2:	f001 ff9d 	bl	80031f0 <HAL_ADC_Start_IT>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <main+0x1da>
		printf("Failed to start ADC with interrupt capability \r\n");
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <main+0x230>)
 80012be:	f00c f99b 	bl	800d5f8 <puts>
	                Error_Handler();
 80012c2:	f000 fdc1 	bl	8001e48 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80012c6:	e7fe      	b.n	80012c6 <main+0x1da>
 80012c8:	00000898 	.word	0x00000898
 80012cc:	00000000 	.word	0x00000000
 80012d0:	08000298 	.word	0x08000298
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	0800f7f4 	.word	0x0800f7f4
 80012dc:	0800f7f8 	.word	0x0800f7f8
 80012e0:	0800f814 	.word	0x0800f814
 80012e4:	0800f840 	.word	0x0800f840
 80012e8:	20000524 	.word	0x20000524
 80012ec:	0800f864 	.word	0x0800f864
 80012f0:	20000384 	.word	0x20000384
 80012f4:	0800f888 	.word	0x0800f888
 80012f8:	0800f8a4 	.word	0x0800f8a4
 80012fc:	0800f8c4 	.word	0x0800f8c4
 8001300:	58021800 	.word	0x58021800
 8001304:	0800f8d8 	.word	0x0800f8d8
 8001308:	58020400 	.word	0x58020400
 800130c:	0800f8f8 	.word	0x0800f8f8
 8001310:	20000320 	.word	0x20000320
 8001314:	0800f918 	.word	0x0800f918
 8001318:	0800f934 	.word	0x0800f934
 800131c:	0800f954 	.word	0x0800f954

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a4      	sub	sp, #144	; 0x90
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800132a:	224c      	movs	r2, #76	; 0x4c
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f00b fc90 	bl	800cc54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	2220      	movs	r2, #32
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00b fc89 	bl	800cc54 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001354:	2002      	movs	r0, #2
 8001356:	f006 fa2b 	bl	80077b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <SystemClock_Config+0x170>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <SystemClock_Config+0x170>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	62d3      	str	r3, [r2, #44]	; 0x2c
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <SystemClock_Config+0x170>)
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b47      	ldr	r3, [pc, #284]	; (8001494 <SystemClock_Config+0x174>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a46      	ldr	r2, [pc, #280]	; (8001494 <SystemClock_Config+0x174>)
 800137a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b44      	ldr	r3, [pc, #272]	; (8001494 <SystemClock_Config+0x174>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800138c:	bf00      	nop
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <SystemClock_Config+0x174>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800139a:	d1f8      	bne.n	800138e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800139c:	f006 f9f8 	bl	8007790 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013a0:	f001 fb32 	bl	8002a08 <HAL_GetREVID>
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <SystemClock_Config+0x178>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a3b      	ldr	r2, [pc, #236]	; (8001498 <SystemClock_Config+0x178>)
 80013aa:	f023 0318 	bic.w	r3, r3, #24
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80013b0:	2325      	movs	r3, #37	; 0x25
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013be:	2301      	movs	r3, #1
 80013c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	2302      	movs	r3, #2
 80013c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80013ce:	2350      	movs	r3, #80	; 0x50
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d6:	2304      	movs	r3, #4
 80013d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013e0:	230c      	movs	r3, #12
 80013e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 fa14 	bl	8007824 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001402:	f000 fd21 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	233f      	movs	r3, #63	; 0x3f
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001412:	2309      	movs	r3, #9
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800141e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f006 fe52 	bl	80080d8 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800143a:	f000 fd05 	bl	8001e48 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800143e:	f007 f801 	bl	8008444 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <SystemClock_Config+0x178>)
 8001444:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <SystemClock_Config+0x178>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <SystemClock_Config+0x178>)
 8001454:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001464:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001468:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800146e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001474:	2322      	movs	r3, #34	; 0x22
 8001476:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001478:	2320      	movs	r3, #32
 800147a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f009 fd7b 	bl	800af7c <HAL_RCCEx_CRSConfig>
}
 8001486:	bf00      	nop
 8001488:	3790      	adds	r7, #144	; 0x90
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	58000400 	.word	0x58000400
 8001494:	58024800 	.word	0x58024800
 8001498:	58024400 	.word	0x58024400

0800149c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <MX_ADC3_Init+0xc0>)
 80014b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014e6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_ADC3_Init+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_ADC3_Init+0xbc>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_ADC3_Init+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_ADC3_Init+0xbc>)
 8001510:	f001 fccc 	bl	8002eac <HAL_ADC_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800151a:	f000 fc95 	bl	8001e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800151e:	2301      	movs	r3, #1
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001522:	2306      	movs	r3, #6
 8001524:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800152a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800152e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001530:	2304      	movs	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_ADC3_Init+0xbc>)
 8001542:	f002 f9f1 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800154c:	f000 fc7c 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000320 	.word	0x20000320
 800155c:	58026000 	.word	0x58026000

08001560 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2224      	movs	r2, #36	; 0x24
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b fb71 	bl	800cc54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_DAC1_Init+0x5c>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_DAC1_Init+0x60>)
 8001576:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001578:	4810      	ldr	r0, [pc, #64]	; (80015bc <MX_DAC1_Init+0x5c>)
 800157a:	f003 f8f2 	bl	8004762 <HAL_DAC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001584:	f000 fc60 	bl	8001e48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_DAC1_Init+0x5c>)
 80015a4:	f003 f976 	bl	8004894 <HAL_DAC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 fc4b 	bl	8001e48 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000384 	.word	0x20000384
 80015c0:	40007400 	.word	0x40007400

080015c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ETH_Init+0x80>)
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <MX_ETH_Init+0x84>)
 80015cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_ETH_Init+0x88>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_ETH_Init+0x88>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_ETH_Init+0x88>)
 80015dc:	22e1      	movs	r2, #225	; 0xe1
 80015de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_ETH_Init+0x88>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_ETH_Init+0x88>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_ETH_Init+0x88>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ETH_Init+0x80>)
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_ETH_Init+0x88>)
 80015f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_ETH_Init+0x80>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_ETH_Init+0x80>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_ETH_Init+0x8c>)
 8001602:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_ETH_Init+0x80>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_ETH_Init+0x90>)
 8001608:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_ETH_Init+0x80>)
 800160c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001610:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <MX_ETH_Init+0x80>)
 8001614:	f003 fa7c 	bl	8004b10 <HAL_ETH_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800161e:	f000 fc13 	bl	8001e48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001622:	2238      	movs	r2, #56	; 0x38
 8001624:	2100      	movs	r1, #0
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_ETH_Init+0x94>)
 8001628:	f00b fb14 	bl	800cc54 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_ETH_Init+0x94>)
 800162e:	2221      	movs	r2, #33	; 0x21
 8001630:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_ETH_Init+0x94>)
 8001634:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001638:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_ETH_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000398 	.word	0x20000398
 8001648:	40028000 	.word	0x40028000
 800164c:	2000069c 	.word	0x2000069c
 8001650:	2000026c 	.word	0x2000026c
 8001654:	2000020c 	.word	0x2000020c
 8001658:	200002e8 	.word	0x200002e8

0800165c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0a4      	sub	sp, #144	; 0x90
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001662:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001674:	2254      	movs	r2, #84	; 0x54
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00b faeb 	bl	800cc54 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2220      	movs	r2, #32
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00b fadf 	bl	800cc54 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001696:	4b98      	ldr	r3, [pc, #608]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001698:	4a98      	ldr	r2, [pc, #608]	; (80018fc <MX_HRTIM_Init+0x2a0>)
 800169a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80016a2:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80016a8:	4893      	ldr	r0, [pc, #588]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80016aa:	f004 f851 	bl	8005750 <HAL_HRTIM_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f000 fbc8 	bl	8001e48 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80016b8:	f24c 2318 	movw	r3, #49688	; 0xc218
 80016bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80016c6:	2307      	movs	r3, #7
 80016c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80016cc:	2308      	movs	r3, #8
 80016ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80016d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016d6:	461a      	mov	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	4887      	ldr	r0, [pc, #540]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80016dc:	f004 f908 	bl	80058f0 <HAL_HRTIM_TimeBaseConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80016e6:	f000 fbaf 	bl	8001e48 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80016ea:	2314      	movs	r3, #20
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80016fe:	2300      	movs	r3, #0
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001702:	2300      	movs	r3, #0
 8001704:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001706:	2300      	movs	r3, #0
 8001708:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800170e:	2300      	movs	r3, #0
 8001710:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001716:	2300      	movs	r3, #0
 8001718:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800171a:	2300      	movs	r3, #0
 800171c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800171e:	2300      	movs	r3, #0
 8001720:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001726:	2300      	movs	r3, #0
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800172a:	2300      	movs	r3, #0
 800172c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800172e:	2300      	movs	r3, #0
 8001730:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800173a:	2300      	movs	r3, #0
 800173c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800173e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001742:	461a      	mov	r2, r3
 8001744:	2100      	movs	r1, #0
 8001746:	486c      	ldr	r0, [pc, #432]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001748:	f004 f8fa 	bl	8005940 <HAL_HRTIM_WaveformTimerConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001752:	f000 fb79 	bl	8001e48 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001756:	2306      	movs	r3, #6
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800175a:	2300      	movs	r3, #0
 800175c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	461a      	mov	r2, r3
 8001764:	2104      	movs	r1, #4
 8001766:	4864      	ldr	r0, [pc, #400]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001768:	f004 f8ea 	bl	8005940 <HAL_HRTIM_WaveformTimerConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001772:	f000 fb69 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001776:	f240 631b 	movw	r3, #1563	; 0x61b
 800177a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	2201      	movs	r2, #1
 8001782:	2100      	movs	r1, #0
 8001784:	485c      	ldr	r0, [pc, #368]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001786:	f004 f94d 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001790:	f000 fb5a 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001794:	f244 5395 	movw	r3, #17813	; 0x4595
 8001798:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2202      	movs	r2, #2
 80017a8:	2100      	movs	r1, #0
 80017aa:	4853      	ldr	r0, [pc, #332]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80017ac:	f004 f93a 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80017b6:	f000 fb47 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80017ba:	f640 536e 	movw	r3, #3438	; 0xd6e
 80017be:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	2202      	movs	r2, #2
 80017c6:	2104      	movs	r1, #4
 80017c8:	484b      	ldr	r0, [pc, #300]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80017ca:	f004 f92b 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80017d4:	f000 fb38 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80017d8:	f644 0306 	movw	r3, #18438	; 0x4806
 80017dc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2204      	movs	r2, #4
 80017e4:	2100      	movs	r1, #0
 80017e6:	4844      	ldr	r0, [pc, #272]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80017e8:	f004 f91c 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80017f2:	f000 fb29 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80017f6:	f244 435d 	movw	r3, #17501	; 0x445d
 80017fa:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	2208      	movs	r2, #8
 8001802:	2104      	movs	r1, #4
 8001804:	483c      	ldr	r0, [pc, #240]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001806:	f004 f90d 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001810:	f000 fb1a 	bl	8001e48 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001818:	2328      	movs	r3, #40	; 0x28
 800181a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 800181c:	2314      	movs	r3, #20
 800181e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001824:	2308      	movs	r3, #8
 8001826:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	2201      	movs	r2, #1
 8001838:	2100      	movs	r1, #0
 800183a:	482f      	ldr	r0, [pc, #188]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 800183c:	f004 fa60 	bl	8005d00 <HAL_HRTIM_WaveformOutputConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001846:	f000 faff 	bl	8001e48 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800184e:	2350      	movs	r3, #80	; 0x50
 8001850:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185c:	2104      	movs	r1, #4
 800185e:	4826      	ldr	r0, [pc, #152]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001860:	f004 fa4e 	bl	8005d00 <HAL_HRTIM_WaveformOutputConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800186a:	f000 faed 	bl	8001e48 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001872:	2320      	movs	r3, #32
 8001874:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001876:	2310      	movs	r3, #16
 8001878:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800187a:	2308      	movs	r3, #8
 800187c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	2202      	movs	r2, #2
 8001882:	2100      	movs	r1, #0
 8001884:	481c      	ldr	r0, [pc, #112]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 8001886:	f004 fa3b 	bl	8005d00 <HAL_HRTIM_WaveformOutputConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001890:	f000 fada 	bl	8001e48 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001898:	461a      	mov	r2, r3
 800189a:	2104      	movs	r1, #4
 800189c:	4816      	ldr	r0, [pc, #88]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 800189e:	f004 f827 	bl	80058f0 <HAL_HRTIM_TimeBaseConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80018a8:	f000 face 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80018ac:	f240 7353 	movw	r3, #1875	; 0x753
 80018b0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2201      	movs	r2, #1
 80018b8:	2104      	movs	r1, #4
 80018ba:	480f      	ldr	r0, [pc, #60]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80018bc:	f004 f8b2 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80018c6:	f000 fabf 	bl	8001e48 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80018ca:	f643 6342 	movw	r3, #15938	; 0x3e42
 80018ce:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	2204      	movs	r2, #4
 80018d6:	2104      	movs	r1, #4
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80018da:	f004 f8a3 	bl	8005a24 <HAL_HRTIM_WaveformCompareConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80018e4:	f000 fab0 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_HRTIM_Init+0x29c>)
 80018ea:	f000 fcbd 	bl	8002268 <HAL_HRTIM_MspPostInit>

}
 80018ee:	bf00      	nop
 80018f0:	3790      	adds	r7, #144	; 0x90
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000448 	.word	0x20000448
 80018fc:	40017400 	.word	0x40017400

08001900 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <MX_LPTIM1_Init+0x58>)
 8001908:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_LPTIM1_Init+0x54>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001912:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001916:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_LPTIM1_Init+0x54>)
 800191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_LPTIM1_Init+0x54>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001934:	2200      	movs	r2, #0
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_LPTIM1_Init+0x54>)
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_LPTIM1_Init+0x54>)
 8001940:	f005 fb26 	bl	8006f90 <HAL_LPTIM_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800194a:	f000 fa7d 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000524 	.word	0x20000524
 8001958:	40002400 	.word	0x40002400

0800195c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <MX_TIM1_Init+0xa0>)
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <MX_TIM1_Init+0xa4>)
 800197e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_TIM1_Init+0xa0>)
 8001982:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_TIM1_Init+0xa0>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_TIM1_Init+0xa0>)
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_TIM1_Init+0xa0>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_TIM1_Init+0xa0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_TIM1_Init+0xa0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019a8:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM1_Init+0xa0>)
 80019aa:	f009 fca1 	bl	800b2f0 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80019b4:	f000 fa48 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_TIM1_Init+0xa0>)
 80019c6:	f009 fceb 	bl	800b3a0 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80019d0:	f000 fa3a 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM1_Init+0xa0>)
 80019e6:	f009 ff0b 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019f0:	f000 fa2a 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000055c 	.word	0x2000055c
 8001a00:	40010000 	.word	0x40010000

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a2a:	227c      	movs	r2, #124	; 0x7c
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a4a:	f009 fc51 	bl	800b2f0 <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a54:	f000 f9f8 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a66:	f009 fc9b 	bl	800b3a0 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a70:	f000 f9ea 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a82:	f009 febd 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f000 f9dc 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200005a8 	.word	0x200005a8
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART3_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <MX_USART3_UART_Init+0x98>)
 8001aae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001ae8:	f009 ff18 	bl	800b91c <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001af2:	f000 f9a9 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001afa:	f00a ffa8 	bl	800ca4e <HAL_UARTEx_SetTxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001b04:	f000 f9a0 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001b0c:	f00a ffdd 	bl	800caca <HAL_UARTEx_SetRxFifoThreshold>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001b16:	f000 f997 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART3_UART_Init+0x90>)
 8001b1c:	f00a ff5e 	bl	800c9dc <HAL_UARTEx_DisableFifoMode>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f000 f98f 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200005f4 	.word	0x200005f4
 8001b34:	40004800 	.word	0x40004800
 8001b38:	000f4240 	.word	0x000f4240

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	4b9c      	ldr	r3, [pc, #624]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	4a9a      	ldr	r2, [pc, #616]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b62:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	4a93      	ldr	r2, [pc, #588]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b80:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a8b      	ldr	r2, [pc, #556]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	4a84      	ldr	r2, [pc, #528]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b7e      	ldr	r3, [pc, #504]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	4a7c      	ldr	r2, [pc, #496]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be8:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bf0:	f043 0320 	orr.w	r3, r3, #32
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c06:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	4a6d      	ldr	r2, [pc, #436]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c16:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c24:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <MX_GPIO_Init+0x288>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2134      	movs	r1, #52	; 0x34
 8001c46:	4860      	ldr	r0, [pc, #384]	; (8001dc8 <MX_GPIO_Init+0x28c>)
 8001c48:	f003 fd4e 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPARE_SMA_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c52:	485e      	ldr	r0, [pc, #376]	; (8001dcc <MX_GPIO_Init+0x290>)
 8001c54:	f003 fd48 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	485c      	ldr	r0, [pc, #368]	; (8001dd0 <MX_GPIO_Init+0x294>)
 8001c5e:	f003 fd43 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c68:	485a      	ldr	r0, [pc, #360]	; (8001dd4 <MX_GPIO_Init+0x298>)
 8001c6a:	f003 fd3d 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001c74:	4858      	ldr	r0, [pc, #352]	; (8001dd8 <MX_GPIO_Init+0x29c>)
 8001c76:	f003 fd37 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c80:	4855      	ldr	r0, [pc, #340]	; (8001dd8 <MX_GPIO_Init+0x29c>)
 8001c82:	f003 fd31 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001c86:	2201      	movs	r2, #1
 8001c88:	21f8      	movs	r1, #248	; 0xf8
 8001c8a:	4852      	ldr	r0, [pc, #328]	; (8001dd4 <MX_GPIO_Init+0x298>)
 8001c8c:	f003 fd2c 	bl	80056e8 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2102      	movs	r1, #2
 8001c94:	484c      	ldr	r0, [pc, #304]	; (8001dc8 <MX_GPIO_Init+0x28c>)
 8001c96:	f003 fd27 	bl	80056e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001c9a:	2336      	movs	r3, #54	; 0x36
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4845      	ldr	r0, [pc, #276]	; (8001dc8 <MX_GPIO_Init+0x28c>)
 8001cb2:	f003 fb51 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4842      	ldr	r0, [pc, #264]	; (8001dd8 <MX_GPIO_Init+0x29c>)
 8001cce:	f003 fb43 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPARE_SMA_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPARE_SMA_Pin|LD3_Pin;
 8001cd2:	f245 0301 	movw	r3, #20481	; 0x5001
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4838      	ldr	r0, [pc, #224]	; (8001dcc <MX_GPIO_Init+0x290>)
 8001cec:	f003 fb34 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	4835      	ldr	r0, [pc, #212]	; (8001ddc <MX_GPIO_Init+0x2a0>)
 8001d08:	f003 fb26 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <MX_GPIO_Init+0x294>)
 8001d24:	f003 fb18 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001d28:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4824      	ldr	r0, [pc, #144]	; (8001dd4 <MX_GPIO_Init+0x298>)
 8001d42:	f003 fb09 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	481d      	ldr	r0, [pc, #116]	; (8001dd0 <MX_GPIO_Init+0x294>)
 8001d5c:	f003 fafc 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001d60:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <MX_GPIO_Init+0x29c>)
 8001d7a:	f003 faed 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001d7e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d90:	230a      	movs	r3, #10
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <MX_GPIO_Init+0x2a4>)
 8001d9c:	f003 fadc 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <MX_GPIO_Init+0x29c>)
 8001db6:	f003 facf 	bl	8005358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dba:	bf00      	nop
 8001dbc:	3738      	adds	r7, #56	; 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	58021000 	.word	0x58021000
 8001dcc:	58020400 	.word	0x58020400
 8001dd0:	58021800 	.word	0x58021800
 8001dd4:	58020c00 	.word	0x58020c00
 8001dd8:	58020800 	.word	0x58020800
 8001ddc:	58021400 	.word	0x58021400
 8001de0:	58020000 	.word	0x58020000

08001de4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8001dec:	4810      	ldr	r0, [pc, #64]	; (8001e30 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001dee:	f001 fb3f 	bl	8003470 <HAL_ADC_GetValue>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_ADC_ConvCpltCallback+0x50>)
 8001df6:	6013      	str	r3, [r2, #0]
              // Toggle the Green LED
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	480f      	ldr	r0, [pc, #60]	; (8001e38 <HAL_ADC_ConvCpltCallback+0x54>)
 8001dfc:	f003 fc8d 	bl	800571a <HAL_GPIO_TogglePin>
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e08:	6013      	str	r3, [r2, #0]
  printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e16:	f00b fb69 	bl	800d4ec <iprintf>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	4808      	ldr	r0, [pc, #32]	; (8001e44 <HAL_ADC_ConvCpltCallback+0x60>)
 8001e24:	f002 fd11 	bl	800484a <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000320 	.word	0x20000320
 8001e34:	20000690 	.word	0x20000690
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	20000694 	.word	0x20000694
 8001e40:	0800f984 	.word	0x0800f984
 8001e44:	20000384 	.word	0x20000384

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001e50:	4810      	ldr	r0, [pc, #64]	; (8001e94 <Error_Handler+0x4c>)
 8001e52:	f00b fbd1 	bl	800d5f8 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001e56:	f240 1103 	movw	r1, #259	; 0x103
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <Error_Handler+0x50>)
 8001e5c:	f004 f8a5 	bl	8005faa <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001e60:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <Error_Handler+0x50>)
 8001e66:	f004 f93d 	bl	80060e4 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <Error_Handler+0x54>)
 8001e72:	f003 fc39 	bl	80056e8 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <Error_Handler+0x58>)
 8001e7c:	f003 fc4d 	bl	800571a <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <Error_Handler+0x5c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00d fbec 	bl	800f668 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001e90:	e7f1      	b.n	8001e76 <Error_Handler+0x2e>
 8001e92:	bf00      	nop
 8001e94:	0800f9a8 	.word	0x0800f9a8
 8001e98:	20000448 	.word	0x20000448
 8001e9c:	58020800 	.word	0x58020800
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_MspInit+0x30>)
 8001eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb4:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_MspInit+0x30>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_MspInit+0x30>)
 8001ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	58024400 	.word	0x58024400

08001edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0b4      	sub	sp, #208	; 0xd0
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	22c0      	movs	r2, #192	; 0xc0
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a feb1 	bl	800cc54 <memset>
  if(hadc->Instance==ADC3)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d14e      	bne.n	8001f9a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001efc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001f0c:	2313      	movs	r3, #19
 8001f0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8001f10:	234f      	movs	r3, #79	; 0x4f
 8001f12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f20:	2320      	movs	r3, #32
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fc88 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001f3e:	f7ff ff83 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f7e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f86:	f000 fd5f 	bl	8002a48 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	207f      	movs	r0, #127	; 0x7f
 8001f90:	f002 fbb3 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001f94:	207f      	movs	r0, #127	; 0x7f
 8001f96:	f002 fbca 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	37d0      	adds	r7, #208	; 0xd0
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	58026000 	.word	0x58026000
 8001fa8:	58024400 	.word	0x58024400

08001fac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_DAC_MspInit+0x80>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d129      	bne.n	8002022 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_DAC_MspInit+0x84>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800200a:	2310      	movs	r3, #16
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	2303      	movs	r3, #3
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_DAC_MspInit+0x88>)
 800201e:	f003 f99b 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40007400 	.word	0x40007400
 8002030:	58024400 	.word	0x58024400
 8002034:	58020000 	.word	0x58020000

08002038 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08e      	sub	sp, #56	; 0x38
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_ETH_MspInit+0x184>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 80ab 	bne.w	80021b2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 800205e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002062:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002068:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800206c:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 800206e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800207a:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 800207c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800208a:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 800208c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002098:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 800209a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800209e:	4a48      	ldr	r2, [pc, #288]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020a8:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_ETH_MspInit+0x188>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800212e:	2332      	movs	r3, #50	; 0x32
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213e:	230b      	movs	r3, #11
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <HAL_ETH_MspInit+0x18c>)
 800214a:	f003 f905 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800214e:	2386      	movs	r3, #134	; 0x86
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800215e:	230b      	movs	r3, #11
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	4817      	ldr	r0, [pc, #92]	; (80021c8 <HAL_ETH_MspInit+0x190>)
 800216a:	f003 f8f5 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800216e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002180:	230b      	movs	r3, #11
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	4810      	ldr	r0, [pc, #64]	; (80021cc <HAL_ETH_MspInit+0x194>)
 800218c:	f003 f8e4 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002190:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021a2:	230b      	movs	r3, #11
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	4808      	ldr	r0, [pc, #32]	; (80021d0 <HAL_ETH_MspInit+0x198>)
 80021ae:	f003 f8d3 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3738      	adds	r7, #56	; 0x38
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40028000 	.word	0x40028000
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020800 	.word	0x58020800
 80021c8:	58020000 	.word	0x58020000
 80021cc:	58020400 	.word	0x58020400
 80021d0:	58021800 	.word	0x58021800

080021d4 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0b4      	sub	sp, #208	; 0xd0
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	22c0      	movs	r2, #192	; 0xc0
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00a fd35 	bl	800cc54 <memset>
  if(hhrtim->Instance==HRTIM1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_HRTIM_MspInit+0x8c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d131      	bne.n	8002258 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80021f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f006 fb1c 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002216:	f7ff fe17 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_HRTIM_MspInit+0x90>)
 800221c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002220:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_HRTIM_MspInit+0x90>)
 8002222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_HRTIM_MspInit+0x90>)
 800222c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2068      	movs	r0, #104	; 0x68
 800223e:	f002 fa5c 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002242:	2068      	movs	r0, #104	; 0x68
 8002244:	f002 fa73 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	206c      	movs	r0, #108	; 0x6c
 800224e:	f002 fa54 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002252:	206c      	movs	r0, #108	; 0x6c
 8002254:	f002 fa6b 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	37d0      	adds	r7, #208	; 0xd0
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40017400 	.word	0x40017400
 8002264:	58024400 	.word	0x58024400

08002268 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_HRTIM_MspPostInit+0xa8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d13d      	bne.n	8002306 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_HRTIM_MspPostInit+0xac>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c6:	2340      	movs	r3, #64	; 0x40
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80022d6:	2302      	movs	r3, #2
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <HAL_HRTIM_MspPostInit+0xb0>)
 80022e2:	f003 f839 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <HAL_HRTIM_MspPostInit+0xb4>)
 8002302:	f003 f829 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40017400 	.word	0x40017400
 8002314:	58024400 	.word	0x58024400
 8002318:	58021800 	.word	0x58021800
 800231c:	58020800 	.word	0x58020800

08002320 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0b4      	sub	sp, #208	; 0xd0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	22c0      	movs	r2, #192	; 0xc0
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f00a fc8f 	bl	800cc54 <memset>
  if(hlptim->Instance==LPTIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_LPTIM_MspInit+0x80>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d12a      	bne.n	8002396 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002340:	f04f 0220 	mov.w	r2, #32
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800234c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4618      	mov	r0, r3
 800235a:	f006 fa75 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002364:	f7ff fd70 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_LPTIM_MspInit+0x84>)
 800236a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <HAL_LPTIM_MspInit+0x84>)
 8002370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_LPTIM_MspInit+0x84>)
 800237a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	205d      	movs	r0, #93	; 0x5d
 800238c:	f002 f9b5 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002390:	205d      	movs	r0, #93	; 0x5d
 8002392:	f002 f9cc 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	37d0      	adds	r7, #208	; 0xd0
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40002400 	.word	0x40002400
 80023a4:	58024400 	.word	0x58024400

080023a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_TIM_Base_MspInit+0x68>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10f      	bne.n	80023da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023d8:	e013      	b.n	8002402 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_TIM_Base_MspInit+0x70>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d10e      	bne.n	8002402 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	58024400 	.word	0x58024400
 8002418:	40000400 	.word	0x40000400

0800241c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ba      	sub	sp, #232	; 0xe8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	22c0      	movs	r2, #192	; 0xc0
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f00a fc09 	bl	800cc54 <memset>
  if(huart->Instance==USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_UART_MspInit+0xc8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d146      	bne.n	80024da <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244c:	f04f 0202 	mov.w	r2, #2
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f006 f9f0 	bl	8008848 <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800246e:	f7ff fceb 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 8002474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 800247a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 8002484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_UART_MspInit+0xcc>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c8:	2307      	movs	r3, #7
 80024ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_UART_MspInit+0xd0>)
 80024d6:	f002 ff3f 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	37e8      	adds	r7, #232	; 0xe8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40004800 	.word	0x40004800
 80024e8:	58024400 	.word	0x58024400
 80024ec:	58020c00 	.word	0x58020c00

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80024f4:	f006 f98c 	bl	8008810 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80024f8:	f7ff fca6 	bl	8001e48 <Error_Handler>
 80024fc:	e7fc      	b.n	80024f8 <NMI_Handler+0x8>

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002502:	f7ff fca1 	bl	8001e48 <Error_Handler>
 8002506:	e7fc      	b.n	8002502 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 800250c:	f7ff fc9c 	bl	8001e48 <Error_Handler>
 8002510:	e7fc      	b.n	800250c <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8002516:	f7ff fc97 	bl	8001e48 <Error_Handler>
 800251a:	e7fc      	b.n	8002516 <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002520:	f7ff fc92 	bl	8001e48 <Error_Handler>
 8002524:	e7fc      	b.n	8002520 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 fa14 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <LPTIM1_IRQHandler+0x10>)
 8002562:	f004 fe2c 	bl	80071be <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000524 	.word	0x20000524

08002570 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002574:	2100      	movs	r1, #0
 8002576:	4802      	ldr	r0, [pc, #8]	; (8002580 <HRTIM1_TIMA_IRQHandler+0x10>)
 8002578:	f003 fe32 	bl	80061e0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000448 	.word	0x20000448

08002584 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8002588:	2104      	movs	r1, #4
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <HRTIM1_TIME_IRQHandler+0x10>)
 800258c:	f003 fe28 	bl	80061e0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000448 	.word	0x20000448

08002598 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <ADC3_IRQHandler+0x10>)
 800259e:	f000 ff75 	bl	800348c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000320 	.word	0x20000320

080025ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	return 1;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_kill>:

int _kill(int pid, int sig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025c6:	f00a fb0d 	bl	800cbe4 <__errno>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2216      	movs	r2, #22
 80025ce:	601a      	str	r2, [r3, #0]
	return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_exit>:

void _exit (int status)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ffe7 	bl	80025bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ee:	e7fe      	b.n	80025ee <_exit+0x12>

080025f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
	}

return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e009      	b.n	8002650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fc6d 	bl	8000f24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <_write+0x12>
	}
	return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_close>:

int _close(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268a:	605a      	str	r2, [r3, #4]
	return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f00a fa72 	bl	800cbe4 <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20020000 	.word	0x20020000
 800272c:	00000400 	.word	0x00000400
 8002730:	200006a4 	.word	0x200006a4
 8002734:	200006c0 	.word	0x200006c0

08002738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <SystemInit+0xe4>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <SystemInit+0xe4>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <SystemInit+0xe8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	2b06      	cmp	r3, #6
 8002756:	d807      	bhi.n	8002768 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <SystemInit+0xe8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 030f 	bic.w	r3, r3, #15
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <SystemInit+0xe8>)
 8002762:	f043 0307 	orr.w	r3, r3, #7
 8002766:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <SystemInit+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <SystemInit+0xec>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <SystemInit+0xec>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4929      	ldr	r1, [pc, #164]	; (8002824 <SystemInit+0xec>)
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <SystemInit+0xf0>)
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <SystemInit+0xe8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <SystemInit+0xe8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <SystemInit+0xe8>)
 800279c:	f043 0307 	orr.w	r3, r3, #7
 80027a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <SystemInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <SystemInit+0xec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <SystemInit+0xec>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <SystemInit+0xec>)
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <SystemInit+0xf4>)
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <SystemInit+0xec>)
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <SystemInit+0xf8>)
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <SystemInit+0xec>)
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <SystemInit+0xfc>)
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <SystemInit+0xec>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <SystemInit+0xec>)
 80027ce:	4a19      	ldr	r2, [pc, #100]	; (8002834 <SystemInit+0xfc>)
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <SystemInit+0xec>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SystemInit+0xec>)
 80027da:	4a16      	ldr	r2, [pc, #88]	; (8002834 <SystemInit+0xfc>)
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <SystemInit+0xec>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <SystemInit+0xec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <SystemInit+0xec>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <SystemInit+0xec>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <SystemInit+0x100>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <SystemInit+0x104>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002802:	d202      	bcs.n	800280a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <SystemInit+0x108>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <SystemInit+0x10c>)
 800280c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002810:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	52002000 	.word	0x52002000
 8002824:	58024400 	.word	0x58024400
 8002828:	eaf6ed7f 	.word	0xeaf6ed7f
 800282c:	02020200 	.word	0x02020200
 8002830:	01ff0000 	.word	0x01ff0000
 8002834:	01010280 	.word	0x01010280
 8002838:	5c001000 	.word	0x5c001000
 800283c:	ffff0000 	.word	0xffff0000
 8002840:	51008108 	.word	0x51008108
 8002844:	52004000 	.word	0x52004000

08002848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800284c:	f7ff ff74 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	; (8002888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	; (8002894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002876:	f00a f9bb 	bl	800cbf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287a:	f7fe fc37 	bl	80010ec <main>
  bx  lr
 800287e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800288c:	0800ffac 	.word	0x0800ffac
  ldr r2, =_sbss
 8002890:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002894:	200006bc 	.word	0x200006bc

08002898 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f001 ff1e 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a8:	f005 fddc 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_Init+0x68>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	4913      	ldr	r1, [pc, #76]	; (8002908 <HAL_Init+0x6c>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_Init+0x68>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <HAL_Init+0x6c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_Init+0x70>)
 80028de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e0:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <HAL_Init+0x74>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 f814 	bl	8002914 <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e002      	b.n	80028fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028f6:	f7ff fad7 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	58024400 	.word	0x58024400
 8002908:	0800fb8c 	.word	0x0800fb8c
 800290c:	20000018 	.word	0x20000018
 8002910:	20000014 	.word	0x20000014

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_InitTick+0x60>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e021      	b.n	800296c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_InitTick+0x64>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002936:	fbb3 f3f1 	udiv	r3, r3, r1
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f001 ff03 	bl	800474a <HAL_SYSTICK_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00e      	b.n	800296c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	d80a      	bhi.n	800296a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002954:	2200      	movs	r2, #0
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f001 fecd 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002960:	4a06      	ldr	r2, [pc, #24]	; (800297c <HAL_InitTick+0x68>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000020 	.word	0x20000020
 8002978:	20000014 	.word	0x20000014
 800297c:	2000001c 	.word	0x2000001c

08002980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000020 	.word	0x20000020
 80029a4:	200006a8 	.word	0x200006a8

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	200006a8 	.word	0x200006a8

080029c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ffee 	bl	80029a8 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d005      	beq.n	80029e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_Delay+0x44>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e6:	bf00      	nop
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8f7      	bhi.n	80029e8 <HAL_Delay+0x28>
  {
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000020 	.word	0x20000020

08002a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetREVID+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0c1b      	lsrs	r3, r3, #16
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	5c001000 	.word	0x5c001000

08002a20 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a30:	4904      	ldr	r1, [pc, #16]	; (8002a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	58000400 	.word	0x58000400

08002a48 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	4904      	ldr	r1, [pc, #16]	; (8002a70 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	58000400 	.word	0x58000400

08002a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	611a      	str	r2, [r3, #16]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
  }
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3330      	adds	r3, #48	; 0x30
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	4413      	add	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	211f      	movs	r1, #31
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 011f 	and.w	r1, r3, #31
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3314      	adds	r3, #20
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	0e5b      	lsrs	r3, r3, #25
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0d1b      	lsrs	r3, r3, #20
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2107      	movs	r1, #7
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0d1b      	lsrs	r3, r3, #20
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0318 	and.w	r3, r3, #24
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ca4:	40d9      	lsrs	r1, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	400b      	ands	r3, r1
 8002caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	000fffff 	.word	0x000fffff

08002cc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6093      	str	r3, [r2, #8]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	5fffffc0 	.word	0x5fffffc0

08002d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	6fffffc0 	.word	0x6fffffc0

08002d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d88:	d101      	bne.n	8002d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <LL_ADC_Enable+0x24>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	7fffffc0 	.word	0x7fffffc0

08002dc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <LL_ADC_Disable+0x24>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	f043 0202 	orr.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	7fffffc0 	.word	0x7fffffc0

08002dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <LL_ADC_IsEnabled+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_ADC_IsEnabled+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d101      	bne.n	8002e2a <LL_ADC_IsDisableOngoing+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_ADC_IsDisableOngoing+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <LL_ADC_REG_StartConversion+0x24>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	7fffffc0 	.word	0x7fffffc0

08002e60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d101      	bne.n	8002e78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d101      	bne.n	8002e9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e18f      	b.n	80031e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff f801 	bl	8001edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff19 	bl	8002d24 <LL_ADC_IsDeepPowerDownEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff feff 	bl	8002d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff34 	bl	8002d74 <LL_ADC_IsInternalRegulatorEnabled>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d114      	bne.n	8002f3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff18 	bl	8002d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1c:	4b87      	ldr	r3, [pc, #540]	; (800313c <HAL_ADC_Init+0x290>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	4a87      	ldr	r2, [pc, #540]	; (8003140 <HAL_ADC_Init+0x294>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2e:	e002      	b.n	8002f36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff17 	bl	8002d74 <LL_ADC_IsInternalRegulatorEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff77 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 8002f72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8129 	bne.w	80031d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 8125 	bne.w	80031d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff24 	bl	8002dec <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d136      	bne.n	8003018 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_ADC_Init+0x298>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_Init+0x112>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_ADC_Init+0x29c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10e      	bne.n	8002fdc <HAL_ADC_Init+0x130>
 8002fbe:	4861      	ldr	r0, [pc, #388]	; (8003144 <HAL_ADC_Init+0x298>)
 8002fc0:	f7ff ff14 	bl	8002dec <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	4860      	ldr	r0, [pc, #384]	; (8003148 <HAL_ADC_Init+0x29c>)
 8002fc8:	f7ff ff10 	bl	8002dec <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_ADC_Init+0x142>
 8002fdc:	485b      	ldr	r0, [pc, #364]	; (800314c <HAL_ADC_Init+0x2a0>)
 8002fde:	f7ff ff05 	bl	8002dec <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_ADC_Init+0x298>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_ADC_Init+0x15a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a51      	ldr	r2, [pc, #324]	; (8003148 <HAL_ADC_Init+0x29c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x15e>
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_ADC_Init+0x2a4>)
 8003008:	e000      	b.n	800300c <HAL_ADC_Init+0x160>
 800300a:	4a52      	ldr	r2, [pc, #328]	; (8003154 <HAL_ADC_Init+0x2a8>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7ff fd2e 	bl	8002a74 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003018:	f7ff fcf6 	bl	8002a08 <HAL_GetREVID>
 800301c:	4603      	mov	r3, r0
 800301e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003022:	4293      	cmp	r3, r2
 8003024:	d914      	bls.n	8003050 <HAL_ADC_Init+0x1a4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b10      	cmp	r3, #16
 800302c:	d110      	bne.n	8003050 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7d5b      	ldrb	r3, [r3, #21]
 8003032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003038:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800303e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
 8003044:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003046:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003048:	f043 030c 	orr.w	r3, r3, #12
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e00d      	b.n	800306c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7d5b      	ldrb	r3, [r3, #21]
 8003054:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800305a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003060:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7f1b      	ldrb	r3, [r3, #28]
 8003066:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7f1b      	ldrb	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	3b01      	subs	r3, #1
 800307a:	045b      	lsls	r3, r3, #17
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <HAL_ADC_Init+0x2ac>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	69b9      	ldr	r1, [r7, #24]
 80030ae:	430b      	orrs	r3, r1
 80030b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fed2 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 80030bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fedf 	bl	8002e86 <LL_ADC_INJ_IsConversionOngoing>
 80030c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d15f      	bne.n	8003190 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d15c      	bne.n	8003190 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7d1b      	ldrb	r3, [r3, #20]
 80030da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_ADC_Init+0x2b0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	69b9      	ldr	r1, [r7, #24]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d130      	bne.n	8003164 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_ADC_Init+0x2b4>)
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003116:	3a01      	subs	r2, #1
 8003118:	0411      	lsls	r1, r2, #16
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800312a:	430a      	orrs	r2, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	611a      	str	r2, [r3, #16]
 8003138:	e01c      	b.n	8003174 <HAL_ADC_Init+0x2c8>
 800313a:	bf00      	nop
 800313c:	20000014 	.word	0x20000014
 8003140:	053e2d63 	.word	0x053e2d63
 8003144:	40022000 	.word	0x40022000
 8003148:	40022100 	.word	0x40022100
 800314c:	58026000 	.word	0x58026000
 8003150:	40022300 	.word	0x40022300
 8003154:	58026300 	.word	0x58026300
 8003158:	fff0c003 	.word	0xfff0c003
 800315c:	ffffbffc 	.word	0xffffbffc
 8003160:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f001 f806 	bl	800419c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10c      	bne.n	80031b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f023 010f 	bic.w	r1, r3, #15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
 80031b0:	e007      	b.n	80031c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 020f 	bic.w	r2, r2, #15
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
 80031d2:	e007      	b.n	80031e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	bf00      	nop

080031f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_ADC_Start_IT+0x250>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_ADC_Start_IT+0x1c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a8f      	ldr	r2, [pc, #572]	; (8003444 <HAL_ADC_Start_IT+0x254>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_ADC_Start_IT+0x20>
 800320c:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <HAL_ADC_Start_IT+0x258>)
 800320e:	e000      	b.n	8003212 <HAL_ADC_Start_IT+0x22>
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_ADC_Start_IT+0x25c>)
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fd58 	bl	8002cc8 <LL_ADC_GetMultimode>
 8003218:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fe1e 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8119 	bne.w	800345e <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Start_IT+0x4a>
 8003236:	2302      	movs	r3, #2
 8003238:	e116      	b.n	8003468 <HAL_ADC_Start_IT+0x278>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fec0 	bl	8003fc8 <ADC_Enable>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 8100 	bne.w	8003454 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003258:	4b7d      	ldr	r3, [pc, #500]	; (8003450 <HAL_ADC_Start_IT+0x260>)
 800325a:	4013      	ands	r3, r2
 800325c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a76      	ldr	r2, [pc, #472]	; (8003444 <HAL_ADC_Start_IT+0x254>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d002      	beq.n	8003274 <HAL_ADC_Start_IT+0x84>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_ADC_Start_IT+0x86>
 8003274:	4b72      	ldr	r3, [pc, #456]	; (8003440 <HAL_ADC_Start_IT+0x250>)
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	4293      	cmp	r3, r2
 800327c:	d002      	beq.n	8003284 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f023 0206 	bic.w	r2, r3, #6
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	221c      	movs	r2, #28
 80032b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 021c 	bic.w	r2, r2, #28
 80032ce:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d108      	bne.n	80032ea <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	605a      	str	r2, [r3, #4]
          break;
 80032e8:	e008      	b.n	80032fc <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0204 	orr.w	r2, r2, #4
 80032f8:	605a      	str	r2, [r3, #4]
          break;
 80032fa:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0210 	orr.w	r2, r2, #16
 8003312:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_ADC_Start_IT+0x254>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d002      	beq.n	8003324 <HAL_ADC_Start_IT+0x134>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e000      	b.n	8003326 <HAL_ADC_Start_IT+0x136>
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_ADC_Start_IT+0x250>)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	d008      	beq.n	8003340 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d002      	beq.n	8003340 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b09      	cmp	r3, #9
 800333e:	d13b      	bne.n	80033b8 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02d      	beq.n	80033aa <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d110      	bne.n	8003388 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0220 	bic.w	r2, r2, #32
 8003374:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003384:	605a      	str	r2, [r3, #4]
              break;
 8003386:	e011      	b.n	80033ac <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003396:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	605a      	str	r2, [r3, #4]
              break;
 80033a8:	e000      	b.n	80033ac <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80033aa:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fd41 	bl	8002e38 <LL_ADC_REG_StartConversion>
 80033b6:	e056      	b.n	8003466 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_ADC_Start_IT+0x254>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d002      	beq.n	80033d4 <HAL_ADC_Start_IT+0x1e4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_Start_IT+0x1e6>
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_ADC_Start_IT+0x250>)
 80033d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d03f      	beq.n	8003464 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d110      	bne.n	800341e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341a:	605a      	str	r2, [r3, #4]
              break;
 800341c:	e023      	b.n	8003466 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	605a      	str	r2, [r3, #4]
              break;
 800343e:	e012      	b.n	8003466 <HAL_ADC_Start_IT+0x276>
 8003440:	40022000 	.word	0x40022000
 8003444:	40022100 	.word	0x40022100
 8003448:	40022300 	.word	0x40022300
 800344c:	58026300 	.word	0x58026300
 8003450:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800345c:	e003      	b.n	8003466 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800345e:	2302      	movs	r3, #2
 8003460:	75fb      	strb	r3, [r7, #23]
 8003462:	e000      	b.n	8003466 <HAL_ADC_Start_IT+0x276>
        }
 8003464:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003466:	7dfb      	ldrb	r3, [r7, #23]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a87      	ldr	r2, [pc, #540]	; (80036cc <HAL_ADC_IRQHandler+0x240>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_IRQHandler+0x30>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a86      	ldr	r2, [pc, #536]	; (80036d0 <HAL_ADC_IRQHandler+0x244>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_IRQHandler+0x34>
 80034bc:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_ADC_IRQHandler+0x248>)
 80034be:	e000      	b.n	80034c2 <HAL_ADC_IRQHandler+0x36>
 80034c0:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_ADC_IRQHandler+0x24c>)
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fc00 	bl	8002cc8 <LL_ADC_GetMultimode>
 80034c8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_ADC_IRQHandler+0x78>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f001 f81a 	bl	8004530 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2202      	movs	r2, #2
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_ADC_IRQHandler+0x8c>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8083 	beq.w	800362a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d07d      	beq.n	800362a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fb1a 	bl	8002b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d062      	beq.n	800361c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5d      	ldr	r2, [pc, #372]	; (80036d0 <HAL_ADC_IRQHandler+0x244>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d002      	beq.n	8003566 <HAL_ADC_IRQHandler+0xda>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e000      	b.n	8003568 <HAL_ADC_IRQHandler+0xdc>
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_ADC_IRQHandler+0x240>)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	4293      	cmp	r3, r2
 800356e:	d008      	beq.n	8003582 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d002      	beq.n	8003582 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b09      	cmp	r3, #9
 8003580:	d104      	bne.n	800358c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	623b      	str	r3, [r7, #32]
 800358a:	e00c      	b.n	80035a6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <HAL_ADC_IRQHandler+0x244>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d002      	beq.n	800359c <HAL_ADC_IRQHandler+0x110>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e000      	b.n	800359e <HAL_ADC_IRQHandler+0x112>
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_ADC_IRQHandler+0x240>)
 800359e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d135      	bne.n	800361c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d12e      	bne.n	800361c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fc4c 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11a      	bne.n	8003604 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020c 	bic.w	r2, r2, #12
 80035dc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d112      	bne.n	800361c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
 8003602:	e00b      	b.n	800361c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f043 0210 	orr.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fe fbe1 	bl	8001de4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	220c      	movs	r2, #12
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_ADC_IRQHandler+0x1b2>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a0 	beq.w	800378a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 809a 	beq.w	800378a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fac5 	bl	8002c02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003678:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fa80 	bl	8002b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003684:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_ADC_IRQHandler+0x244>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d002      	beq.n	8003696 <HAL_ADC_IRQHandler+0x20a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	e000      	b.n	8003698 <HAL_ADC_IRQHandler+0x20c>
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_ADC_IRQHandler+0x240>)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	4293      	cmp	r3, r2
 800369e:	d008      	beq.n	80036b2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d002      	beq.n	80036b2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b07      	cmp	r3, #7
 80036b0:	d104      	bne.n	80036bc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	e014      	b.n	80036e6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <HAL_ADC_IRQHandler+0x244>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00a      	beq.n	80036dc <HAL_ADC_IRQHandler+0x250>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e008      	b.n	80036de <HAL_ADC_IRQHandler+0x252>
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40022100 	.word	0x40022100
 80036d4:	40022300 	.word	0x40022300
 80036d8:	58026300 	.word	0x58026300
 80036dc:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_ADC_IRQHandler+0x464>)
 80036de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d047      	beq.n	800377c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <HAL_ADC_IRQHandler+0x27a>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d03f      	beq.n	800377c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13a      	bne.n	800377c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d133      	bne.n	800377c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d12e      	bne.n	800377c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fbaf 	bl	8002e86 <LL_ADC_INJ_IsConversionOngoing>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11a      	bne.n	8003764 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d112      	bne.n	800377c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
 8003762:	e00b      	b.n	800377c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f043 0210 	orr.w	r2, r3, #16
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 feaf 	bl	80044e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2260      	movs	r2, #96	; 0x60
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d011      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x32c>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8a8 	bl	8003900 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_ADC_IRQHandler+0x35c>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fe95 	bl	8004508 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d012      	beq.n	8003818 <HAL_ADC_IRQHandler+0x38c>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fe87 	bl	800451c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d043      	beq.n	80038aa <HAL_ADC_IRQHandler+0x41e>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d03e      	beq.n	80038aa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003834:	2301      	movs	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	e021      	b.n	800387e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <HAL_ADC_IRQHandler+0x464>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_ADC_IRQHandler+0x3c8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_ADC_IRQHandler+0x468>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_ADC_IRQHandler+0x3cc>
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_ADC_IRQHandler+0x46c>)
 8003856:	e000      	b.n	800385a <HAL_ADC_IRQHandler+0x3ce>
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_ADC_IRQHandler+0x470>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fa42 	bl	8002ce4 <LL_ADC_GetMultiDMATransfer>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003866:	2301      	movs	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	e008      	b.n	800387e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800387a:	2301      	movs	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10e      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f043 0202 	orr.w	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f839 	bl	8003914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2210      	movs	r2, #16
 80038a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x45a>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	f043 0208 	orr.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fe07 	bl	80044f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40022100 	.word	0x40022100
 80038f8:	40022300 	.word	0x40022300
 80038fc:	58026300 	.word	0x58026300

08003900 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b0a1      	sub	sp, #132	; 0x84
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a9d      	ldr	r2, [pc, #628]	; (8003bb8 <HAL_ADC_ConfigChannel+0x290>)
 8003942:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x2a>
 800394e:	2302      	movs	r3, #2
 8003950:	e321      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x66e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fa7e 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 8306 	bne.w	8003f78 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <HAL_ADC_ConfigChannel+0x62>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	e016      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800399c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80039a2:	2320      	movs	r3, #32
 80039a4:	e003      	b.n	80039ae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80039a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2201      	movs	r2, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	69d1      	ldr	r1, [r2, #28]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f7ff f8e9 	bl	8002baa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fa3f 	bl	8002e60 <LL_ADC_REG_IsConversionOngoing>
 80039e2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fa4c 	bl	8002e86 <LL_ADC_INJ_IsConversionOngoing>
 80039ee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80b3 	bne.w	8003b5e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80af 	bne.w	8003b5e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f7ff f90b 	bl	8002c28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a12:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <HAL_ADC_ConfigChannel+0x294>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1e:	d10b      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x110>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	e01d      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x14c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x136>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	e00a      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x14c>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d027      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6919      	ldr	r1, [r3, #16]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a8c:	f7ff f826 	bl	8002adc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6919      	ldr	r1, [r3, #16]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	7e5b      	ldrb	r3, [r3, #25]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x17e>
 8003aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003aa4:	e000      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x180>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f7ff f850 	bl	8002b4e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6919      	ldr	r1, [r3, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	7e1b      	ldrb	r3, [r3, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x19c>
 8003abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x19e>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f7ff f828 	bl	8002b1c <LL_ADC_SetDataRightShift>
 8003acc:	e047      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	069b      	lsls	r3, r3, #26
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d107      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	069b      	lsls	r3, r3, #26
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d107      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	069b      	lsls	r3, r3, #26
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d107      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b38:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	069b      	lsls	r3, r3, #26
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d107      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f942 	bl	8002dec <LL_ADC_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 820d 	bne.w	8003f8a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7ff f87f 	bl	8002c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_ADC_ConfigChannel+0x290>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f040 8133 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d110      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x298>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	bf94      	ite	ls
 8003bae:	2301      	movls	r3, #1
 8003bb0:	2300      	movhi	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e01e      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x2cc>
 8003bb6:	bf00      	nop
 8003bb8:	47ff0000 	.word	0x47ff0000
 8003bbc:	5c001000 	.word	0x5c001000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e003      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	bf94      	ite	ls
 8003bee:	2301      	movls	r3, #1
 8003bf0:	2300      	movhi	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d079      	beq.n	8003cec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x2ec>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	069b      	lsls	r3, r3, #26
 8003c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c12:	e015      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x318>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e003      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	069b      	lsls	r3, r3, #26
 8003c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x338>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	3301      	adds	r3, #1
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	e017      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x368>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c70:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x38e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	e018      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x3c0>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e003      	b.n	8003cda <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	e07e      	b.n	8003dea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x3e0>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	3301      	adds	r3, #1
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d06:	e015      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x40c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	069b      	lsls	r3, r3, #26
 8003d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x42c>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	e017      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x45c>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	61bb      	str	r3, [r7, #24]
  return result;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x488>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	3b1e      	subs	r3, #30
 8003da8:	051b      	lsls	r3, r3, #20
 8003daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dae:	e01b      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x4c0>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	60fb      	str	r3, [r7, #12]
  return result;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e003      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	3b1e      	subs	r3, #30
 8003de2:	051b      	lsls	r3, r3, #20
 8003de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de8:	430b      	orrs	r3, r1
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fe ff1a 	bl	8002c28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f280 80c6 	bge.w	8003f8a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a67      	ldr	r2, [pc, #412]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x4ea>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a65      	ldr	r2, [pc, #404]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x4ee>
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_ADC_ConfigChannel+0x680>)
 8003e14:	e000      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x4f0>
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_ADC_ConfigChannel+0x684>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fe51 	bl	8002ac0 <LL_ADC_GetCommonPathInternalCh>
 8003e1e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_ADC_ConfigChannel+0x50c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a5d      	ldr	r2, [pc, #372]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10e      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x52a>
 8003e34:	485a      	ldr	r0, [pc, #360]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003e36:	f7fe ffd9 	bl	8002dec <LL_ADC_IsEnabled>
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4859      	ldr	r0, [pc, #356]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003e3e:	f7fe ffd5 	bl	8002dec <LL_ADC_IsEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4323      	orrs	r3, r4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e008      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x53c>
 8003e52:	4857      	ldr	r0, [pc, #348]	; (8003fb0 <HAL_ADC_ConfigChannel+0x688>)
 8003e54:	f7fe ffca 	bl	8002dec <LL_ADC_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d07d      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	; (8003fb4 <HAL_ADC_ConfigChannel+0x68c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d130      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x5ac>
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d12b      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a4b      	ldr	r2, [pc, #300]	; (8003fb0 <HAL_ADC_ConfigChannel+0x688>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f040 8081 	bne.w	8003f8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a44      	ldr	r2, [pc, #272]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_ADC_ConfigChannel+0x574>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x578>
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_ADC_ConfigChannel+0x680>)
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x57a>
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_ADC_ConfigChannel+0x684>)
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7fe fdf5 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb0:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <HAL_ADC_ConfigChannel+0x690>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_ADC_ConfigChannel+0x694>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ec4:	e002      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f9      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed2:	e05a      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <HAL_ADC_ConfigChannel+0x698>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d11e      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x5f4>
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d119      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <HAL_ADC_ConfigChannel+0x688>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d14b      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_ADC_ConfigChannel+0x5de>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x5e2>
 8003f06:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <HAL_ADC_ConfigChannel+0x680>)
 8003f08:	e000      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x5e4>
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_ADC_ConfigChannel+0x684>)
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe fdc0 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f1a:	e036      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <HAL_ADC_ConfigChannel+0x69c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d131      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d12c      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_ADC_ConfigChannel+0x688>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d127      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_ADC_ConfigChannel+0x626>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x62a>
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_ADC_ConfigChannel+0x680>)
 8003f50:	e000      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x62c>
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_ADC_ConfigChannel+0x684>)
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fd9c 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
 8003f62:	e012      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f76:	e008      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3784      	adds	r7, #132	; 0x84
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40022000 	.word	0x40022000
 8003fa4:	40022100 	.word	0x40022100
 8003fa8:	40022300 	.word	0x40022300
 8003fac:	58026300 	.word	0x58026300
 8003fb0:	58026000 	.word	0x58026000
 8003fb4:	cb840000 	.word	0xcb840000
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	053e2d63 	.word	0x053e2d63
 8003fc0:	c7520000 	.word	0xc7520000
 8003fc4:	cfb80000 	.word	0xcfb80000

08003fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe ff09 	bl	8002dec <LL_ADC_IsEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d16e      	bne.n	80040be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <ADC_Enable+0x100>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f043 0210 	orr.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e05a      	b.n	80040c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fec4 	bl	8002d9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004014:	f7fe fcc8 	bl	80029a8 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <ADC_Enable+0x104>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <ADC_Enable+0x66>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <ADC_Enable+0x108>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <ADC_Enable+0x6a>
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <ADC_Enable+0x10c>)
 8004030:	e000      	b.n	8004034 <ADC_Enable+0x6c>
 8004032:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <ADC_Enable+0x110>)
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fe47 	bl	8002cc8 <LL_ADC_GetMultimode>
 800403a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <ADC_Enable+0x108>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d002      	beq.n	800404c <ADC_Enable+0x84>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	e000      	b.n	800404e <ADC_Enable+0x86>
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <ADC_Enable+0x104>)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d130      	bne.n	80040be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800405c:	e028      	b.n	80040b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fec2 	bl	8002dec <LL_ADC_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fe92 	bl	8002d9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004078:	f7fe fc96 	bl	80029a8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d914      	bls.n	80040b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d00d      	beq.n	80040b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0210 	orr.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d1cf      	bne.n	800405e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	8000003f 	.word	0x8000003f
 80040cc:	40022000 	.word	0x40022000
 80040d0:	40022100 	.word	0x40022100
 80040d4:	40022300 	.word	0x40022300
 80040d8:	58026300 	.word	0x58026300

080040dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fe92 	bl	8002e12 <LL_ADC_IsDisableOngoing>
 80040ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fe79 	bl	8002dec <LL_ADC_IsEnabled>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d047      	beq.n	8004190 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d144      	bne.n	8004190 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030d 	and.w	r3, r3, #13
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10c      	bne.n	800412e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fe53 	bl	8002dc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2203      	movs	r2, #3
 8004124:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004126:	f7fe fc3f 	bl	80029a8 <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800412c:	e029      	b.n	8004182 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e023      	b.n	8004192 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800414a:	f7fe fc2d 	bl	80029a8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d914      	bls.n	8004182 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f043 0210 	orr.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e007      	b.n	8004192 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1dc      	bne.n	800414a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <ADC_ConfigureBoostMode+0x1f8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <ADC_ConfigureBoostMode+0x1c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a79      	ldr	r2, [pc, #484]	; (8004398 <ADC_ConfigureBoostMode+0x1fc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d109      	bne.n	80041cc <ADC_ConfigureBoostMode+0x30>
 80041b8:	4b78      	ldr	r3, [pc, #480]	; (800439c <ADC_ConfigureBoostMode+0x200>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e008      	b.n	80041de <ADC_ConfigureBoostMode+0x42>
 80041cc:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <ADC_ConfigureBoostMode+0x204>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01c      	beq.n	800421c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80041e2:	f004 fab9 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 80041e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041f0:	d010      	beq.n	8004214 <ADC_ConfigureBoostMode+0x78>
 80041f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041f6:	d873      	bhi.n	80042e0 <ADC_ConfigureBoostMode+0x144>
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d002      	beq.n	8004204 <ADC_ConfigureBoostMode+0x68>
 80041fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004202:	d16d      	bne.n	80042e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	60fb      	str	r3, [r7, #12]
        break;
 8004212:	e068      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	60fb      	str	r3, [r7, #12]
        break;
 800421a:	e064      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800421c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	f005 fd1a 	bl	8009c5c <HAL_RCCEx_GetPeriphCLKFreq>
 8004228:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004232:	d051      	beq.n	80042d8 <ADC_ConfigureBoostMode+0x13c>
 8004234:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004238:	d854      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 800423a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800423e:	d047      	beq.n	80042d0 <ADC_ConfigureBoostMode+0x134>
 8004240:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004244:	d84e      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 8004246:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800424a:	d03d      	beq.n	80042c8 <ADC_ConfigureBoostMode+0x12c>
 800424c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004250:	d848      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 8004252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004256:	d033      	beq.n	80042c0 <ADC_ConfigureBoostMode+0x124>
 8004258:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425c:	d842      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 800425e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004262:	d029      	beq.n	80042b8 <ADC_ConfigureBoostMode+0x11c>
 8004264:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004268:	d83c      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 800426a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800426e:	d01a      	beq.n	80042a6 <ADC_ConfigureBoostMode+0x10a>
 8004270:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004274:	d836      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 8004276:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800427a:	d014      	beq.n	80042a6 <ADC_ConfigureBoostMode+0x10a>
 800427c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004280:	d830      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d00e      	beq.n	80042a6 <ADC_ConfigureBoostMode+0x10a>
 8004288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428c:	d82a      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 800428e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004292:	d008      	beq.n	80042a6 <ADC_ConfigureBoostMode+0x10a>
 8004294:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004298:	d824      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x148>
 800429a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800429e:	d002      	beq.n	80042a6 <ADC_ConfigureBoostMode+0x10a>
 80042a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042a4:	d11e      	bne.n	80042e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	0c9b      	lsrs	r3, r3, #18
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	60fb      	str	r3, [r7, #12]
        break;
 80042b6:	e016      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
        break;
 80042be:	e012      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	60fb      	str	r3, [r7, #12]
        break;
 80042c6:	e00e      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	60fb      	str	r3, [r7, #12]
        break;
 80042ce:	e00a      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	09db      	lsrs	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
        break;
 80042d6:	e006      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	60fb      	str	r3, [r7, #12]
        break;
 80042de:	e002      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80042e0:	bf00      	nop
 80042e2:	e000      	b.n	80042e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80042e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80042e6:	f7fe fb8f 	bl	8002a08 <HAL_GetREVID>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d815      	bhi.n	8004320 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a2b      	ldr	r2, [pc, #172]	; (80043a4 <ADC_ConfigureBoostMode+0x208>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d908      	bls.n	800430e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800430c:	e03e      	b.n	800438c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431c:	609a      	str	r2, [r3, #8]
}
 800431e:	e035      	b.n	800438c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <ADC_ConfigureBoostMode+0x20c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d808      	bhi.n	8004340 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800433c:	609a      	str	r2, [r3, #8]
}
 800433e:	e025      	b.n	800438c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <ADC_ConfigureBoostMode+0x210>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d80a      	bhi.n	800435e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	e016      	b.n	800438c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <ADC_ConfigureBoostMode+0x214>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d80a      	bhi.n	800437c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	e007      	b.n	800438c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40022000 	.word	0x40022000
 8004398:	40022100 	.word	0x40022100
 800439c:	40022300 	.word	0x40022300
 80043a0:	58026300 	.word	0x58026300
 80043a4:	01312d00 	.word	0x01312d00
 80043a8:	005f5e10 	.word	0x005f5e10
 80043ac:	00bebc20 	.word	0x00bebc20
 80043b0:	017d7840 	.word	0x017d7840

080043b4 <LL_ADC_StartCalibration>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <LL_ADC_StartCalibration+0x38>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043d4:	430a      	orrs	r2, r1
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	3ffeffc0 	.word	0x3ffeffc0

080043f0 <LL_ADC_IsCalibrationOnGoing>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004404:	d101      	bne.n	800440a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_ADCEx_Calibration_Start+0x1e>
 8004432:	2302      	movs	r3, #2
 8004434:	e04c      	b.n	80044d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff fe4c 	bl	80040dc <ADC_Disable>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d135      	bne.n	80044ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004454:	4013      	ands	r3, r2
 8004456:	f043 0202 	orr.w	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ffa4 	bl	80043b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800446c:	e014      	b.n	8004498 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3301      	adds	r3, #1
 8004472:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_ADCEx_Calibration_Start+0xc4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d30d      	bcc.n	8004498 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f023 0312 	bic.w	r3, r3, #18
 8004484:	f043 0210 	orr.w	r2, r3, #16
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e01b      	b.n	80044d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ffa7 	bl	80043f0 <LL_ADC_IsCalibrationOnGoing>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e2      	bne.n	800446e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f023 0303 	bic.w	r3, r3, #3
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
 80044b8:	e005      	b.n	80044c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f043 0210 	orr.w	r2, r3, #16
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	ffffeefd 	.word	0xffffeefd
 80044dc:	25c3f800 	.word	0x25c3f800

080044e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <__NVIC_SetPriorityGrouping>:
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 800456e:	4313      	orrs	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	05fa0000 	.word	0x05fa0000

0800458c <__NVIC_GetPriorityGrouping>:
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	; (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	; (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff8e 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff29 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff40 	bl	800458c <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff90 	bl	8004638 <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff5f 	bl	80045e4 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff33 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ffa4 	bl	80046a0 <SysTick_Config>
 8004758:	4603      	mov	r3, r0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e014      	b.n	800479e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fd fc11 	bl	8001fac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	795b      	ldrb	r3, [r3, #5]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_DAC_Start+0x16>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e040      	b.n	800483e <HAL_DAC_Start+0x98>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d11d      	bne.n	8004830 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	e014      	b.n	8004830 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2102      	movs	r1, #2
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0202 	orr.w	r2, r2, #2
 800482e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3308      	adds	r3, #8
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e004      	b.n	800487e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	3314      	adds	r3, #20
 800487c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	461a      	mov	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	795b      	ldrb	r3, [r3, #5]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_DAC_ConfigChannel+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e12a      	b.n	8004b02 <HAL_DAC_ConfigChannel+0x26e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2202      	movs	r2, #2
 80048b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	f040 8081 	bne.w	80049c4 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80048c2:	f7fe f871 	bl	80029a8 <HAL_GetTick>
 80048c6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d140      	bne.n	8004950 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048ce:	e018      	b.n	8004902 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048d0:	f7fe f86a 	bl	80029a8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d911      	bls.n	8004902 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e4:	4b89      	ldr	r3, [pc, #548]	; (8004b0c <HAL_DAC_ConfigChannel+0x278>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f043 0208 	orr.w	r2, r3, #8
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2203      	movs	r2, #3
 80048fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0ff      	b.n	8004b02 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004908:	4b80      	ldr	r3, [pc, #512]	; (8004b0c <HAL_DAC_ConfigChannel+0x278>)
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1df      	bne.n	80048d0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004910:	2001      	movs	r0, #1
 8004912:	f7fe f855 	bl	80029c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	6992      	ldr	r2, [r2, #24]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
 8004920:	e023      	b.n	800496a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004922:	f7fe f841 	bl	80029a8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d90f      	bls.n	8004950 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	da0a      	bge.n	8004950 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2203      	movs	r2, #3
 800494a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0d8      	b.n	8004b02 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	dbe3      	blt.n	8004922 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800495a:	2001      	movs	r0, #1
 800495c:	f7fe f830 	bl	80029c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	6992      	ldr	r2, [r2, #24]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	ea02 0103 	and.w	r1, r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	409a      	lsls	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	21ff      	movs	r1, #255	; 0xff
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	ea02 0103 	and.w	r1, r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	409a      	lsls	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d11d      	bne.n	8004a08 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	221f      	movs	r2, #31
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4013      	ands	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2207      	movs	r2, #7
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4013      	ands	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e00f      	b.n	8004a52 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d102      	bne.n	8004a40 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e008      	b.n	8004a52 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e001      	b.n	8004a52 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	400a      	ands	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	22c0      	movs	r2, #192	; 0xc0
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	400a      	ands	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20008000 	.word	0x20008000

08004b10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0cf      	b.n	8004cc2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2223      	movs	r2, #35	; 0x23
 8004b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fd fa7f 	bl	8002038 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3a:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_ETH_Init+0x1bc>)
 8004b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b40:	4a62      	ldr	r2, [pc, #392]	; (8004ccc <HAL_ETH_Init+0x1bc>)
 8004b42:	f043 0302 	orr.w	r3, r3, #2
 8004b46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b4a:	4b60      	ldr	r3, [pc, #384]	; (8004ccc <HAL_ETH_Init+0x1bc>)
 8004b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7a1b      	ldrb	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004b60:	2000      	movs	r0, #0
 8004b62:	f7fd ff5d 	bl	8002a20 <HAL_SYSCFG_ETHInterfaceSelect>
 8004b66:	e003      	b.n	8004b70 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004b68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004b6c:	f7fd ff58 	bl	8002a20 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004b70:	4b57      	ldr	r3, [pc, #348]	; (8004cd0 <HAL_ETH_Init+0x1c0>)
 8004b72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b8c:	f7fd ff0c 	bl	80029a8 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004b92:	e011      	b.n	8004bb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004b94:	f7fd ff08 	bl	80029a8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ba2:	d909      	bls.n	8004bb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	22e0      	movs	r2, #224	; 0xe0
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e084      	b.n	8004cc2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e4      	bne.n	8004b94 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f886 	bl	8004cdc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004bd0:	f003 fdc2 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <HAL_ETH_Init+0x1c4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	0c9a      	lsrs	r2, r3, #18
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3a01      	subs	r2, #1
 8004be4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa71 	bl	80050d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004bfa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c0a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	22e0      	movs	r2, #224	; 0xe0
 8004c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e049      	b.n	8004cc2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004c3a:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <HAL_ETH_Init+0x1c8>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6952      	ldr	r2, [r2, #20]
 8004c42:	0051      	lsls	r1, r2, #1
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c4e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fad9 	bl	800520a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb1f 	bl	800529c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	3305      	adds	r3, #5
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	3303      	adds	r3, #3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	061a      	lsls	r2, r3, #24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	3301      	adds	r3, #1
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004caa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004cac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	58000400 	.word	0x58000400
 8004cd4:	431bde83 	.word	0x431bde83
 8004cd8:	ffff8001 	.word	0xffff8001

08004cdc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004cf6:	f003 fd2f 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 8004cfa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d908      	bls.n	8004d16 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d804      	bhi.n	8004d16 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e027      	b.n	8004d66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d908      	bls.n	8004d30 <HAL_ETH_SetMDIOClockRange+0x54>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d204      	bcs.n	8004d30 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e01a      	b.n	8004d66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d303      	bcc.n	8004d40 <HAL_ETH_SetMDIOClockRange+0x64>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d911      	bls.n	8004d64 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d908      	bls.n	8004d5a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d804      	bhi.n	8004d5a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e005      	b.n	8004d66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e000      	b.n	8004d66 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004d64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	01312cff 	.word	0x01312cff
 8004d7c:	02160ebf 	.word	0x02160ebf
 8004d80:	03938700 	.word	0x03938700
 8004d84:	05f5e0ff 	.word	0x05f5e0ff
 8004d88:	08f0d17f 	.word	0x08f0d17f

08004d8c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004d9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	791b      	ldrb	r3, [r3, #4]
 8004da4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004da6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	7b1b      	ldrb	r3, [r3, #12]
 8004dac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7b5b      	ldrb	r3, [r3, #13]
 8004db4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	7b9b      	ldrb	r3, [r3, #14]
 8004dbc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004dbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	7bdb      	ldrb	r3, [r3, #15]
 8004dc4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004dc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	7c12      	ldrb	r2, [r2, #16]
 8004dcc:	2a00      	cmp	r2, #0
 8004dce:	d102      	bne.n	8004dd6 <ETH_SetMACConfig+0x4a>
 8004dd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004dd4:	e000      	b.n	8004dd8 <ETH_SetMACConfig+0x4c>
 8004dd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004dd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	7c52      	ldrb	r2, [r2, #17]
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	d102      	bne.n	8004de8 <ETH_SetMACConfig+0x5c>
 8004de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004de6:	e000      	b.n	8004dea <ETH_SetMACConfig+0x5e>
 8004de8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	7c9b      	ldrb	r3, [r3, #18]
 8004df0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004df2:	431a      	orrs	r2, r3
               macconf->Speed |
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004df8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004dfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	7f1b      	ldrb	r3, [r3, #28]
 8004e04:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004e06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	7f5b      	ldrb	r3, [r3, #29]
 8004e0c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004e0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	7f92      	ldrb	r2, [r2, #30]
 8004e14:	2a00      	cmp	r2, #0
 8004e16:	d102      	bne.n	8004e1e <ETH_SetMACConfig+0x92>
 8004e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1c:	e000      	b.n	8004e20 <ETH_SetMACConfig+0x94>
 8004e1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004e20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	7fdb      	ldrb	r3, [r3, #31]
 8004e26:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004e28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d102      	bne.n	8004e3a <ETH_SetMACConfig+0xae>
 8004e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e38:	e000      	b.n	8004e3c <ETH_SetMACConfig+0xb0>
 8004e3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e3c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e4a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004e4c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <ETH_SetMACConfig+0x22c>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	430b      	orrs	r3, r1
 8004e68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e8a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d102      	bne.n	8004e9e <ETH_SetMACConfig+0x112>
 8004e98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e9c:	e000      	b.n	8004ea0 <ETH_SetMACConfig+0x114>
 8004e9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004ea0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <ETH_SetMACConfig+0x230>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <ETH_SetMACConfig+0x234>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ee8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004ef6:	2a00      	cmp	r2, #0
 8004ef8:	d101      	bne.n	8004efe <ETH_SetMACConfig+0x172>
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	e000      	b.n	8004f00 <ETH_SetMACConfig+0x174>
 8004efe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004f00:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f12:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f16:	4013      	ands	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004f28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004f30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f023 0103 	bic.w	r1, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f56:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	d101      	bne.n	8004f7a <ETH_SetMACConfig+0x1ee>
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	e000      	b.n	8004f7c <ETH_SetMACConfig+0x1f0>
 8004f7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f9c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	00048083 	.word	0x00048083
 8004fbc:	c0f88000 	.word	0xc0f88000
 8004fc0:	fffffef0 	.word	0xfffffef0

08004fc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b38      	ldr	r3, [pc, #224]	; (80050bc <ETH_SetDMAConfig+0xf8>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	6811      	ldr	r1, [r2, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004ff6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	7b1b      	ldrb	r3, [r3, #12]
 8004ffc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <ETH_SetDMAConfig+0xfc>)
 800500e:	4013      	ands	r3, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	430b      	orrs	r3, r1
 8005018:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800501c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	7b5b      	ldrb	r3, [r3, #13]
 8005022:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005038:	4b22      	ldr	r3, [pc, #136]	; (80050c4 <ETH_SetDMAConfig+0x100>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	430b      	orrs	r3, r1
 8005044:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005048:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7d1b      	ldrb	r3, [r3, #20]
 8005054:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005056:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	7f5b      	ldrb	r3, [r3, #29]
 800505c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <ETH_SetDMAConfig+0x104>)
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	430b      	orrs	r3, r1
 800507a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800507e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	7f1b      	ldrb	r3, [r3, #28]
 8005086:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <ETH_SetDMAConfig+0x108>)
 800509e:	4013      	ands	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	430b      	orrs	r3, r1
 80050a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	ffff87fd 	.word	0xffff87fd
 80050c0:	ffff2ffe 	.word	0xffff2ffe
 80050c4:	fffec000 	.word	0xfffec000
 80050c8:	ffc0efef 	.word	0xffc0efef
 80050cc:	7fc0ffff 	.word	0x7fc0ffff

080050d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b0a4      	sub	sp, #144	; 0x90
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050de:	2300      	movs	r3, #0
 80050e0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800510c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005110:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005118:	2300      	movs	r3, #0
 800511a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005122:	2300      	movs	r3, #0
 8005124:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005128:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800512e:	2300      	movs	r3, #0
 8005130:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005134:	2300      	movs	r3, #0
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800514a:	2300      	movs	r3, #0
 800514c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800514e:	2300      	movs	r3, #0
 8005150:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005152:	2300      	movs	r3, #0
 8005154:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005168:	2320      	movs	r3, #32
 800516a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800517a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005184:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800518c:	2302      	movs	r3, #2
 800518e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80051aa:	2300      	movs	r3, #0
 80051ac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fde6 	bl	8004d8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051c4:	2301      	movs	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80051f0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fee1 	bl	8004fc4 <ETH_SetDMAConfig>
}
 8005202:	bf00      	nop
 8005204:	3790      	adds	r7, #144	; 0x90
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e01d      	b.n	8005254 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68d9      	ldr	r1, [r3, #12]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	3206      	adds	r2, #6
 800524a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d9de      	bls.n	8005218 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005268:	461a      	mov	r2, r3
 800526a:	2303      	movs	r3, #3
 800526c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e023      	b.n	80052f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6919      	ldr	r1, [r3, #16]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2200      	movs	r2, #0
 80052d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	3212      	adds	r2, #18
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d9d8      	bls.n	80052aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531e:	461a      	mov	r2, r3
 8005320:	2303      	movs	r3, #3
 8005322:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005332:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_GPIO_Init+0x234>)
 8005368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800536a:	e194      	b.n	8005696 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8186 	beq.w	8005690 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d005      	beq.n	800539c <HAL_GPIO_Init+0x44>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d130      	bne.n	80053fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053d2:	2201      	movs	r2, #1
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0201 	and.w	r2, r3, #1
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d017      	beq.n	800543a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d123      	bne.n	800548e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	08da      	lsrs	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3208      	adds	r2, #8
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	08da      	lsrs	r2, r3, #3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3208      	adds	r2, #8
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80e0 	beq.w	8005690 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d0:	4b2f      	ldr	r3, [pc, #188]	; (8005590 <HAL_GPIO_Init+0x238>)
 80054d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d6:	4a2e      	ldr	r2, [pc, #184]	; (8005590 <HAL_GPIO_Init+0x238>)
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054e0:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <HAL_GPIO_Init+0x238>)
 80054e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ee:	4a29      	ldr	r2, [pc, #164]	; (8005594 <HAL_GPIO_Init+0x23c>)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	3302      	adds	r3, #2
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	220f      	movs	r2, #15
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a20      	ldr	r2, [pc, #128]	; (8005598 <HAL_GPIO_Init+0x240>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d052      	beq.n	80055c0 <HAL_GPIO_Init+0x268>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_GPIO_Init+0x244>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d031      	beq.n	8005586 <HAL_GPIO_Init+0x22e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_GPIO_Init+0x248>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02b      	beq.n	8005582 <HAL_GPIO_Init+0x22a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <HAL_GPIO_Init+0x24c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d025      	beq.n	800557e <HAL_GPIO_Init+0x226>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_GPIO_Init+0x250>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <HAL_GPIO_Init+0x222>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <HAL_GPIO_Init+0x254>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d019      	beq.n	8005576 <HAL_GPIO_Init+0x21e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <HAL_GPIO_Init+0x258>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <HAL_GPIO_Init+0x21a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_GPIO_Init+0x25c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00d      	beq.n	800556e <HAL_GPIO_Init+0x216>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_GPIO_Init+0x260>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <HAL_GPIO_Init+0x212>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_GPIO_Init+0x264>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d101      	bne.n	8005566 <HAL_GPIO_Init+0x20e>
 8005562:	2309      	movs	r3, #9
 8005564:	e02d      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 8005566:	230a      	movs	r3, #10
 8005568:	e02b      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 800556a:	2308      	movs	r3, #8
 800556c:	e029      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 800556e:	2307      	movs	r3, #7
 8005570:	e027      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 8005572:	2306      	movs	r3, #6
 8005574:	e025      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 8005576:	2305      	movs	r3, #5
 8005578:	e023      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 800557a:	2304      	movs	r3, #4
 800557c:	e021      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 800557e:	2303      	movs	r3, #3
 8005580:	e01f      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 8005582:	2302      	movs	r3, #2
 8005584:	e01d      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 8005586:	2301      	movs	r3, #1
 8005588:	e01b      	b.n	80055c2 <HAL_GPIO_Init+0x26a>
 800558a:	bf00      	nop
 800558c:	58000080 	.word	0x58000080
 8005590:	58024400 	.word	0x58024400
 8005594:	58000400 	.word	0x58000400
 8005598:	58020000 	.word	0x58020000
 800559c:	58020400 	.word	0x58020400
 80055a0:	58020800 	.word	0x58020800
 80055a4:	58020c00 	.word	0x58020c00
 80055a8:	58021000 	.word	0x58021000
 80055ac:	58021400 	.word	0x58021400
 80055b0:	58021800 	.word	0x58021800
 80055b4:	58021c00 	.word	0x58021c00
 80055b8:	58022000 	.word	0x58022000
 80055bc:	58022400 	.word	0x58022400
 80055c0:	2300      	movs	r3, #0
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	f002 0203 	and.w	r2, r2, #3
 80055c8:	0092      	lsls	r2, r2, #2
 80055ca:	4093      	lsls	r3, r2
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d2:	4938      	ldr	r1, [pc, #224]	; (80056b4 <HAL_GPIO_Init+0x35c>)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3302      	adds	r3, #2
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	3301      	adds	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f ae63 	bne.w	800536c <HAL_GPIO_Init+0x14>
  }
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	3724      	adds	r7, #36	; 0x24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	58000400 	.word	0x58000400

080056b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	887b      	ldrh	r3, [r7, #2]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
 80056d4:	e001      	b.n	80056da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	807b      	strh	r3, [r7, #2]
 80056f4:	4613      	mov	r3, r2
 80056f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056f8:	787b      	ldrb	r3, [r7, #1]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056fe:	887a      	ldrh	r2, [r7, #2]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005704:	e003      	b.n	800570e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005706:	887b      	ldrh	r3, [r7, #2]
 8005708:	041a      	lsls	r2, r3, #16
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	619a      	str	r2, [r3, #24]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4013      	ands	r3, r2
 8005732:	041a      	lsls	r2, r3, #16
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	43d9      	mvns	r1, r3
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	400b      	ands	r3, r1
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	619a      	str	r2, [r3, #24]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0bd      	b.n	80058de <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d031      	beq.n	800580a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a4f      	ldr	r2, [pc, #316]	; (80058e8 <HAL_HRTIM_Init+0x198>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10e      	bne.n	80057ce <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80057b0:	4b4e      	ldr	r3, [pc, #312]	; (80058ec <HAL_HRTIM_Init+0x19c>)
 80057b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057b6:	4a4d      	ldr	r2, [pc, #308]	; (80058ec <HAL_HRTIM_Init+0x19c>)
 80057b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057c0:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <HAL_HRTIM_Init+0x19c>)
 80057c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057dc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057f2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc fce2 	bl	80021d4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
 8005856:	e03e      	b.n	80058d6 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005858:	7dfa      	ldrb	r2, [r7, #23]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	3318      	adds	r3, #24
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800586c:	7dfa      	ldrb	r2, [r7, #23]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	331c      	adds	r3, #28
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005880:	7dfa      	ldrb	r2, [r7, #23]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	3320      	adds	r3, #32
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005894:	7dfa      	ldrb	r2, [r7, #23]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80058a8:	7dfa      	ldrb	r2, [r7, #23]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3328      	adds	r3, #40	; 0x28
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80058bc:	7dfa      	ldrb	r2, [r7, #23]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	3301      	adds	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d9bd      	bls.n	8005858 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40017400 	.word	0x40017400
 80058ec:	58024400 	.word	0x58024400

080058f0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d101      	bne.n	800590c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	e015      	b.n	8005938 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d104      	bne.n	8005924 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fd43 	bl	80063a8 <HRTIM_MasterBase_Config>
 8005922:	e004      	b.n	800592e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fd6c 	bl	8006406 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d101      	bne.n	800595c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	e05f      	b.n	8005a1c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005966:	2302      	movs	r3, #2
 8005968:	e058      	b.n	8005a1c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b05      	cmp	r3, #5
 800597e:	d104      	bne.n	800598a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fd7f 	bl	8006486 <HRTIM_MasterWaveform_Config>
 8005988:	e004      	b.n	8005994 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fde0 	bl	8006554 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4403      	add	r3, r0
 80059a6:	3320      	adds	r3, #32
 80059a8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4403      	add	r3, r0
 80059bc:	3324      	adds	r3, #36	; 0x24
 80059be:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6899      	ldr	r1, [r3, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4403      	add	r3, r0
 80059d2:	3328      	adds	r3, #40	; 0x28
 80059d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68d9      	ldr	r1, [r3, #12]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4403      	add	r3, r0
 80059e8:	332c      	adds	r3, #44	; 0x2c
 80059ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6919      	ldr	r1, [r3, #16]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4403      	add	r3, r0
 80059fe:	3330      	adds	r3, #48	; 0x30
 8005a00:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 ffe3 	bl	80069d0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d101      	bne.n	8005a42 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e157      	b.n	8005cf2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e150      	b.n	8005cf2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d140      	bne.n	8005ae8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	2b07      	cmp	r3, #7
 8005a6c:	d82a      	bhi.n	8005ac4 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a95 	.word	0x08005a95
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ab9 	.word	0x08005ab9
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	61da      	str	r2, [r3, #28]
        break;
 8005a9e:	e01a      	b.n	8005ad6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005aaa:	e014      	b.n	8005ad6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005ab6:	e00e      	b.n	8005ad6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005ac2:	e008      	b.n	8005ad6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2207      	movs	r2, #7
 8005ac8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005ad4:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b07      	cmp	r3, #7
 8005ae0:	f040 80fe 	bne.w	8005ce0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e104      	b.n	8005cf2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b07      	cmp	r3, #7
 8005aee:	f200 80e3 	bhi.w	8005cb8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b19 	.word	0x08005b19
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005cb9 	.word	0x08005cb9
 8005b04:	08005be9 	.word	0x08005be9
 8005b08:	08005cb9 	.word	0x08005cb9
 8005b0c:	08005cb9 	.word	0x08005cb9
 8005b10:	08005cb9 	.word	0x08005cb9
 8005b14:	08005bfd 	.word	0x08005bfd
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6819      	ldr	r1, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	01db      	lsls	r3, r3, #7
 8005b24:	440b      	add	r3, r1
 8005b26:	339c      	adds	r3, #156	; 0x9c
 8005b28:	601a      	str	r2, [r3, #0]
        break;
 8005b2a:	e0d1      	b.n	8005cd0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	440b      	add	r3, r1
 8005b3a:	33a4      	adds	r3, #164	; 0xa4
 8005b3c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d03f      	beq.n	8005bc6 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	4413      	add	r3, r2
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	6811      	ldr	r1, [r2, #0]
 8005b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	440b      	add	r3, r1
 8005b64:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	01db      	lsls	r3, r3, #7
 8005b70:	4413      	add	r3, r2
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	68f9      	ldr	r1, [r7, #12]
 8005b7a:	6809      	ldr	r1, [r1, #0]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	3301      	adds	r3, #1
 8005b82:	01db      	lsls	r3, r3, #7
 8005b84:	440b      	add	r3, r1
 8005b86:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d109      	bne.n	8005ba6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	01db      	lsls	r3, r3, #7
 8005b9e:	440b      	add	r3, r1
 8005ba0:	339c      	adds	r3, #156	; 0x9c
 8005ba2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005ba4:	e091      	b.n	8005cca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bae:	f040 808c 	bne.w	8005cca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	01db      	lsls	r3, r3, #7
 8005bbe:	440b      	add	r3, r1
 8005bc0:	33a8      	adds	r3, #168	; 0xa8
 8005bc2:	601a      	str	r2, [r3, #0]
         break;
 8005bc4:	e081      	b.n	8005cca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	01db      	lsls	r3, r3, #7
 8005bd0:	4413      	add	r3, r2
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	6811      	ldr	r1, [r2, #0]
 8005bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3301      	adds	r3, #1
 8005be0:	01db      	lsls	r3, r3, #7
 8005be2:	440b      	add	r3, r1
 8005be4:	601a      	str	r2, [r3, #0]
         break;
 8005be6:	e070      	b.n	8005cca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6819      	ldr	r1, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	440b      	add	r3, r1
 8005bf6:	33a8      	adds	r3, #168	; 0xa8
 8005bf8:	601a      	str	r2, [r3, #0]
        break;
 8005bfa:	e069      	b.n	8005cd0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	01db      	lsls	r3, r3, #7
 8005c08:	440b      	add	r3, r1
 8005c0a:	33ac      	adds	r3, #172	; 0xac
 8005c0c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03f      	beq.n	8005c96 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	4413      	add	r3, r2
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	6811      	ldr	r1, [r2, #0]
 8005c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	01db      	lsls	r3, r3, #7
 8005c32:	440b      	add	r3, r1
 8005c34:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	4413      	add	r3, r2
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	6809      	ldr	r1, [r1, #0]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	3301      	adds	r3, #1
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	440b      	add	r3, r1
 8005c58:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d109      	bne.n	8005c78 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	01db      	lsls	r3, r3, #7
 8005c70:	440b      	add	r3, r1
 8005c72:	339c      	adds	r3, #156	; 0x9c
 8005c74:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005c76:	e02a      	b.n	8005cce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c80:	d125      	bne.n	8005cce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6819      	ldr	r1, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	440b      	add	r3, r1
 8005c90:	33a8      	adds	r3, #168	; 0xa8
 8005c92:	601a      	str	r2, [r3, #0]
         break;
 8005c94:	e01b      	b.n	8005cce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	01db      	lsls	r3, r3, #7
 8005ca0:	4413      	add	r3, r2
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6811      	ldr	r1, [r2, #0]
 8005ca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	01db      	lsls	r3, r3, #7
 8005cb2:	440b      	add	r3, r1
 8005cb4:	601a      	str	r2, [r3, #0]
         break;
 8005cb6:	e00a      	b.n	8005cce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2207      	movs	r2, #7
 8005cbc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8005cc8:	e002      	b.n	8005cd0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005cce:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b07      	cmp	r3, #7
 8005cda:	d101      	bne.n	8005ce0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e008      	b.n	8005cf2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop

08005d00 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d101      	bne.n	8005d1e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e01d      	b.n	8005d5a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e016      	b.n	8005d5a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fd46 	bl	80067d4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d101      	bne.n	8005d82 <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0df      	b.n	8005f42 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e0d8      	b.n	8005f42 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da6:	f000 808d 	beq.w	8005ec4 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	f200 80ad 	bhi.w	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d05e      	beq.n	8005e7a <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	f200 80a4 	bhi.w	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d07b      	beq.n	8005ec4 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	f200 809d 	bhi.w	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d84c      	bhi.n	8005e74 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8096 	beq.w	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	2b1f      	cmp	r3, #31
 8005de8:	f200 8091 	bhi.w	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e7b 	.word	0x08005e7b
 8005df8:	08005ec5 	.word	0x08005ec5
 8005dfc:	08005f0f 	.word	0x08005f0f
 8005e00:	08005e7b 	.word	0x08005e7b
 8005e04:	08005f0f 	.word	0x08005f0f
 8005e08:	08005f0f 	.word	0x08005f0f
 8005e0c:	08005f0f 	.word	0x08005f0f
 8005e10:	08005ec5 	.word	0x08005ec5
 8005e14:	08005f0f 	.word	0x08005f0f
 8005e18:	08005f0f 	.word	0x08005f0f
 8005e1c:	08005f0f 	.word	0x08005f0f
 8005e20:	08005f0f 	.word	0x08005f0f
 8005e24:	08005f0f 	.word	0x08005f0f
 8005e28:	08005f0f 	.word	0x08005f0f
 8005e2c:	08005f0f 	.word	0x08005f0f
 8005e30:	08005e7b 	.word	0x08005e7b
 8005e34:	08005f0f 	.word	0x08005f0f
 8005e38:	08005f0f 	.word	0x08005f0f
 8005e3c:	08005f0f 	.word	0x08005f0f
 8005e40:	08005f0f 	.word	0x08005f0f
 8005e44:	08005f0f 	.word	0x08005f0f
 8005e48:	08005f0f 	.word	0x08005f0f
 8005e4c:	08005f0f 	.word	0x08005f0f
 8005e50:	08005f0f 	.word	0x08005f0f
 8005e54:	08005f0f 	.word	0x08005f0f
 8005e58:	08005f0f 	.word	0x08005f0f
 8005e5c:	08005f0f 	.word	0x08005f0f
 8005e60:	08005f0f 	.word	0x08005f0f
 8005e64:	08005f0f 	.word	0x08005f0f
 8005e68:	08005f0f 	.word	0x08005f0f
 8005e6c:	08005f0f 	.word	0x08005f0f
 8005e70:	08005ec5 	.word	0x08005ec5
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d149      	bne.n	8005f0e <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d110      	bne.n	8005ea2 <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	01db      	lsls	r3, r3, #7
 8005e88:	4413      	add	r3, r2
 8005e8a:	33bc      	adds	r3, #188	; 0xbc
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	6811      	ldr	r1, [r2, #0]
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	01db      	lsls	r3, r3, #7
 8005e9a:	440b      	add	r3, r1
 8005e9c:	33bc      	adds	r3, #188	; 0xbc
 8005e9e:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 8005ea0:	e03e      	b.n	8005f20 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	33c0      	adds	r3, #192	; 0xc0
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	f043 0201 	orr.w	r2, r3, #1
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	01db      	lsls	r3, r3, #7
 8005ebc:	440b      	add	r3, r1
 8005ebe:	33c0      	adds	r3, #192	; 0xc0
 8005ec0:	601a      	str	r2, [r3, #0]
      break;
 8005ec2:	e02d      	b.n	8005f20 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d110      	bne.n	8005eec <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	33c4      	adds	r3, #196	; 0xc4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	6811      	ldr	r1, [r2, #0]
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	01db      	lsls	r3, r3, #7
 8005ee4:	440b      	add	r3, r1
 8005ee6:	33c4      	adds	r3, #196	; 0xc4
 8005ee8:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 8005eea:	e019      	b.n	8005f20 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	01db      	lsls	r3, r3, #7
 8005ef4:	4413      	add	r3, r2
 8005ef6:	33c8      	adds	r3, #200	; 0xc8
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	6811      	ldr	r1, [r2, #0]
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	01db      	lsls	r3, r3, #7
 8005f06:	440b      	add	r3, r1
 8005f08:	33c8      	adds	r3, #200	; 0xc8
 8005f0a:	601a      	str	r2, [r3, #0]
      break;
 8005f0c:	e008      	b.n	8005f20 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2207      	movs	r2, #7
 8005f12:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8005f1e:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d101      	bne.n	8005f30 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e008      	b.n	8005f42 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop

08005f50 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e01a      	b.n	8005f9e <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_HRTIM_WaveformOutputStop+0x18>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e01a      	b.n	8005ff8 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e05b      	b.n	80060d4 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68d9      	ldr	r1, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	e022      	b.n	80060ac <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 800606a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d017      	beq.n	80060a6 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	01db      	lsls	r3, r3, #7
 800607e:	4413      	add	r3, r2
 8006080:	338c      	adds	r3, #140	; 0x8c
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3320      	adds	r3, #32
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6819      	ldr	r1, [r3, #0]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4302      	orrs	r2, r0
 800609e:	01db      	lsls	r3, r3, #7
 80060a0:	440b      	add	r3, r1
 80060a2:	338c      	adds	r3, #140	; 0x8c
 80060a4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	3301      	adds	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d9d9      	bls.n	8006066 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80060d2:	2300      	movs	r3, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000024 	.word	0x20000024

080060e4 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80060ee:	f240 137f 	movw	r3, #383	; 0x17f
 80060f2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80060fe:	2302      	movs	r3, #2
 8006100:	e065      	b.n	80061ce <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	43da      	mvns	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	400a      	ands	r2, r1
 8006126:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006140:	43da      	mvns	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	400a      	ands	r2, r1
 8006148:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e023      	b.n	8006198 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4a22      	ldr	r2, [pc, #136]	; (80061dc <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8006154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	338c      	adds	r3, #140	; 0x8c
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3320      	adds	r3, #32
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	43da      	mvns	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	4002      	ands	r2, r0
 800618a:	01db      	lsls	r3, r3, #7
 800618c:	440b      	add	r3, r1
 800618e:	338c      	adds	r3, #140	; 0x8c
 8006190:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	3301      	adds	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b04      	cmp	r3, #4
 800619c:	d9d8      	bls.n	8006150 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f9      	bne.n	800619e <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	43da      	mvns	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	400a      	ands	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000024 	.word	0x20000024

080061e0 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2bff      	cmp	r3, #255	; 0xff
 80061ee:	d103      	bne.n	80061f8 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc4f 	bl	8006a94 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80061f6:	e00a      	b.n	800620e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	d103      	bne.n	8006206 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fcc6 	bl	8006b90 <HRTIM_Master_ISR>
}
 8006204:	e003      	b.n	800620e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fd6b 	bl	8006ce4 <HRTIM_Timer_ISR>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f023 0307 	bic.w	r3, r3, #7
 80063c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0318 	bic.w	r3, r3, #24
 80063d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	6852      	ldr	r2, [r2, #4]
 80063f8:	619a      	str	r2, [r3, #24]
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0318 	bic.w	r3, r3, #24
 800643a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3301      	adds	r3, #1
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	4413      	add	r3, r2
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	440b      	add	r3, r1
 8006464:	3394      	adds	r3, #148	; 0x94
 8006466:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6819      	ldr	r1, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	440b      	add	r3, r1
 8006476:	3398      	adds	r3, #152	; 0x98
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80064a0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0320 	bic.w	r3, r3, #32
 80064a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ba:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80064f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006502:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006516:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006528:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4313      	orrs	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006554:	b480      	push	{r7}
 8006556:	b08b      	sub	sp, #44	; 0x2c
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3301      	adds	r3, #1
 8006568:	01db      	lsls	r3, r3, #7
 800656a:	4413      	add	r3, r2
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6811      	ldr	r1, [r2, #0]
 8006572:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3301      	adds	r3, #1
 800657a:	01db      	lsls	r3, r3, #7
 800657c:	440b      	add	r3, r1
 800657e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3301      	adds	r3, #1
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	4413      	add	r3, r2
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	4413      	add	r3, r2
 800659a:	33e8      	adds	r3, #232	; 0xe8
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	01db      	lsls	r3, r3, #7
 80065a8:	4413      	add	r3, r2
 80065aa:	33e4      	adds	r3, #228	; 0xe4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80065b8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	f023 0320 	bic.w	r3, r3, #32
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c8:	4313      	orrs	r3, r2
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065da:	4313      	orrs	r3, r2
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ec:	4313      	orrs	r3, r2
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fe:	4313      	orrs	r3, r2
 8006600:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	4313      	orrs	r3, r2
 8006612:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	4313      	orrs	r3, r2
 8006624:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006636:	d103      	bne.n	8006640 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	4313      	orrs	r3, r2
 8006650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006660:	4313      	orrs	r3, r2
 8006662:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	4313      	orrs	r3, r2
 8006674:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f023 031f 	bic.w	r3, r3, #31
 800667c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006692:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	4313      	orrs	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ac:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80066c0:	d004      	beq.n	80066cc <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80066ca:	d103      	bne.n	80066d4 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d108      	bne.n	80066e6 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80066da:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	6a3a      	ldr	r2, [r7, #32]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d843      	bhi.n	800677a <HRTIM_TimingUnitWaveform_Config+0x226>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	0800670d 	.word	0x0800670d
 80066fc:	08006723 	.word	0x08006723
 8006700:	08006739 	.word	0x08006739
 8006704:	0800674f 	.word	0x0800674f
 8006708:	08006765 	.word	0x08006765
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006712:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	4313      	orrs	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]
      break;
 8006720:	e02c      	b.n	800677c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006728:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	4313      	orrs	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
      break;
 8006736:	e021      	b.n	800677c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800673e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	4313      	orrs	r3, r2
 800674a:	61fb      	str	r3, [r7, #28]
      break;
 800674c:	e016      	b.n	800677c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006754:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	4313      	orrs	r3, r2
 8006760:	61fb      	str	r3, [r7, #28]
      break;
 8006762:	e00b      	b.n	800677c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	015b      	lsls	r3, r3, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	4313      	orrs	r3, r2
 8006776:	61fb      	str	r3, [r7, #28]
      break;
 8006778:	e000      	b.n	800677c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800677a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3301      	adds	r3, #1
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	4413      	add	r3, r2
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	01db      	lsls	r3, r3, #7
 8006794:	4413      	add	r3, r2
 8006796:	33e8      	adds	r3, #232	; 0xe8
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	4413      	add	r3, r2
 80067a6:	33e4      	adds	r3, #228	; 0xe4
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	4413      	add	r3, r2
 80067b6:	33d4      	adds	r3, #212	; 0xd4
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80067c6:	bf00      	nop
 80067c8:	372c      	adds	r7, #44	; 0x2c
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop

080067d4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b089      	sub	sp, #36	; 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	01db      	lsls	r3, r3, #7
 80067ee:	4413      	add	r3, r2
 80067f0:	33e4      	adds	r3, #228	; 0xe4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	01db      	lsls	r3, r3, #7
 80067fe:	4413      	add	r3, r2
 8006800:	33b8      	adds	r3, #184	; 0xb8
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680c:	d076      	beq.n	80068fc <HRTIM_OutputConfig+0x128>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006814:	f200 8087 	bhi.w	8006926 <HRTIM_OutputConfig+0x152>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d05a      	beq.n	80068d6 <HRTIM_OutputConfig+0x102>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d87e      	bhi.n	8006926 <HRTIM_OutputConfig+0x152>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d066      	beq.n	80068fc <HRTIM_OutputConfig+0x128>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d878      	bhi.n	8006926 <HRTIM_OutputConfig+0x152>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b20      	cmp	r3, #32
 8006838:	d84a      	bhi.n	80068d0 <HRTIM_OutputConfig+0xfc>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d072      	beq.n	8006926 <HRTIM_OutputConfig+0x152>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3b01      	subs	r3, #1
 8006844:	2b1f      	cmp	r3, #31
 8006846:	d86e      	bhi.n	8006926 <HRTIM_OutputConfig+0x152>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <HRTIM_OutputConfig+0x7c>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	080068d7 	.word	0x080068d7
 8006854:	080068fd 	.word	0x080068fd
 8006858:	08006927 	.word	0x08006927
 800685c:	080068d7 	.word	0x080068d7
 8006860:	08006927 	.word	0x08006927
 8006864:	08006927 	.word	0x08006927
 8006868:	08006927 	.word	0x08006927
 800686c:	080068fd 	.word	0x080068fd
 8006870:	08006927 	.word	0x08006927
 8006874:	08006927 	.word	0x08006927
 8006878:	08006927 	.word	0x08006927
 800687c:	08006927 	.word	0x08006927
 8006880:	08006927 	.word	0x08006927
 8006884:	08006927 	.word	0x08006927
 8006888:	08006927 	.word	0x08006927
 800688c:	080068d7 	.word	0x080068d7
 8006890:	08006927 	.word	0x08006927
 8006894:	08006927 	.word	0x08006927
 8006898:	08006927 	.word	0x08006927
 800689c:	08006927 	.word	0x08006927
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006927 	.word	0x08006927
 80068a8:	08006927 	.word	0x08006927
 80068ac:	08006927 	.word	0x08006927
 80068b0:	08006927 	.word	0x08006927
 80068b4:	08006927 	.word	0x08006927
 80068b8:	08006927 	.word	0x08006927
 80068bc:	08006927 	.word	0x08006927
 80068c0:	08006927 	.word	0x08006927
 80068c4:	08006927 	.word	0x08006927
 80068c8:	08006927 	.word	0x08006927
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d127      	bne.n	8006926 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6819      	ldr	r1, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	01db      	lsls	r3, r3, #7
 80068e2:	440b      	add	r3, r1
 80068e4:	33bc      	adds	r3, #188	; 0xbc
 80068e6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6819      	ldr	r1, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	01db      	lsls	r3, r3, #7
 80068f4:	440b      	add	r3, r1
 80068f6:	33c0      	adds	r3, #192	; 0xc0
 80068f8:	601a      	str	r2, [r3, #0]
      break;
 80068fa:	e015      	b.n	8006928 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	440b      	add	r3, r1
 800690a:	33c4      	adds	r3, #196	; 0xc4
 800690c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	01db      	lsls	r3, r3, #7
 800691a:	440b      	add	r3, r1
 800691c:	33c8      	adds	r3, #200	; 0xc8
 800691e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006920:	2310      	movs	r3, #16
 8006922:	61bb      	str	r3, [r7, #24]
      break;
 8006924:	e000      	b.n	8006928 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8006926:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006928:	22fe      	movs	r2, #254	; 0xfe
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006930:	43db      	mvns	r3, r3
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	4013      	ands	r3, r2
 8006936:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	4313      	orrs	r3, r2
 8006946:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	4313      	orrs	r3, r2
 8006956:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	4313      	orrs	r3, r2
 8006966:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695a      	ldr	r2, [r3, #20]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	4313      	orrs	r3, r2
 8006986:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d111      	bne.n	80069b4 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10c      	bne.n	80069b4 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	4413      	add	r3, r2
 80069be:	33e4      	adds	r3, #228	; 0xe4
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	3724      	adds	r7, #36	; 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d851      	bhi.n	8006a84 <HRTIM_ForceRegistersUpdate+0xb4>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HRTIM_ForceRegistersUpdate+0x18>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a43 	.word	0x08006a43
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a6f 	.word	0x08006a6f
 80069fc:	08006a01 	.word	0x08006a01
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a14:	e037      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0202 	orr.w	r2, r2, #2
 8006a26:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a2a:	e02c      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0204 	orr.w	r2, r2, #4
 8006a3c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a40:	e021      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a56:	e016      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0210 	orr.w	r2, r2, #16
 8006a68:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a6c:	e00b      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0220 	orr.w	r2, r2, #32
 8006a7e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a82:	e000      	b.n	8006a86 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006a84:	bf00      	nop
  }
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00c      	beq.n	8006ad4 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fba1 	bl	8006216 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fb99 	bl	800622a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2204      	movs	r2, #4
 8006b12:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fb91 	bl	800623e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fb89 	bl	8006252 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2210      	movs	r2, #16
 8006b5a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fb81 	bl	8006266 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fb79 	bl	800627a <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006ba0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006baa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00d      	beq.n	8006be2 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bd8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff fb56 	bl	800628e <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006bfe:	2105      	movs	r1, #5
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fb63 	bl	80062cc <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006c22:	2105      	movs	r1, #5
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fa f99d 	bl	8000f64 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00c      	beq.n	8006c4e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2204      	movs	r2, #4
 8006c44:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006c46:	2105      	movs	r1, #5
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fa f9b7 	bl	8000fbc <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2208      	movs	r2, #8
 8006c68:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006c6a:	2105      	movs	r1, #5
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fb38 	bl	80062e2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006c8e:	2105      	movs	r1, #5
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fa fa1f 	bl	80010d4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d006      	beq.n	8006cb8 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff faf5 	bl	80062a2 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2240      	movs	r2, #64	; 0x40
 8006cd2:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006cd4:	2105      	movs	r1, #5
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff faed 	bl	80062b6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	01db      	lsls	r3, r3, #7
 8006d08:	4413      	add	r3, r2
 8006d0a:	338c      	adds	r3, #140	; 0x8c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	01db      	lsls	r3, r3, #7
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3388      	adds	r3, #136	; 0x88
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fac8 	bl	80062cc <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d010      	beq.n	8006d68 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	4413      	add	r3, r2
 8006d5a:	3388      	adds	r3, #136	; 0x88
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fa f8fe 	bl	8000f64 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	01db      	lsls	r3, r3, #7
 8006d84:	4413      	add	r3, r2
 8006d86:	3388      	adds	r3, #136	; 0x88
 8006d88:	2204      	movs	r2, #4
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fa f914 	bl	8000fbc <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	01db      	lsls	r3, r3, #7
 8006db0:	4413      	add	r3, r2
 8006db2:	3388      	adds	r3, #136	; 0x88
 8006db4:	2208      	movs	r2, #8
 8006db6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fa91 	bl	80062e2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0310 	and.w	r3, r3, #16
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	01db      	lsls	r3, r3, #7
 8006ddc:	4413      	add	r3, r2
 8006dde:	3388      	adds	r3, #136	; 0x88
 8006de0:	2210      	movs	r2, #16
 8006de2:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fa f974 	bl	80010d4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d010      	beq.n	8006e18 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	4413      	add	r3, r2
 8006e0a:	3388      	adds	r3, #136	; 0x88
 8006e0c:	2240      	movs	r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fa4f 	bl	80062b6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3388      	adds	r3, #136	; 0x88
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fa5a 	bl	80062f8 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d011      	beq.n	8006e72 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	01db      	lsls	r3, r3, #7
 8006e60:	4413      	add	r3, r2
 8006e62:	3388      	adds	r3, #136	; 0x88
 8006e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e68:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fa4e 	bl	800630e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	01db      	lsls	r3, r3, #7
 8006e8e:	4413      	add	r3, r2
 8006e90:	3388      	adds	r3, #136	; 0x88
 8006e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e96:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fa58 	bl	8006350 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d011      	beq.n	8006ece <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	01db      	lsls	r3, r3, #7
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3388      	adds	r3, #136	; 0x88
 8006ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ec4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff fa4c 	bl	8006366 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	01db      	lsls	r3, r3, #7
 8006eea:	4413      	add	r3, r2
 8006eec:	3388      	adds	r3, #136	; 0x88
 8006eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef2:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fa40 	bl	800637c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d011      	beq.n	8006f2a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	01db      	lsls	r3, r3, #7
 8006f18:	4413      	add	r3, r2
 8006f1a:	3388      	adds	r3, #136	; 0x88
 8006f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f20:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff fa34 	bl	8006392 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d011      	beq.n	8006f58 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	01db      	lsls	r3, r3, #7
 8006f46:	4413      	add	r3, r2
 8006f48:	3388      	adds	r3, #136	; 0x88
 8006f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f4e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f9f1 	bl	800633a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d011      	beq.n	8006f86 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00c      	beq.n	8006f86 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	01db      	lsls	r3, r3, #7
 8006f74:	4413      	add	r3, r2
 8006f76:	3388      	adds	r3, #136	; 0x88
 8006f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f7c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff f9cf 	bl	8006324 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e097      	b.n	80070d2 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fb f9af 	bl	8002320 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d004      	beq.n	8006fe4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fe2:	d103      	bne.n	8006fec <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 031e 	bic.w	r3, r3, #30
 8006fea:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4b38      	ldr	r3, [pc, #224]	; (80070dc <HAL_LPTIM_Init+0x14c>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <HAL_LPTIM_Init+0x150>)
 8007004:	4013      	ands	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007010:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007016:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800701c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007022:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800703a:	4313      	orrs	r3, r2
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d004      	beq.n	8007054 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007052:	d107      	bne.n	8007064 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800705c:	4313      	orrs	r3, r2
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800706c:	4293      	cmp	r3, r2
 800706e:	d00a      	beq.n	8007086 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007078:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800707e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <HAL_LPTIM_Init+0x154>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_LPTIM_Init+0x112>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <HAL_LPTIM_Init+0x158>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d108      	bne.n	80070b4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24
 80070b2:	e009      	b.n	80070c8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <HAL_LPTIM_Init+0x15c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d104      	bne.n	80070c8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	ffff1f3f 	.word	0xffff1f3f
 80070e0:	ff19f1fe 	.word	0xff19f1fe
 80070e4:	40002400 	.word	0x40002400
 80070e8:	58002400 	.word	0x58002400
 80070ec:	58002800 	.word	0x58002800

080070f0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d00c      	beq.n	8007124 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007112:	d107      	bne.n	8007124 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8007122:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2210      	movs	r2, #16
 800713a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007144:	2110      	movs	r1, #16
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f91e 	bl	8007388 <LPTIM_WaitForFlag>
 800714c:	4603      	mov	r3, r0
 800714e:	2b03      	cmp	r3, #3
 8007150:	d101      	bne.n	8007156 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e02f      	b.n	80071b6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f946 	bl	80073e8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f905 	bl	800736c <HAL_LPTIM_GetState>
 8007162:	4603      	mov	r3, r0
 8007164:	2b03      	cmp	r3, #3
 8007166:	d101      	bne.n	800716c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e024      	b.n	80071b6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0210 	orr.w	r2, r2, #16
 800717a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0202 	orr.w	r2, r2, #2
 800718a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0204 	orr.w	r2, r2, #4
 80071aa:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10d      	bne.n	80071f0 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d106      	bne.n	80071f0 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2201      	movs	r2, #1
 80071e8:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f882 	bl	80072f4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d10d      	bne.n	800721a <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b02      	cmp	r3, #2
 800720a:	d106      	bne.n	800721a <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2202      	movs	r2, #2
 8007212:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7f9 fe97 	bl	8000f48 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d10d      	bne.n	8007244 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b04      	cmp	r3, #4
 8007234:	d106      	bne.n	8007244 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2204      	movs	r2, #4
 800723c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f862 	bl	8007308 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d10d      	bne.n	800726e <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d106      	bne.n	800726e <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2208      	movs	r2, #8
 8007266:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f857 	bl	800731c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d10d      	bne.n	8007298 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d106      	bne.n	8007298 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2210      	movs	r2, #16
 8007290:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f84c 	bl	8007330 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d10d      	bne.n	80072c2 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d106      	bne.n	80072c2 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2220      	movs	r2, #32
 80072ba:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f841 	bl	8007344 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d10d      	bne.n	80072ec <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d106      	bne.n	80072ec <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2240      	movs	r2, #64	; 0x40
 80072e4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f836 	bl	8007358 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800737a:	b2db      	uxtb	r3, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <LPTIM_WaitForFlag+0x58>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <LPTIM_WaitForFlag+0x5c>)
 800739c:	fba2 2303 	umull	r2, r3, r2, r3
 80073a0:	0b9b      	lsrs	r3, r3, #14
 80073a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4013      	ands	r3, r2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d002      	beq.n	80073d2 <LPTIM_WaitForFlag+0x4a>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1ec      	bne.n	80073ac <LPTIM_WaitForFlag+0x24>

  return result;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20000014 	.word	0x20000014
 80073e4:	d1b71759 	.word	0xd1b71759

080073e8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08c      	sub	sp, #48	; 0x30
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f4:	f3ef 8310 	mrs	r3, PRIMASK
 80073f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80073fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	2301      	movs	r3, #1
 8007400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f383 8810 	msr	PRIMASK, r3
}
 8007408:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a81      	ldr	r2, [pc, #516]	; (8007614 <LPTIM_Disable+0x22c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02d      	beq.n	8007470 <LPTIM_Disable+0x88>
 8007414:	4a7f      	ldr	r2, [pc, #508]	; (8007614 <LPTIM_Disable+0x22c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d830      	bhi.n	800747c <LPTIM_Disable+0x94>
 800741a:	4a7f      	ldr	r2, [pc, #508]	; (8007618 <LPTIM_Disable+0x230>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d021      	beq.n	8007464 <LPTIM_Disable+0x7c>
 8007420:	4a7d      	ldr	r2, [pc, #500]	; (8007618 <LPTIM_Disable+0x230>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d82a      	bhi.n	800747c <LPTIM_Disable+0x94>
 8007426:	4a7d      	ldr	r2, [pc, #500]	; (800761c <LPTIM_Disable+0x234>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d015      	beq.n	8007458 <LPTIM_Disable+0x70>
 800742c:	4a7b      	ldr	r2, [pc, #492]	; (800761c <LPTIM_Disable+0x234>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d824      	bhi.n	800747c <LPTIM_Disable+0x94>
 8007432:	4a7b      	ldr	r2, [pc, #492]	; (8007620 <LPTIM_Disable+0x238>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <LPTIM_Disable+0x58>
 8007438:	4a7a      	ldr	r2, [pc, #488]	; (8007624 <LPTIM_Disable+0x23c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d006      	beq.n	800744c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800743e:	e01d      	b.n	800747c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007440:	4b79      	ldr	r3, [pc, #484]	; (8007628 <LPTIM_Disable+0x240>)
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800744a:	e018      	b.n	800747e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800744c:	4b76      	ldr	r3, [pc, #472]	; (8007628 <LPTIM_Disable+0x240>)
 800744e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007450:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007456:	e012      	b.n	800747e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007458:	4b73      	ldr	r3, [pc, #460]	; (8007628 <LPTIM_Disable+0x240>)
 800745a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007462:	e00c      	b.n	800747e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007464:	4b70      	ldr	r3, [pc, #448]	; (8007628 <LPTIM_Disable+0x240>)
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800746e:	e006      	b.n	800747e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007470:	4b6d      	ldr	r3, [pc, #436]	; (8007628 <LPTIM_Disable+0x240>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800747a:	e000      	b.n	800747e <LPTIM_Disable+0x96>
      break;
 800747c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a5a      	ldr	r2, [pc, #360]	; (8007614 <LPTIM_Disable+0x22c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d059      	beq.n	8007564 <LPTIM_Disable+0x17c>
 80074b0:	4a58      	ldr	r2, [pc, #352]	; (8007614 <LPTIM_Disable+0x22c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d867      	bhi.n	8007586 <LPTIM_Disable+0x19e>
 80074b6:	4a58      	ldr	r2, [pc, #352]	; (8007618 <LPTIM_Disable+0x230>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d042      	beq.n	8007542 <LPTIM_Disable+0x15a>
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <LPTIM_Disable+0x230>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d861      	bhi.n	8007586 <LPTIM_Disable+0x19e>
 80074c2:	4a56      	ldr	r2, [pc, #344]	; (800761c <LPTIM_Disable+0x234>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d02b      	beq.n	8007520 <LPTIM_Disable+0x138>
 80074c8:	4a54      	ldr	r2, [pc, #336]	; (800761c <LPTIM_Disable+0x234>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d85b      	bhi.n	8007586 <LPTIM_Disable+0x19e>
 80074ce:	4a54      	ldr	r2, [pc, #336]	; (8007620 <LPTIM_Disable+0x238>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <LPTIM_Disable+0xf4>
 80074d4:	4a53      	ldr	r2, [pc, #332]	; (8007624 <LPTIM_Disable+0x23c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d011      	beq.n	80074fe <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80074da:	e054      	b.n	8007586 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80074dc:	4b52      	ldr	r3, [pc, #328]	; (8007628 <LPTIM_Disable+0x240>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a51      	ldr	r2, [pc, #324]	; (8007628 <LPTIM_Disable+0x240>)
 80074e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80074ec:	4b4e      	ldr	r3, [pc, #312]	; (8007628 <LPTIM_Disable+0x240>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	4a4d      	ldr	r2, [pc, #308]	; (8007628 <LPTIM_Disable+0x240>)
 80074f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80074fc:	e044      	b.n	8007588 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80074fe:	4b4a      	ldr	r3, [pc, #296]	; (8007628 <LPTIM_Disable+0x240>)
 8007500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007504:	4a48      	ldr	r2, [pc, #288]	; (8007628 <LPTIM_Disable+0x240>)
 8007506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800750a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800750e:	4b46      	ldr	r3, [pc, #280]	; (8007628 <LPTIM_Disable+0x240>)
 8007510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007514:	4a44      	ldr	r2, [pc, #272]	; (8007628 <LPTIM_Disable+0x240>)
 8007516:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800751a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800751e:	e033      	b.n	8007588 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8007520:	4b41      	ldr	r3, [pc, #260]	; (8007628 <LPTIM_Disable+0x240>)
 8007522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007526:	4a40      	ldr	r2, [pc, #256]	; (8007628 <LPTIM_Disable+0x240>)
 8007528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800752c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8007530:	4b3d      	ldr	r3, [pc, #244]	; (8007628 <LPTIM_Disable+0x240>)
 8007532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007536:	4a3c      	ldr	r2, [pc, #240]	; (8007628 <LPTIM_Disable+0x240>)
 8007538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800753c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007540:	e022      	b.n	8007588 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8007542:	4b39      	ldr	r3, [pc, #228]	; (8007628 <LPTIM_Disable+0x240>)
 8007544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007548:	4a37      	ldr	r2, [pc, #220]	; (8007628 <LPTIM_Disable+0x240>)
 800754a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800754e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8007552:	4b35      	ldr	r3, [pc, #212]	; (8007628 <LPTIM_Disable+0x240>)
 8007554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007558:	4a33      	ldr	r2, [pc, #204]	; (8007628 <LPTIM_Disable+0x240>)
 800755a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007562:	e011      	b.n	8007588 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8007564:	4b30      	ldr	r3, [pc, #192]	; (8007628 <LPTIM_Disable+0x240>)
 8007566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800756a:	4a2f      	ldr	r2, [pc, #188]	; (8007628 <LPTIM_Disable+0x240>)
 800756c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007570:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <LPTIM_Disable+0x240>)
 8007576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <LPTIM_Disable+0x240>)
 800757c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007580:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007584:	e000      	b.n	8007588 <LPTIM_Disable+0x1a0>
      break;
 8007586:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <LPTIM_Disable+0x1ae>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80d0 	beq.w	8007736 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <LPTIM_Disable+0x22c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d031      	beq.n	8007604 <LPTIM_Disable+0x21c>
 80075a0:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <LPTIM_Disable+0x22c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d842      	bhi.n	800762c <LPTIM_Disable+0x244>
 80075a6:	4a1c      	ldr	r2, [pc, #112]	; (8007618 <LPTIM_Disable+0x230>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d024      	beq.n	80075f6 <LPTIM_Disable+0x20e>
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <LPTIM_Disable+0x230>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d83c      	bhi.n	800762c <LPTIM_Disable+0x244>
 80075b2:	4a1a      	ldr	r2, [pc, #104]	; (800761c <LPTIM_Disable+0x234>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d017      	beq.n	80075e8 <LPTIM_Disable+0x200>
 80075b8:	4a18      	ldr	r2, [pc, #96]	; (800761c <LPTIM_Disable+0x234>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d836      	bhi.n	800762c <LPTIM_Disable+0x244>
 80075be:	4a18      	ldr	r2, [pc, #96]	; (8007620 <LPTIM_Disable+0x238>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <LPTIM_Disable+0x1e4>
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <LPTIM_Disable+0x23c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80075ca:	e02f      	b.n	800762c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80075cc:	4b16      	ldr	r3, [pc, #88]	; (8007628 <LPTIM_Disable+0x240>)
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	4a15      	ldr	r2, [pc, #84]	; (8007628 <LPTIM_Disable+0x240>)
 80075d2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80075d6:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80075d8:	e029      	b.n	800762e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <LPTIM_Disable+0x240>)
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <LPTIM_Disable+0x240>)
 80075e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80075e4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80075e6:	e022      	b.n	800762e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <LPTIM_Disable+0x240>)
 80075ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ec:	4a0e      	ldr	r2, [pc, #56]	; (8007628 <LPTIM_Disable+0x240>)
 80075ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80075f2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80075f4:	e01b      	b.n	800762e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <LPTIM_Disable+0x240>)
 80075f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fa:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <LPTIM_Disable+0x240>)
 80075fc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007600:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007602:	e014      	b.n	800762e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8007604:	4b08      	ldr	r3, [pc, #32]	; (8007628 <LPTIM_Disable+0x240>)
 8007606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007608:	4a07      	ldr	r2, [pc, #28]	; (8007628 <LPTIM_Disable+0x240>)
 800760a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800760e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007610:	e00d      	b.n	800762e <LPTIM_Disable+0x246>
 8007612:	bf00      	nop
 8007614:	58003000 	.word	0x58003000
 8007618:	58002c00 	.word	0x58002c00
 800761c:	58002800 	.word	0x58002800
 8007620:	40002400 	.word	0x40002400
 8007624:	58002400 	.word	0x58002400
 8007628:	58024400 	.word	0x58024400
        break;
 800762c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800764c:	2108      	movs	r1, #8
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fe9a 	bl	8007388 <LPTIM_WaitForFlag>
 8007654:	4603      	mov	r3, r0
 8007656:	2b03      	cmp	r3, #3
 8007658:	d103      	bne.n	8007662 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2203      	movs	r2, #3
 800765e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2208      	movs	r2, #8
 8007668:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01a      	beq.n	80076a6 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007688:	2110      	movs	r1, #16
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fe7c 	bl	8007388 <LPTIM_WaitForFlag>
 8007690:	4603      	mov	r3, r0
 8007692:	2b03      	cmp	r3, #3
 8007694:	d103      	bne.n	800769e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2203      	movs	r2, #3
 800769a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2210      	movs	r2, #16
 80076a4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a33      	ldr	r2, [pc, #204]	; (8007778 <LPTIM_Disable+0x390>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d039      	beq.n	8007724 <LPTIM_Disable+0x33c>
 80076b0:	4a31      	ldr	r2, [pc, #196]	; (8007778 <LPTIM_Disable+0x390>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d841      	bhi.n	800773a <LPTIM_Disable+0x352>
 80076b6:	4a31      	ldr	r2, [pc, #196]	; (800777c <LPTIM_Disable+0x394>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d02a      	beq.n	8007712 <LPTIM_Disable+0x32a>
 80076bc:	4a2f      	ldr	r2, [pc, #188]	; (800777c <LPTIM_Disable+0x394>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d83b      	bhi.n	800773a <LPTIM_Disable+0x352>
 80076c2:	4a2f      	ldr	r2, [pc, #188]	; (8007780 <LPTIM_Disable+0x398>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d01b      	beq.n	8007700 <LPTIM_Disable+0x318>
 80076c8:	4a2d      	ldr	r2, [pc, #180]	; (8007780 <LPTIM_Disable+0x398>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d835      	bhi.n	800773a <LPTIM_Disable+0x352>
 80076ce:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <LPTIM_Disable+0x39c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <LPTIM_Disable+0x2f4>
 80076d4:	4a2c      	ldr	r2, [pc, #176]	; (8007788 <LPTIM_Disable+0x3a0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80076da:	e02e      	b.n	800773a <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80076dc:	4b2b      	ldr	r3, [pc, #172]	; (800778c <LPTIM_Disable+0x3a4>)
 80076de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076e4:	4929      	ldr	r1, [pc, #164]	; (800778c <LPTIM_Disable+0x3a4>)
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	4313      	orrs	r3, r2
 80076ea:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 80076ec:	e026      	b.n	800773c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80076ee:	4b27      	ldr	r3, [pc, #156]	; (800778c <LPTIM_Disable+0x3a4>)
 80076f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076f6:	4925      	ldr	r1, [pc, #148]	; (800778c <LPTIM_Disable+0x3a4>)
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	4313      	orrs	r3, r2
 80076fc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80076fe:	e01d      	b.n	800773c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8007700:	4b22      	ldr	r3, [pc, #136]	; (800778c <LPTIM_Disable+0x3a4>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007708:	4920      	ldr	r1, [pc, #128]	; (800778c <LPTIM_Disable+0x3a4>)
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	4313      	orrs	r3, r2
 800770e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007710:	e014      	b.n	800773c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <LPTIM_Disable+0x3a4>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800771a:	491c      	ldr	r1, [pc, #112]	; (800778c <LPTIM_Disable+0x3a4>)
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	4313      	orrs	r3, r2
 8007720:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007722:	e00b      	b.n	800773c <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <LPTIM_Disable+0x3a4>)
 8007726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007728:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800772c:	4917      	ldr	r1, [pc, #92]	; (800778c <LPTIM_Disable+0x3a4>)
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	4313      	orrs	r3, r2
 8007732:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007734:	e002      	b.n	800773c <LPTIM_Disable+0x354>
    }
  }
 8007736:	bf00      	nop
 8007738:	e000      	b.n	800773c <LPTIM_Disable+0x354>
        break;
 800773a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6a3a      	ldr	r2, [r7, #32]
 800775a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	625a      	str	r2, [r3, #36]	; 0x24
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007770:	bf00      	nop
 8007772:	3730      	adds	r7, #48	; 0x30
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	58003000 	.word	0x58003000
 800777c:	58002c00 	.word	0x58002c00
 8007780:	58002800 	.word	0x58002800
 8007784:	40002400 	.word	0x40002400
 8007788:	58002400 	.word	0x58002400
 800778c:	58024400 	.word	0x58024400

08007790 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a04      	ldr	r2, [pc, #16]	; (80077ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800779a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	58024800 	.word	0x58024800

080077b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80077b8:	4b19      	ldr	r3, [pc, #100]	; (8007820 <HAL_PWREx_ConfigSupply+0x70>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d00a      	beq.n	80077da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80077c4:	4b16      	ldr	r3, [pc, #88]	; (8007820 <HAL_PWREx_ConfigSupply+0x70>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d001      	beq.n	80077d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e01f      	b.n	8007816 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	e01d      	b.n	8007816 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <HAL_PWREx_ConfigSupply+0x70>)
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f023 0207 	bic.w	r2, r3, #7
 80077e2:	490f      	ldr	r1, [pc, #60]	; (8007820 <HAL_PWREx_ConfigSupply+0x70>)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077ea:	f7fb f8dd 	bl	80029a8 <HAL_GetTick>
 80077ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077f0:	e009      	b.n	8007806 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077f2:	f7fb f8d9 	bl	80029a8 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007800:	d901      	bls.n	8007806 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e007      	b.n	8007816 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007806:	4b06      	ldr	r3, [pc, #24]	; (8007820 <HAL_PWREx_ConfigSupply+0x70>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800780e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007812:	d1ee      	bne.n	80077f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	58024800 	.word	0x58024800

08007824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	; 0x30
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f000 bc48 	b.w	80080c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8088 	beq.w	8007956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007846:	4b99      	ldr	r3, [pc, #612]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007850:	4b96      	ldr	r3, [pc, #600]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	2b10      	cmp	r3, #16
 800785a:	d007      	beq.n	800786c <HAL_RCC_OscConfig+0x48>
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	2b18      	cmp	r3, #24
 8007860:	d111      	bne.n	8007886 <HAL_RCC_OscConfig+0x62>
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d10c      	bne.n	8007886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	4b8f      	ldr	r3, [pc, #572]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d06d      	beq.n	8007954 <HAL_RCC_OscConfig+0x130>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d169      	bne.n	8007954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f000 bc21 	b.w	80080c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788e:	d106      	bne.n	800789e <HAL_RCC_OscConfig+0x7a>
 8007890:	4b86      	ldr	r3, [pc, #536]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a85      	ldr	r2, [pc, #532]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e02e      	b.n	80078fc <HAL_RCC_OscConfig+0xd8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0x9c>
 80078a6:	4b81      	ldr	r3, [pc, #516]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a80      	ldr	r2, [pc, #512]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b7e      	ldr	r3, [pc, #504]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a7d      	ldr	r2, [pc, #500]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e01d      	b.n	80078fc <HAL_RCC_OscConfig+0xd8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c8:	d10c      	bne.n	80078e4 <HAL_RCC_OscConfig+0xc0>
 80078ca:	4b78      	ldr	r3, [pc, #480]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a77      	ldr	r2, [pc, #476]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b75      	ldr	r3, [pc, #468]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a74      	ldr	r2, [pc, #464]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e00b      	b.n	80078fc <HAL_RCC_OscConfig+0xd8>
 80078e4:	4b71      	ldr	r3, [pc, #452]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a70      	ldr	r2, [pc, #448]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4b6e      	ldr	r3, [pc, #440]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a6d      	ldr	r2, [pc, #436]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80078f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d013      	beq.n	800792c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007904:	f7fb f850 	bl	80029a8 <HAL_GetTick>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800790a:	e008      	b.n	800791e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800790c:	f7fb f84c 	bl	80029a8 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b64      	cmp	r3, #100	; 0x64
 8007918:	d901      	bls.n	800791e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e3d4      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800791e:	4b63      	ldr	r3, [pc, #396]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0f0      	beq.n	800790c <HAL_RCC_OscConfig+0xe8>
 800792a:	e014      	b.n	8007956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fb f83c 	bl	80029a8 <HAL_GetTick>
 8007930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007934:	f7fb f838 	bl	80029a8 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	; 0x64
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e3c0      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007946:	4b59      	ldr	r3, [pc, #356]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x110>
 8007952:	e000      	b.n	8007956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80ca 	beq.w	8007af8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007964:	4b51      	ldr	r3, [pc, #324]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800796e:	4b4f      	ldr	r3, [pc, #316]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_RCC_OscConfig+0x166>
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	2b18      	cmp	r3, #24
 800797e:	d156      	bne.n	8007a2e <HAL_RCC_OscConfig+0x20a>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d151      	bne.n	8007a2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800798a:	4b48      	ldr	r3, [pc, #288]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_RCC_OscConfig+0x17e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e392      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079a2:	4b42      	ldr	r3, [pc, #264]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f023 0219 	bic.w	r2, r3, #25
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	493f      	ldr	r1, [pc, #252]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fa fff8 	bl	80029a8 <HAL_GetTick>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079bc:	f7fa fff4 	bl	80029a8 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e37c      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ce:	4b37      	ldr	r3, [pc, #220]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079da:	f7fb f815 	bl	8002a08 <HAL_GetREVID>
 80079de:	4603      	mov	r3, r0
 80079e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d817      	bhi.n	8007a18 <HAL_RCC_OscConfig+0x1f4>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d108      	bne.n	8007a02 <HAL_RCC_OscConfig+0x1de>
 80079f0:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a00:	e07a      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a02:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	031b      	lsls	r3, r3, #12
 8007a10:	4926      	ldr	r1, [pc, #152]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a16:	e06f      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	4921      	ldr	r1, [pc, #132]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a2c:	e064      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d047      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a36:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f023 0219 	bic.w	r2, r3, #25
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	491a      	ldr	r1, [pc, #104]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fa ffae 	bl	80029a8 <HAL_GetTick>
 8007a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a50:	f7fa ffaa 	bl	80029a8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e332      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a62:	4b12      	ldr	r3, [pc, #72]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6e:	f7fa ffcb 	bl	8002a08 <HAL_GetREVID>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d819      	bhi.n	8007ab0 <HAL_RCC_OscConfig+0x28c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d108      	bne.n	8007a96 <HAL_RCC_OscConfig+0x272>
 8007a84:	4b09      	ldr	r3, [pc, #36]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a8c:	4a07      	ldr	r2, [pc, #28]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a92:	6053      	str	r3, [r2, #4]
 8007a94:	e030      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	031b      	lsls	r3, r3, #12
 8007aa4:	4901      	ldr	r1, [pc, #4]	; (8007aac <HAL_RCC_OscConfig+0x288>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	604b      	str	r3, [r1, #4]
 8007aaa:	e025      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	4b9a      	ldr	r3, [pc, #616]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	4997      	ldr	r1, [pc, #604]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]
 8007ac4:	e018      	b.n	8007af8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ac6:	4b95      	ldr	r3, [pc, #596]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a94      	ldr	r2, [pc, #592]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad2:	f7fa ff69 	bl	80029a8 <HAL_GetTick>
 8007ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ada:	f7fa ff65 	bl	80029a8 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e2ed      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007aec:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f0      	bne.n	8007ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80a9 	beq.w	8007c58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b06:	4b85      	ldr	r3, [pc, #532]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b10:	4b82      	ldr	r3, [pc, #520]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d007      	beq.n	8007b2c <HAL_RCC_OscConfig+0x308>
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b18      	cmp	r3, #24
 8007b20:	d13a      	bne.n	8007b98 <HAL_RCC_OscConfig+0x374>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d135      	bne.n	8007b98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b2c:	4b7b      	ldr	r3, [pc, #492]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_RCC_OscConfig+0x320>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d001      	beq.n	8007b44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e2c1      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b44:	f7fa ff60 	bl	8002a08 <HAL_GetREVID>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d817      	bhi.n	8007b82 <HAL_RCC_OscConfig+0x35e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	d108      	bne.n	8007b6c <HAL_RCC_OscConfig+0x348>
 8007b5a:	4b70      	ldr	r3, [pc, #448]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b62:	4a6e      	ldr	r2, [pc, #440]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b6a:	e075      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b6c:	4b6b      	ldr	r3, [pc, #428]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	069b      	lsls	r3, r3, #26
 8007b7a:	4968      	ldr	r1, [pc, #416]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b80:	e06a      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b82:	4b66      	ldr	r3, [pc, #408]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	061b      	lsls	r3, r3, #24
 8007b90:	4962      	ldr	r1, [pc, #392]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b96:	e05f      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d042      	beq.n	8007c26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ba0:	4b5e      	ldr	r3, [pc, #376]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a5d      	ldr	r2, [pc, #372]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fa fefc 	bl	80029a8 <HAL_GetTick>
 8007bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bb4:	f7fa fef8 	bl	80029a8 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e280      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bc6:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0f0      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bd2:	f7fa ff19 	bl	8002a08 <HAL_GetREVID>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d817      	bhi.n	8007c10 <HAL_RCC_OscConfig+0x3ec>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d108      	bne.n	8007bfa <HAL_RCC_OscConfig+0x3d6>
 8007be8:	4b4c      	ldr	r3, [pc, #304]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007bf0:	4a4a      	ldr	r2, [pc, #296]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf6:	6053      	str	r3, [r2, #4]
 8007bf8:	e02e      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
 8007bfa:	4b48      	ldr	r3, [pc, #288]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	069b      	lsls	r3, r3, #26
 8007c08:	4944      	ldr	r1, [pc, #272]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	604b      	str	r3, [r1, #4]
 8007c0e:	e023      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
 8007c10:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	061b      	lsls	r3, r3, #24
 8007c1e:	493f      	ldr	r1, [pc, #252]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60cb      	str	r3, [r1, #12]
 8007c24:	e018      	b.n	8007c58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007c26:	4b3d      	ldr	r3, [pc, #244]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a3c      	ldr	r2, [pc, #240]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c32:	f7fa feb9 	bl	80029a8 <HAL_GetTick>
 8007c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c3a:	f7fa feb5 	bl	80029a8 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e23d      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c4c:	4b33      	ldr	r3, [pc, #204]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d036      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d019      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c78:	f7fa fe96 	bl	80029a8 <HAL_GetTick>
 8007c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c80:	f7fa fe92 	bl	80029a8 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e21a      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c92:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f0      	beq.n	8007c80 <HAL_RCC_OscConfig+0x45c>
 8007c9e:	e018      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca4:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ca6:	f023 0301 	bic.w	r3, r3, #1
 8007caa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cac:	f7fa fe7c 	bl	80029a8 <HAL_GetTick>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cb4:	f7fa fe78 	bl	80029a8 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e200      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d039      	beq.n	8007d52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01c      	beq.n	8007d20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cf2:	f7fa fe59 	bl	80029a8 <HAL_GetTick>
 8007cf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cfa:	f7fa fe55 	bl	80029a8 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e1dd      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f0      	beq.n	8007cfa <HAL_RCC_OscConfig+0x4d6>
 8007d18:	e01b      	b.n	8007d52 <HAL_RCC_OscConfig+0x52e>
 8007d1a:	bf00      	nop
 8007d1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d20:	4b9b      	ldr	r3, [pc, #620]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a9a      	ldr	r2, [pc, #616]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d2c:	f7fa fe3c 	bl	80029a8 <HAL_GetTick>
 8007d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d34:	f7fa fe38 	bl	80029a8 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e1c0      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8081 	beq.w	8007e62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d60:	4b8c      	ldr	r3, [pc, #560]	; (8007f94 <HAL_RCC_OscConfig+0x770>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a8b      	ldr	r2, [pc, #556]	; (8007f94 <HAL_RCC_OscConfig+0x770>)
 8007d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d6c:	f7fa fe1c 	bl	80029a8 <HAL_GetTick>
 8007d70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d74:	f7fa fe18 	bl	80029a8 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	; 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e1a0      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d86:	4b83      	ldr	r3, [pc, #524]	; (8007f94 <HAL_RCC_OscConfig+0x770>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d106      	bne.n	8007da8 <HAL_RCC_OscConfig+0x584>
 8007d9a:	4b7d      	ldr	r3, [pc, #500]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9e:	4a7c      	ldr	r2, [pc, #496]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007da0:	f043 0301 	orr.w	r3, r3, #1
 8007da4:	6713      	str	r3, [r2, #112]	; 0x70
 8007da6:	e02d      	b.n	8007e04 <HAL_RCC_OscConfig+0x5e0>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <HAL_RCC_OscConfig+0x5a6>
 8007db0:	4b77      	ldr	r3, [pc, #476]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	4a76      	ldr	r2, [pc, #472]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	6713      	str	r3, [r2, #112]	; 0x70
 8007dbc:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc0:	4a73      	ldr	r2, [pc, #460]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dc2:	f023 0304 	bic.w	r3, r3, #4
 8007dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc8:	e01c      	b.n	8007e04 <HAL_RCC_OscConfig+0x5e0>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d10c      	bne.n	8007dec <HAL_RCC_OscConfig+0x5c8>
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a6e      	ldr	r2, [pc, #440]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dd8:	f043 0304 	orr.w	r3, r3, #4
 8007ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dde:	4b6c      	ldr	r3, [pc, #432]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	4a6b      	ldr	r2, [pc, #428]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dea:	e00b      	b.n	8007e04 <HAL_RCC_OscConfig+0x5e0>
 8007dec:	4b68      	ldr	r3, [pc, #416]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	4a67      	ldr	r2, [pc, #412]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6713      	str	r3, [r2, #112]	; 0x70
 8007df8:	4b65      	ldr	r3, [pc, #404]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfc:	4a64      	ldr	r2, [pc, #400]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007dfe:	f023 0304 	bic.w	r3, r3, #4
 8007e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d015      	beq.n	8007e38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0c:	f7fa fdcc 	bl	80029a8 <HAL_GetTick>
 8007e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e12:	e00a      	b.n	8007e2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e14:	f7fa fdc8 	bl	80029a8 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e14e      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e2a:	4b59      	ldr	r3, [pc, #356]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0ee      	beq.n	8007e14 <HAL_RCC_OscConfig+0x5f0>
 8007e36:	e014      	b.n	8007e62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e38:	f7fa fdb6 	bl	80029a8 <HAL_GetTick>
 8007e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e3e:	e00a      	b.n	8007e56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e40:	f7fa fdb2 	bl	80029a8 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e138      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e56:	4b4e      	ldr	r3, [pc, #312]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1ee      	bne.n	8007e40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 812d 	beq.w	80080c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e6c:	4b48      	ldr	r3, [pc, #288]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e74:	2b18      	cmp	r3, #24
 8007e76:	f000 80bd 	beq.w	8007ff4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	f040 809e 	bne.w	8007fc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a41      	ldr	r2, [pc, #260]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e90:	f7fa fd8a 	bl	80029a8 <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e98:	f7fa fd86 	bl	80029a8 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e10e      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eaa:	4b39      	ldr	r3, [pc, #228]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eb6:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eba:	4b37      	ldr	r3, [pc, #220]	; (8007f98 <HAL_RCC_OscConfig+0x774>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007ec6:	0112      	lsls	r2, r2, #4
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	4931      	ldr	r1, [pc, #196]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	628b      	str	r3, [r1, #40]	; 0x28
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	025b      	lsls	r3, r3, #9
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	3b01      	subs	r3, #1
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	061b      	lsls	r3, r3, #24
 8007efc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f00:	4923      	ldr	r1, [pc, #140]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f06:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f16:	4b21      	ldr	r3, [pc, #132]	; (8007f9c <HAL_RCC_OscConfig+0x778>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f1e:	00d2      	lsls	r2, r2, #3
 8007f20:	491b      	ldr	r1, [pc, #108]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	f023 020c 	bic.w	r2, r3, #12
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	4917      	ldr	r1, [pc, #92]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f38:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	f023 0202 	bic.w	r2, r3, #2
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f44:	4912      	ldr	r1, [pc, #72]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f4a:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f56:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f74:	f043 0301 	orr.w	r3, r3, #1
 8007f78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <HAL_RCC_OscConfig+0x76c>)
 8007f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f86:	f7fa fd0f 	bl	80029a8 <HAL_GetTick>
 8007f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f8c:	e011      	b.n	8007fb2 <HAL_RCC_OscConfig+0x78e>
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
 8007f94:	58024800 	.word	0x58024800
 8007f98:	fffffc0c 	.word	0xfffffc0c
 8007f9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa0:	f7fa fd02 	bl	80029a8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e08a      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fb2:	4b47      	ldr	r3, [pc, #284]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x77c>
 8007fbe:	e082      	b.n	80080c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc0:	4b43      	ldr	r3, [pc, #268]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a42      	ldr	r2, [pc, #264]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fcc:	f7fa fcec 	bl	80029a8 <HAL_GetTick>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fa fce8 	bl	80029a8 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e070      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fe6:	4b3a      	ldr	r3, [pc, #232]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x7b0>
 8007ff2:	e068      	b.n	80080c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ff4:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ffa:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b01      	cmp	r3, #1
 8008006:	d031      	beq.n	800806c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f003 0203 	and.w	r2, r3, #3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008012:	429a      	cmp	r2, r3
 8008014:	d12a      	bne.n	800806c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	091b      	lsrs	r3, r3, #4
 800801a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008022:	429a      	cmp	r2, r3
 8008024:	d122      	bne.n	800806c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008032:	429a      	cmp	r2, r3
 8008034:	d11a      	bne.n	800806c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	0a5b      	lsrs	r3, r3, #9
 800803a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d111      	bne.n	800806c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008056:	429a      	cmp	r2, r3
 8008058:	d108      	bne.n	800806c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	0e1b      	lsrs	r3, r3, #24
 800805e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e02b      	b.n	80080c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008070:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800807a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	429a      	cmp	r2, r3
 8008084:	d01f      	beq.n	80080c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	4a11      	ldr	r2, [pc, #68]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008092:	f7fa fc89 	bl	80029a8 <HAL_GetTick>
 8008096:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008098:	bf00      	nop
 800809a:	f7fa fc85 	bl	80029a8 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d0f9      	beq.n	800809a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080a6:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 80080a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <HAL_RCC_OscConfig+0x8b0>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080b2:	00d2      	lsls	r2, r2, #3
 80080b4:	4906      	ldr	r1, [pc, #24]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <HAL_RCC_OscConfig+0x8ac>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3730      	adds	r7, #48	; 0x30
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	58024400 	.word	0x58024400
 80080d4:	ffff0007 	.word	0xffff0007

080080d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e19c      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080ec:	4b8a      	ldr	r3, [pc, #552]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d910      	bls.n	800811c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fa:	4b87      	ldr	r3, [pc, #540]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 020f 	bic.w	r2, r3, #15
 8008102:	4985      	ldr	r1, [pc, #532]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800810a:	4b83      	ldr	r3, [pc, #524]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d001      	beq.n	800811c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e184      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d010      	beq.n	800814a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	4b7b      	ldr	r3, [pc, #492]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008134:	429a      	cmp	r2, r3
 8008136:	d908      	bls.n	800814a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008138:	4b78      	ldr	r3, [pc, #480]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	4975      	ldr	r1, [pc, #468]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008146:	4313      	orrs	r3, r2
 8008148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d010      	beq.n	8008178 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695a      	ldr	r2, [r3, #20]
 800815a:	4b70      	ldr	r3, [pc, #448]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008162:	429a      	cmp	r2, r3
 8008164:	d908      	bls.n	8008178 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008166:	4b6d      	ldr	r3, [pc, #436]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	496a      	ldr	r1, [pc, #424]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008174:	4313      	orrs	r3, r2
 8008176:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d010      	beq.n	80081a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	4b64      	ldr	r3, [pc, #400]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008190:	429a      	cmp	r2, r3
 8008192:	d908      	bls.n	80081a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008194:	4b61      	ldr	r3, [pc, #388]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	495e      	ldr	r1, [pc, #376]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	4b59      	ldr	r3, [pc, #356]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081be:	429a      	cmp	r2, r3
 80081c0:	d908      	bls.n	80081d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081c2:	4b56      	ldr	r3, [pc, #344]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	4953      	ldr	r1, [pc, #332]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d010      	beq.n	8008202 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	4b4d      	ldr	r3, [pc, #308]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d908      	bls.n	8008202 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f0:	4b4a      	ldr	r3, [pc, #296]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f023 020f 	bic.w	r2, r3, #15
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4947      	ldr	r1, [pc, #284]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d055      	beq.n	80082ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800820e:	4b43      	ldr	r3, [pc, #268]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	4940      	ldr	r1, [pc, #256]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800821c:	4313      	orrs	r3, r2
 800821e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d107      	bne.n	8008238 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008228:	4b3c      	ldr	r3, [pc, #240]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d121      	bne.n	8008278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e0f6      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d107      	bne.n	8008250 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008240:	4b36      	ldr	r3, [pc, #216]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d115      	bne.n	8008278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e0ea      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d107      	bne.n	8008268 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008258:	4b30      	ldr	r3, [pc, #192]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e0de      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008268:	4b2c      	ldr	r3, [pc, #176]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e0d6      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008278:	4b28      	ldr	r3, [pc, #160]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	f023 0207 	bic.w	r2, r3, #7
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4925      	ldr	r1, [pc, #148]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 8008286:	4313      	orrs	r3, r2
 8008288:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828a:	f7fa fb8d 	bl	80029a8 <HAL_GetTick>
 800828e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008290:	e00a      	b.n	80082a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008292:	f7fa fb89 	bl	80029a8 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e0be      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a8:	4b1c      	ldr	r3, [pc, #112]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d1eb      	bne.n	8008292 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d010      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d208      	bcs.n	80082e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f023 020f 	bic.w	r2, r3, #15
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	490e      	ldr	r1, [pc, #56]	; (800831c <HAL_RCC_ClockConfig+0x244>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d214      	bcs.n	8008320 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f6:	4b08      	ldr	r3, [pc, #32]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f023 020f 	bic.w	r2, r3, #15
 80082fe:	4906      	ldr	r1, [pc, #24]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	4313      	orrs	r3, r2
 8008304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008306:	4b04      	ldr	r3, [pc, #16]	; (8008318 <HAL_RCC_ClockConfig+0x240>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d005      	beq.n	8008320 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e086      	b.n	8008426 <HAL_RCC_ClockConfig+0x34e>
 8008318:	52002000 	.word	0x52002000
 800831c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008338:	429a      	cmp	r2, r3
 800833a:	d208      	bcs.n	800834e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800833c:	4b3c      	ldr	r3, [pc, #240]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	4939      	ldr	r1, [pc, #228]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 800834a:	4313      	orrs	r3, r2
 800834c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d010      	beq.n	800837c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	4b34      	ldr	r3, [pc, #208]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008366:	429a      	cmp	r2, r3
 8008368:	d208      	bcs.n	800837c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800836a:	4b31      	ldr	r3, [pc, #196]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	492e      	ldr	r1, [pc, #184]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 8008378:	4313      	orrs	r3, r2
 800837a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	d010      	beq.n	80083aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	4b28      	ldr	r3, [pc, #160]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008394:	429a      	cmp	r2, r3
 8008396:	d208      	bcs.n	80083aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008398:	4b25      	ldr	r3, [pc, #148]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	4922      	ldr	r1, [pc, #136]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d010      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d208      	bcs.n	80083d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	4917      	ldr	r1, [pc, #92]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80083d8:	f000 f844 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 80083dc:	4602      	mov	r2, r0
 80083de:	4b14      	ldr	r3, [pc, #80]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	4912      	ldr	r1, [pc, #72]	; (8008434 <HAL_RCC_ClockConfig+0x35c>)
 80083ea:	5ccb      	ldrb	r3, [r1, r3]
 80083ec:	f003 031f 	and.w	r3, r3, #31
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
 80083f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083f6:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <HAL_RCC_ClockConfig+0x358>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <HAL_RCC_ClockConfig+0x35c>)
 8008400:	5cd3      	ldrb	r3, [r2, r3]
 8008402:	f003 031f 	and.w	r3, r3, #31
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <HAL_RCC_ClockConfig+0x360>)
 800840e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <HAL_RCC_ClockConfig+0x364>)
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008416:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <HAL_RCC_ClockConfig+0x368>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fa fa7a 	bl	8002914 <HAL_InitTick>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
 8008434:	0800fb8c 	.word	0x0800fb8c
 8008438:	20000018 	.word	0x20000018
 800843c:	20000014 	.word	0x20000014
 8008440:	2000001c 	.word	0x2000001c

08008444 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <HAL_RCC_EnableCSS+0x1c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <HAL_RCC_EnableCSS+0x1c>)
 800844e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400

08008464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008464:	b480      	push	{r7}
 8008466:	b089      	sub	sp, #36	; 0x24
 8008468:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800846a:	4bb3      	ldr	r3, [pc, #716]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008472:	2b18      	cmp	r3, #24
 8008474:	f200 8155 	bhi.w	8008722 <HAL_RCC_GetSysClockFreq+0x2be>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <HAL_RCC_GetSysClockFreq+0x1c>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	080084e5 	.word	0x080084e5
 8008484:	08008723 	.word	0x08008723
 8008488:	08008723 	.word	0x08008723
 800848c:	08008723 	.word	0x08008723
 8008490:	08008723 	.word	0x08008723
 8008494:	08008723 	.word	0x08008723
 8008498:	08008723 	.word	0x08008723
 800849c:	08008723 	.word	0x08008723
 80084a0:	0800850b 	.word	0x0800850b
 80084a4:	08008723 	.word	0x08008723
 80084a8:	08008723 	.word	0x08008723
 80084ac:	08008723 	.word	0x08008723
 80084b0:	08008723 	.word	0x08008723
 80084b4:	08008723 	.word	0x08008723
 80084b8:	08008723 	.word	0x08008723
 80084bc:	08008723 	.word	0x08008723
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008723 	.word	0x08008723
 80084c8:	08008723 	.word	0x08008723
 80084cc:	08008723 	.word	0x08008723
 80084d0:	08008723 	.word	0x08008723
 80084d4:	08008723 	.word	0x08008723
 80084d8:	08008723 	.word	0x08008723
 80084dc:	08008723 	.word	0x08008723
 80084e0:	08008517 	.word	0x08008517
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e4:	4b94      	ldr	r3, [pc, #592]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f0:	4b91      	ldr	r3, [pc, #580]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	08db      	lsrs	r3, r3, #3
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	4a90      	ldr	r2, [pc, #576]	; (800873c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008500:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008502:	e111      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008504:	4b8d      	ldr	r3, [pc, #564]	; (800873c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008506:	61bb      	str	r3, [r7, #24]
      break;
 8008508:	e10e      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800850a:	4b8d      	ldr	r3, [pc, #564]	; (8008740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800850c:	61bb      	str	r3, [r7, #24]
      break;
 800850e:	e10b      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008510:	4b8c      	ldr	r3, [pc, #560]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008512:	61bb      	str	r3, [r7, #24]
      break;
 8008514:	e108      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008516:	4b88      	ldr	r3, [pc, #544]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008520:	4b85      	ldr	r3, [pc, #532]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800852c:	4b82      	ldr	r3, [pc, #520]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008536:	4b80      	ldr	r3, [pc, #512]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80e1 	beq.w	800871c <HAL_RCC_GetSysClockFreq+0x2b8>
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b02      	cmp	r3, #2
 800855e:	f000 8083 	beq.w	8008668 <HAL_RCC_GetSysClockFreq+0x204>
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b02      	cmp	r3, #2
 8008566:	f200 80a1 	bhi.w	80086ac <HAL_RCC_GetSysClockFreq+0x248>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_RCC_GetSysClockFreq+0x114>
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d056      	beq.n	8008624 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008576:	e099      	b.n	80086ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008578:	4b6f      	ldr	r3, [pc, #444]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d02d      	beq.n	80085e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008584:	4b6c      	ldr	r3, [pc, #432]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	08db      	lsrs	r3, r3, #3
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	4a6b      	ldr	r2, [pc, #428]	; (800873c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
 8008594:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b62      	ldr	r3, [pc, #392]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a02 	vldr	s12, [r7, #8]
 80085c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80085de:	e087      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800874c <HAL_RCC_GetSysClockFreq+0x2e8>
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b51      	ldr	r3, [pc, #324]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a02 	vldr	s12, [r7, #8]
 8008606:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008622:	e065      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008750 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b40      	ldr	r3, [pc, #256]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a02 	vldr	s12, [r7, #8]
 800864a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008666:	e043      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b2f      	ldr	r3, [pc, #188]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a02 	vldr	s12, [r7, #8]
 800868e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008748 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086aa:	e021      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008750 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b1e      	ldr	r3, [pc, #120]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80086d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008748 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	0a5b      	lsrs	r3, r3, #9
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	3301      	adds	r3, #1
 80086fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008708:	edd7 6a07 	vldr	s13, [r7, #28]
 800870c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008714:	ee17 3a90 	vmov	r3, s15
 8008718:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800871a:	e005      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
      break;
 8008720:	e002      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008724:	61bb      	str	r3, [r7, #24]
      break;
 8008726:	bf00      	nop
  }

  return sysclockfreq;
 8008728:	69bb      	ldr	r3, [r7, #24]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3724      	adds	r7, #36	; 0x24
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	58024400 	.word	0x58024400
 800873c:	03d09000 	.word	0x03d09000
 8008740:	003d0900 	.word	0x003d0900
 8008744:	00989680 	.word	0x00989680
 8008748:	46000000 	.word	0x46000000
 800874c:	4c742400 	.word	0x4c742400
 8008750:	4a742400 	.word	0x4a742400
 8008754:	4b189680 	.word	0x4b189680

08008758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800875e:	f7ff fe81 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 8008762:	4602      	mov	r2, r0
 8008764:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	490f      	ldr	r1, [pc, #60]	; (80087ac <HAL_RCC_GetHCLKFreq+0x54>)
 8008770:	5ccb      	ldrb	r3, [r1, r3]
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	fa22 f303 	lsr.w	r3, r2, r3
 800877a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <HAL_RCC_GetHCLKFreq+0x54>)
 8008786:	5cd3      	ldrb	r3, [r2, r3]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	4a07      	ldr	r2, [pc, #28]	; (80087b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008796:	4a07      	ldr	r2, [pc, #28]	; (80087b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800879e:	681b      	ldr	r3, [r3, #0]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	58024400 	.word	0x58024400
 80087ac:	0800fb8c 	.word	0x0800fb8c
 80087b0:	20000018 	.word	0x20000018
 80087b4:	20000014 	.word	0x20000014

080087b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80087bc:	f7ff ffcc 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 80087c0:	4602      	mov	r2, r0
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	4904      	ldr	r1, [pc, #16]	; (80087e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087ce:	5ccb      	ldrb	r3, [r1, r3]
 80087d0:	f003 031f 	and.w	r3, r3, #31
 80087d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80087d8:	4618      	mov	r0, r3
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	58024400 	.word	0x58024400
 80087e0:	0800fb8c 	.word	0x0800fb8c

080087e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80087e8:	f7ff ffb6 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 80087ec:	4602      	mov	r2, r0
 80087ee:	4b06      	ldr	r3, [pc, #24]	; (8008808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	4904      	ldr	r1, [pc, #16]	; (800880c <HAL_RCC_GetPCLK2Freq+0x28>)
 80087fa:	5ccb      	ldrb	r3, [r1, r3]
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	58024400 	.word	0x58024400
 800880c:	0800fb8c 	.word	0x0800fb8c

08008810 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800881c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008820:	d105      	bne.n	800882e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008822:	f000 f809 	bl	8008838 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800882c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	58024400 	.word	0x58024400

08008838 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800884c:	b0ca      	sub	sp, #296	; 0x128
 800884e:	af00      	add	r7, sp, #0
 8008850:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800885a:	2300      	movs	r3, #0
 800885c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800886c:	2500      	movs	r5, #0
 800886e:	ea54 0305 	orrs.w	r3, r4, r5
 8008872:	d049      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800887a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800887e:	d02f      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008884:	d828      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800888a:	d01a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800888c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008890:	d822      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800889a:	d007      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800889c:	e01c      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889e:	4bb8      	ldr	r3, [pc, #736]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	4ab7      	ldr	r2, [pc, #732]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088aa:	e01a      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b0:	3308      	adds	r3, #8
 80088b2:	2102      	movs	r1, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 fbb7 	bl	800b028 <RCCEx_PLL2_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088c0:	e00f      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	3328      	adds	r3, #40	; 0x28
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 fc5e 	bl	800b18c <RCCEx_PLL3_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088ea:	4ba5      	ldr	r3, [pc, #660]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f8:	4aa1      	ldr	r2, [pc, #644]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088fa:	430b      	orrs	r3, r1
 80088fc:	6513      	str	r3, [r2, #80]	; 0x50
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008914:	f04f 0900 	mov.w	r9, #0
 8008918:	ea58 0309 	orrs.w	r3, r8, r9
 800891c:	d047      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	2b04      	cmp	r3, #4
 8008926:	d82a      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	08008945 	.word	0x08008945
 8008934:	08008953 	.word	0x08008953
 8008938:	08008969 	.word	0x08008969
 800893c:	08008987 	.word	0x08008987
 8008940:	08008987 	.word	0x08008987
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008944:	4b8e      	ldr	r3, [pc, #568]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4a8d      	ldr	r2, [pc, #564]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008950:	e01a      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008956:	3308      	adds	r3, #8
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f002 fb64 	bl	800b028 <RCCEx_PLL2_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008966:	e00f      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896c:	3328      	adds	r3, #40	; 0x28
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fc0b 	bl	800b18c <RCCEx_PLL3_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800897c:	e004      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008984:	e000      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008990:	4b7b      	ldr	r3, [pc, #492]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008994:	f023 0107 	bic.w	r1, r3, #7
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899e:	4a78      	ldr	r2, [pc, #480]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089a0:	430b      	orrs	r3, r1
 80089a2:	6513      	str	r3, [r2, #80]	; 0x50
 80089a4:	e003      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80089ba:	f04f 0b00 	mov.w	fp, #0
 80089be:	ea5a 030b 	orrs.w	r3, sl, fp
 80089c2:	d04c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ce:	d030      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80089d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d4:	d829      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089d6:	2bc0      	cmp	r3, #192	; 0xc0
 80089d8:	d02d      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089da:	2bc0      	cmp	r3, #192	; 0xc0
 80089dc:	d825      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089de:	2b80      	cmp	r3, #128	; 0x80
 80089e0:	d018      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d821      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d007      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80089ee:	e01c      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f0:	4b63      	ldr	r3, [pc, #396]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	4a62      	ldr	r2, [pc, #392]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089fc:	e01c      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3308      	adds	r3, #8
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 fb0e 	bl	800b028 <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008a12:	e011      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a18:	3328      	adds	r3, #40	; 0x28
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 fbb5 	bl	800b18c <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008a28:	e006      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a40:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4e:	4a4c      	ldr	r2, [pc, #304]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6513      	str	r3, [r2, #80]	; 0x50
 8008a54:	e003      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008a6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d053      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a8a:	d035      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a90:	d82e      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a96:	d031      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a9c:	d828      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aa2:	d01a      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aa8:	d822      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab2:	d007      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ab4:	e01c      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab6:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	4a31      	ldr	r2, [pc, #196]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac2:	e01c      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac8:	3308      	adds	r3, #8
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 faab 	bl	800b028 <RCCEx_PLL2_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ad8:	e011      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ade:	3328      	adds	r3, #40	; 0x28
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f002 fb52 	bl	800b18c <RCCEx_PLL3_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aee:	e006      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008af6:	e002      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b06:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b16:	4a1a      	ldr	r2, [pc, #104]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8008b1c:	e003      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008b32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d056      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b52:	d038      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b58:	d831      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b5e:	d034      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b64:	d82b      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b6a:	d01d      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b70:	d825      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d006      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008b76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b7a:	d00a      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008b7c:	e01f      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b84:	4ba2      	ldr	r3, [pc, #648]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	4aa1      	ldr	r2, [pc, #644]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b90:	e01c      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b96:	3308      	adds	r3, #8
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f002 fa44 	bl	800b028 <RCCEx_PLL2_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ba6:	e011      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bac:	3328      	adds	r3, #40	; 0x28
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 faeb 	bl	800b18c <RCCEx_PLL3_Config>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bbc:	e006      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bc4:	e002      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008bc6:	bf00      	nop
 8008bc8:	e000      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008bd4:	4b8e      	ldr	r3, [pc, #568]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008be4:	4a8a      	ldr	r2, [pc, #552]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008be6:	430b      	orrs	r3, r1
 8008be8:	6593      	str	r3, [r2, #88]	; 0x58
 8008bea:	e003      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4313      	orrs	r3, r2
 8008c12:	d03a      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1a:	2b30      	cmp	r3, #48	; 0x30
 8008c1c:	d01f      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008c1e:	2b30      	cmp	r3, #48	; 0x30
 8008c20:	d819      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	d00c      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d815      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d019      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d111      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c32:	4b77      	ldr	r3, [pc, #476]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	4a76      	ldr	r2, [pc, #472]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008c3e:	e011      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c44:	3308      	adds	r3, #8
 8008c46:	2102      	movs	r1, #2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 f9ed 	bl	800b028 <RCCEx_PLL2_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008c54:	e006      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c5c:	e002      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c5e:	bf00      	nop
 8008c60:	e000      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c6c:	4b68      	ldr	r3, [pc, #416]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7a:	4a65      	ldr	r2, [pc, #404]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c80:	e003      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008c96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ca0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	d051      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb4:	d035      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cba:	d82e      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc0:	d031      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc6:	d828      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ccc:	d01a      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	d822      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cdc:	d007      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008cde:	e01c      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce0:	4b4b      	ldr	r3, [pc, #300]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a4a      	ldr	r2, [pc, #296]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cec:	e01c      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f002 f996 	bl	800b028 <RCCEx_PLL2_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d02:	e011      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d08:	3328      	adds	r3, #40	; 0x28
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 fa3d 	bl	800b18c <RCCEx_PLL3_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d18:	e006      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d20:	e002      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008d22:	bf00      	nop
 8008d24:	e000      	b.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d30:	4b37      	ldr	r3, [pc, #220]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d3e:	4a34      	ldr	r2, [pc, #208]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d40:	430b      	orrs	r3, r1
 8008d42:	6513      	str	r3, [r2, #80]	; 0x50
 8008d44:	e003      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d056      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d78:	d033      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d7e:	d82c      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d84:	d02f      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d8a:	d826      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d90:	d02b      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d96:	d820      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d9c:	d012      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da2:	d81a      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d022      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dac:	d115      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	3308      	adds	r3, #8
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 f936 	bl	800b028 <RCCEx_PLL2_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e015      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc8:	3328      	adds	r3, #40	; 0x28
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 f9dd 	bl	800b18c <RCCEx_PLL3_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dd8:	e00a      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008de0:	e006      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008de2:	bf00      	nop
 8008de4:	e004      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008de6:	bf00      	nop
 8008de8:	e002      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10d      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e06:	4a02      	ldr	r2, [pc, #8]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	d055      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e48:	d033      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e4e:	d82c      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e54:	d02f      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5a:	d826      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e60:	d02b      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e66:	d820      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e6c:	d012      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e72:	d81a      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d022      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e7c:	d115      	bne.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e82:	3308      	adds	r3, #8
 8008e84:	2101      	movs	r1, #1
 8008e86:	4618      	mov	r0, r3
 8008e88:	f002 f8ce 	bl	800b028 <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e92:	e015      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e98:	3328      	adds	r3, #40	; 0x28
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 f975 	bl	800b18c <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e00a      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008eb0:	e006      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e004      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eb6:	bf00      	nop
 8008eb8:	e002      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e000      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ec8:	4ba3      	ldr	r3, [pc, #652]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ecc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ed8:	4a9f      	ldr	r2, [pc, #636]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eda:	430b      	orrs	r3, r1
 8008edc:	6593      	str	r3, [r2, #88]	; 0x58
 8008ede:	e003      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f02:	460b      	mov	r3, r1
 8008f04:	4313      	orrs	r3, r2
 8008f06:	d037      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f12:	d00e      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f18:	d816      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d018      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f22:	d111      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f24:	4b8c      	ldr	r3, [pc, #560]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	4a8b      	ldr	r2, [pc, #556]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f30:	e00f      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f36:	3308      	adds	r3, #8
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f874 	bl	800b028 <RCCEx_PLL2_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f46:	e004      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f4e:	e000      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f5a:	4b7f      	ldr	r3, [pc, #508]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f68:	4a7b      	ldr	r2, [pc, #492]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	6513      	str	r3, [r2, #80]	; 0x50
 8008f6e:	e003      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4313      	orrs	r3, r2
 8008f96:	d039      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d81c      	bhi.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fb9 	.word	0x08008fb9
 8008fb0:	08008fc7 	.word	0x08008fc7
 8008fb4:	08008fe5 	.word	0x08008fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb8:	4b67      	ldr	r3, [pc, #412]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	4a66      	ldr	r2, [pc, #408]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fc4:	e00f      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fca:	3308      	adds	r3, #8
 8008fcc:	2102      	movs	r1, #2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 f82a 	bl	800b028 <RCCEx_PLL2_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fda:	e004      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fe2:	e000      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fee:	4b5a      	ldr	r3, [pc, #360]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	f023 0103 	bic.w	r1, r3, #3
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffc:	4a56      	ldr	r2, [pc, #344]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ffe:	430b      	orrs	r3, r1
 8009000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009002:	e003      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800901c:	2300      	movs	r3, #0
 800901e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009022:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009026:	460b      	mov	r3, r1
 8009028:	4313      	orrs	r3, r2
 800902a:	f000 809f 	beq.w	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800902e:	4b4b      	ldr	r3, [pc, #300]	; (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a4a      	ldr	r2, [pc, #296]	; (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800903a:	f7f9 fcb5 	bl	80029a8 <HAL_GetTick>
 800903e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009042:	e00b      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009044:	f7f9 fcb0 	bl	80029a8 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b64      	cmp	r3, #100	; 0x64
 8009052:	d903      	bls.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800905a:	e005      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800905c:	4b3f      	ldr	r3, [pc, #252]	; (800915c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0ed      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906c:	2b00      	cmp	r3, #0
 800906e:	d179      	bne.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009070:	4b39      	ldr	r3, [pc, #228]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800907c:	4053      	eors	r3, r2
 800907e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009082:	2b00      	cmp	r3, #0
 8009084:	d015      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009086:	4b34      	ldr	r3, [pc, #208]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009092:	4b31      	ldr	r3, [pc, #196]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009096:	4a30      	ldr	r2, [pc, #192]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800909e:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	4a2d      	ldr	r2, [pc, #180]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090aa:	4a2b      	ldr	r2, [pc, #172]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090be:	d118      	bne.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c0:	f7f9 fc72 	bl	80029a8 <HAL_GetTick>
 80090c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c8:	e00d      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090ca:	f7f9 fc6d 	bl	80029a8 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80090da:	429a      	cmp	r2, r3
 80090dc:	d903      	bls.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80090e4:	e005      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e6:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0eb      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d129      	bne.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800910a:	d10e      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800910c:	4b12      	ldr	r3, [pc, #72]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009118:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800911c:	091a      	lsrs	r2, r3, #4
 800911e:	4b10      	ldr	r3, [pc, #64]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009120:	4013      	ands	r3, r2
 8009122:	4a0d      	ldr	r2, [pc, #52]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009124:	430b      	orrs	r3, r1
 8009126:	6113      	str	r3, [r2, #16]
 8009128:	e005      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800912a:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	4a0a      	ldr	r2, [pc, #40]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009134:	6113      	str	r3, [r2, #16]
 8009136:	4b08      	ldr	r3, [pc, #32]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009138:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009146:	4a04      	ldr	r2, [pc, #16]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009148:	430b      	orrs	r3, r1
 800914a:	6713      	str	r3, [r2, #112]	; 0x70
 800914c:	e00e      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800914e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009156:	e009      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009158:	58024400 	.word	0x58024400
 800915c:	58024800 	.word	0x58024800
 8009160:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f002 0301 	and.w	r3, r2, #1
 8009178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800917c:	2300      	movs	r3, #0
 800917e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009182:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	f000 8089 	beq.w	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009194:	2b28      	cmp	r3, #40	; 0x28
 8009196:	d86b      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	08009279 	.word	0x08009279
 80091a4:	08009271 	.word	0x08009271
 80091a8:	08009271 	.word	0x08009271
 80091ac:	08009271 	.word	0x08009271
 80091b0:	08009271 	.word	0x08009271
 80091b4:	08009271 	.word	0x08009271
 80091b8:	08009271 	.word	0x08009271
 80091bc:	08009271 	.word	0x08009271
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009271 	.word	0x08009271
 80091c8:	08009271 	.word	0x08009271
 80091cc:	08009271 	.word	0x08009271
 80091d0:	08009271 	.word	0x08009271
 80091d4:	08009271 	.word	0x08009271
 80091d8:	08009271 	.word	0x08009271
 80091dc:	08009271 	.word	0x08009271
 80091e0:	0800925b 	.word	0x0800925b
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009271 	.word	0x08009271
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009271 	.word	0x08009271
 8009200:	08009279 	.word	0x08009279
 8009204:	08009271 	.word	0x08009271
 8009208:	08009271 	.word	0x08009271
 800920c:	08009271 	.word	0x08009271
 8009210:	08009271 	.word	0x08009271
 8009214:	08009271 	.word	0x08009271
 8009218:	08009271 	.word	0x08009271
 800921c:	08009271 	.word	0x08009271
 8009220:	08009279 	.word	0x08009279
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009271 	.word	0x08009271
 8009240:	08009279 	.word	0x08009279
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009248:	3308      	adds	r3, #8
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f001 feeb 	bl	800b028 <RCCEx_PLL2_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009258:	e00f      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800925a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800925e:	3328      	adds	r3, #40	; 0x28
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f001 ff92 	bl	800b18c <RCCEx_PLL3_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800926e:	e004      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009276:	e000      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009282:	4bbf      	ldr	r3, [pc, #764]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009290:	4abb      	ldr	r2, [pc, #748]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009292:	430b      	orrs	r3, r1
 8009294:	6553      	str	r3, [r2, #84]	; 0x54
 8009296:	e003      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800929c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f002 0302 	and.w	r3, r2, #2
 80092ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80092ba:	460b      	mov	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	d041      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d824      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	0800931d 	.word	0x0800931d
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ff 	.word	0x080092ff
 80092dc:	0800931d 	.word	0x0800931d
 80092e0:	0800931d 	.word	0x0800931d
 80092e4:	0800931d 	.word	0x0800931d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ec:	3308      	adds	r3, #8
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 fe99 	bl	800b028 <RCCEx_PLL2_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009302:	3328      	adds	r3, #40	; 0x28
 8009304:	2101      	movs	r1, #1
 8009306:	4618      	mov	r0, r3
 8009308:	f001 ff40 	bl	800b18c <RCCEx_PLL3_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009326:	4b96      	ldr	r3, [pc, #600]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	f023 0107 	bic.w	r1, r3, #7
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009334:	4a92      	ldr	r2, [pc, #584]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6553      	str	r3, [r2, #84]	; 0x54
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f002 0304 	and.w	r3, r2, #4
 8009350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800935a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d044      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800936c:	2b05      	cmp	r3, #5
 800936e:	d825      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	080093c5 	.word	0x080093c5
 800937c:	08009391 	.word	0x08009391
 8009380:	080093a7 	.word	0x080093a7
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093c5 	.word	0x080093c5
 800938c:	080093c5 	.word	0x080093c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009394:	3308      	adds	r3, #8
 8009396:	2101      	movs	r1, #1
 8009398:	4618      	mov	r0, r3
 800939a:	f001 fe45 	bl	800b028 <RCCEx_PLL2_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093a4:	e00f      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093aa:	3328      	adds	r3, #40	; 0x28
 80093ac:	2101      	movs	r1, #1
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 feec 	bl	800b18c <RCCEx_PLL3_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093ce:	4b6c      	ldr	r3, [pc, #432]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d2:	f023 0107 	bic.w	r1, r3, #7
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093de:	4a68      	ldr	r2, [pc, #416]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6593      	str	r3, [r2, #88]	; 0x58
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f002 0320 	and.w	r3, r2, #32
 80093fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093fe:	2300      	movs	r3, #0
 8009400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009408:	460b      	mov	r3, r1
 800940a:	4313      	orrs	r3, r2
 800940c:	d055      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800941a:	d033      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800941c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009420:	d82c      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d02f      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942c:	d826      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800942e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009432:	d02b      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009438:	d820      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800943a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943e:	d012      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009444:	d81a      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d022      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800944a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800944e:	d115      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009454:	3308      	adds	r3, #8
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f001 fde5 	bl	800b028 <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009464:	e015      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946a:	3328      	adds	r3, #40	; 0x28
 800946c:	2102      	movs	r1, #2
 800946e:	4618      	mov	r0, r3
 8009470:	f001 fe8c 	bl	800b18c <RCCEx_PLL3_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800947a:	e00a      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009482:	e006      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009484:	bf00      	nop
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009488:	bf00      	nop
 800948a:	e002      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800949a:	4b39      	ldr	r3, [pc, #228]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094aa:	4a35      	ldr	r2, [pc, #212]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6553      	str	r3, [r2, #84]	; 0x54
 80094b0:	e003      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80094c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094ca:	2300      	movs	r3, #0
 80094cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d058      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094e6:	d033      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80094e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094ec:	d82c      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f2:	d02f      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f8:	d826      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094fe:	d02b      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009504:	d820      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800950a:	d012      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800950c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009510:	d81a      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d022      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800951a:	d115      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009520:	3308      	adds	r3, #8
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fd7f 	bl	800b028 <RCCEx_PLL2_Config>
 800952a:	4603      	mov	r3, r0
 800952c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009530:	e015      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009536:	3328      	adds	r3, #40	; 0x28
 8009538:	2102      	movs	r1, #2
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fe26 	bl	800b18c <RCCEx_PLL3_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009546:	e00a      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800954e:	e006      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009550:	bf00      	nop
 8009552:	e004      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009554:	bf00      	nop
 8009556:	e002      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800955c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10e      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009576:	4a02      	ldr	r2, [pc, #8]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009578:	430b      	orrs	r3, r1
 800957a:	6593      	str	r3, [r2, #88]	; 0x58
 800957c:	e006      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800957e:	bf00      	nop
 8009580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80095a6:	460b      	mov	r3, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	d055      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80095ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095b8:	d033      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80095ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095be:	d82c      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c4:	d02f      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80095c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ca:	d826      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095d0:	d02b      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80095d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095d6:	d820      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095dc:	d012      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80095de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e2:	d81a      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80095e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ec:	d115      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f2:	3308      	adds	r3, #8
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fd16 	bl	800b028 <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009602:	e015      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	3328      	adds	r3, #40	; 0x28
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fdbd 	bl	800b18c <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009618:	e00a      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800962e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009638:	4ba1      	ldr	r3, [pc, #644]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009648:	4a9d      	ldr	r2, [pc, #628]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800964a:	430b      	orrs	r3, r1
 800964c:	6593      	str	r3, [r2, #88]	; 0x58
 800964e:	e003      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f002 0308 	and.w	r3, r2, #8
 8009664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009668:	2300      	movs	r3, #0
 800966a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800966e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009672:	460b      	mov	r3, r1
 8009674:	4313      	orrs	r3, r2
 8009676:	d01e      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d10c      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968a:	3328      	adds	r3, #40	; 0x28
 800968c:	2102      	movs	r1, #2
 800968e:	4618      	mov	r0, r3
 8009690:	f001 fd7c 	bl	800b18c <RCCEx_PLL3_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80096a0:	4b87      	ldr	r3, [pc, #540]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b0:	4a83      	ldr	r2, [pc, #524]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096b2:	430b      	orrs	r3, r1
 80096b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f002 0310 	and.w	r3, r2, #16
 80096c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d01e      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	d10c      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e8:	3328      	adds	r3, #40	; 0x28
 80096ea:	2102      	movs	r1, #2
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 fd4d 	bl	800b18c <RCCEx_PLL3_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096fe:	4b70      	ldr	r3, [pc, #448]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800970e:	4a6c      	ldr	r2, [pc, #432]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009710:	430b      	orrs	r3, r1
 8009712:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009724:	2300      	movs	r3, #0
 8009726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800972a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800972e:	460b      	mov	r3, r1
 8009730:	4313      	orrs	r3, r2
 8009732:	d03e      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800973c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009740:	d022      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009746:	d81b      	bhi.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009750:	d00b      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009752:	e015      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009758:	3308      	adds	r3, #8
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f001 fc63 	bl	800b028 <RCCEx_PLL2_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009768:	e00f      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	3328      	adds	r3, #40	; 0x28
 8009770:	2102      	movs	r1, #2
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fd0a 	bl	800b18c <RCCEx_PLL3_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800977e:	e004      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009786:	e000      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009792:	4b4b      	ldr	r3, [pc, #300]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009796:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097a2:	4a47      	ldr	r2, [pc, #284]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6593      	str	r3, [r2, #88]	; 0x58
 80097a8:	e003      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80097be:	67bb      	str	r3, [r7, #120]	; 0x78
 80097c0:	2300      	movs	r3, #0
 80097c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80097c8:	460b      	mov	r3, r1
 80097ca:	4313      	orrs	r3, r2
 80097cc:	d03b      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097da:	d01f      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80097dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097e0:	d818      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80097e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097e6:	d003      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80097e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ec:	d007      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80097ee:	e011      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f0:	4b33      	ldr	r3, [pc, #204]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	4a32      	ldr	r2, [pc, #200]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80097fc:	e00f      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009802:	3328      	adds	r3, #40	; 0x28
 8009804:	2101      	movs	r1, #1
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fcc0 	bl	800b18c <RCCEx_PLL3_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009812:	e004      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800981c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009826:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800982e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009836:	4a22      	ldr	r2, [pc, #136]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009838:	430b      	orrs	r3, r1
 800983a:	6553      	str	r3, [r2, #84]	; 0x54
 800983c:	e003      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009852:	673b      	str	r3, [r7, #112]	; 0x70
 8009854:	2300      	movs	r3, #0
 8009856:	677b      	str	r3, [r7, #116]	; 0x74
 8009858:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800985c:	460b      	mov	r3, r1
 800985e:	4313      	orrs	r3, r2
 8009860:	d034      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800986c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009870:	d007      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009872:	e011      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009874:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800987a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800987e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009880:	e00e      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009886:	3308      	adds	r3, #8
 8009888:	2102      	movs	r1, #2
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fbcc 	bl	800b028 <RCCEx_PLL2_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009896:	e003      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800989e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b6:	4a02      	ldr	r2, [pc, #8]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098bc:	e006      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80098be:	bf00      	nop
 80098c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80098d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098da:	2300      	movs	r3, #0
 80098dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80098e2:	460b      	mov	r3, r1
 80098e4:	4313      	orrs	r3, r2
 80098e6:	d00c      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ec:	3328      	adds	r3, #40	; 0x28
 80098ee:	2102      	movs	r1, #2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fc4b 	bl	800b18c <RCCEx_PLL3_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800990e:	663b      	str	r3, [r7, #96]	; 0x60
 8009910:	2300      	movs	r3, #0
 8009912:	667b      	str	r3, [r7, #100]	; 0x64
 8009914:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009918:	460b      	mov	r3, r1
 800991a:	4313      	orrs	r3, r2
 800991c:	d038      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800992a:	d018      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800992c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009930:	d811      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009936:	d014      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993c:	d80b      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d011      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009946:	d106      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009948:	4bc3      	ldr	r3, [pc, #780]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4ac2      	ldr	r2, [pc, #776]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800994e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009954:	e008      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009970:	4bb9      	ldr	r3, [pc, #740]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009974:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009980:	4ab5      	ldr	r2, [pc, #724]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009982:	430b      	orrs	r3, r1
 8009984:	6553      	str	r3, [r2, #84]	; 0x54
 8009986:	e003      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800999c:	65bb      	str	r3, [r7, #88]	; 0x58
 800999e:	2300      	movs	r3, #0
 80099a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80099a6:	460b      	mov	r3, r1
 80099a8:	4313      	orrs	r3, r2
 80099aa:	d009      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099ac:	4baa      	ldr	r3, [pc, #680]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ba:	4aa7      	ldr	r2, [pc, #668]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099bc:	430b      	orrs	r3, r1
 80099be:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80099cc:	653b      	str	r3, [r7, #80]	; 0x50
 80099ce:	2300      	movs	r3, #0
 80099d0:	657b      	str	r3, [r7, #84]	; 0x54
 80099d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80099dc:	4b9e      	ldr	r3, [pc, #632]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80099e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099ec:	4a9a      	ldr	r2, [pc, #616]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80099fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a00:	2300      	movs	r3, #0
 8009a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d009      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a0e:	4b92      	ldr	r3, [pc, #584]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a12:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a1c:	4a8e      	ldr	r2, [pc, #568]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a30:	2300      	movs	r3, #0
 8009a32:	647b      	str	r3, [r7, #68]	; 0x44
 8009a34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d00e      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a3e:	4b86      	ldr	r3, [pc, #536]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	4a85      	ldr	r2, [pc, #532]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a48:	6113      	str	r3, [r2, #16]
 8009a4a:	4b83      	ldr	r3, [pc, #524]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a4c:	6919      	ldr	r1, [r3, #16]
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009a56:	4a80      	ldr	r2, [pc, #512]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d009      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a78:	4b77      	ldr	r3, [pc, #476]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	4a74      	ldr	r2, [pc, #464]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d00a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aa8:	4b6b      	ldr	r3, [pc, #428]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab8:	4a67      	ldr	r2, [pc, #412]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aba:	430b      	orrs	r3, r1
 8009abc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	62b9      	str	r1, [r7, #40]	; 0x28
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	d011      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ade:	3308      	adds	r3, #8
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 faa0 	bl	800b028 <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009afa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	2100      	movs	r1, #0
 8009b08:	6239      	str	r1, [r7, #32]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b14:	460b      	mov	r3, r1
 8009b16:	4313      	orrs	r3, r2
 8009b18:	d011      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1e:	3308      	adds	r3, #8
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fa80 	bl	800b028 <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	2100      	movs	r1, #0
 8009b48:	61b9      	str	r1, [r7, #24]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b54:	460b      	mov	r3, r1
 8009b56:	4313      	orrs	r3, r2
 8009b58:	d011      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	3308      	adds	r3, #8
 8009b60:	2102      	movs	r1, #2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fa60 	bl	800b028 <RCCEx_PLL2_Config>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	2100      	movs	r1, #0
 8009b88:	6139      	str	r1, [r7, #16]
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b94:	460b      	mov	r3, r1
 8009b96:	4313      	orrs	r3, r2
 8009b98:	d011      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9e:	3328      	adds	r3, #40	; 0x28
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 faf2 	bl	800b18c <RCCEx_PLL3_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	f003 0310 	and.w	r3, r3, #16
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	d011      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bde:	3328      	adds	r3, #40	; 0x28
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fad2 	bl	800b18c <RCCEx_PLL3_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	2100      	movs	r1, #0
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c14:	460b      	mov	r3, r1
 8009c16:	4313      	orrs	r3, r2
 8009c18:	d011      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1e:	3328      	adds	r3, #40	; 0x28
 8009c20:	2102      	movs	r1, #2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fab2 	bl	800b18c <RCCEx_PLL3_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009c3e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009c52:	46bd      	mov	sp, r7
 8009c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c58:	58024400 	.word	0x58024400

08009c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b090      	sub	sp, #64	; 0x40
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c6a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	f040 8094 	bne.w	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c74:	4b9e      	ldr	r3, [pc, #632]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	f200 8087 	bhi.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009cc9 	.word	0x08009cc9
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009d8d 	.word	0x08009d8d
 8009c9c:	08009d19 	.word	0x08009d19
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ca0:	4b93      	ldr	r3, [pc, #588]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cac:	d108      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 f810 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbc:	f000 bd45 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cc4:	f000 bd41 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cc8:	4b89      	ldr	r3, [pc, #548]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd4:	d108      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cd6:	f107 0318 	add.w	r3, r7, #24
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fd54 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce4:	f000 bd31 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cec:	f000 bd2d 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cf0:	4b7f      	ldr	r3, [pc, #508]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfc:	d108      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fe94 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0c:	f000 bd1d 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d14:	f000 bd19 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d18:	4b75      	ldr	r3, [pc, #468]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d22:	4b73      	ldr	r3, [pc, #460]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d10c      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d34:	4b6e      	ldr	r3, [pc, #440]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	08db      	lsrs	r3, r3, #3
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	4a6d      	ldr	r2, [pc, #436]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d40:	fa22 f303 	lsr.w	r3, r2, r3
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d46:	e01f      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d48:	4b69      	ldr	r3, [pc, #420]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d54:	d106      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d5c:	d102      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d5e:	4b66      	ldr	r3, [pc, #408]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d62:	e011      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d64:	4b62      	ldr	r3, [pc, #392]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d70:	d106      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d78:	d102      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d7a:	4b60      	ldr	r3, [pc, #384]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7e:	e003      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d84:	f000 bce1 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d88:	f000 bcdf 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d8c:	4b5c      	ldr	r3, [pc, #368]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d90:	f000 bcdb 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d98:	f000 bcd7 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009da4:	430b      	orrs	r3, r1
 8009da6:	f040 80ad 	bne.w	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009daa:	4b51      	ldr	r3, [pc, #324]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009db2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dba:	d056      	beq.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc2:	f200 8090 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	2bc0      	cmp	r3, #192	; 0xc0
 8009dca:	f000 8088 	beq.w	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2bc0      	cmp	r3, #192	; 0xc0
 8009dd2:	f200 8088 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d032      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	2b80      	cmp	r3, #128	; 0x80
 8009de0:	f200 8081 	bhi.w	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	2b40      	cmp	r3, #64	; 0x40
 8009dee:	d014      	beq.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009df0:	e079      	b.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009df2:	4b3f      	ldr	r3, [pc, #252]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dfe:	d108      	bne.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 ff67 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e0e:	f000 bc9c 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e16:	f000 bc98 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e26:	d108      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e28:	f107 0318 	add.w	r3, r7, #24
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fcab 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e36:	f000 bc88 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3e:	f000 bc84 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e42:	4b2b      	ldr	r3, [pc, #172]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4e:	d108      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fdeb 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e5e:	f000 bc74 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e66:	f000 bc70 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e6a:	4b21      	ldr	r3, [pc, #132]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e74:	4b1e      	ldr	r3, [pc, #120]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d10c      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	08db      	lsrs	r3, r3, #3
 8009e8c:	f003 0303 	and.w	r3, r3, #3
 8009e90:	4a18      	ldr	r2, [pc, #96]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e92:	fa22 f303 	lsr.w	r3, r2, r3
 8009e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e98:	e01f      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e9a:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ea6:	d106      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eae:	d102      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009eb0:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb4:	e011      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec2:	d106      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eca:	d102      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ed0:	e003      	b.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ed6:	f000 bc38 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009eda:	f000 bc36 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ede:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ee2:	f000 bc32 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eea:	f000 bc2e 	b.w	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009eee:	bf00      	nop
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	03d09000 	.word	0x03d09000
 8009ef8:	003d0900 	.word	0x003d0900
 8009efc:	00989680 	.word	0x00989680
 8009f00:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	f040 809c 	bne.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009f12:	4b9e      	ldr	r3, [pc, #632]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f22:	d054      	beq.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f2a:	f200 808b 	bhi.w	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f34:	f000 8083 	beq.w	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f3e:	f200 8081 	bhi.w	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f48:	d02f      	beq.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f50:	d878      	bhi.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f5e:	d012      	beq.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009f60:	e070      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f62:	4b8a      	ldr	r3, [pc, #552]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f6e:	d107      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 feaf 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f7e:	e3e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f84:	e3e1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f86:	4b81      	ldr	r3, [pc, #516]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f92:	d107      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f94:	f107 0318 	add.w	r3, r7, #24
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fbf5 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa2:	e3d2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa8:	e3cf      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009faa:	4b78      	ldr	r3, [pc, #480]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fd37 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc6:	e3c0      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fcc:	e3bd      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fce:	4b6f      	ldr	r3, [pc, #444]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fd8:	4b6c      	ldr	r3, [pc, #432]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d10c      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fea:	4b68      	ldr	r3, [pc, #416]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	08db      	lsrs	r3, r3, #3
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	4a66      	ldr	r2, [pc, #408]	; (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ffc:	e01e      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ffe:	4b63      	ldr	r3, [pc, #396]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00a:	d106      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a012:	d102      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a014:	4b5f      	ldr	r3, [pc, #380]	; (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a018:	e010      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a01a:	4b5c      	ldr	r3, [pc, #368]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a026:	d106      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a02e:	d102      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a030:	4b59      	ldr	r3, [pc, #356]	; (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a034:	e002      	b.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a03a:	e386      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a03c:	e385      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a03e:	4b57      	ldr	r3, [pc, #348]	; (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a042:	e382      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a048:	e37f      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a052:	430b      	orrs	r3, r1
 800a054:	f040 80a7 	bne.w	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a058:	4b4c      	ldr	r3, [pc, #304]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a060:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a068:	d055      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a070:	f200 8096 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a07a:	f000 8084 	beq.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a084:	f200 808c 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a08e:	d030      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a096:	f200 8083 	bhi.w	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0a6:	d012      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a0a8:	e07a      	b.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0aa:	4b38      	ldr	r3, [pc, #224]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fe0b 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c6:	e340      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0cc:	e33d      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ce:	4b2f      	ldr	r3, [pc, #188]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0da:	d107      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0dc:	f107 0318 	add.w	r3, r7, #24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fb51 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ea:	e32e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f0:	e32b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0f2:	4b26      	ldr	r3, [pc, #152]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fe:	d107      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a100:	f107 030c 	add.w	r3, r7, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fc93 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10e:	e31c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a114:	e319      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a120:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d10c      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a132:	4b16      	ldr	r3, [pc, #88]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	08db      	lsrs	r3, r3, #3
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a144:	e01e      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a146:	4b11      	ldr	r3, [pc, #68]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d106      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15a:	d102      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a15c:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a160:	e010      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a16e:	d106      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a176:	d102      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17c:	e002      	b.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a182:	e2e2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a184:	e2e1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a186:	4b05      	ldr	r3, [pc, #20]	; (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18a:	e2de      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a18c:	58024400 	.word	0x58024400
 800a190:	03d09000 	.word	0x03d09000
 800a194:	003d0900 	.word	0x003d0900
 800a198:	00989680 	.word	0x00989680
 800a19c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1a4:	e2d1      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1aa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	f040 809c 	bne.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a1b4:	4b93      	ldr	r3, [pc, #588]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1c4:	d054      	beq.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1cc:	f200 808b 	bhi.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1d6:	f000 8083 	beq.w	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1e0:	f200 8081 	bhi.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ea:	d02f      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1f2:	d878      	bhi.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a200:	d012      	beq.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a202:	e070      	b.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a204:	4b7f      	ldr	r3, [pc, #508]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a210:	d107      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fd5e 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a220:	e293      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a226:	e290      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a228:	4b76      	ldr	r3, [pc, #472]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a234:	d107      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a236:	f107 0318 	add.w	r3, r7, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 faa4 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a244:	e281      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a24a:	e27e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a24c:	4b6d      	ldr	r3, [pc, #436]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a258:	d107      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fbe6 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a268:	e26f      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a26e:	e26c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a270:	4b64      	ldr	r3, [pc, #400]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a278:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a27a:	4b62      	ldr	r3, [pc, #392]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b04      	cmp	r3, #4
 800a284:	d10c      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d109      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a28c:	4b5d      	ldr	r3, [pc, #372]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	08db      	lsrs	r3, r3, #3
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	4a5c      	ldr	r2, [pc, #368]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a298:	fa22 f303 	lsr.w	r3, r2, r3
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a29e:	e01e      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2a0:	4b58      	ldr	r3, [pc, #352]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ac:	d106      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2b4:	d102      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2b6:	4b55      	ldr	r3, [pc, #340]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ba:	e010      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2bc:	4b51      	ldr	r3, [pc, #324]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c8:	d106      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2d2:	4b4f      	ldr	r3, [pc, #316]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d6:	e002      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2dc:	e235      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2de:	e234      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2e0:	4b4c      	ldr	r3, [pc, #304]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e4:	e231      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ea:	e22e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	f040 808f 	bne.w	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a2fa:	4b42      	ldr	r3, [pc, #264]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a302:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a30a:	d06b      	beq.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a312:	d874      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a31a:	d056      	beq.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a322:	d86c      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a32a:	d03b      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a332:	d864      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33a:	d021      	beq.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a342:	d85c      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a350:	d004      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a352:	e054      	b.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a354:	f7fe fa30 	bl	80087b8 <HAL_RCC_GetPCLK1Freq>
 800a358:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a35a:	e1f6      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a35c:	4b29      	ldr	r3, [pc, #164]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a368:	d107      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a36a:	f107 0318 	add.w	r3, r7, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fa0a 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a378:	e1e7      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37e:	e1e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a380:	4b20      	ldr	r3, [pc, #128]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a38c:	d107      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fb4c 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39c:	e1d5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3a2:	e1d2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3a4:	4b17      	ldr	r3, [pc, #92]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d109      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3b0:	4b14      	ldr	r3, [pc, #80]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	08db      	lsrs	r3, r3, #3
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	4a13      	ldr	r2, [pc, #76]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c2:	e1c2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c8:	e1bf      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d6:	d102      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3dc:	e1b5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e2:	e1b2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3e4:	4b07      	ldr	r3, [pc, #28]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f0:	d102      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a3f2:	4b07      	ldr	r3, [pc, #28]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f6:	e1a8      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fc:	e1a5      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a402:	e1a2      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a404:	58024400 	.word	0x58024400
 800a408:	03d09000 	.word	0x03d09000
 800a40c:	003d0900 	.word	0x003d0900
 800a410:	00989680 	.word	0x00989680
 800a414:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a41c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a420:	430b      	orrs	r3, r1
 800a422:	d173      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a424:	4b9c      	ldr	r3, [pc, #624]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a42c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a434:	d02f      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a43c:	d863      	bhi.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a44a:	d012      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a44c:	e05b      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a44e:	4b92      	ldr	r3, [pc, #584]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45c:	f107 0318 	add.w	r3, r7, #24
 800a460:	4618      	mov	r0, r3
 800a462:	f000 f991 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e16e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a470:	e16b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a472:	4b89      	ldr	r3, [pc, #548]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fad3 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48e:	e15c      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a494:	e159      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a496:	4b80      	ldr	r3, [pc, #512]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b7d      	ldr	r3, [pc, #500]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b2:	4b79      	ldr	r3, [pc, #484]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a77      	ldr	r2, [pc, #476]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4c4:	e01e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b74      	ldr	r3, [pc, #464]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4dc:	4b70      	ldr	r3, [pc, #448]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e0:	e010      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b6d      	ldr	r3, [pc, #436]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f8:	4b6a      	ldr	r3, [pc, #424]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a502:	e122      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a504:	e121      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50a:	e11e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a514:	430b      	orrs	r3, r1
 800a516:	d133      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a518:	4b5f      	ldr	r3, [pc, #380]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a520:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a52e:	d012      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a530:	e023      	b.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a532:	4b59      	ldr	r3, [pc, #356]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a53a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a53e:	d107      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fbc7 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54e:	e0fc      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e0f9      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a556:	4b50      	ldr	r3, [pc, #320]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a55e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a562:	d107      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a564:	f107 0318 	add.w	r3, r7, #24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f90d 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a572:	e0ea      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a578:	e0e7      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a57e:	e0e4      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a584:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a588:	430b      	orrs	r3, r1
 800a58a:	f040 808d 	bne.w	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a58e:	4b42      	ldr	r3, [pc, #264]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a592:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a596:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a59e:	d06b      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a6:	d874      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ae:	d056      	beq.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b6:	d86c      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5be:	d03b      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5c6:	d864      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ce:	d021      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d6:	d85c      	bhi.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5e4:	d004      	beq.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a5e6:	e054      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a5e8:	f000 f8b8 	bl	800a75c <HAL_RCCEx_GetD3PCLK1Freq>
 800a5ec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5ee:	e0ac      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5f0:	4b29      	ldr	r3, [pc, #164]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5fc:	d107      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fe:	f107 0318 	add.w	r3, r7, #24
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f8c0 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a60c:	e09d      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a612:	e09a      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a614:	4b20      	ldr	r3, [pc, #128]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a620:	d107      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a622:	f107 030c 	add.w	r3, r7, #12
 800a626:	4618      	mov	r0, r3
 800a628:	f000 fa02 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a630:	e08b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a636:	e088      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d109      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a644:	4b14      	ldr	r3, [pc, #80]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	08db      	lsrs	r3, r3, #3
 800a64a:	f003 0303 	and.w	r3, r3, #3
 800a64e:	4a13      	ldr	r2, [pc, #76]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a650:	fa22 f303 	lsr.w	r3, r2, r3
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a656:	e078      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a65c:	e075      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a65e:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a66a:	d102      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a670:	e06b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a676:	e068      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a684:	d102      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68a:	e05e      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a690:	e05b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a696:	e058      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a698:	58024400 	.word	0x58024400
 800a69c:	03d09000 	.word	0x03d09000
 800a6a0:	003d0900 	.word	0x003d0900
 800a6a4:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	d148      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a6b4:	4b27      	ldr	r3, [pc, #156]	; (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c4:	d02a      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6cc:	d838      	bhi.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6da:	d00d      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a6dc:	e030      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6de:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ea:	d102      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f0:	e02b      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f6:	e028      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6f8:	4b16      	ldr	r3, [pc, #88]	; (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a704:	d107      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fae4 	bl	800acd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e019      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71a:	e016      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f82a 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	e007      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a73e:	e004      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a744:	e001      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3740      	adds	r7, #64	; 0x40
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	58024400 	.word	0x58024400
 800a758:	00989680 	.word	0x00989680

0800a75c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a760:	f7fd fffa 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 800a764:	4602      	mov	r2, r0
 800a766:	4b06      	ldr	r3, [pc, #24]	; (800a780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	091b      	lsrs	r3, r3, #4
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	4904      	ldr	r1, [pc, #16]	; (800a784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a772:	5ccb      	ldrb	r3, [r1, r3]
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	58024400 	.word	0x58024400
 800a784:	0800fb8c 	.word	0x0800fb8c

0800a788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a788:	b480      	push	{r7}
 800a78a:	b089      	sub	sp, #36	; 0x24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a790:	4ba1      	ldr	r3, [pc, #644]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a79a:	4b9f      	ldr	r3, [pc, #636]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79e:	0b1b      	lsrs	r3, r3, #12
 800a7a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a7a6:	4b9c      	ldr	r3, [pc, #624]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	091b      	lsrs	r3, r3, #4
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a7b2:	4b99      	ldr	r3, [pc, #612]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	08db      	lsrs	r3, r3, #3
 800a7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8111 	beq.w	800a9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	f000 8083 	beq.w	800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	f200 80a1 	bhi.w	800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d056      	beq.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7f2:	e099      	b.n	800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f4:	4b88      	ldr	r3, [pc, #544]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0320 	and.w	r3, r3, #32
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02d      	beq.n	800a85c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a800:	4b85      	ldr	r3, [pc, #532]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	08db      	lsrs	r3, r3, #3
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	4a84      	ldr	r2, [pc, #528]	; (800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
 800a810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82a:	4b7b      	ldr	r3, [pc, #492]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a85a:	e087      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86e:	4b6a      	ldr	r3, [pc, #424]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a882:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a89e:	e065      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b2:	4b59      	ldr	r3, [pc, #356]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8e2:	e043      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f6:	4b48      	ldr	r3, [pc, #288]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a906:	ed97 6a03 	vldr	s12, [r7, #12]
 800a90a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a926:	e021      	b.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b37      	ldr	r3, [pc, #220]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a96a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a96c:	4b2a      	ldr	r3, [pc, #168]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	0a5b      	lsrs	r3, r3, #9
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a982:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a986:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a992:	ee17 2a90 	vmov	r2, s15
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a99a:	4b1f      	ldr	r3, [pc, #124]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c0:	ee17 2a90 	vmov	r2, s15
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ee:	ee17 2a90 	vmov	r2, s15
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9f6:	e008      	b.n	800aa0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	609a      	str	r2, [r3, #8]
}
 800aa0a:	bf00      	nop
 800aa0c:	3724      	adds	r7, #36	; 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	03d09000 	.word	0x03d09000
 800aa20:	46000000 	.word	0x46000000
 800aa24:	4c742400 	.word	0x4c742400
 800aa28:	4a742400 	.word	0x4a742400
 800aa2c:	4b189680 	.word	0x4b189680

0800aa30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b089      	sub	sp, #36	; 0x24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa38:	4ba1      	ldr	r3, [pc, #644]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa42:	4b9f      	ldr	r3, [pc, #636]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	0d1b      	lsrs	r3, r3, #20
 800aa48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa4e:	4b9c      	ldr	r3, [pc, #624]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	0a1b      	lsrs	r3, r3, #8
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa5a:	4b99      	ldr	r3, [pc, #612]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	fb02 f303 	mul.w	r3, r2, r3
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8111 	beq.w	800aca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f000 8083 	beq.w	800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f200 80a1 	bhi.w	800abd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d056      	beq.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa9a:	e099      	b.n	800abd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa9c:	4b88      	ldr	r3, [pc, #544]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d02d      	beq.n	800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa8:	4b85      	ldr	r3, [pc, #532]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	4a84      	ldr	r2, [pc, #528]	; (800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
 800aab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad2:	4b7b      	ldr	r3, [pc, #492]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab02:	e087      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800accc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b6a      	ldr	r3, [pc, #424]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab46:	e065      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5a:	4b59      	ldr	r3, [pc, #356]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8a:	e043      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	4b48      	ldr	r3, [pc, #288]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abce:	e021      	b.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b37      	ldr	r3, [pc, #220]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ac14:	4b2a      	ldr	r3, [pc, #168]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	0a5b      	lsrs	r3, r3, #9
 800ac1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3a:	ee17 2a90 	vmov	r2, s15
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ac42:	4b1f      	ldr	r3, [pc, #124]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac68:	ee17 2a90 	vmov	r2, s15
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac70:	4b13      	ldr	r3, [pc, #76]	; (800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac96:	ee17 2a90 	vmov	r2, s15
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac9e:	e008      	b.n	800acb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	609a      	str	r2, [r3, #8]
}
 800acb2:	bf00      	nop
 800acb4:	3724      	adds	r7, #36	; 0x24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	58024400 	.word	0x58024400
 800acc4:	03d09000 	.word	0x03d09000
 800acc8:	46000000 	.word	0x46000000
 800accc:	4c742400 	.word	0x4c742400
 800acd0:	4a742400 	.word	0x4a742400
 800acd4:	4b189680 	.word	0x4b189680

0800acd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	; 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ace0:	4ba0      	ldr	r3, [pc, #640]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800acea:	4b9e      	ldr	r3, [pc, #632]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acee:	091b      	lsrs	r3, r3, #4
 800acf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acf4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800acf6:	4b9b      	ldr	r3, [pc, #620]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad00:	4b98      	ldr	r3, [pc, #608]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad04:	08db      	lsrs	r3, r3, #3
 800ad06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	fb02 f303 	mul.w	r3, r2, r3
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 8111 	beq.w	800af46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	f000 8083 	beq.w	800ae32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	f200 80a1 	bhi.w	800ae76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d056      	beq.n	800adee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ad40:	e099      	b.n	800ae76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad42:	4b88      	ldr	r3, [pc, #544]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d02d      	beq.n	800adaa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4e:	4b85      	ldr	r3, [pc, #532]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	08db      	lsrs	r3, r3, #3
 800ad54:	f003 0303 	and.w	r3, r3, #3
 800ad58:	4a83      	ldr	r2, [pc, #524]	; (800af68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ad5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad78:	4b7a      	ldr	r3, [pc, #488]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad88:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ada8:	e087      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800af70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800adb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbc:	4b69      	ldr	r3, [pc, #420]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800add0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800add4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800addc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adec:	e065      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800af74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800adfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae00:	4b58      	ldr	r3, [pc, #352]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae08:	ee07 3a90 	vmov	s15, r3
 800ae0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae14:	eddf 5a55 	vldr	s11, [pc, #340]	; 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae30:	e043      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800af78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ae40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae44:	4b47      	ldr	r3, [pc, #284]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae58:	eddf 5a44 	vldr	s11, [pc, #272]	; 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae74:	e021      	b.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800af70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae88:	4b36      	ldr	r3, [pc, #216]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae90:	ee07 3a90 	vmov	s15, r3
 800ae94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aeba:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	0a5b      	lsrs	r3, r3, #9
 800aec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee0:	ee17 2a90 	vmov	r2, s15
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aee8:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	0c1b      	lsrs	r3, r3, #16
 800aeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800af16:	4b13      	ldr	r3, [pc, #76]	; (800af64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1a:	0e1b      	lsrs	r3, r3, #24
 800af1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af30:	edd7 6a07 	vldr	s13, [r7, #28]
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 2a90 	vmov	r2, s15
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800af44:	e008      	b.n	800af58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	3724      	adds	r7, #36	; 0x24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	58024400 	.word	0x58024400
 800af68:	03d09000 	.word	0x03d09000
 800af6c:	46000000 	.word	0x46000000
 800af70:	4c742400 	.word	0x4c742400
 800af74:	4a742400 	.word	0x4a742400
 800af78:	4b189680 	.word	0x4b189680

0800af7c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800af84:	4b26      	ldr	r3, [pc, #152]	; (800b020 <HAL_RCCEx_CRSConfig+0xa4>)
 800af86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af8a:	4a25      	ldr	r2, [pc, #148]	; (800b020 <HAL_RCCEx_CRSConfig+0xa4>)
 800af8c:	f043 0302 	orr.w	r3, r3, #2
 800af90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800af94:	4b22      	ldr	r3, [pc, #136]	; (800b020 <HAL_RCCEx_CRSConfig+0xa4>)
 800af96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af9a:	4a21      	ldr	r2, [pc, #132]	; (800b020 <HAL_RCCEx_CRSConfig+0xa4>)
 800af9c:	f023 0302 	bic.w	r3, r3, #2
 800afa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800afa4:	f7f7 fd30 	bl	8002a08 <HAL_GetREVID>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f241 0203 	movw	r2, #4099	; 0x1003
 800afae:	4293      	cmp	r3, r2
 800afb0:	d80b      	bhi.n	800afca <HAL_RCCEx_CRSConfig+0x4e>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afba:	d106      	bne.n	800afca <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e008      	b.n	800afdc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	041b      	lsls	r3, r3, #16
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800aff2:	4a0c      	ldr	r2, [pc, #48]	; (800b024 <HAL_RCCEx_CRSConfig+0xa8>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800aff8:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <HAL_RCCEx_CRSConfig+0xa8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	4907      	ldr	r1, [pc, #28]	; (800b024 <HAL_RCCEx_CRSConfig+0xa8>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <HAL_RCCEx_CRSConfig+0xa8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a04      	ldr	r2, [pc, #16]	; (800b024 <HAL_RCCEx_CRSConfig+0xa8>)
 800b012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b016:	6013      	str	r3, [r2, #0]
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	58024400 	.word	0x58024400
 800b024:	40008400 	.word	0x40008400

0800b028 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b036:	4b53      	ldr	r3, [pc, #332]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d101      	bne.n	800b046 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e099      	b.n	800b17a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b046:	4b4f      	ldr	r3, [pc, #316]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a4e      	ldr	r2, [pc, #312]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b04c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b052:	f7f7 fca9 	bl	80029a8 <HAL_GetTick>
 800b056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b058:	e008      	b.n	800b06c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b05a:	f7f7 fca5 	bl	80029a8 <HAL_GetTick>
 800b05e:	4602      	mov	r2, r0
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	2b02      	cmp	r3, #2
 800b066:	d901      	bls.n	800b06c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e086      	b.n	800b17a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b06c:	4b45      	ldr	r3, [pc, #276]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1f0      	bne.n	800b05a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b078:	4b42      	ldr	r3, [pc, #264]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	031b      	lsls	r3, r3, #12
 800b086:	493f      	ldr	r1, [pc, #252]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	628b      	str	r3, [r1, #40]	; 0x28
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	3b01      	subs	r3, #1
 800b092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	025b      	lsls	r3, r3, #9
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	041b      	lsls	r3, r3, #16
 800b0aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	061b      	lsls	r3, r3, #24
 800b0b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0bc:	4931      	ldr	r1, [pc, #196]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b0c2:	4b30      	ldr	r3, [pc, #192]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	492d      	ldr	r1, [pc, #180]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b0d4:	4b2b      	ldr	r3, [pc, #172]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	f023 0220 	bic.w	r2, r3, #32
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	4928      	ldr	r1, [pc, #160]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b0e6:	4b27      	ldr	r3, [pc, #156]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	4a26      	ldr	r2, [pc, #152]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0ec:	f023 0310 	bic.w	r3, r3, #16
 800b0f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0f2:	4b24      	ldr	r3, [pc, #144]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b0f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0f6:	4b24      	ldr	r3, [pc, #144]	; (800b188 <RCCEx_PLL2_Config+0x160>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	69d2      	ldr	r2, [r2, #28]
 800b0fe:	00d2      	lsls	r2, r2, #3
 800b100:	4920      	ldr	r1, [pc, #128]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b102:	4313      	orrs	r3, r2
 800b104:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b106:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	4a1e      	ldr	r2, [pc, #120]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b10c:	f043 0310 	orr.w	r3, r3, #16
 800b110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b118:	4b1a      	ldr	r3, [pc, #104]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	4a19      	ldr	r2, [pc, #100]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b11e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b122:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b124:	e00f      	b.n	800b146 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d106      	bne.n	800b13a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b12c:	4b15      	ldr	r3, [pc, #84]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	4a14      	ldr	r2, [pc, #80]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b136:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b138:	e005      	b.n	800b146 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	4a11      	ldr	r2, [pc, #68]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b146:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a0e      	ldr	r2, [pc, #56]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b14c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b152:	f7f7 fc29 	bl	80029a8 <HAL_GetTick>
 800b156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b158:	e008      	b.n	800b16c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b15a:	f7f7 fc25 	bl	80029a8 <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e006      	b.n	800b17a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b16c:	4b05      	ldr	r3, [pc, #20]	; (800b184 <RCCEx_PLL2_Config+0x15c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d0f0      	beq.n	800b15a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	58024400 	.word	0x58024400
 800b188:	ffff0007 	.word	0xffff0007

0800b18c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b19a:	4b53      	ldr	r3, [pc, #332]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d101      	bne.n	800b1aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e099      	b.n	800b2de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1aa:	4b4f      	ldr	r3, [pc, #316]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a4e      	ldr	r2, [pc, #312]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b1b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b6:	f7f7 fbf7 	bl	80029a8 <HAL_GetTick>
 800b1ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1bc:	e008      	b.n	800b1d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1be:	f7f7 fbf3 	bl	80029a8 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d901      	bls.n	800b1d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e086      	b.n	800b2de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1d0:	4b45      	ldr	r3, [pc, #276]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f0      	bne.n	800b1be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b1dc:	4b42      	ldr	r3, [pc, #264]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	051b      	lsls	r3, r3, #20
 800b1ea:	493f      	ldr	r1, [pc, #252]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	628b      	str	r3, [r1, #40]	; 0x28
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	025b      	lsls	r3, r3, #9
 800b202:	b29b      	uxth	r3, r3
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	041b      	lsls	r3, r3, #16
 800b20e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	3b01      	subs	r3, #1
 800b21a:	061b      	lsls	r3, r3, #24
 800b21c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b220:	4931      	ldr	r1, [pc, #196]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b222:	4313      	orrs	r3, r2
 800b224:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b226:	4b30      	ldr	r3, [pc, #192]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	492d      	ldr	r1, [pc, #180]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b234:	4313      	orrs	r3, r2
 800b236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b238:	4b2b      	ldr	r3, [pc, #172]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	4928      	ldr	r1, [pc, #160]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b246:	4313      	orrs	r3, r2
 800b248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b24a:	4b27      	ldr	r3, [pc, #156]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	4a26      	ldr	r2, [pc, #152]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b256:	4b24      	ldr	r3, [pc, #144]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b25a:	4b24      	ldr	r3, [pc, #144]	; (800b2ec <RCCEx_PLL3_Config+0x160>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	69d2      	ldr	r2, [r2, #28]
 800b262:	00d2      	lsls	r2, r2, #3
 800b264:	4920      	ldr	r1, [pc, #128]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b266:	4313      	orrs	r3, r2
 800b268:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b26a:	4b1f      	ldr	r3, [pc, #124]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	4a1e      	ldr	r2, [pc, #120]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b27c:	4b1a      	ldr	r3, [pc, #104]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4a19      	ldr	r2, [pc, #100]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b288:	e00f      	b.n	800b2aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d106      	bne.n	800b29e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b290:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	4a14      	ldr	r2, [pc, #80]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b296:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b29a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b29c:	e005      	b.n	800b2aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b29e:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	4a11      	ldr	r2, [pc, #68]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2aa:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a0e      	ldr	r2, [pc, #56]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b2b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2b6:	f7f7 fb77 	bl	80029a8 <HAL_GetTick>
 800b2ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2bc:	e008      	b.n	800b2d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2be:	f7f7 fb73 	bl	80029a8 <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d901      	bls.n	800b2d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e006      	b.n	800b2de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2d0:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <RCCEx_PLL3_Config+0x15c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0f0      	beq.n	800b2be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	58024400 	.word	0x58024400
 800b2ec:	ffff0007 	.word	0xffff0007

0800b2f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e049      	b.n	800b396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7f7 f846 	bl	80023a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f000 f92e 	bl	800b590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_TIM_ConfigClockSource+0x1c>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e0dc      	b.n	800b576 <HAL_TIM_ConfigClockSource+0x1d6>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	4b6a      	ldr	r3, [pc, #424]	; (800b580 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3d8:	4013      	ands	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a64      	ldr	r2, [pc, #400]	; (800b584 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	f000 80a9 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f8:	4a62      	ldr	r2, [pc, #392]	; (800b584 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	f200 80ae 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b400:	4a61      	ldr	r2, [pc, #388]	; (800b588 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b402:	4293      	cmp	r3, r2
 800b404:	f000 80a1 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b408:	4a5f      	ldr	r2, [pc, #380]	; (800b588 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f200 80a6 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b410:	4a5e      	ldr	r2, [pc, #376]	; (800b58c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b412:	4293      	cmp	r3, r2
 800b414:	f000 8099 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b418:	4a5c      	ldr	r2, [pc, #368]	; (800b58c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	f200 809e 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b424:	f000 8091 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b428:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b42c:	f200 8096 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b434:	f000 8089 	beq.w	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b43c:	f200 808e 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b444:	d03e      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x124>
 800b446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44a:	f200 8087 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b452:	f000 8086 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x1c2>
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45a:	d87f      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b45c:	2b70      	cmp	r3, #112	; 0x70
 800b45e:	d01a      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0xf6>
 800b460:	2b70      	cmp	r3, #112	; 0x70
 800b462:	d87b      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b464:	2b60      	cmp	r3, #96	; 0x60
 800b466:	d050      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x16a>
 800b468:	2b60      	cmp	r3, #96	; 0x60
 800b46a:	d877      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	2b50      	cmp	r3, #80	; 0x50
 800b46e:	d03c      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x14a>
 800b470:	2b50      	cmp	r3, #80	; 0x50
 800b472:	d873      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b474:	2b40      	cmp	r3, #64	; 0x40
 800b476:	d058      	beq.n	800b52a <HAL_TIM_ConfigClockSource+0x18a>
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d86f      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b47c:	2b30      	cmp	r3, #48	; 0x30
 800b47e:	d064      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d86b      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b484:	2b20      	cmp	r3, #32
 800b486:	d060      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d867      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d05c      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b490:	2b10      	cmp	r3, #16
 800b492:	d05a      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x1aa>
 800b494:	e062      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6899      	ldr	r1, [r3, #8]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f000 f98b 	bl	800b7c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	609a      	str	r2, [r3, #8]
      break;
 800b4c2:	e04f      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	6899      	ldr	r1, [r3, #8]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	f000 f974 	bl	800b7c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4e6:	609a      	str	r2, [r3, #8]
      break;
 800b4e8:	e03c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6818      	ldr	r0, [r3, #0]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	6859      	ldr	r1, [r3, #4]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f000 f8e4 	bl	800b6c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2150      	movs	r1, #80	; 0x50
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f93e 	bl	800b784 <TIM_ITRx_SetConfig>
      break;
 800b508:	e02c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	6859      	ldr	r1, [r3, #4]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	461a      	mov	r2, r3
 800b518:	f000 f903 	bl	800b722 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2160      	movs	r1, #96	; 0x60
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f92e 	bl	800b784 <TIM_ITRx_SetConfig>
      break;
 800b528:	e01c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	6859      	ldr	r1, [r3, #4]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	461a      	mov	r2, r3
 800b538:	f000 f8c4 	bl	800b6c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2140      	movs	r1, #64	; 0x40
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f91e 	bl	800b784 <TIM_ITRx_SetConfig>
      break;
 800b548:	e00c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4619      	mov	r1, r3
 800b554:	4610      	mov	r0, r2
 800b556:	f000 f915 	bl	800b784 <TIM_ITRx_SetConfig>
      break;
 800b55a:	e003      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
      break;
 800b560:	e000      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	ffceff88 	.word	0xffceff88
 800b584:	00100040 	.word	0x00100040
 800b588:	00100030 	.word	0x00100030
 800b58c:	00100020 	.word	0x00100020

0800b590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a40      	ldr	r2, [pc, #256]	; (800b6a4 <TIM_Base_SetConfig+0x114>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d013      	beq.n	800b5d0 <TIM_Base_SetConfig+0x40>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ae:	d00f      	beq.n	800b5d0 <TIM_Base_SetConfig+0x40>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a3d      	ldr	r2, [pc, #244]	; (800b6a8 <TIM_Base_SetConfig+0x118>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00b      	beq.n	800b5d0 <TIM_Base_SetConfig+0x40>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a3c      	ldr	r2, [pc, #240]	; (800b6ac <TIM_Base_SetConfig+0x11c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d007      	beq.n	800b5d0 <TIM_Base_SetConfig+0x40>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a3b      	ldr	r2, [pc, #236]	; (800b6b0 <TIM_Base_SetConfig+0x120>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d003      	beq.n	800b5d0 <TIM_Base_SetConfig+0x40>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a3a      	ldr	r2, [pc, #232]	; (800b6b4 <TIM_Base_SetConfig+0x124>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d108      	bne.n	800b5e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a2f      	ldr	r2, [pc, #188]	; (800b6a4 <TIM_Base_SetConfig+0x114>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d01f      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f0:	d01b      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a2c      	ldr	r2, [pc, #176]	; (800b6a8 <TIM_Base_SetConfig+0x118>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d017      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a2b      	ldr	r2, [pc, #172]	; (800b6ac <TIM_Base_SetConfig+0x11c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d013      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a2a      	ldr	r2, [pc, #168]	; (800b6b0 <TIM_Base_SetConfig+0x120>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d00f      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a29      	ldr	r2, [pc, #164]	; (800b6b4 <TIM_Base_SetConfig+0x124>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d00b      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a28      	ldr	r2, [pc, #160]	; (800b6b8 <TIM_Base_SetConfig+0x128>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d007      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a27      	ldr	r2, [pc, #156]	; (800b6bc <TIM_Base_SetConfig+0x12c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d003      	beq.n	800b62a <TIM_Base_SetConfig+0x9a>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a26      	ldr	r2, [pc, #152]	; (800b6c0 <TIM_Base_SetConfig+0x130>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d108      	bne.n	800b63c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4313      	orrs	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a10      	ldr	r2, [pc, #64]	; (800b6a4 <TIM_Base_SetConfig+0x114>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d00f      	beq.n	800b688 <TIM_Base_SetConfig+0xf8>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <TIM_Base_SetConfig+0x124>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d00b      	beq.n	800b688 <TIM_Base_SetConfig+0xf8>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a11      	ldr	r2, [pc, #68]	; (800b6b8 <TIM_Base_SetConfig+0x128>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d007      	beq.n	800b688 <TIM_Base_SetConfig+0xf8>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a10      	ldr	r2, [pc, #64]	; (800b6bc <TIM_Base_SetConfig+0x12c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d003      	beq.n	800b688 <TIM_Base_SetConfig+0xf8>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a0f      	ldr	r2, [pc, #60]	; (800b6c0 <TIM_Base_SetConfig+0x130>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d103      	bne.n	800b690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	691a      	ldr	r2, [r3, #16]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	615a      	str	r2, [r3, #20]
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	40010000 	.word	0x40010000
 800b6a8:	40000400 	.word	0x40000400
 800b6ac:	40000800 	.word	0x40000800
 800b6b0:	40000c00 	.word	0x40000c00
 800b6b4:	40010400 	.word	0x40010400
 800b6b8:	40014000 	.word	0x40014000
 800b6bc:	40014400 	.word	0x40014400
 800b6c0:	40014800 	.word	0x40014800

0800b6c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a1b      	ldr	r3, [r3, #32]
 800b6d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	f023 0201 	bic.w	r2, r3, #1
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f023 030a 	bic.w	r3, r3, #10
 800b700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	4313      	orrs	r3, r2
 800b708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	621a      	str	r2, [r3, #32]
}
 800b716:	bf00      	nop
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b722:	b480      	push	{r7}
 800b724:	b087      	sub	sp, #28
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0210 	bic.w	r2, r3, #16
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b74c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	031b      	lsls	r3, r3, #12
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b75e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	011b      	lsls	r3, r3, #4
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	4313      	orrs	r3, r2
 800b768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	621a      	str	r2, [r3, #32]
}
 800b776:	bf00      	nop
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	4b09      	ldr	r3, [pc, #36]	; (800b7bc <TIM_ITRx_SetConfig+0x38>)
 800b798:	4013      	ands	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	f043 0307 	orr.w	r3, r3, #7
 800b7a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	609a      	str	r2, [r3, #8]
}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	ffcfff8f 	.word	0xffcfff8f

0800b7c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	021a      	lsls	r2, r3, #8
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	697a      	ldr	r2, [r7, #20]
 800b7f2:	609a      	str	r2, [r3, #8]
}
 800b7f4:	bf00      	nop
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b810:	2b01      	cmp	r3, #1
 800b812:	d101      	bne.n	800b818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b814:	2302      	movs	r3, #2
 800b816:	e06d      	b.n	800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a30      	ldr	r2, [pc, #192]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d004      	beq.n	800b84c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a2f      	ldr	r2, [pc, #188]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d108      	bne.n	800b85e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a20      	ldr	r2, [pc, #128]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d022      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88a:	d01d      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1d      	ldr	r2, [pc, #116]	; (800b908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d018      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a1c      	ldr	r2, [pc, #112]	; (800b90c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d013      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a1a      	ldr	r2, [pc, #104]	; (800b910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a15      	ldr	r2, [pc, #84]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a16      	ldr	r2, [pc, #88]	; (800b914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a15      	ldr	r2, [pc, #84]	; (800b918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d10c      	bne.n	800b8e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40010000 	.word	0x40010000
 800b904:	40010400 	.word	0x40010400
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40001800 	.word	0x40001800
 800b918:	40014000 	.word	0x40014000

0800b91c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e042      	b.n	800b9b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7f6 fd6b 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2224      	movs	r2, #36	; 0x24
 800b94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0201 	bic.w	r2, r2, #1
 800b95c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f8ba 	bl	800bad8 <UART_SetConfig>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e022      	b.n	800b9b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fe16 	bl	800c5a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b98a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b99a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f042 0201 	orr.w	r2, r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fe9d 	bl	800c6ec <UART_CheckIdleState>
 800b9b2:	4603      	mov	r3, r0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08a      	sub	sp, #40	; 0x28
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d17b      	bne.n	800bace <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <HAL_UART_Transmit+0x26>
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e074      	b.n	800bad0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2221      	movs	r2, #33	; 0x21
 800b9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9f6:	f7f6 ffd7 	bl	80029a8 <HAL_GetTick>
 800b9fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	88fa      	ldrh	r2, [r7, #6]
 800ba00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	88fa      	ldrh	r2, [r7, #6]
 800ba08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba14:	d108      	bne.n	800ba28 <HAL_UART_Transmit+0x6c>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d104      	bne.n	800ba28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	61bb      	str	r3, [r7, #24]
 800ba26:	e003      	b.n	800ba30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba30:	e030      	b.n	800ba94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2180      	movs	r1, #128	; 0x80
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 feff 	bl	800c840 <UART_WaitOnFlagUntilTimeout>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2220      	movs	r2, #32
 800ba4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e03d      	b.n	800bad0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10b      	bne.n	800ba72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	3302      	adds	r3, #2
 800ba6e:	61bb      	str	r3, [r7, #24]
 800ba70:	e007      	b.n	800ba82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	781a      	ldrb	r2, [r3, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1c8      	bne.n	800ba32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2140      	movs	r1, #64	; 0x40
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 fec8 	bl	800c840 <UART_WaitOnFlagUntilTimeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d005      	beq.n	800bac2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2220      	movs	r2, #32
 800baba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e006      	b.n	800bad0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	e000      	b.n	800bad0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bace:	2302      	movs	r3, #2
  }
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3720      	adds	r7, #32
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800badc:	b092      	sub	sp, #72	; 0x48
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	431a      	orrs	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	431a      	orrs	r2, r3
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	4bbe      	ldr	r3, [pc, #760]	; (800be00 <UART_SetConfig+0x328>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	6812      	ldr	r2, [r2, #0]
 800bb0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb10:	430b      	orrs	r3, r1
 800bb12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4ab3      	ldr	r2, [pc, #716]	; (800be04 <UART_SetConfig+0x32c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d004      	beq.n	800bb44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb40:	4313      	orrs	r3, r2
 800bb42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	4baf      	ldr	r3, [pc, #700]	; (800be08 <UART_SetConfig+0x330>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	6812      	ldr	r2, [r2, #0]
 800bb52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb54:	430b      	orrs	r3, r1
 800bb56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5e:	f023 010f 	bic.w	r1, r3, #15
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4aa6      	ldr	r2, [pc, #664]	; (800be0c <UART_SetConfig+0x334>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d177      	bne.n	800bc68 <UART_SetConfig+0x190>
 800bb78:	4ba5      	ldr	r3, [pc, #660]	; (800be10 <UART_SetConfig+0x338>)
 800bb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb80:	2b28      	cmp	r3, #40	; 0x28
 800bb82:	d86d      	bhi.n	800bc60 <UART_SetConfig+0x188>
 800bb84:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0xb4>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bc31 	.word	0x0800bc31
 800bb90:	0800bc61 	.word	0x0800bc61
 800bb94:	0800bc61 	.word	0x0800bc61
 800bb98:	0800bc61 	.word	0x0800bc61
 800bb9c:	0800bc61 	.word	0x0800bc61
 800bba0:	0800bc61 	.word	0x0800bc61
 800bba4:	0800bc61 	.word	0x0800bc61
 800bba8:	0800bc61 	.word	0x0800bc61
 800bbac:	0800bc39 	.word	0x0800bc39
 800bbb0:	0800bc61 	.word	0x0800bc61
 800bbb4:	0800bc61 	.word	0x0800bc61
 800bbb8:	0800bc61 	.word	0x0800bc61
 800bbbc:	0800bc61 	.word	0x0800bc61
 800bbc0:	0800bc61 	.word	0x0800bc61
 800bbc4:	0800bc61 	.word	0x0800bc61
 800bbc8:	0800bc61 	.word	0x0800bc61
 800bbcc:	0800bc41 	.word	0x0800bc41
 800bbd0:	0800bc61 	.word	0x0800bc61
 800bbd4:	0800bc61 	.word	0x0800bc61
 800bbd8:	0800bc61 	.word	0x0800bc61
 800bbdc:	0800bc61 	.word	0x0800bc61
 800bbe0:	0800bc61 	.word	0x0800bc61
 800bbe4:	0800bc61 	.word	0x0800bc61
 800bbe8:	0800bc61 	.word	0x0800bc61
 800bbec:	0800bc49 	.word	0x0800bc49
 800bbf0:	0800bc61 	.word	0x0800bc61
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800bc61 	.word	0x0800bc61
 800bbfc:	0800bc61 	.word	0x0800bc61
 800bc00:	0800bc61 	.word	0x0800bc61
 800bc04:	0800bc61 	.word	0x0800bc61
 800bc08:	0800bc61 	.word	0x0800bc61
 800bc0c:	0800bc51 	.word	0x0800bc51
 800bc10:	0800bc61 	.word	0x0800bc61
 800bc14:	0800bc61 	.word	0x0800bc61
 800bc18:	0800bc61 	.word	0x0800bc61
 800bc1c:	0800bc61 	.word	0x0800bc61
 800bc20:	0800bc61 	.word	0x0800bc61
 800bc24:	0800bc61 	.word	0x0800bc61
 800bc28:	0800bc61 	.word	0x0800bc61
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc36:	e222      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e21e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc40:	2308      	movs	r3, #8
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e21a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e216      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc50:	2320      	movs	r3, #32
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e212      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc58:	2340      	movs	r3, #64	; 0x40
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e20e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e20a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a69      	ldr	r2, [pc, #420]	; (800be14 <UART_SetConfig+0x33c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d130      	bne.n	800bcd4 <UART_SetConfig+0x1fc>
 800bc72:	4b67      	ldr	r3, [pc, #412]	; (800be10 <UART_SetConfig+0x338>)
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	d826      	bhi.n	800bccc <UART_SetConfig+0x1f4>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <UART_SetConfig+0x1ac>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bc9d 	.word	0x0800bc9d
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bcad 	.word	0x0800bcad
 800bc90:	0800bcb5 	.word	0x0800bcb5
 800bc94:	0800bcbd 	.word	0x0800bcbd
 800bc98:	0800bcc5 	.word	0x0800bcc5
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca2:	e1ec      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bca4:	2304      	movs	r3, #4
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcaa:	e1e8      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bcac:	2308      	movs	r3, #8
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb2:	e1e4      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcba:	e1e0      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bcbc:	2320      	movs	r3, #32
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc2:	e1dc      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bcc4:	2340      	movs	r3, #64	; 0x40
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e1d8      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bccc:	2380      	movs	r3, #128	; 0x80
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e1d4      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a4f      	ldr	r2, [pc, #316]	; (800be18 <UART_SetConfig+0x340>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d130      	bne.n	800bd40 <UART_SetConfig+0x268>
 800bcde:	4b4c      	ldr	r3, [pc, #304]	; (800be10 <UART_SetConfig+0x338>)
 800bce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	2b05      	cmp	r3, #5
 800bce8:	d826      	bhi.n	800bd38 <UART_SetConfig+0x260>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <UART_SetConfig+0x218>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd09 	.word	0x0800bd09
 800bcf4:	0800bd11 	.word	0x0800bd11
 800bcf8:	0800bd19 	.word	0x0800bd19
 800bcfc:	0800bd21 	.word	0x0800bd21
 800bd00:	0800bd29 	.word	0x0800bd29
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0e:	e1b6      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd10:	2304      	movs	r3, #4
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd16:	e1b2      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd18:	2308      	movs	r3, #8
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1e:	e1ae      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd20:	2310      	movs	r3, #16
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd26:	e1aa      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2e:	e1a6      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd30:	2340      	movs	r3, #64	; 0x40
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e1a2      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd38:	2380      	movs	r3, #128	; 0x80
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e19e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a35      	ldr	r2, [pc, #212]	; (800be1c <UART_SetConfig+0x344>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d130      	bne.n	800bdac <UART_SetConfig+0x2d4>
 800bd4a:	4b31      	ldr	r3, [pc, #196]	; (800be10 <UART_SetConfig+0x338>)
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d826      	bhi.n	800bda4 <UART_SetConfig+0x2cc>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <UART_SetConfig+0x284>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd75 	.word	0x0800bd75
 800bd60:	0800bd7d 	.word	0x0800bd7d
 800bd64:	0800bd85 	.word	0x0800bd85
 800bd68:	0800bd8d 	.word	0x0800bd8d
 800bd6c:	0800bd95 	.word	0x0800bd95
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	2300      	movs	r3, #0
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7a:	e180      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e17c      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd84:	2308      	movs	r3, #8
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e178      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd8c:	2310      	movs	r3, #16
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e174      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd94:	2320      	movs	r3, #32
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e170      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e16c      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bda4:	2380      	movs	r3, #128	; 0x80
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdaa:	e168      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a1b      	ldr	r2, [pc, #108]	; (800be20 <UART_SetConfig+0x348>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d142      	bne.n	800be3c <UART_SetConfig+0x364>
 800bdb6:	4b16      	ldr	r3, [pc, #88]	; (800be10 <UART_SetConfig+0x338>)
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b05      	cmp	r3, #5
 800bdc0:	d838      	bhi.n	800be34 <UART_SetConfig+0x35c>
 800bdc2:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <UART_SetConfig+0x2f0>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800bde1 	.word	0x0800bde1
 800bdcc:	0800bde9 	.word	0x0800bde9
 800bdd0:	0800bdf1 	.word	0x0800bdf1
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be25 	.word	0x0800be25
 800bddc:	0800be2d 	.word	0x0800be2d
 800bde0:	2300      	movs	r3, #0
 800bde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bde6:	e14a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bde8:	2304      	movs	r3, #4
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdee:	e146      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf6:	e142      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfe:	e13e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800be00:	cfff69f3 	.word	0xcfff69f3
 800be04:	58000c00 	.word	0x58000c00
 800be08:	11fff4ff 	.word	0x11fff4ff
 800be0c:	40011000 	.word	0x40011000
 800be10:	58024400 	.word	0x58024400
 800be14:	40004400 	.word	0x40004400
 800be18:	40004800 	.word	0x40004800
 800be1c:	40004c00 	.word	0x40004c00
 800be20:	40005000 	.word	0x40005000
 800be24:	2320      	movs	r3, #32
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2a:	e128      	b.n	800c07e <UART_SetConfig+0x5a6>
 800be2c:	2340      	movs	r3, #64	; 0x40
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be32:	e124      	b.n	800c07e <UART_SetConfig+0x5a6>
 800be34:	2380      	movs	r3, #128	; 0x80
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3a:	e120      	b.n	800c07e <UART_SetConfig+0x5a6>
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4acb      	ldr	r2, [pc, #812]	; (800c170 <UART_SetConfig+0x698>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d176      	bne.n	800bf34 <UART_SetConfig+0x45c>
 800be46:	4bcb      	ldr	r3, [pc, #812]	; (800c174 <UART_SetConfig+0x69c>)
 800be48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be4e:	2b28      	cmp	r3, #40	; 0x28
 800be50:	d86c      	bhi.n	800bf2c <UART_SetConfig+0x454>
 800be52:	a201      	add	r2, pc, #4	; (adr r2, 800be58 <UART_SetConfig+0x380>)
 800be54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be58:	0800befd 	.word	0x0800befd
 800be5c:	0800bf2d 	.word	0x0800bf2d
 800be60:	0800bf2d 	.word	0x0800bf2d
 800be64:	0800bf2d 	.word	0x0800bf2d
 800be68:	0800bf2d 	.word	0x0800bf2d
 800be6c:	0800bf2d 	.word	0x0800bf2d
 800be70:	0800bf2d 	.word	0x0800bf2d
 800be74:	0800bf2d 	.word	0x0800bf2d
 800be78:	0800bf05 	.word	0x0800bf05
 800be7c:	0800bf2d 	.word	0x0800bf2d
 800be80:	0800bf2d 	.word	0x0800bf2d
 800be84:	0800bf2d 	.word	0x0800bf2d
 800be88:	0800bf2d 	.word	0x0800bf2d
 800be8c:	0800bf2d 	.word	0x0800bf2d
 800be90:	0800bf2d 	.word	0x0800bf2d
 800be94:	0800bf2d 	.word	0x0800bf2d
 800be98:	0800bf0d 	.word	0x0800bf0d
 800be9c:	0800bf2d 	.word	0x0800bf2d
 800bea0:	0800bf2d 	.word	0x0800bf2d
 800bea4:	0800bf2d 	.word	0x0800bf2d
 800bea8:	0800bf2d 	.word	0x0800bf2d
 800beac:	0800bf2d 	.word	0x0800bf2d
 800beb0:	0800bf2d 	.word	0x0800bf2d
 800beb4:	0800bf2d 	.word	0x0800bf2d
 800beb8:	0800bf15 	.word	0x0800bf15
 800bebc:	0800bf2d 	.word	0x0800bf2d
 800bec0:	0800bf2d 	.word	0x0800bf2d
 800bec4:	0800bf2d 	.word	0x0800bf2d
 800bec8:	0800bf2d 	.word	0x0800bf2d
 800becc:	0800bf2d 	.word	0x0800bf2d
 800bed0:	0800bf2d 	.word	0x0800bf2d
 800bed4:	0800bf2d 	.word	0x0800bf2d
 800bed8:	0800bf1d 	.word	0x0800bf1d
 800bedc:	0800bf2d 	.word	0x0800bf2d
 800bee0:	0800bf2d 	.word	0x0800bf2d
 800bee4:	0800bf2d 	.word	0x0800bf2d
 800bee8:	0800bf2d 	.word	0x0800bf2d
 800beec:	0800bf2d 	.word	0x0800bf2d
 800bef0:	0800bf2d 	.word	0x0800bf2d
 800bef4:	0800bf2d 	.word	0x0800bf2d
 800bef8:	0800bf25 	.word	0x0800bf25
 800befc:	2301      	movs	r3, #1
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e0bc      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf04:	2304      	movs	r3, #4
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0a:	e0b8      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf0c:	2308      	movs	r3, #8
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf12:	e0b4      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf14:	2310      	movs	r3, #16
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e0b0      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e0ac      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e0a8      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf2c:	2380      	movs	r3, #128	; 0x80
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e0a4      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a8f      	ldr	r2, [pc, #572]	; (800c178 <UART_SetConfig+0x6a0>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d130      	bne.n	800bfa0 <UART_SetConfig+0x4c8>
 800bf3e:	4b8d      	ldr	r3, [pc, #564]	; (800c174 <UART_SetConfig+0x69c>)
 800bf40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d826      	bhi.n	800bf98 <UART_SetConfig+0x4c0>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <UART_SetConfig+0x478>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bf69 	.word	0x0800bf69
 800bf54:	0800bf71 	.word	0x0800bf71
 800bf58:	0800bf79 	.word	0x0800bf79
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf89 	.word	0x0800bf89
 800bf64:	0800bf91 	.word	0x0800bf91
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e086      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf70:	2304      	movs	r3, #4
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e082      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e07e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf80:	2310      	movs	r3, #16
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e07a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf88:	2320      	movs	r3, #32
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e076      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf90:	2340      	movs	r3, #64	; 0x40
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e072      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e06e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a75      	ldr	r2, [pc, #468]	; (800c17c <UART_SetConfig+0x6a4>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d130      	bne.n	800c00c <UART_SetConfig+0x534>
 800bfaa:	4b72      	ldr	r3, [pc, #456]	; (800c174 <UART_SetConfig+0x69c>)
 800bfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfae:	f003 0307 	and.w	r3, r3, #7
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d826      	bhi.n	800c004 <UART_SetConfig+0x52c>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <UART_SetConfig+0x4e4>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800bfd5 	.word	0x0800bfd5
 800bfc0:	0800bfdd 	.word	0x0800bfdd
 800bfc4:	0800bfe5 	.word	0x0800bfe5
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bff5 	.word	0x0800bff5
 800bfd0:	0800bffd 	.word	0x0800bffd
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e050      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bfdc:	2304      	movs	r3, #4
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e04c      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e048      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bfec:	2310      	movs	r3, #16
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e044      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bff4:	2320      	movs	r3, #32
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e040      	b.n	800c07e <UART_SetConfig+0x5a6>
 800bffc:	2340      	movs	r3, #64	; 0x40
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e03c      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c004:	2380      	movs	r3, #128	; 0x80
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e038      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a5b      	ldr	r2, [pc, #364]	; (800c180 <UART_SetConfig+0x6a8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d130      	bne.n	800c078 <UART_SetConfig+0x5a0>
 800c016:	4b57      	ldr	r3, [pc, #348]	; (800c174 <UART_SetConfig+0x69c>)
 800c018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	2b05      	cmp	r3, #5
 800c020:	d826      	bhi.n	800c070 <UART_SetConfig+0x598>
 800c022:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <UART_SetConfig+0x550>)
 800c024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c028:	0800c041 	.word	0x0800c041
 800c02c:	0800c049 	.word	0x0800c049
 800c030:	0800c051 	.word	0x0800c051
 800c034:	0800c059 	.word	0x0800c059
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c069 	.word	0x0800c069
 800c040:	2302      	movs	r3, #2
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e01a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c048:	2304      	movs	r3, #4
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e016      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c050:	2308      	movs	r3, #8
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e012      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c058:	2310      	movs	r3, #16
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e00e      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c060:	2320      	movs	r3, #32
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e00a      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c068:	2340      	movs	r3, #64	; 0x40
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e006      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c070:	2380      	movs	r3, #128	; 0x80
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e002      	b.n	800c07e <UART_SetConfig+0x5a6>
 800c078:	2380      	movs	r3, #128	; 0x80
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a3f      	ldr	r2, [pc, #252]	; (800c180 <UART_SetConfig+0x6a8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	f040 80f8 	bne.w	800c27a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c08a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c08e:	2b20      	cmp	r3, #32
 800c090:	dc46      	bgt.n	800c120 <UART_SetConfig+0x648>
 800c092:	2b02      	cmp	r3, #2
 800c094:	f2c0 8082 	blt.w	800c19c <UART_SetConfig+0x6c4>
 800c098:	3b02      	subs	r3, #2
 800c09a:	2b1e      	cmp	r3, #30
 800c09c:	d87e      	bhi.n	800c19c <UART_SetConfig+0x6c4>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <UART_SetConfig+0x5cc>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c127 	.word	0x0800c127
 800c0a8:	0800c19d 	.word	0x0800c19d
 800c0ac:	0800c12f 	.word	0x0800c12f
 800c0b0:	0800c19d 	.word	0x0800c19d
 800c0b4:	0800c19d 	.word	0x0800c19d
 800c0b8:	0800c19d 	.word	0x0800c19d
 800c0bc:	0800c13f 	.word	0x0800c13f
 800c0c0:	0800c19d 	.word	0x0800c19d
 800c0c4:	0800c19d 	.word	0x0800c19d
 800c0c8:	0800c19d 	.word	0x0800c19d
 800c0cc:	0800c19d 	.word	0x0800c19d
 800c0d0:	0800c19d 	.word	0x0800c19d
 800c0d4:	0800c19d 	.word	0x0800c19d
 800c0d8:	0800c19d 	.word	0x0800c19d
 800c0dc:	0800c14f 	.word	0x0800c14f
 800c0e0:	0800c19d 	.word	0x0800c19d
 800c0e4:	0800c19d 	.word	0x0800c19d
 800c0e8:	0800c19d 	.word	0x0800c19d
 800c0ec:	0800c19d 	.word	0x0800c19d
 800c0f0:	0800c19d 	.word	0x0800c19d
 800c0f4:	0800c19d 	.word	0x0800c19d
 800c0f8:	0800c19d 	.word	0x0800c19d
 800c0fc:	0800c19d 	.word	0x0800c19d
 800c100:	0800c19d 	.word	0x0800c19d
 800c104:	0800c19d 	.word	0x0800c19d
 800c108:	0800c19d 	.word	0x0800c19d
 800c10c:	0800c19d 	.word	0x0800c19d
 800c110:	0800c19d 	.word	0x0800c19d
 800c114:	0800c19d 	.word	0x0800c19d
 800c118:	0800c19d 	.word	0x0800c19d
 800c11c:	0800c18f 	.word	0x0800c18f
 800c120:	2b40      	cmp	r3, #64	; 0x40
 800c122:	d037      	beq.n	800c194 <UART_SetConfig+0x6bc>
 800c124:	e03a      	b.n	800c19c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c126:	f7fe fb19 	bl	800a75c <HAL_RCCEx_GetD3PCLK1Freq>
 800c12a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c12c:	e03c      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c12e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fb28 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13c:	e034      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c13e:	f107 0318 	add.w	r3, r7, #24
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe fc74 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14c:	e02c      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c14e:	4b09      	ldr	r3, [pc, #36]	; (800c174 <UART_SetConfig+0x69c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0320 	and.w	r3, r3, #32
 800c156:	2b00      	cmp	r3, #0
 800c158:	d016      	beq.n	800c188 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c15a:	4b06      	ldr	r3, [pc, #24]	; (800c174 <UART_SetConfig+0x69c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	08db      	lsrs	r3, r3, #3
 800c160:	f003 0303 	and.w	r3, r3, #3
 800c164:	4a07      	ldr	r2, [pc, #28]	; (800c184 <UART_SetConfig+0x6ac>)
 800c166:	fa22 f303 	lsr.w	r3, r2, r3
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c16c:	e01c      	b.n	800c1a8 <UART_SetConfig+0x6d0>
 800c16e:	bf00      	nop
 800c170:	40011400 	.word	0x40011400
 800c174:	58024400 	.word	0x58024400
 800c178:	40007800 	.word	0x40007800
 800c17c:	40007c00 	.word	0x40007c00
 800c180:	58000c00 	.word	0x58000c00
 800c184:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c188:	4b9d      	ldr	r3, [pc, #628]	; (800c400 <UART_SetConfig+0x928>)
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18c:	e00c      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c18e:	4b9d      	ldr	r3, [pc, #628]	; (800c404 <UART_SetConfig+0x92c>)
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c192:	e009      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19a:	e005      	b.n	800c1a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c19c:	2300      	movs	r3, #0
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c1a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f000 81de 	beq.w	800c56c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	4a94      	ldr	r2, [pc, #592]	; (800c408 <UART_SetConfig+0x930>)
 800c1b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	4413      	add	r3, r2
 800c1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d305      	bcc.n	800c1e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d903      	bls.n	800c1e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c1e6:	e1c1      	b.n	800c56c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	60bb      	str	r3, [r7, #8]
 800c1ee:	60fa      	str	r2, [r7, #12]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	4a84      	ldr	r2, [pc, #528]	; (800c408 <UART_SetConfig+0x930>)
 800c1f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c20a:	f7f4 fd09 	bl	8000c20 <__aeabi_uldivmod>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4610      	mov	r0, r2
 800c214:	4619      	mov	r1, r3
 800c216:	f04f 0200 	mov.w	r2, #0
 800c21a:	f04f 0300 	mov.w	r3, #0
 800c21e:	020b      	lsls	r3, r1, #8
 800c220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c224:	0202      	lsls	r2, r0, #8
 800c226:	6979      	ldr	r1, [r7, #20]
 800c228:	6849      	ldr	r1, [r1, #4]
 800c22a:	0849      	lsrs	r1, r1, #1
 800c22c:	2000      	movs	r0, #0
 800c22e:	460c      	mov	r4, r1
 800c230:	4605      	mov	r5, r0
 800c232:	eb12 0804 	adds.w	r8, r2, r4
 800c236:	eb43 0905 	adc.w	r9, r3, r5
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	469a      	mov	sl, r3
 800c242:	4693      	mov	fp, r2
 800c244:	4652      	mov	r2, sl
 800c246:	465b      	mov	r3, fp
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 fce8 	bl	8000c20 <__aeabi_uldivmod>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4613      	mov	r3, r2
 800c256:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c25e:	d308      	bcc.n	800c272 <UART_SetConfig+0x79a>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c266:	d204      	bcs.n	800c272 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c26e:	60da      	str	r2, [r3, #12]
 800c270:	e17c      	b.n	800c56c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c278:	e178      	b.n	800c56c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c282:	f040 80c5 	bne.w	800c410 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c286:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c28a:	2b20      	cmp	r3, #32
 800c28c:	dc48      	bgt.n	800c320 <UART_SetConfig+0x848>
 800c28e:	2b00      	cmp	r3, #0
 800c290:	db7b      	blt.n	800c38a <UART_SetConfig+0x8b2>
 800c292:	2b20      	cmp	r3, #32
 800c294:	d879      	bhi.n	800c38a <UART_SetConfig+0x8b2>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x7c4>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c327 	.word	0x0800c327
 800c2a0:	0800c32f 	.word	0x0800c32f
 800c2a4:	0800c38b 	.word	0x0800c38b
 800c2a8:	0800c38b 	.word	0x0800c38b
 800c2ac:	0800c337 	.word	0x0800c337
 800c2b0:	0800c38b 	.word	0x0800c38b
 800c2b4:	0800c38b 	.word	0x0800c38b
 800c2b8:	0800c38b 	.word	0x0800c38b
 800c2bc:	0800c347 	.word	0x0800c347
 800c2c0:	0800c38b 	.word	0x0800c38b
 800c2c4:	0800c38b 	.word	0x0800c38b
 800c2c8:	0800c38b 	.word	0x0800c38b
 800c2cc:	0800c38b 	.word	0x0800c38b
 800c2d0:	0800c38b 	.word	0x0800c38b
 800c2d4:	0800c38b 	.word	0x0800c38b
 800c2d8:	0800c38b 	.word	0x0800c38b
 800c2dc:	0800c357 	.word	0x0800c357
 800c2e0:	0800c38b 	.word	0x0800c38b
 800c2e4:	0800c38b 	.word	0x0800c38b
 800c2e8:	0800c38b 	.word	0x0800c38b
 800c2ec:	0800c38b 	.word	0x0800c38b
 800c2f0:	0800c38b 	.word	0x0800c38b
 800c2f4:	0800c38b 	.word	0x0800c38b
 800c2f8:	0800c38b 	.word	0x0800c38b
 800c2fc:	0800c38b 	.word	0x0800c38b
 800c300:	0800c38b 	.word	0x0800c38b
 800c304:	0800c38b 	.word	0x0800c38b
 800c308:	0800c38b 	.word	0x0800c38b
 800c30c:	0800c38b 	.word	0x0800c38b
 800c310:	0800c38b 	.word	0x0800c38b
 800c314:	0800c38b 	.word	0x0800c38b
 800c318:	0800c38b 	.word	0x0800c38b
 800c31c:	0800c37d 	.word	0x0800c37d
 800c320:	2b40      	cmp	r3, #64	; 0x40
 800c322:	d02e      	beq.n	800c382 <UART_SetConfig+0x8aa>
 800c324:	e031      	b.n	800c38a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c326:	f7fc fa47 	bl	80087b8 <HAL_RCC_GetPCLK1Freq>
 800c32a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c32c:	e033      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c32e:	f7fc fa59 	bl	80087e4 <HAL_RCC_GetPCLK2Freq>
 800c332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c334:	e02f      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fa24 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c344:	e027      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c346:	f107 0318 	add.w	r3, r7, #24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe fb70 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c354:	e01f      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c356:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <UART_SetConfig+0x934>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c362:	4b2a      	ldr	r3, [pc, #168]	; (800c40c <UART_SetConfig+0x934>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	08db      	lsrs	r3, r3, #3
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	4a24      	ldr	r2, [pc, #144]	; (800c400 <UART_SetConfig+0x928>)
 800c36e:	fa22 f303 	lsr.w	r3, r2, r3
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c374:	e00f      	b.n	800c396 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c376:	4b22      	ldr	r3, [pc, #136]	; (800c400 <UART_SetConfig+0x928>)
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37a:	e00c      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c37c:	4b21      	ldr	r3, [pc, #132]	; (800c404 <UART_SetConfig+0x92c>)
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	e009      	b.n	800c396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c388:	e005      	b.n	800c396 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 80e7 	beq.w	800c56c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	4a19      	ldr	r2, [pc, #100]	; (800c408 <UART_SetConfig+0x930>)
 800c3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b0:	005a      	lsls	r2, r3, #1
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	085b      	lsrs	r3, r3, #1
 800c3b8:	441a      	add	r2, r3
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	2b0f      	cmp	r3, #15
 800c3c8:	d916      	bls.n	800c3f8 <UART_SetConfig+0x920>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d0:	d212      	bcs.n	800c3f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f023 030f 	bic.w	r3, r3, #15
 800c3da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c3f4:	60da      	str	r2, [r3, #12]
 800c3f6:	e0b9      	b.n	800c56c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3fe:	e0b5      	b.n	800c56c <UART_SetConfig+0xa94>
 800c400:	03d09000 	.word	0x03d09000
 800c404:	003d0900 	.word	0x003d0900
 800c408:	0800fb9c 	.word	0x0800fb9c
 800c40c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c410:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c414:	2b20      	cmp	r3, #32
 800c416:	dc49      	bgt.n	800c4ac <UART_SetConfig+0x9d4>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	db7c      	blt.n	800c516 <UART_SetConfig+0xa3e>
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	d87a      	bhi.n	800c516 <UART_SetConfig+0xa3e>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <UART_SetConfig+0x950>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c4b3 	.word	0x0800c4b3
 800c42c:	0800c4bb 	.word	0x0800c4bb
 800c430:	0800c517 	.word	0x0800c517
 800c434:	0800c517 	.word	0x0800c517
 800c438:	0800c4c3 	.word	0x0800c4c3
 800c43c:	0800c517 	.word	0x0800c517
 800c440:	0800c517 	.word	0x0800c517
 800c444:	0800c517 	.word	0x0800c517
 800c448:	0800c4d3 	.word	0x0800c4d3
 800c44c:	0800c517 	.word	0x0800c517
 800c450:	0800c517 	.word	0x0800c517
 800c454:	0800c517 	.word	0x0800c517
 800c458:	0800c517 	.word	0x0800c517
 800c45c:	0800c517 	.word	0x0800c517
 800c460:	0800c517 	.word	0x0800c517
 800c464:	0800c517 	.word	0x0800c517
 800c468:	0800c4e3 	.word	0x0800c4e3
 800c46c:	0800c517 	.word	0x0800c517
 800c470:	0800c517 	.word	0x0800c517
 800c474:	0800c517 	.word	0x0800c517
 800c478:	0800c517 	.word	0x0800c517
 800c47c:	0800c517 	.word	0x0800c517
 800c480:	0800c517 	.word	0x0800c517
 800c484:	0800c517 	.word	0x0800c517
 800c488:	0800c517 	.word	0x0800c517
 800c48c:	0800c517 	.word	0x0800c517
 800c490:	0800c517 	.word	0x0800c517
 800c494:	0800c517 	.word	0x0800c517
 800c498:	0800c517 	.word	0x0800c517
 800c49c:	0800c517 	.word	0x0800c517
 800c4a0:	0800c517 	.word	0x0800c517
 800c4a4:	0800c517 	.word	0x0800c517
 800c4a8:	0800c509 	.word	0x0800c509
 800c4ac:	2b40      	cmp	r3, #64	; 0x40
 800c4ae:	d02e      	beq.n	800c50e <UART_SetConfig+0xa36>
 800c4b0:	e031      	b.n	800c516 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4b2:	f7fc f981 	bl	80087b8 <HAL_RCC_GetPCLK1Freq>
 800c4b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4b8:	e033      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4ba:	f7fc f993 	bl	80087e4 <HAL_RCC_GetPCLK2Freq>
 800c4be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4c0:	e02f      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe f95e 	bl	800a788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d0:	e027      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4d2:	f107 0318 	add.w	r3, r7, #24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe faaa 	bl	800aa30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e0:	e01f      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4e2:	4b2d      	ldr	r3, [pc, #180]	; (800c598 <UART_SetConfig+0xac0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 0320 	and.w	r3, r3, #32
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d009      	beq.n	800c502 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4ee:	4b2a      	ldr	r3, [pc, #168]	; (800c598 <UART_SetConfig+0xac0>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	08db      	lsrs	r3, r3, #3
 800c4f4:	f003 0303 	and.w	r3, r3, #3
 800c4f8:	4a28      	ldr	r2, [pc, #160]	; (800c59c <UART_SetConfig+0xac4>)
 800c4fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c500:	e00f      	b.n	800c522 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c502:	4b26      	ldr	r3, [pc, #152]	; (800c59c <UART_SetConfig+0xac4>)
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c506:	e00c      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c508:	4b25      	ldr	r3, [pc, #148]	; (800c5a0 <UART_SetConfig+0xac8>)
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50c:	e009      	b.n	800c522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c50e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c514:	e005      	b.n	800c522 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c520:	bf00      	nop
    }

    if (pclk != 0U)
 800c522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c524:	2b00      	cmp	r3, #0
 800c526:	d021      	beq.n	800c56c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	4a1d      	ldr	r2, [pc, #116]	; (800c5a4 <UART_SetConfig+0xacc>)
 800c52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c532:	461a      	mov	r2, r3
 800c534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c536:	fbb3 f2f2 	udiv	r2, r3, r2
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	085b      	lsrs	r3, r3, #1
 800c540:	441a      	add	r2, r3
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	fbb2 f3f3 	udiv	r3, r2, r3
 800c54a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	2b0f      	cmp	r3, #15
 800c550:	d909      	bls.n	800c566 <UART_SetConfig+0xa8e>
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c558:	d205      	bcs.n	800c566 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60da      	str	r2, [r3, #12]
 800c564:	e002      	b.n	800c56c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2201      	movs	r2, #1
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2201      	movs	r2, #1
 800c578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2200      	movs	r2, #0
 800c580:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2200      	movs	r2, #0
 800c586:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c588:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3748      	adds	r7, #72	; 0x48
 800c590:	46bd      	mov	sp, r7
 800c592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c596:	bf00      	nop
 800c598:	58024400 	.word	0x58024400
 800c59c:	03d09000 	.word	0x03d09000
 800c5a0:	003d0900 	.word	0x003d0900
 800c5a4:	0800fb9c 	.word	0x0800fb9c

0800c5a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00a      	beq.n	800c5d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00a      	beq.n	800c616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	430a      	orrs	r2, r1
 800c614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61a:	f003 0308 	and.w	r3, r3, #8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	430a      	orrs	r2, r1
 800c636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	f003 0310 	and.w	r3, r3, #16
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	f003 0320 	and.w	r3, r3, #32
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01a      	beq.n	800c6be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6a6:	d10a      	bne.n	800c6be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	605a      	str	r2, [r3, #4]
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b098      	sub	sp, #96	; 0x60
 800c6f0:	af02      	add	r7, sp, #8
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6fc:	f7f6 f954 	bl	80029a8 <HAL_GetTick>
 800c700:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d12f      	bne.n	800c770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c718:	2200      	movs	r2, #0
 800c71a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f88e 	bl	800c840 <UART_WaitOnFlagUntilTimeout>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d022      	beq.n	800c770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	e853 3f00 	ldrex	r3, [r3]
 800c736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c73e:	653b      	str	r3, [r7, #80]	; 0x50
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	461a      	mov	r2, r3
 800c746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c748:	647b      	str	r3, [r7, #68]	; 0x44
 800c74a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c750:	e841 2300 	strex	r3, r2, [r1]
 800c754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e6      	bne.n	800c72a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2220      	movs	r2, #32
 800c760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e063      	b.n	800c838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 0304 	and.w	r3, r3, #4
 800c77a:	2b04      	cmp	r3, #4
 800c77c:	d149      	bne.n	800c812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c77e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c786:	2200      	movs	r2, #0
 800c788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f857 	bl	800c840 <UART_WaitOnFlagUntilTimeout>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d03c      	beq.n	800c812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	e853 3f00 	ldrex	r3, [r3]
 800c7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e6      	bne.n	800c798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f023 0301 	bic.w	r3, r3, #1
 800c7e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7ea:	61fa      	str	r2, [r7, #28]
 800c7ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	69b9      	ldr	r1, [r7, #24]
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	617b      	str	r3, [r7, #20]
   return(result);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e5      	bne.n	800c7ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2220      	movs	r2, #32
 800c802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e012      	b.n	800c838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2220      	movs	r2, #32
 800c816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2220      	movs	r2, #32
 800c81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3758      	adds	r7, #88	; 0x58
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	603b      	str	r3, [r7, #0]
 800c84c:	4613      	mov	r3, r2
 800c84e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c850:	e049      	b.n	800c8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	d045      	beq.n	800c8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c85a:	f7f6 f8a5 	bl	80029a8 <HAL_GetTick>
 800c85e:	4602      	mov	r2, r0
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	69ba      	ldr	r2, [r7, #24]
 800c866:	429a      	cmp	r2, r3
 800c868:	d302      	bcc.n	800c870 <UART_WaitOnFlagUntilTimeout+0x30>
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e048      	b.n	800c906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0304 	and.w	r3, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d031      	beq.n	800c8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69db      	ldr	r3, [r3, #28]
 800c888:	f003 0308 	and.w	r3, r3, #8
 800c88c:	2b08      	cmp	r3, #8
 800c88e:	d110      	bne.n	800c8b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2208      	movs	r2, #8
 800c896:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 f839 	bl	800c910 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e029      	b.n	800c906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8c0:	d111      	bne.n	800c8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f000 f81f 	bl	800c910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e00f      	b.n	800c906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	69da      	ldr	r2, [r3, #28]
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	bf0c      	ite	eq
 800c8f6:	2301      	moveq	r3, #1
 800c8f8:	2300      	movne	r3, #0
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	429a      	cmp	r2, r3
 800c902:	d0a6      	beq.n	800c852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c910:	b480      	push	{r7}
 800c912:	b095      	sub	sp, #84	; 0x54
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	e853 3f00 	ldrex	r3, [r3]
 800c924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c92c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c936:	643b      	str	r3, [r7, #64]	; 0x40
 800c938:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c93c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e6      	bne.n	800c918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3308      	adds	r3, #8
 800c950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	e853 3f00 	ldrex	r3, [r3]
 800c958:	61fb      	str	r3, [r7, #28]
   return(result);
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	4b1e      	ldr	r3, [pc, #120]	; (800c9d8 <UART_EndRxTransfer+0xc8>)
 800c95e:	4013      	ands	r3, r2
 800c960:	64bb      	str	r3, [r7, #72]	; 0x48
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3308      	adds	r3, #8
 800c968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c96a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c96c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c972:	e841 2300 	strex	r3, r2, [r1]
 800c976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1e5      	bne.n	800c94a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c982:	2b01      	cmp	r3, #1
 800c984:	d118      	bne.n	800c9b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	60bb      	str	r3, [r7, #8]
   return(result);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	f023 0310 	bic.w	r3, r3, #16
 800c99a:	647b      	str	r3, [r7, #68]	; 0x44
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a4:	61bb      	str	r3, [r7, #24]
 800c9a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a8:	6979      	ldr	r1, [r7, #20]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1e6      	bne.n	800c986 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c9cc:	bf00      	nop
 800c9ce:	3754      	adds	r7, #84	; 0x54
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	effffffe 	.word	0xeffffffe

0800c9dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d101      	bne.n	800c9f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c9ee:	2302      	movs	r3, #2
 800c9f0:	e027      	b.n	800ca42 <HAL_UARTEx_DisableFifoMode+0x66>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2224      	movs	r2, #36	; 0x24
 800c9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f022 0201 	bic.w	r2, r2, #1
 800ca18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ca20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2220      	movs	r2, #32
 800ca34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d101      	bne.n	800ca66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca62:	2302      	movs	r3, #2
 800ca64:	e02d      	b.n	800cac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2224      	movs	r2, #36	; 0x24
 800ca72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f022 0201 	bic.w	r2, r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f850 	bl	800cb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b084      	sub	sp, #16
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d101      	bne.n	800cae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cade:	2302      	movs	r3, #2
 800cae0:	e02d      	b.n	800cb3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2224      	movs	r2, #36	; 0x24
 800caee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f022 0201 	bic.w	r2, r2, #1
 800cb08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f812 	bl	800cb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2220      	movs	r2, #32
 800cb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d108      	bne.n	800cb6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb68:	e031      	b.n	800cbce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb6a:	2310      	movs	r3, #16
 800cb6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb6e:	2310      	movs	r3, #16
 800cb70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	0e5b      	lsrs	r3, r3, #25
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	0f5b      	lsrs	r3, r3, #29
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f003 0307 	and.w	r3, r3, #7
 800cb90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	7b3a      	ldrb	r2, [r7, #12]
 800cb96:	4911      	ldr	r1, [pc, #68]	; (800cbdc <UARTEx_SetNbDataToProcess+0x94>)
 800cb98:	5c8a      	ldrb	r2, [r1, r2]
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb9e:	7b3a      	ldrb	r2, [r7, #12]
 800cba0:	490f      	ldr	r1, [pc, #60]	; (800cbe0 <UARTEx_SetNbDataToProcess+0x98>)
 800cba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	7b7a      	ldrb	r2, [r7, #13]
 800cbb4:	4909      	ldr	r1, [pc, #36]	; (800cbdc <UARTEx_SetNbDataToProcess+0x94>)
 800cbb6:	5c8a      	ldrb	r2, [r1, r2]
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbbc:	7b7a      	ldrb	r2, [r7, #13]
 800cbbe:	4908      	ldr	r1, [pc, #32]	; (800cbe0 <UARTEx_SetNbDataToProcess+0x98>)
 800cbc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	0800fbb4 	.word	0x0800fbb4
 800cbe0:	0800fbbc 	.word	0x0800fbbc

0800cbe4 <__errno>:
 800cbe4:	4b01      	ldr	r3, [pc, #4]	; (800cbec <__errno+0x8>)
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2000003c 	.word	0x2000003c

0800cbf0 <__libc_init_array>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	4d0d      	ldr	r5, [pc, #52]	; (800cc28 <__libc_init_array+0x38>)
 800cbf4:	4c0d      	ldr	r4, [pc, #52]	; (800cc2c <__libc_init_array+0x3c>)
 800cbf6:	1b64      	subs	r4, r4, r5
 800cbf8:	10a4      	asrs	r4, r4, #2
 800cbfa:	2600      	movs	r6, #0
 800cbfc:	42a6      	cmp	r6, r4
 800cbfe:	d109      	bne.n	800cc14 <__libc_init_array+0x24>
 800cc00:	4d0b      	ldr	r5, [pc, #44]	; (800cc30 <__libc_init_array+0x40>)
 800cc02:	4c0c      	ldr	r4, [pc, #48]	; (800cc34 <__libc_init_array+0x44>)
 800cc04:	f002 fd1c 	bl	800f640 <_init>
 800cc08:	1b64      	subs	r4, r4, r5
 800cc0a:	10a4      	asrs	r4, r4, #2
 800cc0c:	2600      	movs	r6, #0
 800cc0e:	42a6      	cmp	r6, r4
 800cc10:	d105      	bne.n	800cc1e <__libc_init_array+0x2e>
 800cc12:	bd70      	pop	{r4, r5, r6, pc}
 800cc14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc18:	4798      	blx	r3
 800cc1a:	3601      	adds	r6, #1
 800cc1c:	e7ee      	b.n	800cbfc <__libc_init_array+0xc>
 800cc1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc22:	4798      	blx	r3
 800cc24:	3601      	adds	r6, #1
 800cc26:	e7f2      	b.n	800cc0e <__libc_init_array+0x1e>
 800cc28:	0800ffa4 	.word	0x0800ffa4
 800cc2c:	0800ffa4 	.word	0x0800ffa4
 800cc30:	0800ffa4 	.word	0x0800ffa4
 800cc34:	0800ffa8 	.word	0x0800ffa8

0800cc38 <memcpy>:
 800cc38:	440a      	add	r2, r1
 800cc3a:	4291      	cmp	r1, r2
 800cc3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc40:	d100      	bne.n	800cc44 <memcpy+0xc>
 800cc42:	4770      	bx	lr
 800cc44:	b510      	push	{r4, lr}
 800cc46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc4e:	4291      	cmp	r1, r2
 800cc50:	d1f9      	bne.n	800cc46 <memcpy+0xe>
 800cc52:	bd10      	pop	{r4, pc}

0800cc54 <memset>:
 800cc54:	4402      	add	r2, r0
 800cc56:	4603      	mov	r3, r0
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d100      	bne.n	800cc5e <memset+0xa>
 800cc5c:	4770      	bx	lr
 800cc5e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc62:	e7f9      	b.n	800cc58 <memset+0x4>

0800cc64 <__cvt>:
 800cc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc66:	ed2d 8b02 	vpush	{d8}
 800cc6a:	eeb0 8b40 	vmov.f64	d8, d0
 800cc6e:	b085      	sub	sp, #20
 800cc70:	4617      	mov	r7, r2
 800cc72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cc74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cc76:	ee18 2a90 	vmov	r2, s17
 800cc7a:	f025 0520 	bic.w	r5, r5, #32
 800cc7e:	2a00      	cmp	r2, #0
 800cc80:	bfb6      	itet	lt
 800cc82:	222d      	movlt	r2, #45	; 0x2d
 800cc84:	2200      	movge	r2, #0
 800cc86:	eeb1 8b40 	vneglt.f64	d8, d0
 800cc8a:	2d46      	cmp	r5, #70	; 0x46
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	d004      	beq.n	800cc9c <__cvt+0x38>
 800cc92:	2d45      	cmp	r5, #69	; 0x45
 800cc94:	d100      	bne.n	800cc98 <__cvt+0x34>
 800cc96:	3401      	adds	r4, #1
 800cc98:	2102      	movs	r1, #2
 800cc9a:	e000      	b.n	800cc9e <__cvt+0x3a>
 800cc9c:	2103      	movs	r1, #3
 800cc9e:	ab03      	add	r3, sp, #12
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	ab02      	add	r3, sp, #8
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	4622      	mov	r2, r4
 800cca8:	4633      	mov	r3, r6
 800ccaa:	eeb0 0b48 	vmov.f64	d0, d8
 800ccae:	f000 fdf7 	bl	800d8a0 <_dtoa_r>
 800ccb2:	2d47      	cmp	r5, #71	; 0x47
 800ccb4:	d101      	bne.n	800ccba <__cvt+0x56>
 800ccb6:	07fb      	lsls	r3, r7, #31
 800ccb8:	d51a      	bpl.n	800ccf0 <__cvt+0x8c>
 800ccba:	2d46      	cmp	r5, #70	; 0x46
 800ccbc:	eb00 0204 	add.w	r2, r0, r4
 800ccc0:	d10c      	bne.n	800ccdc <__cvt+0x78>
 800ccc2:	7803      	ldrb	r3, [r0, #0]
 800ccc4:	2b30      	cmp	r3, #48	; 0x30
 800ccc6:	d107      	bne.n	800ccd8 <__cvt+0x74>
 800ccc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd0:	bf1c      	itt	ne
 800ccd2:	f1c4 0401 	rsbne	r4, r4, #1
 800ccd6:	6034      	strne	r4, [r6, #0]
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	441a      	add	r2, r3
 800ccdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce4:	bf08      	it	eq
 800cce6:	9203      	streq	r2, [sp, #12]
 800cce8:	2130      	movs	r1, #48	; 0x30
 800ccea:	9b03      	ldr	r3, [sp, #12]
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d307      	bcc.n	800cd00 <__cvt+0x9c>
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccf4:	1a1b      	subs	r3, r3, r0
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	b005      	add	sp, #20
 800ccfa:	ecbd 8b02 	vpop	{d8}
 800ccfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd00:	1c5c      	adds	r4, r3, #1
 800cd02:	9403      	str	r4, [sp, #12]
 800cd04:	7019      	strb	r1, [r3, #0]
 800cd06:	e7f0      	b.n	800ccea <__cvt+0x86>

0800cd08 <__exponent>:
 800cd08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	bfb8      	it	lt
 800cd10:	4249      	neglt	r1, r1
 800cd12:	f803 2b02 	strb.w	r2, [r3], #2
 800cd16:	bfb4      	ite	lt
 800cd18:	222d      	movlt	r2, #45	; 0x2d
 800cd1a:	222b      	movge	r2, #43	; 0x2b
 800cd1c:	2909      	cmp	r1, #9
 800cd1e:	7042      	strb	r2, [r0, #1]
 800cd20:	dd2a      	ble.n	800cd78 <__exponent+0x70>
 800cd22:	f10d 0407 	add.w	r4, sp, #7
 800cd26:	46a4      	mov	ip, r4
 800cd28:	270a      	movs	r7, #10
 800cd2a:	46a6      	mov	lr, r4
 800cd2c:	460a      	mov	r2, r1
 800cd2e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cd32:	fb07 1516 	mls	r5, r7, r6, r1
 800cd36:	3530      	adds	r5, #48	; 0x30
 800cd38:	2a63      	cmp	r2, #99	; 0x63
 800cd3a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cd42:	4631      	mov	r1, r6
 800cd44:	dcf1      	bgt.n	800cd2a <__exponent+0x22>
 800cd46:	3130      	adds	r1, #48	; 0x30
 800cd48:	f1ae 0502 	sub.w	r5, lr, #2
 800cd4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cd50:	1c44      	adds	r4, r0, #1
 800cd52:	4629      	mov	r1, r5
 800cd54:	4561      	cmp	r1, ip
 800cd56:	d30a      	bcc.n	800cd6e <__exponent+0x66>
 800cd58:	f10d 0209 	add.w	r2, sp, #9
 800cd5c:	eba2 020e 	sub.w	r2, r2, lr
 800cd60:	4565      	cmp	r5, ip
 800cd62:	bf88      	it	hi
 800cd64:	2200      	movhi	r2, #0
 800cd66:	4413      	add	r3, r2
 800cd68:	1a18      	subs	r0, r3, r0
 800cd6a:	b003      	add	sp, #12
 800cd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd72:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd76:	e7ed      	b.n	800cd54 <__exponent+0x4c>
 800cd78:	2330      	movs	r3, #48	; 0x30
 800cd7a:	3130      	adds	r1, #48	; 0x30
 800cd7c:	7083      	strb	r3, [r0, #2]
 800cd7e:	70c1      	strb	r1, [r0, #3]
 800cd80:	1d03      	adds	r3, r0, #4
 800cd82:	e7f1      	b.n	800cd68 <__exponent+0x60>
 800cd84:	0000      	movs	r0, r0
	...

0800cd88 <_printf_float>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	b08b      	sub	sp, #44	; 0x2c
 800cd8e:	460c      	mov	r4, r1
 800cd90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cd94:	4616      	mov	r6, r2
 800cd96:	461f      	mov	r7, r3
 800cd98:	4605      	mov	r5, r0
 800cd9a:	f001 fca7 	bl	800e6ec <_localeconv_r>
 800cd9e:	f8d0 b000 	ldr.w	fp, [r0]
 800cda2:	4658      	mov	r0, fp
 800cda4:	f7f3 fee4 	bl	8000b70 <strlen>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	9308      	str	r3, [sp, #32]
 800cdac:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cdb4:	6822      	ldr	r2, [r4, #0]
 800cdb6:	3307      	adds	r3, #7
 800cdb8:	f023 0307 	bic.w	r3, r3, #7
 800cdbc:	f103 0108 	add.w	r1, r3, #8
 800cdc0:	f8c8 1000 	str.w	r1, [r8]
 800cdc4:	4682      	mov	sl, r0
 800cdc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cdce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d030 <_printf_float+0x2a8>
 800cdd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cdd6:	eeb0 6bc0 	vabs.f64	d6, d0
 800cdda:	eeb4 6b47 	vcmp.f64	d6, d7
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	dd24      	ble.n	800ce2e <_printf_float+0xa6>
 800cde4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	d502      	bpl.n	800cdf4 <_printf_float+0x6c>
 800cdee:	232d      	movs	r3, #45	; 0x2d
 800cdf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdf4:	4b90      	ldr	r3, [pc, #576]	; (800d038 <_printf_float+0x2b0>)
 800cdf6:	4891      	ldr	r0, [pc, #580]	; (800d03c <_printf_float+0x2b4>)
 800cdf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cdfc:	bf94      	ite	ls
 800cdfe:	4698      	movls	r8, r3
 800ce00:	4680      	movhi	r8, r0
 800ce02:	2303      	movs	r3, #3
 800ce04:	6123      	str	r3, [r4, #16]
 800ce06:	f022 0204 	bic.w	r2, r2, #4
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	6022      	str	r2, [r4, #0]
 800ce0e:	9304      	str	r3, [sp, #16]
 800ce10:	9700      	str	r7, [sp, #0]
 800ce12:	4633      	mov	r3, r6
 800ce14:	aa09      	add	r2, sp, #36	; 0x24
 800ce16:	4621      	mov	r1, r4
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f000 f9d3 	bl	800d1c4 <_printf_common>
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f040 808a 	bne.w	800cf38 <_printf_float+0x1b0>
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	b00b      	add	sp, #44	; 0x2c
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	d709      	bvc.n	800ce4c <_printf_float+0xc4>
 800ce38:	ee10 3a90 	vmov	r3, s1
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfbc      	itt	lt
 800ce40:	232d      	movlt	r3, #45	; 0x2d
 800ce42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce46:	487e      	ldr	r0, [pc, #504]	; (800d040 <_printf_float+0x2b8>)
 800ce48:	4b7e      	ldr	r3, [pc, #504]	; (800d044 <_printf_float+0x2bc>)
 800ce4a:	e7d5      	b.n	800cdf8 <_printf_float+0x70>
 800ce4c:	6863      	ldr	r3, [r4, #4]
 800ce4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ce52:	9104      	str	r1, [sp, #16]
 800ce54:	1c59      	adds	r1, r3, #1
 800ce56:	d13c      	bne.n	800ced2 <_printf_float+0x14a>
 800ce58:	2306      	movs	r3, #6
 800ce5a:	6063      	str	r3, [r4, #4]
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9303      	str	r3, [sp, #12]
 800ce60:	ab08      	add	r3, sp, #32
 800ce62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ce66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce6a:	ab07      	add	r3, sp, #28
 800ce6c:	6861      	ldr	r1, [r4, #4]
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	6022      	str	r2, [r4, #0]
 800ce72:	f10d 031b 	add.w	r3, sp, #27
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7ff fef4 	bl	800cc64 <__cvt>
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	9907      	ldr	r1, [sp, #28]
 800ce80:	2b47      	cmp	r3, #71	; 0x47
 800ce82:	4680      	mov	r8, r0
 800ce84:	d108      	bne.n	800ce98 <_printf_float+0x110>
 800ce86:	1cc8      	adds	r0, r1, #3
 800ce88:	db02      	blt.n	800ce90 <_printf_float+0x108>
 800ce8a:	6863      	ldr	r3, [r4, #4]
 800ce8c:	4299      	cmp	r1, r3
 800ce8e:	dd41      	ble.n	800cf14 <_printf_float+0x18c>
 800ce90:	f1a9 0902 	sub.w	r9, r9, #2
 800ce94:	fa5f f989 	uxtb.w	r9, r9
 800ce98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce9c:	d820      	bhi.n	800cee0 <_printf_float+0x158>
 800ce9e:	3901      	subs	r1, #1
 800cea0:	464a      	mov	r2, r9
 800cea2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cea6:	9107      	str	r1, [sp, #28]
 800cea8:	f7ff ff2e 	bl	800cd08 <__exponent>
 800ceac:	9a08      	ldr	r2, [sp, #32]
 800ceae:	9004      	str	r0, [sp, #16]
 800ceb0:	1813      	adds	r3, r2, r0
 800ceb2:	2a01      	cmp	r2, #1
 800ceb4:	6123      	str	r3, [r4, #16]
 800ceb6:	dc02      	bgt.n	800cebe <_printf_float+0x136>
 800ceb8:	6822      	ldr	r2, [r4, #0]
 800ceba:	07d2      	lsls	r2, r2, #31
 800cebc:	d501      	bpl.n	800cec2 <_printf_float+0x13a>
 800cebe:	3301      	adds	r3, #1
 800cec0:	6123      	str	r3, [r4, #16]
 800cec2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0a2      	beq.n	800ce10 <_printf_float+0x88>
 800ceca:	232d      	movs	r3, #45	; 0x2d
 800cecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ced0:	e79e      	b.n	800ce10 <_printf_float+0x88>
 800ced2:	9904      	ldr	r1, [sp, #16]
 800ced4:	2947      	cmp	r1, #71	; 0x47
 800ced6:	d1c1      	bne.n	800ce5c <_printf_float+0xd4>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1bf      	bne.n	800ce5c <_printf_float+0xd4>
 800cedc:	2301      	movs	r3, #1
 800cede:	e7bc      	b.n	800ce5a <_printf_float+0xd2>
 800cee0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cee4:	d118      	bne.n	800cf18 <_printf_float+0x190>
 800cee6:	2900      	cmp	r1, #0
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	dd0b      	ble.n	800cf04 <_printf_float+0x17c>
 800ceec:	6121      	str	r1, [r4, #16]
 800ceee:	b913      	cbnz	r3, 800cef6 <_printf_float+0x16e>
 800cef0:	6822      	ldr	r2, [r4, #0]
 800cef2:	07d0      	lsls	r0, r2, #31
 800cef4:	d502      	bpl.n	800cefc <_printf_float+0x174>
 800cef6:	3301      	adds	r3, #1
 800cef8:	440b      	add	r3, r1
 800cefa:	6123      	str	r3, [r4, #16]
 800cefc:	2300      	movs	r3, #0
 800cefe:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	e7de      	b.n	800cec2 <_printf_float+0x13a>
 800cf04:	b913      	cbnz	r3, 800cf0c <_printf_float+0x184>
 800cf06:	6822      	ldr	r2, [r4, #0]
 800cf08:	07d2      	lsls	r2, r2, #31
 800cf0a:	d501      	bpl.n	800cf10 <_printf_float+0x188>
 800cf0c:	3302      	adds	r3, #2
 800cf0e:	e7f4      	b.n	800cefa <_printf_float+0x172>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e7f2      	b.n	800cefa <_printf_float+0x172>
 800cf14:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cf18:	9b08      	ldr	r3, [sp, #32]
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	db05      	blt.n	800cf2a <_printf_float+0x1a2>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	6121      	str	r1, [r4, #16]
 800cf22:	07d8      	lsls	r0, r3, #31
 800cf24:	d5ea      	bpl.n	800cefc <_printf_float+0x174>
 800cf26:	1c4b      	adds	r3, r1, #1
 800cf28:	e7e7      	b.n	800cefa <_printf_float+0x172>
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	bfd4      	ite	le
 800cf2e:	f1c1 0202 	rsble	r2, r1, #2
 800cf32:	2201      	movgt	r2, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	e7e0      	b.n	800cefa <_printf_float+0x172>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	055a      	lsls	r2, r3, #21
 800cf3c:	d407      	bmi.n	800cf4e <_printf_float+0x1c6>
 800cf3e:	6923      	ldr	r3, [r4, #16]
 800cf40:	4642      	mov	r2, r8
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d12a      	bne.n	800cfa2 <_printf_float+0x21a>
 800cf4c:	e76a      	b.n	800ce24 <_printf_float+0x9c>
 800cf4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf52:	f240 80e2 	bls.w	800d11a <_printf_float+0x392>
 800cf56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf62:	d133      	bne.n	800cfcc <_printf_float+0x244>
 800cf64:	4a38      	ldr	r2, [pc, #224]	; (800d048 <_printf_float+0x2c0>)
 800cf66:	2301      	movs	r3, #1
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b8      	blx	r7
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f43f af58 	beq.w	800ce24 <_printf_float+0x9c>
 800cf74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	db02      	blt.n	800cf82 <_printf_float+0x1fa>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	07d8      	lsls	r0, r3, #31
 800cf80:	d50f      	bpl.n	800cfa2 <_printf_float+0x21a>
 800cf82:	4653      	mov	r3, sl
 800cf84:	465a      	mov	r2, fp
 800cf86:	4631      	mov	r1, r6
 800cf88:	4628      	mov	r0, r5
 800cf8a:	47b8      	blx	r7
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	f43f af49 	beq.w	800ce24 <_printf_float+0x9c>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	f104 091a 	add.w	r9, r4, #26
 800cf9a:	9b08      	ldr	r3, [sp, #32]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4543      	cmp	r3, r8
 800cfa0:	dc09      	bgt.n	800cfb6 <_printf_float+0x22e>
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	079b      	lsls	r3, r3, #30
 800cfa6:	f100 8108 	bmi.w	800d1ba <_printf_float+0x432>
 800cfaa:	68e0      	ldr	r0, [r4, #12]
 800cfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfae:	4298      	cmp	r0, r3
 800cfb0:	bfb8      	it	lt
 800cfb2:	4618      	movlt	r0, r3
 800cfb4:	e738      	b.n	800ce28 <_printf_float+0xa0>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	464a      	mov	r2, r9
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f af2f 	beq.w	800ce24 <_printf_float+0x9c>
 800cfc6:	f108 0801 	add.w	r8, r8, #1
 800cfca:	e7e6      	b.n	800cf9a <_printf_float+0x212>
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dc3c      	bgt.n	800d04c <_printf_float+0x2c4>
 800cfd2:	4a1d      	ldr	r2, [pc, #116]	; (800d048 <_printf_float+0x2c0>)
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4628      	mov	r0, r5
 800cfda:	47b8      	blx	r7
 800cfdc:	3001      	adds	r0, #1
 800cfde:	f43f af21 	beq.w	800ce24 <_printf_float+0x9c>
 800cfe2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	d102      	bne.n	800cff0 <_printf_float+0x268>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	07d9      	lsls	r1, r3, #31
 800cfee:	d5d8      	bpl.n	800cfa2 <_printf_float+0x21a>
 800cff0:	4653      	mov	r3, sl
 800cff2:	465a      	mov	r2, fp
 800cff4:	4631      	mov	r1, r6
 800cff6:	4628      	mov	r0, r5
 800cff8:	47b8      	blx	r7
 800cffa:	3001      	adds	r0, #1
 800cffc:	f43f af12 	beq.w	800ce24 <_printf_float+0x9c>
 800d000:	f04f 0900 	mov.w	r9, #0
 800d004:	f104 0a1a 	add.w	sl, r4, #26
 800d008:	9b07      	ldr	r3, [sp, #28]
 800d00a:	425b      	negs	r3, r3
 800d00c:	454b      	cmp	r3, r9
 800d00e:	dc01      	bgt.n	800d014 <_printf_float+0x28c>
 800d010:	9b08      	ldr	r3, [sp, #32]
 800d012:	e795      	b.n	800cf40 <_printf_float+0x1b8>
 800d014:	2301      	movs	r3, #1
 800d016:	4652      	mov	r2, sl
 800d018:	4631      	mov	r1, r6
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b8      	blx	r7
 800d01e:	3001      	adds	r0, #1
 800d020:	f43f af00 	beq.w	800ce24 <_printf_float+0x9c>
 800d024:	f109 0901 	add.w	r9, r9, #1
 800d028:	e7ee      	b.n	800d008 <_printf_float+0x280>
 800d02a:	bf00      	nop
 800d02c:	f3af 8000 	nop.w
 800d030:	ffffffff 	.word	0xffffffff
 800d034:	7fefffff 	.word	0x7fefffff
 800d038:	0800fbc8 	.word	0x0800fbc8
 800d03c:	0800fbcc 	.word	0x0800fbcc
 800d040:	0800fbd4 	.word	0x0800fbd4
 800d044:	0800fbd0 	.word	0x0800fbd0
 800d048:	0800fbd8 	.word	0x0800fbd8
 800d04c:	9a08      	ldr	r2, [sp, #32]
 800d04e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d050:	429a      	cmp	r2, r3
 800d052:	bfa8      	it	ge
 800d054:	461a      	movge	r2, r3
 800d056:	2a00      	cmp	r2, #0
 800d058:	4691      	mov	r9, r2
 800d05a:	dc38      	bgt.n	800d0ce <_printf_float+0x346>
 800d05c:	2300      	movs	r3, #0
 800d05e:	9305      	str	r3, [sp, #20]
 800d060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d064:	f104 021a 	add.w	r2, r4, #26
 800d068:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d06a:	9905      	ldr	r1, [sp, #20]
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	eba3 0309 	sub.w	r3, r3, r9
 800d072:	428b      	cmp	r3, r1
 800d074:	dc33      	bgt.n	800d0de <_printf_float+0x356>
 800d076:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	db3c      	blt.n	800d0f8 <_printf_float+0x370>
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	07da      	lsls	r2, r3, #31
 800d082:	d439      	bmi.n	800d0f8 <_printf_float+0x370>
 800d084:	9b08      	ldr	r3, [sp, #32]
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	9907      	ldr	r1, [sp, #28]
 800d08a:	1a9a      	subs	r2, r3, r2
 800d08c:	eba3 0901 	sub.w	r9, r3, r1
 800d090:	4591      	cmp	r9, r2
 800d092:	bfa8      	it	ge
 800d094:	4691      	movge	r9, r2
 800d096:	f1b9 0f00 	cmp.w	r9, #0
 800d09a:	dc35      	bgt.n	800d108 <_printf_float+0x380>
 800d09c:	f04f 0800 	mov.w	r8, #0
 800d0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0a4:	f104 0a1a 	add.w	sl, r4, #26
 800d0a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d0ac:	1a9b      	subs	r3, r3, r2
 800d0ae:	eba3 0309 	sub.w	r3, r3, r9
 800d0b2:	4543      	cmp	r3, r8
 800d0b4:	f77f af75 	ble.w	800cfa2 <_printf_float+0x21a>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4652      	mov	r2, sl
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	47b8      	blx	r7
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f43f aeae 	beq.w	800ce24 <_printf_float+0x9c>
 800d0c8:	f108 0801 	add.w	r8, r8, #1
 800d0cc:	e7ec      	b.n	800d0a8 <_printf_float+0x320>
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4642      	mov	r2, r8
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b8      	blx	r7
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d1bf      	bne.n	800d05c <_printf_float+0x2d4>
 800d0dc:	e6a2      	b.n	800ce24 <_printf_float+0x9c>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4631      	mov	r1, r6
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	9204      	str	r2, [sp, #16]
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f43f ae9b 	beq.w	800ce24 <_printf_float+0x9c>
 800d0ee:	9b05      	ldr	r3, [sp, #20]
 800d0f0:	9a04      	ldr	r2, [sp, #16]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	e7b7      	b.n	800d068 <_printf_float+0x2e0>
 800d0f8:	4653      	mov	r3, sl
 800d0fa:	465a      	mov	r2, fp
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4628      	mov	r0, r5
 800d100:	47b8      	blx	r7
 800d102:	3001      	adds	r0, #1
 800d104:	d1be      	bne.n	800d084 <_printf_float+0x2fc>
 800d106:	e68d      	b.n	800ce24 <_printf_float+0x9c>
 800d108:	9a04      	ldr	r2, [sp, #16]
 800d10a:	464b      	mov	r3, r9
 800d10c:	4442      	add	r2, r8
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	d1c1      	bne.n	800d09c <_printf_float+0x314>
 800d118:	e684      	b.n	800ce24 <_printf_float+0x9c>
 800d11a:	9a08      	ldr	r2, [sp, #32]
 800d11c:	2a01      	cmp	r2, #1
 800d11e:	dc01      	bgt.n	800d124 <_printf_float+0x39c>
 800d120:	07db      	lsls	r3, r3, #31
 800d122:	d537      	bpl.n	800d194 <_printf_float+0x40c>
 800d124:	2301      	movs	r3, #1
 800d126:	4642      	mov	r2, r8
 800d128:	4631      	mov	r1, r6
 800d12a:	4628      	mov	r0, r5
 800d12c:	47b8      	blx	r7
 800d12e:	3001      	adds	r0, #1
 800d130:	f43f ae78 	beq.w	800ce24 <_printf_float+0x9c>
 800d134:	4653      	mov	r3, sl
 800d136:	465a      	mov	r2, fp
 800d138:	4631      	mov	r1, r6
 800d13a:	4628      	mov	r0, r5
 800d13c:	47b8      	blx	r7
 800d13e:	3001      	adds	r0, #1
 800d140:	f43f ae70 	beq.w	800ce24 <_printf_float+0x9c>
 800d144:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d148:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d150:	d01b      	beq.n	800d18a <_printf_float+0x402>
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	f108 0201 	add.w	r2, r8, #1
 800d158:	3b01      	subs	r3, #1
 800d15a:	4631      	mov	r1, r6
 800d15c:	4628      	mov	r0, r5
 800d15e:	47b8      	blx	r7
 800d160:	3001      	adds	r0, #1
 800d162:	d10e      	bne.n	800d182 <_printf_float+0x3fa>
 800d164:	e65e      	b.n	800ce24 <_printf_float+0x9c>
 800d166:	2301      	movs	r3, #1
 800d168:	464a      	mov	r2, r9
 800d16a:	4631      	mov	r1, r6
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b8      	blx	r7
 800d170:	3001      	adds	r0, #1
 800d172:	f43f ae57 	beq.w	800ce24 <_printf_float+0x9c>
 800d176:	f108 0801 	add.w	r8, r8, #1
 800d17a:	9b08      	ldr	r3, [sp, #32]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	4543      	cmp	r3, r8
 800d180:	dcf1      	bgt.n	800d166 <_printf_float+0x3de>
 800d182:	9b04      	ldr	r3, [sp, #16]
 800d184:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d188:	e6db      	b.n	800cf42 <_printf_float+0x1ba>
 800d18a:	f04f 0800 	mov.w	r8, #0
 800d18e:	f104 091a 	add.w	r9, r4, #26
 800d192:	e7f2      	b.n	800d17a <_printf_float+0x3f2>
 800d194:	2301      	movs	r3, #1
 800d196:	4642      	mov	r2, r8
 800d198:	e7df      	b.n	800d15a <_printf_float+0x3d2>
 800d19a:	2301      	movs	r3, #1
 800d19c:	464a      	mov	r2, r9
 800d19e:	4631      	mov	r1, r6
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b8      	blx	r7
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	f43f ae3d 	beq.w	800ce24 <_printf_float+0x9c>
 800d1aa:	f108 0801 	add.w	r8, r8, #1
 800d1ae:	68e3      	ldr	r3, [r4, #12]
 800d1b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1b2:	1a5b      	subs	r3, r3, r1
 800d1b4:	4543      	cmp	r3, r8
 800d1b6:	dcf0      	bgt.n	800d19a <_printf_float+0x412>
 800d1b8:	e6f7      	b.n	800cfaa <_printf_float+0x222>
 800d1ba:	f04f 0800 	mov.w	r8, #0
 800d1be:	f104 0919 	add.w	r9, r4, #25
 800d1c2:	e7f4      	b.n	800d1ae <_printf_float+0x426>

0800d1c4 <_printf_common>:
 800d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	4699      	mov	r9, r3
 800d1cc:	688a      	ldr	r2, [r1, #8]
 800d1ce:	690b      	ldr	r3, [r1, #16]
 800d1d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	bfb8      	it	lt
 800d1d8:	4613      	movlt	r3, r2
 800d1da:	6033      	str	r3, [r6, #0]
 800d1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	b10a      	cbz	r2, 800d1ea <_printf_common+0x26>
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	6033      	str	r3, [r6, #0]
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	0699      	lsls	r1, r3, #26
 800d1ee:	bf42      	ittt	mi
 800d1f0:	6833      	ldrmi	r3, [r6, #0]
 800d1f2:	3302      	addmi	r3, #2
 800d1f4:	6033      	strmi	r3, [r6, #0]
 800d1f6:	6825      	ldr	r5, [r4, #0]
 800d1f8:	f015 0506 	ands.w	r5, r5, #6
 800d1fc:	d106      	bne.n	800d20c <_printf_common+0x48>
 800d1fe:	f104 0a19 	add.w	sl, r4, #25
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	6832      	ldr	r2, [r6, #0]
 800d206:	1a9b      	subs	r3, r3, r2
 800d208:	42ab      	cmp	r3, r5
 800d20a:	dc26      	bgt.n	800d25a <_printf_common+0x96>
 800d20c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d210:	1e13      	subs	r3, r2, #0
 800d212:	6822      	ldr	r2, [r4, #0]
 800d214:	bf18      	it	ne
 800d216:	2301      	movne	r3, #1
 800d218:	0692      	lsls	r2, r2, #26
 800d21a:	d42b      	bmi.n	800d274 <_printf_common+0xb0>
 800d21c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d220:	4649      	mov	r1, r9
 800d222:	4638      	mov	r0, r7
 800d224:	47c0      	blx	r8
 800d226:	3001      	adds	r0, #1
 800d228:	d01e      	beq.n	800d268 <_printf_common+0xa4>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	68e5      	ldr	r5, [r4, #12]
 800d22e:	6832      	ldr	r2, [r6, #0]
 800d230:	f003 0306 	and.w	r3, r3, #6
 800d234:	2b04      	cmp	r3, #4
 800d236:	bf08      	it	eq
 800d238:	1aad      	subeq	r5, r5, r2
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	6922      	ldr	r2, [r4, #16]
 800d23e:	bf0c      	ite	eq
 800d240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d244:	2500      	movne	r5, #0
 800d246:	4293      	cmp	r3, r2
 800d248:	bfc4      	itt	gt
 800d24a:	1a9b      	subgt	r3, r3, r2
 800d24c:	18ed      	addgt	r5, r5, r3
 800d24e:	2600      	movs	r6, #0
 800d250:	341a      	adds	r4, #26
 800d252:	42b5      	cmp	r5, r6
 800d254:	d11a      	bne.n	800d28c <_printf_common+0xc8>
 800d256:	2000      	movs	r0, #0
 800d258:	e008      	b.n	800d26c <_printf_common+0xa8>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4652      	mov	r2, sl
 800d25e:	4649      	mov	r1, r9
 800d260:	4638      	mov	r0, r7
 800d262:	47c0      	blx	r8
 800d264:	3001      	adds	r0, #1
 800d266:	d103      	bne.n	800d270 <_printf_common+0xac>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d270:	3501      	adds	r5, #1
 800d272:	e7c6      	b.n	800d202 <_printf_common+0x3e>
 800d274:	18e1      	adds	r1, r4, r3
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	2030      	movs	r0, #48	; 0x30
 800d27a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d27e:	4422      	add	r2, r4
 800d280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d288:	3302      	adds	r3, #2
 800d28a:	e7c7      	b.n	800d21c <_printf_common+0x58>
 800d28c:	2301      	movs	r3, #1
 800d28e:	4622      	mov	r2, r4
 800d290:	4649      	mov	r1, r9
 800d292:	4638      	mov	r0, r7
 800d294:	47c0      	blx	r8
 800d296:	3001      	adds	r0, #1
 800d298:	d0e6      	beq.n	800d268 <_printf_common+0xa4>
 800d29a:	3601      	adds	r6, #1
 800d29c:	e7d9      	b.n	800d252 <_printf_common+0x8e>
	...

0800d2a0 <_printf_i>:
 800d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	7e0f      	ldrb	r7, [r1, #24]
 800d2a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2a8:	2f78      	cmp	r7, #120	; 0x78
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2b6:	d807      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2b8:	2f62      	cmp	r7, #98	; 0x62
 800d2ba:	d80a      	bhi.n	800d2d2 <_printf_i+0x32>
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	f000 80d8 	beq.w	800d472 <_printf_i+0x1d2>
 800d2c2:	2f58      	cmp	r7, #88	; 0x58
 800d2c4:	f000 80a3 	beq.w	800d40e <_printf_i+0x16e>
 800d2c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2d0:	e03a      	b.n	800d348 <_printf_i+0xa8>
 800d2d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2d6:	2b15      	cmp	r3, #21
 800d2d8:	d8f6      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2da:	a101      	add	r1, pc, #4	; (adr r1, 800d2e0 <_printf_i+0x40>)
 800d2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e0:	0800d339 	.word	0x0800d339
 800d2e4:	0800d34d 	.word	0x0800d34d
 800d2e8:	0800d2c9 	.word	0x0800d2c9
 800d2ec:	0800d2c9 	.word	0x0800d2c9
 800d2f0:	0800d2c9 	.word	0x0800d2c9
 800d2f4:	0800d2c9 	.word	0x0800d2c9
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d2c9 	.word	0x0800d2c9
 800d300:	0800d2c9 	.word	0x0800d2c9
 800d304:	0800d2c9 	.word	0x0800d2c9
 800d308:	0800d2c9 	.word	0x0800d2c9
 800d30c:	0800d459 	.word	0x0800d459
 800d310:	0800d37d 	.word	0x0800d37d
 800d314:	0800d43b 	.word	0x0800d43b
 800d318:	0800d2c9 	.word	0x0800d2c9
 800d31c:	0800d2c9 	.word	0x0800d2c9
 800d320:	0800d47b 	.word	0x0800d47b
 800d324:	0800d2c9 	.word	0x0800d2c9
 800d328:	0800d37d 	.word	0x0800d37d
 800d32c:	0800d2c9 	.word	0x0800d2c9
 800d330:	0800d2c9 	.word	0x0800d2c9
 800d334:	0800d443 	.word	0x0800d443
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	602a      	str	r2, [r5, #0]
 800d340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e0a3      	b.n	800d494 <_printf_i+0x1f4>
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	6829      	ldr	r1, [r5, #0]
 800d350:	0606      	lsls	r6, r0, #24
 800d352:	f101 0304 	add.w	r3, r1, #4
 800d356:	d50a      	bpl.n	800d36e <_printf_i+0xce>
 800d358:	680e      	ldr	r6, [r1, #0]
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	2e00      	cmp	r6, #0
 800d35e:	da03      	bge.n	800d368 <_printf_i+0xc8>
 800d360:	232d      	movs	r3, #45	; 0x2d
 800d362:	4276      	negs	r6, r6
 800d364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d368:	485e      	ldr	r0, [pc, #376]	; (800d4e4 <_printf_i+0x244>)
 800d36a:	230a      	movs	r3, #10
 800d36c:	e019      	b.n	800d3a2 <_printf_i+0x102>
 800d36e:	680e      	ldr	r6, [r1, #0]
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d376:	bf18      	it	ne
 800d378:	b236      	sxthne	r6, r6
 800d37a:	e7ef      	b.n	800d35c <_printf_i+0xbc>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	1d19      	adds	r1, r3, #4
 800d382:	6029      	str	r1, [r5, #0]
 800d384:	0601      	lsls	r1, r0, #24
 800d386:	d501      	bpl.n	800d38c <_printf_i+0xec>
 800d388:	681e      	ldr	r6, [r3, #0]
 800d38a:	e002      	b.n	800d392 <_printf_i+0xf2>
 800d38c:	0646      	lsls	r6, r0, #25
 800d38e:	d5fb      	bpl.n	800d388 <_printf_i+0xe8>
 800d390:	881e      	ldrh	r6, [r3, #0]
 800d392:	4854      	ldr	r0, [pc, #336]	; (800d4e4 <_printf_i+0x244>)
 800d394:	2f6f      	cmp	r7, #111	; 0x6f
 800d396:	bf0c      	ite	eq
 800d398:	2308      	moveq	r3, #8
 800d39a:	230a      	movne	r3, #10
 800d39c:	2100      	movs	r1, #0
 800d39e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3a2:	6865      	ldr	r5, [r4, #4]
 800d3a4:	60a5      	str	r5, [r4, #8]
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	bfa2      	ittt	ge
 800d3aa:	6821      	ldrge	r1, [r4, #0]
 800d3ac:	f021 0104 	bicge.w	r1, r1, #4
 800d3b0:	6021      	strge	r1, [r4, #0]
 800d3b2:	b90e      	cbnz	r6, 800d3b8 <_printf_i+0x118>
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	d04d      	beq.n	800d454 <_printf_i+0x1b4>
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3be:	fb03 6711 	mls	r7, r3, r1, r6
 800d3c2:	5dc7      	ldrb	r7, [r0, r7]
 800d3c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3c8:	4637      	mov	r7, r6
 800d3ca:	42bb      	cmp	r3, r7
 800d3cc:	460e      	mov	r6, r1
 800d3ce:	d9f4      	bls.n	800d3ba <_printf_i+0x11a>
 800d3d0:	2b08      	cmp	r3, #8
 800d3d2:	d10b      	bne.n	800d3ec <_printf_i+0x14c>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	07de      	lsls	r6, r3, #31
 800d3d8:	d508      	bpl.n	800d3ec <_printf_i+0x14c>
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	6861      	ldr	r1, [r4, #4]
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	bfde      	ittt	le
 800d3e2:	2330      	movle	r3, #48	; 0x30
 800d3e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3ec:	1b52      	subs	r2, r2, r5
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	aa03      	add	r2, sp, #12
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	f7ff fee2 	bl	800d1c4 <_printf_common>
 800d400:	3001      	adds	r0, #1
 800d402:	d14c      	bne.n	800d49e <_printf_i+0x1fe>
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	b004      	add	sp, #16
 800d40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40e:	4835      	ldr	r0, [pc, #212]	; (800d4e4 <_printf_i+0x244>)
 800d410:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d414:	6829      	ldr	r1, [r5, #0]
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f851 6b04 	ldr.w	r6, [r1], #4
 800d41c:	6029      	str	r1, [r5, #0]
 800d41e:	061d      	lsls	r5, r3, #24
 800d420:	d514      	bpl.n	800d44c <_printf_i+0x1ac>
 800d422:	07df      	lsls	r7, r3, #31
 800d424:	bf44      	itt	mi
 800d426:	f043 0320 	orrmi.w	r3, r3, #32
 800d42a:	6023      	strmi	r3, [r4, #0]
 800d42c:	b91e      	cbnz	r6, 800d436 <_printf_i+0x196>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	f023 0320 	bic.w	r3, r3, #32
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	2310      	movs	r3, #16
 800d438:	e7b0      	b.n	800d39c <_printf_i+0xfc>
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	f043 0320 	orr.w	r3, r3, #32
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	2378      	movs	r3, #120	; 0x78
 800d444:	4828      	ldr	r0, [pc, #160]	; (800d4e8 <_printf_i+0x248>)
 800d446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d44a:	e7e3      	b.n	800d414 <_printf_i+0x174>
 800d44c:	0659      	lsls	r1, r3, #25
 800d44e:	bf48      	it	mi
 800d450:	b2b6      	uxthmi	r6, r6
 800d452:	e7e6      	b.n	800d422 <_printf_i+0x182>
 800d454:	4615      	mov	r5, r2
 800d456:	e7bb      	b.n	800d3d0 <_printf_i+0x130>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	6826      	ldr	r6, [r4, #0]
 800d45c:	6961      	ldr	r1, [r4, #20]
 800d45e:	1d18      	adds	r0, r3, #4
 800d460:	6028      	str	r0, [r5, #0]
 800d462:	0635      	lsls	r5, r6, #24
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	d501      	bpl.n	800d46c <_printf_i+0x1cc>
 800d468:	6019      	str	r1, [r3, #0]
 800d46a:	e002      	b.n	800d472 <_printf_i+0x1d2>
 800d46c:	0670      	lsls	r0, r6, #25
 800d46e:	d5fb      	bpl.n	800d468 <_printf_i+0x1c8>
 800d470:	8019      	strh	r1, [r3, #0]
 800d472:	2300      	movs	r3, #0
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	4615      	mov	r5, r2
 800d478:	e7ba      	b.n	800d3f0 <_printf_i+0x150>
 800d47a:	682b      	ldr	r3, [r5, #0]
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	602a      	str	r2, [r5, #0]
 800d480:	681d      	ldr	r5, [r3, #0]
 800d482:	6862      	ldr	r2, [r4, #4]
 800d484:	2100      	movs	r1, #0
 800d486:	4628      	mov	r0, r5
 800d488:	f7f3 fb7a 	bl	8000b80 <memchr>
 800d48c:	b108      	cbz	r0, 800d492 <_printf_i+0x1f2>
 800d48e:	1b40      	subs	r0, r0, r5
 800d490:	6060      	str	r0, [r4, #4]
 800d492:	6863      	ldr	r3, [r4, #4]
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	2300      	movs	r3, #0
 800d498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d49c:	e7a8      	b.n	800d3f0 <_printf_i+0x150>
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	47d0      	blx	sl
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d0ab      	beq.n	800d404 <_printf_i+0x164>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	079b      	lsls	r3, r3, #30
 800d4b0:	d413      	bmi.n	800d4da <_printf_i+0x23a>
 800d4b2:	68e0      	ldr	r0, [r4, #12]
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	4298      	cmp	r0, r3
 800d4b8:	bfb8      	it	lt
 800d4ba:	4618      	movlt	r0, r3
 800d4bc:	e7a4      	b.n	800d408 <_printf_i+0x168>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	47d0      	blx	sl
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d09b      	beq.n	800d404 <_printf_i+0x164>
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	68e3      	ldr	r3, [r4, #12]
 800d4d0:	9903      	ldr	r1, [sp, #12]
 800d4d2:	1a5b      	subs	r3, r3, r1
 800d4d4:	42ab      	cmp	r3, r5
 800d4d6:	dcf2      	bgt.n	800d4be <_printf_i+0x21e>
 800d4d8:	e7eb      	b.n	800d4b2 <_printf_i+0x212>
 800d4da:	2500      	movs	r5, #0
 800d4dc:	f104 0619 	add.w	r6, r4, #25
 800d4e0:	e7f5      	b.n	800d4ce <_printf_i+0x22e>
 800d4e2:	bf00      	nop
 800d4e4:	0800fbda 	.word	0x0800fbda
 800d4e8:	0800fbeb 	.word	0x0800fbeb

0800d4ec <iprintf>:
 800d4ec:	b40f      	push	{r0, r1, r2, r3}
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <iprintf+0x2c>)
 800d4f0:	b513      	push	{r0, r1, r4, lr}
 800d4f2:	681c      	ldr	r4, [r3, #0]
 800d4f4:	b124      	cbz	r4, 800d500 <iprintf+0x14>
 800d4f6:	69a3      	ldr	r3, [r4, #24]
 800d4f8:	b913      	cbnz	r3, 800d500 <iprintf+0x14>
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f001 f858 	bl	800e5b0 <__sinit>
 800d500:	ab05      	add	r3, sp, #20
 800d502:	9a04      	ldr	r2, [sp, #16]
 800d504:	68a1      	ldr	r1, [r4, #8]
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	4620      	mov	r0, r4
 800d50a:	f001 fe07 	bl	800f11c <_vfiprintf_r>
 800d50e:	b002      	add	sp, #8
 800d510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d514:	b004      	add	sp, #16
 800d516:	4770      	bx	lr
 800d518:	2000003c 	.word	0x2000003c

0800d51c <_puts_r>:
 800d51c:	b570      	push	{r4, r5, r6, lr}
 800d51e:	460e      	mov	r6, r1
 800d520:	4605      	mov	r5, r0
 800d522:	b118      	cbz	r0, 800d52c <_puts_r+0x10>
 800d524:	6983      	ldr	r3, [r0, #24]
 800d526:	b90b      	cbnz	r3, 800d52c <_puts_r+0x10>
 800d528:	f001 f842 	bl	800e5b0 <__sinit>
 800d52c:	69ab      	ldr	r3, [r5, #24]
 800d52e:	68ac      	ldr	r4, [r5, #8]
 800d530:	b913      	cbnz	r3, 800d538 <_puts_r+0x1c>
 800d532:	4628      	mov	r0, r5
 800d534:	f001 f83c 	bl	800e5b0 <__sinit>
 800d538:	4b2c      	ldr	r3, [pc, #176]	; (800d5ec <_puts_r+0xd0>)
 800d53a:	429c      	cmp	r4, r3
 800d53c:	d120      	bne.n	800d580 <_puts_r+0x64>
 800d53e:	686c      	ldr	r4, [r5, #4]
 800d540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d542:	07db      	lsls	r3, r3, #31
 800d544:	d405      	bmi.n	800d552 <_puts_r+0x36>
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	0598      	lsls	r0, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_puts_r+0x36>
 800d54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54e:	f001 f8d2 	bl	800e6f6 <__retarget_lock_acquire_recursive>
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	0719      	lsls	r1, r3, #28
 800d556:	d51d      	bpl.n	800d594 <_puts_r+0x78>
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	b1db      	cbz	r3, 800d594 <_puts_r+0x78>
 800d55c:	3e01      	subs	r6, #1
 800d55e:	68a3      	ldr	r3, [r4, #8]
 800d560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d564:	3b01      	subs	r3, #1
 800d566:	60a3      	str	r3, [r4, #8]
 800d568:	bb39      	cbnz	r1, 800d5ba <_puts_r+0x9e>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	da38      	bge.n	800d5e0 <_puts_r+0xc4>
 800d56e:	4622      	mov	r2, r4
 800d570:	210a      	movs	r1, #10
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f848 	bl	800d608 <__swbuf_r>
 800d578:	3001      	adds	r0, #1
 800d57a:	d011      	beq.n	800d5a0 <_puts_r+0x84>
 800d57c:	250a      	movs	r5, #10
 800d57e:	e011      	b.n	800d5a4 <_puts_r+0x88>
 800d580:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <_puts_r+0xd4>)
 800d582:	429c      	cmp	r4, r3
 800d584:	d101      	bne.n	800d58a <_puts_r+0x6e>
 800d586:	68ac      	ldr	r4, [r5, #8]
 800d588:	e7da      	b.n	800d540 <_puts_r+0x24>
 800d58a:	4b1a      	ldr	r3, [pc, #104]	; (800d5f4 <_puts_r+0xd8>)
 800d58c:	429c      	cmp	r4, r3
 800d58e:	bf08      	it	eq
 800d590:	68ec      	ldreq	r4, [r5, #12]
 800d592:	e7d5      	b.n	800d540 <_puts_r+0x24>
 800d594:	4621      	mov	r1, r4
 800d596:	4628      	mov	r0, r5
 800d598:	f000 f888 	bl	800d6ac <__swsetup_r>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d0dd      	beq.n	800d55c <_puts_r+0x40>
 800d5a0:	f04f 35ff 	mov.w	r5, #4294967295
 800d5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5a6:	07da      	lsls	r2, r3, #31
 800d5a8:	d405      	bmi.n	800d5b6 <_puts_r+0x9a>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	059b      	lsls	r3, r3, #22
 800d5ae:	d402      	bmi.n	800d5b6 <_puts_r+0x9a>
 800d5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5b2:	f001 f8a1 	bl	800e6f8 <__retarget_lock_release_recursive>
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	da04      	bge.n	800d5c8 <_puts_r+0xac>
 800d5be:	69a2      	ldr	r2, [r4, #24]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	dc06      	bgt.n	800d5d2 <_puts_r+0xb6>
 800d5c4:	290a      	cmp	r1, #10
 800d5c6:	d004      	beq.n	800d5d2 <_puts_r+0xb6>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	6022      	str	r2, [r4, #0]
 800d5ce:	7019      	strb	r1, [r3, #0]
 800d5d0:	e7c5      	b.n	800d55e <_puts_r+0x42>
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 f817 	bl	800d608 <__swbuf_r>
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d1bf      	bne.n	800d55e <_puts_r+0x42>
 800d5de:	e7df      	b.n	800d5a0 <_puts_r+0x84>
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	250a      	movs	r5, #10
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	6022      	str	r2, [r4, #0]
 800d5e8:	701d      	strb	r5, [r3, #0]
 800d5ea:	e7db      	b.n	800d5a4 <_puts_r+0x88>
 800d5ec:	0800fcac 	.word	0x0800fcac
 800d5f0:	0800fccc 	.word	0x0800fccc
 800d5f4:	0800fc8c 	.word	0x0800fc8c

0800d5f8 <puts>:
 800d5f8:	4b02      	ldr	r3, [pc, #8]	; (800d604 <puts+0xc>)
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	f7ff bf8d 	b.w	800d51c <_puts_r>
 800d602:	bf00      	nop
 800d604:	2000003c 	.word	0x2000003c

0800d608 <__swbuf_r>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	460e      	mov	r6, r1
 800d60c:	4614      	mov	r4, r2
 800d60e:	4605      	mov	r5, r0
 800d610:	b118      	cbz	r0, 800d61a <__swbuf_r+0x12>
 800d612:	6983      	ldr	r3, [r0, #24]
 800d614:	b90b      	cbnz	r3, 800d61a <__swbuf_r+0x12>
 800d616:	f000 ffcb 	bl	800e5b0 <__sinit>
 800d61a:	4b21      	ldr	r3, [pc, #132]	; (800d6a0 <__swbuf_r+0x98>)
 800d61c:	429c      	cmp	r4, r3
 800d61e:	d12b      	bne.n	800d678 <__swbuf_r+0x70>
 800d620:	686c      	ldr	r4, [r5, #4]
 800d622:	69a3      	ldr	r3, [r4, #24]
 800d624:	60a3      	str	r3, [r4, #8]
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	071a      	lsls	r2, r3, #28
 800d62a:	d52f      	bpl.n	800d68c <__swbuf_r+0x84>
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	b36b      	cbz	r3, 800d68c <__swbuf_r+0x84>
 800d630:	6923      	ldr	r3, [r4, #16]
 800d632:	6820      	ldr	r0, [r4, #0]
 800d634:	1ac0      	subs	r0, r0, r3
 800d636:	6963      	ldr	r3, [r4, #20]
 800d638:	b2f6      	uxtb	r6, r6
 800d63a:	4283      	cmp	r3, r0
 800d63c:	4637      	mov	r7, r6
 800d63e:	dc04      	bgt.n	800d64a <__swbuf_r+0x42>
 800d640:	4621      	mov	r1, r4
 800d642:	4628      	mov	r0, r5
 800d644:	f000 ff20 	bl	800e488 <_fflush_r>
 800d648:	bb30      	cbnz	r0, 800d698 <__swbuf_r+0x90>
 800d64a:	68a3      	ldr	r3, [r4, #8]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	60a3      	str	r3, [r4, #8]
 800d650:	6823      	ldr	r3, [r4, #0]
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	6022      	str	r2, [r4, #0]
 800d656:	701e      	strb	r6, [r3, #0]
 800d658:	6963      	ldr	r3, [r4, #20]
 800d65a:	3001      	adds	r0, #1
 800d65c:	4283      	cmp	r3, r0
 800d65e:	d004      	beq.n	800d66a <__swbuf_r+0x62>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	07db      	lsls	r3, r3, #31
 800d664:	d506      	bpl.n	800d674 <__swbuf_r+0x6c>
 800d666:	2e0a      	cmp	r6, #10
 800d668:	d104      	bne.n	800d674 <__swbuf_r+0x6c>
 800d66a:	4621      	mov	r1, r4
 800d66c:	4628      	mov	r0, r5
 800d66e:	f000 ff0b 	bl	800e488 <_fflush_r>
 800d672:	b988      	cbnz	r0, 800d698 <__swbuf_r+0x90>
 800d674:	4638      	mov	r0, r7
 800d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <__swbuf_r+0x9c>)
 800d67a:	429c      	cmp	r4, r3
 800d67c:	d101      	bne.n	800d682 <__swbuf_r+0x7a>
 800d67e:	68ac      	ldr	r4, [r5, #8]
 800d680:	e7cf      	b.n	800d622 <__swbuf_r+0x1a>
 800d682:	4b09      	ldr	r3, [pc, #36]	; (800d6a8 <__swbuf_r+0xa0>)
 800d684:	429c      	cmp	r4, r3
 800d686:	bf08      	it	eq
 800d688:	68ec      	ldreq	r4, [r5, #12]
 800d68a:	e7ca      	b.n	800d622 <__swbuf_r+0x1a>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	f000 f80c 	bl	800d6ac <__swsetup_r>
 800d694:	2800      	cmp	r0, #0
 800d696:	d0cb      	beq.n	800d630 <__swbuf_r+0x28>
 800d698:	f04f 37ff 	mov.w	r7, #4294967295
 800d69c:	e7ea      	b.n	800d674 <__swbuf_r+0x6c>
 800d69e:	bf00      	nop
 800d6a0:	0800fcac 	.word	0x0800fcac
 800d6a4:	0800fccc 	.word	0x0800fccc
 800d6a8:	0800fc8c 	.word	0x0800fc8c

0800d6ac <__swsetup_r>:
 800d6ac:	4b32      	ldr	r3, [pc, #200]	; (800d778 <__swsetup_r+0xcc>)
 800d6ae:	b570      	push	{r4, r5, r6, lr}
 800d6b0:	681d      	ldr	r5, [r3, #0]
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	b125      	cbz	r5, 800d6c2 <__swsetup_r+0x16>
 800d6b8:	69ab      	ldr	r3, [r5, #24]
 800d6ba:	b913      	cbnz	r3, 800d6c2 <__swsetup_r+0x16>
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f000 ff77 	bl	800e5b0 <__sinit>
 800d6c2:	4b2e      	ldr	r3, [pc, #184]	; (800d77c <__swsetup_r+0xd0>)
 800d6c4:	429c      	cmp	r4, r3
 800d6c6:	d10f      	bne.n	800d6e8 <__swsetup_r+0x3c>
 800d6c8:	686c      	ldr	r4, [r5, #4]
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6d0:	0719      	lsls	r1, r3, #28
 800d6d2:	d42c      	bmi.n	800d72e <__swsetup_r+0x82>
 800d6d4:	06dd      	lsls	r5, r3, #27
 800d6d6:	d411      	bmi.n	800d6fc <__swsetup_r+0x50>
 800d6d8:	2309      	movs	r3, #9
 800d6da:	6033      	str	r3, [r6, #0]
 800d6dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e6:	e03e      	b.n	800d766 <__swsetup_r+0xba>
 800d6e8:	4b25      	ldr	r3, [pc, #148]	; (800d780 <__swsetup_r+0xd4>)
 800d6ea:	429c      	cmp	r4, r3
 800d6ec:	d101      	bne.n	800d6f2 <__swsetup_r+0x46>
 800d6ee:	68ac      	ldr	r4, [r5, #8]
 800d6f0:	e7eb      	b.n	800d6ca <__swsetup_r+0x1e>
 800d6f2:	4b24      	ldr	r3, [pc, #144]	; (800d784 <__swsetup_r+0xd8>)
 800d6f4:	429c      	cmp	r4, r3
 800d6f6:	bf08      	it	eq
 800d6f8:	68ec      	ldreq	r4, [r5, #12]
 800d6fa:	e7e6      	b.n	800d6ca <__swsetup_r+0x1e>
 800d6fc:	0758      	lsls	r0, r3, #29
 800d6fe:	d512      	bpl.n	800d726 <__swsetup_r+0x7a>
 800d700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d702:	b141      	cbz	r1, 800d716 <__swsetup_r+0x6a>
 800d704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d708:	4299      	cmp	r1, r3
 800d70a:	d002      	beq.n	800d712 <__swsetup_r+0x66>
 800d70c:	4630      	mov	r0, r6
 800d70e:	f001 fbfb 	bl	800ef08 <_free_r>
 800d712:	2300      	movs	r3, #0
 800d714:	6363      	str	r3, [r4, #52]	; 0x34
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d71c:	81a3      	strh	r3, [r4, #12]
 800d71e:	2300      	movs	r3, #0
 800d720:	6063      	str	r3, [r4, #4]
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	6023      	str	r3, [r4, #0]
 800d726:	89a3      	ldrh	r3, [r4, #12]
 800d728:	f043 0308 	orr.w	r3, r3, #8
 800d72c:	81a3      	strh	r3, [r4, #12]
 800d72e:	6923      	ldr	r3, [r4, #16]
 800d730:	b94b      	cbnz	r3, 800d746 <__swsetup_r+0x9a>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d73c:	d003      	beq.n	800d746 <__swsetup_r+0x9a>
 800d73e:	4621      	mov	r1, r4
 800d740:	4630      	mov	r0, r6
 800d742:	f000 ffff 	bl	800e744 <__smakebuf_r>
 800d746:	89a0      	ldrh	r0, [r4, #12]
 800d748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d74c:	f010 0301 	ands.w	r3, r0, #1
 800d750:	d00a      	beq.n	800d768 <__swsetup_r+0xbc>
 800d752:	2300      	movs	r3, #0
 800d754:	60a3      	str	r3, [r4, #8]
 800d756:	6963      	ldr	r3, [r4, #20]
 800d758:	425b      	negs	r3, r3
 800d75a:	61a3      	str	r3, [r4, #24]
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	b943      	cbnz	r3, 800d772 <__swsetup_r+0xc6>
 800d760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d764:	d1ba      	bne.n	800d6dc <__swsetup_r+0x30>
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	0781      	lsls	r1, r0, #30
 800d76a:	bf58      	it	pl
 800d76c:	6963      	ldrpl	r3, [r4, #20]
 800d76e:	60a3      	str	r3, [r4, #8]
 800d770:	e7f4      	b.n	800d75c <__swsetup_r+0xb0>
 800d772:	2000      	movs	r0, #0
 800d774:	e7f7      	b.n	800d766 <__swsetup_r+0xba>
 800d776:	bf00      	nop
 800d778:	2000003c 	.word	0x2000003c
 800d77c:	0800fcac 	.word	0x0800fcac
 800d780:	0800fccc 	.word	0x0800fccc
 800d784:	0800fc8c 	.word	0x0800fc8c

0800d788 <quorem>:
 800d788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	6903      	ldr	r3, [r0, #16]
 800d78e:	690c      	ldr	r4, [r1, #16]
 800d790:	42a3      	cmp	r3, r4
 800d792:	4607      	mov	r7, r0
 800d794:	f2c0 8081 	blt.w	800d89a <quorem+0x112>
 800d798:	3c01      	subs	r4, #1
 800d79a:	f101 0814 	add.w	r8, r1, #20
 800d79e:	f100 0514 	add.w	r5, r0, #20
 800d7a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7c0:	d331      	bcc.n	800d826 <quorem+0x9e>
 800d7c2:	f04f 0e00 	mov.w	lr, #0
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	46ac      	mov	ip, r5
 800d7ca:	46f2      	mov	sl, lr
 800d7cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7d0:	b293      	uxth	r3, r2
 800d7d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d7d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d7e0:	f8dc a000 	ldr.w	sl, [ip]
 800d7e4:	0c12      	lsrs	r2, r2, #16
 800d7e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d7ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	9b00      	ldr	r3, [sp, #0]
 800d7f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7f6:	b292      	uxth	r2, r2
 800d7f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d800:	f8bd 3000 	ldrh.w	r3, [sp]
 800d804:	4581      	cmp	r9, r0
 800d806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d80a:	f84c 3b04 	str.w	r3, [ip], #4
 800d80e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d812:	d2db      	bcs.n	800d7cc <quorem+0x44>
 800d814:	f855 300b 	ldr.w	r3, [r5, fp]
 800d818:	b92b      	cbnz	r3, 800d826 <quorem+0x9e>
 800d81a:	9b01      	ldr	r3, [sp, #4]
 800d81c:	3b04      	subs	r3, #4
 800d81e:	429d      	cmp	r5, r3
 800d820:	461a      	mov	r2, r3
 800d822:	d32e      	bcc.n	800d882 <quorem+0xfa>
 800d824:	613c      	str	r4, [r7, #16]
 800d826:	4638      	mov	r0, r7
 800d828:	f001 fa56 	bl	800ecd8 <__mcmp>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	db24      	blt.n	800d87a <quorem+0xf2>
 800d830:	3601      	adds	r6, #1
 800d832:	4628      	mov	r0, r5
 800d834:	f04f 0c00 	mov.w	ip, #0
 800d838:	f858 2b04 	ldr.w	r2, [r8], #4
 800d83c:	f8d0 e000 	ldr.w	lr, [r0]
 800d840:	b293      	uxth	r3, r2
 800d842:	ebac 0303 	sub.w	r3, ip, r3
 800d846:	0c12      	lsrs	r2, r2, #16
 800d848:	fa13 f38e 	uxtah	r3, r3, lr
 800d84c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d854:	b29b      	uxth	r3, r3
 800d856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d85a:	45c1      	cmp	r9, r8
 800d85c:	f840 3b04 	str.w	r3, [r0], #4
 800d860:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d864:	d2e8      	bcs.n	800d838 <quorem+0xb0>
 800d866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d86a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d86e:	b922      	cbnz	r2, 800d87a <quorem+0xf2>
 800d870:	3b04      	subs	r3, #4
 800d872:	429d      	cmp	r5, r3
 800d874:	461a      	mov	r2, r3
 800d876:	d30a      	bcc.n	800d88e <quorem+0x106>
 800d878:	613c      	str	r4, [r7, #16]
 800d87a:	4630      	mov	r0, r6
 800d87c:	b003      	add	sp, #12
 800d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d882:	6812      	ldr	r2, [r2, #0]
 800d884:	3b04      	subs	r3, #4
 800d886:	2a00      	cmp	r2, #0
 800d888:	d1cc      	bne.n	800d824 <quorem+0x9c>
 800d88a:	3c01      	subs	r4, #1
 800d88c:	e7c7      	b.n	800d81e <quorem+0x96>
 800d88e:	6812      	ldr	r2, [r2, #0]
 800d890:	3b04      	subs	r3, #4
 800d892:	2a00      	cmp	r2, #0
 800d894:	d1f0      	bne.n	800d878 <quorem+0xf0>
 800d896:	3c01      	subs	r4, #1
 800d898:	e7eb      	b.n	800d872 <quorem+0xea>
 800d89a:	2000      	movs	r0, #0
 800d89c:	e7ee      	b.n	800d87c <quorem+0xf4>
	...

0800d8a0 <_dtoa_r>:
 800d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	ed2d 8b02 	vpush	{d8}
 800d8a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d8aa:	b091      	sub	sp, #68	; 0x44
 800d8ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8b0:	ec59 8b10 	vmov	r8, r9, d0
 800d8b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d8b6:	9106      	str	r1, [sp, #24]
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	9208      	str	r2, [sp, #32]
 800d8bc:	930c      	str	r3, [sp, #48]	; 0x30
 800d8be:	b975      	cbnz	r5, 800d8de <_dtoa_r+0x3e>
 800d8c0:	2010      	movs	r0, #16
 800d8c2:	f000 ff7f 	bl	800e7c4 <malloc>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	6270      	str	r0, [r6, #36]	; 0x24
 800d8ca:	b920      	cbnz	r0, 800d8d6 <_dtoa_r+0x36>
 800d8cc:	4baa      	ldr	r3, [pc, #680]	; (800db78 <_dtoa_r+0x2d8>)
 800d8ce:	21ea      	movs	r1, #234	; 0xea
 800d8d0:	48aa      	ldr	r0, [pc, #680]	; (800db7c <_dtoa_r+0x2dc>)
 800d8d2:	f001 fdb9 	bl	800f448 <__assert_func>
 800d8d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8da:	6005      	str	r5, [r0, #0]
 800d8dc:	60c5      	str	r5, [r0, #12]
 800d8de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8e0:	6819      	ldr	r1, [r3, #0]
 800d8e2:	b151      	cbz	r1, 800d8fa <_dtoa_r+0x5a>
 800d8e4:	685a      	ldr	r2, [r3, #4]
 800d8e6:	604a      	str	r2, [r1, #4]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	4093      	lsls	r3, r2
 800d8ec:	608b      	str	r3, [r1, #8]
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f000 ffb0 	bl	800e854 <_Bfree>
 800d8f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	f1b9 0300 	subs.w	r3, r9, #0
 800d8fe:	bfbb      	ittet	lt
 800d900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d904:	9303      	strlt	r3, [sp, #12]
 800d906:	2300      	movge	r3, #0
 800d908:	2201      	movlt	r2, #1
 800d90a:	bfac      	ite	ge
 800d90c:	6023      	strge	r3, [r4, #0]
 800d90e:	6022      	strlt	r2, [r4, #0]
 800d910:	4b9b      	ldr	r3, [pc, #620]	; (800db80 <_dtoa_r+0x2e0>)
 800d912:	9c03      	ldr	r4, [sp, #12]
 800d914:	43a3      	bics	r3, r4
 800d916:	d11c      	bne.n	800d952 <_dtoa_r+0xb2>
 800d918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d91a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d91e:	6013      	str	r3, [r2, #0]
 800d920:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d924:	ea53 0308 	orrs.w	r3, r3, r8
 800d928:	f000 84fd 	beq.w	800e326 <_dtoa_r+0xa86>
 800d92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d92e:	b963      	cbnz	r3, 800d94a <_dtoa_r+0xaa>
 800d930:	4b94      	ldr	r3, [pc, #592]	; (800db84 <_dtoa_r+0x2e4>)
 800d932:	e01f      	b.n	800d974 <_dtoa_r+0xd4>
 800d934:	4b94      	ldr	r3, [pc, #592]	; (800db88 <_dtoa_r+0x2e8>)
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	3308      	adds	r3, #8
 800d93a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d93c:	6013      	str	r3, [r2, #0]
 800d93e:	9801      	ldr	r0, [sp, #4]
 800d940:	b011      	add	sp, #68	; 0x44
 800d942:	ecbd 8b02 	vpop	{d8}
 800d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94a:	4b8e      	ldr	r3, [pc, #568]	; (800db84 <_dtoa_r+0x2e4>)
 800d94c:	9301      	str	r3, [sp, #4]
 800d94e:	3303      	adds	r3, #3
 800d950:	e7f3      	b.n	800d93a <_dtoa_r+0x9a>
 800d952:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d956:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95e:	d10b      	bne.n	800d978 <_dtoa_r+0xd8>
 800d960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d962:	2301      	movs	r3, #1
 800d964:	6013      	str	r3, [r2, #0]
 800d966:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 84d9 	beq.w	800e320 <_dtoa_r+0xa80>
 800d96e:	4887      	ldr	r0, [pc, #540]	; (800db8c <_dtoa_r+0x2ec>)
 800d970:	6018      	str	r0, [r3, #0]
 800d972:	1e43      	subs	r3, r0, #1
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	e7e2      	b.n	800d93e <_dtoa_r+0x9e>
 800d978:	a90f      	add	r1, sp, #60	; 0x3c
 800d97a:	aa0e      	add	r2, sp, #56	; 0x38
 800d97c:	4630      	mov	r0, r6
 800d97e:	eeb0 0b48 	vmov.f64	d0, d8
 800d982:	f001 fa4f 	bl	800ee24 <__d2b>
 800d986:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d98a:	4605      	mov	r5, r0
 800d98c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d98e:	2900      	cmp	r1, #0
 800d990:	d046      	beq.n	800da20 <_dtoa_r+0x180>
 800d992:	ee18 4a90 	vmov	r4, s17
 800d996:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d99a:	ec53 2b18 	vmov	r2, r3, d8
 800d99e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d9a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d9aa:	2400      	movs	r4, #0
 800d9ac:	ec43 2b16 	vmov	d6, r2, r3
 800d9b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d9b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800db60 <_dtoa_r+0x2c0>
 800d9b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d9bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800db68 <_dtoa_r+0x2c8>
 800d9c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d9c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800db70 <_dtoa_r+0x2d0>
 800d9c8:	ee07 1a90 	vmov	s15, r1
 800d9cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d9d0:	eeb0 7b46 	vmov.f64	d7, d6
 800d9d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d9d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d9dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	ee16 ba90 	vmov	fp, s13
 800d9e8:	940a      	str	r4, [sp, #40]	; 0x28
 800d9ea:	d508      	bpl.n	800d9fe <_dtoa_r+0x15e>
 800d9ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d9f0:	eeb4 6b47 	vcmp.f64	d6, d7
 800d9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f8:	bf18      	it	ne
 800d9fa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d9fe:	f1bb 0f16 	cmp.w	fp, #22
 800da02:	d82f      	bhi.n	800da64 <_dtoa_r+0x1c4>
 800da04:	4b62      	ldr	r3, [pc, #392]	; (800db90 <_dtoa_r+0x2f0>)
 800da06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da0a:	ed93 7b00 	vldr	d7, [r3]
 800da0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800da12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da16:	d501      	bpl.n	800da1c <_dtoa_r+0x17c>
 800da18:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da1c:	2300      	movs	r3, #0
 800da1e:	e022      	b.n	800da66 <_dtoa_r+0x1c6>
 800da20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da22:	4401      	add	r1, r0
 800da24:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800da28:	2b20      	cmp	r3, #32
 800da2a:	bfc1      	itttt	gt
 800da2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da30:	fa04 f303 	lslgt.w	r3, r4, r3
 800da34:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800da38:	fa28 f804 	lsrgt.w	r8, r8, r4
 800da3c:	bfd6      	itet	le
 800da3e:	f1c3 0320 	rsble	r3, r3, #32
 800da42:	ea43 0808 	orrgt.w	r8, r3, r8
 800da46:	fa08 f803 	lslle.w	r8, r8, r3
 800da4a:	ee07 8a90 	vmov	s15, r8
 800da4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800da52:	3901      	subs	r1, #1
 800da54:	ee17 4a90 	vmov	r4, s15
 800da58:	ec53 2b17 	vmov	r2, r3, d7
 800da5c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800da60:	2401      	movs	r4, #1
 800da62:	e7a3      	b.n	800d9ac <_dtoa_r+0x10c>
 800da64:	2301      	movs	r3, #1
 800da66:	930b      	str	r3, [sp, #44]	; 0x2c
 800da68:	1a43      	subs	r3, r0, r1
 800da6a:	1e5a      	subs	r2, r3, #1
 800da6c:	bf45      	ittet	mi
 800da6e:	f1c3 0301 	rsbmi	r3, r3, #1
 800da72:	9304      	strmi	r3, [sp, #16]
 800da74:	2300      	movpl	r3, #0
 800da76:	2300      	movmi	r3, #0
 800da78:	9205      	str	r2, [sp, #20]
 800da7a:	bf54      	ite	pl
 800da7c:	9304      	strpl	r3, [sp, #16]
 800da7e:	9305      	strmi	r3, [sp, #20]
 800da80:	f1bb 0f00 	cmp.w	fp, #0
 800da84:	db18      	blt.n	800dab8 <_dtoa_r+0x218>
 800da86:	9b05      	ldr	r3, [sp, #20]
 800da88:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800da8c:	445b      	add	r3, fp
 800da8e:	9305      	str	r3, [sp, #20]
 800da90:	2300      	movs	r3, #0
 800da92:	9a06      	ldr	r2, [sp, #24]
 800da94:	2a09      	cmp	r2, #9
 800da96:	d849      	bhi.n	800db2c <_dtoa_r+0x28c>
 800da98:	2a05      	cmp	r2, #5
 800da9a:	bfc4      	itt	gt
 800da9c:	3a04      	subgt	r2, #4
 800da9e:	9206      	strgt	r2, [sp, #24]
 800daa0:	9a06      	ldr	r2, [sp, #24]
 800daa2:	f1a2 0202 	sub.w	r2, r2, #2
 800daa6:	bfcc      	ite	gt
 800daa8:	2400      	movgt	r4, #0
 800daaa:	2401      	movle	r4, #1
 800daac:	2a03      	cmp	r2, #3
 800daae:	d848      	bhi.n	800db42 <_dtoa_r+0x2a2>
 800dab0:	e8df f002 	tbb	[pc, r2]
 800dab4:	3a2c2e0b 	.word	0x3a2c2e0b
 800dab8:	9b04      	ldr	r3, [sp, #16]
 800daba:	2200      	movs	r2, #0
 800dabc:	eba3 030b 	sub.w	r3, r3, fp
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	9209      	str	r2, [sp, #36]	; 0x24
 800dac4:	f1cb 0300 	rsb	r3, fp, #0
 800dac8:	e7e3      	b.n	800da92 <_dtoa_r+0x1f2>
 800daca:	2200      	movs	r2, #0
 800dacc:	9207      	str	r2, [sp, #28]
 800dace:	9a08      	ldr	r2, [sp, #32]
 800dad0:	2a00      	cmp	r2, #0
 800dad2:	dc39      	bgt.n	800db48 <_dtoa_r+0x2a8>
 800dad4:	f04f 0a01 	mov.w	sl, #1
 800dad8:	46d1      	mov	r9, sl
 800dada:	4652      	mov	r2, sl
 800dadc:	f8cd a020 	str.w	sl, [sp, #32]
 800dae0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800dae2:	2100      	movs	r1, #0
 800dae4:	6079      	str	r1, [r7, #4]
 800dae6:	2004      	movs	r0, #4
 800dae8:	f100 0c14 	add.w	ip, r0, #20
 800daec:	4594      	cmp	ip, r2
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	d92f      	bls.n	800db52 <_dtoa_r+0x2b2>
 800daf2:	4630      	mov	r0, r6
 800daf4:	930d      	str	r3, [sp, #52]	; 0x34
 800daf6:	f000 fe6d 	bl	800e7d4 <_Balloc>
 800dafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dafc:	9001      	str	r0, [sp, #4]
 800dafe:	4602      	mov	r2, r0
 800db00:	2800      	cmp	r0, #0
 800db02:	d149      	bne.n	800db98 <_dtoa_r+0x2f8>
 800db04:	4b23      	ldr	r3, [pc, #140]	; (800db94 <_dtoa_r+0x2f4>)
 800db06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800db0a:	e6e1      	b.n	800d8d0 <_dtoa_r+0x30>
 800db0c:	2201      	movs	r2, #1
 800db0e:	e7dd      	b.n	800dacc <_dtoa_r+0x22c>
 800db10:	2200      	movs	r2, #0
 800db12:	9207      	str	r2, [sp, #28]
 800db14:	9a08      	ldr	r2, [sp, #32]
 800db16:	eb0b 0a02 	add.w	sl, fp, r2
 800db1a:	f10a 0901 	add.w	r9, sl, #1
 800db1e:	464a      	mov	r2, r9
 800db20:	2a01      	cmp	r2, #1
 800db22:	bfb8      	it	lt
 800db24:	2201      	movlt	r2, #1
 800db26:	e7db      	b.n	800dae0 <_dtoa_r+0x240>
 800db28:	2201      	movs	r2, #1
 800db2a:	e7f2      	b.n	800db12 <_dtoa_r+0x272>
 800db2c:	2401      	movs	r4, #1
 800db2e:	2200      	movs	r2, #0
 800db30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800db34:	f04f 3aff 	mov.w	sl, #4294967295
 800db38:	2100      	movs	r1, #0
 800db3a:	46d1      	mov	r9, sl
 800db3c:	2212      	movs	r2, #18
 800db3e:	9108      	str	r1, [sp, #32]
 800db40:	e7ce      	b.n	800dae0 <_dtoa_r+0x240>
 800db42:	2201      	movs	r2, #1
 800db44:	9207      	str	r2, [sp, #28]
 800db46:	e7f5      	b.n	800db34 <_dtoa_r+0x294>
 800db48:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db4c:	46d1      	mov	r9, sl
 800db4e:	4652      	mov	r2, sl
 800db50:	e7c6      	b.n	800dae0 <_dtoa_r+0x240>
 800db52:	3101      	adds	r1, #1
 800db54:	6079      	str	r1, [r7, #4]
 800db56:	0040      	lsls	r0, r0, #1
 800db58:	e7c6      	b.n	800dae8 <_dtoa_r+0x248>
 800db5a:	bf00      	nop
 800db5c:	f3af 8000 	nop.w
 800db60:	636f4361 	.word	0x636f4361
 800db64:	3fd287a7 	.word	0x3fd287a7
 800db68:	8b60c8b3 	.word	0x8b60c8b3
 800db6c:	3fc68a28 	.word	0x3fc68a28
 800db70:	509f79fb 	.word	0x509f79fb
 800db74:	3fd34413 	.word	0x3fd34413
 800db78:	0800fc09 	.word	0x0800fc09
 800db7c:	0800fc20 	.word	0x0800fc20
 800db80:	7ff00000 	.word	0x7ff00000
 800db84:	0800fc05 	.word	0x0800fc05
 800db88:	0800fbfc 	.word	0x0800fbfc
 800db8c:	0800fbd9 	.word	0x0800fbd9
 800db90:	0800fd70 	.word	0x0800fd70
 800db94:	0800fc7b 	.word	0x0800fc7b
 800db98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800db9a:	9901      	ldr	r1, [sp, #4]
 800db9c:	6011      	str	r1, [r2, #0]
 800db9e:	f1b9 0f0e 	cmp.w	r9, #14
 800dba2:	d86c      	bhi.n	800dc7e <_dtoa_r+0x3de>
 800dba4:	2c00      	cmp	r4, #0
 800dba6:	d06a      	beq.n	800dc7e <_dtoa_r+0x3de>
 800dba8:	f1bb 0f00 	cmp.w	fp, #0
 800dbac:	f340 80a0 	ble.w	800dcf0 <_dtoa_r+0x450>
 800dbb0:	49c1      	ldr	r1, [pc, #772]	; (800deb8 <_dtoa_r+0x618>)
 800dbb2:	f00b 020f 	and.w	r2, fp, #15
 800dbb6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800dbba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dbbe:	ed92 7b00 	vldr	d7, [r2]
 800dbc2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800dbc6:	f000 8087 	beq.w	800dcd8 <_dtoa_r+0x438>
 800dbca:	4abc      	ldr	r2, [pc, #752]	; (800debc <_dtoa_r+0x61c>)
 800dbcc:	ed92 6b08 	vldr	d6, [r2, #32]
 800dbd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800dbd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dbd8:	f001 010f 	and.w	r1, r1, #15
 800dbdc:	2203      	movs	r2, #3
 800dbde:	48b7      	ldr	r0, [pc, #732]	; (800debc <_dtoa_r+0x61c>)
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	d17b      	bne.n	800dcdc <_dtoa_r+0x43c>
 800dbe4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dbe8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dbec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbf2:	2900      	cmp	r1, #0
 800dbf4:	f000 80a2 	beq.w	800dd3c <_dtoa_r+0x49c>
 800dbf8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dbfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc08:	f140 8098 	bpl.w	800dd3c <_dtoa_r+0x49c>
 800dc0c:	f1b9 0f00 	cmp.w	r9, #0
 800dc10:	f000 8094 	beq.w	800dd3c <_dtoa_r+0x49c>
 800dc14:	f1ba 0f00 	cmp.w	sl, #0
 800dc18:	dd2f      	ble.n	800dc7a <_dtoa_r+0x3da>
 800dc1a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800dc1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc22:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc26:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dc2a:	3201      	adds	r2, #1
 800dc2c:	4650      	mov	r0, sl
 800dc2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dc32:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dc36:	ee07 2a90 	vmov	s15, r2
 800dc3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc3e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dc42:	ee15 4a90 	vmov	r4, s11
 800dc46:	ec52 1b15 	vmov	r1, r2, d5
 800dc4a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d177      	bne.n	800dd42 <_dtoa_r+0x4a2>
 800dc52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dc56:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dc5a:	ec42 1b17 	vmov	d7, r1, r2
 800dc5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc66:	f300 8263 	bgt.w	800e130 <_dtoa_r+0x890>
 800dc6a:	eeb1 7b47 	vneg.f64	d7, d7
 800dc6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc76:	f100 8258 	bmi.w	800e12a <_dtoa_r+0x88a>
 800dc7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc80:	2a00      	cmp	r2, #0
 800dc82:	f2c0 811d 	blt.w	800dec0 <_dtoa_r+0x620>
 800dc86:	f1bb 0f0e 	cmp.w	fp, #14
 800dc8a:	f300 8119 	bgt.w	800dec0 <_dtoa_r+0x620>
 800dc8e:	4b8a      	ldr	r3, [pc, #552]	; (800deb8 <_dtoa_r+0x618>)
 800dc90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc94:	ed93 6b00 	vldr	d6, [r3]
 800dc98:	9b08      	ldr	r3, [sp, #32]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f280 80b7 	bge.w	800de0e <_dtoa_r+0x56e>
 800dca0:	f1b9 0f00 	cmp.w	r9, #0
 800dca4:	f300 80b3 	bgt.w	800de0e <_dtoa_r+0x56e>
 800dca8:	f040 823f 	bne.w	800e12a <_dtoa_r+0x88a>
 800dcac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dcb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dcb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc0:	464c      	mov	r4, r9
 800dcc2:	464f      	mov	r7, r9
 800dcc4:	f280 8215 	bge.w	800e0f2 <_dtoa_r+0x852>
 800dcc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dccc:	2331      	movs	r3, #49	; 0x31
 800dcce:	f808 3b01 	strb.w	r3, [r8], #1
 800dcd2:	f10b 0b01 	add.w	fp, fp, #1
 800dcd6:	e211      	b.n	800e0fc <_dtoa_r+0x85c>
 800dcd8:	2202      	movs	r2, #2
 800dcda:	e780      	b.n	800dbde <_dtoa_r+0x33e>
 800dcdc:	07cc      	lsls	r4, r1, #31
 800dcde:	d504      	bpl.n	800dcea <_dtoa_r+0x44a>
 800dce0:	ed90 6b00 	vldr	d6, [r0]
 800dce4:	3201      	adds	r2, #1
 800dce6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcea:	1049      	asrs	r1, r1, #1
 800dcec:	3008      	adds	r0, #8
 800dcee:	e777      	b.n	800dbe0 <_dtoa_r+0x340>
 800dcf0:	d022      	beq.n	800dd38 <_dtoa_r+0x498>
 800dcf2:	f1cb 0100 	rsb	r1, fp, #0
 800dcf6:	4a70      	ldr	r2, [pc, #448]	; (800deb8 <_dtoa_r+0x618>)
 800dcf8:	f001 000f 	and.w	r0, r1, #15
 800dcfc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dd00:	ed92 7b00 	vldr	d7, [r2]
 800dd04:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dd08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd0c:	486b      	ldr	r0, [pc, #428]	; (800debc <_dtoa_r+0x61c>)
 800dd0e:	1109      	asrs	r1, r1, #4
 800dd10:	2400      	movs	r4, #0
 800dd12:	2202      	movs	r2, #2
 800dd14:	b929      	cbnz	r1, 800dd22 <_dtoa_r+0x482>
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	f43f af6a 	beq.w	800dbf0 <_dtoa_r+0x350>
 800dd1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd20:	e766      	b.n	800dbf0 <_dtoa_r+0x350>
 800dd22:	07cf      	lsls	r7, r1, #31
 800dd24:	d505      	bpl.n	800dd32 <_dtoa_r+0x492>
 800dd26:	ed90 6b00 	vldr	d6, [r0]
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	2401      	movs	r4, #1
 800dd2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd32:	1049      	asrs	r1, r1, #1
 800dd34:	3008      	adds	r0, #8
 800dd36:	e7ed      	b.n	800dd14 <_dtoa_r+0x474>
 800dd38:	2202      	movs	r2, #2
 800dd3a:	e759      	b.n	800dbf0 <_dtoa_r+0x350>
 800dd3c:	465f      	mov	r7, fp
 800dd3e:	4648      	mov	r0, r9
 800dd40:	e775      	b.n	800dc2e <_dtoa_r+0x38e>
 800dd42:	ec42 1b17 	vmov	d7, r1, r2
 800dd46:	4a5c      	ldr	r2, [pc, #368]	; (800deb8 <_dtoa_r+0x618>)
 800dd48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dd4c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dd50:	9a01      	ldr	r2, [sp, #4]
 800dd52:	1814      	adds	r4, r2, r0
 800dd54:	9a07      	ldr	r2, [sp, #28]
 800dd56:	b352      	cbz	r2, 800ddae <_dtoa_r+0x50e>
 800dd58:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dd5c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dd60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dd64:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dd68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dd6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dd70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dd74:	ee14 2a90 	vmov	r2, s9
 800dd78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dd7c:	3230      	adds	r2, #48	; 0x30
 800dd7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8a:	f808 2b01 	strb.w	r2, [r8], #1
 800dd8e:	d439      	bmi.n	800de04 <_dtoa_r+0x564>
 800dd90:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dd94:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	d472      	bmi.n	800de84 <_dtoa_r+0x5e4>
 800dd9e:	45a0      	cmp	r8, r4
 800dda0:	f43f af6b 	beq.w	800dc7a <_dtoa_r+0x3da>
 800dda4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dda8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ddac:	e7e0      	b.n	800dd70 <_dtoa_r+0x4d0>
 800ddae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ddb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ddbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ddc0:	ee14 2a90 	vmov	r2, s9
 800ddc4:	3230      	adds	r2, #48	; 0x30
 800ddc6:	f808 2b01 	strb.w	r2, [r8], #1
 800ddca:	45a0      	cmp	r8, r4
 800ddcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ddd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ddd4:	d118      	bne.n	800de08 <_dtoa_r+0x568>
 800ddd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ddda:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ddde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde6:	dc4d      	bgt.n	800de84 <_dtoa_r+0x5e4>
 800dde8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ddec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ddf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf4:	f57f af41 	bpl.w	800dc7a <_dtoa_r+0x3da>
 800ddf8:	4688      	mov	r8, r1
 800ddfa:	3901      	subs	r1, #1
 800ddfc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800de00:	2b30      	cmp	r3, #48	; 0x30
 800de02:	d0f9      	beq.n	800ddf8 <_dtoa_r+0x558>
 800de04:	46bb      	mov	fp, r7
 800de06:	e02a      	b.n	800de5e <_dtoa_r+0x5be>
 800de08:	ee26 6b03 	vmul.f64	d6, d6, d3
 800de0c:	e7d6      	b.n	800ddbc <_dtoa_r+0x51c>
 800de0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800de16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800de1e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800de22:	ee15 3a10 	vmov	r3, s10
 800de26:	3330      	adds	r3, #48	; 0x30
 800de28:	f808 3b01 	strb.w	r3, [r8], #1
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	eba8 0303 	sub.w	r3, r8, r3
 800de32:	4599      	cmp	r9, r3
 800de34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800de38:	eea3 7b46 	vfms.f64	d7, d3, d6
 800de3c:	d133      	bne.n	800dea6 <_dtoa_r+0x606>
 800de3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800de42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4a:	dc1a      	bgt.n	800de82 <_dtoa_r+0x5e2>
 800de4c:	eeb4 7b46 	vcmp.f64	d7, d6
 800de50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de54:	d103      	bne.n	800de5e <_dtoa_r+0x5be>
 800de56:	ee15 3a10 	vmov	r3, s10
 800de5a:	07d9      	lsls	r1, r3, #31
 800de5c:	d411      	bmi.n	800de82 <_dtoa_r+0x5e2>
 800de5e:	4629      	mov	r1, r5
 800de60:	4630      	mov	r0, r6
 800de62:	f000 fcf7 	bl	800e854 <_Bfree>
 800de66:	2300      	movs	r3, #0
 800de68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de6a:	f888 3000 	strb.w	r3, [r8]
 800de6e:	f10b 0301 	add.w	r3, fp, #1
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de76:	2b00      	cmp	r3, #0
 800de78:	f43f ad61 	beq.w	800d93e <_dtoa_r+0x9e>
 800de7c:	f8c3 8000 	str.w	r8, [r3]
 800de80:	e55d      	b.n	800d93e <_dtoa_r+0x9e>
 800de82:	465f      	mov	r7, fp
 800de84:	4643      	mov	r3, r8
 800de86:	4698      	mov	r8, r3
 800de88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de8c:	2a39      	cmp	r2, #57	; 0x39
 800de8e:	d106      	bne.n	800de9e <_dtoa_r+0x5fe>
 800de90:	9a01      	ldr	r2, [sp, #4]
 800de92:	429a      	cmp	r2, r3
 800de94:	d1f7      	bne.n	800de86 <_dtoa_r+0x5e6>
 800de96:	9901      	ldr	r1, [sp, #4]
 800de98:	2230      	movs	r2, #48	; 0x30
 800de9a:	3701      	adds	r7, #1
 800de9c:	700a      	strb	r2, [r1, #0]
 800de9e:	781a      	ldrb	r2, [r3, #0]
 800dea0:	3201      	adds	r2, #1
 800dea2:	701a      	strb	r2, [r3, #0]
 800dea4:	e7ae      	b.n	800de04 <_dtoa_r+0x564>
 800dea6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800deaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb2:	d1b2      	bne.n	800de1a <_dtoa_r+0x57a>
 800deb4:	e7d3      	b.n	800de5e <_dtoa_r+0x5be>
 800deb6:	bf00      	nop
 800deb8:	0800fd70 	.word	0x0800fd70
 800debc:	0800fd48 	.word	0x0800fd48
 800dec0:	9907      	ldr	r1, [sp, #28]
 800dec2:	2900      	cmp	r1, #0
 800dec4:	f000 80d0 	beq.w	800e068 <_dtoa_r+0x7c8>
 800dec8:	9906      	ldr	r1, [sp, #24]
 800deca:	2901      	cmp	r1, #1
 800decc:	f300 80b4 	bgt.w	800e038 <_dtoa_r+0x798>
 800ded0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ded2:	2900      	cmp	r1, #0
 800ded4:	f000 80ac 	beq.w	800e030 <_dtoa_r+0x790>
 800ded8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dedc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dee0:	461c      	mov	r4, r3
 800dee2:	930a      	str	r3, [sp, #40]	; 0x28
 800dee4:	9b04      	ldr	r3, [sp, #16]
 800dee6:	4413      	add	r3, r2
 800dee8:	9304      	str	r3, [sp, #16]
 800deea:	9b05      	ldr	r3, [sp, #20]
 800deec:	2101      	movs	r1, #1
 800deee:	4413      	add	r3, r2
 800def0:	4630      	mov	r0, r6
 800def2:	9305      	str	r3, [sp, #20]
 800def4:	f000 fd66 	bl	800e9c4 <__i2b>
 800def8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defa:	4607      	mov	r7, r0
 800defc:	f1b8 0f00 	cmp.w	r8, #0
 800df00:	dd0d      	ble.n	800df1e <_dtoa_r+0x67e>
 800df02:	9a05      	ldr	r2, [sp, #20]
 800df04:	2a00      	cmp	r2, #0
 800df06:	dd0a      	ble.n	800df1e <_dtoa_r+0x67e>
 800df08:	4542      	cmp	r2, r8
 800df0a:	9904      	ldr	r1, [sp, #16]
 800df0c:	bfa8      	it	ge
 800df0e:	4642      	movge	r2, r8
 800df10:	1a89      	subs	r1, r1, r2
 800df12:	9104      	str	r1, [sp, #16]
 800df14:	9905      	ldr	r1, [sp, #20]
 800df16:	eba8 0802 	sub.w	r8, r8, r2
 800df1a:	1a8a      	subs	r2, r1, r2
 800df1c:	9205      	str	r2, [sp, #20]
 800df1e:	b303      	cbz	r3, 800df62 <_dtoa_r+0x6c2>
 800df20:	9a07      	ldr	r2, [sp, #28]
 800df22:	2a00      	cmp	r2, #0
 800df24:	f000 80a5 	beq.w	800e072 <_dtoa_r+0x7d2>
 800df28:	2c00      	cmp	r4, #0
 800df2a:	dd13      	ble.n	800df54 <_dtoa_r+0x6b4>
 800df2c:	4639      	mov	r1, r7
 800df2e:	4622      	mov	r2, r4
 800df30:	4630      	mov	r0, r6
 800df32:	930d      	str	r3, [sp, #52]	; 0x34
 800df34:	f000 fe06 	bl	800eb44 <__pow5mult>
 800df38:	462a      	mov	r2, r5
 800df3a:	4601      	mov	r1, r0
 800df3c:	4607      	mov	r7, r0
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 fd56 	bl	800e9f0 <__multiply>
 800df44:	4629      	mov	r1, r5
 800df46:	900a      	str	r0, [sp, #40]	; 0x28
 800df48:	4630      	mov	r0, r6
 800df4a:	f000 fc83 	bl	800e854 <_Bfree>
 800df4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df52:	4615      	mov	r5, r2
 800df54:	1b1a      	subs	r2, r3, r4
 800df56:	d004      	beq.n	800df62 <_dtoa_r+0x6c2>
 800df58:	4629      	mov	r1, r5
 800df5a:	4630      	mov	r0, r6
 800df5c:	f000 fdf2 	bl	800eb44 <__pow5mult>
 800df60:	4605      	mov	r5, r0
 800df62:	2101      	movs	r1, #1
 800df64:	4630      	mov	r0, r6
 800df66:	f000 fd2d 	bl	800e9c4 <__i2b>
 800df6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	4604      	mov	r4, r0
 800df70:	f340 8081 	ble.w	800e076 <_dtoa_r+0x7d6>
 800df74:	461a      	mov	r2, r3
 800df76:	4601      	mov	r1, r0
 800df78:	4630      	mov	r0, r6
 800df7a:	f000 fde3 	bl	800eb44 <__pow5mult>
 800df7e:	9b06      	ldr	r3, [sp, #24]
 800df80:	2b01      	cmp	r3, #1
 800df82:	4604      	mov	r4, r0
 800df84:	dd7a      	ble.n	800e07c <_dtoa_r+0x7dc>
 800df86:	2300      	movs	r3, #0
 800df88:	930a      	str	r3, [sp, #40]	; 0x28
 800df8a:	6922      	ldr	r2, [r4, #16]
 800df8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800df90:	6910      	ldr	r0, [r2, #16]
 800df92:	f000 fcc7 	bl	800e924 <__hi0bits>
 800df96:	f1c0 0020 	rsb	r0, r0, #32
 800df9a:	9b05      	ldr	r3, [sp, #20]
 800df9c:	4418      	add	r0, r3
 800df9e:	f010 001f 	ands.w	r0, r0, #31
 800dfa2:	f000 808c 	beq.w	800e0be <_dtoa_r+0x81e>
 800dfa6:	f1c0 0220 	rsb	r2, r0, #32
 800dfaa:	2a04      	cmp	r2, #4
 800dfac:	f340 8085 	ble.w	800e0ba <_dtoa_r+0x81a>
 800dfb0:	f1c0 001c 	rsb	r0, r0, #28
 800dfb4:	9b04      	ldr	r3, [sp, #16]
 800dfb6:	4403      	add	r3, r0
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	9b05      	ldr	r3, [sp, #20]
 800dfbc:	4403      	add	r3, r0
 800dfbe:	4480      	add	r8, r0
 800dfc0:	9305      	str	r3, [sp, #20]
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd05      	ble.n	800dfd4 <_dtoa_r+0x734>
 800dfc8:	4629      	mov	r1, r5
 800dfca:	461a      	mov	r2, r3
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f000 fe13 	bl	800ebf8 <__lshift>
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	9b05      	ldr	r3, [sp, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	dd05      	ble.n	800dfe6 <_dtoa_r+0x746>
 800dfda:	4621      	mov	r1, r4
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f000 fe0a 	bl	800ebf8 <__lshift>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d06a      	beq.n	800e0c2 <_dtoa_r+0x822>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4628      	mov	r0, r5
 800dff0:	f000 fe72 	bl	800ecd8 <__mcmp>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	da64      	bge.n	800e0c2 <_dtoa_r+0x822>
 800dff8:	2300      	movs	r3, #0
 800dffa:	4629      	mov	r1, r5
 800dffc:	220a      	movs	r2, #10
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 fc4a 	bl	800e898 <__multadd>
 800e004:	9b07      	ldr	r3, [sp, #28]
 800e006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e00a:	4605      	mov	r5, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8191 	beq.w	800e334 <_dtoa_r+0xa94>
 800e012:	4639      	mov	r1, r7
 800e014:	2300      	movs	r3, #0
 800e016:	220a      	movs	r2, #10
 800e018:	4630      	mov	r0, r6
 800e01a:	f000 fc3d 	bl	800e898 <__multadd>
 800e01e:	f1ba 0f00 	cmp.w	sl, #0
 800e022:	4607      	mov	r7, r0
 800e024:	f300 808d 	bgt.w	800e142 <_dtoa_r+0x8a2>
 800e028:	9b06      	ldr	r3, [sp, #24]
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	dc50      	bgt.n	800e0d0 <_dtoa_r+0x830>
 800e02e:	e088      	b.n	800e142 <_dtoa_r+0x8a2>
 800e030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e032:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e036:	e751      	b.n	800dedc <_dtoa_r+0x63c>
 800e038:	f109 34ff 	add.w	r4, r9, #4294967295
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	bfbf      	itttt	lt
 800e040:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e042:	1ae3      	sublt	r3, r4, r3
 800e044:	18d2      	addlt	r2, r2, r3
 800e046:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e048:	bfb6      	itet	lt
 800e04a:	4623      	movlt	r3, r4
 800e04c:	1b1c      	subge	r4, r3, r4
 800e04e:	2400      	movlt	r4, #0
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	bfb5      	itete	lt
 800e056:	9a04      	ldrlt	r2, [sp, #16]
 800e058:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e05c:	eba2 0809 	sublt.w	r8, r2, r9
 800e060:	464a      	movge	r2, r9
 800e062:	bfb8      	it	lt
 800e064:	2200      	movlt	r2, #0
 800e066:	e73c      	b.n	800dee2 <_dtoa_r+0x642>
 800e068:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e06c:	9f07      	ldr	r7, [sp, #28]
 800e06e:	461c      	mov	r4, r3
 800e070:	e744      	b.n	800defc <_dtoa_r+0x65c>
 800e072:	461a      	mov	r2, r3
 800e074:	e770      	b.n	800df58 <_dtoa_r+0x6b8>
 800e076:	9b06      	ldr	r3, [sp, #24]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	dc18      	bgt.n	800e0ae <_dtoa_r+0x80e>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	b9b3      	cbnz	r3, 800e0ae <_dtoa_r+0x80e>
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e086:	b9a2      	cbnz	r2, 800e0b2 <_dtoa_r+0x812>
 800e088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e08c:	0d12      	lsrs	r2, r2, #20
 800e08e:	0512      	lsls	r2, r2, #20
 800e090:	b18a      	cbz	r2, 800e0b6 <_dtoa_r+0x816>
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	3301      	adds	r3, #1
 800e096:	9304      	str	r3, [sp, #16]
 800e098:	9b05      	ldr	r3, [sp, #20]
 800e09a:	3301      	adds	r3, #1
 800e09c:	9305      	str	r3, [sp, #20]
 800e09e:	2301      	movs	r3, #1
 800e0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f47f af70 	bne.w	800df8a <_dtoa_r+0x6ea>
 800e0aa:	2001      	movs	r0, #1
 800e0ac:	e775      	b.n	800df9a <_dtoa_r+0x6fa>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e7f6      	b.n	800e0a0 <_dtoa_r+0x800>
 800e0b2:	9b02      	ldr	r3, [sp, #8]
 800e0b4:	e7f4      	b.n	800e0a0 <_dtoa_r+0x800>
 800e0b6:	920a      	str	r2, [sp, #40]	; 0x28
 800e0b8:	e7f3      	b.n	800e0a2 <_dtoa_r+0x802>
 800e0ba:	d082      	beq.n	800dfc2 <_dtoa_r+0x722>
 800e0bc:	4610      	mov	r0, r2
 800e0be:	301c      	adds	r0, #28
 800e0c0:	e778      	b.n	800dfb4 <_dtoa_r+0x714>
 800e0c2:	f1b9 0f00 	cmp.w	r9, #0
 800e0c6:	dc37      	bgt.n	800e138 <_dtoa_r+0x898>
 800e0c8:	9b06      	ldr	r3, [sp, #24]
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	dd34      	ble.n	800e138 <_dtoa_r+0x898>
 800e0ce:	46ca      	mov	sl, r9
 800e0d0:	f1ba 0f00 	cmp.w	sl, #0
 800e0d4:	d10d      	bne.n	800e0f2 <_dtoa_r+0x852>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4653      	mov	r3, sl
 800e0da:	2205      	movs	r2, #5
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f000 fbdb 	bl	800e898 <__multadd>
 800e0e2:	4601      	mov	r1, r0
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f000 fdf6 	bl	800ecd8 <__mcmp>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	f73f adeb 	bgt.w	800dcc8 <_dtoa_r+0x428>
 800e0f2:	9b08      	ldr	r3, [sp, #32]
 800e0f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e0f8:	ea6f 0b03 	mvn.w	fp, r3
 800e0fc:	f04f 0900 	mov.w	r9, #0
 800e100:	4621      	mov	r1, r4
 800e102:	4630      	mov	r0, r6
 800e104:	f000 fba6 	bl	800e854 <_Bfree>
 800e108:	2f00      	cmp	r7, #0
 800e10a:	f43f aea8 	beq.w	800de5e <_dtoa_r+0x5be>
 800e10e:	f1b9 0f00 	cmp.w	r9, #0
 800e112:	d005      	beq.n	800e120 <_dtoa_r+0x880>
 800e114:	45b9      	cmp	r9, r7
 800e116:	d003      	beq.n	800e120 <_dtoa_r+0x880>
 800e118:	4649      	mov	r1, r9
 800e11a:	4630      	mov	r0, r6
 800e11c:	f000 fb9a 	bl	800e854 <_Bfree>
 800e120:	4639      	mov	r1, r7
 800e122:	4630      	mov	r0, r6
 800e124:	f000 fb96 	bl	800e854 <_Bfree>
 800e128:	e699      	b.n	800de5e <_dtoa_r+0x5be>
 800e12a:	2400      	movs	r4, #0
 800e12c:	4627      	mov	r7, r4
 800e12e:	e7e0      	b.n	800e0f2 <_dtoa_r+0x852>
 800e130:	46bb      	mov	fp, r7
 800e132:	4604      	mov	r4, r0
 800e134:	4607      	mov	r7, r0
 800e136:	e5c7      	b.n	800dcc8 <_dtoa_r+0x428>
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	46ca      	mov	sl, r9
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 8100 	beq.w	800e342 <_dtoa_r+0xaa2>
 800e142:	f1b8 0f00 	cmp.w	r8, #0
 800e146:	dd05      	ble.n	800e154 <_dtoa_r+0x8b4>
 800e148:	4639      	mov	r1, r7
 800e14a:	4642      	mov	r2, r8
 800e14c:	4630      	mov	r0, r6
 800e14e:	f000 fd53 	bl	800ebf8 <__lshift>
 800e152:	4607      	mov	r7, r0
 800e154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e156:	2b00      	cmp	r3, #0
 800e158:	d05d      	beq.n	800e216 <_dtoa_r+0x976>
 800e15a:	6879      	ldr	r1, [r7, #4]
 800e15c:	4630      	mov	r0, r6
 800e15e:	f000 fb39 	bl	800e7d4 <_Balloc>
 800e162:	4680      	mov	r8, r0
 800e164:	b928      	cbnz	r0, 800e172 <_dtoa_r+0x8d2>
 800e166:	4b82      	ldr	r3, [pc, #520]	; (800e370 <_dtoa_r+0xad0>)
 800e168:	4602      	mov	r2, r0
 800e16a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e16e:	f7ff bbaf 	b.w	800d8d0 <_dtoa_r+0x30>
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	3202      	adds	r2, #2
 800e176:	0092      	lsls	r2, r2, #2
 800e178:	f107 010c 	add.w	r1, r7, #12
 800e17c:	300c      	adds	r0, #12
 800e17e:	f7fe fd5b 	bl	800cc38 <memcpy>
 800e182:	2201      	movs	r2, #1
 800e184:	4641      	mov	r1, r8
 800e186:	4630      	mov	r0, r6
 800e188:	f000 fd36 	bl	800ebf8 <__lshift>
 800e18c:	9b01      	ldr	r3, [sp, #4]
 800e18e:	3301      	adds	r3, #1
 800e190:	9304      	str	r3, [sp, #16]
 800e192:	9b01      	ldr	r3, [sp, #4]
 800e194:	4453      	add	r3, sl
 800e196:	9308      	str	r3, [sp, #32]
 800e198:	9b02      	ldr	r3, [sp, #8]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	46b9      	mov	r9, r7
 800e1a0:	9307      	str	r3, [sp, #28]
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	9b04      	ldr	r3, [sp, #16]
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	f7ff faeb 	bl	800d788 <quorem>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	3330      	adds	r3, #48	; 0x30
 800e1b6:	9005      	str	r0, [sp, #20]
 800e1b8:	4649      	mov	r1, r9
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1be:	f000 fd8b 	bl	800ecd8 <__mcmp>
 800e1c2:	463a      	mov	r2, r7
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f000 fda1 	bl	800ed10 <__mdiff>
 800e1ce:	68c2      	ldr	r2, [r0, #12]
 800e1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d2:	4680      	mov	r8, r0
 800e1d4:	bb0a      	cbnz	r2, 800e21a <_dtoa_r+0x97a>
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f000 fd7d 	bl	800ecd8 <__mcmp>
 800e1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	4641      	mov	r1, r8
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e1ea:	f000 fb33 	bl	800e854 <_Bfree>
 800e1ee:	9b06      	ldr	r3, [sp, #24]
 800e1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e1f6:	ea43 0102 	orr.w	r1, r3, r2
 800e1fa:	9b07      	ldr	r3, [sp, #28]
 800e1fc:	430b      	orrs	r3, r1
 800e1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e200:	d10d      	bne.n	800e21e <_dtoa_r+0x97e>
 800e202:	2b39      	cmp	r3, #57	; 0x39
 800e204:	d029      	beq.n	800e25a <_dtoa_r+0x9ba>
 800e206:	f1ba 0f00 	cmp.w	sl, #0
 800e20a:	dd01      	ble.n	800e210 <_dtoa_r+0x970>
 800e20c:	9b05      	ldr	r3, [sp, #20]
 800e20e:	3331      	adds	r3, #49	; 0x31
 800e210:	9a02      	ldr	r2, [sp, #8]
 800e212:	7013      	strb	r3, [r2, #0]
 800e214:	e774      	b.n	800e100 <_dtoa_r+0x860>
 800e216:	4638      	mov	r0, r7
 800e218:	e7b8      	b.n	800e18c <_dtoa_r+0x8ec>
 800e21a:	2201      	movs	r2, #1
 800e21c:	e7e1      	b.n	800e1e2 <_dtoa_r+0x942>
 800e21e:	f1ba 0f00 	cmp.w	sl, #0
 800e222:	db06      	blt.n	800e232 <_dtoa_r+0x992>
 800e224:	9906      	ldr	r1, [sp, #24]
 800e226:	ea41 0a0a 	orr.w	sl, r1, sl
 800e22a:	9907      	ldr	r1, [sp, #28]
 800e22c:	ea5a 0101 	orrs.w	r1, sl, r1
 800e230:	d120      	bne.n	800e274 <_dtoa_r+0x9d4>
 800e232:	2a00      	cmp	r2, #0
 800e234:	ddec      	ble.n	800e210 <_dtoa_r+0x970>
 800e236:	4629      	mov	r1, r5
 800e238:	2201      	movs	r2, #1
 800e23a:	4630      	mov	r0, r6
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	f000 fcdb 	bl	800ebf8 <__lshift>
 800e242:	4621      	mov	r1, r4
 800e244:	4605      	mov	r5, r0
 800e246:	f000 fd47 	bl	800ecd8 <__mcmp>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	9b04      	ldr	r3, [sp, #16]
 800e24e:	dc02      	bgt.n	800e256 <_dtoa_r+0x9b6>
 800e250:	d1de      	bne.n	800e210 <_dtoa_r+0x970>
 800e252:	07da      	lsls	r2, r3, #31
 800e254:	d5dc      	bpl.n	800e210 <_dtoa_r+0x970>
 800e256:	2b39      	cmp	r3, #57	; 0x39
 800e258:	d1d8      	bne.n	800e20c <_dtoa_r+0x96c>
 800e25a:	9a02      	ldr	r2, [sp, #8]
 800e25c:	2339      	movs	r3, #57	; 0x39
 800e25e:	7013      	strb	r3, [r2, #0]
 800e260:	4643      	mov	r3, r8
 800e262:	4698      	mov	r8, r3
 800e264:	3b01      	subs	r3, #1
 800e266:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e26a:	2a39      	cmp	r2, #57	; 0x39
 800e26c:	d051      	beq.n	800e312 <_dtoa_r+0xa72>
 800e26e:	3201      	adds	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	e745      	b.n	800e100 <_dtoa_r+0x860>
 800e274:	2a00      	cmp	r2, #0
 800e276:	dd03      	ble.n	800e280 <_dtoa_r+0x9e0>
 800e278:	2b39      	cmp	r3, #57	; 0x39
 800e27a:	d0ee      	beq.n	800e25a <_dtoa_r+0x9ba>
 800e27c:	3301      	adds	r3, #1
 800e27e:	e7c7      	b.n	800e210 <_dtoa_r+0x970>
 800e280:	9a04      	ldr	r2, [sp, #16]
 800e282:	9908      	ldr	r1, [sp, #32]
 800e284:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e288:	428a      	cmp	r2, r1
 800e28a:	d02b      	beq.n	800e2e4 <_dtoa_r+0xa44>
 800e28c:	4629      	mov	r1, r5
 800e28e:	2300      	movs	r3, #0
 800e290:	220a      	movs	r2, #10
 800e292:	4630      	mov	r0, r6
 800e294:	f000 fb00 	bl	800e898 <__multadd>
 800e298:	45b9      	cmp	r9, r7
 800e29a:	4605      	mov	r5, r0
 800e29c:	f04f 0300 	mov.w	r3, #0
 800e2a0:	f04f 020a 	mov.w	r2, #10
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	d107      	bne.n	800e2ba <_dtoa_r+0xa1a>
 800e2aa:	f000 faf5 	bl	800e898 <__multadd>
 800e2ae:	4681      	mov	r9, r0
 800e2b0:	4607      	mov	r7, r0
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	e774      	b.n	800e1a4 <_dtoa_r+0x904>
 800e2ba:	f000 faed 	bl	800e898 <__multadd>
 800e2be:	4639      	mov	r1, r7
 800e2c0:	4681      	mov	r9, r0
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	220a      	movs	r2, #10
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f000 fae6 	bl	800e898 <__multadd>
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	e7f0      	b.n	800e2b2 <_dtoa_r+0xa12>
 800e2d0:	f1ba 0f00 	cmp.w	sl, #0
 800e2d4:	9a01      	ldr	r2, [sp, #4]
 800e2d6:	bfcc      	ite	gt
 800e2d8:	46d0      	movgt	r8, sl
 800e2da:	f04f 0801 	movle.w	r8, #1
 800e2de:	4490      	add	r8, r2
 800e2e0:	f04f 0900 	mov.w	r9, #0
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	9302      	str	r3, [sp, #8]
 800e2ec:	f000 fc84 	bl	800ebf8 <__lshift>
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	f000 fcf0 	bl	800ecd8 <__mcmp>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	dcb1      	bgt.n	800e260 <_dtoa_r+0x9c0>
 800e2fc:	d102      	bne.n	800e304 <_dtoa_r+0xa64>
 800e2fe:	9b02      	ldr	r3, [sp, #8]
 800e300:	07db      	lsls	r3, r3, #31
 800e302:	d4ad      	bmi.n	800e260 <_dtoa_r+0x9c0>
 800e304:	4643      	mov	r3, r8
 800e306:	4698      	mov	r8, r3
 800e308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e30c:	2a30      	cmp	r2, #48	; 0x30
 800e30e:	d0fa      	beq.n	800e306 <_dtoa_r+0xa66>
 800e310:	e6f6      	b.n	800e100 <_dtoa_r+0x860>
 800e312:	9a01      	ldr	r2, [sp, #4]
 800e314:	429a      	cmp	r2, r3
 800e316:	d1a4      	bne.n	800e262 <_dtoa_r+0x9c2>
 800e318:	f10b 0b01 	add.w	fp, fp, #1
 800e31c:	2331      	movs	r3, #49	; 0x31
 800e31e:	e778      	b.n	800e212 <_dtoa_r+0x972>
 800e320:	4b14      	ldr	r3, [pc, #80]	; (800e374 <_dtoa_r+0xad4>)
 800e322:	f7ff bb27 	b.w	800d974 <_dtoa_r+0xd4>
 800e326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f47f ab03 	bne.w	800d934 <_dtoa_r+0x94>
 800e32e:	4b12      	ldr	r3, [pc, #72]	; (800e378 <_dtoa_r+0xad8>)
 800e330:	f7ff bb20 	b.w	800d974 <_dtoa_r+0xd4>
 800e334:	f1ba 0f00 	cmp.w	sl, #0
 800e338:	dc03      	bgt.n	800e342 <_dtoa_r+0xaa2>
 800e33a:	9b06      	ldr	r3, [sp, #24]
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	f73f aec7 	bgt.w	800e0d0 <_dtoa_r+0x830>
 800e342:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e346:	4621      	mov	r1, r4
 800e348:	4628      	mov	r0, r5
 800e34a:	f7ff fa1d 	bl	800d788 <quorem>
 800e34e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e352:	f808 3b01 	strb.w	r3, [r8], #1
 800e356:	9a01      	ldr	r2, [sp, #4]
 800e358:	eba8 0202 	sub.w	r2, r8, r2
 800e35c:	4592      	cmp	sl, r2
 800e35e:	ddb7      	ble.n	800e2d0 <_dtoa_r+0xa30>
 800e360:	4629      	mov	r1, r5
 800e362:	2300      	movs	r3, #0
 800e364:	220a      	movs	r2, #10
 800e366:	4630      	mov	r0, r6
 800e368:	f000 fa96 	bl	800e898 <__multadd>
 800e36c:	4605      	mov	r5, r0
 800e36e:	e7ea      	b.n	800e346 <_dtoa_r+0xaa6>
 800e370:	0800fc7b 	.word	0x0800fc7b
 800e374:	0800fbd8 	.word	0x0800fbd8
 800e378:	0800fbfc 	.word	0x0800fbfc

0800e37c <__sflush_r>:
 800e37c:	898a      	ldrh	r2, [r1, #12]
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	4605      	mov	r5, r0
 800e384:	0710      	lsls	r0, r2, #28
 800e386:	460c      	mov	r4, r1
 800e388:	d458      	bmi.n	800e43c <__sflush_r+0xc0>
 800e38a:	684b      	ldr	r3, [r1, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dc05      	bgt.n	800e39c <__sflush_r+0x20>
 800e390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e392:	2b00      	cmp	r3, #0
 800e394:	dc02      	bgt.n	800e39c <__sflush_r+0x20>
 800e396:	2000      	movs	r0, #0
 800e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e39e:	2e00      	cmp	r6, #0
 800e3a0:	d0f9      	beq.n	800e396 <__sflush_r+0x1a>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3a8:	682f      	ldr	r7, [r5, #0]
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	d032      	beq.n	800e414 <__sflush_r+0x98>
 800e3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	075a      	lsls	r2, r3, #29
 800e3b4:	d505      	bpl.n	800e3c2 <__sflush_r+0x46>
 800e3b6:	6863      	ldr	r3, [r4, #4]
 800e3b8:	1ac0      	subs	r0, r0, r3
 800e3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3bc:	b10b      	cbz	r3, 800e3c2 <__sflush_r+0x46>
 800e3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3c0:	1ac0      	subs	r0, r0, r3
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3c8:	6a21      	ldr	r1, [r4, #32]
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	47b0      	blx	r6
 800e3ce:	1c43      	adds	r3, r0, #1
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	d106      	bne.n	800e3e2 <__sflush_r+0x66>
 800e3d4:	6829      	ldr	r1, [r5, #0]
 800e3d6:	291d      	cmp	r1, #29
 800e3d8:	d82c      	bhi.n	800e434 <__sflush_r+0xb8>
 800e3da:	4a2a      	ldr	r2, [pc, #168]	; (800e484 <__sflush_r+0x108>)
 800e3dc:	40ca      	lsrs	r2, r1
 800e3de:	07d6      	lsls	r6, r2, #31
 800e3e0:	d528      	bpl.n	800e434 <__sflush_r+0xb8>
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	6062      	str	r2, [r4, #4]
 800e3e6:	04d9      	lsls	r1, r3, #19
 800e3e8:	6922      	ldr	r2, [r4, #16]
 800e3ea:	6022      	str	r2, [r4, #0]
 800e3ec:	d504      	bpl.n	800e3f8 <__sflush_r+0x7c>
 800e3ee:	1c42      	adds	r2, r0, #1
 800e3f0:	d101      	bne.n	800e3f6 <__sflush_r+0x7a>
 800e3f2:	682b      	ldr	r3, [r5, #0]
 800e3f4:	b903      	cbnz	r3, 800e3f8 <__sflush_r+0x7c>
 800e3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800e3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3fa:	602f      	str	r7, [r5, #0]
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	d0ca      	beq.n	800e396 <__sflush_r+0x1a>
 800e400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e404:	4299      	cmp	r1, r3
 800e406:	d002      	beq.n	800e40e <__sflush_r+0x92>
 800e408:	4628      	mov	r0, r5
 800e40a:	f000 fd7d 	bl	800ef08 <_free_r>
 800e40e:	2000      	movs	r0, #0
 800e410:	6360      	str	r0, [r4, #52]	; 0x34
 800e412:	e7c1      	b.n	800e398 <__sflush_r+0x1c>
 800e414:	6a21      	ldr	r1, [r4, #32]
 800e416:	2301      	movs	r3, #1
 800e418:	4628      	mov	r0, r5
 800e41a:	47b0      	blx	r6
 800e41c:	1c41      	adds	r1, r0, #1
 800e41e:	d1c7      	bne.n	800e3b0 <__sflush_r+0x34>
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d0c4      	beq.n	800e3b0 <__sflush_r+0x34>
 800e426:	2b1d      	cmp	r3, #29
 800e428:	d001      	beq.n	800e42e <__sflush_r+0xb2>
 800e42a:	2b16      	cmp	r3, #22
 800e42c:	d101      	bne.n	800e432 <__sflush_r+0xb6>
 800e42e:	602f      	str	r7, [r5, #0]
 800e430:	e7b1      	b.n	800e396 <__sflush_r+0x1a>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e438:	81a3      	strh	r3, [r4, #12]
 800e43a:	e7ad      	b.n	800e398 <__sflush_r+0x1c>
 800e43c:	690f      	ldr	r7, [r1, #16]
 800e43e:	2f00      	cmp	r7, #0
 800e440:	d0a9      	beq.n	800e396 <__sflush_r+0x1a>
 800e442:	0793      	lsls	r3, r2, #30
 800e444:	680e      	ldr	r6, [r1, #0]
 800e446:	bf08      	it	eq
 800e448:	694b      	ldreq	r3, [r1, #20]
 800e44a:	600f      	str	r7, [r1, #0]
 800e44c:	bf18      	it	ne
 800e44e:	2300      	movne	r3, #0
 800e450:	eba6 0807 	sub.w	r8, r6, r7
 800e454:	608b      	str	r3, [r1, #8]
 800e456:	f1b8 0f00 	cmp.w	r8, #0
 800e45a:	dd9c      	ble.n	800e396 <__sflush_r+0x1a>
 800e45c:	6a21      	ldr	r1, [r4, #32]
 800e45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e460:	4643      	mov	r3, r8
 800e462:	463a      	mov	r2, r7
 800e464:	4628      	mov	r0, r5
 800e466:	47b0      	blx	r6
 800e468:	2800      	cmp	r0, #0
 800e46a:	dc06      	bgt.n	800e47a <__sflush_r+0xfe>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	e78e      	b.n	800e398 <__sflush_r+0x1c>
 800e47a:	4407      	add	r7, r0
 800e47c:	eba8 0800 	sub.w	r8, r8, r0
 800e480:	e7e9      	b.n	800e456 <__sflush_r+0xda>
 800e482:	bf00      	nop
 800e484:	20400001 	.word	0x20400001

0800e488 <_fflush_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	690b      	ldr	r3, [r1, #16]
 800e48c:	4605      	mov	r5, r0
 800e48e:	460c      	mov	r4, r1
 800e490:	b913      	cbnz	r3, 800e498 <_fflush_r+0x10>
 800e492:	2500      	movs	r5, #0
 800e494:	4628      	mov	r0, r5
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	b118      	cbz	r0, 800e4a2 <_fflush_r+0x1a>
 800e49a:	6983      	ldr	r3, [r0, #24]
 800e49c:	b90b      	cbnz	r3, 800e4a2 <_fflush_r+0x1a>
 800e49e:	f000 f887 	bl	800e5b0 <__sinit>
 800e4a2:	4b14      	ldr	r3, [pc, #80]	; (800e4f4 <_fflush_r+0x6c>)
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	d11b      	bne.n	800e4e0 <_fflush_r+0x58>
 800e4a8:	686c      	ldr	r4, [r5, #4]
 800e4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0ef      	beq.n	800e492 <_fflush_r+0xa>
 800e4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4b4:	07d0      	lsls	r0, r2, #31
 800e4b6:	d404      	bmi.n	800e4c2 <_fflush_r+0x3a>
 800e4b8:	0599      	lsls	r1, r3, #22
 800e4ba:	d402      	bmi.n	800e4c2 <_fflush_r+0x3a>
 800e4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4be:	f000 f91a 	bl	800e6f6 <__retarget_lock_acquire_recursive>
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f7ff ff59 	bl	800e37c <__sflush_r>
 800e4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4cc:	07da      	lsls	r2, r3, #31
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	d4e0      	bmi.n	800e494 <_fflush_r+0xc>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	059b      	lsls	r3, r3, #22
 800e4d6:	d4dd      	bmi.n	800e494 <_fflush_r+0xc>
 800e4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4da:	f000 f90d 	bl	800e6f8 <__retarget_lock_release_recursive>
 800e4de:	e7d9      	b.n	800e494 <_fflush_r+0xc>
 800e4e0:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <_fflush_r+0x70>)
 800e4e2:	429c      	cmp	r4, r3
 800e4e4:	d101      	bne.n	800e4ea <_fflush_r+0x62>
 800e4e6:	68ac      	ldr	r4, [r5, #8]
 800e4e8:	e7df      	b.n	800e4aa <_fflush_r+0x22>
 800e4ea:	4b04      	ldr	r3, [pc, #16]	; (800e4fc <_fflush_r+0x74>)
 800e4ec:	429c      	cmp	r4, r3
 800e4ee:	bf08      	it	eq
 800e4f0:	68ec      	ldreq	r4, [r5, #12]
 800e4f2:	e7da      	b.n	800e4aa <_fflush_r+0x22>
 800e4f4:	0800fcac 	.word	0x0800fcac
 800e4f8:	0800fccc 	.word	0x0800fccc
 800e4fc:	0800fc8c 	.word	0x0800fc8c

0800e500 <std>:
 800e500:	2300      	movs	r3, #0
 800e502:	b510      	push	{r4, lr}
 800e504:	4604      	mov	r4, r0
 800e506:	e9c0 3300 	strd	r3, r3, [r0]
 800e50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e50e:	6083      	str	r3, [r0, #8]
 800e510:	8181      	strh	r1, [r0, #12]
 800e512:	6643      	str	r3, [r0, #100]	; 0x64
 800e514:	81c2      	strh	r2, [r0, #14]
 800e516:	6183      	str	r3, [r0, #24]
 800e518:	4619      	mov	r1, r3
 800e51a:	2208      	movs	r2, #8
 800e51c:	305c      	adds	r0, #92	; 0x5c
 800e51e:	f7fe fb99 	bl	800cc54 <memset>
 800e522:	4b05      	ldr	r3, [pc, #20]	; (800e538 <std+0x38>)
 800e524:	6263      	str	r3, [r4, #36]	; 0x24
 800e526:	4b05      	ldr	r3, [pc, #20]	; (800e53c <std+0x3c>)
 800e528:	62a3      	str	r3, [r4, #40]	; 0x28
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <std+0x40>)
 800e52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e52e:	4b05      	ldr	r3, [pc, #20]	; (800e544 <std+0x44>)
 800e530:	6224      	str	r4, [r4, #32]
 800e532:	6323      	str	r3, [r4, #48]	; 0x30
 800e534:	bd10      	pop	{r4, pc}
 800e536:	bf00      	nop
 800e538:	0800f39d 	.word	0x0800f39d
 800e53c:	0800f3bf 	.word	0x0800f3bf
 800e540:	0800f3f7 	.word	0x0800f3f7
 800e544:	0800f41b 	.word	0x0800f41b

0800e548 <_cleanup_r>:
 800e548:	4901      	ldr	r1, [pc, #4]	; (800e550 <_cleanup_r+0x8>)
 800e54a:	f000 b8af 	b.w	800e6ac <_fwalk_reent>
 800e54e:	bf00      	nop
 800e550:	0800e489 	.word	0x0800e489

0800e554 <__sfmoreglue>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	2268      	movs	r2, #104	; 0x68
 800e558:	1e4d      	subs	r5, r1, #1
 800e55a:	4355      	muls	r5, r2
 800e55c:	460e      	mov	r6, r1
 800e55e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e562:	f000 fd3d 	bl	800efe0 <_malloc_r>
 800e566:	4604      	mov	r4, r0
 800e568:	b140      	cbz	r0, 800e57c <__sfmoreglue+0x28>
 800e56a:	2100      	movs	r1, #0
 800e56c:	e9c0 1600 	strd	r1, r6, [r0]
 800e570:	300c      	adds	r0, #12
 800e572:	60a0      	str	r0, [r4, #8]
 800e574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e578:	f7fe fb6c 	bl	800cc54 <memset>
 800e57c:	4620      	mov	r0, r4
 800e57e:	bd70      	pop	{r4, r5, r6, pc}

0800e580 <__sfp_lock_acquire>:
 800e580:	4801      	ldr	r0, [pc, #4]	; (800e588 <__sfp_lock_acquire+0x8>)
 800e582:	f000 b8b8 	b.w	800e6f6 <__retarget_lock_acquire_recursive>
 800e586:	bf00      	nop
 800e588:	200006ad 	.word	0x200006ad

0800e58c <__sfp_lock_release>:
 800e58c:	4801      	ldr	r0, [pc, #4]	; (800e594 <__sfp_lock_release+0x8>)
 800e58e:	f000 b8b3 	b.w	800e6f8 <__retarget_lock_release_recursive>
 800e592:	bf00      	nop
 800e594:	200006ad 	.word	0x200006ad

0800e598 <__sinit_lock_acquire>:
 800e598:	4801      	ldr	r0, [pc, #4]	; (800e5a0 <__sinit_lock_acquire+0x8>)
 800e59a:	f000 b8ac 	b.w	800e6f6 <__retarget_lock_acquire_recursive>
 800e59e:	bf00      	nop
 800e5a0:	200006ae 	.word	0x200006ae

0800e5a4 <__sinit_lock_release>:
 800e5a4:	4801      	ldr	r0, [pc, #4]	; (800e5ac <__sinit_lock_release+0x8>)
 800e5a6:	f000 b8a7 	b.w	800e6f8 <__retarget_lock_release_recursive>
 800e5aa:	bf00      	nop
 800e5ac:	200006ae 	.word	0x200006ae

0800e5b0 <__sinit>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	f7ff fff0 	bl	800e598 <__sinit_lock_acquire>
 800e5b8:	69a3      	ldr	r3, [r4, #24]
 800e5ba:	b11b      	cbz	r3, 800e5c4 <__sinit+0x14>
 800e5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c0:	f7ff bff0 	b.w	800e5a4 <__sinit_lock_release>
 800e5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5c8:	6523      	str	r3, [r4, #80]	; 0x50
 800e5ca:	4b13      	ldr	r3, [pc, #76]	; (800e618 <__sinit+0x68>)
 800e5cc:	4a13      	ldr	r2, [pc, #76]	; (800e61c <__sinit+0x6c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	bf04      	itt	eq
 800e5d6:	2301      	moveq	r3, #1
 800e5d8:	61a3      	streq	r3, [r4, #24]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 f820 	bl	800e620 <__sfp>
 800e5e0:	6060      	str	r0, [r4, #4]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f000 f81c 	bl	800e620 <__sfp>
 800e5e8:	60a0      	str	r0, [r4, #8]
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f000 f818 	bl	800e620 <__sfp>
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	60e0      	str	r0, [r4, #12]
 800e5f4:	2104      	movs	r1, #4
 800e5f6:	6860      	ldr	r0, [r4, #4]
 800e5f8:	f7ff ff82 	bl	800e500 <std>
 800e5fc:	68a0      	ldr	r0, [r4, #8]
 800e5fe:	2201      	movs	r2, #1
 800e600:	2109      	movs	r1, #9
 800e602:	f7ff ff7d 	bl	800e500 <std>
 800e606:	68e0      	ldr	r0, [r4, #12]
 800e608:	2202      	movs	r2, #2
 800e60a:	2112      	movs	r1, #18
 800e60c:	f7ff ff78 	bl	800e500 <std>
 800e610:	2301      	movs	r3, #1
 800e612:	61a3      	str	r3, [r4, #24]
 800e614:	e7d2      	b.n	800e5bc <__sinit+0xc>
 800e616:	bf00      	nop
 800e618:	0800fbc4 	.word	0x0800fbc4
 800e61c:	0800e549 	.word	0x0800e549

0800e620 <__sfp>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	4607      	mov	r7, r0
 800e624:	f7ff ffac 	bl	800e580 <__sfp_lock_acquire>
 800e628:	4b1e      	ldr	r3, [pc, #120]	; (800e6a4 <__sfp+0x84>)
 800e62a:	681e      	ldr	r6, [r3, #0]
 800e62c:	69b3      	ldr	r3, [r6, #24]
 800e62e:	b913      	cbnz	r3, 800e636 <__sfp+0x16>
 800e630:	4630      	mov	r0, r6
 800e632:	f7ff ffbd 	bl	800e5b0 <__sinit>
 800e636:	3648      	adds	r6, #72	; 0x48
 800e638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	d503      	bpl.n	800e648 <__sfp+0x28>
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	b30b      	cbz	r3, 800e688 <__sfp+0x68>
 800e644:	6836      	ldr	r6, [r6, #0]
 800e646:	e7f7      	b.n	800e638 <__sfp+0x18>
 800e648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e64c:	b9d5      	cbnz	r5, 800e684 <__sfp+0x64>
 800e64e:	4b16      	ldr	r3, [pc, #88]	; (800e6a8 <__sfp+0x88>)
 800e650:	60e3      	str	r3, [r4, #12]
 800e652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e656:	6665      	str	r5, [r4, #100]	; 0x64
 800e658:	f000 f84c 	bl	800e6f4 <__retarget_lock_init_recursive>
 800e65c:	f7ff ff96 	bl	800e58c <__sfp_lock_release>
 800e660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e668:	6025      	str	r5, [r4, #0]
 800e66a:	61a5      	str	r5, [r4, #24]
 800e66c:	2208      	movs	r2, #8
 800e66e:	4629      	mov	r1, r5
 800e670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e674:	f7fe faee 	bl	800cc54 <memset>
 800e678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e680:	4620      	mov	r0, r4
 800e682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e684:	3468      	adds	r4, #104	; 0x68
 800e686:	e7d9      	b.n	800e63c <__sfp+0x1c>
 800e688:	2104      	movs	r1, #4
 800e68a:	4638      	mov	r0, r7
 800e68c:	f7ff ff62 	bl	800e554 <__sfmoreglue>
 800e690:	4604      	mov	r4, r0
 800e692:	6030      	str	r0, [r6, #0]
 800e694:	2800      	cmp	r0, #0
 800e696:	d1d5      	bne.n	800e644 <__sfp+0x24>
 800e698:	f7ff ff78 	bl	800e58c <__sfp_lock_release>
 800e69c:	230c      	movs	r3, #12
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	e7ee      	b.n	800e680 <__sfp+0x60>
 800e6a2:	bf00      	nop
 800e6a4:	0800fbc4 	.word	0x0800fbc4
 800e6a8:	ffff0001 	.word	0xffff0001

0800e6ac <_fwalk_reent>:
 800e6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	4688      	mov	r8, r1
 800e6b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6b8:	2700      	movs	r7, #0
 800e6ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6be:	f1b9 0901 	subs.w	r9, r9, #1
 800e6c2:	d505      	bpl.n	800e6d0 <_fwalk_reent+0x24>
 800e6c4:	6824      	ldr	r4, [r4, #0]
 800e6c6:	2c00      	cmp	r4, #0
 800e6c8:	d1f7      	bne.n	800e6ba <_fwalk_reent+0xe>
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d0:	89ab      	ldrh	r3, [r5, #12]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d907      	bls.n	800e6e6 <_fwalk_reent+0x3a>
 800e6d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	d003      	beq.n	800e6e6 <_fwalk_reent+0x3a>
 800e6de:	4629      	mov	r1, r5
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	47c0      	blx	r8
 800e6e4:	4307      	orrs	r7, r0
 800e6e6:	3568      	adds	r5, #104	; 0x68
 800e6e8:	e7e9      	b.n	800e6be <_fwalk_reent+0x12>
	...

0800e6ec <_localeconv_r>:
 800e6ec:	4800      	ldr	r0, [pc, #0]	; (800e6f0 <_localeconv_r+0x4>)
 800e6ee:	4770      	bx	lr
 800e6f0:	20000190 	.word	0x20000190

0800e6f4 <__retarget_lock_init_recursive>:
 800e6f4:	4770      	bx	lr

0800e6f6 <__retarget_lock_acquire_recursive>:
 800e6f6:	4770      	bx	lr

0800e6f8 <__retarget_lock_release_recursive>:
 800e6f8:	4770      	bx	lr

0800e6fa <__swhatbuf_r>:
 800e6fa:	b570      	push	{r4, r5, r6, lr}
 800e6fc:	460e      	mov	r6, r1
 800e6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e702:	2900      	cmp	r1, #0
 800e704:	b096      	sub	sp, #88	; 0x58
 800e706:	4614      	mov	r4, r2
 800e708:	461d      	mov	r5, r3
 800e70a:	da08      	bge.n	800e71e <__swhatbuf_r+0x24>
 800e70c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	602a      	str	r2, [r5, #0]
 800e714:	061a      	lsls	r2, r3, #24
 800e716:	d410      	bmi.n	800e73a <__swhatbuf_r+0x40>
 800e718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e71c:	e00e      	b.n	800e73c <__swhatbuf_r+0x42>
 800e71e:	466a      	mov	r2, sp
 800e720:	f000 fed2 	bl	800f4c8 <_fstat_r>
 800e724:	2800      	cmp	r0, #0
 800e726:	dbf1      	blt.n	800e70c <__swhatbuf_r+0x12>
 800e728:	9a01      	ldr	r2, [sp, #4]
 800e72a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e72e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e732:	425a      	negs	r2, r3
 800e734:	415a      	adcs	r2, r3
 800e736:	602a      	str	r2, [r5, #0]
 800e738:	e7ee      	b.n	800e718 <__swhatbuf_r+0x1e>
 800e73a:	2340      	movs	r3, #64	; 0x40
 800e73c:	2000      	movs	r0, #0
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	b016      	add	sp, #88	; 0x58
 800e742:	bd70      	pop	{r4, r5, r6, pc}

0800e744 <__smakebuf_r>:
 800e744:	898b      	ldrh	r3, [r1, #12]
 800e746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e748:	079d      	lsls	r5, r3, #30
 800e74a:	4606      	mov	r6, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	d507      	bpl.n	800e760 <__smakebuf_r+0x1c>
 800e750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	6123      	str	r3, [r4, #16]
 800e758:	2301      	movs	r3, #1
 800e75a:	6163      	str	r3, [r4, #20]
 800e75c:	b002      	add	sp, #8
 800e75e:	bd70      	pop	{r4, r5, r6, pc}
 800e760:	ab01      	add	r3, sp, #4
 800e762:	466a      	mov	r2, sp
 800e764:	f7ff ffc9 	bl	800e6fa <__swhatbuf_r>
 800e768:	9900      	ldr	r1, [sp, #0]
 800e76a:	4605      	mov	r5, r0
 800e76c:	4630      	mov	r0, r6
 800e76e:	f000 fc37 	bl	800efe0 <_malloc_r>
 800e772:	b948      	cbnz	r0, 800e788 <__smakebuf_r+0x44>
 800e774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e778:	059a      	lsls	r2, r3, #22
 800e77a:	d4ef      	bmi.n	800e75c <__smakebuf_r+0x18>
 800e77c:	f023 0303 	bic.w	r3, r3, #3
 800e780:	f043 0302 	orr.w	r3, r3, #2
 800e784:	81a3      	strh	r3, [r4, #12]
 800e786:	e7e3      	b.n	800e750 <__smakebuf_r+0xc>
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <__smakebuf_r+0x7c>)
 800e78a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	6020      	str	r0, [r4, #0]
 800e790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	6163      	str	r3, [r4, #20]
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	6120      	str	r0, [r4, #16]
 800e79e:	b15b      	cbz	r3, 800e7b8 <__smakebuf_r+0x74>
 800e7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f000 fea1 	bl	800f4ec <_isatty_r>
 800e7aa:	b128      	cbz	r0, 800e7b8 <__smakebuf_r+0x74>
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	f023 0303 	bic.w	r3, r3, #3
 800e7b2:	f043 0301 	orr.w	r3, r3, #1
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	89a0      	ldrh	r0, [r4, #12]
 800e7ba:	4305      	orrs	r5, r0
 800e7bc:	81a5      	strh	r5, [r4, #12]
 800e7be:	e7cd      	b.n	800e75c <__smakebuf_r+0x18>
 800e7c0:	0800e549 	.word	0x0800e549

0800e7c4 <malloc>:
 800e7c4:	4b02      	ldr	r3, [pc, #8]	; (800e7d0 <malloc+0xc>)
 800e7c6:	4601      	mov	r1, r0
 800e7c8:	6818      	ldr	r0, [r3, #0]
 800e7ca:	f000 bc09 	b.w	800efe0 <_malloc_r>
 800e7ce:	bf00      	nop
 800e7d0:	2000003c 	.word	0x2000003c

0800e7d4 <_Balloc>:
 800e7d4:	b570      	push	{r4, r5, r6, lr}
 800e7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7d8:	4604      	mov	r4, r0
 800e7da:	460d      	mov	r5, r1
 800e7dc:	b976      	cbnz	r6, 800e7fc <_Balloc+0x28>
 800e7de:	2010      	movs	r0, #16
 800e7e0:	f7ff fff0 	bl	800e7c4 <malloc>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	6260      	str	r0, [r4, #36]	; 0x24
 800e7e8:	b920      	cbnz	r0, 800e7f4 <_Balloc+0x20>
 800e7ea:	4b18      	ldr	r3, [pc, #96]	; (800e84c <_Balloc+0x78>)
 800e7ec:	4818      	ldr	r0, [pc, #96]	; (800e850 <_Balloc+0x7c>)
 800e7ee:	2166      	movs	r1, #102	; 0x66
 800e7f0:	f000 fe2a 	bl	800f448 <__assert_func>
 800e7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f8:	6006      	str	r6, [r0, #0]
 800e7fa:	60c6      	str	r6, [r0, #12]
 800e7fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e7fe:	68f3      	ldr	r3, [r6, #12]
 800e800:	b183      	cbz	r3, 800e824 <_Balloc+0x50>
 800e802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e80a:	b9b8      	cbnz	r0, 800e83c <_Balloc+0x68>
 800e80c:	2101      	movs	r1, #1
 800e80e:	fa01 f605 	lsl.w	r6, r1, r5
 800e812:	1d72      	adds	r2, r6, #5
 800e814:	0092      	lsls	r2, r2, #2
 800e816:	4620      	mov	r0, r4
 800e818:	f000 fb60 	bl	800eedc <_calloc_r>
 800e81c:	b160      	cbz	r0, 800e838 <_Balloc+0x64>
 800e81e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e822:	e00e      	b.n	800e842 <_Balloc+0x6e>
 800e824:	2221      	movs	r2, #33	; 0x21
 800e826:	2104      	movs	r1, #4
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 fb57 	bl	800eedc <_calloc_r>
 800e82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e830:	60f0      	str	r0, [r6, #12]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1e4      	bne.n	800e802 <_Balloc+0x2e>
 800e838:	2000      	movs	r0, #0
 800e83a:	bd70      	pop	{r4, r5, r6, pc}
 800e83c:	6802      	ldr	r2, [r0, #0]
 800e83e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e842:	2300      	movs	r3, #0
 800e844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e848:	e7f7      	b.n	800e83a <_Balloc+0x66>
 800e84a:	bf00      	nop
 800e84c:	0800fc09 	.word	0x0800fc09
 800e850:	0800fcec 	.word	0x0800fcec

0800e854 <_Bfree>:
 800e854:	b570      	push	{r4, r5, r6, lr}
 800e856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e858:	4605      	mov	r5, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	b976      	cbnz	r6, 800e87c <_Bfree+0x28>
 800e85e:	2010      	movs	r0, #16
 800e860:	f7ff ffb0 	bl	800e7c4 <malloc>
 800e864:	4602      	mov	r2, r0
 800e866:	6268      	str	r0, [r5, #36]	; 0x24
 800e868:	b920      	cbnz	r0, 800e874 <_Bfree+0x20>
 800e86a:	4b09      	ldr	r3, [pc, #36]	; (800e890 <_Bfree+0x3c>)
 800e86c:	4809      	ldr	r0, [pc, #36]	; (800e894 <_Bfree+0x40>)
 800e86e:	218a      	movs	r1, #138	; 0x8a
 800e870:	f000 fdea 	bl	800f448 <__assert_func>
 800e874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e878:	6006      	str	r6, [r0, #0]
 800e87a:	60c6      	str	r6, [r0, #12]
 800e87c:	b13c      	cbz	r4, 800e88e <_Bfree+0x3a>
 800e87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e880:	6862      	ldr	r2, [r4, #4]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e888:	6021      	str	r1, [r4, #0]
 800e88a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	0800fc09 	.word	0x0800fc09
 800e894:	0800fcec 	.word	0x0800fcec

0800e898 <__multadd>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	690d      	ldr	r5, [r1, #16]
 800e89e:	4607      	mov	r7, r0
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	461e      	mov	r6, r3
 800e8a4:	f101 0c14 	add.w	ip, r1, #20
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ae:	b299      	uxth	r1, r3
 800e8b0:	fb02 6101 	mla	r1, r2, r1, r6
 800e8b4:	0c1e      	lsrs	r6, r3, #16
 800e8b6:	0c0b      	lsrs	r3, r1, #16
 800e8b8:	fb02 3306 	mla	r3, r2, r6, r3
 800e8bc:	b289      	uxth	r1, r1
 800e8be:	3001      	adds	r0, #1
 800e8c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8c4:	4285      	cmp	r5, r0
 800e8c6:	f84c 1b04 	str.w	r1, [ip], #4
 800e8ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8ce:	dcec      	bgt.n	800e8aa <__multadd+0x12>
 800e8d0:	b30e      	cbz	r6, 800e916 <__multadd+0x7e>
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	42ab      	cmp	r3, r5
 800e8d6:	dc19      	bgt.n	800e90c <__multadd+0x74>
 800e8d8:	6861      	ldr	r1, [r4, #4]
 800e8da:	4638      	mov	r0, r7
 800e8dc:	3101      	adds	r1, #1
 800e8de:	f7ff ff79 	bl	800e7d4 <_Balloc>
 800e8e2:	4680      	mov	r8, r0
 800e8e4:	b928      	cbnz	r0, 800e8f2 <__multadd+0x5a>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <__multadd+0x84>)
 800e8ea:	480d      	ldr	r0, [pc, #52]	; (800e920 <__multadd+0x88>)
 800e8ec:	21b5      	movs	r1, #181	; 0xb5
 800e8ee:	f000 fdab 	bl	800f448 <__assert_func>
 800e8f2:	6922      	ldr	r2, [r4, #16]
 800e8f4:	3202      	adds	r2, #2
 800e8f6:	f104 010c 	add.w	r1, r4, #12
 800e8fa:	0092      	lsls	r2, r2, #2
 800e8fc:	300c      	adds	r0, #12
 800e8fe:	f7fe f99b 	bl	800cc38 <memcpy>
 800e902:	4621      	mov	r1, r4
 800e904:	4638      	mov	r0, r7
 800e906:	f7ff ffa5 	bl	800e854 <_Bfree>
 800e90a:	4644      	mov	r4, r8
 800e90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e910:	3501      	adds	r5, #1
 800e912:	615e      	str	r6, [r3, #20]
 800e914:	6125      	str	r5, [r4, #16]
 800e916:	4620      	mov	r0, r4
 800e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91c:	0800fc7b 	.word	0x0800fc7b
 800e920:	0800fcec 	.word	0x0800fcec

0800e924 <__hi0bits>:
 800e924:	0c03      	lsrs	r3, r0, #16
 800e926:	041b      	lsls	r3, r3, #16
 800e928:	b9d3      	cbnz	r3, 800e960 <__hi0bits+0x3c>
 800e92a:	0400      	lsls	r0, r0, #16
 800e92c:	2310      	movs	r3, #16
 800e92e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e932:	bf04      	itt	eq
 800e934:	0200      	lsleq	r0, r0, #8
 800e936:	3308      	addeq	r3, #8
 800e938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e93c:	bf04      	itt	eq
 800e93e:	0100      	lsleq	r0, r0, #4
 800e940:	3304      	addeq	r3, #4
 800e942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e946:	bf04      	itt	eq
 800e948:	0080      	lsleq	r0, r0, #2
 800e94a:	3302      	addeq	r3, #2
 800e94c:	2800      	cmp	r0, #0
 800e94e:	db05      	blt.n	800e95c <__hi0bits+0x38>
 800e950:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e954:	f103 0301 	add.w	r3, r3, #1
 800e958:	bf08      	it	eq
 800e95a:	2320      	moveq	r3, #32
 800e95c:	4618      	mov	r0, r3
 800e95e:	4770      	bx	lr
 800e960:	2300      	movs	r3, #0
 800e962:	e7e4      	b.n	800e92e <__hi0bits+0xa>

0800e964 <__lo0bits>:
 800e964:	6803      	ldr	r3, [r0, #0]
 800e966:	f013 0207 	ands.w	r2, r3, #7
 800e96a:	4601      	mov	r1, r0
 800e96c:	d00b      	beq.n	800e986 <__lo0bits+0x22>
 800e96e:	07da      	lsls	r2, r3, #31
 800e970:	d423      	bmi.n	800e9ba <__lo0bits+0x56>
 800e972:	0798      	lsls	r0, r3, #30
 800e974:	bf49      	itett	mi
 800e976:	085b      	lsrmi	r3, r3, #1
 800e978:	089b      	lsrpl	r3, r3, #2
 800e97a:	2001      	movmi	r0, #1
 800e97c:	600b      	strmi	r3, [r1, #0]
 800e97e:	bf5c      	itt	pl
 800e980:	600b      	strpl	r3, [r1, #0]
 800e982:	2002      	movpl	r0, #2
 800e984:	4770      	bx	lr
 800e986:	b298      	uxth	r0, r3
 800e988:	b9a8      	cbnz	r0, 800e9b6 <__lo0bits+0x52>
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	2010      	movs	r0, #16
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	b90a      	cbnz	r2, 800e996 <__lo0bits+0x32>
 800e992:	3008      	adds	r0, #8
 800e994:	0a1b      	lsrs	r3, r3, #8
 800e996:	071a      	lsls	r2, r3, #28
 800e998:	bf04      	itt	eq
 800e99a:	091b      	lsreq	r3, r3, #4
 800e99c:	3004      	addeq	r0, #4
 800e99e:	079a      	lsls	r2, r3, #30
 800e9a0:	bf04      	itt	eq
 800e9a2:	089b      	lsreq	r3, r3, #2
 800e9a4:	3002      	addeq	r0, #2
 800e9a6:	07da      	lsls	r2, r3, #31
 800e9a8:	d403      	bmi.n	800e9b2 <__lo0bits+0x4e>
 800e9aa:	085b      	lsrs	r3, r3, #1
 800e9ac:	f100 0001 	add.w	r0, r0, #1
 800e9b0:	d005      	beq.n	800e9be <__lo0bits+0x5a>
 800e9b2:	600b      	str	r3, [r1, #0]
 800e9b4:	4770      	bx	lr
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	e7e9      	b.n	800e98e <__lo0bits+0x2a>
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	4770      	bx	lr
 800e9be:	2020      	movs	r0, #32
 800e9c0:	4770      	bx	lr
	...

0800e9c4 <__i2b>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	f7ff ff03 	bl	800e7d4 <_Balloc>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	b928      	cbnz	r0, 800e9de <__i2b+0x1a>
 800e9d2:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <__i2b+0x24>)
 800e9d4:	4805      	ldr	r0, [pc, #20]	; (800e9ec <__i2b+0x28>)
 800e9d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9da:	f000 fd35 	bl	800f448 <__assert_func>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	6144      	str	r4, [r0, #20]
 800e9e2:	6103      	str	r3, [r0, #16]
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	bf00      	nop
 800e9e8:	0800fc7b 	.word	0x0800fc7b
 800e9ec:	0800fcec 	.word	0x0800fcec

0800e9f0 <__multiply>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	4691      	mov	r9, r2
 800e9f6:	690a      	ldr	r2, [r1, #16]
 800e9f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	bfb8      	it	lt
 800ea00:	460b      	movlt	r3, r1
 800ea02:	460c      	mov	r4, r1
 800ea04:	bfbc      	itt	lt
 800ea06:	464c      	movlt	r4, r9
 800ea08:	4699      	movlt	r9, r3
 800ea0a:	6927      	ldr	r7, [r4, #16]
 800ea0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	6861      	ldr	r1, [r4, #4]
 800ea14:	eb07 060a 	add.w	r6, r7, sl
 800ea18:	42b3      	cmp	r3, r6
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	bfb8      	it	lt
 800ea1e:	3101      	addlt	r1, #1
 800ea20:	f7ff fed8 	bl	800e7d4 <_Balloc>
 800ea24:	b930      	cbnz	r0, 800ea34 <__multiply+0x44>
 800ea26:	4602      	mov	r2, r0
 800ea28:	4b44      	ldr	r3, [pc, #272]	; (800eb3c <__multiply+0x14c>)
 800ea2a:	4845      	ldr	r0, [pc, #276]	; (800eb40 <__multiply+0x150>)
 800ea2c:	f240 115d 	movw	r1, #349	; 0x15d
 800ea30:	f000 fd0a 	bl	800f448 <__assert_func>
 800ea34:	f100 0514 	add.w	r5, r0, #20
 800ea38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea3c:	462b      	mov	r3, r5
 800ea3e:	2200      	movs	r2, #0
 800ea40:	4543      	cmp	r3, r8
 800ea42:	d321      	bcc.n	800ea88 <__multiply+0x98>
 800ea44:	f104 0314 	add.w	r3, r4, #20
 800ea48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea4c:	f109 0314 	add.w	r3, r9, #20
 800ea50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea54:	9202      	str	r2, [sp, #8]
 800ea56:	1b3a      	subs	r2, r7, r4
 800ea58:	3a15      	subs	r2, #21
 800ea5a:	f022 0203 	bic.w	r2, r2, #3
 800ea5e:	3204      	adds	r2, #4
 800ea60:	f104 0115 	add.w	r1, r4, #21
 800ea64:	428f      	cmp	r7, r1
 800ea66:	bf38      	it	cc
 800ea68:	2204      	movcc	r2, #4
 800ea6a:	9201      	str	r2, [sp, #4]
 800ea6c:	9a02      	ldr	r2, [sp, #8]
 800ea6e:	9303      	str	r3, [sp, #12]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d80c      	bhi.n	800ea8e <__multiply+0x9e>
 800ea74:	2e00      	cmp	r6, #0
 800ea76:	dd03      	ble.n	800ea80 <__multiply+0x90>
 800ea78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d05a      	beq.n	800eb36 <__multiply+0x146>
 800ea80:	6106      	str	r6, [r0, #16]
 800ea82:	b005      	add	sp, #20
 800ea84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea88:	f843 2b04 	str.w	r2, [r3], #4
 800ea8c:	e7d8      	b.n	800ea40 <__multiply+0x50>
 800ea8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea92:	f1ba 0f00 	cmp.w	sl, #0
 800ea96:	d024      	beq.n	800eae2 <__multiply+0xf2>
 800ea98:	f104 0e14 	add.w	lr, r4, #20
 800ea9c:	46a9      	mov	r9, r5
 800ea9e:	f04f 0c00 	mov.w	ip, #0
 800eaa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eaa6:	f8d9 1000 	ldr.w	r1, [r9]
 800eaaa:	fa1f fb82 	uxth.w	fp, r2
 800eaae:	b289      	uxth	r1, r1
 800eab0:	fb0a 110b 	mla	r1, sl, fp, r1
 800eab4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eab8:	f8d9 2000 	ldr.w	r2, [r9]
 800eabc:	4461      	add	r1, ip
 800eabe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eac2:	fb0a c20b 	mla	r2, sl, fp, ip
 800eac6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eaca:	b289      	uxth	r1, r1
 800eacc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ead0:	4577      	cmp	r7, lr
 800ead2:	f849 1b04 	str.w	r1, [r9], #4
 800ead6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eada:	d8e2      	bhi.n	800eaa2 <__multiply+0xb2>
 800eadc:	9a01      	ldr	r2, [sp, #4]
 800eade:	f845 c002 	str.w	ip, [r5, r2]
 800eae2:	9a03      	ldr	r2, [sp, #12]
 800eae4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eae8:	3304      	adds	r3, #4
 800eaea:	f1b9 0f00 	cmp.w	r9, #0
 800eaee:	d020      	beq.n	800eb32 <__multiply+0x142>
 800eaf0:	6829      	ldr	r1, [r5, #0]
 800eaf2:	f104 0c14 	add.w	ip, r4, #20
 800eaf6:	46ae      	mov	lr, r5
 800eaf8:	f04f 0a00 	mov.w	sl, #0
 800eafc:	f8bc b000 	ldrh.w	fp, [ip]
 800eb00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb04:	fb09 220b 	mla	r2, r9, fp, r2
 800eb08:	4492      	add	sl, r2
 800eb0a:	b289      	uxth	r1, r1
 800eb0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb10:	f84e 1b04 	str.w	r1, [lr], #4
 800eb14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb18:	f8be 1000 	ldrh.w	r1, [lr]
 800eb1c:	0c12      	lsrs	r2, r2, #16
 800eb1e:	fb09 1102 	mla	r1, r9, r2, r1
 800eb22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb26:	4567      	cmp	r7, ip
 800eb28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb2c:	d8e6      	bhi.n	800eafc <__multiply+0x10c>
 800eb2e:	9a01      	ldr	r2, [sp, #4]
 800eb30:	50a9      	str	r1, [r5, r2]
 800eb32:	3504      	adds	r5, #4
 800eb34:	e79a      	b.n	800ea6c <__multiply+0x7c>
 800eb36:	3e01      	subs	r6, #1
 800eb38:	e79c      	b.n	800ea74 <__multiply+0x84>
 800eb3a:	bf00      	nop
 800eb3c:	0800fc7b 	.word	0x0800fc7b
 800eb40:	0800fcec 	.word	0x0800fcec

0800eb44 <__pow5mult>:
 800eb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb48:	4615      	mov	r5, r2
 800eb4a:	f012 0203 	ands.w	r2, r2, #3
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460f      	mov	r7, r1
 800eb52:	d007      	beq.n	800eb64 <__pow5mult+0x20>
 800eb54:	4c25      	ldr	r4, [pc, #148]	; (800ebec <__pow5mult+0xa8>)
 800eb56:	3a01      	subs	r2, #1
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb5e:	f7ff fe9b 	bl	800e898 <__multadd>
 800eb62:	4607      	mov	r7, r0
 800eb64:	10ad      	asrs	r5, r5, #2
 800eb66:	d03d      	beq.n	800ebe4 <__pow5mult+0xa0>
 800eb68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb6a:	b97c      	cbnz	r4, 800eb8c <__pow5mult+0x48>
 800eb6c:	2010      	movs	r0, #16
 800eb6e:	f7ff fe29 	bl	800e7c4 <malloc>
 800eb72:	4602      	mov	r2, r0
 800eb74:	6270      	str	r0, [r6, #36]	; 0x24
 800eb76:	b928      	cbnz	r0, 800eb84 <__pow5mult+0x40>
 800eb78:	4b1d      	ldr	r3, [pc, #116]	; (800ebf0 <__pow5mult+0xac>)
 800eb7a:	481e      	ldr	r0, [pc, #120]	; (800ebf4 <__pow5mult+0xb0>)
 800eb7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb80:	f000 fc62 	bl	800f448 <__assert_func>
 800eb84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb88:	6004      	str	r4, [r0, #0]
 800eb8a:	60c4      	str	r4, [r0, #12]
 800eb8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb94:	b94c      	cbnz	r4, 800ebaa <__pow5mult+0x66>
 800eb96:	f240 2171 	movw	r1, #625	; 0x271
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	f7ff ff12 	bl	800e9c4 <__i2b>
 800eba0:	2300      	movs	r3, #0
 800eba2:	f8c8 0008 	str.w	r0, [r8, #8]
 800eba6:	4604      	mov	r4, r0
 800eba8:	6003      	str	r3, [r0, #0]
 800ebaa:	f04f 0900 	mov.w	r9, #0
 800ebae:	07eb      	lsls	r3, r5, #31
 800ebb0:	d50a      	bpl.n	800ebc8 <__pow5mult+0x84>
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	f7ff ff1a 	bl	800e9f0 <__multiply>
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	4680      	mov	r8, r0
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7ff fe47 	bl	800e854 <_Bfree>
 800ebc6:	4647      	mov	r7, r8
 800ebc8:	106d      	asrs	r5, r5, #1
 800ebca:	d00b      	beq.n	800ebe4 <__pow5mult+0xa0>
 800ebcc:	6820      	ldr	r0, [r4, #0]
 800ebce:	b938      	cbnz	r0, 800ebe0 <__pow5mult+0x9c>
 800ebd0:	4622      	mov	r2, r4
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	f7ff ff0b 	bl	800e9f0 <__multiply>
 800ebda:	6020      	str	r0, [r4, #0]
 800ebdc:	f8c0 9000 	str.w	r9, [r0]
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	e7e4      	b.n	800ebae <__pow5mult+0x6a>
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebea:	bf00      	nop
 800ebec:	0800fe38 	.word	0x0800fe38
 800ebf0:	0800fc09 	.word	0x0800fc09
 800ebf4:	0800fcec 	.word	0x0800fcec

0800ebf8 <__lshift>:
 800ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	6849      	ldr	r1, [r1, #4]
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	4607      	mov	r7, r0
 800ec0a:	4691      	mov	r9, r2
 800ec0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec10:	f108 0601 	add.w	r6, r8, #1
 800ec14:	42b3      	cmp	r3, r6
 800ec16:	db0b      	blt.n	800ec30 <__lshift+0x38>
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff fddb 	bl	800e7d4 <_Balloc>
 800ec1e:	4605      	mov	r5, r0
 800ec20:	b948      	cbnz	r0, 800ec36 <__lshift+0x3e>
 800ec22:	4602      	mov	r2, r0
 800ec24:	4b2a      	ldr	r3, [pc, #168]	; (800ecd0 <__lshift+0xd8>)
 800ec26:	482b      	ldr	r0, [pc, #172]	; (800ecd4 <__lshift+0xdc>)
 800ec28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec2c:	f000 fc0c 	bl	800f448 <__assert_func>
 800ec30:	3101      	adds	r1, #1
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	e7ee      	b.n	800ec14 <__lshift+0x1c>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f100 0114 	add.w	r1, r0, #20
 800ec3c:	f100 0210 	add.w	r2, r0, #16
 800ec40:	4618      	mov	r0, r3
 800ec42:	4553      	cmp	r3, sl
 800ec44:	db37      	blt.n	800ecb6 <__lshift+0xbe>
 800ec46:	6920      	ldr	r0, [r4, #16]
 800ec48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec4c:	f104 0314 	add.w	r3, r4, #20
 800ec50:	f019 091f 	ands.w	r9, r9, #31
 800ec54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec5c:	d02f      	beq.n	800ecbe <__lshift+0xc6>
 800ec5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ec62:	468a      	mov	sl, r1
 800ec64:	f04f 0c00 	mov.w	ip, #0
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	fa02 f209 	lsl.w	r2, r2, r9
 800ec6e:	ea42 020c 	orr.w	r2, r2, ip
 800ec72:	f84a 2b04 	str.w	r2, [sl], #4
 800ec76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec7a:	4298      	cmp	r0, r3
 800ec7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ec80:	d8f2      	bhi.n	800ec68 <__lshift+0x70>
 800ec82:	1b03      	subs	r3, r0, r4
 800ec84:	3b15      	subs	r3, #21
 800ec86:	f023 0303 	bic.w	r3, r3, #3
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	f104 0215 	add.w	r2, r4, #21
 800ec90:	4290      	cmp	r0, r2
 800ec92:	bf38      	it	cc
 800ec94:	2304      	movcc	r3, #4
 800ec96:	f841 c003 	str.w	ip, [r1, r3]
 800ec9a:	f1bc 0f00 	cmp.w	ip, #0
 800ec9e:	d001      	beq.n	800eca4 <__lshift+0xac>
 800eca0:	f108 0602 	add.w	r6, r8, #2
 800eca4:	3e01      	subs	r6, #1
 800eca6:	4638      	mov	r0, r7
 800eca8:	612e      	str	r6, [r5, #16]
 800ecaa:	4621      	mov	r1, r4
 800ecac:	f7ff fdd2 	bl	800e854 <_Bfree>
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecba:	3301      	adds	r3, #1
 800ecbc:	e7c1      	b.n	800ec42 <__lshift+0x4a>
 800ecbe:	3904      	subs	r1, #4
 800ecc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecc8:	4298      	cmp	r0, r3
 800ecca:	d8f9      	bhi.n	800ecc0 <__lshift+0xc8>
 800eccc:	e7ea      	b.n	800eca4 <__lshift+0xac>
 800ecce:	bf00      	nop
 800ecd0:	0800fc7b 	.word	0x0800fc7b
 800ecd4:	0800fcec 	.word	0x0800fcec

0800ecd8 <__mcmp>:
 800ecd8:	b530      	push	{r4, r5, lr}
 800ecda:	6902      	ldr	r2, [r0, #16]
 800ecdc:	690c      	ldr	r4, [r1, #16]
 800ecde:	1b12      	subs	r2, r2, r4
 800ece0:	d10e      	bne.n	800ed00 <__mcmp+0x28>
 800ece2:	f100 0314 	add.w	r3, r0, #20
 800ece6:	3114      	adds	r1, #20
 800ece8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ecec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ecf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ecf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ecf8:	42a5      	cmp	r5, r4
 800ecfa:	d003      	beq.n	800ed04 <__mcmp+0x2c>
 800ecfc:	d305      	bcc.n	800ed0a <__mcmp+0x32>
 800ecfe:	2201      	movs	r2, #1
 800ed00:	4610      	mov	r0, r2
 800ed02:	bd30      	pop	{r4, r5, pc}
 800ed04:	4283      	cmp	r3, r0
 800ed06:	d3f3      	bcc.n	800ecf0 <__mcmp+0x18>
 800ed08:	e7fa      	b.n	800ed00 <__mcmp+0x28>
 800ed0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0e:	e7f7      	b.n	800ed00 <__mcmp+0x28>

0800ed10 <__mdiff>:
 800ed10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	460c      	mov	r4, r1
 800ed16:	4606      	mov	r6, r0
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	4690      	mov	r8, r2
 800ed1e:	f7ff ffdb 	bl	800ecd8 <__mcmp>
 800ed22:	1e05      	subs	r5, r0, #0
 800ed24:	d110      	bne.n	800ed48 <__mdiff+0x38>
 800ed26:	4629      	mov	r1, r5
 800ed28:	4630      	mov	r0, r6
 800ed2a:	f7ff fd53 	bl	800e7d4 <_Balloc>
 800ed2e:	b930      	cbnz	r0, 800ed3e <__mdiff+0x2e>
 800ed30:	4b3a      	ldr	r3, [pc, #232]	; (800ee1c <__mdiff+0x10c>)
 800ed32:	4602      	mov	r2, r0
 800ed34:	f240 2132 	movw	r1, #562	; 0x232
 800ed38:	4839      	ldr	r0, [pc, #228]	; (800ee20 <__mdiff+0x110>)
 800ed3a:	f000 fb85 	bl	800f448 <__assert_func>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed48:	bfa4      	itt	ge
 800ed4a:	4643      	movge	r3, r8
 800ed4c:	46a0      	movge	r8, r4
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed54:	bfa6      	itte	ge
 800ed56:	461c      	movge	r4, r3
 800ed58:	2500      	movge	r5, #0
 800ed5a:	2501      	movlt	r5, #1
 800ed5c:	f7ff fd3a 	bl	800e7d4 <_Balloc>
 800ed60:	b920      	cbnz	r0, 800ed6c <__mdiff+0x5c>
 800ed62:	4b2e      	ldr	r3, [pc, #184]	; (800ee1c <__mdiff+0x10c>)
 800ed64:	4602      	mov	r2, r0
 800ed66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed6a:	e7e5      	b.n	800ed38 <__mdiff+0x28>
 800ed6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed70:	6926      	ldr	r6, [r4, #16]
 800ed72:	60c5      	str	r5, [r0, #12]
 800ed74:	f104 0914 	add.w	r9, r4, #20
 800ed78:	f108 0514 	add.w	r5, r8, #20
 800ed7c:	f100 0e14 	add.w	lr, r0, #20
 800ed80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed88:	f108 0210 	add.w	r2, r8, #16
 800ed8c:	46f2      	mov	sl, lr
 800ed8e:	2100      	movs	r1, #0
 800ed90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed98:	fa1f f883 	uxth.w	r8, r3
 800ed9c:	fa11 f18b 	uxtah	r1, r1, fp
 800eda0:	0c1b      	lsrs	r3, r3, #16
 800eda2:	eba1 0808 	sub.w	r8, r1, r8
 800eda6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edae:	fa1f f888 	uxth.w	r8, r8
 800edb2:	1419      	asrs	r1, r3, #16
 800edb4:	454e      	cmp	r6, r9
 800edb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edba:	f84a 3b04 	str.w	r3, [sl], #4
 800edbe:	d8e7      	bhi.n	800ed90 <__mdiff+0x80>
 800edc0:	1b33      	subs	r3, r6, r4
 800edc2:	3b15      	subs	r3, #21
 800edc4:	f023 0303 	bic.w	r3, r3, #3
 800edc8:	3304      	adds	r3, #4
 800edca:	3415      	adds	r4, #21
 800edcc:	42a6      	cmp	r6, r4
 800edce:	bf38      	it	cc
 800edd0:	2304      	movcc	r3, #4
 800edd2:	441d      	add	r5, r3
 800edd4:	4473      	add	r3, lr
 800edd6:	469e      	mov	lr, r3
 800edd8:	462e      	mov	r6, r5
 800edda:	4566      	cmp	r6, ip
 800eddc:	d30e      	bcc.n	800edfc <__mdiff+0xec>
 800edde:	f10c 0203 	add.w	r2, ip, #3
 800ede2:	1b52      	subs	r2, r2, r5
 800ede4:	f022 0203 	bic.w	r2, r2, #3
 800ede8:	3d03      	subs	r5, #3
 800edea:	45ac      	cmp	ip, r5
 800edec:	bf38      	it	cc
 800edee:	2200      	movcc	r2, #0
 800edf0:	441a      	add	r2, r3
 800edf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800edf6:	b17b      	cbz	r3, 800ee18 <__mdiff+0x108>
 800edf8:	6107      	str	r7, [r0, #16]
 800edfa:	e7a3      	b.n	800ed44 <__mdiff+0x34>
 800edfc:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee00:	fa11 f288 	uxtah	r2, r1, r8
 800ee04:	1414      	asrs	r4, r2, #16
 800ee06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee10:	f84e 2b04 	str.w	r2, [lr], #4
 800ee14:	1421      	asrs	r1, r4, #16
 800ee16:	e7e0      	b.n	800edda <__mdiff+0xca>
 800ee18:	3f01      	subs	r7, #1
 800ee1a:	e7ea      	b.n	800edf2 <__mdiff+0xe2>
 800ee1c:	0800fc7b 	.word	0x0800fc7b
 800ee20:	0800fcec 	.word	0x0800fcec

0800ee24 <__d2b>:
 800ee24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee28:	4689      	mov	r9, r1
 800ee2a:	2101      	movs	r1, #1
 800ee2c:	ec57 6b10 	vmov	r6, r7, d0
 800ee30:	4690      	mov	r8, r2
 800ee32:	f7ff fccf 	bl	800e7d4 <_Balloc>
 800ee36:	4604      	mov	r4, r0
 800ee38:	b930      	cbnz	r0, 800ee48 <__d2b+0x24>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	4b25      	ldr	r3, [pc, #148]	; (800eed4 <__d2b+0xb0>)
 800ee3e:	4826      	ldr	r0, [pc, #152]	; (800eed8 <__d2b+0xb4>)
 800ee40:	f240 310a 	movw	r1, #778	; 0x30a
 800ee44:	f000 fb00 	bl	800f448 <__assert_func>
 800ee48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee50:	bb35      	cbnz	r5, 800eea0 <__d2b+0x7c>
 800ee52:	2e00      	cmp	r6, #0
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	d028      	beq.n	800eeaa <__d2b+0x86>
 800ee58:	4668      	mov	r0, sp
 800ee5a:	9600      	str	r6, [sp, #0]
 800ee5c:	f7ff fd82 	bl	800e964 <__lo0bits>
 800ee60:	9900      	ldr	r1, [sp, #0]
 800ee62:	b300      	cbz	r0, 800eea6 <__d2b+0x82>
 800ee64:	9a01      	ldr	r2, [sp, #4]
 800ee66:	f1c0 0320 	rsb	r3, r0, #32
 800ee6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6e:	430b      	orrs	r3, r1
 800ee70:	40c2      	lsrs	r2, r0
 800ee72:	6163      	str	r3, [r4, #20]
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	9b01      	ldr	r3, [sp, #4]
 800ee78:	61a3      	str	r3, [r4, #24]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	bf14      	ite	ne
 800ee7e:	2202      	movne	r2, #2
 800ee80:	2201      	moveq	r2, #1
 800ee82:	6122      	str	r2, [r4, #16]
 800ee84:	b1d5      	cbz	r5, 800eebc <__d2b+0x98>
 800ee86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee8a:	4405      	add	r5, r0
 800ee8c:	f8c9 5000 	str.w	r5, [r9]
 800ee90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee94:	f8c8 0000 	str.w	r0, [r8]
 800ee98:	4620      	mov	r0, r4
 800ee9a:	b003      	add	sp, #12
 800ee9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eea4:	e7d5      	b.n	800ee52 <__d2b+0x2e>
 800eea6:	6161      	str	r1, [r4, #20]
 800eea8:	e7e5      	b.n	800ee76 <__d2b+0x52>
 800eeaa:	a801      	add	r0, sp, #4
 800eeac:	f7ff fd5a 	bl	800e964 <__lo0bits>
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	6163      	str	r3, [r4, #20]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	6122      	str	r2, [r4, #16]
 800eeb8:	3020      	adds	r0, #32
 800eeba:	e7e3      	b.n	800ee84 <__d2b+0x60>
 800eebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eec4:	f8c9 0000 	str.w	r0, [r9]
 800eec8:	6918      	ldr	r0, [r3, #16]
 800eeca:	f7ff fd2b 	bl	800e924 <__hi0bits>
 800eece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eed2:	e7df      	b.n	800ee94 <__d2b+0x70>
 800eed4:	0800fc7b 	.word	0x0800fc7b
 800eed8:	0800fcec 	.word	0x0800fcec

0800eedc <_calloc_r>:
 800eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eede:	fba1 2402 	umull	r2, r4, r1, r2
 800eee2:	b94c      	cbnz	r4, 800eef8 <_calloc_r+0x1c>
 800eee4:	4611      	mov	r1, r2
 800eee6:	9201      	str	r2, [sp, #4]
 800eee8:	f000 f87a 	bl	800efe0 <_malloc_r>
 800eeec:	9a01      	ldr	r2, [sp, #4]
 800eeee:	4605      	mov	r5, r0
 800eef0:	b930      	cbnz	r0, 800ef00 <_calloc_r+0x24>
 800eef2:	4628      	mov	r0, r5
 800eef4:	b003      	add	sp, #12
 800eef6:	bd30      	pop	{r4, r5, pc}
 800eef8:	220c      	movs	r2, #12
 800eefa:	6002      	str	r2, [r0, #0]
 800eefc:	2500      	movs	r5, #0
 800eefe:	e7f8      	b.n	800eef2 <_calloc_r+0x16>
 800ef00:	4621      	mov	r1, r4
 800ef02:	f7fd fea7 	bl	800cc54 <memset>
 800ef06:	e7f4      	b.n	800eef2 <_calloc_r+0x16>

0800ef08 <_free_r>:
 800ef08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef0a:	2900      	cmp	r1, #0
 800ef0c:	d044      	beq.n	800ef98 <_free_r+0x90>
 800ef0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef12:	9001      	str	r0, [sp, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f1a1 0404 	sub.w	r4, r1, #4
 800ef1a:	bfb8      	it	lt
 800ef1c:	18e4      	addlt	r4, r4, r3
 800ef1e:	f000 fb19 	bl	800f554 <__malloc_lock>
 800ef22:	4a1e      	ldr	r2, [pc, #120]	; (800ef9c <_free_r+0x94>)
 800ef24:	9801      	ldr	r0, [sp, #4]
 800ef26:	6813      	ldr	r3, [r2, #0]
 800ef28:	b933      	cbnz	r3, 800ef38 <_free_r+0x30>
 800ef2a:	6063      	str	r3, [r4, #4]
 800ef2c:	6014      	str	r4, [r2, #0]
 800ef2e:	b003      	add	sp, #12
 800ef30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef34:	f000 bb14 	b.w	800f560 <__malloc_unlock>
 800ef38:	42a3      	cmp	r3, r4
 800ef3a:	d908      	bls.n	800ef4e <_free_r+0x46>
 800ef3c:	6825      	ldr	r5, [r4, #0]
 800ef3e:	1961      	adds	r1, r4, r5
 800ef40:	428b      	cmp	r3, r1
 800ef42:	bf01      	itttt	eq
 800ef44:	6819      	ldreq	r1, [r3, #0]
 800ef46:	685b      	ldreq	r3, [r3, #4]
 800ef48:	1949      	addeq	r1, r1, r5
 800ef4a:	6021      	streq	r1, [r4, #0]
 800ef4c:	e7ed      	b.n	800ef2a <_free_r+0x22>
 800ef4e:	461a      	mov	r2, r3
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	b10b      	cbz	r3, 800ef58 <_free_r+0x50>
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	d9fa      	bls.n	800ef4e <_free_r+0x46>
 800ef58:	6811      	ldr	r1, [r2, #0]
 800ef5a:	1855      	adds	r5, r2, r1
 800ef5c:	42a5      	cmp	r5, r4
 800ef5e:	d10b      	bne.n	800ef78 <_free_r+0x70>
 800ef60:	6824      	ldr	r4, [r4, #0]
 800ef62:	4421      	add	r1, r4
 800ef64:	1854      	adds	r4, r2, r1
 800ef66:	42a3      	cmp	r3, r4
 800ef68:	6011      	str	r1, [r2, #0]
 800ef6a:	d1e0      	bne.n	800ef2e <_free_r+0x26>
 800ef6c:	681c      	ldr	r4, [r3, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	6053      	str	r3, [r2, #4]
 800ef72:	4421      	add	r1, r4
 800ef74:	6011      	str	r1, [r2, #0]
 800ef76:	e7da      	b.n	800ef2e <_free_r+0x26>
 800ef78:	d902      	bls.n	800ef80 <_free_r+0x78>
 800ef7a:	230c      	movs	r3, #12
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	e7d6      	b.n	800ef2e <_free_r+0x26>
 800ef80:	6825      	ldr	r5, [r4, #0]
 800ef82:	1961      	adds	r1, r4, r5
 800ef84:	428b      	cmp	r3, r1
 800ef86:	bf04      	itt	eq
 800ef88:	6819      	ldreq	r1, [r3, #0]
 800ef8a:	685b      	ldreq	r3, [r3, #4]
 800ef8c:	6063      	str	r3, [r4, #4]
 800ef8e:	bf04      	itt	eq
 800ef90:	1949      	addeq	r1, r1, r5
 800ef92:	6021      	streq	r1, [r4, #0]
 800ef94:	6054      	str	r4, [r2, #4]
 800ef96:	e7ca      	b.n	800ef2e <_free_r+0x26>
 800ef98:	b003      	add	sp, #12
 800ef9a:	bd30      	pop	{r4, r5, pc}
 800ef9c:	200006b0 	.word	0x200006b0

0800efa0 <sbrk_aligned>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	4e0e      	ldr	r6, [pc, #56]	; (800efdc <sbrk_aligned+0x3c>)
 800efa4:	460c      	mov	r4, r1
 800efa6:	6831      	ldr	r1, [r6, #0]
 800efa8:	4605      	mov	r5, r0
 800efaa:	b911      	cbnz	r1, 800efb2 <sbrk_aligned+0x12>
 800efac:	f000 f9e6 	bl	800f37c <_sbrk_r>
 800efb0:	6030      	str	r0, [r6, #0]
 800efb2:	4621      	mov	r1, r4
 800efb4:	4628      	mov	r0, r5
 800efb6:	f000 f9e1 	bl	800f37c <_sbrk_r>
 800efba:	1c43      	adds	r3, r0, #1
 800efbc:	d00a      	beq.n	800efd4 <sbrk_aligned+0x34>
 800efbe:	1cc4      	adds	r4, r0, #3
 800efc0:	f024 0403 	bic.w	r4, r4, #3
 800efc4:	42a0      	cmp	r0, r4
 800efc6:	d007      	beq.n	800efd8 <sbrk_aligned+0x38>
 800efc8:	1a21      	subs	r1, r4, r0
 800efca:	4628      	mov	r0, r5
 800efcc:	f000 f9d6 	bl	800f37c <_sbrk_r>
 800efd0:	3001      	adds	r0, #1
 800efd2:	d101      	bne.n	800efd8 <sbrk_aligned+0x38>
 800efd4:	f04f 34ff 	mov.w	r4, #4294967295
 800efd8:	4620      	mov	r0, r4
 800efda:	bd70      	pop	{r4, r5, r6, pc}
 800efdc:	200006b4 	.word	0x200006b4

0800efe0 <_malloc_r>:
 800efe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe4:	1ccd      	adds	r5, r1, #3
 800efe6:	f025 0503 	bic.w	r5, r5, #3
 800efea:	3508      	adds	r5, #8
 800efec:	2d0c      	cmp	r5, #12
 800efee:	bf38      	it	cc
 800eff0:	250c      	movcc	r5, #12
 800eff2:	2d00      	cmp	r5, #0
 800eff4:	4607      	mov	r7, r0
 800eff6:	db01      	blt.n	800effc <_malloc_r+0x1c>
 800eff8:	42a9      	cmp	r1, r5
 800effa:	d905      	bls.n	800f008 <_malloc_r+0x28>
 800effc:	230c      	movs	r3, #12
 800effe:	603b      	str	r3, [r7, #0]
 800f000:	2600      	movs	r6, #0
 800f002:	4630      	mov	r0, r6
 800f004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f008:	4e2e      	ldr	r6, [pc, #184]	; (800f0c4 <_malloc_r+0xe4>)
 800f00a:	f000 faa3 	bl	800f554 <__malloc_lock>
 800f00e:	6833      	ldr	r3, [r6, #0]
 800f010:	461c      	mov	r4, r3
 800f012:	bb34      	cbnz	r4, 800f062 <_malloc_r+0x82>
 800f014:	4629      	mov	r1, r5
 800f016:	4638      	mov	r0, r7
 800f018:	f7ff ffc2 	bl	800efa0 <sbrk_aligned>
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	4604      	mov	r4, r0
 800f020:	d14d      	bne.n	800f0be <_malloc_r+0xde>
 800f022:	6834      	ldr	r4, [r6, #0]
 800f024:	4626      	mov	r6, r4
 800f026:	2e00      	cmp	r6, #0
 800f028:	d140      	bne.n	800f0ac <_malloc_r+0xcc>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	4631      	mov	r1, r6
 800f02e:	4638      	mov	r0, r7
 800f030:	eb04 0803 	add.w	r8, r4, r3
 800f034:	f000 f9a2 	bl	800f37c <_sbrk_r>
 800f038:	4580      	cmp	r8, r0
 800f03a:	d13a      	bne.n	800f0b2 <_malloc_r+0xd2>
 800f03c:	6821      	ldr	r1, [r4, #0]
 800f03e:	3503      	adds	r5, #3
 800f040:	1a6d      	subs	r5, r5, r1
 800f042:	f025 0503 	bic.w	r5, r5, #3
 800f046:	3508      	adds	r5, #8
 800f048:	2d0c      	cmp	r5, #12
 800f04a:	bf38      	it	cc
 800f04c:	250c      	movcc	r5, #12
 800f04e:	4629      	mov	r1, r5
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff ffa5 	bl	800efa0 <sbrk_aligned>
 800f056:	3001      	adds	r0, #1
 800f058:	d02b      	beq.n	800f0b2 <_malloc_r+0xd2>
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	442b      	add	r3, r5
 800f05e:	6023      	str	r3, [r4, #0]
 800f060:	e00e      	b.n	800f080 <_malloc_r+0xa0>
 800f062:	6822      	ldr	r2, [r4, #0]
 800f064:	1b52      	subs	r2, r2, r5
 800f066:	d41e      	bmi.n	800f0a6 <_malloc_r+0xc6>
 800f068:	2a0b      	cmp	r2, #11
 800f06a:	d916      	bls.n	800f09a <_malloc_r+0xba>
 800f06c:	1961      	adds	r1, r4, r5
 800f06e:	42a3      	cmp	r3, r4
 800f070:	6025      	str	r5, [r4, #0]
 800f072:	bf18      	it	ne
 800f074:	6059      	strne	r1, [r3, #4]
 800f076:	6863      	ldr	r3, [r4, #4]
 800f078:	bf08      	it	eq
 800f07a:	6031      	streq	r1, [r6, #0]
 800f07c:	5162      	str	r2, [r4, r5]
 800f07e:	604b      	str	r3, [r1, #4]
 800f080:	4638      	mov	r0, r7
 800f082:	f104 060b 	add.w	r6, r4, #11
 800f086:	f000 fa6b 	bl	800f560 <__malloc_unlock>
 800f08a:	f026 0607 	bic.w	r6, r6, #7
 800f08e:	1d23      	adds	r3, r4, #4
 800f090:	1af2      	subs	r2, r6, r3
 800f092:	d0b6      	beq.n	800f002 <_malloc_r+0x22>
 800f094:	1b9b      	subs	r3, r3, r6
 800f096:	50a3      	str	r3, [r4, r2]
 800f098:	e7b3      	b.n	800f002 <_malloc_r+0x22>
 800f09a:	6862      	ldr	r2, [r4, #4]
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	bf0c      	ite	eq
 800f0a0:	6032      	streq	r2, [r6, #0]
 800f0a2:	605a      	strne	r2, [r3, #4]
 800f0a4:	e7ec      	b.n	800f080 <_malloc_r+0xa0>
 800f0a6:	4623      	mov	r3, r4
 800f0a8:	6864      	ldr	r4, [r4, #4]
 800f0aa:	e7b2      	b.n	800f012 <_malloc_r+0x32>
 800f0ac:	4634      	mov	r4, r6
 800f0ae:	6876      	ldr	r6, [r6, #4]
 800f0b0:	e7b9      	b.n	800f026 <_malloc_r+0x46>
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	603b      	str	r3, [r7, #0]
 800f0b6:	4638      	mov	r0, r7
 800f0b8:	f000 fa52 	bl	800f560 <__malloc_unlock>
 800f0bc:	e7a1      	b.n	800f002 <_malloc_r+0x22>
 800f0be:	6025      	str	r5, [r4, #0]
 800f0c0:	e7de      	b.n	800f080 <_malloc_r+0xa0>
 800f0c2:	bf00      	nop
 800f0c4:	200006b0 	.word	0x200006b0

0800f0c8 <__sfputc_r>:
 800f0c8:	6893      	ldr	r3, [r2, #8]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	b410      	push	{r4}
 800f0d0:	6093      	str	r3, [r2, #8]
 800f0d2:	da08      	bge.n	800f0e6 <__sfputc_r+0x1e>
 800f0d4:	6994      	ldr	r4, [r2, #24]
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	db01      	blt.n	800f0de <__sfputc_r+0x16>
 800f0da:	290a      	cmp	r1, #10
 800f0dc:	d103      	bne.n	800f0e6 <__sfputc_r+0x1e>
 800f0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e2:	f7fe ba91 	b.w	800d608 <__swbuf_r>
 800f0e6:	6813      	ldr	r3, [r2, #0]
 800f0e8:	1c58      	adds	r0, r3, #1
 800f0ea:	6010      	str	r0, [r2, #0]
 800f0ec:	7019      	strb	r1, [r3, #0]
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <__sfputs_r>:
 800f0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	460f      	mov	r7, r1
 800f0fc:	4614      	mov	r4, r2
 800f0fe:	18d5      	adds	r5, r2, r3
 800f100:	42ac      	cmp	r4, r5
 800f102:	d101      	bne.n	800f108 <__sfputs_r+0x12>
 800f104:	2000      	movs	r0, #0
 800f106:	e007      	b.n	800f118 <__sfputs_r+0x22>
 800f108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10c:	463a      	mov	r2, r7
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ffda 	bl	800f0c8 <__sfputc_r>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d1f3      	bne.n	800f100 <__sfputs_r+0xa>
 800f118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f11c <_vfiprintf_r>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	460d      	mov	r5, r1
 800f122:	b09d      	sub	sp, #116	; 0x74
 800f124:	4614      	mov	r4, r2
 800f126:	4698      	mov	r8, r3
 800f128:	4606      	mov	r6, r0
 800f12a:	b118      	cbz	r0, 800f134 <_vfiprintf_r+0x18>
 800f12c:	6983      	ldr	r3, [r0, #24]
 800f12e:	b90b      	cbnz	r3, 800f134 <_vfiprintf_r+0x18>
 800f130:	f7ff fa3e 	bl	800e5b0 <__sinit>
 800f134:	4b89      	ldr	r3, [pc, #548]	; (800f35c <_vfiprintf_r+0x240>)
 800f136:	429d      	cmp	r5, r3
 800f138:	d11b      	bne.n	800f172 <_vfiprintf_r+0x56>
 800f13a:	6875      	ldr	r5, [r6, #4]
 800f13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f13e:	07d9      	lsls	r1, r3, #31
 800f140:	d405      	bmi.n	800f14e <_vfiprintf_r+0x32>
 800f142:	89ab      	ldrh	r3, [r5, #12]
 800f144:	059a      	lsls	r2, r3, #22
 800f146:	d402      	bmi.n	800f14e <_vfiprintf_r+0x32>
 800f148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f14a:	f7ff fad4 	bl	800e6f6 <__retarget_lock_acquire_recursive>
 800f14e:	89ab      	ldrh	r3, [r5, #12]
 800f150:	071b      	lsls	r3, r3, #28
 800f152:	d501      	bpl.n	800f158 <_vfiprintf_r+0x3c>
 800f154:	692b      	ldr	r3, [r5, #16]
 800f156:	b9eb      	cbnz	r3, 800f194 <_vfiprintf_r+0x78>
 800f158:	4629      	mov	r1, r5
 800f15a:	4630      	mov	r0, r6
 800f15c:	f7fe faa6 	bl	800d6ac <__swsetup_r>
 800f160:	b1c0      	cbz	r0, 800f194 <_vfiprintf_r+0x78>
 800f162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f164:	07dc      	lsls	r4, r3, #31
 800f166:	d50e      	bpl.n	800f186 <_vfiprintf_r+0x6a>
 800f168:	f04f 30ff 	mov.w	r0, #4294967295
 800f16c:	b01d      	add	sp, #116	; 0x74
 800f16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f172:	4b7b      	ldr	r3, [pc, #492]	; (800f360 <_vfiprintf_r+0x244>)
 800f174:	429d      	cmp	r5, r3
 800f176:	d101      	bne.n	800f17c <_vfiprintf_r+0x60>
 800f178:	68b5      	ldr	r5, [r6, #8]
 800f17a:	e7df      	b.n	800f13c <_vfiprintf_r+0x20>
 800f17c:	4b79      	ldr	r3, [pc, #484]	; (800f364 <_vfiprintf_r+0x248>)
 800f17e:	429d      	cmp	r5, r3
 800f180:	bf08      	it	eq
 800f182:	68f5      	ldreq	r5, [r6, #12]
 800f184:	e7da      	b.n	800f13c <_vfiprintf_r+0x20>
 800f186:	89ab      	ldrh	r3, [r5, #12]
 800f188:	0598      	lsls	r0, r3, #22
 800f18a:	d4ed      	bmi.n	800f168 <_vfiprintf_r+0x4c>
 800f18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f18e:	f7ff fab3 	bl	800e6f8 <__retarget_lock_release_recursive>
 800f192:	e7e9      	b.n	800f168 <_vfiprintf_r+0x4c>
 800f194:	2300      	movs	r3, #0
 800f196:	9309      	str	r3, [sp, #36]	; 0x24
 800f198:	2320      	movs	r3, #32
 800f19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1a2:	2330      	movs	r3, #48	; 0x30
 800f1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f368 <_vfiprintf_r+0x24c>
 800f1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1ac:	f04f 0901 	mov.w	r9, #1
 800f1b0:	4623      	mov	r3, r4
 800f1b2:	469a      	mov	sl, r3
 800f1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1b8:	b10a      	cbz	r2, 800f1be <_vfiprintf_r+0xa2>
 800f1ba:	2a25      	cmp	r2, #37	; 0x25
 800f1bc:	d1f9      	bne.n	800f1b2 <_vfiprintf_r+0x96>
 800f1be:	ebba 0b04 	subs.w	fp, sl, r4
 800f1c2:	d00b      	beq.n	800f1dc <_vfiprintf_r+0xc0>
 800f1c4:	465b      	mov	r3, fp
 800f1c6:	4622      	mov	r2, r4
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f7ff ff93 	bl	800f0f6 <__sfputs_r>
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	f000 80aa 	beq.w	800f32a <_vfiprintf_r+0x20e>
 800f1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d8:	445a      	add	r2, fp
 800f1da:	9209      	str	r2, [sp, #36]	; 0x24
 800f1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 80a2 	beq.w	800f32a <_vfiprintf_r+0x20e>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1f0:	f10a 0a01 	add.w	sl, sl, #1
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	9307      	str	r3, [sp, #28]
 800f1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f1fe:	4654      	mov	r4, sl
 800f200:	2205      	movs	r2, #5
 800f202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f206:	4858      	ldr	r0, [pc, #352]	; (800f368 <_vfiprintf_r+0x24c>)
 800f208:	f7f1 fcba 	bl	8000b80 <memchr>
 800f20c:	9a04      	ldr	r2, [sp, #16]
 800f20e:	b9d8      	cbnz	r0, 800f248 <_vfiprintf_r+0x12c>
 800f210:	06d1      	lsls	r1, r2, #27
 800f212:	bf44      	itt	mi
 800f214:	2320      	movmi	r3, #32
 800f216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f21a:	0713      	lsls	r3, r2, #28
 800f21c:	bf44      	itt	mi
 800f21e:	232b      	movmi	r3, #43	; 0x2b
 800f220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f224:	f89a 3000 	ldrb.w	r3, [sl]
 800f228:	2b2a      	cmp	r3, #42	; 0x2a
 800f22a:	d015      	beq.n	800f258 <_vfiprintf_r+0x13c>
 800f22c:	9a07      	ldr	r2, [sp, #28]
 800f22e:	4654      	mov	r4, sl
 800f230:	2000      	movs	r0, #0
 800f232:	f04f 0c0a 	mov.w	ip, #10
 800f236:	4621      	mov	r1, r4
 800f238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f23c:	3b30      	subs	r3, #48	; 0x30
 800f23e:	2b09      	cmp	r3, #9
 800f240:	d94e      	bls.n	800f2e0 <_vfiprintf_r+0x1c4>
 800f242:	b1b0      	cbz	r0, 800f272 <_vfiprintf_r+0x156>
 800f244:	9207      	str	r2, [sp, #28]
 800f246:	e014      	b.n	800f272 <_vfiprintf_r+0x156>
 800f248:	eba0 0308 	sub.w	r3, r0, r8
 800f24c:	fa09 f303 	lsl.w	r3, r9, r3
 800f250:	4313      	orrs	r3, r2
 800f252:	9304      	str	r3, [sp, #16]
 800f254:	46a2      	mov	sl, r4
 800f256:	e7d2      	b.n	800f1fe <_vfiprintf_r+0xe2>
 800f258:	9b03      	ldr	r3, [sp, #12]
 800f25a:	1d19      	adds	r1, r3, #4
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	9103      	str	r1, [sp, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	bfbb      	ittet	lt
 800f264:	425b      	neglt	r3, r3
 800f266:	f042 0202 	orrlt.w	r2, r2, #2
 800f26a:	9307      	strge	r3, [sp, #28]
 800f26c:	9307      	strlt	r3, [sp, #28]
 800f26e:	bfb8      	it	lt
 800f270:	9204      	strlt	r2, [sp, #16]
 800f272:	7823      	ldrb	r3, [r4, #0]
 800f274:	2b2e      	cmp	r3, #46	; 0x2e
 800f276:	d10c      	bne.n	800f292 <_vfiprintf_r+0x176>
 800f278:	7863      	ldrb	r3, [r4, #1]
 800f27a:	2b2a      	cmp	r3, #42	; 0x2a
 800f27c:	d135      	bne.n	800f2ea <_vfiprintf_r+0x1ce>
 800f27e:	9b03      	ldr	r3, [sp, #12]
 800f280:	1d1a      	adds	r2, r3, #4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	9203      	str	r2, [sp, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	bfb8      	it	lt
 800f28a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f28e:	3402      	adds	r4, #2
 800f290:	9305      	str	r3, [sp, #20]
 800f292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f378 <_vfiprintf_r+0x25c>
 800f296:	7821      	ldrb	r1, [r4, #0]
 800f298:	2203      	movs	r2, #3
 800f29a:	4650      	mov	r0, sl
 800f29c:	f7f1 fc70 	bl	8000b80 <memchr>
 800f2a0:	b140      	cbz	r0, 800f2b4 <_vfiprintf_r+0x198>
 800f2a2:	2340      	movs	r3, #64	; 0x40
 800f2a4:	eba0 000a 	sub.w	r0, r0, sl
 800f2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ac:	9b04      	ldr	r3, [sp, #16]
 800f2ae:	4303      	orrs	r3, r0
 800f2b0:	3401      	adds	r4, #1
 800f2b2:	9304      	str	r3, [sp, #16]
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	482c      	ldr	r0, [pc, #176]	; (800f36c <_vfiprintf_r+0x250>)
 800f2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2be:	2206      	movs	r2, #6
 800f2c0:	f7f1 fc5e 	bl	8000b80 <memchr>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d03f      	beq.n	800f348 <_vfiprintf_r+0x22c>
 800f2c8:	4b29      	ldr	r3, [pc, #164]	; (800f370 <_vfiprintf_r+0x254>)
 800f2ca:	bb1b      	cbnz	r3, 800f314 <_vfiprintf_r+0x1f8>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	3307      	adds	r3, #7
 800f2d0:	f023 0307 	bic.w	r3, r3, #7
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	9303      	str	r3, [sp, #12]
 800f2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2da:	443b      	add	r3, r7
 800f2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2de:	e767      	b.n	800f1b0 <_vfiprintf_r+0x94>
 800f2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	e7a5      	b.n	800f236 <_vfiprintf_r+0x11a>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	3401      	adds	r4, #1
 800f2ee:	9305      	str	r3, [sp, #20]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f04f 0c0a 	mov.w	ip, #10
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2fc:	3a30      	subs	r2, #48	; 0x30
 800f2fe:	2a09      	cmp	r2, #9
 800f300:	d903      	bls.n	800f30a <_vfiprintf_r+0x1ee>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0c5      	beq.n	800f292 <_vfiprintf_r+0x176>
 800f306:	9105      	str	r1, [sp, #20]
 800f308:	e7c3      	b.n	800f292 <_vfiprintf_r+0x176>
 800f30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f30e:	4604      	mov	r4, r0
 800f310:	2301      	movs	r3, #1
 800f312:	e7f0      	b.n	800f2f6 <_vfiprintf_r+0x1da>
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462a      	mov	r2, r5
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <_vfiprintf_r+0x258>)
 800f31c:	a904      	add	r1, sp, #16
 800f31e:	4630      	mov	r0, r6
 800f320:	f7fd fd32 	bl	800cd88 <_printf_float>
 800f324:	4607      	mov	r7, r0
 800f326:	1c78      	adds	r0, r7, #1
 800f328:	d1d6      	bne.n	800f2d8 <_vfiprintf_r+0x1bc>
 800f32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f32c:	07d9      	lsls	r1, r3, #31
 800f32e:	d405      	bmi.n	800f33c <_vfiprintf_r+0x220>
 800f330:	89ab      	ldrh	r3, [r5, #12]
 800f332:	059a      	lsls	r2, r3, #22
 800f334:	d402      	bmi.n	800f33c <_vfiprintf_r+0x220>
 800f336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f338:	f7ff f9de 	bl	800e6f8 <__retarget_lock_release_recursive>
 800f33c:	89ab      	ldrh	r3, [r5, #12]
 800f33e:	065b      	lsls	r3, r3, #25
 800f340:	f53f af12 	bmi.w	800f168 <_vfiprintf_r+0x4c>
 800f344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f346:	e711      	b.n	800f16c <_vfiprintf_r+0x50>
 800f348:	ab03      	add	r3, sp, #12
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	462a      	mov	r2, r5
 800f34e:	4b09      	ldr	r3, [pc, #36]	; (800f374 <_vfiprintf_r+0x258>)
 800f350:	a904      	add	r1, sp, #16
 800f352:	4630      	mov	r0, r6
 800f354:	f7fd ffa4 	bl	800d2a0 <_printf_i>
 800f358:	e7e4      	b.n	800f324 <_vfiprintf_r+0x208>
 800f35a:	bf00      	nop
 800f35c:	0800fcac 	.word	0x0800fcac
 800f360:	0800fccc 	.word	0x0800fccc
 800f364:	0800fc8c 	.word	0x0800fc8c
 800f368:	0800fe44 	.word	0x0800fe44
 800f36c:	0800fe4e 	.word	0x0800fe4e
 800f370:	0800cd89 	.word	0x0800cd89
 800f374:	0800f0f7 	.word	0x0800f0f7
 800f378:	0800fe4a 	.word	0x0800fe4a

0800f37c <_sbrk_r>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4d06      	ldr	r5, [pc, #24]	; (800f398 <_sbrk_r+0x1c>)
 800f380:	2300      	movs	r3, #0
 800f382:	4604      	mov	r4, r0
 800f384:	4608      	mov	r0, r1
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	f7f3 f9a0 	bl	80026cc <_sbrk>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d102      	bne.n	800f396 <_sbrk_r+0x1a>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b103      	cbz	r3, 800f396 <_sbrk_r+0x1a>
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	200006b8 	.word	0x200006b8

0800f39c <__sread>:
 800f39c:	b510      	push	{r4, lr}
 800f39e:	460c      	mov	r4, r1
 800f3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a4:	f000 f8e2 	bl	800f56c <_read_r>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	bfab      	itete	ge
 800f3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f3b0:	181b      	addge	r3, r3, r0
 800f3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3b6:	bfac      	ite	ge
 800f3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3ba:	81a3      	strhlt	r3, [r4, #12]
 800f3bc:	bd10      	pop	{r4, pc}

0800f3be <__swrite>:
 800f3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c2:	461f      	mov	r7, r3
 800f3c4:	898b      	ldrh	r3, [r1, #12]
 800f3c6:	05db      	lsls	r3, r3, #23
 800f3c8:	4605      	mov	r5, r0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	4616      	mov	r6, r2
 800f3ce:	d505      	bpl.n	800f3dc <__swrite+0x1e>
 800f3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f000 f898 	bl	800f50c <_lseek_r>
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3e6:	81a3      	strh	r3, [r4, #12]
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f2:	f000 b817 	b.w	800f424 <_write_r>

0800f3f6 <__sseek>:
 800f3f6:	b510      	push	{r4, lr}
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3fe:	f000 f885 	bl	800f50c <_lseek_r>
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	bf15      	itete	ne
 800f408:	6560      	strne	r0, [r4, #84]	; 0x54
 800f40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f412:	81a3      	strheq	r3, [r4, #12]
 800f414:	bf18      	it	ne
 800f416:	81a3      	strhne	r3, [r4, #12]
 800f418:	bd10      	pop	{r4, pc}

0800f41a <__sclose>:
 800f41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41e:	f000 b831 	b.w	800f484 <_close_r>
	...

0800f424 <_write_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d07      	ldr	r5, [pc, #28]	; (800f444 <_write_r+0x20>)
 800f428:	4604      	mov	r4, r0
 800f42a:	4608      	mov	r0, r1
 800f42c:	4611      	mov	r1, r2
 800f42e:	2200      	movs	r2, #0
 800f430:	602a      	str	r2, [r5, #0]
 800f432:	461a      	mov	r2, r3
 800f434:	f7f3 f8f9 	bl	800262a <_write>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_write_r+0x1e>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_write_r+0x1e>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	200006b8 	.word	0x200006b8

0800f448 <__assert_func>:
 800f448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f44a:	4614      	mov	r4, r2
 800f44c:	461a      	mov	r2, r3
 800f44e:	4b09      	ldr	r3, [pc, #36]	; (800f474 <__assert_func+0x2c>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4605      	mov	r5, r0
 800f454:	68d8      	ldr	r0, [r3, #12]
 800f456:	b14c      	cbz	r4, 800f46c <__assert_func+0x24>
 800f458:	4b07      	ldr	r3, [pc, #28]	; (800f478 <__assert_func+0x30>)
 800f45a:	9100      	str	r1, [sp, #0]
 800f45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f460:	4906      	ldr	r1, [pc, #24]	; (800f47c <__assert_func+0x34>)
 800f462:	462b      	mov	r3, r5
 800f464:	f000 f81e 	bl	800f4a4 <fiprintf>
 800f468:	f000 f89f 	bl	800f5aa <abort>
 800f46c:	4b04      	ldr	r3, [pc, #16]	; (800f480 <__assert_func+0x38>)
 800f46e:	461c      	mov	r4, r3
 800f470:	e7f3      	b.n	800f45a <__assert_func+0x12>
 800f472:	bf00      	nop
 800f474:	2000003c 	.word	0x2000003c
 800f478:	0800fe55 	.word	0x0800fe55
 800f47c:	0800fe62 	.word	0x0800fe62
 800f480:	0800fe90 	.word	0x0800fe90

0800f484 <_close_r>:
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	4d06      	ldr	r5, [pc, #24]	; (800f4a0 <_close_r+0x1c>)
 800f488:	2300      	movs	r3, #0
 800f48a:	4604      	mov	r4, r0
 800f48c:	4608      	mov	r0, r1
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	f7f3 f8e7 	bl	8002662 <_close>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_close_r+0x1a>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_close_r+0x1a>
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	200006b8 	.word	0x200006b8

0800f4a4 <fiprintf>:
 800f4a4:	b40e      	push	{r1, r2, r3}
 800f4a6:	b503      	push	{r0, r1, lr}
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	ab03      	add	r3, sp, #12
 800f4ac:	4805      	ldr	r0, [pc, #20]	; (800f4c4 <fiprintf+0x20>)
 800f4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b2:	6800      	ldr	r0, [r0, #0]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	f7ff fe31 	bl	800f11c <_vfiprintf_r>
 800f4ba:	b002      	add	sp, #8
 800f4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4c0:	b003      	add	sp, #12
 800f4c2:	4770      	bx	lr
 800f4c4:	2000003c 	.word	0x2000003c

0800f4c8 <_fstat_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4d07      	ldr	r5, [pc, #28]	; (800f4e8 <_fstat_r+0x20>)
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	4608      	mov	r0, r1
 800f4d2:	4611      	mov	r1, r2
 800f4d4:	602b      	str	r3, [r5, #0]
 800f4d6:	f7f3 f8d0 	bl	800267a <_fstat>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	d102      	bne.n	800f4e4 <_fstat_r+0x1c>
 800f4de:	682b      	ldr	r3, [r5, #0]
 800f4e0:	b103      	cbz	r3, 800f4e4 <_fstat_r+0x1c>
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	bd38      	pop	{r3, r4, r5, pc}
 800f4e6:	bf00      	nop
 800f4e8:	200006b8 	.word	0x200006b8

0800f4ec <_isatty_r>:
 800f4ec:	b538      	push	{r3, r4, r5, lr}
 800f4ee:	4d06      	ldr	r5, [pc, #24]	; (800f508 <_isatty_r+0x1c>)
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	4608      	mov	r0, r1
 800f4f6:	602b      	str	r3, [r5, #0]
 800f4f8:	f7f3 f8cf 	bl	800269a <_isatty>
 800f4fc:	1c43      	adds	r3, r0, #1
 800f4fe:	d102      	bne.n	800f506 <_isatty_r+0x1a>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	b103      	cbz	r3, 800f506 <_isatty_r+0x1a>
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	bd38      	pop	{r3, r4, r5, pc}
 800f508:	200006b8 	.word	0x200006b8

0800f50c <_lseek_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	4d07      	ldr	r5, [pc, #28]	; (800f52c <_lseek_r+0x20>)
 800f510:	4604      	mov	r4, r0
 800f512:	4608      	mov	r0, r1
 800f514:	4611      	mov	r1, r2
 800f516:	2200      	movs	r2, #0
 800f518:	602a      	str	r2, [r5, #0]
 800f51a:	461a      	mov	r2, r3
 800f51c:	f7f3 f8c8 	bl	80026b0 <_lseek>
 800f520:	1c43      	adds	r3, r0, #1
 800f522:	d102      	bne.n	800f52a <_lseek_r+0x1e>
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	b103      	cbz	r3, 800f52a <_lseek_r+0x1e>
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	200006b8 	.word	0x200006b8

0800f530 <__ascii_mbtowc>:
 800f530:	b082      	sub	sp, #8
 800f532:	b901      	cbnz	r1, 800f536 <__ascii_mbtowc+0x6>
 800f534:	a901      	add	r1, sp, #4
 800f536:	b142      	cbz	r2, 800f54a <__ascii_mbtowc+0x1a>
 800f538:	b14b      	cbz	r3, 800f54e <__ascii_mbtowc+0x1e>
 800f53a:	7813      	ldrb	r3, [r2, #0]
 800f53c:	600b      	str	r3, [r1, #0]
 800f53e:	7812      	ldrb	r2, [r2, #0]
 800f540:	1e10      	subs	r0, r2, #0
 800f542:	bf18      	it	ne
 800f544:	2001      	movne	r0, #1
 800f546:	b002      	add	sp, #8
 800f548:	4770      	bx	lr
 800f54a:	4610      	mov	r0, r2
 800f54c:	e7fb      	b.n	800f546 <__ascii_mbtowc+0x16>
 800f54e:	f06f 0001 	mvn.w	r0, #1
 800f552:	e7f8      	b.n	800f546 <__ascii_mbtowc+0x16>

0800f554 <__malloc_lock>:
 800f554:	4801      	ldr	r0, [pc, #4]	; (800f55c <__malloc_lock+0x8>)
 800f556:	f7ff b8ce 	b.w	800e6f6 <__retarget_lock_acquire_recursive>
 800f55a:	bf00      	nop
 800f55c:	200006ac 	.word	0x200006ac

0800f560 <__malloc_unlock>:
 800f560:	4801      	ldr	r0, [pc, #4]	; (800f568 <__malloc_unlock+0x8>)
 800f562:	f7ff b8c9 	b.w	800e6f8 <__retarget_lock_release_recursive>
 800f566:	bf00      	nop
 800f568:	200006ac 	.word	0x200006ac

0800f56c <_read_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	; (800f58c <_read_r+0x20>)
 800f570:	4604      	mov	r4, r0
 800f572:	4608      	mov	r0, r1
 800f574:	4611      	mov	r1, r2
 800f576:	2200      	movs	r2, #0
 800f578:	602a      	str	r2, [r5, #0]
 800f57a:	461a      	mov	r2, r3
 800f57c:	f7f3 f838 	bl	80025f0 <_read>
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	d102      	bne.n	800f58a <_read_r+0x1e>
 800f584:	682b      	ldr	r3, [r5, #0]
 800f586:	b103      	cbz	r3, 800f58a <_read_r+0x1e>
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	bd38      	pop	{r3, r4, r5, pc}
 800f58c:	200006b8 	.word	0x200006b8

0800f590 <__ascii_wctomb>:
 800f590:	b149      	cbz	r1, 800f5a6 <__ascii_wctomb+0x16>
 800f592:	2aff      	cmp	r2, #255	; 0xff
 800f594:	bf85      	ittet	hi
 800f596:	238a      	movhi	r3, #138	; 0x8a
 800f598:	6003      	strhi	r3, [r0, #0]
 800f59a:	700a      	strbls	r2, [r1, #0]
 800f59c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5a0:	bf98      	it	ls
 800f5a2:	2001      	movls	r0, #1
 800f5a4:	4770      	bx	lr
 800f5a6:	4608      	mov	r0, r1
 800f5a8:	4770      	bx	lr

0800f5aa <abort>:
 800f5aa:	b508      	push	{r3, lr}
 800f5ac:	2006      	movs	r0, #6
 800f5ae:	f000 f82b 	bl	800f608 <raise>
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	f7f3 f812 	bl	80025dc <_exit>

0800f5b8 <_raise_r>:
 800f5b8:	291f      	cmp	r1, #31
 800f5ba:	b538      	push	{r3, r4, r5, lr}
 800f5bc:	4604      	mov	r4, r0
 800f5be:	460d      	mov	r5, r1
 800f5c0:	d904      	bls.n	800f5cc <_raise_r+0x14>
 800f5c2:	2316      	movs	r3, #22
 800f5c4:	6003      	str	r3, [r0, #0]
 800f5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ca:	bd38      	pop	{r3, r4, r5, pc}
 800f5cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5ce:	b112      	cbz	r2, 800f5d6 <_raise_r+0x1e>
 800f5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5d4:	b94b      	cbnz	r3, 800f5ea <_raise_r+0x32>
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f000 f830 	bl	800f63c <_getpid_r>
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4601      	mov	r1, r0
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5e6:	f000 b817 	b.w	800f618 <_kill_r>
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d00a      	beq.n	800f604 <_raise_r+0x4c>
 800f5ee:	1c59      	adds	r1, r3, #1
 800f5f0:	d103      	bne.n	800f5fa <_raise_r+0x42>
 800f5f2:	2316      	movs	r3, #22
 800f5f4:	6003      	str	r3, [r0, #0]
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	e7e7      	b.n	800f5ca <_raise_r+0x12>
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f600:	4628      	mov	r0, r5
 800f602:	4798      	blx	r3
 800f604:	2000      	movs	r0, #0
 800f606:	e7e0      	b.n	800f5ca <_raise_r+0x12>

0800f608 <raise>:
 800f608:	4b02      	ldr	r3, [pc, #8]	; (800f614 <raise+0xc>)
 800f60a:	4601      	mov	r1, r0
 800f60c:	6818      	ldr	r0, [r3, #0]
 800f60e:	f7ff bfd3 	b.w	800f5b8 <_raise_r>
 800f612:	bf00      	nop
 800f614:	2000003c 	.word	0x2000003c

0800f618 <_kill_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	4d07      	ldr	r5, [pc, #28]	; (800f638 <_kill_r+0x20>)
 800f61c:	2300      	movs	r3, #0
 800f61e:	4604      	mov	r4, r0
 800f620:	4608      	mov	r0, r1
 800f622:	4611      	mov	r1, r2
 800f624:	602b      	str	r3, [r5, #0]
 800f626:	f7f2 ffc9 	bl	80025bc <_kill>
 800f62a:	1c43      	adds	r3, r0, #1
 800f62c:	d102      	bne.n	800f634 <_kill_r+0x1c>
 800f62e:	682b      	ldr	r3, [r5, #0]
 800f630:	b103      	cbz	r3, 800f634 <_kill_r+0x1c>
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	bd38      	pop	{r3, r4, r5, pc}
 800f636:	bf00      	nop
 800f638:	200006b8 	.word	0x200006b8

0800f63c <_getpid_r>:
 800f63c:	f7f2 bfb6 	b.w	80025ac <_getpid>

0800f640 <_init>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	bf00      	nop
 800f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f646:	bc08      	pop	{r3}
 800f648:	469e      	mov	lr, r3
 800f64a:	4770      	bx	lr

0800f64c <_fini>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	bf00      	nop
 800f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f652:	bc08      	pop	{r3}
 800f654:	469e      	mov	lr, r3
 800f656:	4770      	bx	lr

0800f658 <__start_pop_veneer>:
 800f658:	f85f f000 	ldr.w	pc, [pc]	; 800f65c <__start_pop_veneer+0x4>
 800f65c:	000000bd 	.word	0x000000bd

0800f660 <__set_frequency_hz_veneer>:
 800f660:	f85f f000 	ldr.w	pc, [pc]	; 800f664 <__set_frequency_hz_veneer+0x4>
 800f664:	000006dd 	.word	0x000006dd

0800f668 <__timer_delay_veneer>:
 800f668:	f85f f000 	ldr.w	pc, [pc]	; 800f66c <__timer_delay_veneer+0x4>
 800f66c:	00000061 	.word	0x00000061

0800f670 <__stop_pop_veneer>:
 800f670:	f85f f000 	ldr.w	pc, [pc]	; 800f674 <__stop_pop_veneer+0x4>
 800f674:	0000016d 	.word	0x0000016d

0800f678 <__init_synthesiser_veneer>:
 800f678:	f85f f000 	ldr.w	pc, [pc]	; 800f67c <__init_synthesiser_veneer+0x4>
 800f67c:	000003a3 	.word	0x000003a3

0800f680 <__set_aom_atten_veneer>:
 800f680:	f85f f000 	ldr.w	pc, [pc]	; 800f684 <__set_aom_atten_veneer+0x4>
 800f684:	000001e1 	.word	0x000001e1
