
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001120  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019b80  080013c0  080013c0  000213c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402e8  2**0
                  CONTENTS
  4 .rodata       00003670  0801af40  0801af40  0003af40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801e5b0  0801e5b0  0003e5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801e5b8  0801e5b8  0003e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e5bc  0801e5bc  0003e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801e5c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000228  0801e7e8  00040228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000288  0801e848  00040288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007fb8  200002e8  0801e8a8  000402e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082a0  0801e8a8  000482a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040316  2**0
                  CONTENTS, READONLY
 15 .debug_info   00038926  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007429  00000000  00000000  00078c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002978  00000000  00000000  000800a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000020f9  00000000  00000000  00082a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011b6d  00000000  00000000  00084b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000404f2  00000000  00000000  00096686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a91de  00000000  00000000  000d6b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bef8  00000000  00000000  0027fd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  0028bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 f875 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 f86f 	bl	1118 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 f855 	bl	1118 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 f84f 	bl	1118 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 f849 	bl	1118 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 f828 	bl	10e0 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 f82b 	bl	1118 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 f805 	bl	10e8 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f000 fff3 	bl	10c8 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801b190 	.word	0x0801b190

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f000 ffd8 	bl	10e8 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f000 ffc6 	bl	10c8 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f000 ffb1 	bl	10d0 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801b1a8 	.word	0x0801b1a8
     17c:	0801b1dc 	.word	0x0801b1dc

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4856      	ldr	r0, [pc, #344]	; (2e8 <_Min_Heap_Size+0xe8>)
     190:	f000 ffc2 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4854      	ldr	r0, [pc, #336]	; (2ec <_Min_Heap_Size+0xec>)
     19a:	f000 ffbd 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4852      	ldr	r0, [pc, #328]	; (2f0 <_Min_Heap_Size+0xf0>)
     1a6:	f000 ffb7 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	484f      	ldr	r0, [pc, #316]	; (2f0 <_Min_Heap_Size+0xf0>)
     1b2:	f000 ffb1 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484c      	ldr	r0, [pc, #304]	; (2f0 <_Min_Heap_Size+0xf0>)
     1be:	f000 ffab 	bl	1118 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f000 ffa4 	bl	1110 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4846      	ldr	r0, [pc, #280]	; (2f4 <_Min_Heap_Size+0xf4>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a43      	ldr	r2, [pc, #268]	; (2f8 <_Min_Heap_Size+0xf8>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	483e      	ldr	r0, [pc, #248]	; (2f0 <_Min_Heap_Size+0xf0>)
     1f8:	f000 ff8e 	bl	1118 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	483f      	ldr	r0, [pc, #252]	; (2fc <_Min_Heap_Size+0xfc>)
     1fe:	f000 ff73 	bl	10e8 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e065      	b.n	2d2 <_Min_Heap_Size+0xd2>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	483e      	ldr	r0, [pc, #248]	; (300 <_Min_Heap_Size+0x100>)
     208:	f000 ff6e 	bl	10e8 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f000 ff4b 	bl	1110 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4820      	ldr	r0, [pc, #128]	; (304 <_Min_Heap_Size+0x104>)
     282:	f000 ff31 	bl	10e8 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     286:	f000 ff1f 	bl	10c8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 2e0 <_Min_Heap_Size+0xe0>
     2b6:	eeb0 0b47 	vmov.f64	d0, d7
     2ba:	f000 f83c 	bl	336 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2be:	a308      	add	r3, pc, #32	; (adr r3, 2e0 <_Min_Heap_Size+0xe0>)
     2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c4:	4810      	ldr	r0, [pc, #64]	; (308 <_Min_Heap_Size+0x108>)
     2c6:	f000 ff03 	bl	10d0 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2ca:	4b10      	ldr	r3, [pc, #64]	; (30c <_Min_Heap_Size+0x10c>)
     2cc:	2201      	movs	r2, #1
     2ce:	701a      	strb	r2, [r3, #0]
	return SUCCESS;
     2d0:	2300      	movs	r3, #0
}
     2d2:	4618      	mov	r0, r3
     2d4:	3710      	adds	r7, #16
     2d6:	46bd      	mov	sp, r7
     2d8:	bd80      	pop	{r7, pc}
     2da:	bf00      	nop
     2dc:	f3af 8000 	nop.w
     2e0:	6d600000 	.word	0x6d600000
     2e4:	41e69e35 	.word	0x41e69e35
     2e8:	58021000 	.word	0x58021000
     2ec:	58021800 	.word	0x58021800
     2f0:	58020800 	.word	0x58020800
     2f4:	0041bfff 	.word	0x0041bfff
     2f8:	00c7701a 	.word	0x00c7701a
     2fc:	0801b1f4 	.word	0x0801b1f4
     300:	0801b210 	.word	0x0801b210
     304:	0801b1a8 	.word	0x0801b1a8
     308:	0801b224 	.word	0x0801b224
     30c:	200005c8 	.word	0x200005c8

00000310 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     310:	b580      	push	{r7, lr}
     312:	b082      	sub	sp, #8
     314:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     316:	2012      	movs	r0, #18
     318:	f7ff feec 	bl	f4 <synth_readreg>
     31c:	4603      	mov	r3, r0
     31e:	f003 0302 	and.w	r3, r3, #2
     322:	2b00      	cmp	r3, #0
     324:	bf14      	ite	ne
     326:	2301      	movne	r3, #1
     328:	2300      	moveq	r3, #0
     32a:	71fb      	strb	r3, [r7, #7]
	return locked;
     32c:	79fb      	ldrb	r3, [r7, #7]

}
     32e:	4618      	mov	r0, r3
     330:	3708      	adds	r7, #8
     332:	46bd      	mov	sp, r7
     334:	bd80      	pop	{r7, pc}

00000336 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     336:	b580      	push	{r7, lr}
     338:	b088      	sub	sp, #32
     33a:	af00      	add	r7, sp, #0
     33c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     340:	2301      	movs	r3, #1
     342:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     344:	69fb      	ldr	r3, [r7, #28]
     346:	ee07 3a90 	vmov	s15, r3
     34a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     34e:	ed97 7b00 	vldr	d7, [r7]
     352:	ee26 6b07 	vmul.f64	d6, d6, d7
     356:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 400 <_Min_Stack_Size>
     35a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     35e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     362:	ed97 7b04 	vldr	d7, [r7, #16]
     366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     36a:	ee17 3a90 	vmov	r3, s15
     36e:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     370:	68fb      	ldr	r3, [r7, #12]
     372:	ee07 3a90 	vmov	s15, r3
     376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     37a:	ed97 6b04 	vldr	d6, [r7, #16]
     37e:	ee36 7b47 	vsub.f64	d7, d6, d7
     382:	ed9f 6b21 	vldr	d6, [pc, #132]	; 408 <_Min_Stack_Size+0x8>
     386:	ee27 7b06 	vmul.f64	d7, d7, d6
     38a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     38e:	ee37 7b06 	vadd.f64	d7, d7, d6
     392:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     396:	ee17 3a90 	vmov	r3, s15
     39a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     39c:	2201      	movs	r2, #1
     39e:	2102      	movs	r1, #2
     3a0:	481b      	ldr	r0, [pc, #108]	; (410 <_Min_Stack_Size+0x10>)
     3a2:	f000 feb9 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3a6:	69fa      	ldr	r2, [r7, #28]
     3a8:	68b9      	ldr	r1, [r7, #8]
     3aa:	68f8      	ldr	r0, [r7, #12]
     3ac:	f000 f838 	bl	420 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3b0:	4b18      	ldr	r3, [pc, #96]	; (414 <_Min_Stack_Size+0x14>)
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	f241 3288 	movw	r2, #5000	; 0x1388
     3b8:	4611      	mov	r1, r2
     3ba:	4618      	mov	r0, r3
     3bc:	f000 fe06 	bl	fcc <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3c0:	f7ff ffa6 	bl	310 <lock_status>
     3c4:	4603      	mov	r3, r0
     3c6:	f083 0301 	eor.w	r3, r3, #1
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2b00      	cmp	r3, #0
     3ce:	d011      	beq.n	3f4 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3d0:	2200      	movs	r2, #0
     3d2:	2102      	movs	r1, #2
     3d4:	4810      	ldr	r0, [pc, #64]	; (418 <_Min_Stack_Size+0x18>)
     3d6:	f000 fe9f 	bl	1118 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3da:	f241 3388 	movw	r3, #5000	; 0x1388
     3de:	4619      	mov	r1, r3
     3e0:	480e      	ldr	r0, [pc, #56]	; (41c <_Min_Stack_Size+0x1c>)
     3e2:	f000 fe75 	bl	10d0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3e6:	f000 fe6f 	bl	10c8 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3ea:	2200      	movs	r2, #0
     3ec:	2102      	movs	r1, #2
     3ee:	4808      	ldr	r0, [pc, #32]	; (410 <_Min_Stack_Size+0x10>)
     3f0:	f000 fe92 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	}

}
     3f4:	bf00      	nop
     3f6:	3720      	adds	r7, #32
     3f8:	46bd      	mov	sp, r7
     3fa:	bd80      	pop	{r7, pc}
     3fc:	f3af 8000 	nop.w
     400:	00000000 	.word	0x00000000
     404:	4187d784 	.word	0x4187d784
     408:	00000000 	.word	0x00000000
     40c:	41700000 	.word	0x41700000
     410:	58020400 	.word	0x58020400
     414:	2000001c 	.word	0x2000001c
     418:	58021000 	.word	0x58021000
     41c:	0801b24c 	.word	0x0801b24c

00000420 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     420:	b580      	push	{r7, lr}
     422:	b086      	sub	sp, #24
     424:	af00      	add	r7, sp, #0
     426:	60f8      	str	r0, [r7, #12]
     428:	60b9      	str	r1, [r7, #8]
     42a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     42c:	2300      	movs	r3, #0
     42e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     430:	4b24      	ldr	r3, [pc, #144]	; (4c4 <set_freq_regs+0xa4>)
     432:	681b      	ldr	r3, [r3, #0]
     434:	f1b3 3fff 	cmp.w	r3, #4294967295
     438:	d004      	beq.n	444 <set_freq_regs+0x24>
     43a:	4b22      	ldr	r3, [pc, #136]	; (4c4 <set_freq_regs+0xa4>)
     43c:	681b      	ldr	r3, [r3, #0]
     43e:	687a      	ldr	r2, [r7, #4]
     440:	429a      	cmp	r2, r3
     442:	d014      	beq.n	46e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     444:	2016      	movs	r0, #22
     446:	f7ff fe55 	bl	f4 <synth_readreg>
     44a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     44c:	697b      	ldr	r3, [r7, #20]
     44e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     452:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     454:	697a      	ldr	r2, [r7, #20]
     456:	687b      	ldr	r3, [r7, #4]
     458:	4313      	orrs	r3, r2
     45a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     45c:	2301      	movs	r3, #1
     45e:	2200      	movs	r2, #0
     460:	2116      	movs	r1, #22
     462:	6978      	ldr	r0, [r7, #20]
     464:	f7ff fdcc 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     468:	4a16      	ldr	r2, [pc, #88]	; (4c4 <set_freq_regs+0xa4>)
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     46e:	4b16      	ldr	r3, [pc, #88]	; (4c8 <set_freq_regs+0xa8>)
     470:	681b      	ldr	r3, [r3, #0]
     472:	f1b3 3fff 	cmp.w	r3, #4294967295
     476:	d004      	beq.n	482 <set_freq_regs+0x62>
     478:	4b13      	ldr	r3, [pc, #76]	; (4c8 <set_freq_regs+0xa8>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	68fa      	ldr	r2, [r7, #12]
     47e:	429a      	cmp	r2, r3
     480:	d008      	beq.n	494 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     482:	2301      	movs	r3, #1
     484:	2200      	movs	r2, #0
     486:	2103      	movs	r1, #3
     488:	68f8      	ldr	r0, [r7, #12]
     48a:	f7ff fdb9 	bl	0 <synth_writereg>
		last_integer = integer;
     48e:	4a0e      	ldr	r2, [pc, #56]	; (4c8 <set_freq_regs+0xa8>)
     490:	68fb      	ldr	r3, [r7, #12]
     492:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     494:	4b0d      	ldr	r3, [pc, #52]	; (4cc <set_freq_regs+0xac>)
     496:	681b      	ldr	r3, [r3, #0]
     498:	f1b3 3fff 	cmp.w	r3, #4294967295
     49c:	d004      	beq.n	4a8 <set_freq_regs+0x88>
     49e:	4b0b      	ldr	r3, [pc, #44]	; (4cc <set_freq_regs+0xac>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	68ba      	ldr	r2, [r7, #8]
     4a4:	429a      	cmp	r2, r3
     4a6:	d008      	beq.n	4ba <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4a8:	2301      	movs	r3, #1
     4aa:	2200      	movs	r2, #0
     4ac:	2104      	movs	r1, #4
     4ae:	68b8      	ldr	r0, [r7, #8]
     4b0:	f7ff fda6 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4b4:	4a05      	ldr	r2, [pc, #20]	; (4cc <set_freq_regs+0xac>)
     4b6:	68bb      	ldr	r3, [r7, #8]
     4b8:	6013      	str	r3, [r2, #0]
}
     4ba:	bf00      	nop
     4bc:	3718      	adds	r7, #24
     4be:	46bd      	mov	sp, r7
     4c0:	bd80      	pop	{r7, pc}
     4c2:	bf00      	nop
     4c4:	20000004 	.word	0x20000004
     4c8:	20000008 	.word	0x20000008
     4cc:	2000000c 	.word	0x2000000c

000004d0 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d0:	b580      	push	{r7, lr}
     4d2:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
  	printf("state: %u \r\n", mw_sweep_settings.state);
     4d4:	4b1b      	ldr	r3, [pc, #108]	; (544 <print_mw_sweep_settings+0x74>)
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	4619      	mov	r1, r3
     4da:	481b      	ldr	r0, [pc, #108]	; (548 <print_mw_sweep_settings+0x78>)
     4dc:	f000 fdf8 	bl	10d0 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e0:	4b18      	ldr	r3, [pc, #96]	; (544 <print_mw_sweep_settings+0x74>)
     4e2:	785b      	ldrb	r3, [r3, #1]
     4e4:	4619      	mov	r1, r3
     4e6:	4819      	ldr	r0, [pc, #100]	; (54c <print_mw_sweep_settings+0x7c>)
     4e8:	f000 fdf2 	bl	10d0 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4ec:	4b15      	ldr	r3, [pc, #84]	; (544 <print_mw_sweep_settings+0x74>)
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	4619      	mov	r1, r3
     4f2:	4817      	ldr	r0, [pc, #92]	; (550 <print_mw_sweep_settings+0x80>)
     4f4:	f000 fdec 	bl	10d0 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     4f8:	4b12      	ldr	r3, [pc, #72]	; (544 <print_mw_sweep_settings+0x74>)
     4fa:	689b      	ldr	r3, [r3, #8]
     4fc:	4619      	mov	r1, r3
     4fe:	4815      	ldr	r0, [pc, #84]	; (554 <print_mw_sweep_settings+0x84>)
     500:	f000 fde6 	bl	10d0 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     504:	4b0f      	ldr	r3, [pc, #60]	; (544 <print_mw_sweep_settings+0x74>)
     506:	68db      	ldr	r3, [r3, #12]
     508:	4619      	mov	r1, r3
     50a:	4813      	ldr	r0, [pc, #76]	; (558 <print_mw_sweep_settings+0x88>)
     50c:	f000 fde0 	bl	10d0 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     510:	4b0c      	ldr	r3, [pc, #48]	; (544 <print_mw_sweep_settings+0x74>)
     512:	691b      	ldr	r3, [r3, #16]
     514:	4619      	mov	r1, r3
     516:	4811      	ldr	r0, [pc, #68]	; (55c <print_mw_sweep_settings+0x8c>)
     518:	f000 fdda 	bl	10d0 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     51c:	4b09      	ldr	r3, [pc, #36]	; (544 <print_mw_sweep_settings+0x74>)
     51e:	695b      	ldr	r3, [r3, #20]
     520:	4619      	mov	r1, r3
     522:	480f      	ldr	r0, [pc, #60]	; (560 <print_mw_sweep_settings+0x90>)
     524:	f000 fdd4 	bl	10d0 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <print_mw_sweep_settings+0x74>)
     52a:	699b      	ldr	r3, [r3, #24]
     52c:	4619      	mov	r1, r3
     52e:	480d      	ldr	r0, [pc, #52]	; (564 <print_mw_sweep_settings+0x94>)
     530:	f000 fdce 	bl	10d0 <__printf_veneer>
  	printf("current_point: %lu us\r\n", mw_sweep_settings.current_point);
     534:	4b03      	ldr	r3, [pc, #12]	; (544 <print_mw_sweep_settings+0x74>)
     536:	69db      	ldr	r3, [r3, #28]
     538:	4619      	mov	r1, r3
     53a:	480b      	ldr	r0, [pc, #44]	; (568 <print_mw_sweep_settings+0x98>)
     53c:	f000 fdc8 	bl	10d0 <__printf_veneer>
}
     540:	bf00      	nop
     542:	bd80      	pop	{r7, pc}
     544:	200005c8 	.word	0x200005c8
     548:	0801b290 	.word	0x0801b290
     54c:	0801b2a0 	.word	0x0801b2a0
     550:	0801b2ac 	.word	0x0801b2ac
     554:	0801b2bc 	.word	0x0801b2bc
     558:	0801b2d0 	.word	0x0801b2d0
     55c:	0801b2e4 	.word	0x0801b2e4
     560:	0801b2f8 	.word	0x0801b2f8
     564:	0801b314 	.word	0x0801b314
     568:	0801b32c 	.word	0x0801b32c

0000056c <calc_defined_step_MW_sweep>:
  * @param  Span in Hz
  * @param  POP cycles per step
  * @param  Number of points
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_step, const uint32_t num_points_req) {
     56c:	b580      	push	{r7, lr}
     56e:	b094      	sub	sp, #80	; 0x50
     570:	af02      	add	r7, sp, #8
     572:	ed87 0b04 	vstr	d0, [r7, #16]
     576:	ed87 1b02 	vstr	d1, [r7, #8]
     57a:	6078      	str	r0, [r7, #4]
     57c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.9g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     57e:	ed97 7b04 	vldr	d7, [r7, #16]
     582:	ed9f 6b81 	vldr	d6, [pc, #516]	; 788 <calc_defined_step_MW_sweep+0x21c>
     586:	ee87 5b06 	vdiv.f64	d5, d7, d6
     58a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     58e:	e9cd 2300 	strd	r2, r3, [sp]
     592:	ec53 2b15 	vmov	r2, r3, d5
     596:	4886      	ldr	r0, [pc, #536]	; (7b0 <calc_defined_step_MW_sweep+0x244>)
     598:	f000 fd9a 	bl	10d0 <__printf_veneer>
	printf("and %ld POP cycles per step\r\n", pop_cycles_per_step);
     59c:	6879      	ldr	r1, [r7, #4]
     59e:	4885      	ldr	r0, [pc, #532]	; (7b4 <calc_defined_step_MW_sweep+0x248>)
     5a0:	f000 fd96 	bl	10d0 <__printf_veneer>

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     5a4:	ed97 7b02 	vldr	d7, [r7, #8]
     5a8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     5ac:	ee27 7b06 	vmul.f64	d7, d7, d6
     5b0:	ed97 6b04 	vldr	d6, [r7, #16]
     5b4:	ee36 7b47 	vsub.f64	d7, d6, d7
     5b8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     5bc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     5c0:	f000 faba 	bl	b38 <calculate_k>
     5c4:	4603      	mov	r3, r0
     5c6:	b2da      	uxtb	r2, r3
     5c8:	4b7b      	ldr	r3, [pc, #492]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     5ca:	705a      	strb	r2, [r3, #1]
//		}
//	}
//	mw_sweep_settings.k = local_k;

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     5cc:	683b      	ldr	r3, [r7, #0]
     5ce:	3b01      	subs	r3, #1
     5d0:	ee07 3a90 	vmov	s15, r3
     5d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     5d8:	ed97 5b02 	vldr	d5, [r7, #8]
     5dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
     5e0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     5e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     5e8:	6839      	ldr	r1, [r7, #0]
     5ea:	4874      	ldr	r0, [pc, #464]	; (7bc <calc_defined_step_MW_sweep+0x250>)
     5ec:	f000 fd70 	bl	10d0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     5f0:	ed9f 5b67 	vldr	d5, [pc, #412]	; 790 <calc_defined_step_MW_sweep+0x224>
     5f4:	4b70      	ldr	r3, [pc, #448]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     5f6:	785b      	ldrb	r3, [r3, #1]
     5f8:	061b      	lsls	r3, r3, #24
     5fa:	ee07 3a90 	vmov	s15, r3
     5fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     602:	ee85 7b06 	vdiv.f64	d7, d5, d6
     606:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     60a:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     60e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     612:	ee85 7b06 	vdiv.f64	d7, d5, d6
     616:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     61a:	ee37 7b06 	vadd.f64	d7, d7, d6
     61e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     622:	ee17 2a90 	vmov	r2, s15
     626:	4b64      	ldr	r3, [pc, #400]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     628:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     62a:	4b63      	ldr	r3, [pc, #396]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     62c:	691b      	ldr	r3, [r3, #16]
     62e:	2b00      	cmp	r3, #0
     630:	d104      	bne.n	63c <calc_defined_step_MW_sweep+0xd0>
		mw_sweep_settings.step_size++;
     632:	4b61      	ldr	r3, [pc, #388]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     634:	691b      	ldr	r3, [r3, #16]
     636:	3301      	adds	r3, #1
     638:	4a5f      	ldr	r2, [pc, #380]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     63a:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     63c:	4b5e      	ldr	r3, [pc, #376]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     63e:	691b      	ldr	r3, [r3, #16]
     640:	ee07 3a90 	vmov	s15, r3
     644:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     648:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     64c:	ee26 7b07 	vmul.f64	d7, d6, d7
     650:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     658:	4859      	ldr	r0, [pc, #356]	; (7c0 <calc_defined_step_MW_sweep+0x254>)
     65a:	f000 fd39 	bl	10d0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     65e:	ed97 5b02 	vldr	d5, [r7, #8]
     662:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     666:	ee85 7b06 	vdiv.f64	d7, d5, d6
     66a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     66e:	ee17 2a90 	vmov	r2, s15
     672:	4b51      	ldr	r3, [pc, #324]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     674:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     676:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     67a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     67e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     682:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     68a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     68e:	ee26 7b07 	vmul.f64	d7, d6, d7
     692:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     696:	4b48      	ldr	r3, [pc, #288]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     698:	785b      	ldrb	r3, [r3, #1]
     69a:	ee07 3a90 	vmov	s15, r3
     69e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6a2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     6a6:	ee26 6b07 	vmul.f64	d6, d6, d7
     6aa:	ed9f 5b39 	vldr	d5, [pc, #228]	; 790 <calc_defined_step_MW_sweep+0x224>
     6ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
     6b2:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     6b6:	ed97 7b08 	vldr	d7, [r7, #32]
     6ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6be:	ee17 2a90 	vmov	r2, s15
     6c2:	4b3d      	ldr	r3, [pc, #244]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     6c4:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     6c6:	4b3c      	ldr	r3, [pc, #240]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     6c8:	685b      	ldr	r3, [r3, #4]
     6ca:	ee07 3a90 	vmov	s15, r3
     6ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6d2:	ed97 6b08 	vldr	d6, [r7, #32]
     6d6:	ee36 7b47 	vsub.f64	d7, d6, d7
     6da:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 798 <calc_defined_step_MW_sweep+0x22c>
     6de:	ee27 7b06 	vmul.f64	d7, d7, d6
     6e2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     6e6:	ee37 7b06 	vadd.f64	d7, d7, d6
     6ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6ee:	ee17 2a90 	vmov	r2, s15
     6f2:	4b31      	ldr	r3, [pc, #196]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     6f4:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     6f6:	f241 3288 	movw	r2, #5000	; 0x1388
     6fa:	4b2f      	ldr	r3, [pc, #188]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     6fc:	615a      	str	r2, [r3, #20]
	mw_sweep_settings.dwell_time = pop_cycles_per_step * POP_CYCLE_TIME_US;
     6fe:	f245 22d4 	movw	r2, #21204	; 0x52d4
     702:	687b      	ldr	r3, [r7, #4]
     704:	fb02 f303 	mul.w	r3, r2, r3
     708:	4a2b      	ldr	r2, [pc, #172]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     70a:	6193      	str	r3, [r2, #24]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
     70c:	f241 3288 	movw	r2, #5000	; 0x1388
     710:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     714:	441a      	add	r2, r3
     716:	4b28      	ldr	r3, [pc, #160]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     718:	699b      	ldr	r3, [r3, #24]
     71a:	4413      	add	r3, r2
     71c:	ee07 3a90 	vmov	s15, r3
     720:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     724:	4b24      	ldr	r3, [pc, #144]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     726:	68db      	ldr	r3, [r3, #12]
     728:	ee07 3a90 	vmov	s15, r3
     72c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     730:	ee26 6b07 	vmul.f64	d6, d6, d7
     734:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 7a0 <calc_defined_step_MW_sweep+0x234>
     738:	ee86 7b05 	vdiv.f64	d7, d6, d5
     73c:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     744:	481f      	ldr	r0, [pc, #124]	; (7c4 <calc_defined_step_MW_sweep+0x258>)
     746:	f000 fcc3 	bl	10d0 <__printf_veneer>
	printf("%ld steps, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000* calc_sweep_time / mw_sweep_settings.num_steps);
     74a:	4b1b      	ldr	r3, [pc, #108]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     74c:	68d9      	ldr	r1, [r3, #12]
     74e:	ed97 7b06 	vldr	d7, [r7, #24]
     752:	ed9f 6b15 	vldr	d6, [pc, #84]	; 7a8 <calc_defined_step_MW_sweep+0x23c>
     756:	ee27 6b06 	vmul.f64	d6, d7, d6
     75a:	4b17      	ldr	r3, [pc, #92]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     75c:	68db      	ldr	r3, [r3, #12]
     75e:	ee07 3a90 	vmov	s15, r3
     762:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     766:	ee86 5b07 	vdiv.f64	d5, d6, d7
     76a:	ec53 2b15 	vmov	r2, r3, d5
     76e:	4816      	ldr	r0, [pc, #88]	; (7c8 <calc_defined_step_MW_sweep+0x25c>)
     770:	f000 fcae 	bl	10d0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     774:	4b10      	ldr	r3, [pc, #64]	; (7b8 <calc_defined_step_MW_sweep+0x24c>)
     776:	2200      	movs	r2, #0
     778:	61da      	str	r2, [r3, #28]

	//print_mw_sweep_settings();
	return(true);
     77a:	2301      	movs	r3, #1
}
     77c:	4618      	mov	r0, r3
     77e:	3748      	adds	r7, #72	; 0x48
     780:	46bd      	mov	sp, r7
     782:	bd80      	pop	{r7, pc}
     784:	f3af 8000 	nop.w
     788:	00000000 	.word	0x00000000
     78c:	41cdcd65 	.word	0x41cdcd65
     790:	00000000 	.word	0x00000000
     794:	4187d784 	.word	0x4187d784
     798:	00000000 	.word	0x00000000
     79c:	41700000 	.word	0x41700000
     7a0:	00000000 	.word	0x00000000
     7a4:	412e8480 	.word	0x412e8480
     7a8:	00000000 	.word	0x00000000
     7ac:	408f4000 	.word	0x408f4000
     7b0:	0801b344 	.word	0x0801b344
     7b4:	0801b388 	.word	0x0801b388
     7b8:	200005c8 	.word	0x200005c8
     7bc:	0801b3a8 	.word	0x0801b3a8
     7c0:	0801b3e0 	.word	0x0801b3e0
     7c4:	0801b400 	.word	0x0801b400
     7c8:	0801b418 	.word	0x0801b418

000007cc <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     7cc:	b580      	push	{r7, lr}
     7ce:	b09a      	sub	sp, #104	; 0x68
     7d0:	af04      	add	r7, sp, #16
     7d2:	ed87 0b06 	vstr	d0, [r7, #24]
     7d6:	ed87 1b04 	vstr	d1, [r7, #16]
     7da:	ed87 2b02 	vstr	d2, [r7, #8]
     7de:	4603      	mov	r3, r0
     7e0:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	//uint32_t pop_cycles_per_step, const uint32_t num_points_req) {
	printf("MW sweep will have %.9g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     7e2:	ed97 7b06 	vldr	d7, [r7, #24]
     7e6:	ed9f 6bc0 	vldr	d6, [pc, #768]	; ae8 <calc_fixed_time_MW_sweep+0x31c>
     7ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
     7ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     7f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
     7f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     7fa:	e9cd 2300 	strd	r2, r3, [sp]
     7fe:	ec53 2b15 	vmov	r2, r3, d5
     802:	48c5      	ldr	r0, [pc, #788]	; (b18 <calc_fixed_time_MW_sweep+0x34c>)
     804:	f000 fc64 	bl	10d0 <__printf_veneer>

	mw_sweep_settings.dwell_time = POP_CYCLE_TIME_US; //minimum possible value of dwell_time in us
     808:	f245 22d4 	movw	r2, #21204	; 0x52d4
     80c:	4bc3      	ldr	r3, [pc, #780]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     80e:	619a      	str	r2, [r3, #24]
	uint32_t step_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time; //minimum possible value in us
     810:	f241 3288 	movw	r2, #5000	; 0x1388
     814:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     818:	441a      	add	r2, r3
     81a:	4bc0      	ldr	r3, [pc, #768]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     81c:	699b      	ldr	r3, [r3, #24]
     81e:	4413      	add	r3, r2
     820:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t steps_in_sweep = requested_sweep_period * (double)(1000000 / step_time); //maximum possible number of steps in sweep, rounded down to an integer
     822:	4abf      	ldr	r2, [pc, #764]	; (b20 <calc_fixed_time_MW_sweep+0x354>)
     824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     826:	fbb2 f3f3 	udiv	r3, r2, r3
     82a:	ee07 3a90 	vmov	s15, r3
     82e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     832:	ed97 7b02 	vldr	d7, [r7, #8]
     836:	ee26 7b07 	vmul.f64	d7, d6, d7
     83a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     83e:	ee17 3a90 	vmov	r3, s15
     842:	643b      	str	r3, [r7, #64]	; 0x40
	//printf("%lu steps in sweep, maximum\r\n", steps_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     844:	ed97 7b04 	vldr	d7, [r7, #16]
     848:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     84c:	ee27 7b06 	vmul.f64	d7, d7, d6
     850:	ed97 6b06 	vldr	d6, [r7, #24]
     854:	ee36 7b47 	vsub.f64	d7, d6, d7
     858:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	mw_sweep_settings.k = calculate_k(start_freq);
     85c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
     860:	f000 f96a 	bl	b38 <calculate_k>
     864:	4603      	mov	r3, r0
     866:	b2da      	uxtb	r2, r3
     868:	4bac      	ldr	r3, [pc, #688]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     86a:	705a      	strb	r2, [r3, #1]
//	mw_sweep_settings.k = local_k;

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     86c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; af0 <calc_fixed_time_MW_sweep+0x324>
     870:	4baa      	ldr	r3, [pc, #680]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     872:	785b      	ldrb	r3, [r3, #1]
     874:	061b      	lsls	r3, r3, #24
     876:	ee07 3a90 	vmov	s15, r3
     87a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     87e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     882:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     886:	4ba5      	ldr	r3, [pc, #660]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     888:	2201      	movs	r2, #1
     88a:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * steps_in_sweep) < (span / unit_step_size_Hz)) {
     88c:	e004      	b.n	898 <calc_fixed_time_MW_sweep+0xcc>
		mw_sweep_settings.step_size++;
     88e:	4ba3      	ldr	r3, [pc, #652]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     890:	691b      	ldr	r3, [r3, #16]
     892:	3301      	adds	r3, #1
     894:	4aa1      	ldr	r2, [pc, #644]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     896:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * steps_in_sweep) < (span / unit_step_size_Hz)) {
     898:	4ba0      	ldr	r3, [pc, #640]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     89a:	691b      	ldr	r3, [r3, #16]
     89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     89e:	fb02 f303 	mul.w	r3, r2, r3
     8a2:	ee07 3a90 	vmov	s15, r3
     8a6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     8aa:	ed97 4b04 	vldr	d4, [r7, #16]
     8ae:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
     8b2:	ee84 7b05 	vdiv.f64	d7, d4, d5
     8b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
     8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8be:	d4e6      	bmi.n	88e <calc_fixed_time_MW_sweep+0xc2>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     8c0:	4b96      	ldr	r3, [pc, #600]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     8c2:	691b      	ldr	r3, [r3, #16]
     8c4:	ee07 3a90 	vmov	s15, r3
     8c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     8cc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     8d0:	ee26 7b07 	vmul.f64	d7, d6, d7
     8d4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     8d8:	4b90      	ldr	r3, [pc, #576]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     8da:	6919      	ldr	r1, [r3, #16]
     8dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     8e0:	4890      	ldr	r0, [pc, #576]	; (b24 <calc_fixed_time_MW_sweep+0x358>)
     8e2:	f000 fbf5 	bl	10d0 <__printf_veneer>

	//calculate number of steps in sweep and round off to integer
	mw_sweep_settings.num_steps = (span / achieved_step_size) + 0.5;
     8e6:	ed97 5b04 	vldr	d5, [r7, #16]
     8ea:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     8ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
     8f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     8f6:	ee37 7b06 	vadd.f64	d7, d7, d6
     8fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     8fe:	ee17 2a90 	vmov	r2, s15
     902:	4b86      	ldr	r3, [pc, #536]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     904:	60da      	str	r2, [r3, #12]
	printf("%lu steps in sweep, %.3g ms each\r\n", mw_sweep_settings.num_steps, (1000 * requested_sweep_period / mw_sweep_settings.num_steps));
     906:	4b85      	ldr	r3, [pc, #532]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     908:	68d9      	ldr	r1, [r3, #12]
     90a:	ed97 7b02 	vldr	d7, [r7, #8]
     90e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; af8 <calc_fixed_time_MW_sweep+0x32c>
     912:	ee27 6b06 	vmul.f64	d6, d7, d6
     916:	4b81      	ldr	r3, [pc, #516]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     918:	68db      	ldr	r3, [r3, #12]
     91a:	ee07 3a90 	vmov	s15, r3
     91e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     922:	ee86 5b07 	vdiv.f64	d5, d6, d7
     926:	ec53 2b15 	vmov	r2, r3, d5
     92a:	487f      	ldr	r0, [pc, #508]	; (b28 <calc_fixed_time_MW_sweep+0x35c>)
     92c:	f000 fbd0 	bl	10d0 <__printf_veneer>

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     930:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     934:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     938:	ee85 7b06 	vdiv.f64	d7, d5, d6
     93c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     940:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     944:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     948:	ee26 7b07 	vmul.f64	d7, d6, d7
     94c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     950:	4b72      	ldr	r3, [pc, #456]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     952:	785b      	ldrb	r3, [r3, #1]
     954:	ee07 3a90 	vmov	s15, r3
     958:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     95c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
     960:	ee26 6b07 	vmul.f64	d6, d6, d7
     964:	ed9f 5b62 	vldr	d5, [pc, #392]	; af0 <calc_fixed_time_MW_sweep+0x324>
     968:	ee86 7b05 	vdiv.f64	d7, d6, d5
     96c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     970:	ed97 7b08 	vldr	d7, [r7, #32]
     974:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     978:	ee17 2a90 	vmov	r2, s15
     97c:	4b67      	ldr	r3, [pc, #412]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     97e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     980:	4b66      	ldr	r3, [pc, #408]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     982:	685b      	ldr	r3, [r3, #4]
     984:	ee07 3a90 	vmov	s15, r3
     988:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     98c:	ed97 6b08 	vldr	d6, [r7, #32]
     990:	ee36 7b47 	vsub.f64	d7, d6, d7
     994:	ed9f 6b5a 	vldr	d6, [pc, #360]	; b00 <calc_fixed_time_MW_sweep+0x334>
     998:	ee27 7b06 	vmul.f64	d7, d7, d6
     99c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     9a0:	ee37 7b06 	vadd.f64	d7, d7, d6
     9a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9a8:	ee17 2a90 	vmov	r2, s15
     9ac:	4b5b      	ldr	r3, [pc, #364]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     9ae:	609a      	str	r2, [r3, #8]

	/* Calculate the period of a sweep */
	double step_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time)/1000000;
     9b0:	f241 3288 	movw	r2, #5000	; 0x1388
     9b4:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     9b8:	441a      	add	r2, r3
     9ba:	4b58      	ldr	r3, [pc, #352]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     9bc:	699b      	ldr	r3, [r3, #24]
     9be:	4413      	add	r3, r2
     9c0:	ee07 3a90 	vmov	s15, r3
     9c4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     9c8:	ed9f 5b4f 	vldr	d5, [pc, #316]	; b08 <calc_fixed_time_MW_sweep+0x33c>
     9cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
     9d0:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	double calc_sweep_time = step_period * (double)(mw_sweep_settings.num_steps);
     9d4:	4b51      	ldr	r3, [pc, #324]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     9d6:	68db      	ldr	r3, [r3, #12]
     9d8:	ee07 3a90 	vmov	s15, r3
     9dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     9e0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
     9e4:	ee26 7b07 	vmul.f64	d7, d6, d7
     9e8:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
//	double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
	printf("Sweep period could be reduced to %.3g s with same number of POP samples\r\n", calc_sweep_time);
     9ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
     9f0:	484e      	ldr	r0, [pc, #312]	; (b2c <calc_fixed_time_MW_sweep+0x360>)
     9f2:	f000 fb6d 	bl	10d0 <__printf_veneer>
	/* Increase dwell time until the sweep is just slightly longer than the sweep period requested */
//	while ((double)(mw_sweep_settings.num_steps * (MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time)/1000000) < requested_sweep_period) {
	while ((double)(mw_sweep_settings.num_steps * step_period) < requested_sweep_period) {
     9f6:	e016      	b.n	a26 <calc_fixed_time_MW_sweep+0x25a>
		mw_sweep_settings.dwell_time++;
     9f8:	4b48      	ldr	r3, [pc, #288]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     9fa:	699b      	ldr	r3, [r3, #24]
     9fc:	3301      	adds	r3, #1
     9fe:	4a47      	ldr	r2, [pc, #284]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a00:	6193      	str	r3, [r2, #24]
		step_period = (MW_STABILISE_TIME_US + MW_PROCESSING_TIME + mw_sweep_settings.dwell_time)/1000000; //recalculate for new dwell time
     a02:	f241 3288 	movw	r2, #5000	; 0x1388
     a06:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     a0a:	441a      	add	r2, r3
     a0c:	4b43      	ldr	r3, [pc, #268]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a0e:	699b      	ldr	r3, [r3, #24]
     a10:	4413      	add	r3, r2
     a12:	4a47      	ldr	r2, [pc, #284]	; (b30 <calc_fixed_time_MW_sweep+0x364>)
     a14:	fba2 2303 	umull	r2, r3, r2, r3
     a18:	0c9b      	lsrs	r3, r3, #18
     a1a:	ee07 3a90 	vmov	s15, r3
     a1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a22:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	while ((double)(mw_sweep_settings.num_steps * step_period) < requested_sweep_period) {
     a26:	4b3d      	ldr	r3, [pc, #244]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a28:	68db      	ldr	r3, [r3, #12]
     a2a:	ee07 3a90 	vmov	s15, r3
     a2e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a32:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
     a36:	ee26 7b07 	vmul.f64	d7, d6, d7
     a3a:	ed97 6b02 	vldr	d6, [r7, #8]
     a3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
     a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a46:	dcd7      	bgt.n	9f8 <calc_fixed_time_MW_sweep+0x22c>
	}

	//Period of MW sweep isn't precise as it's based on measured averages processing time
	//Additional 10% (max of 1s) added to sweep period to guarantee horizontal scope sync
	if (scope_sync_time) {
     a48:	79fb      	ldrb	r3, [r7, #7]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d043      	beq.n	ad6 <calc_fixed_time_MW_sweep+0x30a>
		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
     a4e:	4b33      	ldr	r3, [pc, #204]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a50:	68db      	ldr	r3, [r3, #12]
     a52:	ee07 3a90 	vmov	s15, r3
     a56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a5a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; b10 <calc_fixed_time_MW_sweep+0x344>
     a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
     a62:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a66:	ee37 7b06 	vadd.f64	d7, d7, d6
     a6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a6e:	ee17 2a90 	vmov	r2, s15
     a72:	4b2a      	ldr	r3, [pc, #168]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a74:	60da      	str	r2, [r3, #12]
		calc_sweep_time = step_period * (double)(mw_sweep_settings.num_steps);
     a76:	4b29      	ldr	r3, [pc, #164]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a78:	68db      	ldr	r3, [r3, #12]
     a7a:	ee07 3a90 	vmov	s15, r3
     a7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a82:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
     a86:	ee26 7b07 	vmul.f64	d7, d6, d7
     a8a:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

		/* Decrease number of steps if additional 10% is >1s */
		while (calc_sweep_time - requested_sweep_period > 1) {
     a8e:	e010      	b.n	ab2 <calc_fixed_time_MW_sweep+0x2e6>
			mw_sweep_settings.num_steps--;
     a90:	4b22      	ldr	r3, [pc, #136]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a92:	68db      	ldr	r3, [r3, #12]
     a94:	3b01      	subs	r3, #1
     a96:	4a21      	ldr	r2, [pc, #132]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a98:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = step_period * (double)(mw_sweep_settings.num_steps);
     a9a:	4b20      	ldr	r3, [pc, #128]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     a9c:	68db      	ldr	r3, [r3, #12]
     a9e:	ee07 3a90 	vmov	s15, r3
     aa2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     aa6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
     aaa:	ee26 7b07 	vmul.f64	d7, d6, d7
     aae:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
		while (calc_sweep_time - requested_sweep_period > 1) {
     ab2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     ab6:	ed97 7b02 	vldr	d7, [r7, #8]
     aba:	ee36 7b47 	vsub.f64	d7, d6, d7
     abe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     ac2:	eeb4 7bc6 	vcmpe.f64	d7, d6
     ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aca:	dce1      	bgt.n	a90 <calc_fixed_time_MW_sweep+0x2c4>
		}

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
     acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
     ad0:	4818      	ldr	r0, [pc, #96]	; (b34 <calc_fixed_time_MW_sweep+0x368>)
     ad2:	f000 fafd 	bl	10d0 <__printf_veneer>
	}

	mw_sweep_settings.current_point = 0;
     ad6:	4b11      	ldr	r3, [pc, #68]	; (b1c <calc_fixed_time_MW_sweep+0x350>)
     ad8:	2200      	movs	r2, #0
     ada:	61da      	str	r2, [r3, #28]
	//print_mw_sweep_settings();
	return(true);
     adc:	2301      	movs	r3, #1
}
     ade:	4618      	mov	r0, r3
     ae0:	3758      	adds	r7, #88	; 0x58
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	bf00      	nop
     ae8:	00000000 	.word	0x00000000
     aec:	41cdcd65 	.word	0x41cdcd65
     af0:	00000000 	.word	0x00000000
     af4:	4187d784 	.word	0x4187d784
     af8:	00000000 	.word	0x00000000
     afc:	408f4000 	.word	0x408f4000
     b00:	00000000 	.word	0x00000000
     b04:	41700000 	.word	0x41700000
     b08:	00000000 	.word	0x00000000
     b0c:	412e8480 	.word	0x412e8480
     b10:	9999999a 	.word	0x9999999a
     b14:	3ff19999 	.word	0x3ff19999
     b18:	0801b434 	.word	0x0801b434
     b1c:	200005c8 	.word	0x200005c8
     b20:	000f4240 	.word	0x000f4240
     b24:	0801b484 	.word	0x0801b484
     b28:	0801b4b0 	.word	0x0801b4b0
     b2c:	0801b4d4 	.word	0x0801b4d4
     b30:	431bde83 	.word	0x431bde83
     b34:	0801b520 	.word	0x0801b520

00000b38 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
     b38:	b480      	push	{r7}
     b3a:	b085      	sub	sp, #20
     b3c:	af00      	add	r7, sp, #0
     b3e:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
     b42:	ed9f 5b11 	vldr	d5, [pc, #68]	; b88 <calculate_k+0x50>
     b46:	ed97 6b00 	vldr	d6, [r7]
     b4a:	ee85 7b06 	vdiv.f64	d7, d5, d6
     b4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     b52:	ee17 3a90 	vmov	r3, s15
     b56:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	2b01      	cmp	r3, #1
     b5c:	d00b      	beq.n	b76 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
     b5e:	e002      	b.n	b66 <calculate_k+0x2e>
			k --;
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	3b01      	subs	r3, #1
     b64:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
     b66:	68fb      	ldr	r3, [r7, #12]
     b68:	2b3e      	cmp	r3, #62	; 0x3e
     b6a:	d8f9      	bhi.n	b60 <calculate_k+0x28>
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	f003 0301 	and.w	r3, r3, #1
     b72:	2b00      	cmp	r3, #0
     b74:	d1f4      	bne.n	b60 <calculate_k+0x28>
		}
	}
	return (k);
     b76:	68fb      	ldr	r3, [r7, #12]
}
     b78:	4618      	mov	r0, r3
     b7a:	3714      	adds	r7, #20
     b7c:	46bd      	mov	sp, r7
     b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
     b82:	4770      	bx	lr
     b84:	f3af 8000 	nop.w
     b88:	20000000 	.word	0x20000000
     b8c:	41ee8c21 	.word	0x41ee8c21

00000b90 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
const bool start_MW_sweep(void) {
     b90:	b580      	push	{r7, lr}
     b92:	af00      	add	r7, sp, #0
	//uses settings from the mw_sweep_settings structure
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     b94:	2201      	movs	r2, #1
     b96:	2102      	movs	r1, #2
     b98:	4811      	ldr	r0, [pc, #68]	; (be0 <start_MW_sweep+0x50>)
     b9a:	f000 fabd 	bl	1118 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     b9e:	2201      	movs	r2, #1
     ba0:	2102      	movs	r1, #2
     ba2:	4810      	ldr	r0, [pc, #64]	; (be4 <start_MW_sweep+0x54>)
     ba4:	f000 fab8 	bl	1118 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     ba8:	4b0f      	ldr	r3, [pc, #60]	; (be8 <start_MW_sweep+0x58>)
     baa:	685b      	ldr	r3, [r3, #4]
     bac:	4a0e      	ldr	r2, [pc, #56]	; (be8 <start_MW_sweep+0x58>)
     bae:	6891      	ldr	r1, [r2, #8]
     bb0:	4a0d      	ldr	r2, [pc, #52]	; (be8 <start_MW_sweep+0x58>)
     bb2:	7852      	ldrb	r2, [r2, #1]
     bb4:	4618      	mov	r0, r3
     bb6:	f7ff fc33 	bl	420 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     bba:	4b0b      	ldr	r3, [pc, #44]	; (be8 <start_MW_sweep+0x58>)
     bbc:	2202      	movs	r2, #2
     bbe:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <start_MW_sweep+0x58>)
     bc2:	2200      	movs	r2, #0
     bc4:	61da      	str	r2, [r3, #28]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     bc6:	2200      	movs	r2, #0
     bc8:	2101      	movs	r1, #1
     bca:	4808      	ldr	r0, [pc, #32]	; (bec <start_MW_sweep+0x5c>)
     bcc:	f000 faa4 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
     bd0:	4b07      	ldr	r3, [pc, #28]	; (bf0 <start_MW_sweep+0x60>)
     bd2:	681b      	ldr	r3, [r3, #0]
     bd4:	4618      	mov	r0, r3
     bd6:	f000 f9bd 	bl	f54 <start_timer>
	return(true);
     bda:	2301      	movs	r3, #1
}
     bdc:	4618      	mov	r0, r3
     bde:	bd80      	pop	{r7, pc}
     be0:	58021000 	.word	0x58021000
     be4:	58020400 	.word	0x58020400
     be8:	200005c8 	.word	0x200005c8
     bec:	58021800 	.word	0x58021800
     bf0:	2000001c 	.word	0x2000001c

00000bf4 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     bf4:	b580      	push	{r7, lr}
     bf6:	b082      	sub	sp, #8
     bf8:	af00      	add	r7, sp, #0
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     bfa:	4b49      	ldr	r3, [pc, #292]	; (d20 <MW_update+0x12c>)
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	71bb      	strb	r3, [r7, #6]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     c00:	2300      	movs	r3, #0
     c02:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_MW_state)
     c04:	79bb      	ldrb	r3, [r7, #6]
     c06:	2b03      	cmp	r3, #3
     c08:	d029      	beq.n	c5e <MW_update+0x6a>
     c0a:	2b03      	cmp	r3, #3
     c0c:	dc75      	bgt.n	cfa <MW_update+0x106>
     c0e:	2b01      	cmp	r3, #1
     c10:	dc02      	bgt.n	c18 <MW_update+0x24>
     c12:	2b00      	cmp	r3, #0
     c14:	da7d      	bge.n	d12 <MW_update+0x11e>
     c16:	e070      	b.n	cfa <MW_update+0x106>
     c18:	2b02      	cmp	r3, #2
     c1a:	d16e      	bne.n	cfa <MW_update+0x106>
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     c1c:	4b41      	ldr	r3, [pc, #260]	; (d24 <MW_update+0x130>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	4618      	mov	r0, r3
     c22:	f000 f9c7 	bl	fb4 <check_timer>
     c26:	4603      	mov	r3, r0
     c28:	f241 3288 	movw	r2, #5000	; 0x1388
     c2c:	4293      	cmp	r3, r2
     c2e:	d201      	bcs.n	c34 <MW_update+0x40>
     c30:	2300      	movs	r3, #0
     c32:	e070      	b.n	d16 <MW_update+0x122>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     c34:	4b3b      	ldr	r3, [pc, #236]	; (d24 <MW_update+0x130>)
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	4618      	mov	r0, r3
     c3a:	f000 f9a9 	bl	f90 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     c3e:	2200      	movs	r2, #0
     c40:	2102      	movs	r1, #2
     c42:	4839      	ldr	r0, [pc, #228]	; (d28 <MW_update+0x134>)
     c44:	f000 fa68 	bl	1118 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     c48:	4b35      	ldr	r3, [pc, #212]	; (d20 <MW_update+0x12c>)
     c4a:	2203      	movs	r2, #3
     c4c:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     c4e:	4b35      	ldr	r3, [pc, #212]	; (d24 <MW_update+0x130>)
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	4618      	mov	r0, r3
     c54:	f000 f97e 	bl	f54 <start_timer>
			action_taken = true;
     c58:	2301      	movs	r3, #1
     c5a:	71fb      	strb	r3, [r7, #7]
			break;
     c5c:	e05a      	b.n	d14 <MW_update+0x120>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     c5e:	4b31      	ldr	r3, [pc, #196]	; (d24 <MW_update+0x130>)
     c60:	681b      	ldr	r3, [r3, #0]
     c62:	4618      	mov	r0, r3
     c64:	f000 f9a6 	bl	fb4 <check_timer>
     c68:	4602      	mov	r2, r0
     c6a:	4b2d      	ldr	r3, [pc, #180]	; (d20 <MW_update+0x12c>)
     c6c:	699b      	ldr	r3, [r3, #24]
     c6e:	429a      	cmp	r2, r3
     c70:	d201      	bcs.n	c76 <MW_update+0x82>
     c72:	2300      	movs	r3, #0
     c74:	e04f      	b.n	d16 <MW_update+0x122>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     c76:	2301      	movs	r3, #1
     c78:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER);
     c7a:	4b2a      	ldr	r3, [pc, #168]	; (d24 <MW_update+0x130>)
     c7c:	681b      	ldr	r3, [r3, #0]
     c7e:	4618      	mov	r0, r3
     c80:	f000 f986 	bl	f90 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c88:	4827      	ldr	r0, [pc, #156]	; (d28 <MW_update+0x134>)
     c8a:	f000 fa31 	bl	10f0 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     c8e:	2201      	movs	r2, #1
     c90:	2102      	movs	r1, #2
     c92:	4825      	ldr	r0, [pc, #148]	; (d28 <MW_update+0x134>)
     c94:	f000 fa40 	bl	1118 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     c98:	4b21      	ldr	r3, [pc, #132]	; (d20 <MW_update+0x12c>)
     c9a:	2202      	movs	r2, #2
     c9c:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) {
     c9e:	4b20      	ldr	r3, [pc, #128]	; (d20 <MW_update+0x12c>)
     ca0:	69da      	ldr	r2, [r3, #28]
     ca2:	4b1f      	ldr	r3, [pc, #124]	; (d20 <MW_update+0x12c>)
     ca4:	68db      	ldr	r3, [r3, #12]
     ca6:	429a      	cmp	r2, r3
     ca8:	d10a      	bne.n	cc0 <MW_update+0xcc>
				/* All steps completed, tidy up and restart next sweep */
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     caa:	2201      	movs	r2, #1
     cac:	2101      	movs	r1, #1
     cae:	481f      	ldr	r0, [pc, #124]	; (d2c <MW_update+0x138>)
     cb0:	f000 fa32 	bl	1118 <__HAL_GPIO_WritePin_veneer>
				printf("Sweep complete\r\n");
     cb4:	481e      	ldr	r0, [pc, #120]	; (d30 <MW_update+0x13c>)
     cb6:	f000 fa17 	bl	10e8 <__puts_veneer>
				start_MW_sweep(); //restart the MW sweep
     cba:	f7ff ff69 	bl	b90 <start_MW_sweep>
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     cbe:	e029      	b.n	d14 <MW_update+0x120>
				mw_sweep_settings.current_point++; //increment point counter
     cc0:	4b17      	ldr	r3, [pc, #92]	; (d20 <MW_update+0x12c>)
     cc2:	69db      	ldr	r3, [r3, #28]
     cc4:	3301      	adds	r3, #1
     cc6:	4a16      	ldr	r2, [pc, #88]	; (d20 <MW_update+0x12c>)
     cc8:	61d3      	str	r3, [r2, #28]
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     cca:	4b15      	ldr	r3, [pc, #84]	; (d20 <MW_update+0x12c>)
     ccc:	689a      	ldr	r2, [r3, #8]
     cce:	4b14      	ldr	r3, [pc, #80]	; (d20 <MW_update+0x12c>)
     cd0:	691b      	ldr	r3, [r3, #16]
     cd2:	4913      	ldr	r1, [pc, #76]	; (d20 <MW_update+0x12c>)
     cd4:	69c9      	ldr	r1, [r1, #28]
     cd6:	fb01 f303 	mul.w	r3, r1, r3
     cda:	4413      	add	r3, r2
     cdc:	603b      	str	r3, [r7, #0]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     cde:	4b10      	ldr	r3, [pc, #64]	; (d20 <MW_update+0x12c>)
     ce0:	685b      	ldr	r3, [r3, #4]
     ce2:	4a0f      	ldr	r2, [pc, #60]	; (d20 <MW_update+0x12c>)
     ce4:	7852      	ldrb	r2, [r2, #1]
     ce6:	6839      	ldr	r1, [r7, #0]
     ce8:	4618      	mov	r0, r3
     cea:	f7ff fb99 	bl	420 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     cee:	4b0d      	ldr	r3, [pc, #52]	; (d24 <MW_update+0x130>)
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	4618      	mov	r0, r3
     cf4:	f000 f92e 	bl	f54 <start_timer>
			break;
     cf8:	e00c      	b.n	d14 <MW_update+0x120>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
     cfa:	4b09      	ldr	r3, [pc, #36]	; (d20 <MW_update+0x12c>)
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	4619      	mov	r1, r3
     d00:	480c      	ldr	r0, [pc, #48]	; (d34 <MW_update+0x140>)
     d02:	f000 f9e5 	bl	10d0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
     d06:	79bb      	ldrb	r3, [r7, #6]
     d08:	4619      	mov	r1, r3
     d0a:	480b      	ldr	r0, [pc, #44]	; (d38 <MW_update+0x144>)
     d0c:	f000 f9e0 	bl	10d0 <__printf_veneer>
     d10:	e000      	b.n	d14 <MW_update+0x120>
			break; //no action to take
     d12:	bf00      	nop
	}
    return(action_taken);
     d14:	79fb      	ldrb	r3, [r7, #7]
}
     d16:	4618      	mov	r0, r3
     d18:	3708      	adds	r7, #8
     d1a:	46bd      	mov	sp, r7
     d1c:	bd80      	pop	{r7, pc}
     d1e:	bf00      	nop
     d20:	200005c8 	.word	0x200005c8
     d24:	2000001c 	.word	0x2000001c
     d28:	58020400 	.word	0x58020400
     d2c:	58021800 	.word	0x58021800
     d30:	0801b560 	.word	0x0801b560
     d34:	0801b570 	.word	0x0801b570
     d38:	0801b59c 	.word	0x0801b59c

00000d3c <MW_frequency_toggle>:


/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
     d3c:	b580      	push	{r7, lr}
     d3e:	b090      	sub	sp, #64	; 0x40
     d40:	af02      	add	r7, sp, #8
     d42:	ed87 0b02 	vstr	d0, [r7, #8]
     d46:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
     d4a:	486b      	ldr	r0, [pc, #428]	; (ef8 <MW_frequency_toggle+0x1bc>)
     d4c:	f000 f9cc 	bl	10e8 <__puts_veneer>
	printf("Toggling between %.9g and %.9g GHz\r\n", f_one/1000000000, f_two/1000000000);
     d50:	ed97 7b02 	vldr	d7, [r7, #8]
     d54:	ed9f 6b60 	vldr	d6, [pc, #384]	; ed8 <MW_frequency_toggle+0x19c>
     d58:	ee87 4b06 	vdiv.f64	d4, d7, d6
     d5c:	ed97 6b00 	vldr	d6, [r7]
     d60:	ed9f 5b5d 	vldr	d5, [pc, #372]	; ed8 <MW_frequency_toggle+0x19c>
     d64:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d68:	ed8d 7b00 	vstr	d7, [sp]
     d6c:	ec53 2b14 	vmov	r2, r3, d4
     d70:	4862      	ldr	r0, [pc, #392]	; (efc <MW_frequency_toggle+0x1c0>)
     d72:	f000 f9ad 	bl	10d0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
     d76:	ed9f 5b5a 	vldr	d5, [pc, #360]	; ee0 <MW_frequency_toggle+0x1a4>
     d7a:	ed97 6b02 	vldr	d6, [r7, #8]
     d7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d86:	ee17 3a90 	vmov	r3, s15
     d8a:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
     d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d8e:	2b01      	cmp	r3, #1
     d90:	d00b      	beq.n	daa <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
     d92:	e002      	b.n	d9a <MW_frequency_toggle+0x5e>
			k_one--;
     d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d96:	3b01      	subs	r3, #1
     d98:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
     d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d9c:	2b3e      	cmp	r3, #62	; 0x3e
     d9e:	d8f9      	bhi.n	d94 <MW_frequency_toggle+0x58>
     da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     da2:	f003 0301 	and.w	r3, r3, #1
     da6:	2b00      	cmp	r3, #0
     da8:	d1f4      	bne.n	d94 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
     daa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; ee0 <MW_frequency_toggle+0x1a4>
     dae:	ed97 6b00 	vldr	d6, [r7]
     db2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     db6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     dba:	ee17 3a90 	vmov	r3, s15
     dbe:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
     dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dc2:	2b01      	cmp	r3, #1
     dc4:	d00b      	beq.n	dde <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
     dc6:	e002      	b.n	dce <MW_frequency_toggle+0x92>
			k_two--;
     dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dca:	3b01      	subs	r3, #1
     dcc:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
     dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dd0:	2b3e      	cmp	r3, #62	; 0x3e
     dd2:	d8f9      	bhi.n	dc8 <MW_frequency_toggle+0x8c>
     dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dd6:	f003 0301 	and.w	r3, r3, #1
     dda:	2b00      	cmp	r3, #0
     ddc:	d1f4      	bne.n	dc8 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
     dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     de0:	ee07 3a90 	vmov	s15, r3
     de4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     de8:	ed97 7b02 	vldr	d7, [r7, #8]
     dec:	ee26 6b07 	vmul.f64	d6, d6, d7
     df0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; ee8 <MW_frequency_toggle+0x1ac>
     df4:	ee86 7b05 	vdiv.f64	d7, d6, d5
     df8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
     dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dfe:	ee07 3a90 	vmov	s15, r3
     e02:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     e06:	ed97 7b00 	vldr	d7, [r7]
     e0a:	ee26 6b07 	vmul.f64	d6, d6, d7
     e0e:	ed9f 5b36 	vldr	d5, [pc, #216]	; ee8 <MW_frequency_toggle+0x1ac>
     e12:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e16:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
     e1a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
     e1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e22:	ee17 3a90 	vmov	r3, s15
     e26:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
     e28:	69fb      	ldr	r3, [r7, #28]
     e2a:	ee07 3a90 	vmov	s15, r3
     e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e32:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     e36:	ee36 7b47 	vsub.f64	d7, d6, d7
     e3a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; ef0 <MW_frequency_toggle+0x1b4>
     e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
     e42:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e46:	ee37 7b06 	vadd.f64	d7, d7, d6
     e4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e4e:	ee17 3a90 	vmov	r3, s15
     e52:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
     e54:	ed97 7b08 	vldr	d7, [r7, #32]
     e58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e5c:	ee17 3a90 	vmov	r3, s15
     e60:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
     e62:	697b      	ldr	r3, [r7, #20]
     e64:	ee07 3a90 	vmov	s15, r3
     e68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e6c:	ed97 6b08 	vldr	d6, [r7, #32]
     e70:	ee36 7b47 	vsub.f64	d7, d6, d7
     e74:	ed9f 6b1e 	vldr	d6, [pc, #120]	; ef0 <MW_frequency_toggle+0x1b4>
     e78:	ee27 7b06 	vmul.f64	d7, d7, d6
     e7c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e80:	ee37 7b06 	vadd.f64	d7, d7, d6
     e84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e88:	ee17 3a90 	vmov	r3, s15
     e8c:	613b      	str	r3, [r7, #16]

	while (1) {
//	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
     e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e90:	69b9      	ldr	r1, [r7, #24]
     e92:	69f8      	ldr	r0, [r7, #28]
     e94:	f7ff fac4 	bl	420 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     e98:	2200      	movs	r2, #0
     e9a:	2101      	movs	r1, #1
     e9c:	4818      	ldr	r0, [pc, #96]	; (f00 <MW_frequency_toggle+0x1c4>)
     e9e:	f000 f93b 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
     ea2:	4b18      	ldr	r3, [pc, #96]	; (f04 <MW_frequency_toggle+0x1c8>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     eaa:	4618      	mov	r0, r3
     eac:	f000 f88e 	bl	fcc <timer_delay>
//	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
     eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     eb2:	6939      	ldr	r1, [r7, #16]
     eb4:	6978      	ldr	r0, [r7, #20]
     eb6:	f7ff fab3 	bl	420 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     eba:	2201      	movs	r2, #1
     ebc:	2101      	movs	r1, #1
     ebe:	4810      	ldr	r0, [pc, #64]	; (f00 <MW_frequency_toggle+0x1c4>)
     ec0:	f000 f92a 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
     ec4:	4b0f      	ldr	r3, [pc, #60]	; (f04 <MW_frequency_toggle+0x1c8>)
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     ecc:	4618      	mov	r0, r3
     ece:	f000 f87d 	bl	fcc <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
     ed2:	e7dc      	b.n	e8e <MW_frequency_toggle+0x152>
     ed4:	f3af 8000 	nop.w
     ed8:	00000000 	.word	0x00000000
     edc:	41cdcd65 	.word	0x41cdcd65
     ee0:	20000000 	.word	0x20000000
     ee4:	41ee8c21 	.word	0x41ee8c21
     ee8:	00000000 	.word	0x00000000
     eec:	4187d784 	.word	0x4187d784
     ef0:	00000000 	.word	0x00000000
     ef4:	41700000 	.word	0x41700000
     ef8:	0801b5b4 	.word	0x0801b5b4
     efc:	0801b5d8 	.word	0x0801b5d8
     f00:	58021800 	.word	0x58021800
     f04:	20000018 	.word	0x20000018

00000f08 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
     f08:	b580      	push	{r7, lr}
     f0a:	b084      	sub	sp, #16
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
     f10:	2300      	movs	r3, #0
     f12:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
     f14:	687b      	ldr	r3, [r7, #4]
     f16:	2b1f      	cmp	r3, #31
     f18:	d904      	bls.n	f24 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
     f1a:	480d      	ldr	r0, [pc, #52]	; (f50 <set_SDO_output+0x48>)
     f1c:	f000 f8e4 	bl	10e8 <__puts_veneer>
		Error_Handler();
     f20:	f000 f8d2 	bl	10c8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
     f24:	200f      	movs	r0, #15
     f26:	f7ff f8e5 	bl	f4 <synth_readreg>
     f2a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	f023 031f 	bic.w	r3, r3, #31
     f32:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
     f34:	68fa      	ldr	r2, [r7, #12]
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	4313      	orrs	r3, r2
     f3a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
     f3c:	2301      	movs	r3, #1
     f3e:	2200      	movs	r2, #0
     f40:	210f      	movs	r1, #15
     f42:	68f8      	ldr	r0, [r7, #12]
     f44:	f7ff f85c 	bl	0 <synth_writereg>
}
     f48:	bf00      	nop
     f4a:	3710      	adds	r7, #16
     f4c:	46bd      	mov	sp, r7
     f4e:	bd80      	pop	{r7, pc}
     f50:	0801b600 	.word	0x0801b600

00000f54 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
     f54:	b480      	push	{r7}
     f56:	b083      	sub	sp, #12
     f58:	af00      	add	r7, sp, #0
     f5a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
     f5c:	687b      	ldr	r3, [r7, #4]
     f5e:	681b      	ldr	r3, [r3, #0]
     f60:	f023 0201 	bic.w	r2, r3, #1
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
     f68:	687b      	ldr	r3, [r7, #4]
     f6a:	695b      	ldr	r3, [r3, #20]
     f6c:	f043 0201 	orr.w	r2, r3, #1
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	f043 0201 	orr.w	r2, r3, #1
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     f84:	4618      	mov	r0, r3
     f86:	370c      	adds	r7, #12
     f88:	46bd      	mov	sp, r7
     f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8e:	4770      	bx	lr

00000f90 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
     f90:	b480      	push	{r7}
     f92:	b083      	sub	sp, #12
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	f023 0201 	bic.w	r2, r3, #1
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	601a      	str	r2, [r3, #0]
	return timer->CNT;
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     fa8:	4618      	mov	r0, r3
     faa:	370c      	adds	r7, #12
     fac:	46bd      	mov	sp, r7
     fae:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb2:	4770      	bx	lr

00000fb4 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
     fb4:	b480      	push	{r7}
     fb6:	b083      	sub	sp, #12
     fb8:	af00      	add	r7, sp, #0
     fba:	6078      	str	r0, [r7, #4]

	return timer->CNT;
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     fc0:	4618      	mov	r0, r3
     fc2:	370c      	adds	r7, #12
     fc4:	46bd      	mov	sp, r7
     fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     fca:	4770      	bx	lr

00000fcc <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
     fcc:	b580      	push	{r7, lr}
     fce:	b084      	sub	sp, #16
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
     fd4:	6039      	str	r1, [r7, #0]

	/* Note that we don't consider overflow.
	 * MW_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms */

	uint32_t start = start_timer(timer);
     fd6:	6878      	ldr	r0, [r7, #4]
     fd8:	f7ff ffbc 	bl	f54 <start_timer>
     fdc:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
     fde:	bf00      	nop
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fe4:	683a      	ldr	r2, [r7, #0]
     fe6:	429a      	cmp	r2, r3
     fe8:	d8fa      	bhi.n	fe0 <timer_delay+0x14>

	stop_timer(timer);
     fea:	6878      	ldr	r0, [r7, #4]
     fec:	f7ff ffd0 	bl	f90 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
     ff0:	bf00      	nop
     ff2:	3710      	adds	r7, #16
     ff4:	46bd      	mov	sp, r7
     ff6:	bd80      	pop	{r7, pc}

00000ff8 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
     ff8:	b580      	push	{r7, lr}
     ffa:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
     ffc:	f240 1103 	movw	r1, #259	; 0x103
    1000:	480f      	ldr	r0, [pc, #60]	; (1040 <start_pop+0x48>)
    1002:	f000 f87d 	bl	1100 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1006:	4603      	mov	r3, r0
    1008:	2b00      	cmp	r3, #0
    100a:	d004      	beq.n	1016 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    100c:	480d      	ldr	r0, [pc, #52]	; (1044 <start_pop+0x4c>)
    100e:	f000 f86b 	bl	10e8 <__puts_veneer>
		Error_Handler();
    1012:	f000 f859 	bl	10c8 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1016:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    101a:	4809      	ldr	r0, [pc, #36]	; (1040 <start_pop+0x48>)
    101c:	f000 f86c 	bl	10f8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1020:	4603      	mov	r3, r0
    1022:	2b00      	cmp	r3, #0
    1024:	d004      	beq.n	1030 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1026:	4808      	ldr	r0, [pc, #32]	; (1048 <start_pop+0x50>)
    1028:	f000 f85e 	bl	10e8 <__puts_veneer>
		Error_Handler();
    102c:	f000 f84c 	bl	10c8 <__Error_Handler_veneer>
	}

	pop_running = true;
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <start_pop+0x54>)
    1032:	2201      	movs	r2, #1
    1034:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1036:	4806      	ldr	r0, [pc, #24]	; (1050 <start_pop+0x58>)
    1038:	f000 f856 	bl	10e8 <__puts_veneer>

}
    103c:	bf00      	nop
    103e:	bd80      	pop	{r7, pc}
    1040:	2000037c 	.word	0x2000037c
    1044:	0801b624 	.word	0x0801b624
    1048:	0801b63c 	.word	0x0801b63c
    104c:	200005f0 	.word	0x200005f0
    1050:	0801b654 	.word	0x0801b654

00001054 <stop_pop>:
void stop_pop() {
    1054:	b580      	push	{r7, lr}
    1056:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1058:	f240 1103 	movw	r1, #259	; 0x103
    105c:	4813      	ldr	r0, [pc, #76]	; (10ac <stop_pop+0x58>)
    105e:	f000 f83b 	bl	10d8 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1062:	4603      	mov	r3, r0
    1064:	2b00      	cmp	r3, #0
    1066:	d004      	beq.n	1072 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1068:	4811      	ldr	r0, [pc, #68]	; (10b0 <stop_pop+0x5c>)
    106a:	f000 f83d 	bl	10e8 <__puts_veneer>
		Error_Handler();
    106e:	f000 f82b 	bl	10c8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1072:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1076:	480d      	ldr	r0, [pc, #52]	; (10ac <stop_pop+0x58>)
    1078:	f000 f846 	bl	1108 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    107c:	4603      	mov	r3, r0
    107e:	2b00      	cmp	r3, #0
    1080:	d004      	beq.n	108c <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1082:	480c      	ldr	r0, [pc, #48]	; (10b4 <stop_pop+0x60>)
    1084:	f000 f830 	bl	10e8 <__puts_veneer>
		Error_Handler();
    1088:	f000 f81e 	bl	10c8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    108c:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <stop_pop+0x64>)
    108e:	2200      	movs	r2, #0
    1090:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1092:	4b0a      	ldr	r3, [pc, #40]	; (10bc <stop_pop+0x68>)
    1094:	2200      	movs	r2, #0
    1096:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1098:	2200      	movs	r2, #0
    109a:	2102      	movs	r1, #2
    109c:	4808      	ldr	r0, [pc, #32]	; (10c0 <stop_pop+0x6c>)
    109e:	f000 f83b 	bl	1118 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    10a2:	4808      	ldr	r0, [pc, #32]	; (10c4 <stop_pop+0x70>)
    10a4:	f000 f820 	bl	10e8 <__puts_veneer>
}
    10a8:	bf00      	nop
    10aa:	bd80      	pop	{r7, pc}
    10ac:	2000037c 	.word	0x2000037c
    10b0:	0801b668 	.word	0x0801b668
    10b4:	0801b680 	.word	0x0801b680
    10b8:	200005ec 	.word	0x200005ec
    10bc:	200005f0 	.word	0x200005f0
    10c0:	58021000 	.word	0x58021000
    10c4:	0801b698 	.word	0x0801b698

000010c8 <__Error_Handler_veneer>:
    10c8:	f85f f000 	ldr.w	pc, [pc]	; 10cc <__Error_Handler_veneer+0x4>
    10cc:	080025a9 	.word	0x080025a9

000010d0 <__printf_veneer>:
    10d0:	f85f f000 	ldr.w	pc, [pc]	; 10d4 <__printf_veneer+0x4>
    10d4:	08018fe5 	.word	0x08018fe5

000010d8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    10d8:	f85f f000 	ldr.w	pc, [pc]	; 10dc <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    10dc:	08007591 	.word	0x08007591

000010e0 <__HAL_GPIO_ReadPin_veneer>:
    10e0:	f85f f000 	ldr.w	pc, [pc]	; 10e4 <__HAL_GPIO_ReadPin_veneer+0x4>
    10e4:	08006e45 	.word	0x08006e45

000010e8 <__puts_veneer>:
    10e8:	f85f f000 	ldr.w	pc, [pc]	; 10ec <__puts_veneer+0x4>
    10ec:	080190b1 	.word	0x080190b1

000010f0 <__HAL_GPIO_TogglePin_veneer>:
    10f0:	f85f f000 	ldr.w	pc, [pc]	; 10f4 <__HAL_GPIO_TogglePin_veneer+0x4>
    10f4:	08006ea7 	.word	0x08006ea7

000010f8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    10f8:	f85f f000 	ldr.w	pc, [pc]	; 10fc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    10fc:	080075ed 	.word	0x080075ed

00001100 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1100:	f85f f000 	ldr.w	pc, [pc]	; 1104 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1104:	08007537 	.word	0x08007537

00001108 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1108:	f85f f000 	ldr.w	pc, [pc]	; 110c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    110c:	080076cd 	.word	0x080076cd

00001110 <__HAL_Delay_veneer>:
    1110:	f85f f000 	ldr.w	pc, [pc]	; 1114 <__HAL_Delay_veneer+0x4>
    1114:	08003399 	.word	0x08003399

00001118 <__HAL_GPIO_WritePin_veneer>:
    1118:	f85f f000 	ldr.w	pc, [pc]	; 111c <__HAL_GPIO_WritePin_veneer+0x4>
    111c:	08006e75 	.word	0x08006e75

Disassembly of section .text:

080013c0 <__do_global_dtors_aux>:
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4c05      	ldr	r4, [pc, #20]	; (80013d8 <__do_global_dtors_aux+0x18>)
 80013c4:	7823      	ldrb	r3, [r4, #0]
 80013c6:	b933      	cbnz	r3, 80013d6 <__do_global_dtors_aux+0x16>
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__do_global_dtors_aux+0x1c>)
 80013ca:	b113      	cbz	r3, 80013d2 <__do_global_dtors_aux+0x12>
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <__do_global_dtors_aux+0x20>)
 80013ce:	f3af 8000 	nop.w
 80013d2:	2301      	movs	r3, #1
 80013d4:	7023      	strb	r3, [r4, #0]
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	200002e8 	.word	0x200002e8
 80013dc:	00000000 	.word	0x00000000
 80013e0:	0801aee8 	.word	0x0801aee8

080013e4 <frame_dummy>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <frame_dummy+0x10>)
 80013e8:	b11b      	cbz	r3, 80013f2 <frame_dummy+0xe>
 80013ea:	4903      	ldr	r1, [pc, #12]	; (80013f8 <frame_dummy+0x14>)
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <frame_dummy+0x18>)
 80013ee:	f3af 8000 	nop.w
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	00000000 	.word	0x00000000
 80013f8:	200002ec 	.word	0x200002ec
 80013fc:	0801aee8 	.word	0x0801aee8

08001400 <memchr>:
 8001400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001404:	2a10      	cmp	r2, #16
 8001406:	db2b      	blt.n	8001460 <memchr+0x60>
 8001408:	f010 0f07 	tst.w	r0, #7
 800140c:	d008      	beq.n	8001420 <memchr+0x20>
 800140e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001412:	3a01      	subs	r2, #1
 8001414:	428b      	cmp	r3, r1
 8001416:	d02d      	beq.n	8001474 <memchr+0x74>
 8001418:	f010 0f07 	tst.w	r0, #7
 800141c:	b342      	cbz	r2, 8001470 <memchr+0x70>
 800141e:	d1f6      	bne.n	800140e <memchr+0xe>
 8001420:	b4f0      	push	{r4, r5, r6, r7}
 8001422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800142a:	f022 0407 	bic.w	r4, r2, #7
 800142e:	f07f 0700 	mvns.w	r7, #0
 8001432:	2300      	movs	r3, #0
 8001434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001438:	3c08      	subs	r4, #8
 800143a:	ea85 0501 	eor.w	r5, r5, r1
 800143e:	ea86 0601 	eor.w	r6, r6, r1
 8001442:	fa85 f547 	uadd8	r5, r5, r7
 8001446:	faa3 f587 	sel	r5, r3, r7
 800144a:	fa86 f647 	uadd8	r6, r6, r7
 800144e:	faa5 f687 	sel	r6, r5, r7
 8001452:	b98e      	cbnz	r6, 8001478 <memchr+0x78>
 8001454:	d1ee      	bne.n	8001434 <memchr+0x34>
 8001456:	bcf0      	pop	{r4, r5, r6, r7}
 8001458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800145c:	f002 0207 	and.w	r2, r2, #7
 8001460:	b132      	cbz	r2, 8001470 <memchr+0x70>
 8001462:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001466:	3a01      	subs	r2, #1
 8001468:	ea83 0301 	eor.w	r3, r3, r1
 800146c:	b113      	cbz	r3, 8001474 <memchr+0x74>
 800146e:	d1f8      	bne.n	8001462 <memchr+0x62>
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr
 8001474:	3801      	subs	r0, #1
 8001476:	4770      	bx	lr
 8001478:	2d00      	cmp	r5, #0
 800147a:	bf06      	itte	eq
 800147c:	4635      	moveq	r5, r6
 800147e:	3803      	subeq	r0, #3
 8001480:	3807      	subne	r0, #7
 8001482:	f015 0f01 	tst.w	r5, #1
 8001486:	d107      	bne.n	8001498 <memchr+0x98>
 8001488:	3001      	adds	r0, #1
 800148a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800148e:	bf02      	ittt	eq
 8001490:	3001      	addeq	r0, #1
 8001492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001496:	3001      	addeq	r0, #1
 8001498:	bcf0      	pop	{r4, r5, r6, r7}
 800149a:	3801      	subs	r0, #1
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <strlen>:
 80014a0:	4603      	mov	r3, r0
 80014a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d1fb      	bne.n	80014a2 <strlen+0x2>
 80014aa:	1a18      	subs	r0, r3, r0
 80014ac:	3801      	subs	r0, #1
 80014ae:	4770      	bx	lr

080014b0 <__aeabi_uldivmod>:
 80014b0:	b953      	cbnz	r3, 80014c8 <__aeabi_uldivmod+0x18>
 80014b2:	b94a      	cbnz	r2, 80014c8 <__aeabi_uldivmod+0x18>
 80014b4:	2900      	cmp	r1, #0
 80014b6:	bf08      	it	eq
 80014b8:	2800      	cmpeq	r0, #0
 80014ba:	bf1c      	itt	ne
 80014bc:	f04f 31ff 	movne.w	r1, #4294967295
 80014c0:	f04f 30ff 	movne.w	r0, #4294967295
 80014c4:	f000 b970 	b.w	80017a8 <__aeabi_idiv0>
 80014c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80014cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80014d0:	f000 f806 	bl	80014e0 <__udivmoddi4>
 80014d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014dc:	b004      	add	sp, #16
 80014de:	4770      	bx	lr

080014e0 <__udivmoddi4>:
 80014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e4:	9e08      	ldr	r6, [sp, #32]
 80014e6:	460d      	mov	r5, r1
 80014e8:	4604      	mov	r4, r0
 80014ea:	460f      	mov	r7, r1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d14a      	bne.n	8001586 <__udivmoddi4+0xa6>
 80014f0:	428a      	cmp	r2, r1
 80014f2:	4694      	mov	ip, r2
 80014f4:	d965      	bls.n	80015c2 <__udivmoddi4+0xe2>
 80014f6:	fab2 f382 	clz	r3, r2
 80014fa:	b143      	cbz	r3, 800150e <__udivmoddi4+0x2e>
 80014fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001500:	f1c3 0220 	rsb	r2, r3, #32
 8001504:	409f      	lsls	r7, r3
 8001506:	fa20 f202 	lsr.w	r2, r0, r2
 800150a:	4317      	orrs	r7, r2
 800150c:	409c      	lsls	r4, r3
 800150e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001512:	fa1f f58c 	uxth.w	r5, ip
 8001516:	fbb7 f1fe 	udiv	r1, r7, lr
 800151a:	0c22      	lsrs	r2, r4, #16
 800151c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001520:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001524:	fb01 f005 	mul.w	r0, r1, r5
 8001528:	4290      	cmp	r0, r2
 800152a:	d90a      	bls.n	8001542 <__udivmoddi4+0x62>
 800152c:	eb1c 0202 	adds.w	r2, ip, r2
 8001530:	f101 37ff 	add.w	r7, r1, #4294967295
 8001534:	f080 811c 	bcs.w	8001770 <__udivmoddi4+0x290>
 8001538:	4290      	cmp	r0, r2
 800153a:	f240 8119 	bls.w	8001770 <__udivmoddi4+0x290>
 800153e:	3902      	subs	r1, #2
 8001540:	4462      	add	r2, ip
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	b2a4      	uxth	r4, r4
 8001546:	fbb2 f0fe 	udiv	r0, r2, lr
 800154a:	fb0e 2210 	mls	r2, lr, r0, r2
 800154e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001552:	fb00 f505 	mul.w	r5, r0, r5
 8001556:	42a5      	cmp	r5, r4
 8001558:	d90a      	bls.n	8001570 <__udivmoddi4+0x90>
 800155a:	eb1c 0404 	adds.w	r4, ip, r4
 800155e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001562:	f080 8107 	bcs.w	8001774 <__udivmoddi4+0x294>
 8001566:	42a5      	cmp	r5, r4
 8001568:	f240 8104 	bls.w	8001774 <__udivmoddi4+0x294>
 800156c:	4464      	add	r4, ip
 800156e:	3802      	subs	r0, #2
 8001570:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001574:	1b64      	subs	r4, r4, r5
 8001576:	2100      	movs	r1, #0
 8001578:	b11e      	cbz	r6, 8001582 <__udivmoddi4+0xa2>
 800157a:	40dc      	lsrs	r4, r3
 800157c:	2300      	movs	r3, #0
 800157e:	e9c6 4300 	strd	r4, r3, [r6]
 8001582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001586:	428b      	cmp	r3, r1
 8001588:	d908      	bls.n	800159c <__udivmoddi4+0xbc>
 800158a:	2e00      	cmp	r6, #0
 800158c:	f000 80ed 	beq.w	800176a <__udivmoddi4+0x28a>
 8001590:	2100      	movs	r1, #0
 8001592:	e9c6 0500 	strd	r0, r5, [r6]
 8001596:	4608      	mov	r0, r1
 8001598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800159c:	fab3 f183 	clz	r1, r3
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d149      	bne.n	8001638 <__udivmoddi4+0x158>
 80015a4:	42ab      	cmp	r3, r5
 80015a6:	d302      	bcc.n	80015ae <__udivmoddi4+0xce>
 80015a8:	4282      	cmp	r2, r0
 80015aa:	f200 80f8 	bhi.w	800179e <__udivmoddi4+0x2be>
 80015ae:	1a84      	subs	r4, r0, r2
 80015b0:	eb65 0203 	sbc.w	r2, r5, r3
 80015b4:	2001      	movs	r0, #1
 80015b6:	4617      	mov	r7, r2
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d0e2      	beq.n	8001582 <__udivmoddi4+0xa2>
 80015bc:	e9c6 4700 	strd	r4, r7, [r6]
 80015c0:	e7df      	b.n	8001582 <__udivmoddi4+0xa2>
 80015c2:	b902      	cbnz	r2, 80015c6 <__udivmoddi4+0xe6>
 80015c4:	deff      	udf	#255	; 0xff
 80015c6:	fab2 f382 	clz	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 8090 	bne.w	80016f0 <__udivmoddi4+0x210>
 80015d0:	1a8a      	subs	r2, r1, r2
 80015d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80015d6:	fa1f fe8c 	uxth.w	lr, ip
 80015da:	2101      	movs	r1, #1
 80015dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80015e0:	fb07 2015 	mls	r0, r7, r5, r2
 80015e4:	0c22      	lsrs	r2, r4, #16
 80015e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80015ea:	fb0e f005 	mul.w	r0, lr, r5
 80015ee:	4290      	cmp	r0, r2
 80015f0:	d908      	bls.n	8001604 <__udivmoddi4+0x124>
 80015f2:	eb1c 0202 	adds.w	r2, ip, r2
 80015f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80015fa:	d202      	bcs.n	8001602 <__udivmoddi4+0x122>
 80015fc:	4290      	cmp	r0, r2
 80015fe:	f200 80cb 	bhi.w	8001798 <__udivmoddi4+0x2b8>
 8001602:	4645      	mov	r5, r8
 8001604:	1a12      	subs	r2, r2, r0
 8001606:	b2a4      	uxth	r4, r4
 8001608:	fbb2 f0f7 	udiv	r0, r2, r7
 800160c:	fb07 2210 	mls	r2, r7, r0, r2
 8001610:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001614:	fb0e fe00 	mul.w	lr, lr, r0
 8001618:	45a6      	cmp	lr, r4
 800161a:	d908      	bls.n	800162e <__udivmoddi4+0x14e>
 800161c:	eb1c 0404 	adds.w	r4, ip, r4
 8001620:	f100 32ff 	add.w	r2, r0, #4294967295
 8001624:	d202      	bcs.n	800162c <__udivmoddi4+0x14c>
 8001626:	45a6      	cmp	lr, r4
 8001628:	f200 80bb 	bhi.w	80017a2 <__udivmoddi4+0x2c2>
 800162c:	4610      	mov	r0, r2
 800162e:	eba4 040e 	sub.w	r4, r4, lr
 8001632:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001636:	e79f      	b.n	8001578 <__udivmoddi4+0x98>
 8001638:	f1c1 0720 	rsb	r7, r1, #32
 800163c:	408b      	lsls	r3, r1
 800163e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001642:	ea4c 0c03 	orr.w	ip, ip, r3
 8001646:	fa05 f401 	lsl.w	r4, r5, r1
 800164a:	fa20 f307 	lsr.w	r3, r0, r7
 800164e:	40fd      	lsrs	r5, r7
 8001650:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001654:	4323      	orrs	r3, r4
 8001656:	fbb5 f8f9 	udiv	r8, r5, r9
 800165a:	fa1f fe8c 	uxth.w	lr, ip
 800165e:	fb09 5518 	mls	r5, r9, r8, r5
 8001662:	0c1c      	lsrs	r4, r3, #16
 8001664:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001668:	fb08 f50e 	mul.w	r5, r8, lr
 800166c:	42a5      	cmp	r5, r4
 800166e:	fa02 f201 	lsl.w	r2, r2, r1
 8001672:	fa00 f001 	lsl.w	r0, r0, r1
 8001676:	d90b      	bls.n	8001690 <__udivmoddi4+0x1b0>
 8001678:	eb1c 0404 	adds.w	r4, ip, r4
 800167c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001680:	f080 8088 	bcs.w	8001794 <__udivmoddi4+0x2b4>
 8001684:	42a5      	cmp	r5, r4
 8001686:	f240 8085 	bls.w	8001794 <__udivmoddi4+0x2b4>
 800168a:	f1a8 0802 	sub.w	r8, r8, #2
 800168e:	4464      	add	r4, ip
 8001690:	1b64      	subs	r4, r4, r5
 8001692:	b29d      	uxth	r5, r3
 8001694:	fbb4 f3f9 	udiv	r3, r4, r9
 8001698:	fb09 4413 	mls	r4, r9, r3, r4
 800169c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80016a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80016a4:	45a6      	cmp	lr, r4
 80016a6:	d908      	bls.n	80016ba <__udivmoddi4+0x1da>
 80016a8:	eb1c 0404 	adds.w	r4, ip, r4
 80016ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80016b0:	d26c      	bcs.n	800178c <__udivmoddi4+0x2ac>
 80016b2:	45a6      	cmp	lr, r4
 80016b4:	d96a      	bls.n	800178c <__udivmoddi4+0x2ac>
 80016b6:	3b02      	subs	r3, #2
 80016b8:	4464      	add	r4, ip
 80016ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80016be:	fba3 9502 	umull	r9, r5, r3, r2
 80016c2:	eba4 040e 	sub.w	r4, r4, lr
 80016c6:	42ac      	cmp	r4, r5
 80016c8:	46c8      	mov	r8, r9
 80016ca:	46ae      	mov	lr, r5
 80016cc:	d356      	bcc.n	800177c <__udivmoddi4+0x29c>
 80016ce:	d053      	beq.n	8001778 <__udivmoddi4+0x298>
 80016d0:	b156      	cbz	r6, 80016e8 <__udivmoddi4+0x208>
 80016d2:	ebb0 0208 	subs.w	r2, r0, r8
 80016d6:	eb64 040e 	sbc.w	r4, r4, lr
 80016da:	fa04 f707 	lsl.w	r7, r4, r7
 80016de:	40ca      	lsrs	r2, r1
 80016e0:	40cc      	lsrs	r4, r1
 80016e2:	4317      	orrs	r7, r2
 80016e4:	e9c6 7400 	strd	r7, r4, [r6]
 80016e8:	4618      	mov	r0, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f0:	f1c3 0120 	rsb	r1, r3, #32
 80016f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80016f8:	fa20 f201 	lsr.w	r2, r0, r1
 80016fc:	fa25 f101 	lsr.w	r1, r5, r1
 8001700:	409d      	lsls	r5, r3
 8001702:	432a      	orrs	r2, r5
 8001704:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001708:	fa1f fe8c 	uxth.w	lr, ip
 800170c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001710:	fb07 1510 	mls	r5, r7, r0, r1
 8001714:	0c11      	lsrs	r1, r2, #16
 8001716:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800171a:	fb00 f50e 	mul.w	r5, r0, lr
 800171e:	428d      	cmp	r5, r1
 8001720:	fa04 f403 	lsl.w	r4, r4, r3
 8001724:	d908      	bls.n	8001738 <__udivmoddi4+0x258>
 8001726:	eb1c 0101 	adds.w	r1, ip, r1
 800172a:	f100 38ff 	add.w	r8, r0, #4294967295
 800172e:	d22f      	bcs.n	8001790 <__udivmoddi4+0x2b0>
 8001730:	428d      	cmp	r5, r1
 8001732:	d92d      	bls.n	8001790 <__udivmoddi4+0x2b0>
 8001734:	3802      	subs	r0, #2
 8001736:	4461      	add	r1, ip
 8001738:	1b49      	subs	r1, r1, r5
 800173a:	b292      	uxth	r2, r2
 800173c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001740:	fb07 1115 	mls	r1, r7, r5, r1
 8001744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001748:	fb05 f10e 	mul.w	r1, r5, lr
 800174c:	4291      	cmp	r1, r2
 800174e:	d908      	bls.n	8001762 <__udivmoddi4+0x282>
 8001750:	eb1c 0202 	adds.w	r2, ip, r2
 8001754:	f105 38ff 	add.w	r8, r5, #4294967295
 8001758:	d216      	bcs.n	8001788 <__udivmoddi4+0x2a8>
 800175a:	4291      	cmp	r1, r2
 800175c:	d914      	bls.n	8001788 <__udivmoddi4+0x2a8>
 800175e:	3d02      	subs	r5, #2
 8001760:	4462      	add	r2, ip
 8001762:	1a52      	subs	r2, r2, r1
 8001764:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001768:	e738      	b.n	80015dc <__udivmoddi4+0xfc>
 800176a:	4631      	mov	r1, r6
 800176c:	4630      	mov	r0, r6
 800176e:	e708      	b.n	8001582 <__udivmoddi4+0xa2>
 8001770:	4639      	mov	r1, r7
 8001772:	e6e6      	b.n	8001542 <__udivmoddi4+0x62>
 8001774:	4610      	mov	r0, r2
 8001776:	e6fb      	b.n	8001570 <__udivmoddi4+0x90>
 8001778:	4548      	cmp	r0, r9
 800177a:	d2a9      	bcs.n	80016d0 <__udivmoddi4+0x1f0>
 800177c:	ebb9 0802 	subs.w	r8, r9, r2
 8001780:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001784:	3b01      	subs	r3, #1
 8001786:	e7a3      	b.n	80016d0 <__udivmoddi4+0x1f0>
 8001788:	4645      	mov	r5, r8
 800178a:	e7ea      	b.n	8001762 <__udivmoddi4+0x282>
 800178c:	462b      	mov	r3, r5
 800178e:	e794      	b.n	80016ba <__udivmoddi4+0x1da>
 8001790:	4640      	mov	r0, r8
 8001792:	e7d1      	b.n	8001738 <__udivmoddi4+0x258>
 8001794:	46d0      	mov	r8, sl
 8001796:	e77b      	b.n	8001690 <__udivmoddi4+0x1b0>
 8001798:	3d02      	subs	r5, #2
 800179a:	4462      	add	r2, ip
 800179c:	e732      	b.n	8001604 <__udivmoddi4+0x124>
 800179e:	4608      	mov	r0, r1
 80017a0:	e70a      	b.n	80015b8 <__udivmoddi4+0xd8>
 80017a2:	4464      	add	r4, ip
 80017a4:	3802      	subs	r0, #2
 80017a6:	e742      	b.n	800162e <__udivmoddi4+0x14e>

080017a8 <__aeabi_idiv0>:
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80017b4:	1d39      	adds	r1, r7, #4
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	2201      	movs	r2, #1
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <__io_putchar+0x20>)
 80017be:	f00b fbc9 	bl	800cf54 <HAL_UART_Transmit>
	return ch;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000528 	.word	0x20000528

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80017d6:	4ab4      	ldr	r2, [pc, #720]	; (8001aa8 <main+0x2d8>)
 80017d8:	4bb4      	ldr	r3, [pc, #720]	; (8001aac <main+0x2dc>)
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	49b4      	ldr	r1, [pc, #720]	; (8001ab0 <main+0x2e0>)
 80017e0:	48b2      	ldr	r0, [pc, #712]	; (8001aac <main+0x2dc>)
 80017e2:	f017 fdcd 	bl	8019380 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80017e6:	4bb3      	ldr	r3, [pc, #716]	; (8001ab4 <main+0x2e4>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11b      	bne.n	800182a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
}
 80017f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f8:	f3bf 8f6f 	isb	sy
}
 80017fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017fe:	4bad      	ldr	r3, [pc, #692]	; (8001ab4 <main+0x2e4>)
 8001800:	2200      	movs	r2, #0
 8001802:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001806:	f3bf 8f4f 	dsb	sy
}
 800180a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800180c:	f3bf 8f6f 	isb	sy
}
 8001810:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001812:	4ba8      	ldr	r3, [pc, #672]	; (8001ab4 <main+0x2e4>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4aa7      	ldr	r2, [pc, #668]	; (8001ab4 <main+0x2e4>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800181e:	f3bf 8f4f 	dsb	sy
}
 8001822:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001824:	f3bf 8f6f 	isb	sy
}
 8001828:	e000      	b.n	800182c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800182a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800182c:	4ba1      	ldr	r3, [pc, #644]	; (8001ab4 <main+0x2e4>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d138      	bne.n	80018aa <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001838:	4b9e      	ldr	r3, [pc, #632]	; (8001ab4 <main+0x2e4>)
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001840:	f3bf 8f4f 	dsb	sy
}
 8001844:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001846:	4b9b      	ldr	r3, [pc, #620]	; (8001ab4 <main+0x2e4>)
 8001848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0b5b      	lsrs	r3, r3, #13
 8001852:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001856:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001860:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800186a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001870:	4990      	ldr	r1, [pc, #576]	; (8001ab4 <main+0x2e4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <main+0x92>
    } while(sets-- != 0U);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e5      	bne.n	8001858 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800188c:	f3bf 8f4f 	dsb	sy
}
 8001890:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <main+0x2e4>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a87      	ldr	r2, [pc, #540]	; (8001ab4 <main+0x2e4>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800189e:	f3bf 8f4f 	dsb	sy
}
 80018a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a4:	f3bf 8f6f 	isb	sy
}
 80018a8:	e000      	b.n	80018ac <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80018aa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ac:	f001 fce2 	bl	8003274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b0:	f000 f93a 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b4:	f000 fcfa 	bl	80022ac <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80018b8:	f000 fbda 	bl	8002070 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80018bc:	f000 fa54 	bl	8001d68 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80018c0:	f000 fca6 	bl	8002210 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80018c4:	f000 fc56 	bl	8002174 <MX_TIM3_Init>
  MX_TIM1_Init();
 80018c8:	f000 fc00 	bl	80020cc <MX_TIM1_Init>
  MX_HRTIM_Init();
 80018cc:	f000 fa7e 	bl	8001dcc <MX_HRTIM_Init>
  MX_ADC3_Init();
 80018d0:	f000 f9e8 	bl	8001ca4 <MX_ADC3_Init>
  MX_LWIP_Init();
 80018d4:	f00c fc52 	bl	800e17c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80018d8:	4877      	ldr	r0, [pc, #476]	; (8001ab8 <main+0x2e8>)
 80018da:	f017 fb83 	bl	8018fe4 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80018de:	4977      	ldr	r1, [pc, #476]	; (8001abc <main+0x2ec>)
 80018e0:	4877      	ldr	r0, [pc, #476]	; (8001ac0 <main+0x2f0>)
 80018e2:	f017 fb7f 	bl	8018fe4 <iprintf>

	#ifdef SYNTH_ENABLE
		if (init_synthesiser(MW_power) != SUCCESS) {
 80018e6:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <main+0x2f4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f019 fb18 	bl	801af20 <__init_synthesiser_veneer>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <main+0x130>
			printf("Synthesiser initialisation failed!\r\n");
 80018f6:	4874      	ldr	r0, [pc, #464]	; (8001ac8 <main+0x2f8>)
 80018f8:	f017 fbda 	bl	80190b0 <puts>
			Error_Handler();
 80018fc:	f000 fe54 	bl	80025a8 <Error_Handler>
		}
		#ifdef MW_VERBOSE
			printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <main+0x2f4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	4871      	ldr	r0, [pc, #452]	; (8001acc <main+0x2fc>)
 8001908:	f017 fb6c 	bl	8018fe4 <iprintf>
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800190c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001910:	486f      	ldr	r0, [pc, #444]	; (8001ad0 <main+0x300>)
 8001912:	f006 febb 	bl	800868c <HAL_LPTIM_Counter_Start_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 800191c:	486d      	ldr	r0, [pc, #436]	; (8001ad4 <main+0x304>)
 800191e:	f017 fbc7 	bl	80190b0 <puts>
		Error_Handler();
 8001922:	f000 fe41 	bl	80025a8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001926:	2100      	movs	r1, #0
 8001928:	486b      	ldr	r0, [pc, #428]	; (8001ad8 <main+0x308>)
 800192a:	f003 fc26 	bl	800517a <HAL_DAC_Start>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001934:	4869      	ldr	r0, [pc, #420]	; (8001adc <main+0x30c>)
 8001936:	f017 fbbb 	bl	80190b0 <puts>
		Error_Handler();
 800193a:	f000 fe35 	bl	80025a8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800193e:	4868      	ldr	r0, [pc, #416]	; (8001ae0 <main+0x310>)
 8001940:	f017 fbb6 	bl	80190b0 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001944:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	4862      	ldr	r0, [pc, #392]	; (8001ad8 <main+0x308>)
 800194e:	f003 fc66 	bl	800521e <HAL_DAC_SetValue>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <main+0x192>
			printf("DAC setup failed!\r\n");
 8001958:	4862      	ldr	r0, [pc, #392]	; (8001ae4 <main+0x314>)
 800195a:	f017 fba9 	bl	80190b0 <puts>
		Error_Handler();
 800195e:	f000 fe23 	bl	80025a8 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001968:	485f      	ldr	r0, [pc, #380]	; (8001ae8 <main+0x318>)
 800196a:	f005 fa83 	bl	8006e74 <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800196e:	485f      	ldr	r0, [pc, #380]	; (8001aec <main+0x31c>)
 8001970:	f017 fb9e 	bl	80190b0 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001974:	485e      	ldr	r0, [pc, #376]	; (8001af0 <main+0x320>)
 8001976:	f017 fb9b 	bl	80190b0 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 800197a:	2200      	movs	r2, #0
 800197c:	2102      	movs	r1, #2
 800197e:	485a      	ldr	r0, [pc, #360]	; (8001ae8 <main+0x318>)
 8001980:	f005 fa78 	bl	8006e74 <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001984:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001988:	2100      	movs	r1, #0
 800198a:	485a      	ldr	r0, [pc, #360]	; (8001af4 <main+0x324>)
 800198c:	f003 fa2e 	bl	8004dec <HAL_ADCEx_Calibration_Start>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <main+0x1d0>
		printf("ADC calibration failure \r\n");
 8001996:	4858      	ldr	r0, [pc, #352]	; (8001af8 <main+0x328>)
 8001998:	f017 fb8a 	bl	80190b0 <puts>
		Error_Handler();
 800199c:	f000 fe04 	bl	80025a8 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 80019a0:	4856      	ldr	r0, [pc, #344]	; (8001afc <main+0x32c>)
 80019a2:	f017 fb85 	bl	80190b0 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80019a6:	4853      	ldr	r0, [pc, #332]	; (8001af4 <main+0x324>)
 80019a8:	f002 f90e 	bl	8003bc8 <HAL_ADC_Start_IT>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80019b2:	4853      	ldr	r0, [pc, #332]	; (8001b00 <main+0x330>)
 80019b4:	f017 fb7c 	bl	80190b0 <puts>
	                Error_Handler();
 80019b8:	f000 fdf6 	bl	80025a8 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80019bc:	4851      	ldr	r0, [pc, #324]	; (8001b04 <main+0x334>)
 80019be:	f017 fb77 	bl	80190b0 <puts>
//	calc_fixed_time_MW_sweep(3035735539, 1900, 5.7); //1.8kHz sweep, 22s - FIRST POP
//	calc_fixed_time_MW_sweep(3035735122, 1900, 5.7); //1.8kHz sweep, 22s re-centred
//	calc_fixed_time_MW_sweep(3035735122, 1500, 20, true); //1.5kHz sweep, 20s re-centred - TIMER OVERFLOW
//	calc_fixed_time_MW_sweep(3035735122, 1500, 10, true); //1.5kHz sweep, 10s re-centred - TIMER OVERFLOW
//	calc_defined_step_MW_sweep(3035735122, 1500, 1, 1001); //1.5kHz sweep, 1 POP cycle per step, 1001 points, 17.4s
	calc_defined_step_MW_sweep(3035735122, 1000, 1, 1001); //1kHz sweep, 1 POP cycle per step, 1001 points,
 80019c2:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80019c6:	2001      	movs	r0, #1
 80019c8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001a98 <main+0x2c8>
 80019cc:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001aa0 <main+0x2d0>
 80019d0:	f019 fa96 	bl	801af00 <__calc_defined_step_MW_sweep_veneer>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80019d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d8:	484b      	ldr	r0, [pc, #300]	; (8001b08 <main+0x338>)
 80019da:	f005 fa33 	bl	8006e44 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <main+0x33c>)
 80019ec:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <main+0x33c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d04a      	beq.n	8001a8e <main+0x2be>
			printf("Blue button pressed....\r\n");
 80019f8:	4845      	ldr	r0, [pc, #276]	; (8001b10 <main+0x340>)
 80019fa:	f017 fb59 	bl	80190b0 <puts>
			printf("Requesting FPGA POP \r\n");
 80019fe:	4845      	ldr	r0, [pc, #276]	; (8001b14 <main+0x344>)
 8001a00:	f017 fb56 	bl	80190b0 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0a:	4837      	ldr	r0, [pc, #220]	; (8001ae8 <main+0x318>)
 8001a0c:	f005 fa32 	bl	8006e74 <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <main+0x348>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d018      	beq.n	8001a4c <main+0x27c>
				++MW_power; //increase MW_power value by 1
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <main+0x2f4>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <main+0x2f4>)
 8001a24:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <main+0x2f4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d902      	bls.n	8001a34 <main+0x264>
					MW_power = 0;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <main+0x2f4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <main+0x2f4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f019 fa75 	bl	801af28 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <main+0x2f4>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4835      	ldr	r0, [pc, #212]	; (8001b1c <main+0x34c>)
 8001a46:	f017 facd 	bl	8018fe4 <iprintf>
 8001a4a:	e01b      	b.n	8001a84 <main+0x2b4>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001a4c:	4834      	ldr	r0, [pc, #208]	; (8001b20 <main+0x350>)
 8001a4e:	f017 fb2f 	bl	80190b0 <puts>
				mw_sweep_started = true;
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <main+0x348>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
				start_MW_sweep();
 8001a58:	f019 fa6e 	bl	801af38 <__start_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001a5c:	e012      	b.n	8001a84 <main+0x2b4>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <main+0x354>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2164      	movs	r1, #100	; 0x64
 8001a64:	4618      	mov	r0, r3
 8001a66:	f019 fa57 	bl	801af18 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6e:	4826      	ldr	r0, [pc, #152]	; (8001b08 <main+0x338>)
 8001a70:	f005 f9e8 	bl	8006e44 <HAL_GPIO_ReadPin>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <main+0x33c>)
 8001a82:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <main+0x33c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e7      	bne.n	8001a5e <main+0x28e>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <main+0x348>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001a92:	f019 fa3d 	bl	801af10 <__MW_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001a96:	e79d      	b.n	80019d4 <main+0x204>
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	408f4000 	.word	0x408f4000
 8001aa0:	8a400000 	.word	0x8a400000
 8001aa4:	41e69e34 	.word	0x41e69e34
 8001aa8:	00001120 	.word	0x00001120
 8001aac:	00000000 	.word	0x00000000
 8001ab0:	08000298 	.word	0x08000298
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	0801af40 	.word	0x0801af40
 8001abc:	0801af44 	.word	0x0801af44
 8001ac0:	0801af60 	.word	0x0801af60
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	0801af8c 	.word	0x0801af8c
 8001acc:	0801afb0 	.word	0x0801afb0
 8001ad0:	20000458 	.word	0x20000458
 8001ad4:	0801afc8 	.word	0x0801afc8
 8001ad8:	20000368 	.word	0x20000368
 8001adc:	0801afec 	.word	0x0801afec
 8001ae0:	0801b008 	.word	0x0801b008
 8001ae4:	0801b028 	.word	0x0801b028
 8001ae8:	58020400 	.word	0x58020400
 8001aec:	0801b03c 	.word	0x0801b03c
 8001af0:	0801b05c 	.word	0x0801b05c
 8001af4:	20000304 	.word	0x20000304
 8001af8:	0801b07c 	.word	0x0801b07c
 8001afc:	0801b098 	.word	0x0801b098
 8001b00:	0801b0b8 	.word	0x0801b0b8
 8001b04:	0801b0e8 	.word	0x0801b0e8
 8001b08:	58020800 	.word	0x58020800
 8001b0c:	200005bd 	.word	0x200005bd
 8001b10:	0801b10c 	.word	0x0801b10c
 8001b14:	0801b128 	.word	0x0801b128
 8001b18:	200005bc 	.word	0x200005bc
 8001b1c:	0801b140 	.word	0x0801b140
 8001b20:	0801b15c 	.word	0x0801b15c
 8001b24:	20000018 	.word	0x20000018

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0a4      	sub	sp, #144	; 0x90
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b32:	224c      	movs	r2, #76	; 0x4c
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f017 fbaa 	bl	8019290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2220      	movs	r2, #32
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fba3 	bl	8019290 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f007 f8f3 	bl	8008d48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <SystemClock_Config+0x170>)
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <SystemClock_Config+0x170>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <SystemClock_Config+0x170>)
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <SystemClock_Config+0x174>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a46      	ldr	r2, [pc, #280]	; (8001c9c <SystemClock_Config+0x174>)
 8001b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <SystemClock_Config+0x174>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b94:	bf00      	nop
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <SystemClock_Config+0x174>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d1f8      	bne.n	8001b96 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba4:	f007 f8c0 	bl	8008d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ba8:	f001 fc1a 	bl	80033e0 <HAL_GetREVID>
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <SystemClock_Config+0x178>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <SystemClock_Config+0x178>)
 8001bb2:	f023 0318 	bic.w	r3, r3, #24
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001bb8:	2325      	movs	r3, #37	; 0x25
 8001bba:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001bd6:	2350      	movs	r3, #80	; 0x50
 8001bd8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bde:	2304      	movs	r3, #4
 8001be0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001be8:	230c      	movs	r3, #12
 8001bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 f8dc 	bl	8008dbc <HAL_RCC_OscConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001c0a:	f000 fccd 	bl	80025a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0e:	233f      	movs	r3, #63	; 0x3f
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001c1a:	2309      	movs	r3, #9
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001c26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f007 fd1a 	bl	8009670 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001c42:	f000 fcb1 	bl	80025a8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001c46:	f007 fec9 	bl	80099dc <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <SystemClock_Config+0x178>)
 8001c4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <SystemClock_Config+0x178>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <SystemClock_Config+0x178>)
 8001c5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c70:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001c76:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001c7a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001c7c:	2322      	movs	r3, #34	; 0x22
 8001c7e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001c80:	2320      	movs	r3, #32
 8001c82:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00a fc43 	bl	800c514 <HAL_RCCEx_CRSConfig>
}
 8001c8e:	bf00      	nop
 8001c90:	3790      	adds	r7, #144	; 0x90
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	58000400 	.word	0x58000400
 8001c9c:	58024800 	.word	0x58024800
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <MX_ADC3_Init+0xc0>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cee:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001d18:	f001 fdb4 	bl	8003884 <HAL_ADC_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001d22:	f000 fc41 	bl	80025a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d26:	2301      	movs	r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_ADC3_Init+0xbc>)
 8001d4a:	f002 fad7 	bl	80042fc <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001d54:	f000 fc28 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000304 	.word	0x20000304
 8001d64:	58026000 	.word	0x58026000

08001d68 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2224      	movs	r2, #36	; 0x24
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f017 fa8b 	bl	8019290 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_DAC1_Init+0x5c>)
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <MX_DAC1_Init+0x60>)
 8001d7e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <MX_DAC1_Init+0x5c>)
 8001d82:	f003 f9d8 	bl	8005136 <HAL_DAC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d8c:	f000 fc0c 	bl	80025a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_DAC1_Init+0x5c>)
 8001dac:	f003 fa5c 	bl	8005268 <HAL_DAC_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001db6:	f000 fbf7 	bl	80025a8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000368 	.word	0x20000368
 8001dc8:	40007400 	.word	0x40007400

08001dcc <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0a4      	sub	sp, #144	; 0x90
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	2254      	movs	r2, #84	; 0x54
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f017 fa51 	bl	8019290 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f017 fa45 	bl	8019290 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001e06:	4b98      	ldr	r3, [pc, #608]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001e08:	4a98      	ldr	r2, [pc, #608]	; (800206c <MX_HRTIM_Init+0x2a0>)
 8001e0a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001e0c:	4b96      	ldr	r3, [pc, #600]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001e12:	4b95      	ldr	r3, [pc, #596]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001e18:	4893      	ldr	r0, [pc, #588]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001e1a:	f005 f883 	bl	8006f24 <HAL_HRTIM_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f000 fbc0 	bl	80025a8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001e28:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001e36:	2307      	movs	r3, #7
 8001e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001e42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e46:	461a      	mov	r2, r3
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4887      	ldr	r0, [pc, #540]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001e4c:	f005 f93a 	bl	80070c4 <HAL_HRTIM_TimeBaseConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8001e56:	f000 fba7 	bl	80025a8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001e5a:	2314      	movs	r3, #20
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001e72:	2300      	movs	r3, #0
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	486c      	ldr	r0, [pc, #432]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001eb8:	f005 f92c 	bl	8007114 <HAL_HRTIM_WaveformTimerConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001ec2:	f000 fb71 	bl	80025a8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	4864      	ldr	r0, [pc, #400]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001ed8:	f005 f91c 	bl	8007114 <HAL_HRTIM_WaveformTimerConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001ee2:	f000 fb61 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001ee6:	f240 631b 	movw	r3, #1563	; 0x61b
 8001eea:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	485c      	ldr	r0, [pc, #368]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001ef6:	f005 f97f 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001f00:	f000 fb52 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001f04:	f244 5395 	movw	r3, #17813	; 0x4595
 8001f08:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2202      	movs	r2, #2
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4853      	ldr	r0, [pc, #332]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001f1c:	f005 f96c 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001f26:	f000 fb3f 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001f2a:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001f2e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	2202      	movs	r2, #2
 8001f36:	2104      	movs	r1, #4
 8001f38:	484b      	ldr	r0, [pc, #300]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001f3a:	f005 f95d 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001f44:	f000 fb30 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001f48:	f644 0306 	movw	r3, #18438	; 0x4806
 8001f4c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	2204      	movs	r2, #4
 8001f54:	2100      	movs	r1, #0
 8001f56:	4844      	ldr	r0, [pc, #272]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001f58:	f005 f94e 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001f62:	f000 fb21 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8001f66:	f244 435d 	movw	r3, #17501	; 0x445d
 8001f6a:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	2208      	movs	r2, #8
 8001f72:	2104      	movs	r1, #4
 8001f74:	483c      	ldr	r0, [pc, #240]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001f76:	f005 f93f 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001f80:	f000 fb12 	bl	80025a8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001f84:	2302      	movs	r3, #2
 8001f86:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001f88:	2328      	movs	r3, #40	; 0x28
 8001f8a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001f94:	2308      	movs	r3, #8
 8001f96:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2100      	movs	r1, #0
 8001faa:	482f      	ldr	r0, [pc, #188]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001fac:	f005 fa92 	bl	80074d4 <HAL_HRTIM_WaveformOutputConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001fb6:	f000 faf7 	bl	80025a8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001fbe:	2350      	movs	r3, #80	; 0x50
 8001fc0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4826      	ldr	r0, [pc, #152]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001fd0:	f005 fa80 	bl	80074d4 <HAL_HRTIM_WaveformOutputConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001fda:	f000 fae5 	bl	80025a8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001fea:	2308      	movs	r3, #8
 8001fec:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	481c      	ldr	r0, [pc, #112]	; (8002068 <MX_HRTIM_Init+0x29c>)
 8001ff6:	f005 fa6d 	bl	80074d4 <HAL_HRTIM_WaveformOutputConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002000:	f000 fad2 	bl	80025a8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002008:	461a      	mov	r2, r3
 800200a:	2104      	movs	r1, #4
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <MX_HRTIM_Init+0x29c>)
 800200e:	f005 f859 	bl	80070c4 <HAL_HRTIM_TimeBaseConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002018:	f000 fac6 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 800201c:	f240 7353 	movw	r3, #1875	; 0x753
 8002020:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	2201      	movs	r2, #1
 8002028:	2104      	movs	r1, #4
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <MX_HRTIM_Init+0x29c>)
 800202c:	f005 f8e4 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002036:	f000 fab7 	bl	80025a8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 800203a:	f643 6342 	movw	r3, #15938	; 0x3e42
 800203e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	2204      	movs	r2, #4
 8002046:	2104      	movs	r1, #4
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_HRTIM_Init+0x29c>)
 800204a:	f005 f8d5 	bl	80071f8 <HAL_HRTIM_WaveformCompareConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002054:	f000 faa8 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_HRTIM_Init+0x29c>)
 800205a:	f000 fbe7 	bl	800282c <HAL_HRTIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3790      	adds	r7, #144	; 0x90
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000037c 	.word	0x2000037c
 800206c:	40017400 	.word	0x40017400

08002070 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 8002076:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <MX_LPTIM1_Init+0x58>)
 8002078:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 8002082:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002086:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 800208a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 800209e:	2200      	movs	r2, #0
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_LPTIM1_Init+0x54>)
 80020b0:	f006 fa3c 	bl	800852c <HAL_LPTIM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80020ba:	f000 fa75 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000458 	.word	0x20000458
 80020c8:	40002400 	.word	0x40002400

080020cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <MX_TIM1_Init+0xa0>)
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <MX_TIM1_Init+0xa4>)
 80020ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <MX_TIM1_Init+0xa0>)
 80020f2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <MX_TIM1_Init+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <MX_TIM1_Init+0xa0>)
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <MX_TIM1_Init+0xa0>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <MX_TIM1_Init+0xa0>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_TIM1_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002118:	4814      	ldr	r0, [pc, #80]	; (800216c <MX_TIM1_Init+0xa0>)
 800211a:	f00a fbb5 	bl	800c888 <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 fa40 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_TIM1_Init+0xa0>)
 8002136:	f00a fbff 	bl	800c938 <HAL_TIM_ConfigClockSource>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002140:	f000 fa32 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_TIM1_Init+0xa0>)
 8002156:	f00a fe1f 	bl	800cd98 <HAL_TIMEx_MasterConfigSynchronization>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002160:	f000 fa22 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000490 	.word	0x20000490
 8002170:	40010000 	.word	0x40010000

08002174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_TIM3_Init+0x94>)
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <MX_TIM3_Init+0x98>)
 8002196:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_TIM3_Init+0x94>)
 800219a:	227c      	movs	r2, #124	; 0x7c
 800219c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_TIM3_Init+0x94>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_TIM3_Init+0x94>)
 80021a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_TIM3_Init+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_TIM3_Init+0x94>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <MX_TIM3_Init+0x94>)
 80021ba:	f00a fb65 	bl	800c888 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80021c4:	f000 f9f0 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <MX_TIM3_Init+0x94>)
 80021d6:	f00a fbaf 	bl	800c938 <HAL_TIM_ConfigClockSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80021e0:	f000 f9e2 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_TIM3_Init+0x94>)
 80021f2:	f00a fdd1 	bl	800cd98 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021fc:	f000 f9d4 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200004dc 	.word	0x200004dc
 800220c:	40000400 	.word	0x40000400

08002210 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <MX_USART3_UART_Init+0x94>)
 8002218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <MX_USART3_UART_Init+0x98>)
 800221e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002234:	220c      	movs	r2, #12
 8002236:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 8002258:	f00a fe2c 	bl	800ceb4 <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002262:	f000 f9a1 	bl	80025a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800226a:	f00b febc 	bl	800dfe6 <HAL_UARTEx_SetTxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002274:	f000 f998 	bl	80025a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002278:	2100      	movs	r1, #0
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800227c:	f00b fef1 	bl	800e062 <HAL_UARTEx_SetRxFifoThreshold>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002286:	f000 f98f 	bl	80025a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_USART3_UART_Init+0x90>)
 800228c:	f00b fe72 	bl	800df74 <HAL_UARTEx_DisableFifoMode>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002296:	f000 f987 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000528 	.word	0x20000528
 80022a4:	40004800 	.word	0x40004800
 80022a8:	000f4240 	.word	0x000f4240

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <MX_GPIO_Init+0x298>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a9e      	ldr	r2, [pc, #632]	; (8002544 <MX_GPIO_Init+0x298>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b9c      	ldr	r3, [pc, #624]	; (8002544 <MX_GPIO_Init+0x298>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	623b      	str	r3, [r7, #32]
 80022de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	4b98      	ldr	r3, [pc, #608]	; (8002544 <MX_GPIO_Init+0x298>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	4a97      	ldr	r2, [pc, #604]	; (8002544 <MX_GPIO_Init+0x298>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f0:	4b94      	ldr	r3, [pc, #592]	; (8002544 <MX_GPIO_Init+0x298>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <MX_GPIO_Init+0x298>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	4a8f      	ldr	r2, [pc, #572]	; (8002544 <MX_GPIO_Init+0x298>)
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230e:	4b8d      	ldr	r3, [pc, #564]	; (8002544 <MX_GPIO_Init+0x298>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b89      	ldr	r3, [pc, #548]	; (8002544 <MX_GPIO_Init+0x298>)
 800231e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002322:	4a88      	ldr	r2, [pc, #544]	; (8002544 <MX_GPIO_Init+0x298>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232c:	4b85      	ldr	r3, [pc, #532]	; (8002544 <MX_GPIO_Init+0x298>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <MX_GPIO_Init+0x298>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	4a80      	ldr	r2, [pc, #512]	; (8002544 <MX_GPIO_Init+0x298>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234a:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <MX_GPIO_Init+0x298>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002358:	4b7a      	ldr	r3, [pc, #488]	; (8002544 <MX_GPIO_Init+0x298>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235e:	4a79      	ldr	r2, [pc, #484]	; (8002544 <MX_GPIO_Init+0x298>)
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <MX_GPIO_Init+0x298>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002376:	4b73      	ldr	r3, [pc, #460]	; (8002544 <MX_GPIO_Init+0x298>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237c:	4a71      	ldr	r2, [pc, #452]	; (8002544 <MX_GPIO_Init+0x298>)
 800237e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <MX_GPIO_Init+0x298>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002394:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <MX_GPIO_Init+0x298>)
 8002396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239a:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <MX_GPIO_Init+0x298>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a4:	4b67      	ldr	r3, [pc, #412]	; (8002544 <MX_GPIO_Init+0x298>)
 80023a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	2134      	movs	r1, #52	; 0x34
 80023b6:	4864      	ldr	r0, [pc, #400]	; (8002548 <MX_GPIO_Init+0x29c>)
 80023b8:	f004 fd5c 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80023bc:	2200      	movs	r2, #0
 80023be:	f245 1103 	movw	r1, #20739	; 0x5103
 80023c2:	4862      	ldr	r0, [pc, #392]	; (800254c <MX_GPIO_Init+0x2a0>)
 80023c4:	f004 fd56 	bl	8006e74 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2101      	movs	r1, #1
 80023cc:	4860      	ldr	r0, [pc, #384]	; (8002550 <MX_GPIO_Init+0x2a4>)
 80023ce:	f004 fd51 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d8:	485e      	ldr	r0, [pc, #376]	; (8002554 <MX_GPIO_Init+0x2a8>)
 80023da:	f004 fd4b 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80023e4:	485c      	ldr	r0, [pc, #368]	; (8002558 <MX_GPIO_Init+0x2ac>)
 80023e6:	f004 fd45 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f0:	4859      	ldr	r0, [pc, #356]	; (8002558 <MX_GPIO_Init+0x2ac>)
 80023f2:	f004 fd3f 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80023f6:	2201      	movs	r2, #1
 80023f8:	21f8      	movs	r1, #248	; 0xf8
 80023fa:	4856      	ldr	r0, [pc, #344]	; (8002554 <MX_GPIO_Init+0x2a8>)
 80023fc:	f004 fd3a 	bl	8006e74 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4850      	ldr	r0, [pc, #320]	; (8002548 <MX_GPIO_Init+0x29c>)
 8002406:	f004 fd35 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 800240a:	2336      	movs	r3, #54	; 0x36
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800241a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241e:	4619      	mov	r1, r3
 8002420:	4849      	ldr	r0, [pc, #292]	; (8002548 <MX_GPIO_Init+0x29c>)
 8002422:	f004 fb5f 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243a:	4619      	mov	r1, r3
 800243c:	4846      	ldr	r0, [pc, #280]	; (8002558 <MX_GPIO_Init+0x2ac>)
 800243e:	f004 fb51 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002442:	f245 1303 	movw	r3, #20739	; 0x5103
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	483c      	ldr	r0, [pc, #240]	; (800254c <MX_GPIO_Init+0x2a0>)
 800245c:	f004 fb42 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	4839      	ldr	r0, [pc, #228]	; (800255c <MX_GPIO_Init+0x2b0>)
 8002478:	f004 fb34 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	482f      	ldr	r0, [pc, #188]	; (8002550 <MX_GPIO_Init+0x2a4>)
 8002494:	f004 fb26 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002498:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	4828      	ldr	r0, [pc, #160]	; (8002554 <MX_GPIO_Init+0x2a8>)
 80024b2:	f004 fb17 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4821      	ldr	r0, [pc, #132]	; (8002550 <MX_GPIO_Init+0x2a4>)
 80024cc:	f004 fb0a 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80024d0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024da:	2302      	movs	r3, #2
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	481b      	ldr	r0, [pc, #108]	; (8002558 <MX_GPIO_Init+0x2ac>)
 80024ea:	f004 fafb 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80024ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002500:	230a      	movs	r3, #10
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4815      	ldr	r0, [pc, #84]	; (8002560 <MX_GPIO_Init+0x2b4>)
 800250c:	f004 faea 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8002510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	4619      	mov	r1, r3
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_GPIO_Init+0x2ac>)
 8002526:	f004 fadd 	bl	8006ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2028      	movs	r0, #40	; 0x28
 8002530:	f002 fdcd 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002534:	2028      	movs	r0, #40	; 0x28
 8002536:	f002 fde4 	bl	8005102 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800253a:	bf00      	nop
 800253c:	3738      	adds	r7, #56	; 0x38
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024400 	.word	0x58024400
 8002548:	58021000 	.word	0x58021000
 800254c:	58020400 	.word	0x58020400
 8002550:	58021800 	.word	0x58021800
 8002554:	58020c00 	.word	0x58020c00
 8002558:	58020800 	.word	0x58020800
 800255c:	58021400 	.word	0x58021400
 8002560:	58020000 	.word	0x58020000

08002564 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 800256c:	480a      	ldr	r0, [pc, #40]	; (8002598 <HAL_ADC_ConvCpltCallback+0x34>)
 800256e:	f001 fc69 	bl	8003e44 <HAL_ADC_GetValue>
 8002572:	4603      	mov	r3, r0
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_ADC_ConvCpltCallback+0x38>)
 8002576:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_ADC_ConvCpltCallback+0x38>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002580:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x40>)
 800258c:	f002 fe47 	bl	800521e <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000304 	.word	0x20000304
 800259c:	200005c0 	.word	0x200005c0
 80025a0:	200005c4 	.word	0x200005c4
 80025a4:	20000368 	.word	0x20000368

080025a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80025b0:	4810      	ldr	r0, [pc, #64]	; (80025f4 <Error_Handler+0x4c>)
 80025b2:	f016 fd7d 	bl	80190b0 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80025b6:	f240 1103 	movw	r1, #259	; 0x103
 80025ba:	480f      	ldr	r0, [pc, #60]	; (80025f8 <Error_Handler+0x50>)
 80025bc:	f004 ffe8 	bl	8007590 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80025c0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <Error_Handler+0x50>)
 80025c6:	f005 f881 	bl	80076cc <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d0:	480a      	ldr	r0, [pc, #40]	; (80025fc <Error_Handler+0x54>)
 80025d2:	f004 fc4f 	bl	8006e74 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80025d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <Error_Handler+0x58>)
 80025dc:	f004 fc63 	bl	8006ea6 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <Error_Handler+0x5c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f018 fc94 	bl	801af18 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80025f0:	e7f1      	b.n	80025d6 <Error_Handler+0x2e>
 80025f2:	bf00      	nop
 80025f4:	0801b170 	.word	0x0801b170
 80025f8:	2000037c 	.word	0x2000037c
 80025fc:	58020800 	.word	0x58020800
 8002600:	58020400 	.word	0x58020400
 8002604:	20000018 	.word	0x20000018

08002608 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_MspInit+0x30>)
 8002610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002614:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_MspInit+0x30>)
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_MspInit+0x30>)
 8002620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	58024400 	.word	0x58024400

0800263c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0b4      	sub	sp, #208	; 0xd0
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	22c0      	movs	r2, #192	; 0xc0
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f016 fe1f 	bl	8019290 <memset>
  if(hadc->Instance==ADC3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <HAL_ADC_MspInit+0xc8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d14e      	bne.n	80026fa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800265c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800266c:	2313      	movs	r3, #19
 800266e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002670:	234f      	movs	r3, #79	; 0x4f
 8002672:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002674:	2302      	movs	r3, #2
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002678:	2302      	movs	r3, #2
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800267c:	23c0      	movs	r3, #192	; 0xc0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002680:	2320      	movs	r3, #32
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f007 fba4 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800269e:	f7ff ff83 	bl	80025a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_ADC_MspInit+0xcc>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80026de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80026e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026e6:	f000 fe9b 	bl	8003420 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	207f      	movs	r0, #127	; 0x7f
 80026f0:	f002 fced 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80026f4:	207f      	movs	r0, #127	; 0x7f
 80026f6:	f002 fd04 	bl	8005102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	37d0      	adds	r7, #208	; 0xd0
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58026000 	.word	0x58026000
 8002708:	58024400 	.word	0x58024400

0800270c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_DAC_MspInit+0x80>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d129      	bne.n	8002782 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_DAC_MspInit+0x84>)
 8002730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_DAC_MspInit+0x84>)
 8002736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800273a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_DAC_MspInit+0x84>)
 8002740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_DAC_MspInit+0x84>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_DAC_MspInit+0x84>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_DAC_MspInit+0x84>)
 800275e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800276a:	2310      	movs	r3, #16
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276e:	2303      	movs	r3, #3
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_DAC_MspInit+0x88>)
 800277e:	f004 f9b1 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40007400 	.word	0x40007400
 8002790:	58024400 	.word	0x58024400
 8002794:	58020000 	.word	0x58020000

08002798 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b4      	sub	sp, #208	; 0xd0
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	22c0      	movs	r2, #192	; 0xc0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f016 fd71 	bl	8019290 <memset>
  if(hhrtim->Instance==HRTIM1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_HRTIM_MspInit+0x8c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d131      	bne.n	800281c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80027b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ca:	f107 0310 	add.w	r3, r7, #16
 80027ce:	4618      	mov	r0, r3
 80027d0:	f007 fb06 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80027da:	f7ff fee5 	bl	80025a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_HRTIM_MspInit+0x90>)
 80027e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_HRTIM_MspInit+0x90>)
 80027e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_HRTIM_MspInit+0x90>)
 80027f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2100      	movs	r1, #0
 8002800:	2068      	movs	r0, #104	; 0x68
 8002802:	f002 fc64 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002806:	2068      	movs	r0, #104	; 0x68
 8002808:	f002 fc7b 	bl	8005102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	206c      	movs	r0, #108	; 0x6c
 8002812:	f002 fc5c 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002816:	206c      	movs	r0, #108	; 0x6c
 8002818:	f002 fc73 	bl	8005102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	37d0      	adds	r7, #208	; 0xd0
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40017400 	.word	0x40017400
 8002828:	58024400 	.word	0x58024400

0800282c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_HRTIM_MspPostInit+0xa8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d13d      	bne.n	80028ca <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_HRTIM_MspPostInit+0xac>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800288a:	2340      	movs	r3, #64	; 0x40
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800289a:	2302      	movs	r3, #2
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <HAL_HRTIM_MspPostInit+0xb0>)
 80028a6:	f004 f91d 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <HAL_HRTIM_MspPostInit+0xb4>)
 80028c6:	f004 f90d 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40017400 	.word	0x40017400
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58021800 	.word	0x58021800
 80028e0:	58020800 	.word	0x58020800

080028e4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b4      	sub	sp, #208	; 0xd0
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	22c0      	movs	r2, #192	; 0xc0
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f016 fccb 	bl	8019290 <memset>
  if(hlptim->Instance==LPTIM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_LPTIM_MspInit+0x80>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d12a      	bne.n	800295a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002904:	f04f 0220 	mov.w	r2, #32
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002910:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f007 fa5f 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002928:	f7ff fe3e 	bl	80025a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_LPTIM_MspInit+0x84>)
 800292e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002932:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_LPTIM_MspInit+0x84>)
 8002934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002938:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_LPTIM_MspInit+0x84>)
 800293e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	205d      	movs	r0, #93	; 0x5d
 8002950:	f002 fbbd 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002954:	205d      	movs	r0, #93	; 0x5d
 8002956:	f002 fbd4 	bl	8005102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	37d0      	adds	r7, #208	; 0xd0
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40002400 	.word	0x40002400
 8002968:	58024400 	.word	0x58024400

0800296c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIM_Base_MspInit+0x68>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10f      	bne.n	800299e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 8002980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 8002990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800299c:	e013      	b.n	80029c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_TIM_Base_MspInit+0x70>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10e      	bne.n	80029c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 80029aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_TIM_Base_MspInit+0x6c>)
 80029ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	58024400 	.word	0x58024400
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0ba      	sub	sp, #232	; 0xe8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	22c0      	movs	r2, #192	; 0xc0
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f016 fc45 	bl	8019290 <memset>
  if(huart->Instance==USART3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_UART_MspInit+0xc8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d146      	bne.n	8002a9e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a10:	f04f 0202 	mov.w	r2, #2
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f007 f9da 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a32:	f7ff fdb9 	bl	80025a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5a:	4a14      	ldr	r2, [pc, #80]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_UART_MspInit+0xcc>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_UART_MspInit+0xd0>)
 8002a9a:	f004 f823 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a9e:	bf00      	nop
 8002aa0:	37e8      	adds	r7, #232	; 0xe8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	58020c00 	.word	0x58020c00

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002ab8:	f007 f976 	bl	8009da8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8002abc:	f7ff fd74 	bl	80025a8 <Error_Handler>
 8002ac0:	e7fc      	b.n	8002abc <NMI_Handler+0x8>

08002ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002ac6:	f7ff fd6f 	bl	80025a8 <Error_Handler>
 8002aca:	e7fc      	b.n	8002ac6 <HardFault_Handler+0x4>

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002ad0:	f7ff fd6a 	bl	80025a8 <Error_Handler>
 8002ad4:	e7fc      	b.n	8002ad0 <MemManage_Handler+0x4>

08002ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8002ada:	f7ff fd65 	bl	80025a8 <Error_Handler>
 8002ade:	e7fc      	b.n	8002ada <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002ae4:	f7ff fd60 	bl	80025a8 <Error_Handler>
 8002ae8:	e7fc      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b18:	f000 fc1e 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002b24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b28:	f004 f9d7 	bl	8006eda <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002b2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b30:	f004 f9d3 	bl	8006eda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <LPTIM1_IRQHandler+0x10>)
 8002b3e:	f005 fe0c 	bl	800875a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000458 	.word	0x20000458

08002b4c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4802      	ldr	r0, [pc, #8]	; (8002b5c <HRTIM1_TIMA_IRQHandler+0x10>)
 8002b54:	f004 fe38 	bl	80077c8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000037c 	.word	0x2000037c

08002b60 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8002b64:	2104      	movs	r1, #4
 8002b66:	4802      	ldr	r0, [pc, #8]	; (8002b70 <HRTIM1_TIME_IRQHandler+0x10>)
 8002b68:	f004 fe2e 	bl	80077c8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	2000037c 	.word	0x2000037c

08002b74 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <ADC3_IRQHandler+0x10>)
 8002b7a:	f001 f971 	bl	8003e60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000304 	.word	0x20000304

08002b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_kill>:

int _kill(int pid, int sig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <_kill+0x20>)
 8002ba4:	2216      	movs	r2, #22
 8002ba6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	20008290 	.word	0x20008290

08002bbc <_exit>:

void _exit (int status)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe5 	bl	8002b98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bce:	e7fe      	b.n	8002bce <_exit+0x12>

08002bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
	}

return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fdc1 	bl	80017ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf1      	blt.n	8002c1c <_write+0x12>
	}
	return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d205      	bcs.n	8002ce8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <_sbrk+0x6c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	20020000 	.word	0x20020000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	200005e8 	.word	0x200005e8
 8002d14:	200082a0 	.word	0x200082a0
 8002d18:	20008290 	.word	0x20008290

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d20:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <SystemInit+0xe4>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a36      	ldr	r2, [pc, #216]	; (8002e00 <SystemInit+0xe4>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <SystemInit+0xe8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d807      	bhi.n	8002d4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <SystemInit+0xe8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <SystemInit+0xe8>)
 8002d46:	f043 0307 	orr.w	r3, r3, #7
 8002d4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <SystemInit+0xec>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <SystemInit+0xec>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <SystemInit+0xec>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <SystemInit+0xec>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4929      	ldr	r1, [pc, #164]	; (8002e08 <SystemInit+0xec>)
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <SystemInit+0xf0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <SystemInit+0xe8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <SystemInit+0xe8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <SystemInit+0xe8>)
 8002d80:	f043 0307 	orr.w	r3, r3, #7
 8002d84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <SystemInit+0xec>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <SystemInit+0xec>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <SystemInit+0xec>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <SystemInit+0xec>)
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <SystemInit+0xf4>)
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <SystemInit+0xec>)
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <SystemInit+0xf8>)
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <SystemInit+0xec>)
 8002da6:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <SystemInit+0xfc>)
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <SystemInit+0xec>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <SystemInit+0xec>)
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <SystemInit+0xfc>)
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <SystemInit+0xec>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <SystemInit+0xec>)
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <SystemInit+0xfc>)
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <SystemInit+0xec>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <SystemInit+0xec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <SystemInit+0xec>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <SystemInit+0xec>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <SystemInit+0x100>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <SystemInit+0x104>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d202      	bcs.n	8002dee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <SystemInit+0x108>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <SystemInit+0x10c>)
 8002df0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002df4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00
 8002e04:	52002000 	.word	0x52002000
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e10:	02020200 	.word	0x02020200
 8002e14:	01ff0000 	.word	0x01ff0000
 8002e18:	01010280 	.word	0x01010280
 8002e1c:	5c001000 	.word	0x5c001000
 8002e20:	ffff0000 	.word	0xffff0000
 8002e24:	51008108 	.word	0x51008108
 8002e28:	52004000 	.word	0x52004000

08002e2c <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8002e34:	2101      	movs	r1, #1
 8002e36:	4803      	ldr	r0, [pc, #12]	; (8002e44 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8002e38:	f004 f835 	bl	8006ea6 <HAL_GPIO_TogglePin>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	58020400 	.word	0x58020400

08002e48 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15d      	bne.n	8002f2c <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8002e70:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002e72:	ed93 5b00 	vldr	d5, [r3]
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002e78:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002e84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002e8a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002e92:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002e98:	ed93 5b02 	vldr	d5, [r3, #8]
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002e9e:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ea2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ea6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002eaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002eae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002eb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002eb8:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ec0:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8002ec4:	ed97 6b04 	vldr	d6, [r7, #16]
 8002ec8:	ed97 7b06 	vldr	d7, [r7, #24]
 8002ecc:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8002ed2:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ed6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ede:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ee2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ee6:	ee17 3a90 	vmov	r3, s15
 8002eea:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8002ef6:	f018 f81b 	bl	801af30 <__stop_pop_veneer>
			i = 0;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
			start_pop();
 8002f00:	f018 f802 	bl	801af08 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8002f0c:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8002f16:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4809      	ldr	r0, [pc, #36]	; (8002f40 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002f1c:	f003 ffc3 	bl	8006ea6 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4807      	ldr	r0, [pc, #28]	; (8002f44 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002f28:	f016 f85c 	bl	8018fe4 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	0801e0a8 	.word	0x0801e0a8
 8002f38:	200005f4 	.word	0x200005f4
 8002f3c:	200005ec 	.word	0x200005ec
 8002f40:	58021000 	.word	0x58021000
 8002f44:	0801b6ac 	.word	0x0801b6ac

08002f48 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f64:	f7ff feda 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f6a:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f80:	4c0a      	ldr	r4, [pc, #40]	; (8002fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f016 f9d1 	bl	8019334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f92:	f7fe fc1d 	bl	80017d0 <main>
  bx  lr
 8002f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002fa4:	0801e5c0 	.word	0x0801e5c0
  ldr r2, =_sbss
 8002fa8:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002fac:	200082a0 	.word	0x200082a0

08002fb0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <ADC_IRQHandler>

08002fb2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <LAN8742_RegisterBusIO+0x28>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <LAN8742_RegisterBusIO+0x28>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <LAN8742_RegisterBusIO+0x28>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e014      	b.n	800300a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d17c      	bne.n	8003130 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e01c      	b.n	800308a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f107 0208 	add.w	r2, r7, #8
 8003058:	2112      	movs	r1, #18
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	4798      	blx	r3
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	da03      	bge.n	800306c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003064:	f06f 0304 	mvn.w	r3, #4
 8003068:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800306a:	e00b      	b.n	8003084 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d105      	bne.n	8003084 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
         break;
 8003082:	e005      	b.n	8003090 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b1f      	cmp	r3, #31
 800308e:	d9df      	bls.n	8003050 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b1f      	cmp	r3, #31
 8003096:	d902      	bls.n	800309e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003098:	f06f 0302 	mvn.w	r3, #2
 800309c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d145      	bne.n	8003130 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6810      	ldr	r0, [r2, #0]
 80030ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030b0:	2100      	movs	r1, #0
 80030b2:	4798      	blx	r3
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db37      	blt.n	800312a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6810      	ldr	r0, [r2, #0]
 80030c2:	f107 0208 	add.w	r2, r7, #8
 80030c6:	2100      	movs	r1, #0
 80030c8:	4798      	blx	r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db28      	blt.n	8003122 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4798      	blx	r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80030da:	e01c      	b.n	8003116 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4798      	blx	r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ee:	d80e      	bhi.n	800310e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6810      	ldr	r0, [r2, #0]
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	2100      	movs	r1, #0
 80030fe:	4798      	blx	r3
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	da07      	bge.n	8003116 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003106:	f06f 0304 	mvn.w	r3, #4
 800310a:	613b      	str	r3, [r7, #16]
                 break;
 800310c:	e010      	b.n	8003130 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800310e:	f06f 0301 	mvn.w	r3, #1
 8003112:	613b      	str	r3, [r7, #16]
               break;
 8003114:	e00c      	b.n	8003130 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1dd      	bne.n	80030dc <LAN8742_Init+0xc6>
 8003120:	e006      	b.n	8003130 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003122:	f06f 0304 	mvn.w	r3, #4
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e002      	b.n	8003130 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800312a:	f06f 0303 	mvn.w	r3, #3
 800312e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4798      	blx	r3
 800313c:	4603      	mov	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003140:	bf00      	nop
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	4798      	blx	r3
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003154:	d9f5      	bls.n	8003142 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800315c:	693b      	ldr	r3, [r7, #16]
 }
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6810      	ldr	r0, [r2, #0]
 800317a:	f107 020c 	add.w	r2, r7, #12
 800317e:	2101      	movs	r1, #1
 8003180:	4798      	blx	r3
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	da02      	bge.n	800318e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003188:	f06f 0304 	mvn.w	r3, #4
 800318c:	e06e      	b.n	800326c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6810      	ldr	r0, [r2, #0]
 8003196:	f107 020c 	add.w	r2, r7, #12
 800319a:	2101      	movs	r1, #1
 800319c:	4798      	blx	r3
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da02      	bge.n	80031aa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031a4:	f06f 0304 	mvn.w	r3, #4
 80031a8:	e060      	b.n	800326c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80031b4:	2301      	movs	r3, #1
 80031b6:	e059      	b.n	800326c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6810      	ldr	r0, [r2, #0]
 80031c0:	f107 020c 	add.w	r2, r7, #12
 80031c4:	2100      	movs	r1, #0
 80031c6:	4798      	blx	r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da02      	bge.n	80031d4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031ce:	f06f 0304 	mvn.w	r3, #4
 80031d2:	e04b      	b.n	800326c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11b      	bne.n	8003216 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <LAN8742_GetLinkState+0x90>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e03a      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003200:	2303      	movs	r3, #3
 8003202:	e033      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800320e:	2304      	movs	r3, #4
 8003210:	e02c      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003212:	2305      	movs	r3, #5
 8003214:	e02a      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6810      	ldr	r0, [r2, #0]
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	211f      	movs	r1, #31
 8003224:	4798      	blx	r3
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	da02      	bge.n	8003232 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800322c:	f06f 0304 	mvn.w	r3, #4
 8003230:	e01c      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800323c:	2306      	movs	r3, #6
 800323e:	e015      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 031c 	and.w	r3, r3, #28
 8003246:	2b18      	cmp	r3, #24
 8003248:	d101      	bne.n	800324e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800324a:	2302      	movs	r3, #2
 800324c:	e00e      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 031c 	and.w	r3, r3, #28
 8003254:	2b08      	cmp	r3, #8
 8003256:	d101      	bne.n	800325c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003258:	2303      	movs	r3, #3
 800325a:	e007      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 031c 	and.w	r3, r3, #28
 8003262:	2b14      	cmp	r3, #20
 8003264:	d101      	bne.n	800326a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003266:	2304      	movs	r3, #4
 8003268:	e000      	b.n	800326c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800326a:	2305      	movs	r3, #5
    }				
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327a:	2003      	movs	r0, #3
 800327c:	f001 ff1c 	bl	80050b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003280:	f006 fbbc 	bl	80099fc <HAL_RCC_GetSysClockFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_Init+0x68>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4913      	ldr	r1, [pc, #76]	; (80032e0 <HAL_Init+0x6c>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_Init+0x68>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_Init+0x6c>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_Init+0x70>)
 80032b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b8:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <HAL_Init+0x74>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 f814 	bl	80032ec <HAL_InitTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e002      	b.n	80032d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032ce:	f7ff f99b 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	58024400 	.word	0x58024400
 80032e0:	0801e0c0 	.word	0x0801e0c0
 80032e4:	20000014 	.word	0x20000014
 80032e8:	20000010 	.word	0x20000010

080032ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032f4:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_InitTick+0x60>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e021      	b.n	8003344 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_InitTick+0x64>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_InitTick+0x60>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f001 ff01 	bl	800511e <HAL_SYSTICK_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e00e      	b.n	8003344 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b0f      	cmp	r3, #15
 800332a:	d80a      	bhi.n	8003342 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332c:	2200      	movs	r2, #0
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	f001 fecb 	bl	80050ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003338:	4a06      	ldr	r2, [pc, #24]	; (8003354 <HAL_InitTick+0x68>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000024 	.word	0x20000024
 8003350:	20000010 	.word	0x20000010
 8003354:	20000020 	.word	0x20000020

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000024 	.word	0x20000024
 800337c:	200005f8 	.word	0x200005f8

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	200005f8 	.word	0x200005f8

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000024 	.word	0x20000024

080033e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_GetREVID+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0c1b      	lsrs	r3, r3, #16
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	5c001000 	.word	0x5c001000

080033f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003408:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58000400 	.word	0x58000400

08003420 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	58000400 	.word	0x58000400

0800344c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3360      	adds	r3, #96	; 0x60
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	611a      	str	r2, [r3, #16]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003526:	b480      	push	{r7}
 8003528:	b087      	sub	sp, #28
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3360      	adds	r3, #96	; 0x60
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	431a      	orrs	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]
  }
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3330      	adds	r3, #48	; 0x30
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	4413      	add	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	211f      	movs	r1, #31
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 011f 	and.w	r1, r3, #31
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	431a      	orrs	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3314      	adds	r3, #20
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0e5b      	lsrs	r3, r3, #25
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	0d1b      	lsrs	r3, r3, #20
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2107      	movs	r1, #7
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0d1b      	lsrs	r3, r3, #20
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	431a      	orrs	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0318 	and.w	r3, r3, #24
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <LL_ADC_SetChannelSingleDiff+0x44>)
 800367c:	40d9      	lsrs	r1, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	400b      	ands	r3, r1
 8003682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003686:	431a      	orrs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	000fffff 	.word	0x000fffff

080036a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 031f 	and.w	r3, r3, #31
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6093      	str	r3, [r2, #8]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	5fffffc0 	.word	0x5fffffc0

080036fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800370c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003710:	d101      	bne.n	8003716 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <LL_ADC_EnableInternalRegulator+0x24>)
 8003732:	4013      	ands	r3, r2
 8003734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	6fffffc0 	.word	0x6fffffc0

0800374c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003760:	d101      	bne.n	8003766 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <LL_ADC_Enable+0x24>)
 8003782:	4013      	ands	r3, r2
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	7fffffc0 	.word	0x7fffffc0

0800379c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <LL_ADC_Disable+0x24>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	f043 0202 	orr.w	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	7fffffc0 	.word	0x7fffffc0

080037c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <LL_ADC_IsEnabled+0x18>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <LL_ADC_IsEnabled+0x1a>
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d101      	bne.n	8003802 <LL_ADC_IsDisableOngoing+0x18>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <LL_ADC_IsDisableOngoing+0x1a>
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <LL_ADC_REG_StartConversion+0x24>)
 800381e:	4013      	ands	r3, r2
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	7fffffc0 	.word	0x7fffffc0

08003838 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d101      	bne.n	8003850 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b08      	cmp	r3, #8
 8003870:	d101      	bne.n	8003876 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e18f      	b.n	8003bbe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fe fec5 	bl	800263c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff19 	bl	80036fc <LL_ADC_IsDeepPowerDownEnabled>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff feff 	bl	80036d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff34 	bl	800374c <LL_ADC_IsInternalRegulatorEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d114      	bne.n	8003914 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff18 	bl	8003724 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f4:	4b87      	ldr	r3, [pc, #540]	; (8003b14 <HAL_ADC_Init+0x290>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	4a87      	ldr	r2, [pc, #540]	; (8003b18 <HAL_ADC_Init+0x294>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	3301      	adds	r3, #1
 8003904:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003906:	e002      	b.n	800390e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3b01      	subs	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff17 	bl	800374c <LL_ADC_IsInternalRegulatorEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff77 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 800394a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8129 	bne.w	8003bac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 8125 	bne.w	8003bac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff24 	bl	80037c4 <LL_ADC_IsEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d136      	bne.n	80039f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_ADC_Init+0x298>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_ADC_Init+0x112>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a63      	ldr	r2, [pc, #396]	; (8003b20 <HAL_ADC_Init+0x29c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10e      	bne.n	80039b4 <HAL_ADC_Init+0x130>
 8003996:	4861      	ldr	r0, [pc, #388]	; (8003b1c <HAL_ADC_Init+0x298>)
 8003998:	f7ff ff14 	bl	80037c4 <LL_ADC_IsEnabled>
 800399c:	4604      	mov	r4, r0
 800399e:	4860      	ldr	r0, [pc, #384]	; (8003b20 <HAL_ADC_Init+0x29c>)
 80039a0:	f7ff ff10 	bl	80037c4 <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4323      	orrs	r3, r4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e008      	b.n	80039c6 <HAL_ADC_Init+0x142>
 80039b4:	485b      	ldr	r0, [pc, #364]	; (8003b24 <HAL_ADC_Init+0x2a0>)
 80039b6:	f7ff ff05 	bl	80037c4 <LL_ADC_IsEnabled>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a53      	ldr	r2, [pc, #332]	; (8003b1c <HAL_ADC_Init+0x298>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_ADC_Init+0x15a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_ADC_Init+0x29c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Init+0x15e>
 80039de:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_ADC_Init+0x2a4>)
 80039e0:	e000      	b.n	80039e4 <HAL_ADC_Init+0x160>
 80039e2:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_ADC_Init+0x2a8>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7ff fd2e 	bl	800344c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80039f0:	f7ff fcf6 	bl	80033e0 <HAL_GetREVID>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d914      	bls.n	8003a28 <HAL_ADC_Init+0x1a4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d110      	bne.n	8003a28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7d5b      	ldrb	r3, [r3, #21]
 8003a0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7f1b      	ldrb	r3, [r3, #28]
 8003a1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a20:	f043 030c 	orr.w	r3, r3, #12
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e00d      	b.n	8003a44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7d5b      	ldrb	r3, [r3, #21]
 8003a2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7f1b      	ldrb	r3, [r3, #28]
 8003a3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7f1b      	ldrb	r3, [r3, #28]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	045b      	lsls	r3, r3, #17
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_ADC_Init+0x2ac>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fed2 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 8003a94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fedf 	bl	800385e <LL_ADC_INJ_IsConversionOngoing>
 8003aa0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d15f      	bne.n	8003b68 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15c      	bne.n	8003b68 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7d1b      	ldrb	r3, [r3, #20]
 8003ab2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <HAL_ADC_Init+0x2b0>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d130      	bne.n	8003b3c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_ADC_Init+0x2b4>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0411      	lsls	r1, r2, #16
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b02:	430a      	orrs	r2, r1
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	611a      	str	r2, [r3, #16]
 8003b10:	e01c      	b.n	8003b4c <HAL_ADC_Init+0x2c8>
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010
 8003b18:	053e2d63 	.word	0x053e2d63
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40022100 	.word	0x40022100
 8003b24:	58026000 	.word	0x58026000
 8003b28:	40022300 	.word	0x40022300
 8003b2c:	58026300 	.word	0x58026300
 8003b30:	fff0c003 	.word	0xfff0c003
 8003b34:	ffffbffc 	.word	0xffffbffc
 8003b38:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f804 	bl	8004b70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10c      	bne.n	8003b8a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f023 010f 	bic.w	r1, r3, #15
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	1e5a      	subs	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
 8003b88:	e007      	b.n	8003b9a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020f 	bic.w	r2, r2, #15
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8003baa:	e007      	b.n	8003bbc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	f043 0210 	orr.w	r2, r3, #16
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}
 8003bc6:	bf00      	nop

08003bc8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a92      	ldr	r2, [pc, #584]	; (8003e20 <HAL_ADC_Start_IT+0x258>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_ADC_Start_IT+0x1c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a91      	ldr	r2, [pc, #580]	; (8003e24 <HAL_ADC_Start_IT+0x25c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_Start_IT+0x20>
 8003be4:	4b90      	ldr	r3, [pc, #576]	; (8003e28 <HAL_ADC_Start_IT+0x260>)
 8003be6:	e000      	b.n	8003bea <HAL_ADC_Start_IT+0x22>
 8003be8:	4b90      	ldr	r3, [pc, #576]	; (8003e2c <HAL_ADC_Start_IT+0x264>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fd58 	bl	80036a0 <LL_ADC_GetMultimode>
 8003bf0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fe1e 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 8118 	bne.w	8003e34 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_Start_IT+0x4a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e113      	b.n	8003e3a <HAL_ADC_Start_IT+0x272>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 febe 	bl	800499c <ADC_Enable>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 80f5 	bne.w	8003e16 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c30:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_ADC_Start_IT+0x268>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a78      	ldr	r2, [pc, #480]	; (8003e24 <HAL_ADC_Start_IT+0x25c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d002      	beq.n	8003c4c <HAL_ADC_Start_IT+0x84>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e000      	b.n	8003c4e <HAL_ADC_Start_IT+0x86>
 8003c4c:	4b74      	ldr	r3, [pc, #464]	; (8003e20 <HAL_ADC_Start_IT+0x258>)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d002      	beq.n	8003c5c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f023 0206 	bic.w	r2, r3, #6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c80:	e002      	b.n	8003c88 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	221c      	movs	r2, #28
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 021c 	bic.w	r2, r2, #28
 8003ca6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d108      	bne.n	8003cc2 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	605a      	str	r2, [r3, #4]
          break;
 8003cc0:	e008      	b.n	8003cd4 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0204 	orr.w	r2, r2, #4
 8003cd0:	605a      	str	r2, [r3, #4]
          break;
 8003cd2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0210 	orr.w	r2, r2, #16
 8003cea:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4c      	ldr	r2, [pc, #304]	; (8003e24 <HAL_ADC_Start_IT+0x25c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d002      	beq.n	8003cfc <HAL_ADC_Start_IT+0x134>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e000      	b.n	8003cfe <HAL_ADC_Start_IT+0x136>
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_ADC_Start_IT+0x258>)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d008      	beq.n	8003d18 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d002      	beq.n	8003d18 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d13a      	bne.n	8003d8e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02d      	beq.n	8003d82 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d110      	bne.n	8003d60 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0220 	bic.w	r2, r2, #32
 8003d4c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5c:	605a      	str	r2, [r3, #4]
              break;
 8003d5e:	e010      	b.n	8003d82 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0220 	orr.w	r2, r2, #32
 8003d7e:	605a      	str	r2, [r3, #4]
              break;
 8003d80:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fd42 	bl	8003810 <LL_ADC_REG_StartConversion>
 8003d8c:	e054      	b.n	8003e38 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <HAL_ADC_Start_IT+0x25c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d002      	beq.n	8003daa <HAL_ADC_Start_IT+0x1e2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	e000      	b.n	8003dac <HAL_ADC_Start_IT+0x1e4>
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_ADC_Start_IT+0x258>)
 8003dac:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03e      	beq.n	8003e38 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d110      	bne.n	8003df4 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0220 	bic.w	r2, r2, #32
 8003de0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	605a      	str	r2, [r3, #4]
              break;
 8003df2:	e021      	b.n	8003e38 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	605a      	str	r2, [r3, #4]
              break;
 8003e14:	e010      	b.n	8003e38 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e1e:	e00b      	b.n	8003e38 <HAL_ADC_Start_IT+0x270>
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40022100 	.word	0x40022100
 8003e28:	40022300 	.word	0x40022300
 8003e2c:	58026300 	.word	0x58026300
 8003e30:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
 8003e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop

08003e44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a87      	ldr	r2, [pc, #540]	; (80040a0 <HAL_ADC_IRQHandler+0x240>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x30>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a86      	ldr	r2, [pc, #536]	; (80040a4 <HAL_ADC_IRQHandler+0x244>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_IRQHandler+0x34>
 8003e90:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_ADC_IRQHandler+0x248>)
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_IRQHandler+0x36>
 8003e94:	4b85      	ldr	r3, [pc, #532]	; (80040ac <HAL_ADC_IRQHandler+0x24c>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fc02 	bl	80036a0 <LL_ADC_GetMultimode>
 8003e9c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d017      	beq.n	8003ed8 <HAL_ADC_IRQHandler+0x78>
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d105      	bne.n	8003eca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 f81a 	bl	8004f04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_ADC_IRQHandler+0x8c>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8083 	beq.w	8003ffe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d07d      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fb1c 	bl	800355c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d062      	beq.n	8003ff0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_ADC_IRQHandler+0x244>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d002      	beq.n	8003f3a <HAL_ADC_IRQHandler+0xda>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e000      	b.n	8003f3c <HAL_ADC_IRQHandler+0xdc>
 8003f3a:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_ADC_IRQHandler+0x240>)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d008      	beq.n	8003f56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d002      	beq.n	8003f56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d104      	bne.n	8003f60 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	e00c      	b.n	8003f7a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a4f      	ldr	r2, [pc, #316]	; (80040a4 <HAL_ADC_IRQHandler+0x244>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d002      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x110>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e000      	b.n	8003f72 <HAL_ADC_IRQHandler+0x112>
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <HAL_ADC_IRQHandler+0x240>)
 8003f72:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d135      	bne.n	8003ff0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d12e      	bne.n	8003ff0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc4e 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 020c 	bic.w	r2, r2, #12
 8003fb0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d112      	bne.n	8003ff0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
 8003fd6:	e00b      	b.n	8003ff0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f043 0210 	orr.w	r2, r3, #16
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f043 0201 	orr.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fab7 	bl	8002564 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_ADC_IRQHandler+0x1b2>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a0 	beq.w	800415e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 809a 	beq.w	800415e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fac7 	bl	80035da <LL_ADC_INJ_IsTriggerSourceSWStart>
 800404c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fa82 	bl	800355c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004058:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_ADC_IRQHandler+0x244>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d002      	beq.n	800406a <HAL_ADC_IRQHandler+0x20a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	e000      	b.n	800406c <HAL_ADC_IRQHandler+0x20c>
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_ADC_IRQHandler+0x240>)
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	4293      	cmp	r3, r2
 8004072:	d008      	beq.n	8004086 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d002      	beq.n	8004086 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b07      	cmp	r3, #7
 8004084:	d104      	bne.n	8004090 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	e014      	b.n	80040ba <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <HAL_ADC_IRQHandler+0x244>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00a      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x250>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	e008      	b.n	80040b2 <HAL_ADC_IRQHandler+0x252>
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40022100 	.word	0x40022100
 80040a8:	40022300 	.word	0x40022300
 80040ac:	58026300 	.word	0x58026300
 80040b0:	4b84      	ldr	r3, [pc, #528]	; (80042c4 <HAL_ADC_IRQHandler+0x464>)
 80040b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d047      	beq.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_ADC_IRQHandler+0x27a>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d03f      	beq.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d13a      	bne.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d133      	bne.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d12e      	bne.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fbb1 	bl	800385e <LL_ADC_INJ_IsConversionOngoing>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11a      	bne.n	8004138 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004110:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d112      	bne.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
 8004136:	e00b      	b.n	8004150 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 feaf 	bl	8004eb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2260      	movs	r2, #96	; 0x60
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d011      	beq.n	800418c <HAL_ADC_IRQHandler+0x32c>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8a8 	bl	80042d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <HAL_ADC_IRQHandler+0x35c>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fe95 	bl	8004edc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_ADC_IRQHandler+0x38c>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fe87 	bl	8004ef0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d043      	beq.n	800427e <HAL_ADC_IRQHandler+0x41e>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03e      	beq.n	800427e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004208:	2301      	movs	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	e021      	b.n	8004252 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <HAL_ADC_IRQHandler+0x464>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_ADC_IRQHandler+0x3c8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <HAL_ADC_IRQHandler+0x468>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_ADC_IRQHandler+0x3cc>
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_ADC_IRQHandler+0x46c>)
 800422a:	e000      	b.n	800422e <HAL_ADC_IRQHandler+0x3ce>
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <HAL_ADC_IRQHandler+0x470>)
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fa44 	bl	80036bc <LL_ADC_GetMultiDMATransfer>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800423a:	2301      	movs	r3, #1
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	e008      	b.n	8004252 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800424e:	2301      	movs	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10e      	bne.n	8004276 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f839 	bl	80042e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d018      	beq.n	80042ba <HAL_ADC_IRQHandler+0x45a>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	2b00      	cmp	r3, #0
 8004290:	d013      	beq.n	80042ba <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	f043 0208 	orr.w	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042b2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fe07 	bl	8004ec8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80042ba:	bf00      	nop
 80042bc:	3728      	adds	r7, #40	; 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40022100 	.word	0x40022100
 80042cc:	40022300 	.word	0x40022300
 80042d0:	58026300 	.word	0x58026300

080042d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b0a1      	sub	sp, #132	; 0x84
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a9d      	ldr	r2, [pc, #628]	; (800458c <HAL_ADC_ConfigChannel+0x290>)
 8004316:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x2a>
 8004322:	2302      	movs	r3, #2
 8004324:	e321      	b.n	800496a <HAL_ADC_ConfigChannel+0x66e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fa80 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 8306 	bne.w	800494c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <HAL_ADC_ConfigChannel+0x62>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0e9b      	lsrs	r3, r3, #26
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	e016      	b.n	800438c <HAL_ADC_ConfigChannel+0x90>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800436c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004376:	2320      	movs	r3, #32
 8004378:	e003      	b.n	8004382 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800437a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2201      	movs	r2, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	69d1      	ldr	r1, [r2, #28]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	430b      	orrs	r3, r1
 8004398:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7ff f8eb 	bl	8003582 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fa41 	bl	8003838 <LL_ADC_REG_IsConversionOngoing>
 80043b6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fa4e 	bl	800385e <LL_ADC_INJ_IsConversionOngoing>
 80043c2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 80b3 	bne.w	8004532 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 80af 	bne.w	8004532 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	461a      	mov	r2, r3
 80043e2:	f7ff f90d 	bl	8003600 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_ADC_ConfigChannel+0x294>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f2:	d10b      	bne.n	800440c <HAL_ADC_ConfigChannel+0x110>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	e01d      	b.n	8004448 <HAL_ADC_ConfigChannel+0x14c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x136>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	e00a      	b.n	8004448 <HAL_ADC_ConfigChannel+0x14c>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d027      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6919      	ldr	r1, [r3, #16]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004460:	f7ff f828 	bl	80034b4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6919      	ldr	r1, [r3, #16]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	7e5b      	ldrb	r3, [r3, #25]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_ADC_ConfigChannel+0x17e>
 8004474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004478:	e000      	b.n	800447c <HAL_ADC_ConfigChannel+0x180>
 800447a:	2300      	movs	r3, #0
 800447c:	461a      	mov	r2, r3
 800447e:	f7ff f852 	bl	8003526 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6919      	ldr	r1, [r3, #16]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	7e1b      	ldrb	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x19c>
 8004492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004496:	e000      	b.n	800449a <HAL_ADC_ConfigChannel+0x19e>
 8004498:	2300      	movs	r3, #0
 800449a:	461a      	mov	r2, r3
 800449c:	f7ff f82a 	bl	80034f4 <LL_ADC_SetDataRightShift>
 80044a0:	e047      	b.n	8004532 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	069b      	lsls	r3, r3, #26
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d107      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	069b      	lsls	r3, r3, #26
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d107      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044e8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	069b      	lsls	r3, r3, #26
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d107      	bne.n	800450e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800450c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	069b      	lsls	r3, r3, #26
 800451e:	429a      	cmp	r2, r3
 8004520:	d107      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004530:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f944 	bl	80037c4 <LL_ADC_IsEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 820d 	bne.w	800495e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	461a      	mov	r2, r3
 8004552:	f7ff f881 	bl	8003658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <HAL_ADC_ConfigChannel+0x290>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f040 8133 	bne.w	80047c8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456e:	2b00      	cmp	r3, #0
 8004570:	d110      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x298>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	0e9b      	lsrs	r3, r3, #26
 8004578:	3301      	adds	r3, #1
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2b09      	cmp	r3, #9
 8004580:	bf94      	ite	ls
 8004582:	2301      	movls	r3, #1
 8004584:	2300      	movhi	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e01e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x2cc>
 800458a:	bf00      	nop
 800458c:	47ff0000 	.word	0x47ff0000
 8004590:	5c001000 	.word	0x5c001000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80045a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80045a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80045b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2b09      	cmp	r3, #9
 80045c0:	bf94      	ite	ls
 80045c2:	2301      	movls	r3, #1
 80045c4:	2300      	movhi	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d079      	beq.n	80046c0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x2ec>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	3301      	adds	r3, #1
 80045e0:	069b      	lsls	r3, r3, #26
 80045e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e6:	e015      	b.n	8004614 <HAL_ADC_ConfigChannel+0x318>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e003      	b.n	800460c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3301      	adds	r3, #1
 800460e:	069b      	lsls	r3, r3, #26
 8004610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x338>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	3301      	adds	r3, #1
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2101      	movs	r1, #1
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	e017      	b.n	8004664 <HAL_ADC_ConfigChannel+0x368>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e003      	b.n	8004658 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_ADC_ConfigChannel+0x38e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	3301      	adds	r3, #1
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	051b      	lsls	r3, r3, #20
 8004688:	e018      	b.n	80046bc <HAL_ADC_ConfigChannel+0x3c0>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80046a2:	2320      	movs	r3, #32
 80046a4:	e003      	b.n	80046ae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046bc:	430b      	orrs	r3, r1
 80046be:	e07e      	b.n	80047be <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x3e0>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	3301      	adds	r3, #1
 80046d4:	069b      	lsls	r3, r3, #26
 80046d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046da:	e015      	b.n	8004708 <HAL_ADC_ConfigChannel+0x40c>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	069b      	lsls	r3, r3, #26
 8004704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x42c>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	0e9b      	lsrs	r3, r3, #26
 800471a:	3301      	adds	r3, #1
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	e017      	b.n	8004758 <HAL_ADC_ConfigChannel+0x45c>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	61bb      	str	r3, [r7, #24]
  return result;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e003      	b.n	800474c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x488>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 021f 	and.w	r2, r3, #31
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	3b1e      	subs	r3, #30
 800477c:	051b      	lsls	r3, r3, #20
 800477e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004782:	e01b      	b.n	80047bc <HAL_ADC_ConfigChannel+0x4c0>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	60fb      	str	r3, [r7, #12]
  return result;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e003      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	f003 021f 	and.w	r2, r3, #31
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	3b1e      	subs	r3, #30
 80047b6:	051b      	lsls	r3, r3, #20
 80047b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047bc:	430b      	orrs	r3, r1
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	6892      	ldr	r2, [r2, #8]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fe ff1c 	bl	8003600 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f280 80c6 	bge.w	800495e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a67      	ldr	r2, [pc, #412]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x4ea>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a65      	ldr	r2, [pc, #404]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x4ee>
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <HAL_ADC_ConfigChannel+0x680>)
 80047e8:	e000      	b.n	80047ec <HAL_ADC_ConfigChannel+0x4f0>
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_ADC_ConfigChannel+0x684>)
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fe53 	bl	8003498 <LL_ADC_GetCommonPathInternalCh>
 80047f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_ADC_ConfigChannel+0x50c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5d      	ldr	r2, [pc, #372]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10e      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x52a>
 8004808:	485a      	ldr	r0, [pc, #360]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 800480a:	f7fe ffdb 	bl	80037c4 <LL_ADC_IsEnabled>
 800480e:	4604      	mov	r4, r0
 8004810:	4859      	ldr	r0, [pc, #356]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 8004812:	f7fe ffd7 	bl	80037c4 <LL_ADC_IsEnabled>
 8004816:	4603      	mov	r3, r0
 8004818:	4323      	orrs	r3, r4
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e008      	b.n	8004838 <HAL_ADC_ConfigChannel+0x53c>
 8004826:	4857      	ldr	r0, [pc, #348]	; (8004984 <HAL_ADC_ConfigChannel+0x688>)
 8004828:	f7fe ffcc 	bl	80037c4 <LL_ADC_IsEnabled>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d07d      	beq.n	8004938 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a51      	ldr	r2, [pc, #324]	; (8004988 <HAL_ADC_ConfigChannel+0x68c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d130      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x5ac>
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d12b      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <HAL_ADC_ConfigChannel+0x688>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f040 8081 	bne.w	800495e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a44      	ldr	r2, [pc, #272]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_ADC_ConfigChannel+0x574>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a43      	ldr	r2, [pc, #268]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x578>
 8004870:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_ADC_ConfigChannel+0x680>)
 8004872:	e000      	b.n	8004876 <HAL_ADC_ConfigChannel+0x57a>
 8004874:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_ADC_ConfigChannel+0x684>)
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7fe fdf7 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004884:	4b41      	ldr	r3, [pc, #260]	; (800498c <HAL_ADC_ConfigChannel+0x690>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	4a41      	ldr	r2, [pc, #260]	; (8004990 <HAL_ADC_ConfigChannel+0x694>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004898:	e002      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3b01      	subs	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f9      	bne.n	800489a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048a6:	e05a      	b.n	800495e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a39      	ldr	r2, [pc, #228]	; (8004994 <HAL_ADC_ConfigChannel+0x698>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d11e      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x5f4>
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d119      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_ADC_ConfigChannel+0x688>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d14b      	bne.n	800495e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_ADC_ConfigChannel+0x5de>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a28      	ldr	r2, [pc, #160]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x5e2>
 80048da:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_ADC_ConfigChannel+0x680>)
 80048dc:	e000      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x5e4>
 80048de:	4a28      	ldr	r2, [pc, #160]	; (8004980 <HAL_ADC_ConfigChannel+0x684>)
 80048e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe fdc2 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048ee:	e036      	b.n	800495e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a28      	ldr	r2, [pc, #160]	; (8004998 <HAL_ADC_ConfigChannel+0x69c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d131      	bne.n	800495e <HAL_ADC_ConfigChannel+0x662>
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d12c      	bne.n	800495e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_ADC_ConfigChannel+0x688>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d127      	bne.n	800495e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_ADC_ConfigChannel+0x678>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_ADC_ConfigChannel+0x626>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_ADC_ConfigChannel+0x67c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x62a>
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <HAL_ADC_ConfigChannel+0x680>)
 8004924:	e000      	b.n	8004928 <HAL_ADC_ConfigChannel+0x62c>
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_ADC_ConfigChannel+0x684>)
 8004928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fe fd9e 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
 8004936:	e012      	b.n	800495e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800494a:	e008      	b.n	800495e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004966:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800496a:	4618      	mov	r0, r3
 800496c:	3784      	adds	r7, #132	; 0x84
 800496e:	46bd      	mov	sp, r7
 8004970:	bd90      	pop	{r4, r7, pc}
 8004972:	bf00      	nop
 8004974:	40022000 	.word	0x40022000
 8004978:	40022100 	.word	0x40022100
 800497c:	40022300 	.word	0x40022300
 8004980:	58026300 	.word	0x58026300
 8004984:	58026000 	.word	0x58026000
 8004988:	cb840000 	.word	0xcb840000
 800498c:	20000010 	.word	0x20000010
 8004990:	053e2d63 	.word	0x053e2d63
 8004994:	c7520000 	.word	0xc7520000
 8004998:	cfb80000 	.word	0xcfb80000

0800499c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe ff0b 	bl	80037c4 <LL_ADC_IsEnabled>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d16e      	bne.n	8004a92 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <ADC_Enable+0x100>)
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f043 0210 	orr.w	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e05a      	b.n	8004a94 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fec6 	bl	8003774 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049e8:	f7fe fcca 	bl	8003380 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <ADC_Enable+0x104>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <ADC_Enable+0x66>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <ADC_Enable+0x108>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <ADC_Enable+0x6a>
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <ADC_Enable+0x10c>)
 8004a04:	e000      	b.n	8004a08 <ADC_Enable+0x6c>
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <ADC_Enable+0x110>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fe49 	bl	80036a0 <LL_ADC_GetMultimode>
 8004a0e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <ADC_Enable+0x108>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d002      	beq.n	8004a20 <ADC_Enable+0x84>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e000      	b.n	8004a22 <ADC_Enable+0x86>
 8004a20:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <ADC_Enable+0x104>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02c      	beq.n	8004a84 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d130      	bne.n	8004a92 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a30:	e028      	b.n	8004a84 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fec4 	bl	80037c4 <LL_ADC_IsEnabled>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fe94 	bl	8003774 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a4c:	f7fe fc98 	bl	8003380 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d914      	bls.n	8004a84 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d00d      	beq.n	8004a84 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0210 	orr.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d1cf      	bne.n	8004a32 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	8000003f 	.word	0x8000003f
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40022100 	.word	0x40022100
 8004aa8:	40022300 	.word	0x40022300
 8004aac:	58026300 	.word	0x58026300

08004ab0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fe94 	bl	80037ea <LL_ADC_IsDisableOngoing>
 8004ac2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fe7b 	bl	80037c4 <LL_ADC_IsEnabled>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d047      	beq.n	8004b64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d144      	bne.n	8004b64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030d 	and.w	r3, r3, #13
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fe55 	bl	800379c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2203      	movs	r2, #3
 8004af8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004afa:	f7fe fc41 	bl	8003380 <HAL_GetTick>
 8004afe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b00:	e029      	b.n	8004b56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f043 0210 	orr.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	f043 0201 	orr.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e023      	b.n	8004b66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b1e:	f7fe fc2f 	bl	8003380 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d914      	bls.n	8004b56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e007      	b.n	8004b66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1dc      	bne.n	8004b1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7a      	ldr	r2, [pc, #488]	; (8004d68 <ADC_ConfigureBoostMode+0x1f8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <ADC_ConfigureBoostMode+0x1c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a79      	ldr	r2, [pc, #484]	; (8004d6c <ADC_ConfigureBoostMode+0x1fc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d109      	bne.n	8004ba0 <ADC_ConfigureBoostMode+0x30>
 8004b8c:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <ADC_ConfigureBoostMode+0x200>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e008      	b.n	8004bb2 <ADC_ConfigureBoostMode+0x42>
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <ADC_ConfigureBoostMode+0x204>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01c      	beq.n	8004bf0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004bb6:	f005 f89b 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8004bba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bc4:	d010      	beq.n	8004be8 <ADC_ConfigureBoostMode+0x78>
 8004bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bca:	d873      	bhi.n	8004cb4 <ADC_ConfigureBoostMode+0x144>
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d002      	beq.n	8004bd8 <ADC_ConfigureBoostMode+0x68>
 8004bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd6:	d16d      	bne.n	8004cb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	60fb      	str	r3, [r7, #12]
        break;
 8004be6:	e068      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	089b      	lsrs	r3, r3, #2
 8004bec:	60fb      	str	r3, [r7, #12]
        break;
 8004bee:	e064      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bf0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	f006 fafc 	bl	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c06:	d051      	beq.n	8004cac <ADC_ConfigureBoostMode+0x13c>
 8004c08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c0c:	d854      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c12:	d047      	beq.n	8004ca4 <ADC_ConfigureBoostMode+0x134>
 8004c14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c18:	d84e      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c1e:	d03d      	beq.n	8004c9c <ADC_ConfigureBoostMode+0x12c>
 8004c20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c24:	d848      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2a:	d033      	beq.n	8004c94 <ADC_ConfigureBoostMode+0x124>
 8004c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c30:	d842      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c36:	d029      	beq.n	8004c8c <ADC_ConfigureBoostMode+0x11c>
 8004c38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c3c:	d83c      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c42:	d01a      	beq.n	8004c7a <ADC_ConfigureBoostMode+0x10a>
 8004c44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c48:	d836      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c4e:	d014      	beq.n	8004c7a <ADC_ConfigureBoostMode+0x10a>
 8004c50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c54:	d830      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5a:	d00e      	beq.n	8004c7a <ADC_ConfigureBoostMode+0x10a>
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	d82a      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c66:	d008      	beq.n	8004c7a <ADC_ConfigureBoostMode+0x10a>
 8004c68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c6c:	d824      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
 8004c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c72:	d002      	beq.n	8004c7a <ADC_ConfigureBoostMode+0x10a>
 8004c74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c78:	d11e      	bne.n	8004cb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0c9b      	lsrs	r3, r3, #18
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	60fb      	str	r3, [r7, #12]
        break;
 8004c8a:	e016      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
        break;
 8004c92:	e012      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	60fb      	str	r3, [r7, #12]
        break;
 8004c9a:	e00e      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	60fb      	str	r3, [r7, #12]
        break;
 8004ca2:	e00a      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	09db      	lsrs	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
        break;
 8004caa:	e006      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	60fb      	str	r3, [r7, #12]
        break;
 8004cb2:	e002      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004cb8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004cba:	f7fe fb91 	bl	80033e0 <HAL_GetREVID>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d815      	bhi.n	8004cf4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <ADC_ConfigureBoostMode+0x208>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d908      	bls.n	8004ce2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cde:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ce0:	e03e      	b.n	8004d60 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	e035      	b.n	8004d60 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <ADC_ConfigureBoostMode+0x20c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d808      	bhi.n	8004d14 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	e025      	b.n	8004d60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <ADC_ConfigureBoostMode+0x210>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d80a      	bhi.n	8004d32 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	e016      	b.n	8004d60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <ADC_ConfigureBoostMode+0x214>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d80a      	bhi.n	8004d50 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4c:	609a      	str	r2, [r3, #8]
}
 8004d4e:	e007      	b.n	8004d60 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40022100 	.word	0x40022100
 8004d70:	40022300 	.word	0x40022300
 8004d74:	58026300 	.word	0x58026300
 8004d78:	01312d00 	.word	0x01312d00
 8004d7c:	005f5e10 	.word	0x005f5e10
 8004d80:	00bebc20 	.word	0x00bebc20
 8004d84:	017d7840 	.word	0x017d7840

08004d88 <LL_ADC_StartCalibration>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <LL_ADC_StartCalibration+0x38>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004da8:	430a      	orrs	r2, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	3ffeffc0 	.word	0x3ffeffc0

08004dc4 <LL_ADC_IsCalibrationOnGoing>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd8:	d101      	bne.n	8004dde <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_ADCEx_Calibration_Start+0x1e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e04c      	b.n	8004ea4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff fe4c 	bl	8004ab0 <ADC_Disable>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d135      	bne.n	8004e8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ffa4 	bl	8004d88 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e40:	e014      	b.n	8004e6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3301      	adds	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d30d      	bcc.n	8004e6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f023 0312 	bic.w	r3, r3, #18
 8004e58:	f043 0210 	orr.w	r2, r3, #16
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e01b      	b.n	8004ea4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ffa7 	bl	8004dc4 <LL_ADC_IsCalibrationOnGoing>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e2      	bne.n	8004e42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	f043 0201 	orr.w	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004e8c:	e005      	b.n	8004e9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f043 0210 	orr.w	r2, r3, #16
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	ffffeefd 	.word	0xffffeefd
 8004eb0:	25c3f800 	.word	0x25c3f800

08004eb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <__NVIC_SetPriorityGrouping>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <__NVIC_SetPriorityGrouping+0x40>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f46:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <__NVIC_SetPriorityGrouping+0x40>)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	60d3      	str	r3, [r2, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00
 8004f5c:	05fa0000 	.word	0x05fa0000

08004f60 <__NVIC_GetPriorityGrouping>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_EnableIRQ>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db0b      	blt.n	8004fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <__NVIC_EnableIRQ+0x38>)
 8004f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_SetPriority>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db0a      	blt.n	8004fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	490c      	ldr	r1, [pc, #48]	; (8005004 <__NVIC_SetPriority+0x4c>)
 8004fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fe0:	e00a      	b.n	8004ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <__NVIC_SetPriority+0x50>)
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	761a      	strb	r2, [r3, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <NVIC_EncodePriority>:
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	bf28      	it	cs
 800502a:	2304      	movcs	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	2b06      	cmp	r3, #6
 8005034:	d902      	bls.n	800503c <NVIC_EncodePriority+0x30>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3b03      	subs	r3, #3
 800503a:	e000      	b.n	800503e <NVIC_EncodePriority+0x32>
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	401a      	ands	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	43d9      	mvns	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	4313      	orrs	r3, r2
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d301      	bcc.n	800508a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <SysTick_Config+0x40>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005092:	210f      	movs	r1, #15
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f7ff ff8e 	bl	8004fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SysTick_Config+0x40>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SysTick_Config+0x40>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff29 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050dc:	f7ff ff40 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 80050e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f7ff ff90 	bl	800500c <NVIC_EncodePriority>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff5f 	bl	8004fb8 <__NVIC_SetPriority>
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	4603      	mov	r3, r0
 800510a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff33 	bl	8004f7c <__NVIC_EnableIRQ>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ffa4 	bl	8005074 <SysTick_Config>
 800512c:	4603      	mov	r3, r0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e014      	b.n	8005172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	791b      	ldrb	r3, [r3, #4]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fd fad7 	bl	800270c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	795b      	ldrb	r3, [r3, #5]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_DAC_Start+0x16>
 800518c:	2302      	movs	r3, #2
 800518e:	e040      	b.n	8005212 <HAL_DAC_Start+0x98>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2201      	movs	r2, #1
 80051aa:	409a      	lsls	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d11d      	bne.n	8005204 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	e014      	b.n	8005204 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2102      	movs	r1, #2
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d107      	bne.n	8005204 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0202 	orr.w	r2, r2, #2
 8005202:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800521e:	b480      	push	{r7}
 8005220:	b087      	sub	sp, #28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	3308      	adds	r3, #8
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e004      	b.n	8005252 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	3314      	adds	r3, #20
 8005250:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	461a      	mov	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	795b      	ldrb	r3, [r3, #5]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_DAC_ConfigChannel+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e12a      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x26e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	f040 8081 	bne.w	8005398 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005296:	f7fe f873 	bl	8003380 <HAL_GetTick>
 800529a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d140      	bne.n	8005324 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052a2:	e018      	b.n	80052d6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052a4:	f7fe f86c 	bl	8003380 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d911      	bls.n	80052d6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_DAC_ConfigChannel+0x278>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f043 0208 	orr.w	r2, r3, #8
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2203      	movs	r2, #3
 80052d0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0ff      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052dc:	4b80      	ldr	r3, [pc, #512]	; (80054e0 <HAL_DAC_ConfigChannel+0x278>)
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1df      	bne.n	80052a4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fe f857 	bl	8003398 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	6992      	ldr	r2, [r2, #24]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
 80052f4:	e023      	b.n	800533e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052f6:	f7fe f843 	bl	8003380 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d90f      	bls.n	8005324 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	da0a      	bge.n	8005324 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f043 0208 	orr.w	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2203      	movs	r2, #3
 800531e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e0d8      	b.n	80054d6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	2b00      	cmp	r3, #0
 800532c:	dbe3      	blt.n	80052f6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800532e:	2001      	movs	r0, #1
 8005330:	f7fe f832 	bl	8003398 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	6992      	ldr	r2, [r2, #24]
 800533c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	ea02 0103 	and.w	r1, r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	21ff      	movs	r1, #255	; 0xff
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	ea02 0103 	and.w	r1, r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	409a      	lsls	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11d      	bne.n	80053dc <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	221f      	movs	r2, #31
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2207      	movs	r2, #7
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4013      	ands	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d102      	bne.n	8005406 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	e00f      	b.n	8005426 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d102      	bne.n	8005414 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800540e:	2301      	movs	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e008      	b.n	8005426 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800541c:	2301      	movs	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e001      	b.n	8005426 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4313      	orrs	r3, r2
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43da      	mvns	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	400a      	ands	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4013      	ands	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	22c0      	movs	r2, #192	; 0xc0
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	400a      	ands	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20008000 	.word	0x20008000

080054e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e0cf      	b.n	8005696 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2223      	movs	r2, #35	; 0x23
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f009 f8db 	bl	800e6c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800550e:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <HAL_ETH_Init+0x1bc>)
 8005510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005514:	4a62      	ldr	r2, [pc, #392]	; (80056a0 <HAL_ETH_Init+0x1bc>)
 8005516:	f043 0302 	orr.w	r3, r3, #2
 800551a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800551e:	4b60      	ldr	r3, [pc, #384]	; (80056a0 <HAL_ETH_Init+0x1bc>)
 8005520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7a1b      	ldrb	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005534:	2000      	movs	r0, #0
 8005536:	f7fd ff5f 	bl	80033f8 <HAL_SYSCFG_ETHInterfaceSelect>
 800553a:	e003      	b.n	8005544 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800553c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005540:	f7fd ff5a 	bl	80033f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005544:	4b57      	ldr	r3, [pc, #348]	; (80056a4 <HAL_ETH_Init+0x1c0>)
 8005546:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800555e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005560:	f7fd ff0e 	bl	8003380 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005566:	e011      	b.n	800558c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005568:	f7fd ff0a 	bl	8003380 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005576:	d909      	bls.n	800558c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2204      	movs	r2, #4
 800557c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	22e0      	movs	r2, #224	; 0xe0
 8005584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e084      	b.n	8005696 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e4      	bne.n	8005568 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fcd4 	bl	8005f4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80055a4:	f004 fba4 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4a3f      	ldr	r2, [pc, #252]	; (80056a8 <HAL_ETH_Init+0x1c4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	0c9a      	lsrs	r2, r3, #18
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3a01      	subs	r2, #1
 80055b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 febf 	bl	8006340 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80055ce:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	22e0      	movs	r2, #224	; 0xe0
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e049      	b.n	8005696 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800560e:	4b27      	ldr	r3, [pc, #156]	; (80056ac <HAL_ETH_Init+0x1c8>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6952      	ldr	r2, [r2, #20]
 8005616:	0051      	lsls	r1, r2, #1
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	430b      	orrs	r3, r1
 800561e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005622:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 ff27 	bl	800647a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 ff6d 	bl	800650c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	3305      	adds	r3, #5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	3303      	adds	r3, #3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	061a      	lsls	r2, r3, #24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	3302      	adds	r3, #2
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	3301      	adds	r3, #1
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005670:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800567e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005680:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2210      	movs	r2, #16
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	58000400 	.word	0x58000400
 80056a8:	431bde83 	.word	0x431bde83
 80056ac:	ffff8001 	.word	0xffff8001

080056b0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	2b10      	cmp	r3, #16
 80056c0:	d153      	bne.n	800576a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2223      	movs	r2, #35	; 0x23
 80056c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f936 	bl	8005942 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0202 	orr.w	r2, r2, #2
 80056e4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005712:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005722:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800573e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8005756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800575a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2223      	movs	r2, #35	; 0x23
 8005762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	e000      	b.n	800576c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
  }
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005782:	2b23      	cmp	r3, #35	; 0x23
 8005784:	d13f      	bne.n	8005806 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2223      	movs	r2, #35	; 0x23
 800578a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005796:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0202 	bic.w	r2, r2, #2
 80057f8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2210      	movs	r2, #16
 80057fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e07f      	b.n	800593a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005840:	2b23      	cmp	r3, #35	; 0x23
 8005842:	d179      	bne.n	8005938 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005844:	2200      	movs	r2, #0
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 febd 	bl	80065c8 <ETH_Prepare_Tx_Descriptors>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e068      	b.n	800593a <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8005868:	f3bf 8f4f 	dsb	sy
}
 800586c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3206      	adds	r2, #6
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	629a      	str	r2, [r3, #40]	; 0x28
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	2b03      	cmp	r3, #3
 800588c:	d904      	bls.n	8005898 <HAL_ETH_Transmit+0x84>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	1f1a      	subs	r2, r3, #4
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3106      	adds	r1, #6
 80058a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80058b0:	f7fd fd66 	bl	8003380 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80058b6:	e039      	b.n	800592c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80058c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d012      	beq.n	80058f2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f043 0208 	orr.w	r2, r3, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e023      	b.n	800593a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d018      	beq.n	800592c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fd fd41 	bl	8003380 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <HAL_ETH_Transmit+0xfc>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005926:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e006      	b.n	800593a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	dbc1      	blt.n	80058b8 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800594e:	2301      	movs	r3, #1
 8005950:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005956:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	3212      	adds	r2, #18
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005968:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800596a:	e03b      	b.n	80059e4 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d112      	bne.n	800599a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005974:	f107 030c 	add.w	r3, r7, #12
 8005978:	4618      	mov	r0, r3
 800597a:	f009 f84b 	bl	800ea14 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	74fb      	strb	r3, [r7, #19]
 8005988:	e007      	b.n	800599a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	461a      	mov	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	461a      	mov	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d021      	beq.n	80059e4 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80059a0:	f3bf 8f5f 	dmb	sy
}
 80059a4:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	e003      	b.n	80059c0 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80059be:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d902      	bls.n	80059d2 <ETH_UpdateDescriptor+0x90>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	3212      	adds	r2, #18
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	617b      	str	r3, [r7, #20]
      desccount--;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <ETH_UpdateDescriptor+0xae>
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1bd      	bne.n	800596c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d00d      	beq.n	8005a16 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	461a      	mov	r2, r3
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005a16:	bf00      	nop
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e03e      	b.n	8005abe <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a48:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	055b      	lsls	r3, r3, #21
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f043 030c 	orr.w	r3, r3, #12
 8005a6c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005a80:	f7fd fc7e 	bl	8003380 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005a86:	e009      	b.n	8005a9c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005a88:	f7fd fc7a 	bl	8003380 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a96:	d901      	bls.n	8005a9c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e010      	b.n	8005abe <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1ed      	bne.n	8005a88 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e03c      	b.n	8005b64 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005af2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	055b      	lsls	r3, r3, #21
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 030c 	bic.w	r3, r3, #12
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_ETH_WritePHYRegister+0xa4>)
 8005b2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005b2e:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <HAL_ETH_WritePHYRegister+0xa4>)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005b36:	f7fd fc23 	bl	8003380 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005b3c:	e009      	b.n	8005b52 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005b3e:	f7fd fc1f 	bl	8003380 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4c:	d901      	bls.n	8005b52 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e008      	b.n	8005b64 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ed      	bne.n	8005b3e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40028000 	.word	0x40028000

08005b70 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e1c3      	b.n	8005f0c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 020c 	and.w	r2, r3, #12
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf0c      	ite	eq
 8005bca:	2301      	moveq	r3, #1
 8005bcc:	2300      	movne	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	2300      	moveq	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	0e5b      	lsrs	r3, r3, #25
 8005dce:	f003 021f 	and.w	r2, r3, #31
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bf14      	ite	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	2300      	moveq	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf14      	ite	ne
 8005e82:	2301      	movne	r3, #1
 8005e84:	2300      	moveq	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005e98:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005ea8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e00b      	b.n	8005f44 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d105      	bne.n	8005f42 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f85f 	bl	8005ffc <ETH_SetMACConfig>

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005f66:	f003 fec3 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8005f6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d908      	bls.n	8005f86 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d804      	bhi.n	8005f86 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e027      	b.n	8005fd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d908      	bls.n	8005fa0 <HAL_ETH_SetMDIOClockRange+0x54>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d204      	bcs.n	8005fa0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e01a      	b.n	8005fd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4a13      	ldr	r2, [pc, #76]	; (8005ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d303      	bcc.n	8005fb0 <HAL_ETH_SetMDIOClockRange+0x64>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d911      	bls.n	8005fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d908      	bls.n	8005fca <HAL_ETH_SetMDIOClockRange+0x7e>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d804      	bhi.n	8005fca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e005      	b.n	8005fd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e000      	b.n	8005fd6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005fd4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	01312cff 	.word	0x01312cff
 8005fec:	02160ebf 	.word	0x02160ebf
 8005ff0:	03938700 	.word	0x03938700
 8005ff4:	05f5e0ff 	.word	0x05f5e0ff
 8005ff8:	08f0d17f 	.word	0x08f0d17f

08005ffc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800600e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	791b      	ldrb	r3, [r3, #4]
 8006014:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006016:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	7b1b      	ldrb	r3, [r3, #12]
 800601c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800601e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	7b5b      	ldrb	r3, [r3, #13]
 8006024:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006026:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	7b9b      	ldrb	r3, [r3, #14]
 800602c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800602e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	7bdb      	ldrb	r3, [r3, #15]
 8006034:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006036:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	2a00      	cmp	r2, #0
 800603e:	d102      	bne.n	8006046 <ETH_SetMACConfig+0x4a>
 8006040:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006044:	e000      	b.n	8006048 <ETH_SetMACConfig+0x4c>
 8006046:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006048:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	7c52      	ldrb	r2, [r2, #17]
 800604e:	2a00      	cmp	r2, #0
 8006050:	d102      	bne.n	8006058 <ETH_SetMACConfig+0x5c>
 8006052:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006056:	e000      	b.n	800605a <ETH_SetMACConfig+0x5e>
 8006058:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800605a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	7c9b      	ldrb	r3, [r3, #18]
 8006060:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006062:	431a      	orrs	r2, r3
               macconf->Speed |
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006068:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800606e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	7f1b      	ldrb	r3, [r3, #28]
 8006074:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	7f5b      	ldrb	r3, [r3, #29]
 800607c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800607e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	7f92      	ldrb	r2, [r2, #30]
 8006084:	2a00      	cmp	r2, #0
 8006086:	d102      	bne.n	800608e <ETH_SetMACConfig+0x92>
 8006088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800608c:	e000      	b.n	8006090 <ETH_SetMACConfig+0x94>
 800608e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006090:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	7fdb      	ldrb	r3, [r3, #31]
 8006096:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006098:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d102      	bne.n	80060aa <ETH_SetMACConfig+0xae>
 80060a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060a8:	e000      	b.n	80060ac <ETH_SetMACConfig+0xb0>
 80060aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80060ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80060b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80060bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b56      	ldr	r3, [pc, #344]	; (8006228 <ETH_SetMACConfig+0x22c>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80060e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80060f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80060fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006104:	2a00      	cmp	r2, #0
 8006106:	d102      	bne.n	800610e <ETH_SetMACConfig+0x112>
 8006108:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800610c:	e000      	b.n	8006110 <ETH_SetMACConfig+0x114>
 800610e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006110:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	4b42      	ldr	r3, [pc, #264]	; (800622c <ETH_SetMACConfig+0x230>)
 8006122:	4013      	ands	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	430b      	orrs	r3, r1
 800612c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006134:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <ETH_SetMACConfig+0x234>)
 8006146:	4013      	ands	r3, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	430b      	orrs	r3, r1
 8006150:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006158:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800615e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006166:	2a00      	cmp	r2, #0
 8006168:	d101      	bne.n	800616e <ETH_SetMACConfig+0x172>
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	e000      	b.n	8006170 <ETH_SetMACConfig+0x174>
 800616e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006170:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006182:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006186:	4013      	ands	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	430b      	orrs	r3, r1
 8006190:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006198:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80061a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f023 0103 	bic.w	r1, r3, #3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80061c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	d101      	bne.n	80061ea <ETH_SetMACConfig+0x1ee>
 80061e6:	2240      	movs	r2, #64	; 0x40
 80061e8:	e000      	b.n	80061ec <ETH_SetMACConfig+0x1f0>
 80061ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80061ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80061f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80061f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80061fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800620c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	430a      	orrs	r2, r1
 8006218:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	00048083 	.word	0x00048083
 800622c:	c0f88000 	.word	0xc0f88000
 8006230:	fffffef0 	.word	0xfffffef0

08006234 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b38      	ldr	r3, [pc, #224]	; (800632c <ETH_SetDMAConfig+0xf8>)
 800624a:	4013      	ands	r3, r2
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	6811      	ldr	r1, [r2, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	430b      	orrs	r3, r1
 8006256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800625a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006266:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	7b1b      	ldrb	r3, [r3, #12]
 800626c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b2c      	ldr	r3, [pc, #176]	; (8006330 <ETH_SetDMAConfig+0xfc>)
 800627e:	4013      	ands	r3, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	430b      	orrs	r3, r1
 8006288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800628c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	7b5b      	ldrb	r3, [r3, #13]
 8006292:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80062a8:	4b22      	ldr	r3, [pc, #136]	; (8006334 <ETH_SetDMAConfig+0x100>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	430b      	orrs	r3, r1
 80062b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	7d1b      	ldrb	r3, [r3, #20]
 80062c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80062c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	7f5b      	ldrb	r3, [r3, #29]
 80062cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80062de:	4b16      	ldr	r3, [pc, #88]	; (8006338 <ETH_SetDMAConfig+0x104>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	7f1b      	ldrb	r3, [r3, #28]
 80062f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006308:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <ETH_SetDMAConfig+0x108>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	68f9      	ldr	r1, [r7, #12]
 8006316:	430b      	orrs	r3, r1
 8006318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800631c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	ffff87fd 	.word	0xffff87fd
 8006330:	ffff2ffe 	.word	0xffff2ffe
 8006334:	fffec000 	.word	0xfffec000
 8006338:	ffc0efef 	.word	0xffc0efef
 800633c:	7fc0ffff 	.word	0x7fc0ffff

08006340 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b0a4      	sub	sp, #144	; 0x90
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800634e:	2300      	movs	r3, #0
 8006350:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006358:	2300      	movs	r3, #0
 800635a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800637c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006380:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006388:	2300      	movs	r3, #0
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006392:	2300      	movs	r3, #0
 8006394:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006398:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800639c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80063a4:	2300      	movs	r3, #0
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80063ba:	2300      	movs	r3, #0
 80063bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80063be:	2300      	movs	r3, #0
 80063c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80063c2:	2300      	movs	r3, #0
 80063c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80063d8:	2320      	movs	r3, #32
 80063da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80063ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80063f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80063fc:	2302      	movs	r3, #2
 80063fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006402:	2300      	movs	r3, #0
 8006404:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006408:	2300      	movs	r3, #0
 800640a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800640e:	2300      	movs	r3, #0
 8006410:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800641a:	2300      	movs	r3, #0
 800641c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fde6 	bl	8005ffc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006430:	2301      	movs	r3, #1
 8006432:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006434:	2301      	movs	r3, #1
 8006436:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006446:	2300      	movs	r3, #0
 8006448:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800644a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800644e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006450:	2300      	movs	r3, #0
 8006452:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006458:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800645a:	2300      	movs	r3, #0
 800645c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006460:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006466:	f107 0308 	add.w	r3, r7, #8
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fee1 	bl	8006234 <ETH_SetDMAConfig>
}
 8006472:	bf00      	nop
 8006474:	3790      	adds	r7, #144	; 0x90
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	e01d      	b.n	80064c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68d9      	ldr	r1, [r3, #12]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4613      	mov	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	440b      	add	r3, r1
 8006498:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	3206      	adds	r2, #6
 80064ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d9de      	bls.n	8006488 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	461a      	mov	r2, r3
 80064da:	2303      	movs	r3, #3
 80064dc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e023      	b.n	8006562 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6919      	ldr	r1, [r3, #16]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4413      	add	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	440b      	add	r3, r1
 800652a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2200      	movs	r2, #0
 8006542:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	3212      	adds	r2, #18
 8006558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d9d8      	bls.n	800651a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658e:	461a      	mov	r2, r3
 8006590:	2303      	movs	r3, #3
 8006592:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b08d      	sub	sp, #52	; 0x34
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3318      	adds	r3, #24
 80065d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660a:	d007      	beq.n	800661c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	3304      	adds	r3, #4
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800661c:	2302      	movs	r3, #2
 800661e:	e259      	b.n	8006ad4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d044      	beq.n	80066b6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	4b75      	ldr	r3, [pc, #468]	; (8006808 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006632:	4013      	ands	r3, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006638:	431a      	orrs	r2, r3
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006658:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d027      	beq.n	80066b6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	b29a      	uxth	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	431a      	orrs	r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80066a4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	4b51      	ldr	r3, [pc, #324]	; (800680c <ETH_Prepare_Tx_Descriptors+0x244>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	6992      	ldr	r2, [r2, #24]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d036      	beq.n	8006766 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006704:	f3bf 8f5f 	dmb	sy
}
 8006708:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	3301      	adds	r3, #1
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	2b03      	cmp	r3, #3
 8006720:	d902      	bls.n	8006728 <ETH_Prepare_Tx_Descriptors+0x160>
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	3b04      	subs	r3, #4
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006744:	d10f      	bne.n	8006766 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8006750:	f3bf 8f5f 	dmb	sy
}
 8006754:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006762:	2302      	movs	r3, #2
 8006764:	e1b6      	b.n	8006ad4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	3301      	adds	r3, #1
 800676a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <ETH_Prepare_Tx_Descriptors+0x244>)
 800677c:	4013      	ands	r3, r2
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	6852      	ldr	r2, [r2, #4]
 8006782:	431a      	orrs	r2, r3
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <ETH_Prepare_Tx_Descriptors+0x248>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	0412      	lsls	r2, r2, #16
 80067ae:	431a      	orrs	r2, r3
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	e008      	b.n	80067c8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <ETH_Prepare_Tx_Descriptors+0x248>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d021      	beq.n	8006818 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	04db      	lsls	r3, r3, #19
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69d2      	ldr	r2, [r2, #28]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e02e      	b.n	8006866 <ETH_Prepare_Tx_Descriptors+0x29e>
 8006808:	ffff0000 	.word	0xffff0000
 800680c:	ffffc000 	.word	0xffffc000
 8006810:	c000ffff 	.word	0xc000ffff
 8006814:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <ETH_Prepare_Tx_Descriptors+0x444>)
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	6852      	ldr	r2, [r2, #4]
 8006824:	431a      	orrs	r2, r3
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	431a      	orrs	r2, r3
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	431a      	orrs	r2, r3
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d008      	beq.n	8006884 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	431a      	orrs	r2, r3
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800689c:	f3bf 8f5f 	dmb	sy
}
 80068a0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80da 	beq.w	8006a70 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80068ce:	e0cf      	b.n	8006a70 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	3301      	adds	r3, #1
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d902      	bls.n	80068ee <ETH_Prepare_Tx_Descriptors+0x326>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	3b04      	subs	r3, #4
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006910:	d007      	beq.n	8006922 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	3304      	adds	r3, #4
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d029      	beq.n	8006976 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006930:	2300      	movs	r3, #0
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
 8006934:	e019      	b.n	800696a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006936:	f3bf 8f5f 	dmb	sy
}
 800693a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	3301      	adds	r3, #1
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b03      	cmp	r3, #3
 8006952:	d902      	bls.n	800695a <ETH_Prepare_Tx_Descriptors+0x392>
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	3b04      	subs	r3, #4
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	3301      	adds	r3, #1
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
 800696a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	429a      	cmp	r2, r3
 8006970:	d3e1      	bcc.n	8006936 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	e0ae      	b.n	8006ad4 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	3301      	adds	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <ETH_Prepare_Tx_Descriptors+0x448>)
 8006992:	4013      	ands	r3, r2
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	6852      	ldr	r2, [r2, #4]
 8006998:	431a      	orrs	r2, r3
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80069bc:	4013      	ands	r3, r2
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	6852      	ldr	r2, [r2, #4]
 80069c2:	0412      	lsls	r2, r2, #16
 80069c4:	431a      	orrs	r2, r3
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	609a      	str	r2, [r3, #8]
 80069ca:	e008      	b.n	80069de <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80069d8:	4013      	ands	r3, r2
 80069da:	6a3a      	ldr	r2, [r7, #32]
 80069dc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <ETH_Prepare_Tx_Descriptors+0x450>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	69d2      	ldr	r2, [r2, #28]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	60da      	str	r2, [r3, #12]
 8006a08:	e020      	b.n	8006a4c <ETH_Prepare_Tx_Descriptors+0x484>
 8006a0a:	bf00      	nop
 8006a0c:	ffff8000 	.word	0xffff8000
 8006a10:	ffffc000 	.word	0xffffc000
 8006a14:	c000ffff 	.word	0xc000ffff
 8006a18:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <ETH_Prepare_Tx_Descriptors+0x518>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	6852      	ldr	r2, [r2, #4]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006a52:	f3bf 8f5f 	dmb	sy
}
 8006a56:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f af2b 	bne.w	80068d0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	e005      	b.n	8006a9a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	3304      	adds	r3, #4
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006abc:	b672      	cpsid	i
}
 8006abe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006ace:	b662      	cpsie	i
}
 8006ad0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3734      	adds	r7, #52	; 0x34
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	ffff8000 	.word	0xffff8000

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006af2:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <HAL_GPIO_Init+0x234>)
 8006af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006af6:	e194      	b.n	8006e22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2101      	movs	r1, #1
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	4013      	ands	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8186 	beq.w	8006e1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d005      	beq.n	8006b28 <HAL_GPIO_Init+0x44>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d130      	bne.n	8006b8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	2203      	movs	r2, #3
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b5e:	2201      	movs	r2, #1
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	f003 0201 	and.w	r2, r3, #1
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d017      	beq.n	8006bc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4013      	ands	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d123      	bne.n	8006c1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	08da      	lsrs	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3208      	adds	r2, #8
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	220f      	movs	r2, #15
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	08da      	lsrs	r2, r3, #3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3208      	adds	r2, #8
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	2203      	movs	r2, #3
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0203 	and.w	r2, r3, #3
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80e0 	beq.w	8006e1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c62:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c7a:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_GPIO_Init+0x23c>)
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	3302      	adds	r3, #2
 8006c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	220f      	movs	r2, #15
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <HAL_GPIO_Init+0x240>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d052      	beq.n	8006d4c <HAL_GPIO_Init+0x268>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <HAL_GPIO_Init+0x244>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d031      	beq.n	8006d12 <HAL_GPIO_Init+0x22e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <HAL_GPIO_Init+0x248>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02b      	beq.n	8006d0e <HAL_GPIO_Init+0x22a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_GPIO_Init+0x24c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d025      	beq.n	8006d0a <HAL_GPIO_Init+0x226>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <HAL_GPIO_Init+0x250>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01f      	beq.n	8006d06 <HAL_GPIO_Init+0x222>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_GPIO_Init+0x254>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d019      	beq.n	8006d02 <HAL_GPIO_Init+0x21e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <HAL_GPIO_Init+0x258>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_GPIO_Init+0x21a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <HAL_GPIO_Init+0x25c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00d      	beq.n	8006cfa <HAL_GPIO_Init+0x216>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_GPIO_Init+0x260>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <HAL_GPIO_Init+0x212>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_GPIO_Init+0x264>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <HAL_GPIO_Init+0x20e>
 8006cee:	2309      	movs	r3, #9
 8006cf0:	e02d      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	e02b      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	e029      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cfa:	2307      	movs	r3, #7
 8006cfc:	e027      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cfe:	2306      	movs	r3, #6
 8006d00:	e025      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d02:	2305      	movs	r3, #5
 8006d04:	e023      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d06:	2304      	movs	r3, #4
 8006d08:	e021      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e01f      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e01d      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e01b      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d16:	bf00      	nop
 8006d18:	58000080 	.word	0x58000080
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	58000400 	.word	0x58000400
 8006d24:	58020000 	.word	0x58020000
 8006d28:	58020400 	.word	0x58020400
 8006d2c:	58020800 	.word	0x58020800
 8006d30:	58020c00 	.word	0x58020c00
 8006d34:	58021000 	.word	0x58021000
 8006d38:	58021400 	.word	0x58021400
 8006d3c:	58021800 	.word	0x58021800
 8006d40:	58021c00 	.word	0x58021c00
 8006d44:	58022000 	.word	0x58022000
 8006d48:	58022400 	.word	0x58022400
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	f002 0203 	and.w	r2, r2, #3
 8006d54:	0092      	lsls	r2, r2, #2
 8006d56:	4093      	lsls	r3, r2
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d5e:	4938      	ldr	r1, [pc, #224]	; (8006e40 <HAL_GPIO_Init+0x35c>)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	089b      	lsrs	r3, r3, #2
 8006d64:	3302      	adds	r3, #2
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f ae63 	bne.w	8006af8 <HAL_GPIO_Init+0x14>
  }
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	3724      	adds	r7, #36	; 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	58000400 	.word	0x58000400

08006e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e001      	b.n	8006e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e84:	787b      	ldrb	r3, [r7, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e90:	e003      	b.n	8006e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e92:	887b      	ldrh	r3, [r7, #2]
 8006e94:	041a      	lsls	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	619a      	str	r2, [r3, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	041a      	lsls	r2, r3, #16
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	43d9      	mvns	r1, r3
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	400b      	ands	r3, r1
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	619a      	str	r2, [r3, #24]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f804 	bl	8006f0e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	4603      	mov	r3, r0
 8006f16:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0bd      	b.n	80070b2 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d031      	beq.n	8006fde <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4f      	ldr	r2, [pc, #316]	; (80070bc <HAL_HRTIM_Init+0x198>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10e      	bne.n	8006fa2 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006f84:	4b4e      	ldr	r3, [pc, #312]	; (80070c0 <HAL_HRTIM_Init+0x19c>)
 8006f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f8a:	4a4d      	ldr	r2, [pc, #308]	; (80070c0 <HAL_HRTIM_Init+0x19c>)
 8006f8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f94:	4b4a      	ldr	r3, [pc, #296]	; (80070c0 <HAL_HRTIM_Init+0x19c>)
 8006f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006fb0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fc6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb fbda 	bl	8002798 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d012      	beq.n	8007016 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
 800702a:	e03e      	b.n	80070aa <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800702c:	7dfa      	ldrb	r2, [r7, #23]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3318      	adds	r3, #24
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007040:	7dfa      	ldrb	r2, [r7, #23]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	331c      	adds	r3, #28
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007054:	7dfa      	ldrb	r2, [r7, #23]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3320      	adds	r3, #32
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007068:	7dfa      	ldrb	r2, [r7, #23]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3324      	adds	r3, #36	; 0x24
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800707c:	7dfa      	ldrb	r2, [r7, #23]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	3328      	adds	r3, #40	; 0x28
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007090:	7dfa      	ldrb	r2, [r7, #23]
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3330      	adds	r3, #48	; 0x30
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	3301      	adds	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	d9bd      	bls.n	800702c <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40017400 	.word	0x40017400
 80070c0:	58024400 	.word	0x58024400

080070c4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d101      	bne.n	80070e0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
 80070de:	e015      	b.n	800710c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d104      	bne.n	80070f8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fc4d 	bl	8007990 <HRTIM_MasterBase_Config>
 80070f6:	e004      	b.n	8007102 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fc76 	bl	80079ee <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d101      	bne.n	8007130 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	e05f      	b.n	80071f0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800713a:	2302      	movs	r3, #2
 800713c:	e058      	b.n	80071f0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b05      	cmp	r3, #5
 8007152:	d104      	bne.n	800715e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fc89 	bl	8007a6e <HRTIM_MasterWaveform_Config>
 800715c:	e004      	b.n	8007168 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fcea 	bl	8007b3c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6819      	ldr	r1, [r3, #0]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4403      	add	r3, r0
 800717a:	3320      	adds	r3, #32
 800717c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6859      	ldr	r1, [r3, #4]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4403      	add	r3, r0
 8007190:	3324      	adds	r3, #36	; 0x24
 8007192:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4403      	add	r3, r0
 80071a6:	3328      	adds	r3, #40	; 0x28
 80071a8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68d9      	ldr	r1, [r3, #12]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4403      	add	r3, r0
 80071bc:	332c      	adds	r3, #44	; 0x2c
 80071be:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6919      	ldr	r1, [r3, #16]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4403      	add	r3, r0
 80071d2:	3330      	adds	r3, #48	; 0x30
 80071d4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 fec7 	bl	8007f6c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d101      	bne.n	8007216 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
 8007214:	e157      	b.n	80074c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007220:	2302      	movs	r3, #2
 8007222:	e150      	b.n	80074c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b05      	cmp	r3, #5
 8007238:	d140      	bne.n	80072bc <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3b01      	subs	r3, #1
 800723e:	2b07      	cmp	r3, #7
 8007240:	d82a      	bhi.n	8007298 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007242:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	08007269 	.word	0x08007269
 800724c:	08007275 	.word	0x08007275
 8007250:	08007299 	.word	0x08007299
 8007254:	08007281 	.word	0x08007281
 8007258:	08007299 	.word	0x08007299
 800725c:	08007299 	.word	0x08007299
 8007260:	08007299 	.word	0x08007299
 8007264:	0800728d 	.word	0x0800728d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	61da      	str	r2, [r3, #28]
        break;
 8007272:	e01a      	b.n	80072aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800727e:	e014      	b.n	80072aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800728a:	e00e      	b.n	80072aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007296:	e008      	b.n	80072aa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2207      	movs	r2, #7
 800729c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80072a8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	f040 80fe 	bne.w	80074b4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e104      	b.n	80074c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3b01      	subs	r3, #1
 80072c0:	2b07      	cmp	r3, #7
 80072c2:	f200 80e3 	bhi.w	800748c <HAL_HRTIM_WaveformCompareConfig+0x294>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	08007301 	.word	0x08007301
 80072d4:	0800748d 	.word	0x0800748d
 80072d8:	080073bd 	.word	0x080073bd
 80072dc:	0800748d 	.word	0x0800748d
 80072e0:	0800748d 	.word	0x0800748d
 80072e4:	0800748d 	.word	0x0800748d
 80072e8:	080073d1 	.word	0x080073d1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	01db      	lsls	r3, r3, #7
 80072f8:	440b      	add	r3, r1
 80072fa:	339c      	adds	r3, #156	; 0x9c
 80072fc:	601a      	str	r2, [r3, #0]
        break;
 80072fe:	e0d1      	b.n	80074a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	440b      	add	r3, r1
 800730e:	33a4      	adds	r3, #164	; 0xa4
 8007310:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d03f      	beq.n	800739a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3301      	adds	r3, #1
 8007322:	01db      	lsls	r3, r3, #7
 8007324:	4413      	add	r3, r2
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6811      	ldr	r1, [r2, #0]
 800732c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	3301      	adds	r3, #1
 8007334:	01db      	lsls	r3, r3, #7
 8007336:	440b      	add	r3, r1
 8007338:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3301      	adds	r3, #1
 8007342:	01db      	lsls	r3, r3, #7
 8007344:	4413      	add	r3, r2
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	68f9      	ldr	r1, [r7, #12]
 800734e:	6809      	ldr	r1, [r1, #0]
 8007350:	431a      	orrs	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	3301      	adds	r3, #1
 8007356:	01db      	lsls	r3, r3, #7
 8007358:	440b      	add	r3, r1
 800735a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007364:	d109      	bne.n	800737a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	01db      	lsls	r3, r3, #7
 8007372:	440b      	add	r3, r1
 8007374:	339c      	adds	r3, #156	; 0x9c
 8007376:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007378:	e091      	b.n	800749e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007382:	f040 808c 	bne.w	800749e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6819      	ldr	r1, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	01db      	lsls	r3, r3, #7
 8007392:	440b      	add	r3, r1
 8007394:	33a8      	adds	r3, #168	; 0xa8
 8007396:	601a      	str	r2, [r3, #0]
         break;
 8007398:	e081      	b.n	800749e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3301      	adds	r3, #1
 80073a2:	01db      	lsls	r3, r3, #7
 80073a4:	4413      	add	r3, r2
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	6811      	ldr	r1, [r2, #0]
 80073ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3301      	adds	r3, #1
 80073b4:	01db      	lsls	r3, r3, #7
 80073b6:	440b      	add	r3, r1
 80073b8:	601a      	str	r2, [r3, #0]
         break;
 80073ba:	e070      	b.n	800749e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6819      	ldr	r1, [r3, #0]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	440b      	add	r3, r1
 80073ca:	33a8      	adds	r3, #168	; 0xa8
 80073cc:	601a      	str	r2, [r3, #0]
        break;
 80073ce:	e069      	b.n	80074a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	01db      	lsls	r3, r3, #7
 80073dc:	440b      	add	r3, r1
 80073de:	33ac      	adds	r3, #172	; 0xac
 80073e0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d03f      	beq.n	800746a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	3301      	adds	r3, #1
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	4413      	add	r3, r2
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	6811      	ldr	r1, [r2, #0]
 80073fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3301      	adds	r3, #1
 8007404:	01db      	lsls	r3, r3, #7
 8007406:	440b      	add	r3, r1
 8007408:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	3301      	adds	r3, #1
 8007412:	01db      	lsls	r3, r3, #7
 8007414:	4413      	add	r3, r2
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	6809      	ldr	r1, [r1, #0]
 8007422:	431a      	orrs	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	3301      	adds	r3, #1
 8007428:	01db      	lsls	r3, r3, #7
 800742a:	440b      	add	r3, r1
 800742c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d109      	bne.n	800744c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6819      	ldr	r1, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	01db      	lsls	r3, r3, #7
 8007444:	440b      	add	r3, r1
 8007446:	339c      	adds	r3, #156	; 0x9c
 8007448:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800744a:	e02a      	b.n	80074a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007454:	d125      	bne.n	80074a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6819      	ldr	r1, [r3, #0]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	01db      	lsls	r3, r3, #7
 8007462:	440b      	add	r3, r1
 8007464:	33a8      	adds	r3, #168	; 0xa8
 8007466:	601a      	str	r2, [r3, #0]
         break;
 8007468:	e01b      	b.n	80074a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	3301      	adds	r3, #1
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	4413      	add	r3, r2
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	6811      	ldr	r1, [r2, #0]
 800747c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3301      	adds	r3, #1
 8007484:	01db      	lsls	r3, r3, #7
 8007486:	440b      	add	r3, r1
 8007488:	601a      	str	r2, [r3, #0]
         break;
 800748a:	e00a      	b.n	80074a2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2207      	movs	r2, #7
 8007490:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800749c:	e002      	b.n	80074a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80074a2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b07      	cmp	r3, #7
 80074ae:	d101      	bne.n	80074b4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e008      	b.n	80074c6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d101      	bne.n	80074f2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e01d      	b.n	800752e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e016      	b.n	800752e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fc50 	bl	8007dbc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_HRTIM_WaveformOutputStart+0x18>
 800754a:	2302      	movs	r3, #2
 800754c:	e01a      	b.n	8007584 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_HRTIM_WaveformOutputStop+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e01a      	b.n	80075de <HAL_HRTIM_WaveformOutputStop+0x4e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007600:	2302      	movs	r3, #2
 8007602:	e05b      	b.n	80076bc <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68d9      	ldr	r1, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
 800764c:	e022      	b.n	8007694 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d017      	beq.n	800768e <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	01db      	lsls	r3, r3, #7
 8007666:	4413      	add	r3, r2
 8007668:	338c      	adds	r3, #140	; 0x8c
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3320      	adds	r3, #32
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	4302      	orrs	r2, r0
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	440b      	add	r3, r1
 800768a:	338c      	adds	r3, #140	; 0x8c
 800768c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d9d9      	bls.n	800764e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80076ba:	2300      	movs	r3, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000028 	.word	0x20000028

080076cc <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80076d6:	f240 137f 	movw	r3, #383	; 0x17f
 80076da:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e065      	b.n	80077b6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	43da      	mvns	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	400a      	ands	r2, r1
 800770e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68d9      	ldr	r1, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007728:	43da      	mvns	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	400a      	ands	r2, r1
 8007730:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
 8007736:	e023      	b.n	8007780 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800773c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	4013      	ands	r3, r2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d018      	beq.n	800777a <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	01db      	lsls	r3, r3, #7
 8007750:	4413      	add	r3, r2
 8007752:	338c      	adds	r3, #140	; 0x8c
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	7bfa      	ldrb	r2, [r7, #15]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3320      	adds	r3, #32
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	43da      	mvns	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6819      	ldr	r1, [r3, #0]
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4002      	ands	r2, r0
 8007772:	01db      	lsls	r3, r3, #7
 8007774:	440b      	add	r3, r1
 8007776:	338c      	adds	r3, #140	; 0x8c
 8007778:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	3301      	adds	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b04      	cmp	r3, #4
 8007784:	d9d8      	bls.n	8007738 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	3b01      	subs	r3, #1
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f9      	bne.n	8007786 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	43da      	mvns	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	400a      	ands	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000028 	.word	0x20000028

080077c8 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2bff      	cmp	r3, #255	; 0xff
 80077d6:	d103      	bne.n	80077e0 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fc29 	bl	8008030 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80077de:	e00a      	b.n	80077f6 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	d103      	bne.n	80077ee <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fca0 	bl	800812c <HRTIM_Master_ISR>
}
 80077ec:	e003      	b.n	80077f6 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd45 	bl	8008280 <HRTIM_Timer_ISR>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0318 	bic.w	r3, r3, #24
 80079ba:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	6852      	ldr	r2, [r2, #4]
 80079e0:	619a      	str	r2, [r3, #24]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b087      	sub	sp, #28
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3301      	adds	r3, #1
 8007a02:	01db      	lsls	r3, r3, #7
 8007a04:	4413      	add	r3, r2
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0318 	bic.w	r3, r3, #24
 8007a22:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	3301      	adds	r3, #1
 8007a36:	01db      	lsls	r3, r3, #7
 8007a38:	4413      	add	r3, r2
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6819      	ldr	r1, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3394      	adds	r3, #148	; 0x94
 8007a4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3398      	adds	r3, #152	; 0x98
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007a88:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f023 0320 	bic.w	r3, r3, #32
 8007a90:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ac6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007ad8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007aea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007afe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b08b      	sub	sp, #44	; 0x2c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	01db      	lsls	r3, r3, #7
 8007b52:	4413      	add	r3, r2
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	6811      	ldr	r1, [r2, #0]
 8007b5a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	3301      	adds	r3, #1
 8007b62:	01db      	lsls	r3, r3, #7
 8007b64:	440b      	add	r3, r1
 8007b66:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	01db      	lsls	r3, r3, #7
 8007b72:	4413      	add	r3, r2
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	01db      	lsls	r3, r3, #7
 8007b80:	4413      	add	r3, r2
 8007b82:	33e8      	adds	r3, #232	; 0xe8
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	01db      	lsls	r3, r3, #7
 8007b90:	4413      	add	r3, r2
 8007b92:	33e4      	adds	r3, #228	; 0xe4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007ba0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	f023 0320 	bic.w	r3, r3, #32
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be6:	4313      	orrs	r3, r2
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1e:	d103      	bne.n	8007c28 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c36:	4313      	orrs	r3, r2
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f023 031f 	bic.w	r3, r3, #31
 8007c64:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c7a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d108      	bne.n	8007ca0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c94:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007ca8:	d004      	beq.n	8007cb4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007cb2:	d103      	bne.n	8007cbc <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d108      	bne.n	8007cce <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8007cc2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d843      	bhi.n	8007d62 <HRTIM_TimingUnitWaveform_Config+0x226>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007cf5 	.word	0x08007cf5
 8007ce4:	08007d0b 	.word	0x08007d0b
 8007ce8:	08007d21 	.word	0x08007d21
 8007cec:	08007d37 	.word	0x08007d37
 8007cf0:	08007d4d 	.word	0x08007d4d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007cfa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61fb      	str	r3, [r7, #28]
      break;
 8007d08:	e02c      	b.n	8007d64 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d10:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61fb      	str	r3, [r7, #28]
      break;
 8007d1e:	e021      	b.n	8007d64 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007d26:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	61fb      	str	r3, [r7, #28]
      break;
 8007d34:	e016      	b.n	8007d64 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d3c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61fb      	str	r3, [r7, #28]
      break;
 8007d4a:	e00b      	b.n	8007d64 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d52:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	015b      	lsls	r3, r3, #5
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]
      break;
 8007d60:	e000      	b.n	8007d64 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8007d62:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	01db      	lsls	r3, r3, #7
 8007d6e:	4413      	add	r3, r2
 8007d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	01db      	lsls	r3, r3, #7
 8007d7c:	4413      	add	r3, r2
 8007d7e:	33e8      	adds	r3, #232	; 0xe8
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	01db      	lsls	r3, r3, #7
 8007d8c:	4413      	add	r3, r2
 8007d8e:	33e4      	adds	r3, #228	; 0xe4
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	01db      	lsls	r3, r3, #7
 8007d9c:	4413      	add	r3, r2
 8007d9e:	33d4      	adds	r3, #212	; 0xd4
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007dae:	bf00      	nop
 8007db0:	372c      	adds	r7, #44	; 0x2c
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b089      	sub	sp, #36	; 0x24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	01db      	lsls	r3, r3, #7
 8007dd6:	4413      	add	r3, r2
 8007dd8:	33e4      	adds	r3, #228	; 0xe4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	01db      	lsls	r3, r3, #7
 8007de6:	4413      	add	r3, r2
 8007de8:	33b8      	adds	r3, #184	; 0xb8
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	617b      	str	r3, [r7, #20]

  switch (Output)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df4:	d04d      	beq.n	8007e92 <HRTIM_OutputConfig+0xd6>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfc:	d85e      	bhi.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e04:	d032      	beq.n	8007e6c <HRTIM_OutputConfig+0xb0>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0c:	d856      	bhi.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d03e      	beq.n	8007e92 <HRTIM_OutputConfig+0xd6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b80      	cmp	r3, #128	; 0x80
 8007e18:	d850      	bhi.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d025      	beq.n	8007e6c <HRTIM_OutputConfig+0xb0>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d84a      	bhi.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d01f      	beq.n	8007e6c <HRTIM_OutputConfig+0xb0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d044      	beq.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d841      	bhi.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d33e      	bcc.n	8007ebc <HRTIM_OutputConfig+0x100>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3b02      	subs	r3, #2
 8007e42:	2201      	movs	r2, #1
 8007e44:	409a      	lsls	r2, r3
 8007e46:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <HRTIM_OutputConfig+0x1ac>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	2300      	moveq	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11c      	bne.n	8007e92 <HRTIM_OutputConfig+0xd6>
 8007e58:	f244 0304 	movw	r3, #16388	; 0x4004
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bf14      	ite	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	2300      	moveq	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d027      	beq.n	8007ebc <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	01db      	lsls	r3, r3, #7
 8007e78:	440b      	add	r3, r1
 8007e7a:	33bc      	adds	r3, #188	; 0xbc
 8007e7c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	01db      	lsls	r3, r3, #7
 8007e8a:	440b      	add	r3, r1
 8007e8c:	33c0      	adds	r3, #192	; 0xc0
 8007e8e:	601a      	str	r2, [r3, #0]
      break;
 8007e90:	e015      	b.n	8007ebe <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6819      	ldr	r1, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	01db      	lsls	r3, r3, #7
 8007e9e:	440b      	add	r3, r1
 8007ea0:	33c4      	adds	r3, #196	; 0xc4
 8007ea2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6819      	ldr	r1, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	01db      	lsls	r3, r3, #7
 8007eb0:	440b      	add	r3, r1
 8007eb2:	33c8      	adds	r3, #200	; 0xc8
 8007eb4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	61bb      	str	r3, [r7, #24]
      break;
 8007eba:	e000      	b.n	8007ebe <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8007ebc:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8007ebe:	22fe      	movs	r2, #254	; 0xfe
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8007ec6:	43db      	mvns	r3, r3
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695a      	ldr	r2, [r3, #20]
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	fa02 f303 	lsl.w	r3, r2, r3
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	69fa      	ldr	r2, [r7, #28]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d111      	bne.n	8007f4a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	69da      	ldr	r2, [r3, #28]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	01db      	lsls	r3, r3, #7
 8007f52:	4413      	add	r3, r2
 8007f54:	33e4      	adds	r3, #228	; 0xe4
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	601a      	str	r2, [r3, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	3724      	adds	r7, #36	; 0x24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40000041 	.word	0x40000041

08007f6c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	d851      	bhi.n	8008020 <HRTIM_ForceRegistersUpdate+0xb4>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <HRTIM_ForceRegistersUpdate+0x18>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007fb3 	.word	0x08007fb3
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	08007fdf 	.word	0x08007fdf
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	0800800b 	.word	0x0800800b
 8007f98:	08007f9d 	.word	0x08007f9d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007fb0:	e037      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0202 	orr.w	r2, r2, #2
 8007fc2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007fc6:	e02c      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0204 	orr.w	r2, r2, #4
 8007fd8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007fdc:	e021      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0208 	orr.w	r2, r2, #8
 8007fee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007ff2:	e016      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0210 	orr.w	r2, r2, #16
 8008004:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008008:	e00b      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0220 	orr.w	r2, r2, #32
 800801a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800801e:	e000      	b.n	8008022 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008020:	bf00      	nop
  }
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008040:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800804a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fbc7 	bl	80077fe <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00c      	beq.n	8008094 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2202      	movs	r2, #2
 800808a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fbbf 	bl	8007812 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2204      	movs	r2, #4
 80080ae:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fbb7 	bl	8007826 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 0308 	and.w	r3, r3, #8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2208      	movs	r2, #8
 80080d2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fbaf 	bl	800783a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2210      	movs	r2, #16
 80080f6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fba7 	bl	800784e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fb9f 	bl	8007862 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008124:	bf00      	nop
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800813c:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008146:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008174:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fb7c 	bl	8007876 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00c      	beq.n	80081a2 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2201      	movs	r2, #1
 8008198:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800819a:	2105      	movs	r1, #5
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff fb89 	bl	80078b4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2202      	movs	r2, #2
 80081bc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80081be:	2105      	movs	r1, #5
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fa fe41 	bl	8002e48 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2204      	movs	r2, #4
 80081e0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80081e2:	2105      	movs	r1, #5
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fa fe3b 	bl	8002e60 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2208      	movs	r2, #8
 8008204:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008206:	2105      	movs	r1, #5
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fb5e 	bl	80078ca <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2210      	movs	r2, #16
 8008228:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800822a:	2105      	movs	r1, #5
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fa fe8b 	bl	8002f48 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2220      	movs	r2, #32
 800824c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fb1b 	bl	800788a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2240      	movs	r2, #64	; 0x40
 800826e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008270:	2105      	movs	r1, #5
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fb13 	bl	800789e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	01db      	lsls	r3, r3, #7
 8008294:	4413      	add	r3, r2
 8008296:	3304      	adds	r3, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	01db      	lsls	r3, r3, #7
 80082a4:	4413      	add	r3, r2
 80082a6:	338c      	adds	r3, #140	; 0x8c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d010      	beq.n	80082d8 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	4413      	add	r3, r2
 80082ca:	3388      	adds	r3, #136	; 0x88
 80082cc:	2201      	movs	r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff faee 	bl	80078b4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	01db      	lsls	r3, r3, #7
 80082f4:	4413      	add	r3, r2
 80082f6:	3388      	adds	r3, #136	; 0x88
 80082f8:	2202      	movs	r2, #2
 80082fa:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fa fda2 	bl	8002e48 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	d010      	beq.n	8008330 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	01db      	lsls	r3, r3, #7
 8008320:	4413      	add	r3, r2
 8008322:	3388      	adds	r3, #136	; 0x88
 8008324:	2204      	movs	r2, #4
 8008326:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fa fd98 	bl	8002e60 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d010      	beq.n	800835c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	01db      	lsls	r3, r3, #7
 800834c:	4413      	add	r3, r2
 800834e:	3388      	adds	r3, #136	; 0x88
 8008350:	2208      	movs	r2, #8
 8008352:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fab7 	bl	80078ca <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b00      	cmp	r3, #0
 8008364:	d010      	beq.n	8008388 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	01db      	lsls	r3, r3, #7
 8008378:	4413      	add	r3, r2
 800837a:	3388      	adds	r3, #136	; 0x88
 800837c:	2210      	movs	r2, #16
 800837e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fa fde0 	bl	8002f48 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d010      	beq.n	80083b4 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	01db      	lsls	r3, r3, #7
 80083a4:	4413      	add	r3, r2
 80083a6:	3388      	adds	r3, #136	; 0x88
 80083a8:	2240      	movs	r2, #64	; 0x40
 80083aa:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fa75 	bl	800789e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	01db      	lsls	r3, r3, #7
 80083d0:	4413      	add	r3, r2
 80083d2:	3388      	adds	r3, #136	; 0x88
 80083d4:	2280      	movs	r2, #128	; 0x80
 80083d6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fa80 	bl	80078e0 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	01db      	lsls	r3, r3, #7
 80083fc:	4413      	add	r3, r2
 80083fe:	3388      	adds	r3, #136	; 0x88
 8008400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008404:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fa74 	bl	80078f6 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008414:	2b00      	cmp	r3, #0
 8008416:	d011      	beq.n	800843c <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00c      	beq.n	800843c <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	01db      	lsls	r3, r3, #7
 800842a:	4413      	add	r3, r2
 800842c:	3388      	adds	r3, #136	; 0x88
 800842e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008432:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff fa7e 	bl	8007938 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00c      	beq.n	800846a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	01db      	lsls	r3, r3, #7
 8008458:	4413      	add	r3, r2
 800845a:	3388      	adds	r3, #136	; 0x88
 800845c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008460:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fa72 	bl	800794e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008470:	2b00      	cmp	r3, #0
 8008472:	d011      	beq.n	8008498 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	01db      	lsls	r3, r3, #7
 8008486:	4413      	add	r3, r2
 8008488:	3388      	adds	r3, #136	; 0x88
 800848a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800848e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fa66 	bl	8007964 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d011      	beq.n	80084c6 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	01db      	lsls	r3, r3, #7
 80084b4:	4413      	add	r3, r2
 80084b6:	3388      	adds	r3, #136	; 0x88
 80084b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084bc:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fa5a 	bl	800797a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d011      	beq.n	80084f4 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	01db      	lsls	r3, r3, #7
 80084e2:	4413      	add	r3, r2
 80084e4:	3388      	adds	r3, #136	; 0x88
 80084e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084ea:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fa17 	bl	8007922 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d011      	beq.n	8008522 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00c      	beq.n	8008522 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	01db      	lsls	r3, r3, #7
 8008510:	4413      	add	r3, r2
 8008512:	3388      	adds	r3, #136	; 0x88
 8008514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008518:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff f9f5 	bl	800790c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e097      	b.n	800866e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fa f9c3 	bl	80028e4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d004      	beq.n	8008580 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800857e:	d103      	bne.n	8008588 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 031e 	bic.w	r3, r3, #30
 8008586:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b38      	ldr	r3, [pc, #224]	; (8008678 <HAL_LPTIM_Init+0x14c>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <HAL_LPTIM_Init+0x150>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80085ac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80085b2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80085b8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80085be:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d107      	bne.n	80085de <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80085d6:	4313      	orrs	r3, r2
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d004      	beq.n	80085f0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ee:	d107      	bne.n	8008600 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80085f8:	4313      	orrs	r3, r2
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008608:	4293      	cmp	r3, r2
 800860a:	d00a      	beq.n	8008622 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008614:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800861a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a14      	ldr	r2, [pc, #80]	; (8008680 <HAL_LPTIM_Init+0x154>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <HAL_LPTIM_Init+0x112>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a12      	ldr	r2, [pc, #72]	; (8008684 <HAL_LPTIM_Init+0x158>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d108      	bne.n	8008650 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	625a      	str	r2, [r3, #36]	; 0x24
 800864e:	e009      	b.n	8008664 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a0c      	ldr	r2, [pc, #48]	; (8008688 <HAL_LPTIM_Init+0x15c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d104      	bne.n	8008664 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008662:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	ffff1f3f 	.word	0xffff1f3f
 800867c:	ff19f1fe 	.word	0xff19f1fe
 8008680:	40002400 	.word	0x40002400
 8008684:	58002400 	.word	0x58002400
 8008688:	58002800 	.word	0x58002800

0800868c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d00c      	beq.n	80086c0 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086ae:	d107      	bne.n	80086c0 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80086be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2210      	movs	r2, #16
 80086d6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80086e0:	2110      	movs	r1, #16
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f91e 	bl	8008924 <LPTIM_WaitForFlag>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d101      	bne.n	80086f2 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e02f      	b.n	8008752 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f946 	bl	8008984 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f905 	bl	8008908 <HAL_LPTIM_GetState>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b03      	cmp	r3, #3
 8008702:	d101      	bne.n	8008708 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e024      	b.n	8008752 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0210 	orr.w	r2, r2, #16
 8008716:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0202 	orr.w	r2, r2, #2
 8008726:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0204 	orr.w	r2, r2, #4
 8008746:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10d      	bne.n	800878c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b01      	cmp	r3, #1
 800877c:	d106      	bne.n	800878c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2201      	movs	r2, #1
 8008784:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f882 	bl	8008890 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b02      	cmp	r3, #2
 8008798:	d10d      	bne.n	80087b6 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d106      	bne.n	80087b6 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2202      	movs	r2, #2
 80087ae:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fa fb3b 	bl	8002e2c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d10d      	bne.n	80087e0 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d106      	bne.n	80087e0 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2204      	movs	r2, #4
 80087d8:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f862 	bl	80088a4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d10d      	bne.n	800880a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d106      	bne.n	800880a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2208      	movs	r2, #8
 8008802:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f857 	bl	80088b8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b10      	cmp	r3, #16
 8008816:	d10d      	bne.n	8008834 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 0310 	and.w	r3, r3, #16
 8008822:	2b10      	cmp	r3, #16
 8008824:	d106      	bne.n	8008834 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2210      	movs	r2, #16
 800882c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f84c 	bl	80088cc <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b20      	cmp	r3, #32
 8008840:	d10d      	bne.n	800885e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b20      	cmp	r3, #32
 800884e:	d106      	bne.n	800885e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2220      	movs	r2, #32
 8008856:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f841 	bl	80088e0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d10d      	bne.n	8008888 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d106      	bne.n	8008888 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f836 	bl	80088f4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008916:	b2db      	uxtb	r3, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008932:	4b12      	ldr	r3, [pc, #72]	; (800897c <LPTIM_WaitForFlag+0x58>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <LPTIM_WaitForFlag+0x5c>)
 8008938:	fba2 2303 	umull	r2, r3, r2, r3
 800893c:	0b9b      	lsrs	r3, r3, #14
 800893e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	3b01      	subs	r3, #1
 800894c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	4013      	ands	r3, r2
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d002      	beq.n	800896e <LPTIM_WaitForFlag+0x4a>
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1ec      	bne.n	8008948 <LPTIM_WaitForFlag+0x24>

  return result;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20000010 	.word	0x20000010
 8008980:	d1b71759 	.word	0xd1b71759

08008984 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008990:	f3ef 8310 	mrs	r3, PRIMASK
 8008994:	60fb      	str	r3, [r7, #12]
  return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
 800899a:	2301      	movs	r3, #1
 800899c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a81      	ldr	r2, [pc, #516]	; (8008bb0 <LPTIM_Disable+0x22c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d02d      	beq.n	8008a0c <LPTIM_Disable+0x88>
 80089b0:	4a7f      	ldr	r2, [pc, #508]	; (8008bb0 <LPTIM_Disable+0x22c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d830      	bhi.n	8008a18 <LPTIM_Disable+0x94>
 80089b6:	4a7f      	ldr	r2, [pc, #508]	; (8008bb4 <LPTIM_Disable+0x230>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d021      	beq.n	8008a00 <LPTIM_Disable+0x7c>
 80089bc:	4a7d      	ldr	r2, [pc, #500]	; (8008bb4 <LPTIM_Disable+0x230>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d82a      	bhi.n	8008a18 <LPTIM_Disable+0x94>
 80089c2:	4a7d      	ldr	r2, [pc, #500]	; (8008bb8 <LPTIM_Disable+0x234>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d015      	beq.n	80089f4 <LPTIM_Disable+0x70>
 80089c8:	4a7b      	ldr	r2, [pc, #492]	; (8008bb8 <LPTIM_Disable+0x234>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d824      	bhi.n	8008a18 <LPTIM_Disable+0x94>
 80089ce:	4a7b      	ldr	r2, [pc, #492]	; (8008bbc <LPTIM_Disable+0x238>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <LPTIM_Disable+0x58>
 80089d4:	4a7a      	ldr	r2, [pc, #488]	; (8008bc0 <LPTIM_Disable+0x23c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d006      	beq.n	80089e8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80089da:	e01d      	b.n	8008a18 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80089dc:	4b79      	ldr	r3, [pc, #484]	; (8008bc4 <LPTIM_Disable+0x240>)
 80089de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80089e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80089e6:	e018      	b.n	8008a1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80089e8:	4b76      	ldr	r3, [pc, #472]	; (8008bc4 <LPTIM_Disable+0x240>)
 80089ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80089f2:	e012      	b.n	8008a1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80089f4:	4b73      	ldr	r3, [pc, #460]	; (8008bc4 <LPTIM_Disable+0x240>)
 80089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80089fe:	e00c      	b.n	8008a1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008a00:	4b70      	ldr	r3, [pc, #448]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a0a:	e006      	b.n	8008a1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008a0c:	4b6d      	ldr	r3, [pc, #436]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a16:	e000      	b.n	8008a1a <LPTIM_Disable+0x96>
      break;
 8008a18:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a5a      	ldr	r2, [pc, #360]	; (8008bb0 <LPTIM_Disable+0x22c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d059      	beq.n	8008b00 <LPTIM_Disable+0x17c>
 8008a4c:	4a58      	ldr	r2, [pc, #352]	; (8008bb0 <LPTIM_Disable+0x22c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d867      	bhi.n	8008b22 <LPTIM_Disable+0x19e>
 8008a52:	4a58      	ldr	r2, [pc, #352]	; (8008bb4 <LPTIM_Disable+0x230>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d042      	beq.n	8008ade <LPTIM_Disable+0x15a>
 8008a58:	4a56      	ldr	r2, [pc, #344]	; (8008bb4 <LPTIM_Disable+0x230>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d861      	bhi.n	8008b22 <LPTIM_Disable+0x19e>
 8008a5e:	4a56      	ldr	r2, [pc, #344]	; (8008bb8 <LPTIM_Disable+0x234>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d02b      	beq.n	8008abc <LPTIM_Disable+0x138>
 8008a64:	4a54      	ldr	r2, [pc, #336]	; (8008bb8 <LPTIM_Disable+0x234>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d85b      	bhi.n	8008b22 <LPTIM_Disable+0x19e>
 8008a6a:	4a54      	ldr	r2, [pc, #336]	; (8008bbc <LPTIM_Disable+0x238>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <LPTIM_Disable+0xf4>
 8008a70:	4a53      	ldr	r2, [pc, #332]	; (8008bc0 <LPTIM_Disable+0x23c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d011      	beq.n	8008a9a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008a76:	e054      	b.n	8008b22 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008a78:	4b52      	ldr	r3, [pc, #328]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7e:	4a51      	ldr	r2, [pc, #324]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008a88:	4b4e      	ldr	r3, [pc, #312]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8e:	4a4d      	ldr	r2, [pc, #308]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8008a98:	e044      	b.n	8008b24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008a9a:	4b4a      	ldr	r3, [pc, #296]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aa0:	4a48      	ldr	r2, [pc, #288]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aa6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008aaa:	4b46      	ldr	r3, [pc, #280]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ab0:	4a44      	ldr	r2, [pc, #272]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ab2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ab6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008aba:	e033      	b.n	8008b24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008abc:	4b41      	ldr	r3, [pc, #260]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ac2:	4a40      	ldr	r2, [pc, #256]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ac8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008acc:	4b3d      	ldr	r3, [pc, #244]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ad2:	4a3c      	ldr	r2, [pc, #240]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008adc:	e022      	b.n	8008b24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8008ade:	4b39      	ldr	r3, [pc, #228]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ae4:	4a37      	ldr	r2, [pc, #220]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8008aee:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008af4:	4a33      	ldr	r2, [pc, #204]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008afa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008afe:	e011      	b.n	8008b24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8008b00:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b06:	4a2f      	ldr	r2, [pc, #188]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8008b10:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b16:	4a2b      	ldr	r2, [pc, #172]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008b20:	e000      	b.n	8008b24 <LPTIM_Disable+0x1a0>
      break;
 8008b22:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <LPTIM_Disable+0x1ae>
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 80d1 	beq.w	8008cd4 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a1e      	ldr	r2, [pc, #120]	; (8008bb0 <LPTIM_Disable+0x22c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d031      	beq.n	8008ba0 <LPTIM_Disable+0x21c>
 8008b3c:	4a1c      	ldr	r2, [pc, #112]	; (8008bb0 <LPTIM_Disable+0x22c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d842      	bhi.n	8008bc8 <LPTIM_Disable+0x244>
 8008b42:	4a1c      	ldr	r2, [pc, #112]	; (8008bb4 <LPTIM_Disable+0x230>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d024      	beq.n	8008b92 <LPTIM_Disable+0x20e>
 8008b48:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <LPTIM_Disable+0x230>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d83c      	bhi.n	8008bc8 <LPTIM_Disable+0x244>
 8008b4e:	4a1a      	ldr	r2, [pc, #104]	; (8008bb8 <LPTIM_Disable+0x234>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d017      	beq.n	8008b84 <LPTIM_Disable+0x200>
 8008b54:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <LPTIM_Disable+0x234>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d836      	bhi.n	8008bc8 <LPTIM_Disable+0x244>
 8008b5a:	4a18      	ldr	r2, [pc, #96]	; (8008bbc <LPTIM_Disable+0x238>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <LPTIM_Disable+0x1e4>
 8008b60:	4a17      	ldr	r2, [pc, #92]	; (8008bc0 <LPTIM_Disable+0x23c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d007      	beq.n	8008b76 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8008b66:	e02f      	b.n	8008bc8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8008b68:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6c:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b6e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008b72:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8008b74:	e029      	b.n	8008bca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b7c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008b80:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008b82:	e022      	b.n	8008bca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b88:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008b8e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008b90:	e01b      	b.n	8008bca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	4a0b      	ldr	r2, [pc, #44]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008b98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008b9c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008b9e:	e014      	b.n	8008bca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8008ba0:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba4:	4a07      	ldr	r2, [pc, #28]	; (8008bc4 <LPTIM_Disable+0x240>)
 8008ba6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008baa:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8008bac:	e00d      	b.n	8008bca <LPTIM_Disable+0x246>
 8008bae:	bf00      	nop
 8008bb0:	58003000 	.word	0x58003000
 8008bb4:	58002c00 	.word	0x58002c00
 8008bb8:	58002800 	.word	0x58002800
 8008bbc:	40002400 	.word	0x40002400
 8008bc0:	58002400 	.word	0x58002400
 8008bc4:	58024400 	.word	0x58024400
        break;
 8008bc8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01a      	beq.n	8008c06 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008be8:	2108      	movs	r1, #8
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff fe9a 	bl	8008924 <LPTIM_WaitForFlag>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d103      	bne.n	8008bfe <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2208      	movs	r2, #8
 8008c04:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01a      	beq.n	8008c42 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691a      	ldr	r2, [r3, #16]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0201 	orr.w	r2, r2, #1
 8008c1a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008c24:	2110      	movs	r1, #16
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fe7c 	bl	8008924 <LPTIM_WaitForFlag>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d103      	bne.n	8008c3a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2203      	movs	r2, #3
 8008c36:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a32      	ldr	r2, [pc, #200]	; (8008d10 <LPTIM_Disable+0x38c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d039      	beq.n	8008cc0 <LPTIM_Disable+0x33c>
 8008c4c:	4a30      	ldr	r2, [pc, #192]	; (8008d10 <LPTIM_Disable+0x38c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d83f      	bhi.n	8008cd2 <LPTIM_Disable+0x34e>
 8008c52:	4a30      	ldr	r2, [pc, #192]	; (8008d14 <LPTIM_Disable+0x390>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d02a      	beq.n	8008cae <LPTIM_Disable+0x32a>
 8008c58:	4a2e      	ldr	r2, [pc, #184]	; (8008d14 <LPTIM_Disable+0x390>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d839      	bhi.n	8008cd2 <LPTIM_Disable+0x34e>
 8008c5e:	4a2e      	ldr	r2, [pc, #184]	; (8008d18 <LPTIM_Disable+0x394>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d01b      	beq.n	8008c9c <LPTIM_Disable+0x318>
 8008c64:	4a2c      	ldr	r2, [pc, #176]	; (8008d18 <LPTIM_Disable+0x394>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d833      	bhi.n	8008cd2 <LPTIM_Disable+0x34e>
 8008c6a:	4a2c      	ldr	r2, [pc, #176]	; (8008d1c <LPTIM_Disable+0x398>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <LPTIM_Disable+0x2f4>
 8008c70:	4a2b      	ldr	r2, [pc, #172]	; (8008d20 <LPTIM_Disable+0x39c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d009      	beq.n	8008c8a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8008c76:	e02c      	b.n	8008cd2 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008c78:	4b2a      	ldr	r3, [pc, #168]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c80:	4928      	ldr	r1, [pc, #160]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	4313      	orrs	r3, r2
 8008c86:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8008c88:	e024      	b.n	8008cd4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008c8a:	4b26      	ldr	r3, [pc, #152]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c92:	4924      	ldr	r1, [pc, #144]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	4313      	orrs	r3, r2
 8008c98:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008c9a:	e01b      	b.n	8008cd4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8008c9c:	4b21      	ldr	r3, [pc, #132]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ca4:	491f      	ldr	r1, [pc, #124]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008cac:	e012      	b.n	8008cd4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8008cae:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cb6:	491b      	ldr	r1, [pc, #108]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008cbe:	e009      	b.n	8008cd4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8008cc0:	4b18      	ldr	r3, [pc, #96]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cc8:	4916      	ldr	r1, [pc, #88]	; (8008d24 <LPTIM_Disable+0x3a0>)
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008cd0:	e000      	b.n	8008cd4 <LPTIM_Disable+0x350>
        break;
 8008cd2:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cea:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6a3a      	ldr	r2, [r7, #32]
 8008cf2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f383 8810 	msr	PRIMASK, r3
}
 8008d06:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008d08:	bf00      	nop
 8008d0a:	3730      	adds	r7, #48	; 0x30
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	58003000 	.word	0x58003000
 8008d14:	58002c00 	.word	0x58002c00
 8008d18:	58002800 	.word	0x58002800
 8008d1c:	40002400 	.word	0x40002400
 8008d20:	58002400 	.word	0x58002400
 8008d24:	58024400 	.word	0x58024400

08008d28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a04      	ldr	r2, [pc, #16]	; (8008d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d36:	6013      	str	r3, [r2, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	58024800 	.word	0x58024800

08008d48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d50:	4b19      	ldr	r3, [pc, #100]	; (8008db8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d00a      	beq.n	8008d72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d5c:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d001      	beq.n	8008d6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e01f      	b.n	8008dae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e01d      	b.n	8008dae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d72:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f023 0207 	bic.w	r2, r3, #7
 8008d7a:	490f      	ldr	r1, [pc, #60]	; (8008db8 <HAL_PWREx_ConfigSupply+0x70>)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d82:	f7fa fafd 	bl	8003380 <HAL_GetTick>
 8008d86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d88:	e009      	b.n	8008d9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d8a:	f7fa faf9 	bl	8003380 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d98:	d901      	bls.n	8008d9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e007      	b.n	8008dae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <HAL_PWREx_ConfigSupply+0x70>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008daa:	d1ee      	bne.n	8008d8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	58024800 	.word	0x58024800

08008dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08c      	sub	sp, #48	; 0x30
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f000 bc48 	b.w	8009660 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 8088 	beq.w	8008eee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dde:	4b99      	ldr	r3, [pc, #612]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008de8:	4b96      	ldr	r3, [pc, #600]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d007      	beq.n	8008e04 <HAL_RCC_OscConfig+0x48>
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	2b18      	cmp	r3, #24
 8008df8:	d111      	bne.n	8008e1e <HAL_RCC_OscConfig+0x62>
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d10c      	bne.n	8008e1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e04:	4b8f      	ldr	r3, [pc, #572]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d06d      	beq.n	8008eec <HAL_RCC_OscConfig+0x130>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d169      	bne.n	8008eec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f000 bc21 	b.w	8009660 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e26:	d106      	bne.n	8008e36 <HAL_RCC_OscConfig+0x7a>
 8008e28:	4b86      	ldr	r3, [pc, #536]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a85      	ldr	r2, [pc, #532]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	e02e      	b.n	8008e94 <HAL_RCC_OscConfig+0xd8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCC_OscConfig+0x9c>
 8008e3e:	4b81      	ldr	r3, [pc, #516]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a80      	ldr	r2, [pc, #512]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4b7e      	ldr	r3, [pc, #504]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a7d      	ldr	r2, [pc, #500]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	e01d      	b.n	8008e94 <HAL_RCC_OscConfig+0xd8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e60:	d10c      	bne.n	8008e7c <HAL_RCC_OscConfig+0xc0>
 8008e62:	4b78      	ldr	r3, [pc, #480]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a77      	ldr	r2, [pc, #476]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	4b75      	ldr	r3, [pc, #468]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a74      	ldr	r2, [pc, #464]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e00b      	b.n	8008e94 <HAL_RCC_OscConfig+0xd8>
 8008e7c:	4b71      	ldr	r3, [pc, #452]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a70      	ldr	r2, [pc, #448]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	4b6e      	ldr	r3, [pc, #440]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a6d      	ldr	r2, [pc, #436]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d013      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fa fa70 	bl	8003380 <HAL_GetTick>
 8008ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ea4:	f7fa fa6c 	bl	8003380 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b64      	cmp	r3, #100	; 0x64
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e3d4      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eb6:	4b63      	ldr	r3, [pc, #396]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0xe8>
 8008ec2:	e014      	b.n	8008eee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fa fa5c 	bl	8003380 <HAL_GetTick>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ecc:	f7fa fa58 	bl	8003380 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e3c0      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ede:	4b59      	ldr	r3, [pc, #356]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f0      	bne.n	8008ecc <HAL_RCC_OscConfig+0x110>
 8008eea:	e000      	b.n	8008eee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80ca 	beq.w	8009090 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008efc:	4b51      	ldr	r3, [pc, #324]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f06:	4b4f      	ldr	r3, [pc, #316]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <HAL_RCC_OscConfig+0x166>
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	2b18      	cmp	r3, #24
 8008f16:	d156      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x20a>
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d151      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f22:	4b48      	ldr	r3, [pc, #288]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <HAL_RCC_OscConfig+0x17e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e392      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f3a:	4b42      	ldr	r3, [pc, #264]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f023 0219 	bic.w	r2, r3, #25
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	493f      	ldr	r1, [pc, #252]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7fa fa18 	bl	8003380 <HAL_GetTick>
 8008f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f54:	f7fa fa14 	bl	8003380 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e37c      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f66:	4b37      	ldr	r3, [pc, #220]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f0      	beq.n	8008f54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f72:	f7fa fa35 	bl	80033e0 <HAL_GetREVID>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d817      	bhi.n	8008fb0 <HAL_RCC_OscConfig+0x1f4>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d108      	bne.n	8008f9a <HAL_RCC_OscConfig+0x1de>
 8008f88:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f90:	4a2c      	ldr	r2, [pc, #176]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f98:	e07a      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9a:	4b2a      	ldr	r3, [pc, #168]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	031b      	lsls	r3, r3, #12
 8008fa8:	4926      	ldr	r1, [pc, #152]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fae:	e06f      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fb0:	4b24      	ldr	r3, [pc, #144]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	4921      	ldr	r1, [pc, #132]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc4:	e064      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d047      	beq.n	800905e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fce:	4b1d      	ldr	r3, [pc, #116]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f023 0219 	bic.w	r2, r3, #25
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	491a      	ldr	r1, [pc, #104]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe0:	f7fa f9ce 	bl	8003380 <HAL_GetTick>
 8008fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fe8:	f7fa f9ca 	bl	8003380 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e332      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f0      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009006:	f7fa f9eb 	bl	80033e0 <HAL_GetREVID>
 800900a:	4603      	mov	r3, r0
 800900c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009010:	4293      	cmp	r3, r2
 8009012:	d819      	bhi.n	8009048 <HAL_RCC_OscConfig+0x28c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d108      	bne.n	800902e <HAL_RCC_OscConfig+0x272>
 800901c:	4b09      	ldr	r3, [pc, #36]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009024:	4a07      	ldr	r2, [pc, #28]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8009026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902a:	6053      	str	r3, [r2, #4]
 800902c:	e030      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	031b      	lsls	r3, r3, #12
 800903c:	4901      	ldr	r1, [pc, #4]	; (8009044 <HAL_RCC_OscConfig+0x288>)
 800903e:	4313      	orrs	r3, r2
 8009040:	604b      	str	r3, [r1, #4]
 8009042:	e025      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
 8009044:	58024400 	.word	0x58024400
 8009048:	4b9a      	ldr	r3, [pc, #616]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	061b      	lsls	r3, r3, #24
 8009056:	4997      	ldr	r1, [pc, #604]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009058:	4313      	orrs	r3, r2
 800905a:	604b      	str	r3, [r1, #4]
 800905c:	e018      	b.n	8009090 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800905e:	4b95      	ldr	r3, [pc, #596]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a94      	ldr	r2, [pc, #592]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009064:	f023 0301 	bic.w	r3, r3, #1
 8009068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906a:	f7fa f989 	bl	8003380 <HAL_GetTick>
 800906e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009070:	e008      	b.n	8009084 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009072:	f7fa f985 	bl	8003380 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d901      	bls.n	8009084 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e2ed      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009084:	4b8b      	ldr	r3, [pc, #556]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1f0      	bne.n	8009072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 80a9 	beq.w	80091f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800909e:	4b85      	ldr	r3, [pc, #532]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090a8:	4b82      	ldr	r3, [pc, #520]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d007      	beq.n	80090c4 <HAL_RCC_OscConfig+0x308>
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b18      	cmp	r3, #24
 80090b8:	d13a      	bne.n	8009130 <HAL_RCC_OscConfig+0x374>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d135      	bne.n	8009130 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090c4:	4b7b      	ldr	r3, [pc, #492]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_OscConfig+0x320>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	2b80      	cmp	r3, #128	; 0x80
 80090d6:	d001      	beq.n	80090dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e2c1      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090dc:	f7fa f980 	bl	80033e0 <HAL_GetREVID>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d817      	bhi.n	800911a <HAL_RCC_OscConfig+0x35e>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d108      	bne.n	8009104 <HAL_RCC_OscConfig+0x348>
 80090f2:	4b70      	ldr	r3, [pc, #448]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80090fa:	4a6e      	ldr	r2, [pc, #440]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80090fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009100:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009102:	e075      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009104:	4b6b      	ldr	r3, [pc, #428]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	069b      	lsls	r3, r3, #26
 8009112:	4968      	ldr	r1, [pc, #416]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009114:	4313      	orrs	r3, r2
 8009116:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009118:	e06a      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800911a:	4b66      	ldr	r3, [pc, #408]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	061b      	lsls	r3, r3, #24
 8009128:	4962      	ldr	r1, [pc, #392]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800912a:	4313      	orrs	r3, r2
 800912c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800912e:	e05f      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d042      	beq.n	80091be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009138:	4b5e      	ldr	r3, [pc, #376]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a5d      	ldr	r2, [pc, #372]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800913e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7fa f91c 	bl	8003380 <HAL_GetTick>
 8009148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800914c:	f7fa f918 	bl	8003380 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e280      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800915e:	4b55      	ldr	r3, [pc, #340]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0f0      	beq.n	800914c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800916a:	f7fa f939 	bl	80033e0 <HAL_GetREVID>
 800916e:	4603      	mov	r3, r0
 8009170:	f241 0203 	movw	r2, #4099	; 0x1003
 8009174:	4293      	cmp	r3, r2
 8009176:	d817      	bhi.n	80091a8 <HAL_RCC_OscConfig+0x3ec>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	2b20      	cmp	r3, #32
 800917e:	d108      	bne.n	8009192 <HAL_RCC_OscConfig+0x3d6>
 8009180:	4b4c      	ldr	r3, [pc, #304]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009188:	4a4a      	ldr	r2, [pc, #296]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800918a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800918e:	6053      	str	r3, [r2, #4]
 8009190:	e02e      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
 8009192:	4b48      	ldr	r3, [pc, #288]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	069b      	lsls	r3, r3, #26
 80091a0:	4944      	ldr	r1, [pc, #272]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	604b      	str	r3, [r1, #4]
 80091a6:	e023      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
 80091a8:	4b42      	ldr	r3, [pc, #264]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	493f      	ldr	r1, [pc, #252]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60cb      	str	r3, [r1, #12]
 80091bc:	e018      	b.n	80091f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091be:	4b3d      	ldr	r3, [pc, #244]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a3c      	ldr	r2, [pc, #240]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7fa f8d9 	bl	8003380 <HAL_GetTick>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091d2:	f7fa f8d5 	bl	8003380 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e23d      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091e4:	4b33      	ldr	r3, [pc, #204]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f0      	bne.n	80091d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d036      	beq.n	800926a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d019      	beq.n	8009238 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009204:	4b2b      	ldr	r3, [pc, #172]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009208:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009210:	f7fa f8b6 	bl	8003380 <HAL_GetTick>
 8009214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009216:	e008      	b.n	800922a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009218:	f7fa f8b2 	bl	8003380 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	2b02      	cmp	r3, #2
 8009224:	d901      	bls.n	800922a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e21a      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800922a:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800922c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0f0      	beq.n	8009218 <HAL_RCC_OscConfig+0x45c>
 8009236:	e018      	b.n	800926a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009238:	4b1e      	ldr	r3, [pc, #120]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 800923e:	f023 0301 	bic.w	r3, r3, #1
 8009242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009244:	f7fa f89c 	bl	8003380 <HAL_GetTick>
 8009248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800924c:	f7fa f898 	bl	8003380 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e200      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800925e:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f0      	bne.n	800924c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	d039      	beq.n	80092ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01c      	beq.n	80092b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800927e:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a0c      	ldr	r2, [pc, #48]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 8009284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800928a:	f7fa f879 	bl	8003380 <HAL_GetTick>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009290:	e008      	b.n	80092a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009292:	f7fa f875 	bl	8003380 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e1dd      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092a4:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <HAL_RCC_OscConfig+0x4f8>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0f0      	beq.n	8009292 <HAL_RCC_OscConfig+0x4d6>
 80092b0:	e01b      	b.n	80092ea <HAL_RCC_OscConfig+0x52e>
 80092b2:	bf00      	nop
 80092b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092b8:	4b9b      	ldr	r3, [pc, #620]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a9a      	ldr	r2, [pc, #616]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80092be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092c4:	f7fa f85c 	bl	8003380 <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092cc:	f7fa f858 	bl	8003380 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e1c0      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092de:	4b92      	ldr	r3, [pc, #584]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f0      	bne.n	80092cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8081 	beq.w	80093fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092f8:	4b8c      	ldr	r3, [pc, #560]	; (800952c <HAL_RCC_OscConfig+0x770>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a8b      	ldr	r2, [pc, #556]	; (800952c <HAL_RCC_OscConfig+0x770>)
 80092fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009304:	f7fa f83c 	bl	8003380 <HAL_GetTick>
 8009308:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800930a:	e008      	b.n	800931e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800930c:	f7fa f838 	bl	8003380 <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	2b64      	cmp	r3, #100	; 0x64
 8009318:	d901      	bls.n	800931e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e1a0      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800931e:	4b83      	ldr	r3, [pc, #524]	; (800952c <HAL_RCC_OscConfig+0x770>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0f0      	beq.n	800930c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d106      	bne.n	8009340 <HAL_RCC_OscConfig+0x584>
 8009332:	4b7d      	ldr	r3, [pc, #500]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009336:	4a7c      	ldr	r2, [pc, #496]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	6713      	str	r3, [r2, #112]	; 0x70
 800933e:	e02d      	b.n	800939c <HAL_RCC_OscConfig+0x5e0>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10c      	bne.n	8009362 <HAL_RCC_OscConfig+0x5a6>
 8009348:	4b77      	ldr	r3, [pc, #476]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	4a76      	ldr	r2, [pc, #472]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800934e:	f023 0301 	bic.w	r3, r3, #1
 8009352:	6713      	str	r3, [r2, #112]	; 0x70
 8009354:	4b74      	ldr	r3, [pc, #464]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009358:	4a73      	ldr	r2, [pc, #460]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800935a:	f023 0304 	bic.w	r3, r3, #4
 800935e:	6713      	str	r3, [r2, #112]	; 0x70
 8009360:	e01c      	b.n	800939c <HAL_RCC_OscConfig+0x5e0>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b05      	cmp	r3, #5
 8009368:	d10c      	bne.n	8009384 <HAL_RCC_OscConfig+0x5c8>
 800936a:	4b6f      	ldr	r3, [pc, #444]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	4a6e      	ldr	r2, [pc, #440]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009370:	f043 0304 	orr.w	r3, r3, #4
 8009374:	6713      	str	r3, [r2, #112]	; 0x70
 8009376:	4b6c      	ldr	r3, [pc, #432]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937a:	4a6b      	ldr	r2, [pc, #428]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800937c:	f043 0301 	orr.w	r3, r3, #1
 8009380:	6713      	str	r3, [r2, #112]	; 0x70
 8009382:	e00b      	b.n	800939c <HAL_RCC_OscConfig+0x5e0>
 8009384:	4b68      	ldr	r3, [pc, #416]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009388:	4a67      	ldr	r2, [pc, #412]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	6713      	str	r3, [r2, #112]	; 0x70
 8009390:	4b65      	ldr	r3, [pc, #404]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	4a64      	ldr	r2, [pc, #400]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009396:	f023 0304 	bic.w	r3, r3, #4
 800939a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d015      	beq.n	80093d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093a4:	f7f9 ffec 	bl	8003380 <HAL_GetTick>
 80093a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093aa:	e00a      	b.n	80093c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ac:	f7f9 ffe8 	bl	8003380 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d901      	bls.n	80093c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e14e      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093c2:	4b59      	ldr	r3, [pc, #356]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80093c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0ee      	beq.n	80093ac <HAL_RCC_OscConfig+0x5f0>
 80093ce:	e014      	b.n	80093fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d0:	f7f9 ffd6 	bl	8003380 <HAL_GetTick>
 80093d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093d6:	e00a      	b.n	80093ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d8:	f7f9 ffd2 	bl	8003380 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e138      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093ee:	4b4e      	ldr	r3, [pc, #312]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1ee      	bne.n	80093d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 812d 	beq.w	800965e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009404:	4b48      	ldr	r3, [pc, #288]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800940c:	2b18      	cmp	r3, #24
 800940e:	f000 80bd 	beq.w	800958c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	2b02      	cmp	r3, #2
 8009418:	f040 809e 	bne.w	8009558 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800941c:	4b42      	ldr	r3, [pc, #264]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a41      	ldr	r2, [pc, #260]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7f9 ffaa 	bl	8003380 <HAL_GetTick>
 800942c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009430:	f7f9 ffa6 	bl	8003380 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e10e      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009442:	4b39      	ldr	r3, [pc, #228]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800944e:	4b36      	ldr	r3, [pc, #216]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009452:	4b37      	ldr	r3, [pc, #220]	; (8009530 <HAL_RCC_OscConfig+0x774>)
 8009454:	4013      	ands	r3, r2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800945e:	0112      	lsls	r2, r2, #4
 8009460:	430a      	orrs	r2, r1
 8009462:	4931      	ldr	r1, [pc, #196]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009464:	4313      	orrs	r3, r2
 8009466:	628b      	str	r3, [r1, #40]	; 0x28
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946c:	3b01      	subs	r3, #1
 800946e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009476:	3b01      	subs	r3, #1
 8009478:	025b      	lsls	r3, r3, #9
 800947a:	b29b      	uxth	r3, r3
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	3b01      	subs	r3, #1
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009490:	3b01      	subs	r3, #1
 8009492:	061b      	lsls	r3, r3, #24
 8009494:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009498:	4923      	ldr	r1, [pc, #140]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800949a:	4313      	orrs	r3, r2
 800949c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800949e:	4b22      	ldr	r3, [pc, #136]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	4a21      	ldr	r2, [pc, #132]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094a4:	f023 0301 	bic.w	r3, r3, #1
 80094a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094aa:	4b1f      	ldr	r3, [pc, #124]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <HAL_RCC_OscConfig+0x778>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094b6:	00d2      	lsls	r2, r2, #3
 80094b8:	491b      	ldr	r1, [pc, #108]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094be:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	f023 020c 	bic.w	r2, r3, #12
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	4917      	ldr	r1, [pc, #92]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094d0:	4b15      	ldr	r3, [pc, #84]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	f023 0202 	bic.w	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094dc:	4912      	ldr	r1, [pc, #72]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	4a10      	ldr	r2, [pc, #64]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ee:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	4a0d      	ldr	r2, [pc, #52]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094fa:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	4a0a      	ldr	r2, [pc, #40]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009506:	4b08      	ldr	r3, [pc, #32]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a07      	ldr	r2, [pc, #28]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 800950c:	f043 0301 	orr.w	r3, r3, #1
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a04      	ldr	r2, [pc, #16]	; (8009528 <HAL_RCC_OscConfig+0x76c>)
 8009518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800951c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951e:	f7f9 ff2f 	bl	8003380 <HAL_GetTick>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009524:	e011      	b.n	800954a <HAL_RCC_OscConfig+0x78e>
 8009526:	bf00      	nop
 8009528:	58024400 	.word	0x58024400
 800952c:	58024800 	.word	0x58024800
 8009530:	fffffc0c 	.word	0xfffffc0c
 8009534:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009538:	f7f9 ff22 	bl	8003380 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e08a      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800954a:	4b47      	ldr	r3, [pc, #284]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0x77c>
 8009556:	e082      	b.n	800965e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009558:	4b43      	ldr	r3, [pc, #268]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a42      	ldr	r2, [pc, #264]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800955e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009564:	f7f9 ff0c 	bl	8003380 <HAL_GetTick>
 8009568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800956c:	f7f9 ff08 	bl	8003380 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e070      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800957e:	4b3a      	ldr	r3, [pc, #232]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1f0      	bne.n	800956c <HAL_RCC_OscConfig+0x7b0>
 800958a:	e068      	b.n	800965e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800958c:	4b36      	ldr	r3, [pc, #216]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009590:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009592:	4b35      	ldr	r3, [pc, #212]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	2b01      	cmp	r3, #1
 800959e:	d031      	beq.n	8009604 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f003 0203 	and.w	r2, r3, #3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d12a      	bne.n	8009604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	091b      	lsrs	r3, r3, #4
 80095b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d122      	bne.n	8009604 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d11a      	bne.n	8009604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	0a5b      	lsrs	r3, r3, #9
 80095d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095dc:	429a      	cmp	r2, r3
 80095de:	d111      	bne.n	8009604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d108      	bne.n	8009604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0e1b      	lsrs	r3, r3, #24
 80095f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009600:	429a      	cmp	r2, r3
 8009602:	d001      	beq.n	8009608 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e02b      	b.n	8009660 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009608:	4b17      	ldr	r3, [pc, #92]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800960a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960c:	08db      	lsrs	r3, r3, #3
 800960e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009612:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	429a      	cmp	r2, r3
 800961c:	d01f      	beq.n	800965e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800962a:	f7f9 fea9 	bl	8003380 <HAL_GetTick>
 800962e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009630:	bf00      	nop
 8009632:	f7f9 fea5 	bl	8003380 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	4293      	cmp	r3, r2
 800963c:	d0f9      	beq.n	8009632 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800963e:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <HAL_RCC_OscConfig+0x8b0>)
 8009644:	4013      	ands	r3, r2
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800964a:	00d2      	lsls	r2, r2, #3
 800964c:	4906      	ldr	r1, [pc, #24]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 800964e:	4313      	orrs	r3, r2
 8009650:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HAL_RCC_OscConfig+0x8ac>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3730      	adds	r7, #48	; 0x30
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	58024400 	.word	0x58024400
 800966c:	ffff0007 	.word	0xffff0007

08009670 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e19c      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009684:	4b8a      	ldr	r3, [pc, #552]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d910      	bls.n	80096b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009692:	4b87      	ldr	r3, [pc, #540]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f023 020f 	bic.w	r2, r3, #15
 800969a:	4985      	ldr	r1, [pc, #532]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	4313      	orrs	r3, r2
 80096a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096a2:	4b83      	ldr	r3, [pc, #524]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d001      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e184      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	4b7b      	ldr	r3, [pc, #492]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d908      	bls.n	80096e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096d0:	4b78      	ldr	r3, [pc, #480]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	4975      	ldr	r1, [pc, #468]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695a      	ldr	r2, [r3, #20]
 80096f2:	4b70      	ldr	r3, [pc, #448]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d908      	bls.n	8009710 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096fe:	4b6d      	ldr	r3, [pc, #436]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	496a      	ldr	r1, [pc, #424]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800970c:	4313      	orrs	r3, r2
 800970e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d010      	beq.n	800973e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	4b64      	ldr	r3, [pc, #400]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009728:	429a      	cmp	r2, r3
 800972a:	d908      	bls.n	800973e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800972c:	4b61      	ldr	r3, [pc, #388]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	495e      	ldr	r1, [pc, #376]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800973a:	4313      	orrs	r3, r2
 800973c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	d010      	beq.n	800976c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69da      	ldr	r2, [r3, #28]
 800974e:	4b59      	ldr	r3, [pc, #356]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009756:	429a      	cmp	r2, r3
 8009758:	d908      	bls.n	800976c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800975a:	4b56      	ldr	r3, [pc, #344]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	4953      	ldr	r1, [pc, #332]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009768:	4313      	orrs	r3, r2
 800976a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	4b4d      	ldr	r3, [pc, #308]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	429a      	cmp	r2, r3
 8009786:	d908      	bls.n	800979a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009788:	4b4a      	ldr	r3, [pc, #296]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f023 020f 	bic.w	r2, r3, #15
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	4947      	ldr	r1, [pc, #284]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009796:	4313      	orrs	r3, r2
 8009798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d055      	beq.n	8009852 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097a6:	4b43      	ldr	r3, [pc, #268]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	4940      	ldr	r1, [pc, #256]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d107      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097c0:	4b3c      	ldr	r3, [pc, #240]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d121      	bne.n	8009810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e0f6      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d107      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097d8:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d115      	bne.n	8009810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e0ea      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d107      	bne.n	8009800 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097f0:	4b30      	ldr	r3, [pc, #192]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d109      	bne.n	8009810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0de      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009800:	4b2c      	ldr	r3, [pc, #176]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e0d6      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009810:	4b28      	ldr	r3, [pc, #160]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f023 0207 	bic.w	r2, r3, #7
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	4925      	ldr	r1, [pc, #148]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800981e:	4313      	orrs	r3, r2
 8009820:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009822:	f7f9 fdad 	bl	8003380 <HAL_GetTick>
 8009826:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009828:	e00a      	b.n	8009840 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800982a:	f7f9 fda9 	bl	8003380 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	f241 3288 	movw	r2, #5000	; 0x1388
 8009838:	4293      	cmp	r3, r2
 800983a:	d901      	bls.n	8009840 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e0be      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	429a      	cmp	r2, r3
 8009850:	d1eb      	bne.n	800982a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	429a      	cmp	r2, r3
 800986c:	d208      	bcs.n	8009880 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800986e:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f023 020f 	bic.w	r2, r3, #15
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	490e      	ldr	r1, [pc, #56]	; (80098b4 <HAL_RCC_ClockConfig+0x244>)
 800987c:	4313      	orrs	r3, r2
 800987e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d214      	bcs.n	80098b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800988e:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f023 020f 	bic.w	r2, r3, #15
 8009896:	4906      	ldr	r1, [pc, #24]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	4313      	orrs	r3, r2
 800989c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800989e:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <HAL_RCC_ClockConfig+0x240>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d005      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e086      	b.n	80099be <HAL_RCC_ClockConfig+0x34e>
 80098b0:	52002000 	.word	0x52002000
 80098b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d010      	beq.n	80098e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	4b3f      	ldr	r3, [pc, #252]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d208      	bcs.n	80098e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098d4:	4b3c      	ldr	r3, [pc, #240]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	4939      	ldr	r1, [pc, #228]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d010      	beq.n	8009914 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695a      	ldr	r2, [r3, #20]
 80098f6:	4b34      	ldr	r3, [pc, #208]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098fe:	429a      	cmp	r2, r3
 8009900:	d208      	bcs.n	8009914 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009902:	4b31      	ldr	r3, [pc, #196]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	492e      	ldr	r1, [pc, #184]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009910:	4313      	orrs	r3, r2
 8009912:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0310 	and.w	r3, r3, #16
 800991c:	2b00      	cmp	r3, #0
 800991e:	d010      	beq.n	8009942 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699a      	ldr	r2, [r3, #24]
 8009924:	4b28      	ldr	r3, [pc, #160]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800992c:	429a      	cmp	r2, r3
 800992e:	d208      	bcs.n	8009942 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009930:	4b25      	ldr	r3, [pc, #148]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	4922      	ldr	r1, [pc, #136]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 800993e:	4313      	orrs	r3, r2
 8009940:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b00      	cmp	r3, #0
 800994c:	d010      	beq.n	8009970 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69da      	ldr	r2, [r3, #28]
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800995a:	429a      	cmp	r2, r3
 800995c:	d208      	bcs.n	8009970 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800995e:	4b1a      	ldr	r3, [pc, #104]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	4917      	ldr	r1, [pc, #92]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 800996c:	4313      	orrs	r3, r2
 800996e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009970:	f000 f844 	bl	80099fc <HAL_RCC_GetSysClockFreq>
 8009974:	4602      	mov	r2, r0
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	0a1b      	lsrs	r3, r3, #8
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	4912      	ldr	r1, [pc, #72]	; (80099cc <HAL_RCC_ClockConfig+0x35c>)
 8009982:	5ccb      	ldrb	r3, [r1, r3]
 8009984:	f003 031f 	and.w	r3, r3, #31
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800998e:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <HAL_RCC_ClockConfig+0x358>)
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	4a0d      	ldr	r2, [pc, #52]	; (80099cc <HAL_RCC_ClockConfig+0x35c>)
 8009998:	5cd3      	ldrb	r3, [r2, r3]
 800999a:	f003 031f 	and.w	r3, r3, #31
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	fa22 f303 	lsr.w	r3, r2, r3
 80099a4:	4a0a      	ldr	r2, [pc, #40]	; (80099d0 <HAL_RCC_ClockConfig+0x360>)
 80099a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099a8:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <HAL_RCC_ClockConfig+0x364>)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099ae:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <HAL_RCC_ClockConfig+0x368>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f9 fc9a 	bl	80032ec <HAL_InitTick>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	58024400 	.word	0x58024400
 80099cc:	0801e0c0 	.word	0x0801e0c0
 80099d0:	20000014 	.word	0x20000014
 80099d4:	20000010 	.word	0x20000010
 80099d8:	20000020 	.word	0x20000020

080099dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <HAL_RCC_EnableCSS+0x1c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a04      	ldr	r2, [pc, #16]	; (80099f8 <HAL_RCC_EnableCSS+0x1c>)
 80099e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099ea:	6013      	str	r3, [r2, #0]
}
 80099ec:	bf00      	nop
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400

080099fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b089      	sub	sp, #36	; 0x24
 8009a00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a02:	4bb3      	ldr	r3, [pc, #716]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a0a:	2b18      	cmp	r3, #24
 8009a0c:	f200 8155 	bhi.w	8009cba <HAL_RCC_GetSysClockFreq+0x2be>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a7d 	.word	0x08009a7d
 8009a1c:	08009cbb 	.word	0x08009cbb
 8009a20:	08009cbb 	.word	0x08009cbb
 8009a24:	08009cbb 	.word	0x08009cbb
 8009a28:	08009cbb 	.word	0x08009cbb
 8009a2c:	08009cbb 	.word	0x08009cbb
 8009a30:	08009cbb 	.word	0x08009cbb
 8009a34:	08009cbb 	.word	0x08009cbb
 8009a38:	08009aa3 	.word	0x08009aa3
 8009a3c:	08009cbb 	.word	0x08009cbb
 8009a40:	08009cbb 	.word	0x08009cbb
 8009a44:	08009cbb 	.word	0x08009cbb
 8009a48:	08009cbb 	.word	0x08009cbb
 8009a4c:	08009cbb 	.word	0x08009cbb
 8009a50:	08009cbb 	.word	0x08009cbb
 8009a54:	08009cbb 	.word	0x08009cbb
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009cbb 	.word	0x08009cbb
 8009a60:	08009cbb 	.word	0x08009cbb
 8009a64:	08009cbb 	.word	0x08009cbb
 8009a68:	08009cbb 	.word	0x08009cbb
 8009a6c:	08009cbb 	.word	0x08009cbb
 8009a70:	08009cbb 	.word	0x08009cbb
 8009a74:	08009cbb 	.word	0x08009cbb
 8009a78:	08009aaf 	.word	0x08009aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a7c:	4b94      	ldr	r3, [pc, #592]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a88:	4b91      	ldr	r3, [pc, #580]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	08db      	lsrs	r3, r3, #3
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	4a90      	ldr	r2, [pc, #576]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a9a:	e111      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a9c:	4b8d      	ldr	r3, [pc, #564]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a9e:	61bb      	str	r3, [r7, #24]
      break;
 8009aa0:	e10e      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009aa2:	4b8d      	ldr	r3, [pc, #564]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aa4:	61bb      	str	r3, [r7, #24]
      break;
 8009aa6:	e10b      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009aa8:	4b8c      	ldr	r3, [pc, #560]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009aaa:	61bb      	str	r3, [r7, #24]
      break;
 8009aac:	e108      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aae:	4b88      	ldr	r3, [pc, #544]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009ab8:	4b85      	ldr	r3, [pc, #532]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	091b      	lsrs	r3, r3, #4
 8009abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ac4:	4b82      	ldr	r3, [pc, #520]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ace:	4b80      	ldr	r3, [pc, #512]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80e1 	beq.w	8009cb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	f000 8083 	beq.w	8009c00 <HAL_RCC_GetSysClockFreq+0x204>
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	f200 80a1 	bhi.w	8009c44 <HAL_RCC_GetSysClockFreq+0x248>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <HAL_RCC_GetSysClockFreq+0x114>
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d056      	beq.n	8009bbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b0e:	e099      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b10:	4b6f      	ldr	r3, [pc, #444]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0320 	and.w	r3, r3, #32
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02d      	beq.n	8009b78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b1c:	4b6c      	ldr	r3, [pc, #432]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	08db      	lsrs	r3, r3, #3
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	4a6b      	ldr	r2, [pc, #428]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b62      	ldr	r3, [pc, #392]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b76:	e087      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	4b51      	ldr	r3, [pc, #324]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bba:	e065      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b40      	ldr	r3, [pc, #256]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bfe:	e043      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009cec <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c42:	e021      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	0a5b      	lsrs	r3, r3, #9
 8009c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c92:	3301      	adds	r3, #1
 8009c94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cac:	ee17 3a90 	vmov	r3, s15
 8009cb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009cb2:	e005      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	61bb      	str	r3, [r7, #24]
      break;
 8009cb8:	e002      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009cbc:	61bb      	str	r3, [r7, #24]
      break;
 8009cbe:	bf00      	nop
  }

  return sysclockfreq;
 8009cc0:	69bb      	ldr	r3, [r7, #24]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3724      	adds	r7, #36	; 0x24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	58024400 	.word	0x58024400
 8009cd4:	03d09000 	.word	0x03d09000
 8009cd8:	003d0900 	.word	0x003d0900
 8009cdc:	00989680 	.word	0x00989680
 8009ce0:	46000000 	.word	0x46000000
 8009ce4:	4c742400 	.word	0x4c742400
 8009ce8:	4a742400 	.word	0x4a742400
 8009cec:	4b189680 	.word	0x4b189680

08009cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cf6:	f7ff fe81 	bl	80099fc <HAL_RCC_GetSysClockFreq>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	0a1b      	lsrs	r3, r3, #8
 8009d02:	f003 030f 	and.w	r3, r3, #15
 8009d06:	490f      	ldr	r1, [pc, #60]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d08:	5ccb      	ldrb	r3, [r1, r3]
 8009d0a:	f003 031f 	and.w	r3, r3, #31
 8009d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	4a09      	ldr	r2, [pc, #36]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d1e:	5cd3      	ldrb	r3, [r2, r3]
 8009d20:	f003 031f 	and.w	r3, r3, #31
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2a:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d2e:	4a07      	ldr	r2, [pc, #28]	; (8009d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d34:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d36:	681b      	ldr	r3, [r3, #0]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	58024400 	.word	0x58024400
 8009d44:	0801e0c0 	.word	0x0801e0c0
 8009d48:	20000014 	.word	0x20000014
 8009d4c:	20000010 	.word	0x20000010

08009d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d54:	f7ff ffcc 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	091b      	lsrs	r3, r3, #4
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	4904      	ldr	r1, [pc, #16]	; (8009d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d66:	5ccb      	ldrb	r3, [r1, r3]
 8009d68:	f003 031f 	and.w	r3, r3, #31
 8009d6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	58024400 	.word	0x58024400
 8009d78:	0801e0c0 	.word	0x0801e0c0

08009d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d80:	f7ff ffb6 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 8009d84:	4602      	mov	r2, r0
 8009d86:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	0a1b      	lsrs	r3, r3, #8
 8009d8c:	f003 0307 	and.w	r3, r3, #7
 8009d90:	4904      	ldr	r1, [pc, #16]	; (8009da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d92:	5ccb      	ldrb	r3, [r1, r3]
 8009d94:	f003 031f 	and.w	r3, r3, #31
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	58024400 	.word	0x58024400
 8009da4:	0801e0c0 	.word	0x0801e0c0

08009da8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <HAL_RCC_NMI_IRQHandler+0x24>)
 8009dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db8:	d105      	bne.n	8009dc6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009dba:	f000 f809 	bl	8009dd0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009dbe:	4b03      	ldr	r3, [pc, #12]	; (8009dcc <HAL_RCC_NMI_IRQHandler+0x24>)
 8009dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009dc4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400

08009dd0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
	...

08009de0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de4:	b0ca      	sub	sp, #296	; 0x128
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009dec:	2300      	movs	r3, #0
 8009dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009df2:	2300      	movs	r3, #0
 8009df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009e04:	2500      	movs	r5, #0
 8009e06:	ea54 0305 	orrs.w	r3, r4, r5
 8009e0a:	d049      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e16:	d02f      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e1c:	d828      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e22:	d01a      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e28:	d822      	bhi.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e32:	d007      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e34:	e01c      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e36:	4bb8      	ldr	r3, [pc, #736]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4ab7      	ldr	r2, [pc, #732]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e42:	e01a      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e48:	3308      	adds	r3, #8
 8009e4a:	2102      	movs	r1, #2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 fbb7 	bl	800c5c0 <RCCEx_PLL2_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e58:	e00f      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e5e:	3328      	adds	r3, #40	; 0x28
 8009e60:	2102      	movs	r1, #2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 fc5e 	bl	800c724 <RCCEx_PLL3_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e6e:	e004      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e76:	e000      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10a      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e82:	4ba5      	ldr	r3, [pc, #660]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e90:	4aa1      	ldr	r2, [pc, #644]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e92:	430b      	orrs	r3, r1
 8009e94:	6513      	str	r3, [r2, #80]	; 0x50
 8009e96:	e003      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009eac:	f04f 0900 	mov.w	r9, #0
 8009eb0:	ea58 0309 	orrs.w	r3, r8, r9
 8009eb4:	d047      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d82a      	bhi.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009edd 	.word	0x08009edd
 8009ecc:	08009eeb 	.word	0x08009eeb
 8009ed0:	08009f01 	.word	0x08009f01
 8009ed4:	08009f1f 	.word	0x08009f1f
 8009ed8:	08009f1f 	.word	0x08009f1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009edc:	4b8e      	ldr	r3, [pc, #568]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	4a8d      	ldr	r2, [pc, #564]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ee8:	e01a      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eee:	3308      	adds	r3, #8
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 fb64 	bl	800c5c0 <RCCEx_PLL2_Config>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009efe:	e00f      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f04:	3328      	adds	r3, #40	; 0x28
 8009f06:	2100      	movs	r1, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f002 fc0b 	bl	800c724 <RCCEx_PLL3_Config>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f14:	e004      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f1c:	e000      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f28:	4b7b      	ldr	r3, [pc, #492]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2c:	f023 0107 	bic.w	r1, r3, #7
 8009f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f36:	4a78      	ldr	r2, [pc, #480]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009f52:	f04f 0b00 	mov.w	fp, #0
 8009f56:	ea5a 030b 	orrs.w	r3, sl, fp
 8009f5a:	d04c      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f66:	d030      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f6c:	d829      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8009f70:	d02d      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009f72:	2bc0      	cmp	r3, #192	; 0xc0
 8009f74:	d825      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f76:	2b80      	cmp	r3, #128	; 0x80
 8009f78:	d018      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009f7a:	2b80      	cmp	r3, #128	; 0x80
 8009f7c:	d821      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009f82:	2b40      	cmp	r3, #64	; 0x40
 8009f84:	d007      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009f86:	e01c      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f88:	4b63      	ldr	r3, [pc, #396]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a62      	ldr	r2, [pc, #392]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f94:	e01c      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 fb0e 	bl	800c5c0 <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009faa:	e011      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	3328      	adds	r3, #40	; 0x28
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 fbb5 	bl	800c724 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009fc0:	e006      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009fd8:	4b4f      	ldr	r3, [pc, #316]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fdc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe6:	4a4c      	ldr	r2, [pc, #304]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	6513      	str	r3, [r2, #80]	; 0x50
 8009fec:	e003      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a006:	2300      	movs	r3, #0
 800a008:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a00c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a010:	460b      	mov	r3, r1
 800a012:	4313      	orrs	r3, r2
 800a014:	d053      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a01e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a022:	d035      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a028:	d82e      	bhi.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a02a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a02e:	d031      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a030:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a034:	d828      	bhi.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a03a:	d01a      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a040:	d822      	bhi.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a04a:	d007      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a04c:	e01c      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04e:	4b32      	ldr	r3, [pc, #200]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	4a31      	ldr	r2, [pc, #196]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a05a:	e01c      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a060:	3308      	adds	r3, #8
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f002 faab 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a070:	e011      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a076:	3328      	adds	r3, #40	; 0x28
 800a078:	2100      	movs	r1, #0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 fb52 	bl	800c724 <RCCEx_PLL3_Config>
 800a080:	4603      	mov	r3, r0
 800a082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a086:	e006      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a08e:	e002      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a090:	bf00      	nop
 800a092:	e000      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a094:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10b      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a09e:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0ae:	4a1a      	ldr	r2, [pc, #104]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a0b4:	e003      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a0ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a0d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	d056      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0ea:	d038      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a0ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0f0:	d831      	bhi.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0f6:	d034      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a0f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0fc:	d82b      	bhi.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a102:	d01d      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a108:	d825      	bhi.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a10e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a112:	d00a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a114:	e01f      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a11c:	4ba2      	ldr	r3, [pc, #648]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	4aa1      	ldr	r2, [pc, #644]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a128:	e01c      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12e:	3308      	adds	r3, #8
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f002 fa44 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a13e:	e011      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a144:	3328      	adds	r3, #40	; 0x28
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 faeb 	bl	800c724 <RCCEx_PLL3_Config>
 800a14e:	4603      	mov	r3, r0
 800a150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a154:	e006      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a162:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a16c:	4b8e      	ldr	r3, [pc, #568]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a170:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a178:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a17c:	4a8a      	ldr	r2, [pc, #552]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a17e:	430b      	orrs	r3, r1
 800a180:	6593      	str	r3, [r2, #88]	; 0x58
 800a182:	e003      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	d03a      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b2:	2b30      	cmp	r3, #48	; 0x30
 800a1b4:	d01f      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a1b6:	2b30      	cmp	r3, #48	; 0x30
 800a1b8:	d819      	bhi.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d00c      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	d815      	bhi.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d019      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a1c6:	2b10      	cmp	r3, #16
 800a1c8:	d111      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ca:	4b77      	ldr	r3, [pc, #476]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	4a76      	ldr	r2, [pc, #472]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a1d6:	e011      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1dc:	3308      	adds	r3, #8
 800a1de:	2102      	movs	r1, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f002 f9ed 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a1ec:	e006      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1f4:	e002      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a204:	4b68      	ldr	r3, [pc, #416]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a208:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a212:	4a65      	ldr	r2, [pc, #404]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a214:	430b      	orrs	r3, r1
 800a216:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a218:	e003      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a21e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a22e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a238:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4313      	orrs	r3, r2
 800a240:	d051      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a24c:	d035      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a24e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a252:	d82e      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a258:	d031      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a25a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a25e:	d828      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a264:	d01a      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a26a:	d822      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a274:	d007      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a276:	e01c      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a278:	4b4b      	ldr	r3, [pc, #300]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	4a4a      	ldr	r2, [pc, #296]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a27e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a284:	e01c      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	3308      	adds	r3, #8
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f002 f996 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a29a:	e011      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a0:	3328      	adds	r3, #40	; 0x28
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f002 fa3d 	bl	800c724 <RCCEx_PLL3_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2b0:	e006      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e000      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a2be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a2c8:	4b37      	ldr	r3, [pc, #220]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d6:	4a34      	ldr	r2, [pc, #208]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6513      	str	r3, [r2, #80]	; 0x50
 800a2dc:	e003      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a2f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a2fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d056      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a30c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a310:	d033      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a316:	d82c      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a31c:	d02f      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a31e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a322:	d826      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a328:	d02b      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a32a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a32e:	d820      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a334:	d012      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33a:	d81a      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d022      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a344:	d115      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34a:	3308      	adds	r3, #8
 800a34c:	2101      	movs	r1, #1
 800a34e:	4618      	mov	r0, r3
 800a350:	f002 f936 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a35a:	e015      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a360:	3328      	adds	r3, #40	; 0x28
 800a362:	2101      	movs	r1, #1
 800a364:	4618      	mov	r0, r3
 800a366:	f002 f9dd 	bl	800c724 <RCCEx_PLL3_Config>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a370:	e00a      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a378:	e006      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a37a:	bf00      	nop
 800a37c:	e004      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a37e:	bf00      	nop
 800a380:	e002      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a382:	bf00      	nop
 800a384:	e000      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a386:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10d      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a390:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a394:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a39e:	4a02      	ldr	r2, [pc, #8]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	6513      	str	r3, [r2, #80]	; 0x50
 800a3a4:	e006      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a3a6:	bf00      	nop
 800a3a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a3c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	d055      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3e0:	d033      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a3e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3e6:	d82c      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ec:	d02f      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f2:	d826      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3f8:	d02b      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a3fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3fe:	d820      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a404:	d012      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a40a:	d81a      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d022      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a414:	d115      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41a:	3308      	adds	r3, #8
 800a41c:	2101      	movs	r1, #1
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 f8ce 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a42a:	e015      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a430:	3328      	adds	r3, #40	; 0x28
 800a432:	2101      	movs	r1, #1
 800a434:	4618      	mov	r0, r3
 800a436:	f002 f975 	bl	800c724 <RCCEx_PLL3_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a440:	e00a      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a448:	e006      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a44a:	bf00      	nop
 800a44c:	e004      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a44e:	bf00      	nop
 800a450:	e002      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a452:	bf00      	nop
 800a454:	e000      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a456:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10b      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a460:	4ba3      	ldr	r3, [pc, #652]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a464:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a470:	4a9f      	ldr	r2, [pc, #636]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a472:	430b      	orrs	r3, r1
 800a474:	6593      	str	r3, [r2, #88]	; 0x58
 800a476:	e003      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a47c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a490:	2300      	movs	r3, #0
 800a492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a49a:	460b      	mov	r3, r1
 800a49c:	4313      	orrs	r3, r2
 800a49e:	d037      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4aa:	d00e      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b0:	d816      	bhi.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a4b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4ba:	d111      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4bc:	4b8c      	ldr	r3, [pc, #560]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	4a8b      	ldr	r2, [pc, #556]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4c8:	e00f      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f002 f874 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4de:	e004      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4e6:	e000      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a4e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4f2:	4b7f      	ldr	r3, [pc, #508]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	4a7b      	ldr	r2, [pc, #492]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a502:	430b      	orrs	r3, r1
 800a504:	6513      	str	r3, [r2, #80]	; 0x50
 800a506:	e003      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a50c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a51c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a520:	2300      	movs	r3, #0
 800a522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a526:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4313      	orrs	r3, r2
 800a52e:	d039      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a536:	2b03      	cmp	r3, #3
 800a538:	d81c      	bhi.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a53a:	a201      	add	r2, pc, #4	; (adr r2, 800a540 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a540:	0800a57d 	.word	0x0800a57d
 800a544:	0800a551 	.word	0x0800a551
 800a548:	0800a55f 	.word	0x0800a55f
 800a54c:	0800a57d 	.word	0x0800a57d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a550:	4b67      	ldr	r3, [pc, #412]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	4a66      	ldr	r2, [pc, #408]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a55a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a55c:	e00f      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a562:	3308      	adds	r3, #8
 800a564:	2102      	movs	r1, #2
 800a566:	4618      	mov	r0, r3
 800a568:	f002 f82a 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a572:	e004      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a57a:	e000      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10a      	bne.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a586:	4b5a      	ldr	r3, [pc, #360]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a58a:	f023 0103 	bic.w	r1, r3, #3
 800a58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a594:	4a56      	ldr	r2, [pc, #344]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a596:	430b      	orrs	r3, r1
 800a598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a59a:	e003      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a5b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	f000 809f 	beq.w	800a704 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5c6:	4b4b      	ldr	r3, [pc, #300]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a4a      	ldr	r2, [pc, #296]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5d2:	f7f8 fed5 	bl	8003380 <HAL_GetTick>
 800a5d6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5da:	e00b      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5dc:	f7f8 fed0 	bl	8003380 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b64      	cmp	r3, #100	; 0x64
 800a5ea:	d903      	bls.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5f2:	e005      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5f4:	4b3f      	ldr	r3, [pc, #252]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0ed      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a604:	2b00      	cmp	r3, #0
 800a606:	d179      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a608:	4b39      	ldr	r3, [pc, #228]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a60a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a614:	4053      	eors	r3, r2
 800a616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d015      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a61e:	4b34      	ldr	r3, [pc, #208]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a626:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a62a:	4b31      	ldr	r3, [pc, #196]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62e:	4a30      	ldr	r2, [pc, #192]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a634:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a636:	4b2e      	ldr	r3, [pc, #184]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63a:	4a2d      	ldr	r2, [pc, #180]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a63c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a640:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a642:	4a2b      	ldr	r2, [pc, #172]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a648:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a656:	d118      	bne.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a658:	f7f8 fe92 	bl	8003380 <HAL_GetTick>
 800a65c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a660:	e00d      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a662:	f7f8 fe8d 	bl	8003380 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a672:	429a      	cmp	r2, r3
 800a674:	d903      	bls.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a67c:	e005      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a67e:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0eb      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a68a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d129      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a69a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a69e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6a2:	d10e      	bne.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a6a4:	4b12      	ldr	r3, [pc, #72]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6b4:	091a      	lsrs	r2, r3, #4
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6113      	str	r3, [r2, #16]
 800a6c0:	e005      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6cc:	6113      	str	r3, [r2, #16]
 800a6ce:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6de:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6e4:	e00e      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a6ee:	e009      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a6f0:	58024400 	.word	0x58024400
 800a6f4:	58024800 	.word	0x58024800
 800a6f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f002 0301 	and.w	r3, r2, #1
 800a710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a714:	2300      	movs	r3, #0
 800a716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a71a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a71e:	460b      	mov	r3, r1
 800a720:	4313      	orrs	r3, r2
 800a722:	f000 8089 	beq.w	800a838 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72c:	2b28      	cmp	r3, #40	; 0x28
 800a72e:	d86b      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a730:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a736:	bf00      	nop
 800a738:	0800a811 	.word	0x0800a811
 800a73c:	0800a809 	.word	0x0800a809
 800a740:	0800a809 	.word	0x0800a809
 800a744:	0800a809 	.word	0x0800a809
 800a748:	0800a809 	.word	0x0800a809
 800a74c:	0800a809 	.word	0x0800a809
 800a750:	0800a809 	.word	0x0800a809
 800a754:	0800a809 	.word	0x0800a809
 800a758:	0800a7dd 	.word	0x0800a7dd
 800a75c:	0800a809 	.word	0x0800a809
 800a760:	0800a809 	.word	0x0800a809
 800a764:	0800a809 	.word	0x0800a809
 800a768:	0800a809 	.word	0x0800a809
 800a76c:	0800a809 	.word	0x0800a809
 800a770:	0800a809 	.word	0x0800a809
 800a774:	0800a809 	.word	0x0800a809
 800a778:	0800a7f3 	.word	0x0800a7f3
 800a77c:	0800a809 	.word	0x0800a809
 800a780:	0800a809 	.word	0x0800a809
 800a784:	0800a809 	.word	0x0800a809
 800a788:	0800a809 	.word	0x0800a809
 800a78c:	0800a809 	.word	0x0800a809
 800a790:	0800a809 	.word	0x0800a809
 800a794:	0800a809 	.word	0x0800a809
 800a798:	0800a811 	.word	0x0800a811
 800a79c:	0800a809 	.word	0x0800a809
 800a7a0:	0800a809 	.word	0x0800a809
 800a7a4:	0800a809 	.word	0x0800a809
 800a7a8:	0800a809 	.word	0x0800a809
 800a7ac:	0800a809 	.word	0x0800a809
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a809 	.word	0x0800a809
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a809 	.word	0x0800a809
 800a7c0:	0800a809 	.word	0x0800a809
 800a7c4:	0800a809 	.word	0x0800a809
 800a7c8:	0800a809 	.word	0x0800a809
 800a7cc:	0800a809 	.word	0x0800a809
 800a7d0:	0800a809 	.word	0x0800a809
 800a7d4:	0800a809 	.word	0x0800a809
 800a7d8:	0800a811 	.word	0x0800a811
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 feeb 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7f0:	e00f      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	3328      	adds	r3, #40	; 0x28
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 ff92 	bl	800c724 <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a806:	e004      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a80e:	e000      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a81a:	4bbf      	ldr	r3, [pc, #764]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a828:	4abb      	ldr	r2, [pc, #748]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a82a:	430b      	orrs	r3, r1
 800a82c:	6553      	str	r3, [r2, #84]	; 0x54
 800a82e:	e003      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f002 0302 	and.w	r3, r2, #2
 800a844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a848:	2300      	movs	r3, #0
 800a84a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a84e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a852:	460b      	mov	r3, r1
 800a854:	4313      	orrs	r3, r2
 800a856:	d041      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a85e:	2b05      	cmp	r3, #5
 800a860:	d824      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a8b5 	.word	0x0800a8b5
 800a86c:	0800a881 	.word	0x0800a881
 800a870:	0800a897 	.word	0x0800a897
 800a874:	0800a8b5 	.word	0x0800a8b5
 800a878:	0800a8b5 	.word	0x0800a8b5
 800a87c:	0800a8b5 	.word	0x0800a8b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a884:	3308      	adds	r3, #8
 800a886:	2101      	movs	r1, #1
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 fe99 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a894:	e00f      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89a:	3328      	adds	r3, #40	; 0x28
 800a89c:	2101      	movs	r1, #1
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 ff40 	bl	800c724 <RCCEx_PLL3_Config>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8aa:	e004      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8b2:	e000      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8be:	4b96      	ldr	r3, [pc, #600]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c2:	f023 0107 	bic.w	r1, r3, #7
 800a8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8cc:	4a92      	ldr	r2, [pc, #584]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	6553      	str	r3, [r2, #84]	; 0x54
 800a8d2:	e003      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f002 0304 	and.w	r3, r2, #4
 800a8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	d044      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a904:	2b05      	cmp	r3, #5
 800a906:	d825      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a908:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90e:	bf00      	nop
 800a910:	0800a95d 	.word	0x0800a95d
 800a914:	0800a929 	.word	0x0800a929
 800a918:	0800a93f 	.word	0x0800a93f
 800a91c:	0800a95d 	.word	0x0800a95d
 800a920:	0800a95d 	.word	0x0800a95d
 800a924:	0800a95d 	.word	0x0800a95d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92c:	3308      	adds	r3, #8
 800a92e:	2101      	movs	r1, #1
 800a930:	4618      	mov	r0, r3
 800a932:	f001 fe45 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a93c:	e00f      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a942:	3328      	adds	r3, #40	; 0x28
 800a944:	2101      	movs	r1, #1
 800a946:	4618      	mov	r0, r3
 800a948:	f001 feec 	bl	800c724 <RCCEx_PLL3_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a952:	e004      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a95a:	e000      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a95c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a95e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a966:	4b6c      	ldr	r3, [pc, #432]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96a:	f023 0107 	bic.w	r1, r3, #7
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a976:	4a68      	ldr	r2, [pc, #416]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a978:	430b      	orrs	r3, r1
 800a97a:	6593      	str	r3, [r2, #88]	; 0x58
 800a97c:	e003      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f002 0320 	and.w	r3, r2, #32
 800a992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a996:	2300      	movs	r3, #0
 800a998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a99c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	d055      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9b2:	d033      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a9b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9b8:	d82c      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9be:	d02f      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c4:	d826      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ca:	d02b      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a9cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9d0:	d820      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d6:	d012      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a9d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9dc:	d81a      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d022      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a9e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9e6:	d115      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f001 fde5 	bl	800c5c0 <RCCEx_PLL2_Config>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9fc:	e015      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	3328      	adds	r3, #40	; 0x28
 800aa04:	2102      	movs	r1, #2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 fe8c 	bl	800c724 <RCCEx_PLL3_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa12:	e00a      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa1a:	e006      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa1c:	bf00      	nop
 800aa1e:	e004      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa20:	bf00      	nop
 800aa22:	e002      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10b      	bne.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa32:	4b39      	ldr	r3, [pc, #228]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa36:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa42:	4a35      	ldr	r2, [pc, #212]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa44:	430b      	orrs	r3, r1
 800aa46:	6553      	str	r3, [r2, #84]	; 0x54
 800aa48:	e003      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aa5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa62:	2300      	movs	r3, #0
 800aa64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	d058      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa7e:	d033      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa84:	d82c      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8a:	d02f      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa90:	d826      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa96:	d02b      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aa98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa9c:	d820      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa2:	d012      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aaa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa8:	d81a      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d022      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aaae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab2:	d115      	bne.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab8:	3308      	adds	r3, #8
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 fd7f 	bl	800c5c0 <RCCEx_PLL2_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aac8:	e015      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aace:	3328      	adds	r3, #40	; 0x28
 800aad0:	2102      	movs	r1, #2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f001 fe26 	bl	800c724 <RCCEx_PLL3_Config>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aade:	e00a      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aae6:	e006      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aae8:	bf00      	nop
 800aaea:	e004      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aaec:	bf00      	nop
 800aaee:	e002      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aaf0:	bf00      	nop
 800aaf2:	e000      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aaf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10e      	bne.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aafe:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ab06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab0e:	4a02      	ldr	r2, [pc, #8]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6593      	str	r3, [r2, #88]	; 0x58
 800ab14:	e006      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ab16:	bf00      	nop
 800ab18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab34:	2300      	movs	r3, #0
 800ab36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4313      	orrs	r3, r2
 800ab42:	d055      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab50:	d033      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ab52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab56:	d82c      	bhi.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5c:	d02f      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ab5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab62:	d826      	bhi.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab68:	d02b      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ab6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab6e:	d820      	bhi.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab74:	d012      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ab76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab7a:	d81a      	bhi.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d022      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ab80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab84:	d115      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 fd16 	bl	800c5c0 <RCCEx_PLL2_Config>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab9a:	e015      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba0:	3328      	adds	r3, #40	; 0x28
 800aba2:	2102      	movs	r1, #2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f001 fdbd 	bl	800c724 <RCCEx_PLL3_Config>
 800abaa:	4603      	mov	r3, r0
 800abac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abb0:	e00a      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abb8:	e006      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abba:	bf00      	nop
 800abbc:	e004      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abbe:	bf00      	nop
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800abc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10b      	bne.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800abd0:	4ba1      	ldr	r3, [pc, #644]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800abd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800abe0:	4a9d      	ldr	r2, [pc, #628]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abe2:	430b      	orrs	r3, r1
 800abe4:	6593      	str	r3, [r2, #88]	; 0x58
 800abe6:	e003      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800abf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f002 0308 	and.w	r3, r2, #8
 800abfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac00:	2300      	movs	r3, #0
 800ac02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	d01e      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac1c:	d10c      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac22:	3328      	adds	r3, #40	; 0x28
 800ac24:	2102      	movs	r1, #2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f001 fd7c 	bl	800c724 <RCCEx_PLL3_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac38:	4b87      	ldr	r3, [pc, #540]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac48:	4a83      	ldr	r2, [pc, #524]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f002 0310 	and.w	r3, r2, #16
 800ac5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	d01e      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d10c      	bne.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac80:	3328      	adds	r3, #40	; 0x28
 800ac82:	2102      	movs	r1, #2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f001 fd4d 	bl	800c724 <RCCEx_PLL3_Config>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac96:	4b70      	ldr	r3, [pc, #448]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aca6:	4a6c      	ldr	r2, [pc, #432]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800acb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acbc:	2300      	movs	r3, #0
 800acbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800acc6:	460b      	mov	r3, r1
 800acc8:	4313      	orrs	r3, r2
 800acca:	d03e      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800accc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800acd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd8:	d022      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800acda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acde:	d81b      	bhi.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d00b      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800acea:	e015      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf0:	3308      	adds	r3, #8
 800acf2:	2100      	movs	r1, #0
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fc63 	bl	800c5c0 <RCCEx_PLL2_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad00:	e00f      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad06:	3328      	adds	r3, #40	; 0x28
 800ad08:	2102      	movs	r1, #2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fd0a 	bl	800c724 <RCCEx_PLL3_Config>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad16:	e004      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad1e:	e000      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ad20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad2a:	4b4b      	ldr	r3, [pc, #300]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad3a:	4a47      	ldr	r2, [pc, #284]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6593      	str	r3, [r2, #88]	; 0x58
 800ad40:	e003      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ad56:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad58:	2300      	movs	r3, #0
 800ad5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ad60:	460b      	mov	r3, r1
 800ad62:	4313      	orrs	r3, r2
 800ad64:	d03b      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad72:	d01f      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad78:	d818      	bhi.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ad7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ad80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad84:	d007      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ad86:	e011      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad88:	4b33      	ldr	r3, [pc, #204]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	4a32      	ldr	r2, [pc, #200]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad94:	e00f      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9a:	3328      	adds	r3, #40	; 0x28
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 fcc0 	bl	800c724 <RCCEx_PLL3_Config>
 800ada4:	4603      	mov	r3, r0
 800ada6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800adaa:	e004      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adb2:	e000      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800adb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10b      	bne.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800adbe:	4b26      	ldr	r3, [pc, #152]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800adc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adce:	4a22      	ldr	r2, [pc, #136]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800add0:	430b      	orrs	r3, r1
 800add2:	6553      	str	r3, [r2, #84]	; 0x54
 800add4:	e003      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800adde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800adea:	673b      	str	r3, [r7, #112]	; 0x70
 800adec:	2300      	movs	r3, #0
 800adee:	677b      	str	r3, [r7, #116]	; 0x74
 800adf0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800adf4:	460b      	mov	r3, r1
 800adf6:	4313      	orrs	r3, r2
 800adf8:	d034      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800adfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d007      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ae0a:	e011      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae0c:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	4a11      	ldr	r2, [pc, #68]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae18:	e00e      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1e:	3308      	adds	r3, #8
 800ae20:	2102      	movs	r1, #2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 fbcc 	bl	800c5c0 <RCCEx_PLL2_Config>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae2e:	e003      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10d      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae40:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4e:	4a02      	ldr	r2, [pc, #8]	; (800ae58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae50:	430b      	orrs	r3, r1
 800ae52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae54:	e006      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ae56:	bf00      	nop
 800ae58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ae70:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae72:	2300      	movs	r3, #0
 800ae74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	d00c      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae84:	3328      	adds	r3, #40	; 0x28
 800ae86:	2102      	movs	r1, #2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 fc4b 	bl	800c724 <RCCEx_PLL3_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aea6:	663b      	str	r3, [r7, #96]	; 0x60
 800aea8:	2300      	movs	r3, #0
 800aeaa:	667b      	str	r3, [r7, #100]	; 0x64
 800aeac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	d038      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aec2:	d018      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800aec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aec8:	d811      	bhi.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aeca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aece:	d014      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800aed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed4:	d80b      	bhi.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d011      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800aeda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aede:	d106      	bne.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee0:	4bc3      	ldr	r3, [pc, #780]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	4ac2      	ldr	r2, [pc, #776]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aeec:	e008      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aef4:	e004      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aef6:	bf00      	nop
 800aef8:	e002      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aefa:	bf00      	nop
 800aefc:	e000      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aefe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10b      	bne.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af08:	4bb9      	ldr	r3, [pc, #740]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af18:	4ab5      	ldr	r2, [pc, #724]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af1a:	430b      	orrs	r3, r1
 800af1c:	6553      	str	r3, [r2, #84]	; 0x54
 800af1e:	e003      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af34:	65bb      	str	r3, [r7, #88]	; 0x58
 800af36:	2300      	movs	r3, #0
 800af38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800af3e:	460b      	mov	r3, r1
 800af40:	4313      	orrs	r3, r2
 800af42:	d009      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af44:	4baa      	ldr	r3, [pc, #680]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af52:	4aa7      	ldr	r2, [pc, #668]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af54:	430b      	orrs	r3, r1
 800af56:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800af64:	653b      	str	r3, [r7, #80]	; 0x50
 800af66:	2300      	movs	r3, #0
 800af68:	657b      	str	r3, [r7, #84]	; 0x54
 800af6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800af6e:	460b      	mov	r3, r1
 800af70:	4313      	orrs	r3, r2
 800af72:	d00a      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af74:	4b9e      	ldr	r3, [pc, #632]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800af7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af84:	4a9a      	ldr	r2, [pc, #616]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af86:	430b      	orrs	r3, r1
 800af88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800af96:	64bb      	str	r3, [r7, #72]	; 0x48
 800af98:	2300      	movs	r3, #0
 800af9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800afa0:	460b      	mov	r3, r1
 800afa2:	4313      	orrs	r3, r2
 800afa4:	d009      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800afa6:	4b92      	ldr	r3, [pc, #584]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afaa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800afae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb4:	4a8e      	ldr	r2, [pc, #568]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800afba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800afc6:	643b      	str	r3, [r7, #64]	; 0x40
 800afc8:	2300      	movs	r3, #0
 800afca:	647b      	str	r3, [r7, #68]	; 0x44
 800afcc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800afd0:	460b      	mov	r3, r1
 800afd2:	4313      	orrs	r3, r2
 800afd4:	d00e      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800afd6:	4b86      	ldr	r3, [pc, #536]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	4a85      	ldr	r2, [pc, #532]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afe0:	6113      	str	r3, [r2, #16]
 800afe2:	4b83      	ldr	r3, [pc, #524]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afe4:	6919      	ldr	r1, [r3, #16]
 800afe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800afee:	4a80      	ldr	r2, [pc, #512]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aff0:	430b      	orrs	r3, r1
 800aff2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b000:	63bb      	str	r3, [r7, #56]	; 0x38
 800b002:	2300      	movs	r3, #0
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b006:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b00a:	460b      	mov	r3, r1
 800b00c:	4313      	orrs	r3, r2
 800b00e:	d009      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b010:	4b77      	ldr	r3, [pc, #476]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b014:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01e:	4a74      	ldr	r2, [pc, #464]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b020:	430b      	orrs	r3, r1
 800b022:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b030:	633b      	str	r3, [r7, #48]	; 0x30
 800b032:	2300      	movs	r3, #0
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
 800b036:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b03a:	460b      	mov	r3, r1
 800b03c:	4313      	orrs	r3, r2
 800b03e:	d00a      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b040:	4b6b      	ldr	r3, [pc, #428]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b044:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b050:	4a67      	ldr	r2, [pc, #412]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b052:	430b      	orrs	r3, r1
 800b054:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	2100      	movs	r1, #0
 800b060:	62b9      	str	r1, [r7, #40]	; 0x28
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b068:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b06c:	460b      	mov	r3, r1
 800b06e:	4313      	orrs	r3, r2
 800b070:	d011      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b076:	3308      	adds	r3, #8
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 faa0 	bl	800c5c0 <RCCEx_PLL2_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	2100      	movs	r1, #0
 800b0a0:	6239      	str	r1, [r7, #32]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	d011      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fa80 	bl	800c5c0 <RCCEx_PLL2_Config>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	61b9      	str	r1, [r7, #24]
 800b0e2:	f003 0304 	and.w	r3, r3, #4
 800b0e6:	61fb      	str	r3, [r7, #28]
 800b0e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	d011      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f001 fa60 	bl	800c5c0 <RCCEx_PLL2_Config>
 800b100:	4603      	mov	r3, r0
 800b102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	2100      	movs	r1, #0
 800b120:	6139      	str	r1, [r7, #16]
 800b122:	f003 0308 	and.w	r3, r3, #8
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b12c:	460b      	mov	r3, r1
 800b12e:	4313      	orrs	r3, r2
 800b130:	d011      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b136:	3328      	adds	r3, #40	; 0x28
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 faf2 	bl	800c724 <RCCEx_PLL3_Config>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	2100      	movs	r1, #0
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	f003 0310 	and.w	r3, r3, #16
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b16c:	460b      	mov	r3, r1
 800b16e:	4313      	orrs	r3, r2
 800b170:	d011      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b176:	3328      	adds	r3, #40	; 0x28
 800b178:	2101      	movs	r1, #1
 800b17a:	4618      	mov	r0, r3
 800b17c:	f001 fad2 	bl	800c724 <RCCEx_PLL3_Config>
 800b180:	4603      	mov	r3, r0
 800b182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b18e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6039      	str	r1, [r7, #0]
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	607b      	str	r3, [r7, #4]
 800b1a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	d011      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b6:	3328      	adds	r3, #40	; 0x28
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 fab2 	bl	800c724 <RCCEx_PLL3_Config>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b1d6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e000      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1f0:	58024400 	.word	0x58024400

0800b1f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b090      	sub	sp, #64	; 0x40
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b202:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b206:	430b      	orrs	r3, r1
 800b208:	f040 8094 	bne.w	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b20c:	4b9e      	ldr	r3, [pc, #632]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b210:	f003 0307 	and.w	r3, r3, #7
 800b214:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	2b04      	cmp	r3, #4
 800b21a:	f200 8087 	bhi.w	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b21e:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b224:	0800b239 	.word	0x0800b239
 800b228:	0800b261 	.word	0x0800b261
 800b22c:	0800b289 	.word	0x0800b289
 800b230:	0800b325 	.word	0x0800b325
 800b234:	0800b2b1 	.word	0x0800b2b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b238:	4b93      	ldr	r3, [pc, #588]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b244:	d108      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 f810 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b254:	f000 bd45 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b25c:	f000 bd41 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b260:	4b89      	ldr	r3, [pc, #548]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b26c:	d108      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26e:	f107 0318 	add.w	r3, r7, #24
 800b272:	4618      	mov	r0, r3
 800b274:	f000 fd54 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b27c:	f000 bd31 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b284:	f000 bd2d 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b288:	4b7f      	ldr	r3, [pc, #508]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b294:	d108      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b296:	f107 030c 	add.w	r3, r7, #12
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fe94 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a4:	f000 bd1d 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	f000 bd19 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2b0:	4b75      	ldr	r3, [pc, #468]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ba:	4b73      	ldr	r3, [pc, #460]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	d10c      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d109      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2cc:	4b6e      	ldr	r3, [pc, #440]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	08db      	lsrs	r3, r3, #3
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	4a6d      	ldr	r2, [pc, #436]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2de:	e01f      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e0:	4b69      	ldr	r3, [pc, #420]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ec:	d106      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f4:	d102      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2f6:	4b66      	ldr	r3, [pc, #408]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fa:	e011      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2fc:	4b62      	ldr	r3, [pc, #392]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b308:	d106      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b310:	d102      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b312:	4b60      	ldr	r3, [pc, #384]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b314:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b316:	e003      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b31c:	f000 bce1 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b320:	f000 bcdf 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b324:	4b5c      	ldr	r3, [pc, #368]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b328:	f000 bcdb 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b330:	f000 bcd7 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b338:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b33c:	430b      	orrs	r3, r1
 800b33e:	f040 80ad 	bne.w	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b342:	4b51      	ldr	r3, [pc, #324]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b346:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b34a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b352:	d056      	beq.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35a:	f200 8090 	bhi.w	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	2bc0      	cmp	r3, #192	; 0xc0
 800b362:	f000 8088 	beq.w	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	2bc0      	cmp	r3, #192	; 0xc0
 800b36a:	f200 8088 	bhi.w	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	2b80      	cmp	r3, #128	; 0x80
 800b372:	d032      	beq.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2b80      	cmp	r3, #128	; 0x80
 800b378:	f200 8081 	bhi.w	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	2b40      	cmp	r3, #64	; 0x40
 800b386:	d014      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b388:	e079      	b.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b38a:	4b3f      	ldr	r3, [pc, #252]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b396:	d108      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 ff67 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a6:	f000 bc9c 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ae:	f000 bc98 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3b2:	4b35      	ldr	r3, [pc, #212]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3be:	d108      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3c0:	f107 0318 	add.w	r3, r7, #24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 fcab 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ce:	f000 bc88 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d6:	f000 bc84 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3da:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e6:	d108      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3e8:	f107 030c 	add.w	r3, r7, #12
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fdeb 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f6:	f000 bc74 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3fe:	f000 bc70 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b402:	4b21      	ldr	r3, [pc, #132]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b40c:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b04      	cmp	r3, #4
 800b416:	d10c      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d109      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b41e:	4b1a      	ldr	r3, [pc, #104]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	08db      	lsrs	r3, r3, #3
 800b424:	f003 0303 	and.w	r3, r3, #3
 800b428:	4a18      	ldr	r2, [pc, #96]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b42a:	fa22 f303 	lsr.w	r3, r2, r3
 800b42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b430:	e01f      	b.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b432:	4b15      	ldr	r3, [pc, #84]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b43e:	d106      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b446:	d102      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b448:	4b11      	ldr	r3, [pc, #68]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b44c:	e011      	b.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b45a:	d106      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b462:	d102      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b464:	4b0b      	ldr	r3, [pc, #44]	; (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b468:	e003      	b.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b46e:	f000 bc38 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b472:	f000 bc36 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b476:	4b08      	ldr	r3, [pc, #32]	; (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b47a:	f000 bc32 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b482:	f000 bc2e 	b.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
 800b48c:	03d09000 	.word	0x03d09000
 800b490:	003d0900 	.word	0x003d0900
 800b494:	00989680 	.word	0x00989680
 800b498:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b49c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	f040 809c 	bne.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b4aa:	4b9e      	ldr	r3, [pc, #632]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b4b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4ba:	d054      	beq.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4c2:	f200 808b 	bhi.w	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4cc:	f000 8083 	beq.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4d6:	f200 8081 	bhi.w	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4e0:	d02f      	beq.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4e8:	d878      	bhi.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4f6:	d012      	beq.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b4f8:	e070      	b.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4fa:	4b8a      	ldr	r3, [pc, #552]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b506:	d107      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 feaf 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b516:	e3e4      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51c:	e3e1      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b51e:	4b81      	ldr	r3, [pc, #516]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b52a:	d107      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b52c:	f107 0318 	add.w	r3, r7, #24
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fbf5 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53a:	e3d2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b540:	e3cf      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b542:	4b78      	ldr	r3, [pc, #480]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54e:	d107      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b550:	f107 030c 	add.w	r3, r7, #12
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fd37 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55e:	e3c0      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b564:	e3bd      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b566:	4b6f      	ldr	r3, [pc, #444]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b56e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b570:	4b6c      	ldr	r3, [pc, #432]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d10c      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b582:	4b68      	ldr	r3, [pc, #416]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	4a66      	ldr	r2, [pc, #408]	; (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b58e:	fa22 f303 	lsr.w	r3, r2, r3
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b594:	e01e      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b596:	4b63      	ldr	r3, [pc, #396]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d106      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5aa:	d102      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5ac:	4b5f      	ldr	r3, [pc, #380]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b0:	e010      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5b2:	4b5c      	ldr	r3, [pc, #368]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5be:	d106      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c6:	d102      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5c8:	4b59      	ldr	r3, [pc, #356]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5cc:	e002      	b.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b5d2:	e386      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5d4:	e385      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5d6:	4b57      	ldr	r3, [pc, #348]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5da:	e382      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e0:	e37f      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	f040 80a7 	bne.w	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b5f0:	4b4c      	ldr	r3, [pc, #304]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b5f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b600:	d055      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b608:	f200 8096 	bhi.w	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b612:	f000 8084 	beq.w	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b61c:	f200 808c 	bhi.w	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b626:	d030      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b62e:	f200 8083 	bhi.w	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b63e:	d012      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b640:	e07a      	b.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b642:	4b38      	ldr	r3, [pc, #224]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b64a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b64e:	d107      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b654:	4618      	mov	r0, r3
 800b656:	f000 fe0b 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65e:	e340      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b664:	e33d      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b666:	4b2f      	ldr	r3, [pc, #188]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b66e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b672:	d107      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b674:	f107 0318 	add.w	r3, r7, #24
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 fb51 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b682:	e32e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b688:	e32b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b696:	d107      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fc93 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a6:	e31c      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ac:	e319      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b04      	cmp	r3, #4
 800b6c2:	d10c      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ca:	4b16      	ldr	r3, [pc, #88]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	08db      	lsrs	r3, r3, #3
 800b6d0:	f003 0303 	and.w	r3, r3, #3
 800b6d4:	4a14      	ldr	r2, [pc, #80]	; (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6dc:	e01e      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6de:	4b11      	ldr	r3, [pc, #68]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ea:	d106      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6f2:	d102      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6f4:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f8:	e010      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6fa:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b706:	d106      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b70e:	d102      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b714:	e002      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b71a:	e2e2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b71c:	e2e1      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b722:	e2de      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b724:	58024400 	.word	0x58024400
 800b728:	03d09000 	.word	0x03d09000
 800b72c:	003d0900 	.word	0x003d0900
 800b730:	00989680 	.word	0x00989680
 800b734:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b73c:	e2d1      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b73e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b742:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b746:	430b      	orrs	r3, r1
 800b748:	f040 809c 	bne.w	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b74c:	4b93      	ldr	r3, [pc, #588]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b74e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b750:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b754:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b75c:	d054      	beq.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b764:	f200 808b 	bhi.w	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b76e:	f000 8083 	beq.w	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b778:	f200 8081 	bhi.w	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b782:	d02f      	beq.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78a:	d878      	bhi.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b798:	d012      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b79a:	e070      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b79c:	4b7f      	ldr	r3, [pc, #508]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7a8:	d107      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fd5e 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b8:	e293      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7be:	e290      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7c0:	4b76      	ldr	r3, [pc, #472]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7cc:	d107      	bne.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ce:	f107 0318 	add.w	r3, r7, #24
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 faa4 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7dc:	e281      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e2:	e27e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7e4:	4b6d      	ldr	r3, [pc, #436]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f0:	d107      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f2:	f107 030c 	add.w	r3, r7, #12
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 fbe6 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b800:	e26f      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b806:	e26c      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b808:	4b64      	ldr	r3, [pc, #400]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b810:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b812:	4b62      	ldr	r3, [pc, #392]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d10c      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	2b00      	cmp	r3, #0
 800b822:	d109      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b824:	4b5d      	ldr	r3, [pc, #372]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	08db      	lsrs	r3, r3, #3
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	4a5c      	ldr	r2, [pc, #368]	; (800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b830:	fa22 f303 	lsr.w	r3, r2, r3
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b836:	e01e      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b838:	4b58      	ldr	r3, [pc, #352]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b844:	d106      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84c:	d102      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b84e:	4b55      	ldr	r3, [pc, #340]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b852:	e010      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b854:	4b51      	ldr	r3, [pc, #324]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b860:	d106      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b868:	d102      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b86a:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86e:	e002      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b874:	e235      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b876:	e234      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b878:	4b4c      	ldr	r3, [pc, #304]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87c:	e231      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b882:	e22e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b888:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b88c:	430b      	orrs	r3, r1
 800b88e:	f040 808f 	bne.w	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b892:	4b42      	ldr	r3, [pc, #264]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b896:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b89a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8a2:	d06b      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8aa:	d874      	bhi.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8b2:	d056      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8ba:	d86c      	bhi.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8c2:	d03b      	beq.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8ca:	d864      	bhi.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d2:	d021      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8da:	d85c      	bhi.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e8:	d004      	beq.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b8ea:	e054      	b.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b8ec:	f7fe fa30 	bl	8009d50 <HAL_RCC_GetPCLK1Freq>
 800b8f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f2:	e1f6      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8f4:	4b29      	ldr	r3, [pc, #164]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b900:	d107      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b902:	f107 0318 	add.w	r3, r7, #24
 800b906:	4618      	mov	r0, r3
 800b908:	f000 fa0a 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b910:	e1e7      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b916:	e1e4      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b924:	d107      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b926:	f107 030c 	add.w	r3, r7, #12
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fb4c 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b934:	e1d5      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93a:	e1d2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b93c:	4b17      	ldr	r3, [pc, #92]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b04      	cmp	r3, #4
 800b946:	d109      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b948:	4b14      	ldr	r3, [pc, #80]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	08db      	lsrs	r3, r3, #3
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b954:	fa22 f303 	lsr.w	r3, r2, r3
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b95a:	e1c2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b960:	e1bf      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b962:	4b0e      	ldr	r3, [pc, #56]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b96e:	d102      	bne.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b970:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b974:	e1b5      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b97a:	e1b2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b97c:	4b07      	ldr	r3, [pc, #28]	; (800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b988:	d102      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b98a:	4b07      	ldr	r3, [pc, #28]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98e:	e1a8      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b994:	e1a5      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b99a:	e1a2      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b99c:	58024400 	.word	0x58024400
 800b9a0:	03d09000 	.word	0x03d09000
 800b9a4:	003d0900 	.word	0x003d0900
 800b9a8:	00989680 	.word	0x00989680
 800b9ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	d173      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b9bc:	4b9c      	ldr	r3, [pc, #624]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9cc:	d02f      	beq.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9d4:	d863      	bhi.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e2:	d012      	beq.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b9e4:	e05b      	b.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e6:	4b92      	ldr	r3, [pc, #584]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9f2:	d107      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f4:	f107 0318 	add.w	r3, r7, #24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 f991 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba02:	e16e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba08:	e16b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba0a:	4b89      	ldr	r3, [pc, #548]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba16:	d107      	bne.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fad3 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba26:	e15c      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba2c:	e159      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba2e:	4b80      	ldr	r3, [pc, #512]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba38:	4b7d      	ldr	r3, [pc, #500]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d10c      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ba44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba4a:	4b79      	ldr	r3, [pc, #484]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	08db      	lsrs	r3, r3, #3
 800ba50:	f003 0303 	and.w	r3, r3, #3
 800ba54:	4a77      	ldr	r2, [pc, #476]	; (800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba56:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba5c:	e01e      	b.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba5e:	4b74      	ldr	r3, [pc, #464]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6a:	d106      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba72:	d102      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba74:	4b70      	ldr	r3, [pc, #448]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba78:	e010      	b.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba7a:	4b6d      	ldr	r3, [pc, #436]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba86:	d106      	bne.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba8e:	d102      	bne.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba90:	4b6a      	ldr	r3, [pc, #424]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba94:	e002      	b.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ba9a:	e122      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba9c:	e121      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa2:	e11e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800baa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baa8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800baac:	430b      	orrs	r3, r1
 800baae:	d133      	bne.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bab0:	4b5f      	ldr	r3, [pc, #380]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bab8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac6:	d012      	beq.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bac8:	e023      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800baca:	4b59      	ldr	r3, [pc, #356]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bad6:	d107      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fbc7 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae6:	e0fc      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baec:	e0f9      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baee:	4b50      	ldr	r3, [pc, #320]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bafa:	d107      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bafc:	f107 0318 	add.w	r3, r7, #24
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f90d 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb0a:	e0ea      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb10:	e0e7      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb16:	e0e4      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bb20:	430b      	orrs	r3, r1
 800bb22:	f040 808d 	bne.w	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bb26:	4b42      	ldr	r3, [pc, #264]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb36:	d06b      	beq.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb3e:	d874      	bhi.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb46:	d056      	beq.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb4e:	d86c      	bhi.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb56:	d03b      	beq.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb5e:	d864      	bhi.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb66:	d021      	beq.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb6e:	d85c      	bhi.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb7c:	d004      	beq.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb7e:	e054      	b.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb80:	f000 f8b8 	bl	800bcf4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb86:	e0ac      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb88:	4b29      	ldr	r3, [pc, #164]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb94:	d107      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb96:	f107 0318 	add.w	r3, r7, #24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f8c0 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba4:	e09d      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbaa:	e09a      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbac:	4b20      	ldr	r3, [pc, #128]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbb8:	d107      	bne.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbba:	f107 030c 	add.w	r3, r7, #12
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fa02 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc8:	e08b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbce:	e088      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d109      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	08db      	lsrs	r3, r3, #3
 800bbe2:	f003 0303 	and.w	r3, r3, #3
 800bbe6:	4a13      	ldr	r2, [pc, #76]	; (800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbee:	e078      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf4:	e075      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bbf6:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc02:	d102      	bne.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc08:	e06b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc0e:	e068      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1c:	d102      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bc1e:	4b07      	ldr	r3, [pc, #28]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc22:	e05e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e05b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc2e:	e058      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc30:	58024400 	.word	0x58024400
 800bc34:	03d09000 	.word	0x03d09000
 800bc38:	003d0900 	.word	0x003d0900
 800bc3c:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc44:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	d148      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bc4c:	4b27      	ldr	r3, [pc, #156]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5c:	d02a      	beq.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc64:	d838      	bhi.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc72:	d00d      	beq.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc74:	e030      	b.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc82:	d102      	bne.n	800bc8a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc84:	4b1a      	ldr	r3, [pc, #104]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc88:	e02b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc8e:	e028      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc90:	4b16      	ldr	r3, [pc, #88]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc9c:	d107      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fae4 	bl	800c270 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcac:	e019      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcb2:	e016      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcc0:	d107      	bne.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcc2:	f107 0318 	add.w	r3, r7, #24
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 f82a 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcd0:	e007      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd6:	e004      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcdc:	e001      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3740      	adds	r7, #64	; 0x40
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	58024400 	.word	0x58024400
 800bcf0:	00989680 	.word	0x00989680

0800bcf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bcf8:	f7fd fffa 	bl	8009cf0 <HAL_RCC_GetHCLKFreq>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	091b      	lsrs	r3, r3, #4
 800bd04:	f003 0307 	and.w	r3, r3, #7
 800bd08:	4904      	ldr	r1, [pc, #16]	; (800bd1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd0a:	5ccb      	ldrb	r3, [r1, r3]
 800bd0c:	f003 031f 	and.w	r3, r3, #31
 800bd10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	58024400 	.word	0x58024400
 800bd1c:	0801e0c0 	.word	0x0801e0c0

0800bd20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b089      	sub	sp, #36	; 0x24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd28:	4ba1      	ldr	r3, [pc, #644]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2c:	f003 0303 	and.w	r3, r3, #3
 800bd30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bd32:	4b9f      	ldr	r3, [pc, #636]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd36:	0b1b      	lsrs	r3, r3, #12
 800bd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bd3e:	4b9c      	ldr	r3, [pc, #624]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	091b      	lsrs	r3, r3, #4
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bd4a:	4b99      	ldr	r3, [pc, #612]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4e:	08db      	lsrs	r3, r3, #3
 800bd50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	fb02 f303 	mul.w	r3, r2, r3
 800bd5a:	ee07 3a90 	vmov	s15, r3
 800bd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 8111 	beq.w	800bf90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	f000 8083 	beq.w	800be7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	f200 80a1 	bhi.w	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d056      	beq.n	800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd8a:	e099      	b.n	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd8c:	4b88      	ldr	r3, [pc, #544]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0320 	and.w	r3, r3, #32
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d02d      	beq.n	800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd98:	4b85      	ldr	r3, [pc, #532]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	08db      	lsrs	r3, r3, #3
 800bd9e:	f003 0303 	and.w	r3, r3, #3
 800bda2:	4a84      	ldr	r2, [pc, #528]	; (800bfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bda4:	fa22 f303 	lsr.w	r3, r2, r3
 800bda8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	ee07 3a90 	vmov	s15, r3
 800bdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc2:	4b7b      	ldr	r3, [pc, #492]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdf2:	e087      	b.n	800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be06:	4b6a      	ldr	r3, [pc, #424]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be16:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be36:	e065      	b.n	800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b59      	ldr	r3, [pc, #356]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be7a:	e043      	b.n	800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b48      	ldr	r3, [pc, #288]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bebe:	e021      	b.n	800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed2:	4b37      	ldr	r3, [pc, #220]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bfb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf04:	4b2a      	ldr	r3, [pc, #168]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf08:	0a5b      	lsrs	r3, r3, #9
 800bf0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf2a:	ee17 2a90 	vmov	r2, s15
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf32:	4b1f      	ldr	r3, [pc, #124]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf36:	0c1b      	lsrs	r3, r3, #16
 800bf38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf3c:	ee07 3a90 	vmov	s15, r3
 800bf40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf58:	ee17 2a90 	vmov	r2, s15
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bf60:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf64:	0e1b      	lsrs	r3, r3, #24
 800bf66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6a:	ee07 3a90 	vmov	s15, r3
 800bf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf86:	ee17 2a90 	vmov	r2, s15
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf8e:	e008      	b.n	800bfa2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	609a      	str	r2, [r3, #8]
}
 800bfa2:	bf00      	nop
 800bfa4:	3724      	adds	r7, #36	; 0x24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	58024400 	.word	0x58024400
 800bfb4:	03d09000 	.word	0x03d09000
 800bfb8:	46000000 	.word	0x46000000
 800bfbc:	4c742400 	.word	0x4c742400
 800bfc0:	4a742400 	.word	0x4a742400
 800bfc4:	4b189680 	.word	0x4b189680

0800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b089      	sub	sp, #36	; 0x24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfd0:	4ba1      	ldr	r3, [pc, #644]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd4:	f003 0303 	and.w	r3, r3, #3
 800bfd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bfda:	4b9f      	ldr	r3, [pc, #636]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	0d1b      	lsrs	r3, r3, #20
 800bfe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfe4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bfe6:	4b9c      	ldr	r3, [pc, #624]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bff2:	4b99      	ldr	r3, [pc, #612]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff6:	08db      	lsrs	r3, r3, #3
 800bff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	fb02 f303 	mul.w	r3, r2, r3
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 8111 	beq.w	800c238 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	f000 8083 	beq.w	800c124 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	2b02      	cmp	r3, #2
 800c022:	f200 80a1 	bhi.w	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d056      	beq.n	800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c032:	e099      	b.n	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c034:	4b88      	ldr	r3, [pc, #544]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0320 	and.w	r3, r3, #32
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d02d      	beq.n	800c09c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c040:	4b85      	ldr	r3, [pc, #532]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	08db      	lsrs	r3, r3, #3
 800c046:	f003 0303 	and.w	r3, r3, #3
 800c04a:	4a84      	ldr	r2, [pc, #528]	; (800c25c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c04c:	fa22 f303 	lsr.w	r3, r2, r3
 800c050:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	ee07 3a90 	vmov	s15, r3
 800c058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06a:	4b7b      	ldr	r3, [pc, #492]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c072:	ee07 3a90 	vmov	s15, r3
 800c076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c07e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c096:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c09a:	e087      	b.n	800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	ee07 3a90 	vmov	s15, r3
 800c0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c264 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ae:	4b6a      	ldr	r3, [pc, #424]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0de:	e065      	b.n	800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f2:	4b59      	ldr	r3, [pc, #356]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c102:	ed97 6a03 	vldr	s12, [r7, #12]
 800c106:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c122:	e043      	b.n	800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c26c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c136:	4b48      	ldr	r3, [pc, #288]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c146:	ed97 6a03 	vldr	s12, [r7, #12]
 800c14a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c166:	e021      	b.n	800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c172:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c17a:	4b37      	ldr	r3, [pc, #220]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c182:	ee07 3a90 	vmov	s15, r3
 800c186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c18e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c1ac:	4b2a      	ldr	r3, [pc, #168]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	0a5b      	lsrs	r3, r3, #9
 800c1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1d2:	ee17 2a90 	vmov	r2, s15
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c1da:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	0c1b      	lsrs	r3, r3, #16
 800c1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e4:	ee07 3a90 	vmov	s15, r3
 800c1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c200:	ee17 2a90 	vmov	r2, s15
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c208:	4b13      	ldr	r3, [pc, #76]	; (800c258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	0e1b      	lsrs	r3, r3, #24
 800c20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c212:	ee07 3a90 	vmov	s15, r3
 800c216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c222:	edd7 6a07 	vldr	s13, [r7, #28]
 800c226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c22e:	ee17 2a90 	vmov	r2, s15
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c236:	e008      	b.n	800c24a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	609a      	str	r2, [r3, #8]
}
 800c24a:	bf00      	nop
 800c24c:	3724      	adds	r7, #36	; 0x24
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	58024400 	.word	0x58024400
 800c25c:	03d09000 	.word	0x03d09000
 800c260:	46000000 	.word	0x46000000
 800c264:	4c742400 	.word	0x4c742400
 800c268:	4a742400 	.word	0x4a742400
 800c26c:	4b189680 	.word	0x4b189680

0800c270 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c270:	b480      	push	{r7}
 800c272:	b089      	sub	sp, #36	; 0x24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c278:	4ba0      	ldr	r3, [pc, #640]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c282:	4b9e      	ldr	r3, [pc, #632]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c286:	091b      	lsrs	r3, r3, #4
 800c288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c28c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c28e:	4b9b      	ldr	r3, [pc, #620]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c298:	4b98      	ldr	r3, [pc, #608]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29c:	08db      	lsrs	r3, r3, #3
 800c29e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	fb02 f303 	mul.w	r3, r2, r3
 800c2a8:	ee07 3a90 	vmov	s15, r3
 800c2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 8111 	beq.w	800c4de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	f000 8083 	beq.w	800c3ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	f200 80a1 	bhi.w	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d056      	beq.n	800c386 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c2d8:	e099      	b.n	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2da:	4b88      	ldr	r3, [pc, #544]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 0320 	and.w	r3, r3, #32
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d02d      	beq.n	800c342 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2e6:	4b85      	ldr	r3, [pc, #532]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	08db      	lsrs	r3, r3, #3
 800c2ec:	f003 0303 	and.w	r3, r3, #3
 800c2f0:	4a83      	ldr	r2, [pc, #524]	; (800c500 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	ee07 3a90 	vmov	s15, r3
 800c2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c310:	4b7a      	ldr	r3, [pc, #488]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c320:	ed97 6a03 	vldr	s12, [r7, #12]
 800c324:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c340:	e087      	b.n	800c452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	ee07 3a90 	vmov	s15, r3
 800c348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c508 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c354:	4b69      	ldr	r3, [pc, #420]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35c:	ee07 3a90 	vmov	s15, r3
 800c360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c364:	ed97 6a03 	vldr	s12, [r7, #12]
 800c368:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c384:	e065      	b.n	800c452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	ee07 3a90 	vmov	s15, r3
 800c38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c390:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c50c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c398:	4b58      	ldr	r3, [pc, #352]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3c8:	e043      	b.n	800c452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	ee07 3a90 	vmov	s15, r3
 800c3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c510 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3dc:	4b47      	ldr	r3, [pc, #284]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e4:	ee07 3a90 	vmov	s15, r3
 800c3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c40c:	e021      	b.n	800c452 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	ee07 3a90 	vmov	s15, r3
 800c414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c418:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c508 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c420:	4b36      	ldr	r3, [pc, #216]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c428:	ee07 3a90 	vmov	s15, r3
 800c42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c430:	ed97 6a03 	vldr	s12, [r7, #12]
 800c434:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c504 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c44c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c450:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c452:	4b2a      	ldr	r3, [pc, #168]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c456:	0a5b      	lsrs	r3, r3, #9
 800c458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c45c:	ee07 3a90 	vmov	s15, r3
 800c460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c46c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c478:	ee17 2a90 	vmov	r2, s15
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c480:	4b1e      	ldr	r3, [pc, #120]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c484:	0c1b      	lsrs	r3, r3, #16
 800c486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c48a:	ee07 3a90 	vmov	s15, r3
 800c48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c49a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c49e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a6:	ee17 2a90 	vmov	r2, s15
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c4ae:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b2:	0e1b      	lsrs	r3, r3, #24
 800c4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4b8:	ee07 3a90 	vmov	s15, r3
 800c4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d4:	ee17 2a90 	vmov	r2, s15
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c4dc:	e008      	b.n	800c4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	609a      	str	r2, [r3, #8]
}
 800c4f0:	bf00      	nop
 800c4f2:	3724      	adds	r7, #36	; 0x24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	58024400 	.word	0x58024400
 800c500:	03d09000 	.word	0x03d09000
 800c504:	46000000 	.word	0x46000000
 800c508:	4c742400 	.word	0x4c742400
 800c50c:	4a742400 	.word	0x4a742400
 800c510:	4b189680 	.word	0x4b189680

0800c514 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800c51c:	4b26      	ldr	r3, [pc, #152]	; (800c5b8 <HAL_RCCEx_CRSConfig+0xa4>)
 800c51e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c522:	4a25      	ldr	r2, [pc, #148]	; (800c5b8 <HAL_RCCEx_CRSConfig+0xa4>)
 800c524:	f043 0302 	orr.w	r3, r3, #2
 800c528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800c52c:	4b22      	ldr	r3, [pc, #136]	; (800c5b8 <HAL_RCCEx_CRSConfig+0xa4>)
 800c52e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c532:	4a21      	ldr	r2, [pc, #132]	; (800c5b8 <HAL_RCCEx_CRSConfig+0xa4>)
 800c534:	f023 0302 	bic.w	r3, r3, #2
 800c538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800c53c:	f7f6 ff50 	bl	80033e0 <HAL_GetREVID>
 800c540:	4603      	mov	r3, r0
 800c542:	f241 0203 	movw	r2, #4099	; 0x1003
 800c546:	4293      	cmp	r3, r2
 800c548:	d80b      	bhi.n	800c562 <HAL_RCCEx_CRSConfig+0x4e>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c552:	d106      	bne.n	800c562 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	e008      	b.n	800c574 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	041b      	lsls	r3, r3, #16
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4313      	orrs	r3, r2
 800c588:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800c58a:	4a0c      	ldr	r2, [pc, #48]	; (800c5bc <HAL_RCCEx_CRSConfig+0xa8>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800c590:	4b0a      	ldr	r3, [pc, #40]	; (800c5bc <HAL_RCCEx_CRSConfig+0xa8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	4907      	ldr	r1, [pc, #28]	; (800c5bc <HAL_RCCEx_CRSConfig+0xa8>)
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800c5a4:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <HAL_RCCEx_CRSConfig+0xa8>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a04      	ldr	r2, [pc, #16]	; (800c5bc <HAL_RCCEx_CRSConfig+0xa8>)
 800c5aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c5ae:	6013      	str	r3, [r2, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	58024400 	.word	0x58024400
 800c5bc:	40008400 	.word	0x40008400

0800c5c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5ce:	4b53      	ldr	r3, [pc, #332]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d2:	f003 0303 	and.w	r3, r3, #3
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d101      	bne.n	800c5de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e099      	b.n	800c712 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5de:	4b4f      	ldr	r3, [pc, #316]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a4e      	ldr	r2, [pc, #312]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c5e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ea:	f7f6 fec9 	bl	8003380 <HAL_GetTick>
 800c5ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5f0:	e008      	b.n	800c604 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5f2:	f7f6 fec5 	bl	8003380 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e086      	b.n	800c712 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c604:	4b45      	ldr	r3, [pc, #276]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1f0      	bne.n	800c5f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c610:	4b42      	ldr	r3, [pc, #264]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c614:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	031b      	lsls	r3, r3, #12
 800c61e:	493f      	ldr	r1, [pc, #252]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c620:	4313      	orrs	r3, r2
 800c622:	628b      	str	r3, [r1, #40]	; 0x28
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	3b01      	subs	r3, #1
 800c62a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	3b01      	subs	r3, #1
 800c634:	025b      	lsls	r3, r3, #9
 800c636:	b29b      	uxth	r3, r3
 800c638:	431a      	orrs	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	3b01      	subs	r3, #1
 800c640:	041b      	lsls	r3, r3, #16
 800c642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c646:	431a      	orrs	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	061b      	lsls	r3, r3, #24
 800c650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c654:	4931      	ldr	r1, [pc, #196]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c656:	4313      	orrs	r3, r2
 800c658:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c65a:	4b30      	ldr	r3, [pc, #192]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	492d      	ldr	r1, [pc, #180]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c668:	4313      	orrs	r3, r2
 800c66a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c66c:	4b2b      	ldr	r3, [pc, #172]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	f023 0220 	bic.w	r2, r3, #32
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	4928      	ldr	r1, [pc, #160]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c67a:	4313      	orrs	r3, r2
 800c67c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c67e:	4b27      	ldr	r3, [pc, #156]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c682:	4a26      	ldr	r2, [pc, #152]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c684:	f023 0310 	bic.w	r3, r3, #16
 800c688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c68a:	4b24      	ldr	r3, [pc, #144]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c68c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c68e:	4b24      	ldr	r3, [pc, #144]	; (800c720 <RCCEx_PLL2_Config+0x160>)
 800c690:	4013      	ands	r3, r2
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	69d2      	ldr	r2, [r2, #28]
 800c696:	00d2      	lsls	r2, r2, #3
 800c698:	4920      	ldr	r1, [pc, #128]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c69e:	4b1f      	ldr	r3, [pc, #124]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a2:	4a1e      	ldr	r2, [pc, #120]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6a4:	f043 0310 	orr.w	r3, r3, #16
 800c6a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d106      	bne.n	800c6be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6b0:	4b1a      	ldr	r3, [pc, #104]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	4a19      	ldr	r2, [pc, #100]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6bc:	e00f      	b.n	800c6de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d106      	bne.n	800c6d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6c4:	4b15      	ldr	r3, [pc, #84]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	4a14      	ldr	r2, [pc, #80]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6d0:	e005      	b.n	800c6de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6d2:	4b12      	ldr	r3, [pc, #72]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d6:	4a11      	ldr	r2, [pc, #68]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6de:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a0e      	ldr	r2, [pc, #56]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c6e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ea:	f7f6 fe49 	bl	8003380 <HAL_GetTick>
 800c6ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6f0:	e008      	b.n	800c704 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6f2:	f7f6 fe45 	bl	8003380 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e006      	b.n	800c712 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <RCCEx_PLL2_Config+0x15c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0f0      	beq.n	800c6f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	58024400 	.word	0x58024400
 800c720:	ffff0007 	.word	0xffff0007

0800c724 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c732:	4b53      	ldr	r3, [pc, #332]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c736:	f003 0303 	and.w	r3, r3, #3
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d101      	bne.n	800c742 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e099      	b.n	800c876 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c742:	4b4f      	ldr	r3, [pc, #316]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a4e      	ldr	r2, [pc, #312]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c74c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c74e:	f7f6 fe17 	bl	8003380 <HAL_GetTick>
 800c752:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c754:	e008      	b.n	800c768 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c756:	f7f6 fe13 	bl	8003380 <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	2b02      	cmp	r3, #2
 800c762:	d901      	bls.n	800c768 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e086      	b.n	800c876 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c768:	4b45      	ldr	r3, [pc, #276]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1f0      	bne.n	800c756 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c774:	4b42      	ldr	r3, [pc, #264]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	051b      	lsls	r3, r3, #20
 800c782:	493f      	ldr	r1, [pc, #252]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c784:	4313      	orrs	r3, r2
 800c786:	628b      	str	r3, [r1, #40]	; 0x28
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	3b01      	subs	r3, #1
 800c798:	025b      	lsls	r3, r3, #9
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	431a      	orrs	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	041b      	lsls	r3, r3, #16
 800c7a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	061b      	lsls	r3, r3, #24
 800c7b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7b8:	4931      	ldr	r1, [pc, #196]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7be:	4b30      	ldr	r3, [pc, #192]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	492d      	ldr	r1, [pc, #180]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7d0:	4b2b      	ldr	r3, [pc, #172]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	699b      	ldr	r3, [r3, #24]
 800c7dc:	4928      	ldr	r1, [pc, #160]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7e2:	4b27      	ldr	r3, [pc, #156]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e6:	4a26      	ldr	r2, [pc, #152]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7ee:	4b24      	ldr	r3, [pc, #144]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7f2:	4b24      	ldr	r3, [pc, #144]	; (800c884 <RCCEx_PLL3_Config+0x160>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	69d2      	ldr	r2, [r2, #28]
 800c7fa:	00d2      	lsls	r2, r2, #3
 800c7fc:	4920      	ldr	r1, [pc, #128]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c7fe:	4313      	orrs	r3, r2
 800c800:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c802:	4b1f      	ldr	r3, [pc, #124]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	4a1e      	ldr	r2, [pc, #120]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c80c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c814:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c818:	4a19      	ldr	r2, [pc, #100]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c81a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c820:	e00f      	b.n	800c842 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d106      	bne.n	800c836 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c828:	4b15      	ldr	r3, [pc, #84]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	4a14      	ldr	r2, [pc, #80]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c82e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c832:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c834:	e005      	b.n	800c842 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c836:	4b12      	ldr	r3, [pc, #72]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83a:	4a11      	ldr	r2, [pc, #68]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c83c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c842:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a0e      	ldr	r2, [pc, #56]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c84e:	f7f6 fd97 	bl	8003380 <HAL_GetTick>
 800c852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c854:	e008      	b.n	800c868 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c856:	f7f6 fd93 	bl	8003380 <HAL_GetTick>
 800c85a:	4602      	mov	r2, r0
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	2b02      	cmp	r3, #2
 800c862:	d901      	bls.n	800c868 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e006      	b.n	800c876 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c868:	4b05      	ldr	r3, [pc, #20]	; (800c880 <RCCEx_PLL3_Config+0x15c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0f0      	beq.n	800c856 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	58024400 	.word	0x58024400
 800c884:	ffff0007 	.word	0xffff0007

0800c888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e049      	b.n	800c92e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f6 f85c 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f000 f92e 	bl	800cb28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d101      	bne.n	800c954 <HAL_TIM_ConfigClockSource+0x1c>
 800c950:	2302      	movs	r3, #2
 800c952:	e0dc      	b.n	800cb0e <HAL_TIM_ConfigClockSource+0x1d6>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	4b6a      	ldr	r3, [pc, #424]	; (800cb18 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c970:	4013      	ands	r3, r2
 800c972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c97a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a64      	ldr	r2, [pc, #400]	; (800cb1c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	f000 80a9 	beq.w	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c990:	4a62      	ldr	r2, [pc, #392]	; (800cb1c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c992:	4293      	cmp	r3, r2
 800c994:	f200 80ae 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c998:	4a61      	ldr	r2, [pc, #388]	; (800cb20 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	f000 80a1 	beq.w	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9a0:	4a5f      	ldr	r2, [pc, #380]	; (800cb20 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	f200 80a6 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9a8:	4a5e      	ldr	r2, [pc, #376]	; (800cb24 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	f000 8099 	beq.w	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b0:	4a5c      	ldr	r2, [pc, #368]	; (800cb24 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	f200 809e 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c9bc:	f000 8091 	beq.w	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c9c4:	f200 8096 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9cc:	f000 8089 	beq.w	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9d4:	f200 808e 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9dc:	d03e      	beq.n	800ca5c <HAL_TIM_ConfigClockSource+0x124>
 800c9de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9e2:	f200 8087 	bhi.w	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ea:	f000 8086 	beq.w	800cafa <HAL_TIM_ConfigClockSource+0x1c2>
 800c9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f2:	d87f      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9f4:	2b70      	cmp	r3, #112	; 0x70
 800c9f6:	d01a      	beq.n	800ca2e <HAL_TIM_ConfigClockSource+0xf6>
 800c9f8:	2b70      	cmp	r3, #112	; 0x70
 800c9fa:	d87b      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9fc:	2b60      	cmp	r3, #96	; 0x60
 800c9fe:	d050      	beq.n	800caa2 <HAL_TIM_ConfigClockSource+0x16a>
 800ca00:	2b60      	cmp	r3, #96	; 0x60
 800ca02:	d877      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca04:	2b50      	cmp	r3, #80	; 0x50
 800ca06:	d03c      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x14a>
 800ca08:	2b50      	cmp	r3, #80	; 0x50
 800ca0a:	d873      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca0c:	2b40      	cmp	r3, #64	; 0x40
 800ca0e:	d058      	beq.n	800cac2 <HAL_TIM_ConfigClockSource+0x18a>
 800ca10:	2b40      	cmp	r3, #64	; 0x40
 800ca12:	d86f      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca14:	2b30      	cmp	r3, #48	; 0x30
 800ca16:	d064      	beq.n	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca18:	2b30      	cmp	r3, #48	; 0x30
 800ca1a:	d86b      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca1c:	2b20      	cmp	r3, #32
 800ca1e:	d060      	beq.n	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	d867      	bhi.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d05c      	beq.n	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca28:	2b10      	cmp	r3, #16
 800ca2a:	d05a      	beq.n	800cae2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca2c:	e062      	b.n	800caf4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca3e:	f000 f98b 	bl	800cd58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	609a      	str	r2, [r3, #8]
      break;
 800ca5a:	e04f      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca6c:	f000 f974 	bl	800cd58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca7e:	609a      	str	r2, [r3, #8]
      break;
 800ca80:	e03c      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca8e:	461a      	mov	r2, r3
 800ca90:	f000 f8e4 	bl	800cc5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2150      	movs	r1, #80	; 0x50
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 f93e 	bl	800cd1c <TIM_ITRx_SetConfig>
      break;
 800caa0:	e02c      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800caae:	461a      	mov	r2, r3
 800cab0:	f000 f903 	bl	800ccba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2160      	movs	r1, #96	; 0x60
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f92e 	bl	800cd1c <TIM_ITRx_SetConfig>
      break;
 800cac0:	e01c      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cace:	461a      	mov	r2, r3
 800cad0:	f000 f8c4 	bl	800cc5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2140      	movs	r1, #64	; 0x40
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 f91e 	bl	800cd1c <TIM_ITRx_SetConfig>
      break;
 800cae0:	e00c      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4619      	mov	r1, r3
 800caec:	4610      	mov	r0, r2
 800caee:	f000 f915 	bl	800cd1c <TIM_ITRx_SetConfig>
      break;
 800caf2:	e003      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	73fb      	strb	r3, [r7, #15]
      break;
 800caf8:	e000      	b.n	800cafc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cafa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	ffceff88 	.word	0xffceff88
 800cb1c:	00100040 	.word	0x00100040
 800cb20:	00100030 	.word	0x00100030
 800cb24:	00100020 	.word	0x00100020

0800cb28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a40      	ldr	r2, [pc, #256]	; (800cc3c <TIM_Base_SetConfig+0x114>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d013      	beq.n	800cb68 <TIM_Base_SetConfig+0x40>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb46:	d00f      	beq.n	800cb68 <TIM_Base_SetConfig+0x40>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a3d      	ldr	r2, [pc, #244]	; (800cc40 <TIM_Base_SetConfig+0x118>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00b      	beq.n	800cb68 <TIM_Base_SetConfig+0x40>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a3c      	ldr	r2, [pc, #240]	; (800cc44 <TIM_Base_SetConfig+0x11c>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d007      	beq.n	800cb68 <TIM_Base_SetConfig+0x40>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a3b      	ldr	r2, [pc, #236]	; (800cc48 <TIM_Base_SetConfig+0x120>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d003      	beq.n	800cb68 <TIM_Base_SetConfig+0x40>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a3a      	ldr	r2, [pc, #232]	; (800cc4c <TIM_Base_SetConfig+0x124>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d108      	bne.n	800cb7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	4313      	orrs	r3, r2
 800cb78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a2f      	ldr	r2, [pc, #188]	; (800cc3c <TIM_Base_SetConfig+0x114>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d01f      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb88:	d01b      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a2c      	ldr	r2, [pc, #176]	; (800cc40 <TIM_Base_SetConfig+0x118>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d017      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a2b      	ldr	r2, [pc, #172]	; (800cc44 <TIM_Base_SetConfig+0x11c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d013      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a2a      	ldr	r2, [pc, #168]	; (800cc48 <TIM_Base_SetConfig+0x120>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d00f      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a29      	ldr	r2, [pc, #164]	; (800cc4c <TIM_Base_SetConfig+0x124>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00b      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a28      	ldr	r2, [pc, #160]	; (800cc50 <TIM_Base_SetConfig+0x128>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d007      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a27      	ldr	r2, [pc, #156]	; (800cc54 <TIM_Base_SetConfig+0x12c>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d003      	beq.n	800cbc2 <TIM_Base_SetConfig+0x9a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a26      	ldr	r2, [pc, #152]	; (800cc58 <TIM_Base_SetConfig+0x130>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d108      	bne.n	800cbd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a10      	ldr	r2, [pc, #64]	; (800cc3c <TIM_Base_SetConfig+0x114>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d00f      	beq.n	800cc20 <TIM_Base_SetConfig+0xf8>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a12      	ldr	r2, [pc, #72]	; (800cc4c <TIM_Base_SetConfig+0x124>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d00b      	beq.n	800cc20 <TIM_Base_SetConfig+0xf8>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a11      	ldr	r2, [pc, #68]	; (800cc50 <TIM_Base_SetConfig+0x128>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d007      	beq.n	800cc20 <TIM_Base_SetConfig+0xf8>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a10      	ldr	r2, [pc, #64]	; (800cc54 <TIM_Base_SetConfig+0x12c>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d003      	beq.n	800cc20 <TIM_Base_SetConfig+0xf8>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a0f      	ldr	r2, [pc, #60]	; (800cc58 <TIM_Base_SetConfig+0x130>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d103      	bne.n	800cc28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	615a      	str	r2, [r3, #20]
}
 800cc2e:	bf00      	nop
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	40010000 	.word	0x40010000
 800cc40:	40000400 	.word	0x40000400
 800cc44:	40000800 	.word	0x40000800
 800cc48:	40000c00 	.word	0x40000c00
 800cc4c:	40010400 	.word	0x40010400
 800cc50:	40014000 	.word	0x40014000
 800cc54:	40014400 	.word	0x40014400
 800cc58:	40014800 	.word	0x40014800

0800cc5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	f023 0201 	bic.w	r2, r3, #1
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f023 030a 	bic.w	r3, r3, #10
 800cc98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	621a      	str	r2, [r3, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	371c      	adds	r7, #28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b087      	sub	sp, #28
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	f023 0210 	bic.w	r2, r3, #16
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	031b      	lsls	r3, r3, #12
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	621a      	str	r2, [r3, #32]
}
 800cd0e:	bf00      	nop
 800cd10:	371c      	adds	r7, #28
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
	...

0800cd1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <TIM_ITRx_SetConfig+0x38>)
 800cd30:	4013      	ands	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	f043 0307 	orr.w	r3, r3, #7
 800cd3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	609a      	str	r2, [r3, #8]
}
 800cd46:	bf00      	nop
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	ffcfff8f 	.word	0xffcfff8f

0800cd58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	021a      	lsls	r2, r3, #8
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	609a      	str	r2, [r3, #8]
}
 800cd8c:	bf00      	nop
 800cd8e:	371c      	adds	r7, #28
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d101      	bne.n	800cdb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdac:	2302      	movs	r3, #2
 800cdae:	e06d      	b.n	800ce8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2202      	movs	r2, #2
 800cdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a30      	ldr	r2, [pc, #192]	; (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d004      	beq.n	800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a2f      	ldr	r2, [pc, #188]	; (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d108      	bne.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a20      	ldr	r2, [pc, #128]	; (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d022      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce22:	d01d      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a1d      	ldr	r2, [pc, #116]	; (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d018      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a1c      	ldr	r2, [pc, #112]	; (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d013      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a1a      	ldr	r2, [pc, #104]	; (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d00e      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a15      	ldr	r2, [pc, #84]	; (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d009      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a16      	ldr	r2, [pc, #88]	; (800ceac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d004      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a15      	ldr	r2, [pc, #84]	; (800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10c      	bne.n	800ce7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	40010000 	.word	0x40010000
 800ce9c:	40010400 	.word	0x40010400
 800cea0:	40000400 	.word	0x40000400
 800cea4:	40000800 	.word	0x40000800
 800cea8:	40000c00 	.word	0x40000c00
 800ceac:	40001800 	.word	0x40001800
 800ceb0:	40014000 	.word	0x40014000

0800ceb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e042      	b.n	800cf4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d106      	bne.n	800cede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7f5 fd81 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2224      	movs	r2, #36	; 0x24
 800cee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f022 0201 	bic.w	r2, r2, #1
 800cef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f8ba 	bl	800d070 <UART_SetConfig>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d101      	bne.n	800cf06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e022      	b.n	800cf4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fe16 	bl	800db40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	689a      	ldr	r2, [r3, #8]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f042 0201 	orr.w	r2, r2, #1
 800cf42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fe9d 	bl	800dc84 <UART_CheckIdleState>
 800cf4a:	4603      	mov	r3, r0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	4613      	mov	r3, r2
 800cf62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d17b      	bne.n	800d066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <HAL_UART_Transmit+0x26>
 800cf74:	88fb      	ldrh	r3, [r7, #6]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e074      	b.n	800d068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2221      	movs	r2, #33	; 0x21
 800cf8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf8e:	f7f6 f9f7 	bl	8003380 <HAL_GetTick>
 800cf92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	88fa      	ldrh	r2, [r7, #6]
 800cf98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	88fa      	ldrh	r2, [r7, #6]
 800cfa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfac:	d108      	bne.n	800cfc0 <HAL_UART_Transmit+0x6c>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d104      	bne.n	800cfc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	61bb      	str	r3, [r7, #24]
 800cfbe:	e003      	b.n	800cfc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cfc8:	e030      	b.n	800d02c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2180      	movs	r1, #128	; 0x80
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 feff 	bl	800ddd8 <UART_WaitOnFlagUntilTimeout>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d005      	beq.n	800cfec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e03d      	b.n	800d068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	3302      	adds	r3, #2
 800d006:	61bb      	str	r3, [r7, #24]
 800d008:	e007      	b.n	800d01a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	781a      	ldrb	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	3301      	adds	r3, #1
 800d018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d020:	b29b      	uxth	r3, r3
 800d022:	3b01      	subs	r3, #1
 800d024:	b29a      	uxth	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d032:	b29b      	uxth	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1c8      	bne.n	800cfca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2200      	movs	r2, #0
 800d040:	2140      	movs	r1, #64	; 0x40
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f000 fec8 	bl	800ddd8 <UART_WaitOnFlagUntilTimeout>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2220      	movs	r2, #32
 800d052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	e006      	b.n	800d068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	e000      	b.n	800d068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d066:	2302      	movs	r3, #2
  }
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3720      	adds	r7, #32
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d074:	b092      	sub	sp, #72	; 0x48
 800d076:	af00      	add	r7, sp, #0
 800d078:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	431a      	orrs	r2, r3
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	431a      	orrs	r2, r3
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	69db      	ldr	r3, [r3, #28]
 800d094:	4313      	orrs	r3, r2
 800d096:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	4bbe      	ldr	r3, [pc, #760]	; (800d398 <UART_SetConfig+0x328>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	6812      	ldr	r2, [r2, #0]
 800d0a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0a8:	430b      	orrs	r3, r1
 800d0aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	699b      	ldr	r3, [r3, #24]
 800d0c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4ab3      	ldr	r2, [pc, #716]	; (800d39c <UART_SetConfig+0x32c>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d004      	beq.n	800d0dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	6a1b      	ldr	r3, [r3, #32]
 800d0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	4baf      	ldr	r3, [pc, #700]	; (800d3a0 <UART_SetConfig+0x330>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0ec:	430b      	orrs	r3, r1
 800d0ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f6:	f023 010f 	bic.w	r1, r3, #15
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	430a      	orrs	r2, r1
 800d104:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4aa6      	ldr	r2, [pc, #664]	; (800d3a4 <UART_SetConfig+0x334>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d177      	bne.n	800d200 <UART_SetConfig+0x190>
 800d110:	4ba5      	ldr	r3, [pc, #660]	; (800d3a8 <UART_SetConfig+0x338>)
 800d112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d118:	2b28      	cmp	r3, #40	; 0x28
 800d11a:	d86d      	bhi.n	800d1f8 <UART_SetConfig+0x188>
 800d11c:	a201      	add	r2, pc, #4	; (adr r2, 800d124 <UART_SetConfig+0xb4>)
 800d11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d122:	bf00      	nop
 800d124:	0800d1c9 	.word	0x0800d1c9
 800d128:	0800d1f9 	.word	0x0800d1f9
 800d12c:	0800d1f9 	.word	0x0800d1f9
 800d130:	0800d1f9 	.word	0x0800d1f9
 800d134:	0800d1f9 	.word	0x0800d1f9
 800d138:	0800d1f9 	.word	0x0800d1f9
 800d13c:	0800d1f9 	.word	0x0800d1f9
 800d140:	0800d1f9 	.word	0x0800d1f9
 800d144:	0800d1d1 	.word	0x0800d1d1
 800d148:	0800d1f9 	.word	0x0800d1f9
 800d14c:	0800d1f9 	.word	0x0800d1f9
 800d150:	0800d1f9 	.word	0x0800d1f9
 800d154:	0800d1f9 	.word	0x0800d1f9
 800d158:	0800d1f9 	.word	0x0800d1f9
 800d15c:	0800d1f9 	.word	0x0800d1f9
 800d160:	0800d1f9 	.word	0x0800d1f9
 800d164:	0800d1d9 	.word	0x0800d1d9
 800d168:	0800d1f9 	.word	0x0800d1f9
 800d16c:	0800d1f9 	.word	0x0800d1f9
 800d170:	0800d1f9 	.word	0x0800d1f9
 800d174:	0800d1f9 	.word	0x0800d1f9
 800d178:	0800d1f9 	.word	0x0800d1f9
 800d17c:	0800d1f9 	.word	0x0800d1f9
 800d180:	0800d1f9 	.word	0x0800d1f9
 800d184:	0800d1e1 	.word	0x0800d1e1
 800d188:	0800d1f9 	.word	0x0800d1f9
 800d18c:	0800d1f9 	.word	0x0800d1f9
 800d190:	0800d1f9 	.word	0x0800d1f9
 800d194:	0800d1f9 	.word	0x0800d1f9
 800d198:	0800d1f9 	.word	0x0800d1f9
 800d19c:	0800d1f9 	.word	0x0800d1f9
 800d1a0:	0800d1f9 	.word	0x0800d1f9
 800d1a4:	0800d1e9 	.word	0x0800d1e9
 800d1a8:	0800d1f9 	.word	0x0800d1f9
 800d1ac:	0800d1f9 	.word	0x0800d1f9
 800d1b0:	0800d1f9 	.word	0x0800d1f9
 800d1b4:	0800d1f9 	.word	0x0800d1f9
 800d1b8:	0800d1f9 	.word	0x0800d1f9
 800d1bc:	0800d1f9 	.word	0x0800d1f9
 800d1c0:	0800d1f9 	.word	0x0800d1f9
 800d1c4:	0800d1f1 	.word	0x0800d1f1
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ce:	e222      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d6:	e21e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1d8:	2308      	movs	r3, #8
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1de:	e21a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1e0:	2310      	movs	r3, #16
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e6:	e216      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1e8:	2320      	movs	r3, #32
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ee:	e212      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1f0:	2340      	movs	r3, #64	; 0x40
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f6:	e20e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d1f8:	2380      	movs	r3, #128	; 0x80
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fe:	e20a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a69      	ldr	r2, [pc, #420]	; (800d3ac <UART_SetConfig+0x33c>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d130      	bne.n	800d26c <UART_SetConfig+0x1fc>
 800d20a:	4b67      	ldr	r3, [pc, #412]	; (800d3a8 <UART_SetConfig+0x338>)
 800d20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	2b05      	cmp	r3, #5
 800d214:	d826      	bhi.n	800d264 <UART_SetConfig+0x1f4>
 800d216:	a201      	add	r2, pc, #4	; (adr r2, 800d21c <UART_SetConfig+0x1ac>)
 800d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21c:	0800d235 	.word	0x0800d235
 800d220:	0800d23d 	.word	0x0800d23d
 800d224:	0800d245 	.word	0x0800d245
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d255 	.word	0x0800d255
 800d230:	0800d25d 	.word	0x0800d25d
 800d234:	2300      	movs	r3, #0
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e1ec      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d23c:	2304      	movs	r3, #4
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e1e8      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d244:	2308      	movs	r3, #8
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e1e4      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d24c:	2310      	movs	r3, #16
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e1e0      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d254:	2320      	movs	r3, #32
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e1dc      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e1d8      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e1d4      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a4f      	ldr	r2, [pc, #316]	; (800d3b0 <UART_SetConfig+0x340>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d130      	bne.n	800d2d8 <UART_SetConfig+0x268>
 800d276:	4b4c      	ldr	r3, [pc, #304]	; (800d3a8 <UART_SetConfig+0x338>)
 800d278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d826      	bhi.n	800d2d0 <UART_SetConfig+0x260>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <UART_SetConfig+0x218>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d2a1 	.word	0x0800d2a1
 800d28c:	0800d2a9 	.word	0x0800d2a9
 800d290:	0800d2b1 	.word	0x0800d2b1
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2c1 	.word	0x0800d2c1
 800d29c:	0800d2c9 	.word	0x0800d2c9
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e1b6      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2a8:	2304      	movs	r3, #4
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e1b2      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e1ae      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2b8:	2310      	movs	r3, #16
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e1aa      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e1a6      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e1a2      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2d0:	2380      	movs	r3, #128	; 0x80
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e19e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a35      	ldr	r2, [pc, #212]	; (800d3b4 <UART_SetConfig+0x344>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d130      	bne.n	800d344 <UART_SetConfig+0x2d4>
 800d2e2:	4b31      	ldr	r3, [pc, #196]	; (800d3a8 <UART_SetConfig+0x338>)
 800d2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	2b05      	cmp	r3, #5
 800d2ec:	d826      	bhi.n	800d33c <UART_SetConfig+0x2cc>
 800d2ee:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <UART_SetConfig+0x284>)
 800d2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f4:	0800d30d 	.word	0x0800d30d
 800d2f8:	0800d315 	.word	0x0800d315
 800d2fc:	0800d31d 	.word	0x0800d31d
 800d300:	0800d325 	.word	0x0800d325
 800d304:	0800d32d 	.word	0x0800d32d
 800d308:	0800d335 	.word	0x0800d335
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e180      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d314:	2304      	movs	r3, #4
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e17c      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d31c:	2308      	movs	r3, #8
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e178      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d324:	2310      	movs	r3, #16
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e174      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d32c:	2320      	movs	r3, #32
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e170      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d334:	2340      	movs	r3, #64	; 0x40
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e16c      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d33c:	2380      	movs	r3, #128	; 0x80
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e168      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a1b      	ldr	r2, [pc, #108]	; (800d3b8 <UART_SetConfig+0x348>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d142      	bne.n	800d3d4 <UART_SetConfig+0x364>
 800d34e:	4b16      	ldr	r3, [pc, #88]	; (800d3a8 <UART_SetConfig+0x338>)
 800d350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d352:	f003 0307 	and.w	r3, r3, #7
 800d356:	2b05      	cmp	r3, #5
 800d358:	d838      	bhi.n	800d3cc <UART_SetConfig+0x35c>
 800d35a:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <UART_SetConfig+0x2f0>)
 800d35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d360:	0800d379 	.word	0x0800d379
 800d364:	0800d381 	.word	0x0800d381
 800d368:	0800d389 	.word	0x0800d389
 800d36c:	0800d391 	.word	0x0800d391
 800d370:	0800d3bd 	.word	0x0800d3bd
 800d374:	0800d3c5 	.word	0x0800d3c5
 800d378:	2300      	movs	r3, #0
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37e:	e14a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d380:	2304      	movs	r3, #4
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d386:	e146      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d388:	2308      	movs	r3, #8
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e142      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d390:	2310      	movs	r3, #16
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e13e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d398:	cfff69f3 	.word	0xcfff69f3
 800d39c:	58000c00 	.word	0x58000c00
 800d3a0:	11fff4ff 	.word	0x11fff4ff
 800d3a4:	40011000 	.word	0x40011000
 800d3a8:	58024400 	.word	0x58024400
 800d3ac:	40004400 	.word	0x40004400
 800d3b0:	40004800 	.word	0x40004800
 800d3b4:	40004c00 	.word	0x40004c00
 800d3b8:	40005000 	.word	0x40005000
 800d3bc:	2320      	movs	r3, #32
 800d3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c2:	e128      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d3c4:	2340      	movs	r3, #64	; 0x40
 800d3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ca:	e124      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d3cc:	2380      	movs	r3, #128	; 0x80
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d2:	e120      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4acb      	ldr	r2, [pc, #812]	; (800d708 <UART_SetConfig+0x698>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d176      	bne.n	800d4cc <UART_SetConfig+0x45c>
 800d3de:	4bcb      	ldr	r3, [pc, #812]	; (800d70c <UART_SetConfig+0x69c>)
 800d3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3e6:	2b28      	cmp	r3, #40	; 0x28
 800d3e8:	d86c      	bhi.n	800d4c4 <UART_SetConfig+0x454>
 800d3ea:	a201      	add	r2, pc, #4	; (adr r2, 800d3f0 <UART_SetConfig+0x380>)
 800d3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f0:	0800d495 	.word	0x0800d495
 800d3f4:	0800d4c5 	.word	0x0800d4c5
 800d3f8:	0800d4c5 	.word	0x0800d4c5
 800d3fc:	0800d4c5 	.word	0x0800d4c5
 800d400:	0800d4c5 	.word	0x0800d4c5
 800d404:	0800d4c5 	.word	0x0800d4c5
 800d408:	0800d4c5 	.word	0x0800d4c5
 800d40c:	0800d4c5 	.word	0x0800d4c5
 800d410:	0800d49d 	.word	0x0800d49d
 800d414:	0800d4c5 	.word	0x0800d4c5
 800d418:	0800d4c5 	.word	0x0800d4c5
 800d41c:	0800d4c5 	.word	0x0800d4c5
 800d420:	0800d4c5 	.word	0x0800d4c5
 800d424:	0800d4c5 	.word	0x0800d4c5
 800d428:	0800d4c5 	.word	0x0800d4c5
 800d42c:	0800d4c5 	.word	0x0800d4c5
 800d430:	0800d4a5 	.word	0x0800d4a5
 800d434:	0800d4c5 	.word	0x0800d4c5
 800d438:	0800d4c5 	.word	0x0800d4c5
 800d43c:	0800d4c5 	.word	0x0800d4c5
 800d440:	0800d4c5 	.word	0x0800d4c5
 800d444:	0800d4c5 	.word	0x0800d4c5
 800d448:	0800d4c5 	.word	0x0800d4c5
 800d44c:	0800d4c5 	.word	0x0800d4c5
 800d450:	0800d4ad 	.word	0x0800d4ad
 800d454:	0800d4c5 	.word	0x0800d4c5
 800d458:	0800d4c5 	.word	0x0800d4c5
 800d45c:	0800d4c5 	.word	0x0800d4c5
 800d460:	0800d4c5 	.word	0x0800d4c5
 800d464:	0800d4c5 	.word	0x0800d4c5
 800d468:	0800d4c5 	.word	0x0800d4c5
 800d46c:	0800d4c5 	.word	0x0800d4c5
 800d470:	0800d4b5 	.word	0x0800d4b5
 800d474:	0800d4c5 	.word	0x0800d4c5
 800d478:	0800d4c5 	.word	0x0800d4c5
 800d47c:	0800d4c5 	.word	0x0800d4c5
 800d480:	0800d4c5 	.word	0x0800d4c5
 800d484:	0800d4c5 	.word	0x0800d4c5
 800d488:	0800d4c5 	.word	0x0800d4c5
 800d48c:	0800d4c5 	.word	0x0800d4c5
 800d490:	0800d4bd 	.word	0x0800d4bd
 800d494:	2301      	movs	r3, #1
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49a:	e0bc      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d49c:	2304      	movs	r3, #4
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a2:	e0b8      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e0b4      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e0b0      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4b4:	2320      	movs	r3, #32
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e0ac      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4bc:	2340      	movs	r3, #64	; 0x40
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e0a8      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4c4:	2380      	movs	r3, #128	; 0x80
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e0a4      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a8f      	ldr	r2, [pc, #572]	; (800d710 <UART_SetConfig+0x6a0>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d130      	bne.n	800d538 <UART_SetConfig+0x4c8>
 800d4d6:	4b8d      	ldr	r3, [pc, #564]	; (800d70c <UART_SetConfig+0x69c>)
 800d4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4da:	f003 0307 	and.w	r3, r3, #7
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d826      	bhi.n	800d530 <UART_SetConfig+0x4c0>
 800d4e2:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <UART_SetConfig+0x478>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d501 	.word	0x0800d501
 800d4ec:	0800d509 	.word	0x0800d509
 800d4f0:	0800d511 	.word	0x0800d511
 800d4f4:	0800d519 	.word	0x0800d519
 800d4f8:	0800d521 	.word	0x0800d521
 800d4fc:	0800d529 	.word	0x0800d529
 800d500:	2300      	movs	r3, #0
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d506:	e086      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d508:	2304      	movs	r3, #4
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e082      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d510:	2308      	movs	r3, #8
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e07e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d518:	2310      	movs	r3, #16
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e07a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d520:	2320      	movs	r3, #32
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e076      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d528:	2340      	movs	r3, #64	; 0x40
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e072      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d530:	2380      	movs	r3, #128	; 0x80
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e06e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a75      	ldr	r2, [pc, #468]	; (800d714 <UART_SetConfig+0x6a4>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d130      	bne.n	800d5a4 <UART_SetConfig+0x534>
 800d542:	4b72      	ldr	r3, [pc, #456]	; (800d70c <UART_SetConfig+0x69c>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b05      	cmp	r3, #5
 800d54c:	d826      	bhi.n	800d59c <UART_SetConfig+0x52c>
 800d54e:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <UART_SetConfig+0x4e4>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d575 	.word	0x0800d575
 800d55c:	0800d57d 	.word	0x0800d57d
 800d560:	0800d585 	.word	0x0800d585
 800d564:	0800d58d 	.word	0x0800d58d
 800d568:	0800d595 	.word	0x0800d595
 800d56c:	2300      	movs	r3, #0
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d572:	e050      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d574:	2304      	movs	r3, #4
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e04c      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d57c:	2308      	movs	r3, #8
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e048      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d584:	2310      	movs	r3, #16
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e044      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d58c:	2320      	movs	r3, #32
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e040      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e03c      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d59c:	2380      	movs	r3, #128	; 0x80
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e038      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a5b      	ldr	r2, [pc, #364]	; (800d718 <UART_SetConfig+0x6a8>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d130      	bne.n	800d610 <UART_SetConfig+0x5a0>
 800d5ae:	4b57      	ldr	r3, [pc, #348]	; (800d70c <UART_SetConfig+0x69c>)
 800d5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b05      	cmp	r3, #5
 800d5b8:	d826      	bhi.n	800d608 <UART_SetConfig+0x598>
 800d5ba:	a201      	add	r2, pc, #4	; (adr r2, 800d5c0 <UART_SetConfig+0x550>)
 800d5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c0:	0800d5d9 	.word	0x0800d5d9
 800d5c4:	0800d5e1 	.word	0x0800d5e1
 800d5c8:	0800d5e9 	.word	0x0800d5e9
 800d5cc:	0800d5f1 	.word	0x0800d5f1
 800d5d0:	0800d5f9 	.word	0x0800d5f9
 800d5d4:	0800d601 	.word	0x0800d601
 800d5d8:	2302      	movs	r3, #2
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e01a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e016      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e012      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d5f0:	2310      	movs	r3, #16
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e00e      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d5f8:	2320      	movs	r3, #32
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e00a      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d600:	2340      	movs	r3, #64	; 0x40
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e006      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d608:	2380      	movs	r3, #128	; 0x80
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e002      	b.n	800d616 <UART_SetConfig+0x5a6>
 800d610:	2380      	movs	r3, #128	; 0x80
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a3f      	ldr	r2, [pc, #252]	; (800d718 <UART_SetConfig+0x6a8>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	f040 80f8 	bne.w	800d812 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d622:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d626:	2b20      	cmp	r3, #32
 800d628:	dc46      	bgt.n	800d6b8 <UART_SetConfig+0x648>
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	f2c0 8082 	blt.w	800d734 <UART_SetConfig+0x6c4>
 800d630:	3b02      	subs	r3, #2
 800d632:	2b1e      	cmp	r3, #30
 800d634:	d87e      	bhi.n	800d734 <UART_SetConfig+0x6c4>
 800d636:	a201      	add	r2, pc, #4	; (adr r2, 800d63c <UART_SetConfig+0x5cc>)
 800d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63c:	0800d6bf 	.word	0x0800d6bf
 800d640:	0800d735 	.word	0x0800d735
 800d644:	0800d6c7 	.word	0x0800d6c7
 800d648:	0800d735 	.word	0x0800d735
 800d64c:	0800d735 	.word	0x0800d735
 800d650:	0800d735 	.word	0x0800d735
 800d654:	0800d6d7 	.word	0x0800d6d7
 800d658:	0800d735 	.word	0x0800d735
 800d65c:	0800d735 	.word	0x0800d735
 800d660:	0800d735 	.word	0x0800d735
 800d664:	0800d735 	.word	0x0800d735
 800d668:	0800d735 	.word	0x0800d735
 800d66c:	0800d735 	.word	0x0800d735
 800d670:	0800d735 	.word	0x0800d735
 800d674:	0800d6e7 	.word	0x0800d6e7
 800d678:	0800d735 	.word	0x0800d735
 800d67c:	0800d735 	.word	0x0800d735
 800d680:	0800d735 	.word	0x0800d735
 800d684:	0800d735 	.word	0x0800d735
 800d688:	0800d735 	.word	0x0800d735
 800d68c:	0800d735 	.word	0x0800d735
 800d690:	0800d735 	.word	0x0800d735
 800d694:	0800d735 	.word	0x0800d735
 800d698:	0800d735 	.word	0x0800d735
 800d69c:	0800d735 	.word	0x0800d735
 800d6a0:	0800d735 	.word	0x0800d735
 800d6a4:	0800d735 	.word	0x0800d735
 800d6a8:	0800d735 	.word	0x0800d735
 800d6ac:	0800d735 	.word	0x0800d735
 800d6b0:	0800d735 	.word	0x0800d735
 800d6b4:	0800d727 	.word	0x0800d727
 800d6b8:	2b40      	cmp	r3, #64	; 0x40
 800d6ba:	d037      	beq.n	800d72c <UART_SetConfig+0x6bc>
 800d6bc:	e03a      	b.n	800d734 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d6be:	f7fe fb19 	bl	800bcf4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6c4:	e03c      	b.n	800d740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe fb28 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6d4:	e034      	b.n	800d740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6d6:	f107 0318 	add.w	r3, r7, #24
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe fc74 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6e4:	e02c      	b.n	800d740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6e6:	4b09      	ldr	r3, [pc, #36]	; (800d70c <UART_SetConfig+0x69c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f003 0320 	and.w	r3, r3, #32
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d016      	beq.n	800d720 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6f2:	4b06      	ldr	r3, [pc, #24]	; (800d70c <UART_SetConfig+0x69c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	08db      	lsrs	r3, r3, #3
 800d6f8:	f003 0303 	and.w	r3, r3, #3
 800d6fc:	4a07      	ldr	r2, [pc, #28]	; (800d71c <UART_SetConfig+0x6ac>)
 800d6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d704:	e01c      	b.n	800d740 <UART_SetConfig+0x6d0>
 800d706:	bf00      	nop
 800d708:	40011400 	.word	0x40011400
 800d70c:	58024400 	.word	0x58024400
 800d710:	40007800 	.word	0x40007800
 800d714:	40007c00 	.word	0x40007c00
 800d718:	58000c00 	.word	0x58000c00
 800d71c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d720:	4b9d      	ldr	r3, [pc, #628]	; (800d998 <UART_SetConfig+0x928>)
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d724:	e00c      	b.n	800d740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d726:	4b9d      	ldr	r3, [pc, #628]	; (800d99c <UART_SetConfig+0x92c>)
 800d728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d72a:	e009      	b.n	800d740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d732:	e005      	b.n	800d740 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d73e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d742:	2b00      	cmp	r3, #0
 800d744:	f000 81de 	beq.w	800db04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	4a94      	ldr	r2, [pc, #592]	; (800d9a0 <UART_SetConfig+0x930>)
 800d74e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d752:	461a      	mov	r2, r3
 800d754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d756:	fbb3 f3f2 	udiv	r3, r3, r2
 800d75a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	4613      	mov	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d768:	429a      	cmp	r2, r3
 800d76a:	d305      	bcc.n	800d778 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d774:	429a      	cmp	r2, r3
 800d776:	d903      	bls.n	800d780 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d77e:	e1c1      	b.n	800db04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d782:	2200      	movs	r2, #0
 800d784:	60bb      	str	r3, [r7, #8]
 800d786:	60fa      	str	r2, [r7, #12]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	4a84      	ldr	r2, [pc, #528]	; (800d9a0 <UART_SetConfig+0x930>)
 800d78e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d792:	b29b      	uxth	r3, r3
 800d794:	2200      	movs	r2, #0
 800d796:	603b      	str	r3, [r7, #0]
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d79e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7a2:	f7f3 fe85 	bl	80014b0 <__aeabi_uldivmod>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	f04f 0200 	mov.w	r2, #0
 800d7b2:	f04f 0300 	mov.w	r3, #0
 800d7b6:	020b      	lsls	r3, r1, #8
 800d7b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7bc:	0202      	lsls	r2, r0, #8
 800d7be:	6979      	ldr	r1, [r7, #20]
 800d7c0:	6849      	ldr	r1, [r1, #4]
 800d7c2:	0849      	lsrs	r1, r1, #1
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	eb12 0804 	adds.w	r8, r2, r4
 800d7ce:	eb43 0905 	adc.w	r9, r3, r5
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	469a      	mov	sl, r3
 800d7da:	4693      	mov	fp, r2
 800d7dc:	4652      	mov	r2, sl
 800d7de:	465b      	mov	r3, fp
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f3 fe64 	bl	80014b0 <__aeabi_uldivmod>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7f6:	d308      	bcc.n	800d80a <UART_SetConfig+0x79a>
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7fe:	d204      	bcs.n	800d80a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d806:	60da      	str	r2, [r3, #12]
 800d808:	e17c      	b.n	800db04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d810:	e178      	b.n	800db04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d81a:	f040 80c5 	bne.w	800d9a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d81e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d822:	2b20      	cmp	r3, #32
 800d824:	dc48      	bgt.n	800d8b8 <UART_SetConfig+0x848>
 800d826:	2b00      	cmp	r3, #0
 800d828:	db7b      	blt.n	800d922 <UART_SetConfig+0x8b2>
 800d82a:	2b20      	cmp	r3, #32
 800d82c:	d879      	bhi.n	800d922 <UART_SetConfig+0x8b2>
 800d82e:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <UART_SetConfig+0x7c4>)
 800d830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d834:	0800d8bf 	.word	0x0800d8bf
 800d838:	0800d8c7 	.word	0x0800d8c7
 800d83c:	0800d923 	.word	0x0800d923
 800d840:	0800d923 	.word	0x0800d923
 800d844:	0800d8cf 	.word	0x0800d8cf
 800d848:	0800d923 	.word	0x0800d923
 800d84c:	0800d923 	.word	0x0800d923
 800d850:	0800d923 	.word	0x0800d923
 800d854:	0800d8df 	.word	0x0800d8df
 800d858:	0800d923 	.word	0x0800d923
 800d85c:	0800d923 	.word	0x0800d923
 800d860:	0800d923 	.word	0x0800d923
 800d864:	0800d923 	.word	0x0800d923
 800d868:	0800d923 	.word	0x0800d923
 800d86c:	0800d923 	.word	0x0800d923
 800d870:	0800d923 	.word	0x0800d923
 800d874:	0800d8ef 	.word	0x0800d8ef
 800d878:	0800d923 	.word	0x0800d923
 800d87c:	0800d923 	.word	0x0800d923
 800d880:	0800d923 	.word	0x0800d923
 800d884:	0800d923 	.word	0x0800d923
 800d888:	0800d923 	.word	0x0800d923
 800d88c:	0800d923 	.word	0x0800d923
 800d890:	0800d923 	.word	0x0800d923
 800d894:	0800d923 	.word	0x0800d923
 800d898:	0800d923 	.word	0x0800d923
 800d89c:	0800d923 	.word	0x0800d923
 800d8a0:	0800d923 	.word	0x0800d923
 800d8a4:	0800d923 	.word	0x0800d923
 800d8a8:	0800d923 	.word	0x0800d923
 800d8ac:	0800d923 	.word	0x0800d923
 800d8b0:	0800d923 	.word	0x0800d923
 800d8b4:	0800d915 	.word	0x0800d915
 800d8b8:	2b40      	cmp	r3, #64	; 0x40
 800d8ba:	d02e      	beq.n	800d91a <UART_SetConfig+0x8aa>
 800d8bc:	e031      	b.n	800d922 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8be:	f7fc fa47 	bl	8009d50 <HAL_RCC_GetPCLK1Freq>
 800d8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8c4:	e033      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8c6:	f7fc fa59 	bl	8009d7c <HAL_RCC_GetPCLK2Freq>
 800d8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8cc:	e02f      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fe fa24 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8dc:	e027      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8de:	f107 0318 	add.w	r3, r7, #24
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fb70 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8ec:	e01f      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ee:	4b2d      	ldr	r3, [pc, #180]	; (800d9a4 <UART_SetConfig+0x934>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d009      	beq.n	800d90e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8fa:	4b2a      	ldr	r3, [pc, #168]	; (800d9a4 <UART_SetConfig+0x934>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	08db      	lsrs	r3, r3, #3
 800d900:	f003 0303 	and.w	r3, r3, #3
 800d904:	4a24      	ldr	r2, [pc, #144]	; (800d998 <UART_SetConfig+0x928>)
 800d906:	fa22 f303 	lsr.w	r3, r2, r3
 800d90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d90c:	e00f      	b.n	800d92e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d90e:	4b22      	ldr	r3, [pc, #136]	; (800d998 <UART_SetConfig+0x928>)
 800d910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d912:	e00c      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d914:	4b21      	ldr	r3, [pc, #132]	; (800d99c <UART_SetConfig+0x92c>)
 800d916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d918:	e009      	b.n	800d92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d920:	e005      	b.n	800d92e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d922:	2300      	movs	r3, #0
 800d924:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d92c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 80e7 	beq.w	800db04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	4a19      	ldr	r2, [pc, #100]	; (800d9a0 <UART_SetConfig+0x930>)
 800d93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d940:	461a      	mov	r2, r3
 800d942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d944:	fbb3 f3f2 	udiv	r3, r3, r2
 800d948:	005a      	lsls	r2, r3, #1
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	085b      	lsrs	r3, r3, #1
 800d950:	441a      	add	r2, r3
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	fbb2 f3f3 	udiv	r3, r2, r3
 800d95a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b0f      	cmp	r3, #15
 800d960:	d916      	bls.n	800d990 <UART_SetConfig+0x920>
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d968:	d212      	bcs.n	800d990 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	f023 030f 	bic.w	r3, r3, #15
 800d972:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d976:	085b      	lsrs	r3, r3, #1
 800d978:	b29b      	uxth	r3, r3
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	b29a      	uxth	r2, r3
 800d980:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d982:	4313      	orrs	r3, r2
 800d984:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d98c:	60da      	str	r2, [r3, #12]
 800d98e:	e0b9      	b.n	800db04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d996:	e0b5      	b.n	800db04 <UART_SetConfig+0xa94>
 800d998:	03d09000 	.word	0x03d09000
 800d99c:	003d0900 	.word	0x003d0900
 800d9a0:	0801e0d0 	.word	0x0801e0d0
 800d9a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d9ac:	2b20      	cmp	r3, #32
 800d9ae:	dc49      	bgt.n	800da44 <UART_SetConfig+0x9d4>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	db7c      	blt.n	800daae <UART_SetConfig+0xa3e>
 800d9b4:	2b20      	cmp	r3, #32
 800d9b6:	d87a      	bhi.n	800daae <UART_SetConfig+0xa3e>
 800d9b8:	a201      	add	r2, pc, #4	; (adr r2, 800d9c0 <UART_SetConfig+0x950>)
 800d9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9be:	bf00      	nop
 800d9c0:	0800da4b 	.word	0x0800da4b
 800d9c4:	0800da53 	.word	0x0800da53
 800d9c8:	0800daaf 	.word	0x0800daaf
 800d9cc:	0800daaf 	.word	0x0800daaf
 800d9d0:	0800da5b 	.word	0x0800da5b
 800d9d4:	0800daaf 	.word	0x0800daaf
 800d9d8:	0800daaf 	.word	0x0800daaf
 800d9dc:	0800daaf 	.word	0x0800daaf
 800d9e0:	0800da6b 	.word	0x0800da6b
 800d9e4:	0800daaf 	.word	0x0800daaf
 800d9e8:	0800daaf 	.word	0x0800daaf
 800d9ec:	0800daaf 	.word	0x0800daaf
 800d9f0:	0800daaf 	.word	0x0800daaf
 800d9f4:	0800daaf 	.word	0x0800daaf
 800d9f8:	0800daaf 	.word	0x0800daaf
 800d9fc:	0800daaf 	.word	0x0800daaf
 800da00:	0800da7b 	.word	0x0800da7b
 800da04:	0800daaf 	.word	0x0800daaf
 800da08:	0800daaf 	.word	0x0800daaf
 800da0c:	0800daaf 	.word	0x0800daaf
 800da10:	0800daaf 	.word	0x0800daaf
 800da14:	0800daaf 	.word	0x0800daaf
 800da18:	0800daaf 	.word	0x0800daaf
 800da1c:	0800daaf 	.word	0x0800daaf
 800da20:	0800daaf 	.word	0x0800daaf
 800da24:	0800daaf 	.word	0x0800daaf
 800da28:	0800daaf 	.word	0x0800daaf
 800da2c:	0800daaf 	.word	0x0800daaf
 800da30:	0800daaf 	.word	0x0800daaf
 800da34:	0800daaf 	.word	0x0800daaf
 800da38:	0800daaf 	.word	0x0800daaf
 800da3c:	0800daaf 	.word	0x0800daaf
 800da40:	0800daa1 	.word	0x0800daa1
 800da44:	2b40      	cmp	r3, #64	; 0x40
 800da46:	d02e      	beq.n	800daa6 <UART_SetConfig+0xa36>
 800da48:	e031      	b.n	800daae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da4a:	f7fc f981 	bl	8009d50 <HAL_RCC_GetPCLK1Freq>
 800da4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da50:	e033      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da52:	f7fc f993 	bl	8009d7c <HAL_RCC_GetPCLK2Freq>
 800da56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da58:	e02f      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe f95e 	bl	800bd20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da68:	e027      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da6a:	f107 0318 	add.w	r3, r7, #24
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe faaa 	bl	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da78:	e01f      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da7a:	4b2d      	ldr	r3, [pc, #180]	; (800db30 <UART_SetConfig+0xac0>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0320 	and.w	r3, r3, #32
 800da82:	2b00      	cmp	r3, #0
 800da84:	d009      	beq.n	800da9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da86:	4b2a      	ldr	r3, [pc, #168]	; (800db30 <UART_SetConfig+0xac0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	08db      	lsrs	r3, r3, #3
 800da8c:	f003 0303 	and.w	r3, r3, #3
 800da90:	4a28      	ldr	r2, [pc, #160]	; (800db34 <UART_SetConfig+0xac4>)
 800da92:	fa22 f303 	lsr.w	r3, r2, r3
 800da96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da98:	e00f      	b.n	800daba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800da9a:	4b26      	ldr	r3, [pc, #152]	; (800db34 <UART_SetConfig+0xac4>)
 800da9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da9e:	e00c      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800daa0:	4b25      	ldr	r3, [pc, #148]	; (800db38 <UART_SetConfig+0xac8>)
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daa4:	e009      	b.n	800daba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daac:	e005      	b.n	800daba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800daae:	2300      	movs	r3, #0
 800dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dab8:	bf00      	nop
    }

    if (pclk != 0U)
 800daba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d021      	beq.n	800db04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	4a1d      	ldr	r2, [pc, #116]	; (800db3c <UART_SetConfig+0xacc>)
 800dac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daca:	461a      	mov	r2, r3
 800dacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dace:	fbb3 f2f2 	udiv	r2, r3, r2
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	085b      	lsrs	r3, r3, #1
 800dad8:	441a      	add	r2, r3
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	2b0f      	cmp	r3, #15
 800dae8:	d909      	bls.n	800dafe <UART_SetConfig+0xa8e>
 800daea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daf0:	d205      	bcs.n	800dafe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60da      	str	r2, [r3, #12]
 800dafc:	e002      	b.n	800db04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2201      	movs	r2, #1
 800db08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2201      	movs	r2, #1
 800db10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	2200      	movs	r2, #0
 800db18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2200      	movs	r2, #0
 800db1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800db20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800db24:	4618      	mov	r0, r3
 800db26:	3748      	adds	r7, #72	; 0x48
 800db28:	46bd      	mov	sp, r7
 800db2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db2e:	bf00      	nop
 800db30:	58024400 	.word	0x58024400
 800db34:	03d09000 	.word	0x03d09000
 800db38:	003d0900 	.word	0x003d0900
 800db3c:	0801e0d0 	.word	0x0801e0d0

0800db40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00a      	beq.n	800db6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	430a      	orrs	r2, r1
 800db68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6e:	f003 0302 	and.w	r3, r3, #2
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00a      	beq.n	800db8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	430a      	orrs	r2, r1
 800db8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db90:	f003 0304 	and.w	r3, r3, #4
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00a      	beq.n	800dbae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd4:	f003 0310 	and.w	r3, r3, #16
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00a      	beq.n	800dbf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	f003 0320 	and.w	r3, r3, #32
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00a      	beq.n	800dc14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	430a      	orrs	r2, r1
 800dc12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01a      	beq.n	800dc56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc3e:	d10a      	bne.n	800dc56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	605a      	str	r2, [r3, #4]
  }
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b098      	sub	sp, #96	; 0x60
 800dc88:	af02      	add	r7, sp, #8
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc94:	f7f5 fb74 	bl	8003380 <HAL_GetTick>
 800dc98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0308 	and.w	r3, r3, #8
 800dca4:	2b08      	cmp	r3, #8
 800dca6:	d12f      	bne.n	800dd08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f88e 	bl	800ddd8 <UART_WaitOnFlagUntilTimeout>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d022      	beq.n	800dd08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcca:	e853 3f00 	ldrex	r3, [r3]
 800dcce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcd6:	653b      	str	r3, [r7, #80]	; 0x50
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce0:	647b      	str	r3, [r7, #68]	; 0x44
 800dce2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dce8:	e841 2300 	strex	r3, r2, [r1]
 800dcec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1e6      	bne.n	800dcc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd04:	2303      	movs	r3, #3
 800dd06:	e063      	b.n	800ddd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 0304 	and.w	r3, r3, #4
 800dd12:	2b04      	cmp	r3, #4
 800dd14:	d149      	bne.n	800ddaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 f857 	bl	800ddd8 <UART_WaitOnFlagUntilTimeout>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d03c      	beq.n	800ddaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	e853 3f00 	ldrex	r3, [r3]
 800dd3c:	623b      	str	r3, [r7, #32]
   return(result);
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd56:	e841 2300 	strex	r3, r2, [r1]
 800dd5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1e6      	bne.n	800dd30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3308      	adds	r3, #8
 800dd68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	e853 3f00 	ldrex	r3, [r3]
 800dd70:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f023 0301 	bic.w	r3, r3, #1
 800dd78:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3308      	adds	r3, #8
 800dd80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd82:	61fa      	str	r2, [r7, #28]
 800dd84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	69b9      	ldr	r1, [r7, #24]
 800dd88:	69fa      	ldr	r2, [r7, #28]
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	617b      	str	r3, [r7, #20]
   return(result);
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e5      	bne.n	800dd62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2220      	movs	r2, #32
 800dd9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dda6:	2303      	movs	r3, #3
 800dda8:	e012      	b.n	800ddd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2220      	movs	r2, #32
 800ddb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3758      	adds	r7, #88	; 0x58
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	4613      	mov	r3, r2
 800dde6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dde8:	e049      	b.n	800de7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf0:	d045      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddf2:	f7f5 fac5 	bl	8003380 <HAL_GetTick>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	69ba      	ldr	r2, [r7, #24]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d302      	bcc.n	800de08 <UART_WaitOnFlagUntilTimeout+0x30>
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d101      	bne.n	800de0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e048      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f003 0304 	and.w	r3, r3, #4
 800de16:	2b00      	cmp	r3, #0
 800de18:	d031      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	f003 0308 	and.w	r3, r3, #8
 800de24:	2b08      	cmp	r3, #8
 800de26:	d110      	bne.n	800de4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2208      	movs	r2, #8
 800de2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 f839 	bl	800dea8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2208      	movs	r2, #8
 800de3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e029      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de58:	d111      	bne.n	800de7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f000 f81f 	bl	800dea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2220      	movs	r2, #32
 800de6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800de7a:	2303      	movs	r3, #3
 800de7c:	e00f      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69da      	ldr	r2, [r3, #28]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4013      	ands	r3, r2
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	bf0c      	ite	eq
 800de8e:	2301      	moveq	r3, #1
 800de90:	2300      	movne	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d0a6      	beq.n	800ddea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b095      	sub	sp, #84	; 0x54
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb8:	e853 3f00 	ldrex	r3, [r3]
 800debc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dece:	643b      	str	r3, [r7, #64]	; 0x40
 800ded0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ded4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ded6:	e841 2300 	strex	r3, r2, [r1]
 800deda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e6      	bne.n	800deb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3308      	adds	r3, #8
 800dee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	61fb      	str	r3, [r7, #28]
   return(result);
 800def2:	69fa      	ldr	r2, [r7, #28]
 800def4:	4b1e      	ldr	r3, [pc, #120]	; (800df70 <UART_EndRxTransfer+0xc8>)
 800def6:	4013      	ands	r3, r2
 800def8:	64bb      	str	r3, [r7, #72]	; 0x48
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df02:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df0a:	e841 2300 	strex	r3, r2, [r1]
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e5      	bne.n	800dee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d118      	bne.n	800df50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f023 0310 	bic.w	r3, r3, #16
 800df32:	647b      	str	r3, [r7, #68]	; 0x44
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	461a      	mov	r2, r3
 800df3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	6979      	ldr	r1, [r7, #20]
 800df42:	69ba      	ldr	r2, [r7, #24]
 800df44:	e841 2300 	strex	r3, r2, [r1]
 800df48:	613b      	str	r3, [r7, #16]
   return(result);
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e6      	bne.n	800df1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2220      	movs	r2, #32
 800df54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	675a      	str	r2, [r3, #116]	; 0x74
}
 800df64:	bf00      	nop
 800df66:	3754      	adds	r7, #84	; 0x54
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	effffffe 	.word	0xeffffffe

0800df74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df82:	2b01      	cmp	r3, #1
 800df84:	d101      	bne.n	800df8a <HAL_UARTEx_DisableFifoMode+0x16>
 800df86:	2302      	movs	r3, #2
 800df88:	e027      	b.n	800dfda <HAL_UARTEx_DisableFifoMode+0x66>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2224      	movs	r2, #36	; 0x24
 800df96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f022 0201 	bic.w	r2, r2, #1
 800dfb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dfb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b084      	sub	sp, #16
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d101      	bne.n	800dffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dffa:	2302      	movs	r3, #2
 800dffc:	e02d      	b.n	800e05a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2224      	movs	r2, #36	; 0x24
 800e00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f022 0201 	bic.w	r2, r2, #1
 800e024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	430a      	orrs	r2, r1
 800e038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f850 	bl	800e0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b084      	sub	sp, #16
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e072:	2b01      	cmp	r3, #1
 800e074:	d101      	bne.n	800e07a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e076:	2302      	movs	r3, #2
 800e078:	e02d      	b.n	800e0d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2224      	movs	r2, #36	; 0x24
 800e086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 0201 	bic.w	r2, r2, #1
 800e0a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	430a      	orrs	r2, r1
 800e0b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f812 	bl	800e0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d108      	bne.n	800e102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e100:	e031      	b.n	800e166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e102:	2310      	movs	r3, #16
 800e104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e106:	2310      	movs	r3, #16
 800e108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	0e5b      	lsrs	r3, r3, #25
 800e112:	b2db      	uxtb	r3, r3
 800e114:	f003 0307 	and.w	r3, r3, #7
 800e118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	0f5b      	lsrs	r3, r3, #29
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0307 	and.w	r3, r3, #7
 800e128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	7b3a      	ldrb	r2, [r7, #12]
 800e12e:	4911      	ldr	r1, [pc, #68]	; (800e174 <UARTEx_SetNbDataToProcess+0x94>)
 800e130:	5c8a      	ldrb	r2, [r1, r2]
 800e132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e136:	7b3a      	ldrb	r2, [r7, #12]
 800e138:	490f      	ldr	r1, [pc, #60]	; (800e178 <UARTEx_SetNbDataToProcess+0x98>)
 800e13a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	7b7a      	ldrb	r2, [r7, #13]
 800e14c:	4909      	ldr	r1, [pc, #36]	; (800e174 <UARTEx_SetNbDataToProcess+0x94>)
 800e14e:	5c8a      	ldrb	r2, [r1, r2]
 800e150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e154:	7b7a      	ldrb	r2, [r7, #13]
 800e156:	4908      	ldr	r1, [pc, #32]	; (800e178 <UARTEx_SetNbDataToProcess+0x98>)
 800e158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e15a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e15e:	b29a      	uxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	0801e0e8 	.word	0x0801e0e8
 800e178:	0801e0f0 	.word	0x0801e0f0

0800e17c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e182:	4b8d      	ldr	r3, [pc, #564]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e184:	22c0      	movs	r2, #192	; 0xc0
 800e186:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e188:	4b8b      	ldr	r3, [pc, #556]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e18a:	22a8      	movs	r2, #168	; 0xa8
 800e18c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e18e:	4b8a      	ldr	r3, [pc, #552]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e190:	2200      	movs	r2, #0
 800e192:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e194:	4b88      	ldr	r3, [pc, #544]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e196:	220a      	movs	r2, #10
 800e198:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e19a:	4b88      	ldr	r3, [pc, #544]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e19c:	22ff      	movs	r2, #255	; 0xff
 800e19e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e1a0:	4b86      	ldr	r3, [pc, #536]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e1a2:	22ff      	movs	r2, #255	; 0xff
 800e1a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800e1a6:	4b85      	ldr	r3, [pc, #532]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e1ac:	4b83      	ldr	r3, [pc, #524]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e1b2:	4b83      	ldr	r3, [pc, #524]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e1b4:	22c0      	movs	r2, #192	; 0xc0
 800e1b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e1b8:	4b81      	ldr	r3, [pc, #516]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e1ba:	22a8      	movs	r2, #168	; 0xa8
 800e1bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e1be:	4b80      	ldr	r3, [pc, #512]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e1c4:	4b7e      	ldr	r3, [pc, #504]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e1ca:	f000 fd3d 	bl	800ec48 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e1ce:	4b7a      	ldr	r3, [pc, #488]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	061a      	lsls	r2, r3, #24
 800e1d4:	4b78      	ldr	r3, [pc, #480]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	041b      	lsls	r3, r3, #16
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	4b76      	ldr	r3, [pc, #472]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1de:	789b      	ldrb	r3, [r3, #2]
 800e1e0:	021b      	lsls	r3, r3, #8
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	4a74      	ldr	r2, [pc, #464]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1e6:	78d2      	ldrb	r2, [r2, #3]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	061a      	lsls	r2, r3, #24
 800e1ec:	4b72      	ldr	r3, [pc, #456]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	0619      	lsls	r1, r3, #24
 800e1f2:	4b71      	ldr	r3, [pc, #452]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	041b      	lsls	r3, r3, #16
 800e1f8:	4319      	orrs	r1, r3
 800e1fa:	4b6f      	ldr	r3, [pc, #444]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e1fc:	789b      	ldrb	r3, [r3, #2]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	430b      	orrs	r3, r1
 800e202:	496d      	ldr	r1, [pc, #436]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e204:	78c9      	ldrb	r1, [r1, #3]
 800e206:	430b      	orrs	r3, r1
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e20e:	431a      	orrs	r2, r3
 800e210:	4b69      	ldr	r3, [pc, #420]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	0619      	lsls	r1, r3, #24
 800e216:	4b68      	ldr	r3, [pc, #416]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e218:	785b      	ldrb	r3, [r3, #1]
 800e21a:	041b      	lsls	r3, r3, #16
 800e21c:	4319      	orrs	r1, r3
 800e21e:	4b66      	ldr	r3, [pc, #408]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e220:	789b      	ldrb	r3, [r3, #2]
 800e222:	021b      	lsls	r3, r3, #8
 800e224:	430b      	orrs	r3, r1
 800e226:	4964      	ldr	r1, [pc, #400]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e228:	78c9      	ldrb	r1, [r1, #3]
 800e22a:	430b      	orrs	r3, r1
 800e22c:	0a1b      	lsrs	r3, r3, #8
 800e22e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e232:	431a      	orrs	r2, r3
 800e234:	4b60      	ldr	r3, [pc, #384]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	0619      	lsls	r1, r3, #24
 800e23a:	4b5f      	ldr	r3, [pc, #380]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	041b      	lsls	r3, r3, #16
 800e240:	4319      	orrs	r1, r3
 800e242:	4b5d      	ldr	r3, [pc, #372]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e244:	789b      	ldrb	r3, [r3, #2]
 800e246:	021b      	lsls	r3, r3, #8
 800e248:	430b      	orrs	r3, r1
 800e24a:	495b      	ldr	r1, [pc, #364]	; (800e3b8 <MX_LWIP_Init+0x23c>)
 800e24c:	78c9      	ldrb	r1, [r1, #3]
 800e24e:	430b      	orrs	r3, r1
 800e250:	0e1b      	lsrs	r3, r3, #24
 800e252:	4313      	orrs	r3, r2
 800e254:	4a5b      	ldr	r2, [pc, #364]	; (800e3c4 <MX_LWIP_Init+0x248>)
 800e256:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e258:	4b58      	ldr	r3, [pc, #352]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	061a      	lsls	r2, r3, #24
 800e25e:	4b57      	ldr	r3, [pc, #348]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	041b      	lsls	r3, r3, #16
 800e264:	431a      	orrs	r2, r3
 800e266:	4b55      	ldr	r3, [pc, #340]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	021b      	lsls	r3, r3, #8
 800e26c:	4313      	orrs	r3, r2
 800e26e:	4a53      	ldr	r2, [pc, #332]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e270:	78d2      	ldrb	r2, [r2, #3]
 800e272:	4313      	orrs	r3, r2
 800e274:	061a      	lsls	r2, r3, #24
 800e276:	4b51      	ldr	r3, [pc, #324]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	0619      	lsls	r1, r3, #24
 800e27c:	4b4f      	ldr	r3, [pc, #316]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e27e:	785b      	ldrb	r3, [r3, #1]
 800e280:	041b      	lsls	r3, r3, #16
 800e282:	4319      	orrs	r1, r3
 800e284:	4b4d      	ldr	r3, [pc, #308]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e286:	789b      	ldrb	r3, [r3, #2]
 800e288:	021b      	lsls	r3, r3, #8
 800e28a:	430b      	orrs	r3, r1
 800e28c:	494b      	ldr	r1, [pc, #300]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e28e:	78c9      	ldrb	r1, [r1, #3]
 800e290:	430b      	orrs	r3, r1
 800e292:	021b      	lsls	r3, r3, #8
 800e294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e298:	431a      	orrs	r2, r3
 800e29a:	4b48      	ldr	r3, [pc, #288]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	0619      	lsls	r1, r3, #24
 800e2a0:	4b46      	ldr	r3, [pc, #280]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2a2:	785b      	ldrb	r3, [r3, #1]
 800e2a4:	041b      	lsls	r3, r3, #16
 800e2a6:	4319      	orrs	r1, r3
 800e2a8:	4b44      	ldr	r3, [pc, #272]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2aa:	789b      	ldrb	r3, [r3, #2]
 800e2ac:	021b      	lsls	r3, r3, #8
 800e2ae:	430b      	orrs	r3, r1
 800e2b0:	4942      	ldr	r1, [pc, #264]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2b2:	78c9      	ldrb	r1, [r1, #3]
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	0a1b      	lsrs	r3, r3, #8
 800e2b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	4b3f      	ldr	r3, [pc, #252]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	0619      	lsls	r1, r3, #24
 800e2c4:	4b3d      	ldr	r3, [pc, #244]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2c6:	785b      	ldrb	r3, [r3, #1]
 800e2c8:	041b      	lsls	r3, r3, #16
 800e2ca:	4319      	orrs	r1, r3
 800e2cc:	4b3b      	ldr	r3, [pc, #236]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2ce:	789b      	ldrb	r3, [r3, #2]
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	4939      	ldr	r1, [pc, #228]	; (800e3bc <MX_LWIP_Init+0x240>)
 800e2d6:	78c9      	ldrb	r1, [r1, #3]
 800e2d8:	430b      	orrs	r3, r1
 800e2da:	0e1b      	lsrs	r3, r3, #24
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	4a3a      	ldr	r2, [pc, #232]	; (800e3c8 <MX_LWIP_Init+0x24c>)
 800e2e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e2e2:	4b37      	ldr	r3, [pc, #220]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	061a      	lsls	r2, r3, #24
 800e2e8:	4b35      	ldr	r3, [pc, #212]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e2ea:	785b      	ldrb	r3, [r3, #1]
 800e2ec:	041b      	lsls	r3, r3, #16
 800e2ee:	431a      	orrs	r2, r3
 800e2f0:	4b33      	ldr	r3, [pc, #204]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	021b      	lsls	r3, r3, #8
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	4a31      	ldr	r2, [pc, #196]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e2fa:	78d2      	ldrb	r2, [r2, #3]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	061a      	lsls	r2, r3, #24
 800e300:	4b2f      	ldr	r3, [pc, #188]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	0619      	lsls	r1, r3, #24
 800e306:	4b2e      	ldr	r3, [pc, #184]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e308:	785b      	ldrb	r3, [r3, #1]
 800e30a:	041b      	lsls	r3, r3, #16
 800e30c:	4319      	orrs	r1, r3
 800e30e:	4b2c      	ldr	r3, [pc, #176]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e310:	789b      	ldrb	r3, [r3, #2]
 800e312:	021b      	lsls	r3, r3, #8
 800e314:	430b      	orrs	r3, r1
 800e316:	492a      	ldr	r1, [pc, #168]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e318:	78c9      	ldrb	r1, [r1, #3]
 800e31a:	430b      	orrs	r3, r1
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e322:	431a      	orrs	r2, r3
 800e324:	4b26      	ldr	r3, [pc, #152]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	0619      	lsls	r1, r3, #24
 800e32a:	4b25      	ldr	r3, [pc, #148]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e32c:	785b      	ldrb	r3, [r3, #1]
 800e32e:	041b      	lsls	r3, r3, #16
 800e330:	4319      	orrs	r1, r3
 800e332:	4b23      	ldr	r3, [pc, #140]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e334:	789b      	ldrb	r3, [r3, #2]
 800e336:	021b      	lsls	r3, r3, #8
 800e338:	430b      	orrs	r3, r1
 800e33a:	4921      	ldr	r1, [pc, #132]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e33c:	78c9      	ldrb	r1, [r1, #3]
 800e33e:	430b      	orrs	r3, r1
 800e340:	0a1b      	lsrs	r3, r3, #8
 800e342:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e346:	431a      	orrs	r2, r3
 800e348:	4b1d      	ldr	r3, [pc, #116]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	0619      	lsls	r1, r3, #24
 800e34e:	4b1c      	ldr	r3, [pc, #112]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e350:	785b      	ldrb	r3, [r3, #1]
 800e352:	041b      	lsls	r3, r3, #16
 800e354:	4319      	orrs	r1, r3
 800e356:	4b1a      	ldr	r3, [pc, #104]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e358:	789b      	ldrb	r3, [r3, #2]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	430b      	orrs	r3, r1
 800e35e:	4918      	ldr	r1, [pc, #96]	; (800e3c0 <MX_LWIP_Init+0x244>)
 800e360:	78c9      	ldrb	r1, [r1, #3]
 800e362:	430b      	orrs	r3, r1
 800e364:	0e1b      	lsrs	r3, r3, #24
 800e366:	4313      	orrs	r3, r2
 800e368:	4a18      	ldr	r2, [pc, #96]	; (800e3cc <MX_LWIP_Init+0x250>)
 800e36a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e36c:	4b18      	ldr	r3, [pc, #96]	; (800e3d0 <MX_LWIP_Init+0x254>)
 800e36e:	9302      	str	r3, [sp, #8]
 800e370:	4b18      	ldr	r3, [pc, #96]	; (800e3d4 <MX_LWIP_Init+0x258>)
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	2300      	movs	r3, #0
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	4b14      	ldr	r3, [pc, #80]	; (800e3cc <MX_LWIP_Init+0x250>)
 800e37a:	4a13      	ldr	r2, [pc, #76]	; (800e3c8 <MX_LWIP_Init+0x24c>)
 800e37c:	4911      	ldr	r1, [pc, #68]	; (800e3c4 <MX_LWIP_Init+0x248>)
 800e37e:	4816      	ldr	r0, [pc, #88]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e380:	f001 f94a 	bl	800f618 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e384:	4814      	ldr	r0, [pc, #80]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e386:	f001 faf9 	bl	800f97c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e38a:	4b13      	ldr	r3, [pc, #76]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e38c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e390:	089b      	lsrs	r3, r3, #2
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	b2db      	uxtb	r3, r3
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e39c:	480e      	ldr	r0, [pc, #56]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e39e:	f001 fafd 	bl	800f99c <netif_set_up>
 800e3a2:	e002      	b.n	800e3aa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e3a4:	480c      	ldr	r0, [pc, #48]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e3a6:	f001 fb65 	bl	800fa74 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e3aa:	490c      	ldr	r1, [pc, #48]	; (800e3dc <MX_LWIP_Init+0x260>)
 800e3ac:	480a      	ldr	r0, [pc, #40]	; (800e3d8 <MX_LWIP_Init+0x25c>)
 800e3ae:	f001 fbf7 	bl	800fba0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e3b2:	bf00      	nop
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	2000063c 	.word	0x2000063c
 800e3bc:	20000640 	.word	0x20000640
 800e3c0:	20000644 	.word	0x20000644
 800e3c4:	20000630 	.word	0x20000630
 800e3c8:	20000634 	.word	0x20000634
 800e3cc:	20000638 	.word	0x20000638
 800e3d0:	080183e5 	.word	0x080183e5
 800e3d4:	0800e625 	.word	0x0800e625
 800e3d8:	200005fc 	.word	0x200005fc
 800e3dc:	0800e3e1 	.word	0x0800e3e1

0800e3e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e3e8:	bf00      	nop
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e400:	4b3f      	ldr	r3, [pc, #252]	; (800e500 <low_level_init+0x10c>)
 800e402:	4a40      	ldr	r2, [pc, #256]	; (800e504 <low_level_init+0x110>)
 800e404:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e406:	2300      	movs	r3, #0
 800e408:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800e40a:	2380      	movs	r3, #128	; 0x80
 800e40c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800e40e:	23e1      	movs	r3, #225	; 0xe1
 800e410:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e412:	2300      	movs	r3, #0
 800e414:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e416:	2300      	movs	r3, #0
 800e418:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e41a:	2300      	movs	r3, #0
 800e41c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e41e:	4a38      	ldr	r2, [pc, #224]	; (800e500 <low_level_init+0x10c>)
 800e420:	f107 0308 	add.w	r3, r7, #8
 800e424:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e426:	4b36      	ldr	r3, [pc, #216]	; (800e500 <low_level_init+0x10c>)
 800e428:	2201      	movs	r2, #1
 800e42a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e42c:	4b34      	ldr	r3, [pc, #208]	; (800e500 <low_level_init+0x10c>)
 800e42e:	4a36      	ldr	r2, [pc, #216]	; (800e508 <low_level_init+0x114>)
 800e430:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e432:	4b33      	ldr	r3, [pc, #204]	; (800e500 <low_level_init+0x10c>)
 800e434:	4a35      	ldr	r2, [pc, #212]	; (800e50c <low_level_init+0x118>)
 800e436:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e438:	4b31      	ldr	r3, [pc, #196]	; (800e500 <low_level_init+0x10c>)
 800e43a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e43e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e440:	482f      	ldr	r0, [pc, #188]	; (800e500 <low_level_init+0x10c>)
 800e442:	f7f7 f84f 	bl	80054e4 <HAL_ETH_Init>
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e44a:	2238      	movs	r2, #56	; 0x38
 800e44c:	2100      	movs	r1, #0
 800e44e:	4830      	ldr	r0, [pc, #192]	; (800e510 <low_level_init+0x11c>)
 800e450:	f00a ff1e 	bl	8019290 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e454:	4b2e      	ldr	r3, [pc, #184]	; (800e510 <low_level_init+0x11c>)
 800e456:	2221      	movs	r2, #33	; 0x21
 800e458:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e45a:	4b2d      	ldr	r3, [pc, #180]	; (800e510 <low_level_init+0x11c>)
 800e45c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e460:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e462:	4b2b      	ldr	r3, [pc, #172]	; (800e510 <low_level_init+0x11c>)
 800e464:	2200      	movs	r2, #0
 800e466:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e468:	482a      	ldr	r0, [pc, #168]	; (800e514 <low_level_init+0x120>)
 800e46a:	f000 ff9d 	bl	800f3a8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2206      	movs	r2, #6
 800e472:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e476:	4b22      	ldr	r3, [pc, #136]	; (800e500 <low_level_init+0x10c>)
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e482:	4b1f      	ldr	r3, [pc, #124]	; (800e500 <low_level_init+0x10c>)
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	785a      	ldrb	r2, [r3, #1]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e48e:	4b1c      	ldr	r3, [pc, #112]	; (800e500 <low_level_init+0x10c>)
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	789a      	ldrb	r2, [r3, #2]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e49a:	4b19      	ldr	r3, [pc, #100]	; (800e500 <low_level_init+0x10c>)
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	78da      	ldrb	r2, [r3, #3]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e4a6:	4b16      	ldr	r3, [pc, #88]	; (800e500 <low_level_init+0x10c>)
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	791a      	ldrb	r2, [r3, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e4b2:	4b13      	ldr	r3, [pc, #76]	; (800e500 <low_level_init+0x10c>)
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	795a      	ldrb	r2, [r3, #5]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e4c4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4cc:	f043 030a 	orr.w	r3, r3, #10
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e4d8:	490f      	ldr	r1, [pc, #60]	; (800e518 <low_level_init+0x124>)
 800e4da:	4810      	ldr	r0, [pc, #64]	; (800e51c <low_level_init+0x128>)
 800e4dc:	f7f4 fd69 	bl	8002fb2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e4e0:	480e      	ldr	r0, [pc, #56]	; (800e51c <low_level_init+0x128>)
 800e4e2:	f7f4 fd98 	bl	8003016 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d103      	bne.n	800e4f4 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fa05 	bl	800e8fc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e4f2:	e001      	b.n	800e4f8 <low_level_init+0x104>
    Error_Handler();
 800e4f4:	f7f4 f858 	bl	80025a8 <Error_Handler>
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	20004fd4 	.word	0x20004fd4
 800e504:	40028000 	.word	0x40028000
 800e508:	20000288 	.word	0x20000288
 800e50c:	20000228 	.word	0x20000228
 800e510:	20005084 	.word	0x20005084
 800e514:	0801e0f8 	.word	0x0801e0f8
 800e518:	20000040 	.word	0x20000040
 800e51c:	200050bc 	.word	0x200050bc

0800e520 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b092      	sub	sp, #72	; 0x48
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e52a:	2300      	movs	r3, #0
 800e52c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e538:	f107 030c 	add.w	r3, r7, #12
 800e53c:	2230      	movs	r2, #48	; 0x30
 800e53e:	2100      	movs	r1, #0
 800e540:	4618      	mov	r0, r3
 800e542:	f00a fea5 	bl	8019290 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e546:	f107 030c 	add.w	r3, r7, #12
 800e54a:	2230      	movs	r2, #48	; 0x30
 800e54c:	2100      	movs	r1, #0
 800e54e:	4618      	mov	r0, r3
 800e550:	f00a fe9e 	bl	8019290 <memset>

  for(q = p; q != NULL; q = q->next)
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	643b      	str	r3, [r7, #64]	; 0x40
 800e558:	e045      	b.n	800e5e6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d902      	bls.n	800e566 <low_level_output+0x46>
      return ERR_IF;
 800e560:	f06f 030b 	mvn.w	r3, #11
 800e564:	e055      	b.n	800e612 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800e566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e568:	6859      	ldr	r1, [r3, #4]
 800e56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e56c:	4613      	mov	r3, r2
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	4413      	add	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	3348      	adds	r3, #72	; 0x48
 800e576:	443b      	add	r3, r7
 800e578:	3b3c      	subs	r3, #60	; 0x3c
 800e57a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e57e:	895b      	ldrh	r3, [r3, #10]
 800e580:	4619      	mov	r1, r3
 800e582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e584:	4613      	mov	r3, r2
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	4413      	add	r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	3348      	adds	r3, #72	; 0x48
 800e58e:	443b      	add	r3, r7
 800e590:	3b38      	subs	r3, #56	; 0x38
 800e592:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e596:	2b00      	cmp	r3, #0
 800e598:	d011      	beq.n	800e5be <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e59c:	1e5a      	subs	r2, r3, #1
 800e59e:	f107 000c 	add.w	r0, r7, #12
 800e5a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	440b      	add	r3, r1
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	18c1      	adds	r1, r0, r3
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	3348      	adds	r3, #72	; 0x48
 800e5b8:	443b      	add	r3, r7
 800e5ba:	3b34      	subs	r3, #52	; 0x34
 800e5bc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d109      	bne.n	800e5da <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	3348      	adds	r3, #72	; 0x48
 800e5d2:	443b      	add	r3, r7
 800e5d4:	3b34      	subs	r3, #52	; 0x34
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5dc:	3301      	adds	r3, #1
 800e5de:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1b6      	bne.n	800e55a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	891b      	ldrh	r3, [r3, #8]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b0a      	ldr	r3, [pc, #40]	; (800e61c <low_level_output+0xfc>)
 800e5f4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e5f6:	4a09      	ldr	r2, [pc, #36]	; (800e61c <low_level_output+0xfc>)
 800e5f8:	f107 030c 	add.w	r3, r7, #12
 800e5fc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e5fe:	4a07      	ldr	r2, [pc, #28]	; (800e61c <low_level_output+0xfc>)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e604:	2214      	movs	r2, #20
 800e606:	4905      	ldr	r1, [pc, #20]	; (800e61c <low_level_output+0xfc>)
 800e608:	4805      	ldr	r0, [pc, #20]	; (800e620 <low_level_output+0x100>)
 800e60a:	f7f7 f903 	bl	8005814 <HAL_ETH_Transmit>

  return errval;
 800e60e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e612:	4618      	mov	r0, r3
 800e614:	3748      	adds	r7, #72	; 0x48
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	20005084 	.word	0x20005084
 800e620:	20004fd4 	.word	0x20004fd4

0800e624 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <ethernetif_init+0x1c>
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <ethernetif_init+0x48>)
 800e634:	f240 127b 	movw	r2, #379	; 0x17b
 800e638:	490d      	ldr	r1, [pc, #52]	; (800e670 <ethernetif_init+0x4c>)
 800e63a:	480e      	ldr	r0, [pc, #56]	; (800e674 <ethernetif_init+0x50>)
 800e63c:	f00a fcd2 	bl	8018fe4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2273      	movs	r2, #115	; 0x73
 800e644:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2274      	movs	r2, #116	; 0x74
 800e64c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a09      	ldr	r2, [pc, #36]	; (800e678 <ethernetif_init+0x54>)
 800e654:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a08      	ldr	r2, [pc, #32]	; (800e67c <ethernetif_init+0x58>)
 800e65a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7ff fec9 	bl	800e3f4 <low_level_init>

  return ERR_OK;
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	0801b6c4 	.word	0x0801b6c4
 800e670:	0801b6e0 	.word	0x0801b6e0
 800e674:	0801b6f0 	.word	0x0801b6f0
 800e678:	08016851 	.word	0x08016851
 800e67c:	0800e521 	.word	0x0800e521

0800e680 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e68c:	68f9      	ldr	r1, [r7, #12]
 800e68e:	4807      	ldr	r0, [pc, #28]	; (800e6ac <pbuf_free_custom+0x2c>)
 800e690:	f000 ff6c 	bl	800f56c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e694:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <pbuf_free_custom+0x30>)
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d102      	bne.n	800e6a2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e69c:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <pbuf_free_custom+0x30>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	701a      	strb	r2, [r3, #0]
  }
}
 800e6a2:	bf00      	nop
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	0801e0f8 	.word	0x0801e0f8
 800e6b0:	20004fd0 	.word	0x20004fd0

0800e6b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e6b8:	f7f4 fe62 	bl	8003380 <HAL_GetTick>
 800e6bc:	4603      	mov	r3, r0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	bd80      	pop	{r7, pc}
	...

0800e6c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08e      	sub	sp, #56	; 0x38
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	605a      	str	r2, [r3, #4]
 800e6d6:	609a      	str	r2, [r3, #8]
 800e6d8:	60da      	str	r2, [r3, #12]
 800e6da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a59      	ldr	r2, [pc, #356]	; (800e848 <HAL_ETH_MspInit+0x184>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	f040 80ab 	bne.w	800e83e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e6e8:	4b58      	ldr	r3, [pc, #352]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e6ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6ee:	4a57      	ldr	r2, [pc, #348]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e6f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e6f8:	4b54      	ldr	r3, [pc, #336]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e6fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e702:	623b      	str	r3, [r7, #32]
 800e704:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e706:	4b51      	ldr	r3, [pc, #324]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e70c:	4a4f      	ldr	r2, [pc, #316]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e70e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e712:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e716:	4b4d      	ldr	r3, [pc, #308]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e71c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e724:	4b49      	ldr	r3, [pc, #292]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e72a:	4a48      	ldr	r2, [pc, #288]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e72c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e730:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e734:	4b45      	ldr	r3, [pc, #276]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e73e:	61bb      	str	r3, [r7, #24]
 800e740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e742:	4b42      	ldr	r3, [pc, #264]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e748:	4a40      	ldr	r2, [pc, #256]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e74a:	f043 0304 	orr.w	r3, r3, #4
 800e74e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e752:	4b3e      	ldr	r3, [pc, #248]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e758:	f003 0304 	and.w	r3, r3, #4
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e760:	4b3a      	ldr	r3, [pc, #232]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e766:	4a39      	ldr	r2, [pc, #228]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e768:	f043 0301 	orr.w	r3, r3, #1
 800e76c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e770:	4b36      	ldr	r3, [pc, #216]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	613b      	str	r3, [r7, #16]
 800e77c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e77e:	4b33      	ldr	r3, [pc, #204]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e784:	4a31      	ldr	r2, [pc, #196]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e786:	f043 0302 	orr.w	r3, r3, #2
 800e78a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e78e:	4b2f      	ldr	r3, [pc, #188]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e794:	f003 0302 	and.w	r3, r3, #2
 800e798:	60fb      	str	r3, [r7, #12]
 800e79a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e79c:	4b2b      	ldr	r3, [pc, #172]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e79e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7a2:	4a2a      	ldr	r2, [pc, #168]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e7ac:	4b27      	ldr	r3, [pc, #156]	; (800e84c <HAL_ETH_MspInit+0x188>)
 800e7ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7b6:	60bb      	str	r3, [r7, #8]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e7ba:	2332      	movs	r3, #50	; 0x32
 800e7bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7be:	2302      	movs	r3, #2
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7ca:	230b      	movs	r3, #11
 800e7cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e7ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	481e      	ldr	r0, [pc, #120]	; (800e850 <HAL_ETH_MspInit+0x18c>)
 800e7d6:	f7f8 f985 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e7da:	2386      	movs	r3, #134	; 0x86
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7de:	2302      	movs	r3, #2
 800e7e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7ea:	230b      	movs	r3, #11
 800e7ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	4817      	ldr	r0, [pc, #92]	; (800e854 <HAL_ETH_MspInit+0x190>)
 800e7f6:	f7f8 f975 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e7fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e800:	2302      	movs	r3, #2
 800e802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e804:	2300      	movs	r3, #0
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e808:	2300      	movs	r3, #0
 800e80a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e80c:	230b      	movs	r3, #11
 800e80e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e814:	4619      	mov	r1, r3
 800e816:	4810      	ldr	r0, [pc, #64]	; (800e858 <HAL_ETH_MspInit+0x194>)
 800e818:	f7f8 f964 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800e81c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e822:	2302      	movs	r3, #2
 800e824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e826:	2300      	movs	r3, #0
 800e828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e82a:	2300      	movs	r3, #0
 800e82c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e82e:	230b      	movs	r3, #11
 800e830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e836:	4619      	mov	r1, r3
 800e838:	4808      	ldr	r0, [pc, #32]	; (800e85c <HAL_ETH_MspInit+0x198>)
 800e83a:	f7f8 f953 	bl	8006ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e83e:	bf00      	nop
 800e840:	3738      	adds	r7, #56	; 0x38
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	40028000 	.word	0x40028000
 800e84c:	58024400 	.word	0x58024400
 800e850:	58020800 	.word	0x58020800
 800e854:	58020000 	.word	0x58020000
 800e858:	58020400 	.word	0x58020400
 800e85c:	58021800 	.word	0x58021800

0800e860 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e864:	4802      	ldr	r0, [pc, #8]	; (800e870 <ETH_PHY_IO_Init+0x10>)
 800e866:	f7f7 fb71 	bl	8005f4c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20004fd4 	.word	0x20004fd4

0800e874 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e874:	b480      	push	{r7}
 800e876:	af00      	add	r7, sp, #0
  return 0;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	68f9      	ldr	r1, [r7, #12]
 800e896:	4807      	ldr	r0, [pc, #28]	; (800e8b4 <ETH_PHY_IO_ReadReg+0x30>)
 800e898:	f7f7 f8c1 	bl	8005a1e <HAL_ETH_ReadPHYRegister>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d002      	beq.n	800e8a8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a6:	e000      	b.n	800e8aa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	20004fd4 	.word	0x20004fd4

0800e8b8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	68f9      	ldr	r1, [r7, #12]
 800e8ca:	4807      	ldr	r0, [pc, #28]	; (800e8e8 <ETH_PHY_IO_WriteReg+0x30>)
 800e8cc:	f7f7 f8fc 	bl	8005ac8 <HAL_ETH_WritePHYRegister>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8da:	e000      	b.n	800e8de <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20004fd4 	.word	0x20004fd4

0800e8ec <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e8f0:	f7f4 fd46 	bl	8003380 <HAL_GetTick>
 800e8f4:	4603      	mov	r3, r0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b0a0      	sub	sp, #128	; 0x80
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e904:	f107 030c 	add.w	r3, r7, #12
 800e908:	2264      	movs	r2, #100	; 0x64
 800e90a:	2100      	movs	r1, #0
 800e90c:	4618      	mov	r0, r3
 800e90e:	f00a fcbf 	bl	8019290 <memset>
  int32_t PHYLinkState = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e91a:	2300      	movs	r3, #0
 800e91c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e91e:	2300      	movs	r3, #0
 800e920:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e922:	483a      	ldr	r0, [pc, #232]	; (800ea0c <ethernet_link_check_state+0x110>)
 800e924:	f7f4 fc1f 	bl	8003166 <LAN8742_GetLinkState>
 800e928:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e930:	089b      	lsrs	r3, r3, #2
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00c      	beq.n	800e956 <ethernet_link_check_state+0x5a>
 800e93c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e93e:	2b01      	cmp	r3, #1
 800e940:	dc09      	bgt.n	800e956 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800e942:	4833      	ldr	r0, [pc, #204]	; (800ea10 <ethernet_link_check_state+0x114>)
 800e944:	f7f6 ff16 	bl	8005774 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f001 f893 	bl	800fa74 <netif_set_down>
    netif_set_link_down(netif);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f001 f8f6 	bl	800fb40 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e954:	e055      	b.n	800ea02 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b00      	cmp	r3, #0
 800e962:	d14e      	bne.n	800ea02 <ethernet_link_check_state+0x106>
 800e964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e966:	2b01      	cmp	r3, #1
 800e968:	dd4b      	ble.n	800ea02 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800e96a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e96c:	3b02      	subs	r3, #2
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d82a      	bhi.n	800e9c8 <ethernet_link_check_state+0xcc>
 800e972:	a201      	add	r2, pc, #4	; (adr r2, 800e978 <ethernet_link_check_state+0x7c>)
 800e974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e978:	0800e989 	.word	0x0800e989
 800e97c:	0800e99b 	.word	0x0800e99b
 800e980:	0800e9ab 	.word	0x0800e9ab
 800e984:	0800e9bb 	.word	0x0800e9bb
      duplex = ETH_FULLDUPLEX_MODE;
 800e988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e98c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e98e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e992:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e994:	2301      	movs	r3, #1
 800e996:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e998:	e017      	b.n	800e9ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e99a:	2300      	movs	r3, #0
 800e99c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e99e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e9a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e9a8:	e00f      	b.n	800e9ca <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800e9aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e9ae:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e9b8:	e007      	b.n	800e9ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e9c6:	e000      	b.n	800e9ca <ethernet_link_check_state+0xce>
      break;
 800e9c8:	bf00      	nop
    if(linkchanged)
 800e9ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d018      	beq.n	800ea02 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e9d0:	f107 030c 	add.w	r3, r7, #12
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	480e      	ldr	r0, [pc, #56]	; (800ea10 <ethernet_link_check_state+0x114>)
 800e9d8:	f7f7 f8ca 	bl	8005b70 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e9dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9de:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e9e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9e2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e9e4:	f107 030c 	add.w	r3, r7, #12
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4809      	ldr	r0, [pc, #36]	; (800ea10 <ethernet_link_check_state+0x114>)
 800e9ec:	f7f7 fa94 	bl	8005f18 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800e9f0:	4807      	ldr	r0, [pc, #28]	; (800ea10 <ethernet_link_check_state+0x114>)
 800e9f2:	f7f6 fe5d 	bl	80056b0 <HAL_ETH_Start>
      netif_set_up(netif);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 ffd0 	bl	800f99c <netif_set_up>
      netif_set_link_up(netif);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f001 f86b 	bl	800fad8 <netif_set_link_up>
}
 800ea02:	bf00      	nop
 800ea04:	3780      	adds	r7, #128	; 0x80
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	200050bc 	.word	0x200050bc
 800ea10:	20004fd4 	.word	0x20004fd4

0800ea14 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af02      	add	r7, sp, #8
 800ea1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ea1c:	4812      	ldr	r0, [pc, #72]	; (800ea68 <HAL_ETH_RxAllocateCallback+0x54>)
 800ea1e:	f000 fd37 	bl	800f490 <memp_malloc_pool>
 800ea22:	60f8      	str	r0, [r7, #12]
  if (p)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d014      	beq.n	800ea54 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f103 0220 	add.w	r2, r3, #32
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4a0d      	ldr	r2, [pc, #52]	; (800ea6c <HAL_ETH_RxAllocateCallback+0x58>)
 800ea38:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ea42:	9201      	str	r2, [sp, #4]
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2241      	movs	r2, #65	; 0x41
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	f001 fa4d 	bl	800feec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ea52:	e005      	b.n	800ea60 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	601a      	str	r2, [r3, #0]
}
 800ea60:	bf00      	nop
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0801e0f8 	.word	0x0801e0f8
 800ea6c:	0800e681 	.word	0x0800e681
 800ea70:	20004fd0 	.word	0x20004fd0

0800ea74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ea7e:	88fb      	ldrh	r3, [r7, #6]
 800ea80:	021b      	lsls	r3, r3, #8
 800ea82:	b21a      	sxth	r2, r3
 800ea84:	88fb      	ldrh	r3, [r7, #6]
 800ea86:	0a1b      	lsrs	r3, r3, #8
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	b21b      	sxth	r3, r3
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	b21b      	sxth	r3, r3
 800ea90:	b29b      	uxth	r3, r3
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr

0800ea9e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ea9e:	b480      	push	{r7}
 800eaa0:	b083      	sub	sp, #12
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	061a      	lsls	r2, r3, #24
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eab2:	431a      	orrs	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	0a1b      	lsrs	r3, r3, #8
 800eab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eabc:	431a      	orrs	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	0e1b      	lsrs	r3, r3, #24
 800eac2:	4313      	orrs	r3, r2
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b089      	sub	sp, #36	; 0x24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	f003 0301 	and.w	r3, r3, #1
 800eaec:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00d      	beq.n	800eb10 <lwip_standard_chksum+0x40>
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	dd0a      	ble.n	800eb10 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	1c53      	adds	r3, r2, #1
 800eafe:	61fb      	str	r3, [r7, #28]
 800eb00:	f107 030e 	add.w	r3, r7, #14
 800eb04:	3301      	adds	r3, #1
 800eb06:	7812      	ldrb	r2, [r2, #0]
 800eb08:	701a      	strb	r2, [r3, #0]
    len--;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800eb14:	e00a      	b.n	800eb2c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	1c9a      	adds	r2, r3, #2
 800eb1a:	61ba      	str	r2, [r7, #24]
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	4413      	add	r3, r2
 800eb24:	617b      	str	r3, [r7, #20]
    len -= 2;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	3b02      	subs	r3, #2
 800eb2a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	dcf1      	bgt.n	800eb16 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dd04      	ble.n	800eb42 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800eb38:	f107 030e 	add.w	r3, r7, #14
 800eb3c:	69ba      	ldr	r2, [r7, #24]
 800eb3e:	7812      	ldrb	r2, [r2, #0]
 800eb40:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800eb42:	89fb      	ldrh	r3, [r7, #14]
 800eb44:	461a      	mov	r2, r3
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	4413      	add	r3, r2
 800eb4a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	0c1a      	lsrs	r2, r3, #16
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	4413      	add	r3, r2
 800eb56:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	0c1a      	lsrs	r2, r3, #16
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d007      	beq.n	800eb7a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	0a1b      	lsrs	r3, r3, #8
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	4313      	orrs	r3, r2
 800eb78:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	b29b      	uxth	r3, r3
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3724      	adds	r7, #36	; 0x24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b082      	sub	sp, #8
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	460b      	mov	r3, r1
 800eb94:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800eb96:	887b      	ldrh	r3, [r7, #2]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff ff98 	bl	800ead0 <lwip_standard_chksum>
 800eba0:	4603      	mov	r3, r0
 800eba2:	43db      	mvns	r3, r3
 800eba4:	b29b      	uxth	r3, r3
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b086      	sub	sp, #24
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	613b      	str	r3, [r7, #16]
 800ebc2:	e02b      	b.n	800ec1c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	895b      	ldrh	r3, [r3, #10]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4610      	mov	r0, r2
 800ebd0:	f7ff ff7e 	bl	800ead0 <lwip_standard_chksum>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	4413      	add	r3, r2
 800ebdc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	0c1a      	lsrs	r2, r3, #16
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	4413      	add	r3, r2
 800ebe8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	895b      	ldrh	r3, [r3, #10]
 800ebee:	f003 0301 	and.w	r3, r3, #1
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00e      	beq.n	800ec16 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	bf0c      	ite	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	2300      	movne	r3, #0
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	0a1b      	lsrs	r3, r3, #8
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	613b      	str	r3, [r7, #16]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1d0      	bne.n	800ebc4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d007      	beq.n	800ec38 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	021b      	lsls	r3, r3, #8
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	0a1b      	lsrs	r3, r3, #8
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	4313      	orrs	r3, r2
 800ec36:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	43db      	mvns	r3, r3
 800ec3e:	b29b      	uxth	r3, r3
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ec52:	f000 f8d5 	bl	800ee00 <mem_init>
  memp_init();
 800ec56:	f000 fbd7 	bl	800f408 <memp_init>
  pbuf_init();
  netif_init();
 800ec5a:	f000 fcd5 	bl	800f608 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ec5e:	f006 fff1 	bl	8015c44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ec62:	f001 fd8b 	bl	801077c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ec66:	f006 ffa5 	bl	8015bb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ec7e:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <ptr_to_mem+0x20>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	88fb      	ldrh	r3, [r7, #6]
 800ec84:	4413      	add	r3, r2
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	200050f4 	.word	0x200050f4

0800ec98 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <mem_to_ptr+0x20>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	b29b      	uxth	r3, r3
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	370c      	adds	r7, #12
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	200050f4 	.word	0x200050f4

0800ecbc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ecbc:	b590      	push	{r4, r7, lr}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ecc4:	4b45      	ldr	r3, [pc, #276]	; (800eddc <plug_holes+0x120>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d206      	bcs.n	800ecdc <plug_holes+0x20>
 800ecce:	4b44      	ldr	r3, [pc, #272]	; (800ede0 <plug_holes+0x124>)
 800ecd0:	f240 12df 	movw	r2, #479	; 0x1df
 800ecd4:	4943      	ldr	r1, [pc, #268]	; (800ede4 <plug_holes+0x128>)
 800ecd6:	4844      	ldr	r0, [pc, #272]	; (800ede8 <plug_holes+0x12c>)
 800ecd8:	f00a f984 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ecdc:	4b43      	ldr	r3, [pc, #268]	; (800edec <plug_holes+0x130>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d306      	bcc.n	800ecf4 <plug_holes+0x38>
 800ece6:	4b3e      	ldr	r3, [pc, #248]	; (800ede0 <plug_holes+0x124>)
 800ece8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ecec:	4940      	ldr	r1, [pc, #256]	; (800edf0 <plug_holes+0x134>)
 800ecee:	483e      	ldr	r0, [pc, #248]	; (800ede8 <plug_holes+0x12c>)
 800ecf0:	f00a f978 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	791b      	ldrb	r3, [r3, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d006      	beq.n	800ed0a <plug_holes+0x4e>
 800ecfc:	4b38      	ldr	r3, [pc, #224]	; (800ede0 <plug_holes+0x124>)
 800ecfe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ed02:	493c      	ldr	r1, [pc, #240]	; (800edf4 <plug_holes+0x138>)
 800ed04:	4838      	ldr	r0, [pc, #224]	; (800ede8 <plug_holes+0x12c>)
 800ed06:	f00a f96d 	bl	8018fe4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed12:	d906      	bls.n	800ed22 <plug_holes+0x66>
 800ed14:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <plug_holes+0x124>)
 800ed16:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ed1a:	4937      	ldr	r1, [pc, #220]	; (800edf8 <plug_holes+0x13c>)
 800ed1c:	4832      	ldr	r0, [pc, #200]	; (800ede8 <plug_holes+0x12c>)
 800ed1e:	f00a f961 	bl	8018fe4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff ffa4 	bl	800ec74 <ptr_to_mem>
 800ed2c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d024      	beq.n	800ed80 <plug_holes+0xc4>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	791b      	ldrb	r3, [r3, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d120      	bne.n	800ed80 <plug_holes+0xc4>
 800ed3e:	4b2b      	ldr	r3, [pc, #172]	; (800edec <plug_holes+0x130>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d01b      	beq.n	800ed80 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ed48:	4b2c      	ldr	r3, [pc, #176]	; (800edfc <plug_holes+0x140>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d102      	bne.n	800ed58 <plug_holes+0x9c>
      lfree = mem;
 800ed52:	4a2a      	ldr	r2, [pc, #168]	; (800edfc <plug_holes+0x140>)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	881a      	ldrh	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed68:	d00a      	beq.n	800ed80 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff ff80 	bl	800ec74 <ptr_to_mem>
 800ed74:	4604      	mov	r4, r0
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7ff ff8e 	bl	800ec98 <mem_to_ptr>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	885b      	ldrh	r3, [r3, #2]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff ff75 	bl	800ec74 <ptr_to_mem>
 800ed8a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d01f      	beq.n	800edd4 <plug_holes+0x118>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	791b      	ldrb	r3, [r3, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d11b      	bne.n	800edd4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ed9c:	4b17      	ldr	r3, [pc, #92]	; (800edfc <plug_holes+0x140>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d102      	bne.n	800edac <plug_holes+0xf0>
      lfree = pmem;
 800eda6:	4a15      	ldr	r2, [pc, #84]	; (800edfc <plug_holes+0x140>)
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	881a      	ldrh	r2, [r3, #0]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edbc:	d00a      	beq.n	800edd4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff ff56 	bl	800ec74 <ptr_to_mem>
 800edc8:	4604      	mov	r4, r0
 800edca:	68b8      	ldr	r0, [r7, #8]
 800edcc:	f7ff ff64 	bl	800ec98 <mem_to_ptr>
 800edd0:	4603      	mov	r3, r0
 800edd2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800edd4:	bf00      	nop
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd90      	pop	{r4, r7, pc}
 800eddc:	200050f4 	.word	0x200050f4
 800ede0:	0801b718 	.word	0x0801b718
 800ede4:	0801b748 	.word	0x0801b748
 800ede8:	0801b760 	.word	0x0801b760
 800edec:	200050f8 	.word	0x200050f8
 800edf0:	0801b788 	.word	0x0801b788
 800edf4:	0801b7a4 	.word	0x0801b7a4
 800edf8:	0801b7c0 	.word	0x0801b7c0
 800edfc:	200050fc 	.word	0x200050fc

0800ee00 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ee06:	4b16      	ldr	r3, [pc, #88]	; (800ee60 <mem_init+0x60>)
 800ee08:	4a16      	ldr	r2, [pc, #88]	; (800ee64 <mem_init+0x64>)
 800ee0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ee0c:	4b14      	ldr	r3, [pc, #80]	; (800ee60 <mem_init+0x60>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ee26:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ee2a:	f7ff ff23 	bl	800ec74 <ptr_to_mem>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4a0d      	ldr	r2, [pc, #52]	; (800ee68 <mem_init+0x68>)
 800ee32:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ee34:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <mem_init+0x68>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ee3c:	4b0a      	ldr	r3, [pc, #40]	; (800ee68 <mem_init+0x68>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ee46:	4b08      	ldr	r3, [pc, #32]	; (800ee68 <mem_init+0x68>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ee50:	4b03      	ldr	r3, [pc, #12]	; (800ee60 <mem_init+0x60>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a05      	ldr	r2, [pc, #20]	; (800ee6c <mem_init+0x6c>)
 800ee56:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	200050f4 	.word	0x200050f4
 800ee64:	30044000 	.word	0x30044000
 800ee68:	200050f8 	.word	0x200050f8
 800ee6c:	200050fc 	.word	0x200050fc

0800ee70 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ff0d 	bl	800ec98 <mem_to_ptr>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff fef4 	bl	800ec74 <ptr_to_mem>
 800ee8c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	885b      	ldrh	r3, [r3, #2]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff feee 	bl	800ec74 <ptr_to_mem>
 800ee98:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eea2:	d818      	bhi.n	800eed6 <mem_link_valid+0x66>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	885b      	ldrh	r3, [r3, #2]
 800eea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eeac:	d813      	bhi.n	800eed6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eeb2:	8afa      	ldrh	r2, [r7, #22]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d004      	beq.n	800eec2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	881b      	ldrh	r3, [r3, #0]
 800eebc:	8afa      	ldrh	r2, [r7, #22]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d109      	bne.n	800eed6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eec2:	4b08      	ldr	r3, [pc, #32]	; (800eee4 <mem_link_valid+0x74>)
 800eec4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eec6:	693a      	ldr	r2, [r7, #16]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d006      	beq.n	800eeda <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	885b      	ldrh	r3, [r3, #2]
 800eed0:	8afa      	ldrh	r2, [r7, #22]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d001      	beq.n	800eeda <mem_link_valid+0x6a>
    return 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e000      	b.n	800eedc <mem_link_valid+0x6c>
  }
  return 1;
 800eeda:	2301      	movs	r3, #1
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	200050f8 	.word	0x200050f8

0800eee8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d04c      	beq.n	800ef90 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f003 0303 	and.w	r3, r3, #3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d007      	beq.n	800ef10 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ef00:	4b25      	ldr	r3, [pc, #148]	; (800ef98 <mem_free+0xb0>)
 800ef02:	f240 2273 	movw	r2, #627	; 0x273
 800ef06:	4925      	ldr	r1, [pc, #148]	; (800ef9c <mem_free+0xb4>)
 800ef08:	4825      	ldr	r0, [pc, #148]	; (800efa0 <mem_free+0xb8>)
 800ef0a:	f00a f86b 	bl	8018fe4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef0e:	e040      	b.n	800ef92 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3b08      	subs	r3, #8
 800ef14:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ef16:	4b23      	ldr	r3, [pc, #140]	; (800efa4 <mem_free+0xbc>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d306      	bcc.n	800ef2e <mem_free+0x46>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f103 020c 	add.w	r2, r3, #12
 800ef26:	4b20      	ldr	r3, [pc, #128]	; (800efa8 <mem_free+0xc0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d907      	bls.n	800ef3e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ef2e:	4b1a      	ldr	r3, [pc, #104]	; (800ef98 <mem_free+0xb0>)
 800ef30:	f240 227f 	movw	r2, #639	; 0x27f
 800ef34:	491d      	ldr	r1, [pc, #116]	; (800efac <mem_free+0xc4>)
 800ef36:	481a      	ldr	r0, [pc, #104]	; (800efa0 <mem_free+0xb8>)
 800ef38:	f00a f854 	bl	8018fe4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef3c:	e029      	b.n	800ef92 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	791b      	ldrb	r3, [r3, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d107      	bne.n	800ef56 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ef46:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <mem_free+0xb0>)
 800ef48:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ef4c:	4918      	ldr	r1, [pc, #96]	; (800efb0 <mem_free+0xc8>)
 800ef4e:	4814      	ldr	r0, [pc, #80]	; (800efa0 <mem_free+0xb8>)
 800ef50:	f00a f848 	bl	8018fe4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef54:	e01d      	b.n	800ef92 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f7ff ff8a 	bl	800ee70 <mem_link_valid>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d107      	bne.n	800ef72 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ef62:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <mem_free+0xb0>)
 800ef64:	f240 2295 	movw	r2, #661	; 0x295
 800ef68:	4912      	ldr	r1, [pc, #72]	; (800efb4 <mem_free+0xcc>)
 800ef6a:	480d      	ldr	r0, [pc, #52]	; (800efa0 <mem_free+0xb8>)
 800ef6c:	f00a f83a 	bl	8018fe4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef70:	e00f      	b.n	800ef92 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ef78:	4b0f      	ldr	r3, [pc, #60]	; (800efb8 <mem_free+0xd0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d202      	bcs.n	800ef88 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ef82:	4a0d      	ldr	r2, [pc, #52]	; (800efb8 <mem_free+0xd0>)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7ff fe97 	bl	800ecbc <plug_holes>
 800ef8e:	e000      	b.n	800ef92 <mem_free+0xaa>
    return;
 800ef90:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	0801b718 	.word	0x0801b718
 800ef9c:	0801b7ec 	.word	0x0801b7ec
 800efa0:	0801b760 	.word	0x0801b760
 800efa4:	200050f4 	.word	0x200050f4
 800efa8:	200050f8 	.word	0x200050f8
 800efac:	0801b810 	.word	0x0801b810
 800efb0:	0801b82c 	.word	0x0801b82c
 800efb4:	0801b854 	.word	0x0801b854
 800efb8:	200050fc 	.word	0x200050fc

0800efbc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800efc8:	887b      	ldrh	r3, [r7, #2]
 800efca:	3303      	adds	r3, #3
 800efcc:	b29b      	uxth	r3, r3
 800efce:	f023 0303 	bic.w	r3, r3, #3
 800efd2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800efd4:	8bfb      	ldrh	r3, [r7, #30]
 800efd6:	2b0b      	cmp	r3, #11
 800efd8:	d801      	bhi.n	800efde <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800efda:	230c      	movs	r3, #12
 800efdc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800efde:	8bfb      	ldrh	r3, [r7, #30]
 800efe0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efe4:	d803      	bhi.n	800efee <mem_trim+0x32>
 800efe6:	8bfa      	ldrh	r2, [r7, #30]
 800efe8:	887b      	ldrh	r3, [r7, #2]
 800efea:	429a      	cmp	r2, r3
 800efec:	d201      	bcs.n	800eff2 <mem_trim+0x36>
    return NULL;
 800efee:	2300      	movs	r3, #0
 800eff0:	e0cc      	b.n	800f18c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800eff2:	4b68      	ldr	r3, [pc, #416]	; (800f194 <mem_trim+0x1d8>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d304      	bcc.n	800f006 <mem_trim+0x4a>
 800effc:	4b66      	ldr	r3, [pc, #408]	; (800f198 <mem_trim+0x1dc>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d306      	bcc.n	800f014 <mem_trim+0x58>
 800f006:	4b65      	ldr	r3, [pc, #404]	; (800f19c <mem_trim+0x1e0>)
 800f008:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f00c:	4964      	ldr	r1, [pc, #400]	; (800f1a0 <mem_trim+0x1e4>)
 800f00e:	4865      	ldr	r0, [pc, #404]	; (800f1a4 <mem_trim+0x1e8>)
 800f010:	f009 ffe8 	bl	8018fe4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f014:	4b5f      	ldr	r3, [pc, #380]	; (800f194 <mem_trim+0x1d8>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d304      	bcc.n	800f028 <mem_trim+0x6c>
 800f01e:	4b5e      	ldr	r3, [pc, #376]	; (800f198 <mem_trim+0x1dc>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	429a      	cmp	r2, r3
 800f026:	d301      	bcc.n	800f02c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	e0af      	b.n	800f18c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3b08      	subs	r3, #8
 800f030:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f032:	69b8      	ldr	r0, [r7, #24]
 800f034:	f7ff fe30 	bl	800ec98 <mem_to_ptr>
 800f038:	4603      	mov	r3, r0
 800f03a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	881a      	ldrh	r2, [r3, #0]
 800f040:	8afb      	ldrh	r3, [r7, #22]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	b29b      	uxth	r3, r3
 800f046:	3b08      	subs	r3, #8
 800f048:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f04a:	8bfa      	ldrh	r2, [r7, #30]
 800f04c:	8abb      	ldrh	r3, [r7, #20]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d906      	bls.n	800f060 <mem_trim+0xa4>
 800f052:	4b52      	ldr	r3, [pc, #328]	; (800f19c <mem_trim+0x1e0>)
 800f054:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f058:	4953      	ldr	r1, [pc, #332]	; (800f1a8 <mem_trim+0x1ec>)
 800f05a:	4852      	ldr	r0, [pc, #328]	; (800f1a4 <mem_trim+0x1e8>)
 800f05c:	f009 ffc2 	bl	8018fe4 <iprintf>
  if (newsize > size) {
 800f060:	8bfa      	ldrh	r2, [r7, #30]
 800f062:	8abb      	ldrh	r3, [r7, #20]
 800f064:	429a      	cmp	r2, r3
 800f066:	d901      	bls.n	800f06c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f068:	2300      	movs	r3, #0
 800f06a:	e08f      	b.n	800f18c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f06c:	8bfa      	ldrh	r2, [r7, #30]
 800f06e:	8abb      	ldrh	r3, [r7, #20]
 800f070:	429a      	cmp	r2, r3
 800f072:	d101      	bne.n	800f078 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	e089      	b.n	800f18c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff fdf9 	bl	800ec74 <ptr_to_mem>
 800f082:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	791b      	ldrb	r3, [r3, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d13f      	bne.n	800f10c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f094:	d106      	bne.n	800f0a4 <mem_trim+0xe8>
 800f096:	4b41      	ldr	r3, [pc, #260]	; (800f19c <mem_trim+0x1e0>)
 800f098:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f09c:	4943      	ldr	r1, [pc, #268]	; (800f1ac <mem_trim+0x1f0>)
 800f09e:	4841      	ldr	r0, [pc, #260]	; (800f1a4 <mem_trim+0x1e8>)
 800f0a0:	f009 ffa0 	bl	8018fe4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	881b      	ldrh	r3, [r3, #0]
 800f0a8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f0aa:	8afa      	ldrh	r2, [r7, #22]
 800f0ac:	8bfb      	ldrh	r3, [r7, #30]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	3308      	adds	r3, #8
 800f0b4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f0b6:	4b3e      	ldr	r3, [pc, #248]	; (800f1b0 <mem_trim+0x1f4>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	693a      	ldr	r2, [r7, #16]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d106      	bne.n	800f0ce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f0c0:	89fb      	ldrh	r3, [r7, #14]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fdd6 	bl	800ec74 <ptr_to_mem>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	4a39      	ldr	r2, [pc, #228]	; (800f1b0 <mem_trim+0x1f4>)
 800f0cc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f0ce:	89fb      	ldrh	r3, [r7, #14]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff fdcf 	bl	800ec74 <ptr_to_mem>
 800f0d6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	89ba      	ldrh	r2, [r7, #12]
 800f0e2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	8afa      	ldrh	r2, [r7, #22]
 800f0e8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	89fa      	ldrh	r2, [r7, #14]
 800f0ee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0f8:	d047      	beq.n	800f18a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	881b      	ldrh	r3, [r3, #0]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fdb8 	bl	800ec74 <ptr_to_mem>
 800f104:	4602      	mov	r2, r0
 800f106:	89fb      	ldrh	r3, [r7, #14]
 800f108:	8053      	strh	r3, [r2, #2]
 800f10a:	e03e      	b.n	800f18a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f10c:	8bfb      	ldrh	r3, [r7, #30]
 800f10e:	f103 0214 	add.w	r2, r3, #20
 800f112:	8abb      	ldrh	r3, [r7, #20]
 800f114:	429a      	cmp	r2, r3
 800f116:	d838      	bhi.n	800f18a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f118:	8afa      	ldrh	r2, [r7, #22]
 800f11a:	8bfb      	ldrh	r3, [r7, #30]
 800f11c:	4413      	add	r3, r2
 800f11e:	b29b      	uxth	r3, r3
 800f120:	3308      	adds	r3, #8
 800f122:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f12c:	d106      	bne.n	800f13c <mem_trim+0x180>
 800f12e:	4b1b      	ldr	r3, [pc, #108]	; (800f19c <mem_trim+0x1e0>)
 800f130:	f240 3216 	movw	r2, #790	; 0x316
 800f134:	491d      	ldr	r1, [pc, #116]	; (800f1ac <mem_trim+0x1f0>)
 800f136:	481b      	ldr	r0, [pc, #108]	; (800f1a4 <mem_trim+0x1e8>)
 800f138:	f009 ff54 	bl	8018fe4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f13c:	89fb      	ldrh	r3, [r7, #14]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7ff fd98 	bl	800ec74 <ptr_to_mem>
 800f144:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f146:	4b1a      	ldr	r3, [pc, #104]	; (800f1b0 <mem_trim+0x1f4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	693a      	ldr	r2, [r7, #16]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d202      	bcs.n	800f156 <mem_trim+0x19a>
      lfree = mem2;
 800f150:	4a17      	ldr	r2, [pc, #92]	; (800f1b0 <mem_trim+0x1f4>)
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	2200      	movs	r2, #0
 800f15a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	881a      	ldrh	r2, [r3, #0]
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	8afa      	ldrh	r2, [r7, #22]
 800f168:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	89fa      	ldrh	r2, [r7, #14]
 800f16e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	881b      	ldrh	r3, [r3, #0]
 800f174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f178:	d007      	beq.n	800f18a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff fd78 	bl	800ec74 <ptr_to_mem>
 800f184:	4602      	mov	r2, r0
 800f186:	89fb      	ldrh	r3, [r7, #14]
 800f188:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f18a:	687b      	ldr	r3, [r7, #4]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3720      	adds	r7, #32
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	200050f4 	.word	0x200050f4
 800f198:	200050f8 	.word	0x200050f8
 800f19c:	0801b718 	.word	0x0801b718
 800f1a0:	0801b888 	.word	0x0801b888
 800f1a4:	0801b760 	.word	0x0801b760
 800f1a8:	0801b8a0 	.word	0x0801b8a0
 800f1ac:	0801b8c0 	.word	0x0801b8c0
 800f1b0:	200050fc 	.word	0x200050fc

0800f1b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b088      	sub	sp, #32
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <mem_malloc+0x14>
    return NULL;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e0d9      	b.n	800f37c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f1c8:	88fb      	ldrh	r3, [r7, #6]
 800f1ca:	3303      	adds	r3, #3
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	f023 0303 	bic.w	r3, r3, #3
 800f1d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f1d4:	8bbb      	ldrh	r3, [r7, #28]
 800f1d6:	2b0b      	cmp	r3, #11
 800f1d8:	d801      	bhi.n	800f1de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f1da:	230c      	movs	r3, #12
 800f1dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f1de:	8bbb      	ldrh	r3, [r7, #28]
 800f1e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1e4:	d803      	bhi.n	800f1ee <mem_malloc+0x3a>
 800f1e6:	8bba      	ldrh	r2, [r7, #28]
 800f1e8:	88fb      	ldrh	r3, [r7, #6]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d201      	bcs.n	800f1f2 <mem_malloc+0x3e>
    return NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	e0c4      	b.n	800f37c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f1f2:	4b64      	ldr	r3, [pc, #400]	; (800f384 <mem_malloc+0x1d0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff fd4e 	bl	800ec98 <mem_to_ptr>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	83fb      	strh	r3, [r7, #30]
 800f200:	e0b4      	b.n	800f36c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f202:	8bfb      	ldrh	r3, [r7, #30]
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff fd35 	bl	800ec74 <ptr_to_mem>
 800f20a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	791b      	ldrb	r3, [r3, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f040 80a4 	bne.w	800f35e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	461a      	mov	r2, r3
 800f21c:	8bfb      	ldrh	r3, [r7, #30]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	f1a3 0208 	sub.w	r2, r3, #8
 800f224:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f226:	429a      	cmp	r2, r3
 800f228:	f0c0 8099 	bcc.w	800f35e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	461a      	mov	r2, r3
 800f232:	8bfb      	ldrh	r3, [r7, #30]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	f1a3 0208 	sub.w	r2, r3, #8
 800f23a:	8bbb      	ldrh	r3, [r7, #28]
 800f23c:	3314      	adds	r3, #20
 800f23e:	429a      	cmp	r2, r3
 800f240:	d333      	bcc.n	800f2aa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f242:	8bfa      	ldrh	r2, [r7, #30]
 800f244:	8bbb      	ldrh	r3, [r7, #28]
 800f246:	4413      	add	r3, r2
 800f248:	b29b      	uxth	r3, r3
 800f24a:	3308      	adds	r3, #8
 800f24c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f24e:	8a7b      	ldrh	r3, [r7, #18]
 800f250:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f254:	d106      	bne.n	800f264 <mem_malloc+0xb0>
 800f256:	4b4c      	ldr	r3, [pc, #304]	; (800f388 <mem_malloc+0x1d4>)
 800f258:	f240 3287 	movw	r2, #903	; 0x387
 800f25c:	494b      	ldr	r1, [pc, #300]	; (800f38c <mem_malloc+0x1d8>)
 800f25e:	484c      	ldr	r0, [pc, #304]	; (800f390 <mem_malloc+0x1dc>)
 800f260:	f009 fec0 	bl	8018fe4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f264:	8a7b      	ldrh	r3, [r7, #18]
 800f266:	4618      	mov	r0, r3
 800f268:	f7ff fd04 	bl	800ec74 <ptr_to_mem>
 800f26c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2200      	movs	r2, #0
 800f272:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	881a      	ldrh	r2, [r3, #0]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8bfa      	ldrh	r2, [r7, #30]
 800f280:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	8a7a      	ldrh	r2, [r7, #18]
 800f286:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2201      	movs	r2, #1
 800f28c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f296:	d00b      	beq.n	800f2b0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff fce9 	bl	800ec74 <ptr_to_mem>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	8a7b      	ldrh	r3, [r7, #18]
 800f2a6:	8053      	strh	r3, [r2, #2]
 800f2a8:	e002      	b.n	800f2b0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f2b0:	4b34      	ldr	r3, [pc, #208]	; (800f384 <mem_malloc+0x1d0>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d127      	bne.n	800f30a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f2ba:	4b32      	ldr	r3, [pc, #200]	; (800f384 <mem_malloc+0x1d0>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f2c0:	e005      	b.n	800f2ce <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fcd4 	bl	800ec74 <ptr_to_mem>
 800f2cc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	791b      	ldrb	r3, [r3, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d004      	beq.n	800f2e0 <mem_malloc+0x12c>
 800f2d6:	4b2f      	ldr	r3, [pc, #188]	; (800f394 <mem_malloc+0x1e0>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d1f0      	bne.n	800f2c2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800f2e0:	4a28      	ldr	r2, [pc, #160]	; (800f384 <mem_malloc+0x1d0>)
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f2e6:	4b27      	ldr	r3, [pc, #156]	; (800f384 <mem_malloc+0x1d0>)
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	4b2a      	ldr	r3, [pc, #168]	; (800f394 <mem_malloc+0x1e0>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d00b      	beq.n	800f30a <mem_malloc+0x156>
 800f2f2:	4b24      	ldr	r3, [pc, #144]	; (800f384 <mem_malloc+0x1d0>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	791b      	ldrb	r3, [r3, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d006      	beq.n	800f30a <mem_malloc+0x156>
 800f2fc:	4b22      	ldr	r3, [pc, #136]	; (800f388 <mem_malloc+0x1d4>)
 800f2fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f302:	4925      	ldr	r1, [pc, #148]	; (800f398 <mem_malloc+0x1e4>)
 800f304:	4822      	ldr	r0, [pc, #136]	; (800f390 <mem_malloc+0x1dc>)
 800f306:	f009 fe6d 	bl	8018fe4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f30a:	8bba      	ldrh	r2, [r7, #28]
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	4413      	add	r3, r2
 800f310:	3308      	adds	r3, #8
 800f312:	4a20      	ldr	r2, [pc, #128]	; (800f394 <mem_malloc+0x1e0>)
 800f314:	6812      	ldr	r2, [r2, #0]
 800f316:	4293      	cmp	r3, r2
 800f318:	d906      	bls.n	800f328 <mem_malloc+0x174>
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <mem_malloc+0x1d4>)
 800f31c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f320:	491e      	ldr	r1, [pc, #120]	; (800f39c <mem_malloc+0x1e8>)
 800f322:	481b      	ldr	r0, [pc, #108]	; (800f390 <mem_malloc+0x1dc>)
 800f324:	f009 fe5e 	bl	8018fe4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f003 0303 	and.w	r3, r3, #3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d006      	beq.n	800f340 <mem_malloc+0x18c>
 800f332:	4b15      	ldr	r3, [pc, #84]	; (800f388 <mem_malloc+0x1d4>)
 800f334:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f338:	4919      	ldr	r1, [pc, #100]	; (800f3a0 <mem_malloc+0x1ec>)
 800f33a:	4815      	ldr	r0, [pc, #84]	; (800f390 <mem_malloc+0x1dc>)
 800f33c:	f009 fe52 	bl	8018fe4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f003 0303 	and.w	r3, r3, #3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d006      	beq.n	800f358 <mem_malloc+0x1a4>
 800f34a:	4b0f      	ldr	r3, [pc, #60]	; (800f388 <mem_malloc+0x1d4>)
 800f34c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f350:	4914      	ldr	r1, [pc, #80]	; (800f3a4 <mem_malloc+0x1f0>)
 800f352:	480f      	ldr	r0, [pc, #60]	; (800f390 <mem_malloc+0x1dc>)
 800f354:	f009 fe46 	bl	8018fe4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	3308      	adds	r3, #8
 800f35c:	e00e      	b.n	800f37c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f35e:	8bfb      	ldrh	r3, [r7, #30]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff fc87 	bl	800ec74 <ptr_to_mem>
 800f366:	4603      	mov	r3, r0
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f36c:	8bfa      	ldrh	r2, [r7, #30]
 800f36e:	8bbb      	ldrh	r3, [r7, #28]
 800f370:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f374:	429a      	cmp	r2, r3
 800f376:	f4ff af44 	bcc.w	800f202 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3720      	adds	r7, #32
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	200050fc 	.word	0x200050fc
 800f388:	0801b718 	.word	0x0801b718
 800f38c:	0801b8c0 	.word	0x0801b8c0
 800f390:	0801b760 	.word	0x0801b760
 800f394:	200050f8 	.word	0x200050f8
 800f398:	0801b8d4 	.word	0x0801b8d4
 800f39c:	0801b8f0 	.word	0x0801b8f0
 800f3a0:	0801b920 	.word	0x0801b920
 800f3a4:	0801b950 	.word	0x0801b950

0800f3a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	3303      	adds	r3, #3
 800f3be:	f023 0303 	bic.w	r3, r3, #3
 800f3c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	e011      	b.n	800f3ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	60fb      	str	r3, [r7, #12]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	885b      	ldrh	r3, [r3, #2]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	dbe7      	blt.n	800f3ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f3fa:	bf00      	nop
 800f3fc:	bf00      	nop
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f40e:	2300      	movs	r3, #0
 800f410:	80fb      	strh	r3, [r7, #6]
 800f412:	e009      	b.n	800f428 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f414:	88fb      	ldrh	r3, [r7, #6]
 800f416:	4a08      	ldr	r2, [pc, #32]	; (800f438 <memp_init+0x30>)
 800f418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff ffc3 	bl	800f3a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	3301      	adds	r3, #1
 800f426:	80fb      	strh	r3, [r7, #6]
 800f428:	88fb      	ldrh	r3, [r7, #6]
 800f42a:	2b08      	cmp	r3, #8
 800f42c:	d9f2      	bls.n	800f414 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f42e:	bf00      	nop
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	0801e170 	.word	0x0801e170

0800f43c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d012      	beq.n	800f478 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f003 0303 	and.w	r3, r3, #3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d006      	beq.n	800f474 <do_memp_malloc_pool+0x38>
 800f466:	4b07      	ldr	r3, [pc, #28]	; (800f484 <do_memp_malloc_pool+0x48>)
 800f468:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f46c:	4906      	ldr	r1, [pc, #24]	; (800f488 <do_memp_malloc_pool+0x4c>)
 800f46e:	4807      	ldr	r0, [pc, #28]	; (800f48c <do_memp_malloc_pool+0x50>)
 800f470:	f009 fdb8 	bl	8018fe4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	e000      	b.n	800f47a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	0801b974 	.word	0x0801b974
 800f488:	0801b9a4 	.word	0x0801b9a4
 800f48c:	0801b9c8 	.word	0x0801b9c8

0800f490 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <memp_malloc_pool+0x1c>
 800f49e:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <memp_malloc_pool+0x38>)
 800f4a0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f4a4:	4909      	ldr	r1, [pc, #36]	; (800f4cc <memp_malloc_pool+0x3c>)
 800f4a6:	480a      	ldr	r0, [pc, #40]	; (800f4d0 <memp_malloc_pool+0x40>)
 800f4a8:	f009 fd9c 	bl	8018fe4 <iprintf>
  if (desc == NULL) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <memp_malloc_pool+0x26>
    return NULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e003      	b.n	800f4be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff ffc0 	bl	800f43c <do_memp_malloc_pool>
 800f4bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	0801b974 	.word	0x0801b974
 800f4cc:	0801b9f0 	.word	0x0801b9f0
 800f4d0:	0801b9c8 	.word	0x0801b9c8

0800f4d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	2b08      	cmp	r3, #8
 800f4e2:	d908      	bls.n	800f4f6 <memp_malloc+0x22>
 800f4e4:	4b0a      	ldr	r3, [pc, #40]	; (800f510 <memp_malloc+0x3c>)
 800f4e6:	f240 1257 	movw	r2, #343	; 0x157
 800f4ea:	490a      	ldr	r1, [pc, #40]	; (800f514 <memp_malloc+0x40>)
 800f4ec:	480a      	ldr	r0, [pc, #40]	; (800f518 <memp_malloc+0x44>)
 800f4ee:	f009 fd79 	bl	8018fe4 <iprintf>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e008      	b.n	800f508 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	4a08      	ldr	r2, [pc, #32]	; (800f51c <memp_malloc+0x48>)
 800f4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff ff9c 	bl	800f43c <do_memp_malloc_pool>
 800f504:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f506:	68fb      	ldr	r3, [r7, #12]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	0801b974 	.word	0x0801b974
 800f514:	0801ba04 	.word	0x0801ba04
 800f518:	0801b9c8 	.word	0x0801b9c8
 800f51c:	0801e170 	.word	0x0801e170

0800f520 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	f003 0303 	and.w	r3, r3, #3
 800f530:	2b00      	cmp	r3, #0
 800f532:	d006      	beq.n	800f542 <do_memp_free_pool+0x22>
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <do_memp_free_pool+0x40>)
 800f536:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f53a:	490a      	ldr	r1, [pc, #40]	; (800f564 <do_memp_free_pool+0x44>)
 800f53c:	480a      	ldr	r0, [pc, #40]	; (800f568 <do_memp_free_pool+0x48>)
 800f53e:	f009 fd51 	bl	8018fe4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f558:	bf00      	nop
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	0801b974 	.word	0x0801b974
 800f564:	0801ba24 	.word	0x0801ba24
 800f568:	0801b9c8 	.word	0x0801b9c8

0800f56c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d106      	bne.n	800f58a <memp_free_pool+0x1e>
 800f57c:	4b0a      	ldr	r3, [pc, #40]	; (800f5a8 <memp_free_pool+0x3c>)
 800f57e:	f240 1295 	movw	r2, #405	; 0x195
 800f582:	490a      	ldr	r1, [pc, #40]	; (800f5ac <memp_free_pool+0x40>)
 800f584:	480a      	ldr	r0, [pc, #40]	; (800f5b0 <memp_free_pool+0x44>)
 800f586:	f009 fd2d 	bl	8018fe4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d007      	beq.n	800f5a0 <memp_free_pool+0x34>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d004      	beq.n	800f5a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff ffc1 	bl	800f520 <do_memp_free_pool>
 800f59e:	e000      	b.n	800f5a2 <memp_free_pool+0x36>
    return;
 800f5a0:	bf00      	nop
}
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	0801b974 	.word	0x0801b974
 800f5ac:	0801b9f0 	.word	0x0801b9f0
 800f5b0:	0801b9c8 	.word	0x0801b9c8

0800f5b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	2b08      	cmp	r3, #8
 800f5c4:	d907      	bls.n	800f5d6 <memp_free+0x22>
 800f5c6:	4b0c      	ldr	r3, [pc, #48]	; (800f5f8 <memp_free+0x44>)
 800f5c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f5cc:	490b      	ldr	r1, [pc, #44]	; (800f5fc <memp_free+0x48>)
 800f5ce:	480c      	ldr	r0, [pc, #48]	; (800f600 <memp_free+0x4c>)
 800f5d0:	f009 fd08 	bl	8018fe4 <iprintf>
 800f5d4:	e00c      	b.n	800f5f0 <memp_free+0x3c>

  if (mem == NULL) {
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d008      	beq.n	800f5ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	4a09      	ldr	r2, [pc, #36]	; (800f604 <memp_free+0x50>)
 800f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff ff9a 	bl	800f520 <do_memp_free_pool>
 800f5ec:	e000      	b.n	800f5f0 <memp_free+0x3c>
    return;
 800f5ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	0801b974 	.word	0x0801b974
 800f5fc:	0801ba44 	.word	0x0801ba44
 800f600:	0801b9c8 	.word	0x0801b9c8
 800f604:	0801e170 	.word	0x0801e170

0800f608 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f608:	b480      	push	{r7}
 800f60a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f60c:	bf00      	nop
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
	...

0800f618 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d108      	bne.n	800f63e <netif_add+0x26>
 800f62c:	4b57      	ldr	r3, [pc, #348]	; (800f78c <netif_add+0x174>)
 800f62e:	f240 1227 	movw	r2, #295	; 0x127
 800f632:	4957      	ldr	r1, [pc, #348]	; (800f790 <netif_add+0x178>)
 800f634:	4857      	ldr	r0, [pc, #348]	; (800f794 <netif_add+0x17c>)
 800f636:	f009 fcd5 	bl	8018fe4 <iprintf>
 800f63a:	2300      	movs	r3, #0
 800f63c:	e0a2      	b.n	800f784 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	2b00      	cmp	r3, #0
 800f642:	d108      	bne.n	800f656 <netif_add+0x3e>
 800f644:	4b51      	ldr	r3, [pc, #324]	; (800f78c <netif_add+0x174>)
 800f646:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f64a:	4953      	ldr	r1, [pc, #332]	; (800f798 <netif_add+0x180>)
 800f64c:	4851      	ldr	r0, [pc, #324]	; (800f794 <netif_add+0x17c>)
 800f64e:	f009 fcc9 	bl	8018fe4 <iprintf>
 800f652:	2300      	movs	r3, #0
 800f654:	e096      	b.n	800f784 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f65c:	4b4f      	ldr	r3, [pc, #316]	; (800f79c <netif_add+0x184>)
 800f65e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f666:	4b4d      	ldr	r3, [pc, #308]	; (800f79c <netif_add+0x184>)
 800f668:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d101      	bne.n	800f674 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f670:	4b4a      	ldr	r3, [pc, #296]	; (800f79c <netif_add+0x184>)
 800f672:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2200      	movs	r2, #0
 800f67e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2200      	movs	r2, #0
 800f684:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	4a45      	ldr	r2, [pc, #276]	; (800f7a0 <netif_add+0x188>)
 800f68a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2200      	movs	r2, #0
 800f690:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2200      	movs	r2, #0
 800f696:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6a3a      	ldr	r2, [r7, #32]
 800f6a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f6a6:	4b3f      	ldr	r3, [pc, #252]	; (800f7a4 <netif_add+0x18c>)
 800f6a8:	781a      	ldrb	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	68b9      	ldr	r1, [r7, #8]
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f000 f913 	bl	800f8e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	4798      	blx	r3
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <netif_add+0xba>
    return NULL;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e058      	b.n	800f784 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6d8:	2bff      	cmp	r3, #255	; 0xff
 800f6da:	d103      	bne.n	800f6e4 <netif_add+0xcc>
        netif->num = 0;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f6e8:	4b2f      	ldr	r3, [pc, #188]	; (800f7a8 <netif_add+0x190>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	617b      	str	r3, [r7, #20]
 800f6ee:	e02b      	b.n	800f748 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f6f0:	697a      	ldr	r2, [r7, #20]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d106      	bne.n	800f706 <netif_add+0xee>
 800f6f8:	4b24      	ldr	r3, [pc, #144]	; (800f78c <netif_add+0x174>)
 800f6fa:	f240 128b 	movw	r2, #395	; 0x18b
 800f6fe:	492b      	ldr	r1, [pc, #172]	; (800f7ac <netif_add+0x194>)
 800f700:	4824      	ldr	r0, [pc, #144]	; (800f794 <netif_add+0x17c>)
 800f702:	f009 fc6f 	bl	8018fe4 <iprintf>
        num_netifs++;
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3301      	adds	r3, #1
 800f70a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	2bff      	cmp	r3, #255	; 0xff
 800f710:	dd06      	ble.n	800f720 <netif_add+0x108>
 800f712:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <netif_add+0x174>)
 800f714:	f240 128d 	movw	r2, #397	; 0x18d
 800f718:	4925      	ldr	r1, [pc, #148]	; (800f7b0 <netif_add+0x198>)
 800f71a:	481e      	ldr	r0, [pc, #120]	; (800f794 <netif_add+0x17c>)
 800f71c:	f009 fc62 	bl	8018fe4 <iprintf>
        if (netif2->num == netif->num) {
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d108      	bne.n	800f742 <netif_add+0x12a>
          netif->num++;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f736:	3301      	adds	r3, #1
 800f738:	b2da      	uxtb	r2, r3
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f740:	e005      	b.n	800f74e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1d0      	bne.n	800f6f0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1be      	bne.n	800f6d2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f75a:	2bfe      	cmp	r3, #254	; 0xfe
 800f75c:	d103      	bne.n	800f766 <netif_add+0x14e>
    netif_num = 0;
 800f75e:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <netif_add+0x18c>)
 800f760:	2200      	movs	r2, #0
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	e006      	b.n	800f774 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f76c:	3301      	adds	r3, #1
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <netif_add+0x18c>)
 800f772:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f774:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <netif_add+0x190>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f77c:	4a0a      	ldr	r2, [pc, #40]	; (800f7a8 <netif_add+0x190>)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f782:	68fb      	ldr	r3, [r7, #12]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	0801ba60 	.word	0x0801ba60
 800f790:	0801baf4 	.word	0x0801baf4
 800f794:	0801bab0 	.word	0x0801bab0
 800f798:	0801bb10 	.word	0x0801bb10
 800f79c:	0801e1d4 	.word	0x0801e1d4
 800f7a0:	0800fbc3 	.word	0x0800fbc3
 800f7a4:	20007ff4 	.word	0x20007ff4
 800f7a8:	20007fec 	.word	0x20007fec
 800f7ac:	0801bb34 	.word	0x0801bb34
 800f7b0:	0801bb48 	.word	0x0801bb48

0800f7b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f002 fb23 	bl	8011e0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f006 fbc5 	bl	8015f58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f7ce:	bf00      	nop
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d106      	bne.n	800f7f8 <netif_do_set_ipaddr+0x20>
 800f7ea:	4b1d      	ldr	r3, [pc, #116]	; (800f860 <netif_do_set_ipaddr+0x88>)
 800f7ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f7f0:	491c      	ldr	r1, [pc, #112]	; (800f864 <netif_do_set_ipaddr+0x8c>)
 800f7f2:	481d      	ldr	r0, [pc, #116]	; (800f868 <netif_do_set_ipaddr+0x90>)
 800f7f4:	f009 fbf6 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <netif_do_set_ipaddr+0x34>
 800f7fe:	4b18      	ldr	r3, [pc, #96]	; (800f860 <netif_do_set_ipaddr+0x88>)
 800f800:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f804:	4917      	ldr	r1, [pc, #92]	; (800f864 <netif_do_set_ipaddr+0x8c>)
 800f806:	4818      	ldr	r0, [pc, #96]	; (800f868 <netif_do_set_ipaddr+0x90>)
 800f808:	f009 fbec 	bl	8018fe4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3304      	adds	r3, #4
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d01c      	beq.n	800f854 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3304      	adds	r3, #4
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f82a:	f107 0314 	add.w	r3, r7, #20
 800f82e:	4619      	mov	r1, r3
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7ff ffbf 	bl	800f7b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d002      	beq.n	800f842 <netif_do_set_ipaddr+0x6a>
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	e000      	b.n	800f844 <netif_do_set_ipaddr+0x6c>
 800f842:	2300      	movs	r3, #0
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f848:	2101      	movs	r1, #1
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f000 f8d2 	bl	800f9f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	0801ba60 	.word	0x0801ba60
 800f864:	0801bb78 	.word	0x0801bb78
 800f868:	0801bab0 	.word	0x0801bab0

0800f86c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	3308      	adds	r3, #8
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d00a      	beq.n	800f89c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d002      	beq.n	800f892 <netif_do_set_netmask+0x26>
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	e000      	b.n	800f894 <netif_do_set_netmask+0x28>
 800f892:	2300      	movs	r3, #0
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f898:	2301      	movs	r3, #1
 800f89a:	e000      	b.n	800f89e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f8aa:	b480      	push	{r7}
 800f8ac:	b085      	sub	sp, #20
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	60f8      	str	r0, [r7, #12]
 800f8b2:	60b9      	str	r1, [r7, #8]
 800f8b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	330c      	adds	r3, #12
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d00a      	beq.n	800f8da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d002      	beq.n	800f8d0 <netif_do_set_gw+0x26>
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	e000      	b.n	800f8d2 <netif_do_set_gw+0x28>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e000      	b.n	800f8dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f904:	4b1c      	ldr	r3, [pc, #112]	; (800f978 <netif_set_addr+0x90>)
 800f906:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f90e:	4b1a      	ldr	r3, [pc, #104]	; (800f978 <netif_set_addr+0x90>)
 800f910:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f918:	4b17      	ldr	r3, [pc, #92]	; (800f978 <netif_set_addr+0x90>)
 800f91a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <netif_set_addr+0x42>
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <netif_set_addr+0x46>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <netif_set_addr+0x48>
 800f92e:	2300      	movs	r3, #0
 800f930:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d006      	beq.n	800f946 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f938:	f107 0310 	add.w	r3, r7, #16
 800f93c:	461a      	mov	r2, r3
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7ff ff49 	bl	800f7d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	6879      	ldr	r1, [r7, #4]
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f7ff ff8e 	bl	800f86c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f950:	69ba      	ldr	r2, [r7, #24]
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f7ff ffa8 	bl	800f8aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d106      	bne.n	800f96e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f960:	f107 0310 	add.w	r3, r7, #16
 800f964:	461a      	mov	r2, r3
 800f966:	68b9      	ldr	r1, [r7, #8]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f7ff ff35 	bl	800f7d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f96e:	bf00      	nop
 800f970:	3720      	adds	r7, #32
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	0801e1d4 	.word	0x0801e1d4

0800f97c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f984:	4a04      	ldr	r2, [pc, #16]	; (800f998 <netif_set_default+0x1c>)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20007ff0 	.word	0x20007ff0

0800f99c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d107      	bne.n	800f9ba <netif_set_up+0x1e>
 800f9aa:	4b0f      	ldr	r3, [pc, #60]	; (800f9e8 <netif_set_up+0x4c>)
 800f9ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f9b0:	490e      	ldr	r1, [pc, #56]	; (800f9ec <netif_set_up+0x50>)
 800f9b2:	480f      	ldr	r0, [pc, #60]	; (800f9f0 <netif_set_up+0x54>)
 800f9b4:	f009 fb16 	bl	8018fe4 <iprintf>
 800f9b8:	e013      	b.n	800f9e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10c      	bne.n	800f9e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9ce:	f043 0301 	orr.w	r3, r3, #1
 800f9d2:	b2da      	uxtb	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f9da:	2103      	movs	r1, #3
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f809 	bl	800f9f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0801ba60 	.word	0x0801ba60
 800f9ec:	0801bbe8 	.word	0x0801bbe8
 800f9f0:	0801bab0 	.word	0x0801bab0

0800f9f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d106      	bne.n	800fa14 <netif_issue_reports+0x20>
 800fa06:	4b18      	ldr	r3, [pc, #96]	; (800fa68 <netif_issue_reports+0x74>)
 800fa08:	f240 326d 	movw	r2, #877	; 0x36d
 800fa0c:	4917      	ldr	r1, [pc, #92]	; (800fa6c <netif_issue_reports+0x78>)
 800fa0e:	4818      	ldr	r0, [pc, #96]	; (800fa70 <netif_issue_reports+0x7c>)
 800fa10:	f009 fae8 	bl	8018fe4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa1a:	f003 0304 	and.w	r3, r3, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01e      	beq.n	800fa60 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa28:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d017      	beq.n	800fa60 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa30:	78fb      	ldrb	r3, [r7, #3]
 800fa32:	f003 0301 	and.w	r3, r3, #1
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d013      	beq.n	800fa62 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00e      	beq.n	800fa62 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa4a:	f003 0308 	and.w	r3, r3, #8
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d007      	beq.n	800fa62 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3304      	adds	r3, #4
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f007 f9e7 	bl	8016e2c <etharp_request>
 800fa5e:	e000      	b.n	800fa62 <netif_issue_reports+0x6e>
    return;
 800fa60:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801ba60 	.word	0x0801ba60
 800fa6c:	0801bc04 	.word	0x0801bc04
 800fa70:	0801bab0 	.word	0x0801bab0

0800fa74 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d107      	bne.n	800fa92 <netif_set_down+0x1e>
 800fa82:	4b12      	ldr	r3, [pc, #72]	; (800facc <netif_set_down+0x58>)
 800fa84:	f240 329b 	movw	r2, #923	; 0x39b
 800fa88:	4911      	ldr	r1, [pc, #68]	; (800fad0 <netif_set_down+0x5c>)
 800fa8a:	4812      	ldr	r0, [pc, #72]	; (800fad4 <netif_set_down+0x60>)
 800fa8c:	f009 faaa 	bl	8018fe4 <iprintf>
 800fa90:	e019      	b.n	800fac6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d012      	beq.n	800fac6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faa6:	f023 0301 	bic.w	r3, r3, #1
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fab8:	f003 0308 	and.w	r3, r3, #8
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f006 fd71 	bl	80165a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	0801ba60 	.word	0x0801ba60
 800fad0:	0801bc28 	.word	0x0801bc28
 800fad4:	0801bab0 	.word	0x0801bab0

0800fad8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d107      	bne.n	800faf6 <netif_set_link_up+0x1e>
 800fae6:	4b13      	ldr	r3, [pc, #76]	; (800fb34 <netif_set_link_up+0x5c>)
 800fae8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800faec:	4912      	ldr	r1, [pc, #72]	; (800fb38 <netif_set_link_up+0x60>)
 800faee:	4813      	ldr	r0, [pc, #76]	; (800fb3c <netif_set_link_up+0x64>)
 800faf0:	f009 fa78 	bl	8018fe4 <iprintf>
 800faf4:	e01b      	b.n	800fb2e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fafc:	f003 0304 	and.w	r3, r3, #4
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d114      	bne.n	800fb2e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb0a:	f043 0304 	orr.w	r3, r3, #4
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb16:	2103      	movs	r1, #3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ff6b 	bl	800f9f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d003      	beq.n	800fb2e <netif_set_link_up+0x56>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	69db      	ldr	r3, [r3, #28]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	0801ba60 	.word	0x0801ba60
 800fb38:	0801bc48 	.word	0x0801bc48
 800fb3c:	0801bab0 	.word	0x0801bab0

0800fb40 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d107      	bne.n	800fb5e <netif_set_link_down+0x1e>
 800fb4e:	4b11      	ldr	r3, [pc, #68]	; (800fb94 <netif_set_link_down+0x54>)
 800fb50:	f240 4206 	movw	r2, #1030	; 0x406
 800fb54:	4910      	ldr	r1, [pc, #64]	; (800fb98 <netif_set_link_down+0x58>)
 800fb56:	4811      	ldr	r0, [pc, #68]	; (800fb9c <netif_set_link_down+0x5c>)
 800fb58:	f009 fa44 	bl	8018fe4 <iprintf>
 800fb5c:	e017      	b.n	800fb8e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d010      	beq.n	800fb8e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb72:	f023 0304 	bic.w	r3, r3, #4
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	69db      	ldr	r3, [r3, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d003      	beq.n	800fb8e <netif_set_link_down+0x4e>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	69db      	ldr	r3, [r3, #28]
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	0801ba60 	.word	0x0801ba60
 800fb98:	0801bc6c 	.word	0x0801bc6c
 800fb9c:	0801bab0 	.word	0x0801bab0

0800fba0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d002      	beq.n	800fbb6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	61da      	str	r2, [r3, #28]
  }
}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fbc2:	b480      	push	{r7}
 800fbc4:	b085      	sub	sp, #20
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	60f8      	str	r0, [r7, #12]
 800fbca:	60b9      	str	r1, [r7, #8]
 800fbcc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fbce:	f06f 030b 	mvn.w	r3, #11
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
	...

0800fbe0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d013      	beq.n	800fc18 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fbf0:	4b0d      	ldr	r3, [pc, #52]	; (800fc28 <netif_get_by_index+0x48>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	60fb      	str	r3, [r7, #12]
 800fbf6:	e00c      	b.n	800fc12 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbfe:	3301      	adds	r3, #1
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	79fa      	ldrb	r2, [r7, #7]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d101      	bne.n	800fc0c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	e006      	b.n	800fc1a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	60fb      	str	r3, [r7, #12]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d1ef      	bne.n	800fbf8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	20007fec 	.word	0x20007fec

0800fc2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fc30:	4b03      	ldr	r3, [pc, #12]	; (800fc40 <pbuf_pool_is_empty+0x14>)
 800fc32:	2201      	movs	r2, #1
 800fc34:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fc36:	bf00      	nop
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr
 800fc40:	20007ff5 	.word	0x20007ff5

0800fc44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	4611      	mov	r1, r2
 800fc50:	461a      	mov	r2, r3
 800fc52:	460b      	mov	r3, r1
 800fc54:	80fb      	strh	r3, [r7, #6]
 800fc56:	4613      	mov	r3, r2
 800fc58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	88fa      	ldrh	r2, [r7, #6]
 800fc6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	88ba      	ldrh	r2, [r7, #4]
 800fc70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fc72:	8b3b      	ldrh	r3, [r7, #24]
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	7f3a      	ldrb	r2, [r7, #28]
 800fc7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2201      	movs	r2, #1
 800fc84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	73da      	strb	r2, [r3, #15]
}
 800fc8c:	bf00      	nop
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b08c      	sub	sp, #48	; 0x30
 800fc9c:	af02      	add	r7, sp, #8
 800fc9e:	4603      	mov	r3, r0
 800fca0:	71fb      	strb	r3, [r7, #7]
 800fca2:	460b      	mov	r3, r1
 800fca4:	80bb      	strh	r3, [r7, #4]
 800fca6:	4613      	mov	r3, r2
 800fca8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fcaa:	79fb      	ldrb	r3, [r7, #7]
 800fcac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fcae:	887b      	ldrh	r3, [r7, #2]
 800fcb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fcb4:	d07f      	beq.n	800fdb6 <pbuf_alloc+0x11e>
 800fcb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fcba:	f300 80c8 	bgt.w	800fe4e <pbuf_alloc+0x1b6>
 800fcbe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fcc2:	d010      	beq.n	800fce6 <pbuf_alloc+0x4e>
 800fcc4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fcc8:	f300 80c1 	bgt.w	800fe4e <pbuf_alloc+0x1b6>
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d002      	beq.n	800fcd6 <pbuf_alloc+0x3e>
 800fcd0:	2b41      	cmp	r3, #65	; 0x41
 800fcd2:	f040 80bc 	bne.w	800fe4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fcd6:	887a      	ldrh	r2, [r7, #2]
 800fcd8:	88bb      	ldrh	r3, [r7, #4]
 800fcda:	4619      	mov	r1, r3
 800fcdc:	2000      	movs	r0, #0
 800fcde:	f000 f8d1 	bl	800fe84 <pbuf_alloc_reference>
 800fce2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fce4:	e0bd      	b.n	800fe62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fce6:	2300      	movs	r3, #0
 800fce8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fcea:	2300      	movs	r3, #0
 800fcec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fcee:	88bb      	ldrh	r3, [r7, #4]
 800fcf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fcf2:	2008      	movs	r0, #8
 800fcf4:	f7ff fbee 	bl	800f4d4 <memp_malloc>
 800fcf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d109      	bne.n	800fd14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fd00:	f7ff ff94 	bl	800fc2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fd0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd0c:	f000 faa8 	bl	8010260 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e0a7      	b.n	800fe64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fd14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd16:	3303      	adds	r3, #3
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	f023 0303 	bic.w	r3, r3, #3
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	8b7a      	ldrh	r2, [r7, #26]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	bf28      	it	cs
 800fd2c:	4613      	movcs	r3, r2
 800fd2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fd30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd32:	3310      	adds	r3, #16
 800fd34:	693a      	ldr	r2, [r7, #16]
 800fd36:	4413      	add	r3, r2
 800fd38:	3303      	adds	r3, #3
 800fd3a:	f023 0303 	bic.w	r3, r3, #3
 800fd3e:	4618      	mov	r0, r3
 800fd40:	89f9      	ldrh	r1, [r7, #14]
 800fd42:	8b7a      	ldrh	r2, [r7, #26]
 800fd44:	2300      	movs	r3, #0
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	887b      	ldrh	r3, [r7, #2]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4601      	mov	r1, r0
 800fd50:	6938      	ldr	r0, [r7, #16]
 800fd52:	f7ff ff77 	bl	800fc44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f003 0303 	and.w	r3, r3, #3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d006      	beq.n	800fd70 <pbuf_alloc+0xd8>
 800fd62:	4b42      	ldr	r3, [pc, #264]	; (800fe6c <pbuf_alloc+0x1d4>)
 800fd64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd68:	4941      	ldr	r1, [pc, #260]	; (800fe70 <pbuf_alloc+0x1d8>)
 800fd6a:	4842      	ldr	r0, [pc, #264]	; (800fe74 <pbuf_alloc+0x1dc>)
 800fd6c:	f009 f93a 	bl	8018fe4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fd70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd72:	3303      	adds	r3, #3
 800fd74:	f023 0303 	bic.w	r3, r3, #3
 800fd78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fd7c:	d106      	bne.n	800fd8c <pbuf_alloc+0xf4>
 800fd7e:	4b3b      	ldr	r3, [pc, #236]	; (800fe6c <pbuf_alloc+0x1d4>)
 800fd80:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fd84:	493c      	ldr	r1, [pc, #240]	; (800fe78 <pbuf_alloc+0x1e0>)
 800fd86:	483b      	ldr	r0, [pc, #236]	; (800fe74 <pbuf_alloc+0x1dc>)
 800fd88:	f009 f92c 	bl	8018fe4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d102      	bne.n	800fd98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	627b      	str	r3, [r7, #36]	; 0x24
 800fd96:	e002      	b.n	800fd9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	693a      	ldr	r2, [r7, #16]
 800fd9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fda2:	8b7a      	ldrh	r2, [r7, #26]
 800fda4:	89fb      	ldrh	r3, [r7, #14]
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fdae:	8b7b      	ldrh	r3, [r7, #26]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d19e      	bne.n	800fcf2 <pbuf_alloc+0x5a>
      break;
 800fdb4:	e055      	b.n	800fe62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fdb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdb8:	3303      	adds	r3, #3
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	f023 0303 	bic.w	r3, r3, #3
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	88bb      	ldrh	r3, [r7, #4]
 800fdc4:	3303      	adds	r3, #3
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	f023 0303 	bic.w	r3, r3, #3
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	4413      	add	r3, r2
 800fdd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fdd2:	8b3b      	ldrh	r3, [r7, #24]
 800fdd4:	3310      	adds	r3, #16
 800fdd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fdd8:	8b3a      	ldrh	r2, [r7, #24]
 800fdda:	88bb      	ldrh	r3, [r7, #4]
 800fddc:	3303      	adds	r3, #3
 800fdde:	f023 0303 	bic.w	r3, r3, #3
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d306      	bcc.n	800fdf4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fde6:	8afa      	ldrh	r2, [r7, #22]
 800fde8:	88bb      	ldrh	r3, [r7, #4]
 800fdea:	3303      	adds	r3, #3
 800fdec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d201      	bcs.n	800fdf8 <pbuf_alloc+0x160>
        return NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	e035      	b.n	800fe64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fdf8:	8afb      	ldrh	r3, [r7, #22]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7ff f9da 	bl	800f1b4 <mem_malloc>
 800fe00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <pbuf_alloc+0x174>
        return NULL;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	e02b      	b.n	800fe64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fe0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe0e:	3310      	adds	r3, #16
 800fe10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe12:	4413      	add	r3, r2
 800fe14:	3303      	adds	r3, #3
 800fe16:	f023 0303 	bic.w	r3, r3, #3
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	88b9      	ldrh	r1, [r7, #4]
 800fe1e:	88ba      	ldrh	r2, [r7, #4]
 800fe20:	2300      	movs	r3, #0
 800fe22:	9301      	str	r3, [sp, #4]
 800fe24:	887b      	ldrh	r3, [r7, #2]
 800fe26:	9300      	str	r3, [sp, #0]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	4601      	mov	r1, r0
 800fe2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe2e:	f7ff ff09 	bl	800fc44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	f003 0303 	and.w	r3, r3, #3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d010      	beq.n	800fe60 <pbuf_alloc+0x1c8>
 800fe3e:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <pbuf_alloc+0x1d4>)
 800fe40:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fe44:	490d      	ldr	r1, [pc, #52]	; (800fe7c <pbuf_alloc+0x1e4>)
 800fe46:	480b      	ldr	r0, [pc, #44]	; (800fe74 <pbuf_alloc+0x1dc>)
 800fe48:	f009 f8cc 	bl	8018fe4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fe4c:	e008      	b.n	800fe60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fe4e:	4b07      	ldr	r3, [pc, #28]	; (800fe6c <pbuf_alloc+0x1d4>)
 800fe50:	f240 1227 	movw	r2, #295	; 0x127
 800fe54:	490a      	ldr	r1, [pc, #40]	; (800fe80 <pbuf_alloc+0x1e8>)
 800fe56:	4807      	ldr	r0, [pc, #28]	; (800fe74 <pbuf_alloc+0x1dc>)
 800fe58:	f009 f8c4 	bl	8018fe4 <iprintf>
      return NULL;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	e001      	b.n	800fe64 <pbuf_alloc+0x1cc>
      break;
 800fe60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3728      	adds	r7, #40	; 0x28
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	0801bc90 	.word	0x0801bc90
 800fe70:	0801bcc0 	.word	0x0801bcc0
 800fe74:	0801bcf0 	.word	0x0801bcf0
 800fe78:	0801bd18 	.word	0x0801bd18
 800fe7c:	0801bd4c 	.word	0x0801bd4c
 800fe80:	0801bd78 	.word	0x0801bd78

0800fe84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af02      	add	r7, sp, #8
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	807b      	strh	r3, [r7, #2]
 800fe90:	4613      	mov	r3, r2
 800fe92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fe94:	883b      	ldrh	r3, [r7, #0]
 800fe96:	2b41      	cmp	r3, #65	; 0x41
 800fe98:	d009      	beq.n	800feae <pbuf_alloc_reference+0x2a>
 800fe9a:	883b      	ldrh	r3, [r7, #0]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d006      	beq.n	800feae <pbuf_alloc_reference+0x2a>
 800fea0:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <pbuf_alloc_reference+0x5c>)
 800fea2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fea6:	490f      	ldr	r1, [pc, #60]	; (800fee4 <pbuf_alloc_reference+0x60>)
 800fea8:	480f      	ldr	r0, [pc, #60]	; (800fee8 <pbuf_alloc_reference+0x64>)
 800feaa:	f009 f89b 	bl	8018fe4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800feae:	2007      	movs	r0, #7
 800feb0:	f7ff fb10 	bl	800f4d4 <memp_malloc>
 800feb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d101      	bne.n	800fec0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800febc:	2300      	movs	r3, #0
 800febe:	e00b      	b.n	800fed8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fec0:	8879      	ldrh	r1, [r7, #2]
 800fec2:	887a      	ldrh	r2, [r7, #2]
 800fec4:	2300      	movs	r3, #0
 800fec6:	9301      	str	r3, [sp, #4]
 800fec8:	883b      	ldrh	r3, [r7, #0]
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	460b      	mov	r3, r1
 800fece:	6879      	ldr	r1, [r7, #4]
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff feb7 	bl	800fc44 <pbuf_init_alloced_pbuf>
  return p;
 800fed6:	68fb      	ldr	r3, [r7, #12]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	0801bc90 	.word	0x0801bc90
 800fee4:	0801bd94 	.word	0x0801bd94
 800fee8:	0801bcf0 	.word	0x0801bcf0

0800feec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af02      	add	r7, sp, #8
 800fef2:	607b      	str	r3, [r7, #4]
 800fef4:	4603      	mov	r3, r0
 800fef6:	73fb      	strb	r3, [r7, #15]
 800fef8:	460b      	mov	r3, r1
 800fefa:	81bb      	strh	r3, [r7, #12]
 800fefc:	4613      	mov	r3, r2
 800fefe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
 800ff02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff04:	8a7b      	ldrh	r3, [r7, #18]
 800ff06:	3303      	adds	r3, #3
 800ff08:	f023 0203 	bic.w	r2, r3, #3
 800ff0c:	89bb      	ldrh	r3, [r7, #12]
 800ff0e:	441a      	add	r2, r3
 800ff10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d901      	bls.n	800ff1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ff16:	2300      	movs	r3, #0
 800ff18:	e018      	b.n	800ff4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d007      	beq.n	800ff30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ff20:	8a7b      	ldrh	r3, [r7, #18]
 800ff22:	3303      	adds	r3, #3
 800ff24:	f023 0303 	bic.w	r3, r3, #3
 800ff28:	6a3a      	ldr	r2, [r7, #32]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	617b      	str	r3, [r7, #20]
 800ff2e:	e001      	b.n	800ff34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ff30:	2300      	movs	r3, #0
 800ff32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	89b9      	ldrh	r1, [r7, #12]
 800ff38:	89ba      	ldrh	r2, [r7, #12]
 800ff3a:	2302      	movs	r3, #2
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	897b      	ldrh	r3, [r7, #10]
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	460b      	mov	r3, r1
 800ff44:	6979      	ldr	r1, [r7, #20]
 800ff46:	f7ff fe7d 	bl	800fc44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ff4a:	687b      	ldr	r3, [r7, #4]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3718      	adds	r7, #24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d106      	bne.n	800ff74 <pbuf_realloc+0x20>
 800ff66:	4b3a      	ldr	r3, [pc, #232]	; (8010050 <pbuf_realloc+0xfc>)
 800ff68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ff6c:	4939      	ldr	r1, [pc, #228]	; (8010054 <pbuf_realloc+0x100>)
 800ff6e:	483a      	ldr	r0, [pc, #232]	; (8010058 <pbuf_realloc+0x104>)
 800ff70:	f009 f838 	bl	8018fe4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	891b      	ldrh	r3, [r3, #8]
 800ff78:	887a      	ldrh	r2, [r7, #2]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d263      	bcs.n	8010046 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	891a      	ldrh	r2, [r3, #8]
 800ff82:	887b      	ldrh	r3, [r7, #2]
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ff88:	887b      	ldrh	r3, [r7, #2]
 800ff8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ff90:	e018      	b.n	800ffc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	895b      	ldrh	r3, [r3, #10]
 800ff96:	897a      	ldrh	r2, [r7, #10]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	891a      	ldrh	r2, [r3, #8]
 800ffa0:	893b      	ldrh	r3, [r7, #8]
 800ffa2:	1ad3      	subs	r3, r2, r3
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <pbuf_realloc+0x70>
 800ffb6:	4b26      	ldr	r3, [pc, #152]	; (8010050 <pbuf_realloc+0xfc>)
 800ffb8:	f240 12af 	movw	r2, #431	; 0x1af
 800ffbc:	4927      	ldr	r1, [pc, #156]	; (801005c <pbuf_realloc+0x108>)
 800ffbe:	4826      	ldr	r0, [pc, #152]	; (8010058 <pbuf_realloc+0x104>)
 800ffc0:	f009 f810 	bl	8018fe4 <iprintf>
  while (rem_len > q->len) {
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	895b      	ldrh	r3, [r3, #10]
 800ffc8:	897a      	ldrh	r2, [r7, #10]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d8e1      	bhi.n	800ff92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	7b1b      	ldrb	r3, [r3, #12]
 800ffd2:	f003 030f 	and.w	r3, r3, #15
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d121      	bne.n	801001e <pbuf_realloc+0xca>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	895b      	ldrh	r3, [r3, #10]
 800ffde:	897a      	ldrh	r2, [r7, #10]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d01c      	beq.n	801001e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	7b5b      	ldrb	r3, [r3, #13]
 800ffe8:	f003 0302 	and.w	r3, r3, #2
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d116      	bne.n	801001e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	897b      	ldrh	r3, [r7, #10]
 800fffc:	4413      	add	r3, r2
 800fffe:	b29b      	uxth	r3, r3
 8010000:	4619      	mov	r1, r3
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7fe ffda 	bl	800efbc <mem_trim>
 8010008:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d106      	bne.n	801001e <pbuf_realloc+0xca>
 8010010:	4b0f      	ldr	r3, [pc, #60]	; (8010050 <pbuf_realloc+0xfc>)
 8010012:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010016:	4912      	ldr	r1, [pc, #72]	; (8010060 <pbuf_realloc+0x10c>)
 8010018:	480f      	ldr	r0, [pc, #60]	; (8010058 <pbuf_realloc+0x104>)
 801001a:	f008 ffe3 	bl	8018fe4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	897a      	ldrh	r2, [r7, #10]
 8010022:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	895a      	ldrh	r2, [r3, #10]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d004      	beq.n	801003e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4618      	mov	r0, r3
 801003a:	f000 f911 	bl	8010260 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	e000      	b.n	8010048 <pbuf_realloc+0xf4>
    return;
 8010046:	bf00      	nop

}
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	0801bc90 	.word	0x0801bc90
 8010054:	0801bda8 	.word	0x0801bda8
 8010058:	0801bcf0 	.word	0x0801bcf0
 801005c:	0801bdc0 	.word	0x0801bdc0
 8010060:	0801bdd8 	.word	0x0801bdd8

08010064 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	4613      	mov	r3, r2
 8010070:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d106      	bne.n	8010086 <pbuf_add_header_impl+0x22>
 8010078:	4b2b      	ldr	r3, [pc, #172]	; (8010128 <pbuf_add_header_impl+0xc4>)
 801007a:	f240 12df 	movw	r2, #479	; 0x1df
 801007e:	492b      	ldr	r1, [pc, #172]	; (801012c <pbuf_add_header_impl+0xc8>)
 8010080:	482b      	ldr	r0, [pc, #172]	; (8010130 <pbuf_add_header_impl+0xcc>)
 8010082:	f008 ffaf 	bl	8018fe4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d003      	beq.n	8010094 <pbuf_add_header_impl+0x30>
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010092:	d301      	bcc.n	8010098 <pbuf_add_header_impl+0x34>
    return 1;
 8010094:	2301      	movs	r3, #1
 8010096:	e043      	b.n	8010120 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <pbuf_add_header_impl+0x3e>
    return 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	e03e      	b.n	8010120 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	891a      	ldrh	r2, [r3, #8]
 80100aa:	8a7b      	ldrh	r3, [r7, #18]
 80100ac:	4413      	add	r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	8a7a      	ldrh	r2, [r7, #18]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d901      	bls.n	80100ba <pbuf_add_header_impl+0x56>
    return 1;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e032      	b.n	8010120 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	7b1b      	ldrb	r3, [r3, #12]
 80100be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80100c0:	8a3b      	ldrh	r3, [r7, #16]
 80100c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00c      	beq.n	80100e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	425b      	negs	r3, r3
 80100d2:	4413      	add	r3, r2
 80100d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	3310      	adds	r3, #16
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d20d      	bcs.n	80100fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80100e0:	2301      	movs	r3, #1
 80100e2:	e01d      	b.n	8010120 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d006      	beq.n	80100f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	425b      	negs	r3, r3
 80100f2:	4413      	add	r3, r2
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	e001      	b.n	80100fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e011      	b.n	8010120 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	895a      	ldrh	r2, [r3, #10]
 8010106:	8a7b      	ldrh	r3, [r7, #18]
 8010108:	4413      	add	r3, r2
 801010a:	b29a      	uxth	r2, r3
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	891a      	ldrh	r2, [r3, #8]
 8010114:	8a7b      	ldrh	r3, [r7, #18]
 8010116:	4413      	add	r3, r2
 8010118:	b29a      	uxth	r2, r3
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	811a      	strh	r2, [r3, #8]


  return 0;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	0801bc90 	.word	0x0801bc90
 801012c:	0801bdf4 	.word	0x0801bdf4
 8010130:	0801bcf0 	.word	0x0801bcf0

08010134 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801013e:	2200      	movs	r2, #0
 8010140:	6839      	ldr	r1, [r7, #0]
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7ff ff8e 	bl	8010064 <pbuf_add_header_impl>
 8010148:	4603      	mov	r3, r0
}
 801014a:	4618      	mov	r0, r3
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
	...

08010154 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d106      	bne.n	8010172 <pbuf_remove_header+0x1e>
 8010164:	4b20      	ldr	r3, [pc, #128]	; (80101e8 <pbuf_remove_header+0x94>)
 8010166:	f240 224b 	movw	r2, #587	; 0x24b
 801016a:	4920      	ldr	r1, [pc, #128]	; (80101ec <pbuf_remove_header+0x98>)
 801016c:	4820      	ldr	r0, [pc, #128]	; (80101f0 <pbuf_remove_header+0x9c>)
 801016e:	f008 ff39 	bl	8018fe4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d003      	beq.n	8010180 <pbuf_remove_header+0x2c>
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801017e:	d301      	bcc.n	8010184 <pbuf_remove_header+0x30>
    return 1;
 8010180:	2301      	movs	r3, #1
 8010182:	e02c      	b.n	80101de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d101      	bne.n	801018e <pbuf_remove_header+0x3a>
    return 0;
 801018a:	2300      	movs	r3, #0
 801018c:	e027      	b.n	80101de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	895b      	ldrh	r3, [r3, #10]
 8010196:	89fa      	ldrh	r2, [r7, #14]
 8010198:	429a      	cmp	r2, r3
 801019a:	d908      	bls.n	80101ae <pbuf_remove_header+0x5a>
 801019c:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <pbuf_remove_header+0x94>)
 801019e:	f240 2255 	movw	r2, #597	; 0x255
 80101a2:	4914      	ldr	r1, [pc, #80]	; (80101f4 <pbuf_remove_header+0xa0>)
 80101a4:	4812      	ldr	r0, [pc, #72]	; (80101f0 <pbuf_remove_header+0x9c>)
 80101a6:	f008 ff1d 	bl	8018fe4 <iprintf>
 80101aa:	2301      	movs	r3, #1
 80101ac:	e017      	b.n	80101de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	441a      	add	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	895a      	ldrh	r2, [r3, #10]
 80101c4:	89fb      	ldrh	r3, [r7, #14]
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	891a      	ldrh	r2, [r3, #8]
 80101d2:	89fb      	ldrh	r3, [r7, #14]
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	0801bc90 	.word	0x0801bc90
 80101ec:	0801bdf4 	.word	0x0801bdf4
 80101f0:	0801bcf0 	.word	0x0801bcf0
 80101f4:	0801be00 	.word	0x0801be00

080101f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	460b      	mov	r3, r1
 8010202:	807b      	strh	r3, [r7, #2]
 8010204:	4613      	mov	r3, r2
 8010206:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801020c:	2b00      	cmp	r3, #0
 801020e:	da08      	bge.n	8010222 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010214:	425b      	negs	r3, r3
 8010216:	4619      	mov	r1, r3
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7ff ff9b 	bl	8010154 <pbuf_remove_header>
 801021e:	4603      	mov	r3, r0
 8010220:	e007      	b.n	8010232 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010222:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010226:	787a      	ldrb	r2, [r7, #1]
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7ff ff1a 	bl	8010064 <pbuf_add_header_impl>
 8010230:	4603      	mov	r3, r0
  }
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	460b      	mov	r3, r1
 8010244:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801024a:	2201      	movs	r2, #1
 801024c:	4619      	mov	r1, r3
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7ff ffd2 	bl	80101f8 <pbuf_header_impl>
 8010254:	4603      	mov	r3, r0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
	...

08010260 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10b      	bne.n	8010286 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d106      	bne.n	8010282 <pbuf_free+0x22>
 8010274:	4b38      	ldr	r3, [pc, #224]	; (8010358 <pbuf_free+0xf8>)
 8010276:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801027a:	4938      	ldr	r1, [pc, #224]	; (801035c <pbuf_free+0xfc>)
 801027c:	4838      	ldr	r0, [pc, #224]	; (8010360 <pbuf_free+0x100>)
 801027e:	f008 feb1 	bl	8018fe4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010282:	2300      	movs	r3, #0
 8010284:	e063      	b.n	801034e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801028a:	e05c      	b.n	8010346 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	7b9b      	ldrb	r3, [r3, #14]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d106      	bne.n	80102a2 <pbuf_free+0x42>
 8010294:	4b30      	ldr	r3, [pc, #192]	; (8010358 <pbuf_free+0xf8>)
 8010296:	f240 22f1 	movw	r2, #753	; 0x2f1
 801029a:	4932      	ldr	r1, [pc, #200]	; (8010364 <pbuf_free+0x104>)
 801029c:	4830      	ldr	r0, [pc, #192]	; (8010360 <pbuf_free+0x100>)
 801029e:	f008 fea1 	bl	8018fe4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	7b9b      	ldrb	r3, [r3, #14]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	b2da      	uxtb	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	739a      	strb	r2, [r3, #14]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	7b9b      	ldrb	r3, [r3, #14]
 80102b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80102b4:	7dbb      	ldrb	r3, [r7, #22]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d143      	bne.n	8010342 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	7b1b      	ldrb	r3, [r3, #12]
 80102c4:	f003 030f 	and.w	r3, r3, #15
 80102c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	7b5b      	ldrb	r3, [r3, #13]
 80102ce:	f003 0302 	and.w	r3, r3, #2
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d011      	beq.n	80102fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	691b      	ldr	r3, [r3, #16]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <pbuf_free+0x90>
 80102e2:	4b1d      	ldr	r3, [pc, #116]	; (8010358 <pbuf_free+0xf8>)
 80102e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80102e8:	491f      	ldr	r1, [pc, #124]	; (8010368 <pbuf_free+0x108>)
 80102ea:	481d      	ldr	r0, [pc, #116]	; (8010360 <pbuf_free+0x100>)
 80102ec:	f008 fe7a 	bl	8018fe4 <iprintf>
        pc->custom_free_function(p);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	4798      	blx	r3
 80102f8:	e01d      	b.n	8010336 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80102fa:	7bfb      	ldrb	r3, [r7, #15]
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d104      	bne.n	801030a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	2008      	movs	r0, #8
 8010304:	f7ff f956 	bl	800f5b4 <memp_free>
 8010308:	e015      	b.n	8010336 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d104      	bne.n	801031a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010310:	6879      	ldr	r1, [r7, #4]
 8010312:	2007      	movs	r0, #7
 8010314:	f7ff f94e 	bl	800f5b4 <memp_free>
 8010318:	e00d      	b.n	8010336 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801031a:	7bfb      	ldrb	r3, [r7, #15]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d103      	bne.n	8010328 <pbuf_free+0xc8>
          mem_free(p);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7fe fde1 	bl	800eee8 <mem_free>
 8010326:	e006      	b.n	8010336 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010328:	4b0b      	ldr	r3, [pc, #44]	; (8010358 <pbuf_free+0xf8>)
 801032a:	f240 320f 	movw	r2, #783	; 0x30f
 801032e:	490f      	ldr	r1, [pc, #60]	; (801036c <pbuf_free+0x10c>)
 8010330:	480b      	ldr	r0, [pc, #44]	; (8010360 <pbuf_free+0x100>)
 8010332:	f008 fe57 	bl	8018fe4 <iprintf>
        }
      }
      count++;
 8010336:	7dfb      	ldrb	r3, [r7, #23]
 8010338:	3301      	adds	r3, #1
 801033a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	607b      	str	r3, [r7, #4]
 8010340:	e001      	b.n	8010346 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010342:	2300      	movs	r3, #0
 8010344:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d19f      	bne.n	801028c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801034c:	7dfb      	ldrb	r3, [r7, #23]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	0801bc90 	.word	0x0801bc90
 801035c:	0801bdf4 	.word	0x0801bdf4
 8010360:	0801bcf0 	.word	0x0801bcf0
 8010364:	0801be20 	.word	0x0801be20
 8010368:	0801be38 	.word	0x0801be38
 801036c:	0801be5c 	.word	0x0801be5c

08010370 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010378:	2300      	movs	r3, #0
 801037a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801037c:	e005      	b.n	801038a <pbuf_clen+0x1a>
    ++len;
 801037e:	89fb      	ldrh	r3, [r7, #14]
 8010380:	3301      	adds	r3, #1
 8010382:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1f6      	bne.n	801037e <pbuf_clen+0xe>
  }
  return len;
 8010390:	89fb      	ldrh	r3, [r7, #14]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
	...

080103a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d010      	beq.n	80103d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	7b9b      	ldrb	r3, [r3, #14]
 80103b2:	3301      	adds	r3, #1
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	7b9b      	ldrb	r3, [r3, #14]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d106      	bne.n	80103d0 <pbuf_ref+0x30>
 80103c2:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <pbuf_ref+0x38>)
 80103c4:	f240 3242 	movw	r2, #834	; 0x342
 80103c8:	4904      	ldr	r1, [pc, #16]	; (80103dc <pbuf_ref+0x3c>)
 80103ca:	4805      	ldr	r0, [pc, #20]	; (80103e0 <pbuf_ref+0x40>)
 80103cc:	f008 fe0a 	bl	8018fe4 <iprintf>
  }
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	0801bc90 	.word	0x0801bc90
 80103dc:	0801be70 	.word	0x0801be70
 80103e0:	0801bcf0 	.word	0x0801bcf0

080103e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <pbuf_cat+0x16>
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d107      	bne.n	801040a <pbuf_cat+0x26>
 80103fa:	4b20      	ldr	r3, [pc, #128]	; (801047c <pbuf_cat+0x98>)
 80103fc:	f240 3259 	movw	r2, #857	; 0x359
 8010400:	491f      	ldr	r1, [pc, #124]	; (8010480 <pbuf_cat+0x9c>)
 8010402:	4820      	ldr	r0, [pc, #128]	; (8010484 <pbuf_cat+0xa0>)
 8010404:	f008 fdee 	bl	8018fe4 <iprintf>
 8010408:	e034      	b.n	8010474 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	e00a      	b.n	8010426 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	891a      	ldrh	r2, [r3, #8]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	891b      	ldrh	r3, [r3, #8]
 8010418:	4413      	add	r3, r2
 801041a:	b29a      	uxth	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	60fb      	str	r3, [r7, #12]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1f0      	bne.n	8010410 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	891a      	ldrh	r2, [r3, #8]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	895b      	ldrh	r3, [r3, #10]
 8010436:	429a      	cmp	r2, r3
 8010438:	d006      	beq.n	8010448 <pbuf_cat+0x64>
 801043a:	4b10      	ldr	r3, [pc, #64]	; (801047c <pbuf_cat+0x98>)
 801043c:	f240 3262 	movw	r2, #866	; 0x362
 8010440:	4911      	ldr	r1, [pc, #68]	; (8010488 <pbuf_cat+0xa4>)
 8010442:	4810      	ldr	r0, [pc, #64]	; (8010484 <pbuf_cat+0xa0>)
 8010444:	f008 fdce 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d006      	beq.n	801045e <pbuf_cat+0x7a>
 8010450:	4b0a      	ldr	r3, [pc, #40]	; (801047c <pbuf_cat+0x98>)
 8010452:	f240 3263 	movw	r2, #867	; 0x363
 8010456:	490d      	ldr	r1, [pc, #52]	; (801048c <pbuf_cat+0xa8>)
 8010458:	480a      	ldr	r0, [pc, #40]	; (8010484 <pbuf_cat+0xa0>)
 801045a:	f008 fdc3 	bl	8018fe4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	891a      	ldrh	r2, [r3, #8]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	891b      	ldrh	r3, [r3, #8]
 8010466:	4413      	add	r3, r2
 8010468:	b29a      	uxth	r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	0801bc90 	.word	0x0801bc90
 8010480:	0801be84 	.word	0x0801be84
 8010484:	0801bcf0 	.word	0x0801bcf0
 8010488:	0801bebc 	.word	0x0801bebc
 801048c:	0801beec 	.word	0x0801beec

08010490 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801049a:	2300      	movs	r3, #0
 801049c:	617b      	str	r3, [r7, #20]
 801049e:	2300      	movs	r3, #0
 80104a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d008      	beq.n	80104ba <pbuf_copy+0x2a>
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d005      	beq.n	80104ba <pbuf_copy+0x2a>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	891a      	ldrh	r2, [r3, #8]
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	891b      	ldrh	r3, [r3, #8]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d209      	bcs.n	80104ce <pbuf_copy+0x3e>
 80104ba:	4b57      	ldr	r3, [pc, #348]	; (8010618 <pbuf_copy+0x188>)
 80104bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80104c0:	4956      	ldr	r1, [pc, #344]	; (801061c <pbuf_copy+0x18c>)
 80104c2:	4857      	ldr	r0, [pc, #348]	; (8010620 <pbuf_copy+0x190>)
 80104c4:	f008 fd8e 	bl	8018fe4 <iprintf>
 80104c8:	f06f 030f 	mvn.w	r3, #15
 80104cc:	e09f      	b.n	801060e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	895b      	ldrh	r3, [r3, #10]
 80104d2:	461a      	mov	r2, r3
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	1ad2      	subs	r2, r2, r3
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	895b      	ldrh	r3, [r3, #10]
 80104dc:	4619      	mov	r1, r3
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	1acb      	subs	r3, r1, r3
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d306      	bcc.n	80104f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	895b      	ldrh	r3, [r3, #10]
 80104ea:	461a      	mov	r2, r3
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	60fb      	str	r3, [r7, #12]
 80104f2:	e005      	b.n	8010500 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	895b      	ldrh	r3, [r3, #10]
 80104f8:	461a      	mov	r2, r3
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	1ad3      	subs	r3, r2, r3
 80104fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685a      	ldr	r2, [r3, #4]
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	18d0      	adds	r0, r2, r3
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	4413      	add	r3, r2
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	4619      	mov	r1, r3
 8010514:	f008 ff34 	bl	8019380 <memcpy>
    offset_to += len;
 8010518:	697a      	ldr	r2, [r7, #20]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	4413      	add	r3, r2
 801051e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	4413      	add	r3, r2
 8010526:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	895b      	ldrh	r3, [r3, #10]
 801052c:	461a      	mov	r2, r3
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	4293      	cmp	r3, r2
 8010532:	d906      	bls.n	8010542 <pbuf_copy+0xb2>
 8010534:	4b38      	ldr	r3, [pc, #224]	; (8010618 <pbuf_copy+0x188>)
 8010536:	f240 32d9 	movw	r2, #985	; 0x3d9
 801053a:	493a      	ldr	r1, [pc, #232]	; (8010624 <pbuf_copy+0x194>)
 801053c:	4838      	ldr	r0, [pc, #224]	; (8010620 <pbuf_copy+0x190>)
 801053e:	f008 fd51 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	895b      	ldrh	r3, [r3, #10]
 8010546:	461a      	mov	r2, r3
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	4293      	cmp	r3, r2
 801054c:	d906      	bls.n	801055c <pbuf_copy+0xcc>
 801054e:	4b32      	ldr	r3, [pc, #200]	; (8010618 <pbuf_copy+0x188>)
 8010550:	f240 32da 	movw	r2, #986	; 0x3da
 8010554:	4934      	ldr	r1, [pc, #208]	; (8010628 <pbuf_copy+0x198>)
 8010556:	4832      	ldr	r0, [pc, #200]	; (8010620 <pbuf_copy+0x190>)
 8010558:	f008 fd44 	bl	8018fe4 <iprintf>
    if (offset_from >= p_from->len) {
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	895b      	ldrh	r3, [r3, #10]
 8010560:	461a      	mov	r2, r3
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	4293      	cmp	r3, r2
 8010566:	d304      	bcc.n	8010572 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	895b      	ldrh	r3, [r3, #10]
 8010576:	461a      	mov	r2, r3
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	4293      	cmp	r3, r2
 801057c:	d114      	bne.n	80105a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801057e:	2300      	movs	r3, #0
 8010580:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10c      	bne.n	80105a8 <pbuf_copy+0x118>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <pbuf_copy+0x118>
 8010594:	4b20      	ldr	r3, [pc, #128]	; (8010618 <pbuf_copy+0x188>)
 8010596:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801059a:	4924      	ldr	r1, [pc, #144]	; (801062c <pbuf_copy+0x19c>)
 801059c:	4820      	ldr	r0, [pc, #128]	; (8010620 <pbuf_copy+0x190>)
 801059e:	f008 fd21 	bl	8018fe4 <iprintf>
 80105a2:	f06f 030f 	mvn.w	r3, #15
 80105a6:	e032      	b.n	801060e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d013      	beq.n	80105d6 <pbuf_copy+0x146>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	895a      	ldrh	r2, [r3, #10]
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	891b      	ldrh	r3, [r3, #8]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d10d      	bne.n	80105d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d009      	beq.n	80105d6 <pbuf_copy+0x146>
 80105c2:	4b15      	ldr	r3, [pc, #84]	; (8010618 <pbuf_copy+0x188>)
 80105c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80105c8:	4919      	ldr	r1, [pc, #100]	; (8010630 <pbuf_copy+0x1a0>)
 80105ca:	4815      	ldr	r0, [pc, #84]	; (8010620 <pbuf_copy+0x190>)
 80105cc:	f008 fd0a 	bl	8018fe4 <iprintf>
 80105d0:	f06f 0305 	mvn.w	r3, #5
 80105d4:	e01b      	b.n	801060e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d013      	beq.n	8010604 <pbuf_copy+0x174>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	895a      	ldrh	r2, [r3, #10]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	891b      	ldrh	r3, [r3, #8]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d10d      	bne.n	8010604 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d009      	beq.n	8010604 <pbuf_copy+0x174>
 80105f0:	4b09      	ldr	r3, [pc, #36]	; (8010618 <pbuf_copy+0x188>)
 80105f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80105f6:	490e      	ldr	r1, [pc, #56]	; (8010630 <pbuf_copy+0x1a0>)
 80105f8:	4809      	ldr	r0, [pc, #36]	; (8010620 <pbuf_copy+0x190>)
 80105fa:	f008 fcf3 	bl	8018fe4 <iprintf>
 80105fe:	f06f 0305 	mvn.w	r3, #5
 8010602:	e004      	b.n	801060e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f47f af61 	bne.w	80104ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3718      	adds	r7, #24
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	0801bc90 	.word	0x0801bc90
 801061c:	0801bf38 	.word	0x0801bf38
 8010620:	0801bcf0 	.word	0x0801bcf0
 8010624:	0801bf68 	.word	0x0801bf68
 8010628:	0801bf80 	.word	0x0801bf80
 801062c:	0801bf9c 	.word	0x0801bf9c
 8010630:	0801bfac 	.word	0x0801bfac

08010634 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	4611      	mov	r1, r2
 8010640:	461a      	mov	r2, r3
 8010642:	460b      	mov	r3, r1
 8010644:	80fb      	strh	r3, [r7, #6]
 8010646:	4613      	mov	r3, r2
 8010648:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d108      	bne.n	801066a <pbuf_copy_partial+0x36>
 8010658:	4b2b      	ldr	r3, [pc, #172]	; (8010708 <pbuf_copy_partial+0xd4>)
 801065a:	f240 420a 	movw	r2, #1034	; 0x40a
 801065e:	492b      	ldr	r1, [pc, #172]	; (801070c <pbuf_copy_partial+0xd8>)
 8010660:	482b      	ldr	r0, [pc, #172]	; (8010710 <pbuf_copy_partial+0xdc>)
 8010662:	f008 fcbf 	bl	8018fe4 <iprintf>
 8010666:	2300      	movs	r3, #0
 8010668:	e04a      	b.n	8010700 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d108      	bne.n	8010682 <pbuf_copy_partial+0x4e>
 8010670:	4b25      	ldr	r3, [pc, #148]	; (8010708 <pbuf_copy_partial+0xd4>)
 8010672:	f240 420b 	movw	r2, #1035	; 0x40b
 8010676:	4927      	ldr	r1, [pc, #156]	; (8010714 <pbuf_copy_partial+0xe0>)
 8010678:	4825      	ldr	r0, [pc, #148]	; (8010710 <pbuf_copy_partial+0xdc>)
 801067a:	f008 fcb3 	bl	8018fe4 <iprintf>
 801067e:	2300      	movs	r3, #0
 8010680:	e03e      	b.n	8010700 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	61fb      	str	r3, [r7, #28]
 8010686:	e034      	b.n	80106f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010688:	88bb      	ldrh	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00a      	beq.n	80106a4 <pbuf_copy_partial+0x70>
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	895b      	ldrh	r3, [r3, #10]
 8010692:	88ba      	ldrh	r2, [r7, #4]
 8010694:	429a      	cmp	r2, r3
 8010696:	d305      	bcc.n	80106a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	895b      	ldrh	r3, [r3, #10]
 801069c:	88ba      	ldrh	r2, [r7, #4]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	80bb      	strh	r3, [r7, #4]
 80106a2:	e023      	b.n	80106ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	895a      	ldrh	r2, [r3, #10]
 80106a8:	88bb      	ldrh	r3, [r7, #4]
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80106ae:	8b3a      	ldrh	r2, [r7, #24]
 80106b0:	88fb      	ldrh	r3, [r7, #6]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d901      	bls.n	80106ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80106b6:	88fb      	ldrh	r3, [r7, #6]
 80106b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80106ba:	8b7b      	ldrh	r3, [r7, #26]
 80106bc:	68ba      	ldr	r2, [r7, #8]
 80106be:	18d0      	adds	r0, r2, r3
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	88bb      	ldrh	r3, [r7, #4]
 80106c6:	4413      	add	r3, r2
 80106c8:	8b3a      	ldrh	r2, [r7, #24]
 80106ca:	4619      	mov	r1, r3
 80106cc:	f008 fe58 	bl	8019380 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80106d0:	8afa      	ldrh	r2, [r7, #22]
 80106d2:	8b3b      	ldrh	r3, [r7, #24]
 80106d4:	4413      	add	r3, r2
 80106d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80106d8:	8b7a      	ldrh	r2, [r7, #26]
 80106da:	8b3b      	ldrh	r3, [r7, #24]
 80106dc:	4413      	add	r3, r2
 80106de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80106e0:	88fa      	ldrh	r2, [r7, #6]
 80106e2:	8b3b      	ldrh	r3, [r7, #24]
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	61fb      	str	r3, [r7, #28]
 80106f2:	88fb      	ldrh	r3, [r7, #6]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <pbuf_copy_partial+0xca>
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1c4      	bne.n	8010688 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80106fe:	8afb      	ldrh	r3, [r7, #22]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3720      	adds	r7, #32
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	0801bc90 	.word	0x0801bc90
 801070c:	0801bfd8 	.word	0x0801bfd8
 8010710:	0801bcf0 	.word	0x0801bcf0
 8010714:	0801bff8 	.word	0x0801bff8

08010718 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	603a      	str	r2, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
 8010724:	460b      	mov	r3, r1
 8010726:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	8919      	ldrh	r1, [r3, #8]
 801072c:	88ba      	ldrh	r2, [r7, #4]
 801072e:	79fb      	ldrb	r3, [r7, #7]
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fab1 	bl	800fc98 <pbuf_alloc>
 8010736:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d101      	bne.n	8010742 <pbuf_clone+0x2a>
    return NULL;
 801073e:	2300      	movs	r3, #0
 8010740:	e011      	b.n	8010766 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f7ff fea3 	bl	8010490 <pbuf_copy>
 801074a:	4603      	mov	r3, r0
 801074c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801074e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d006      	beq.n	8010764 <pbuf_clone+0x4c>
 8010756:	4b06      	ldr	r3, [pc, #24]	; (8010770 <pbuf_clone+0x58>)
 8010758:	f240 5224 	movw	r2, #1316	; 0x524
 801075c:	4905      	ldr	r1, [pc, #20]	; (8010774 <pbuf_clone+0x5c>)
 801075e:	4806      	ldr	r0, [pc, #24]	; (8010778 <pbuf_clone+0x60>)
 8010760:	f008 fc40 	bl	8018fe4 <iprintf>
  return q;
 8010764:	68fb      	ldr	r3, [r7, #12]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	0801bc90 	.word	0x0801bc90
 8010774:	0801c104 	.word	0x0801c104
 8010778:	0801bcf0 	.word	0x0801bcf0

0801077c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010780:	f007 ff06 	bl	8018590 <rand>
 8010784:	4603      	mov	r3, r0
 8010786:	b29b      	uxth	r3, r3
 8010788:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801078c:	b29b      	uxth	r3, r3
 801078e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010792:	b29a      	uxth	r2, r3
 8010794:	4b01      	ldr	r3, [pc, #4]	; (801079c <tcp_init+0x20>)
 8010796:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010798:	bf00      	nop
 801079a:	bd80      	pop	{r7, pc}
 801079c:	20000054 	.word	0x20000054

080107a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	7d1b      	ldrb	r3, [r3, #20]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d105      	bne.n	80107bc <tcp_free+0x1c>
 80107b0:	4b06      	ldr	r3, [pc, #24]	; (80107cc <tcp_free+0x2c>)
 80107b2:	22d4      	movs	r2, #212	; 0xd4
 80107b4:	4906      	ldr	r1, [pc, #24]	; (80107d0 <tcp_free+0x30>)
 80107b6:	4807      	ldr	r0, [pc, #28]	; (80107d4 <tcp_free+0x34>)
 80107b8:	f008 fc14 	bl	8018fe4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	2001      	movs	r0, #1
 80107c0:	f7fe fef8 	bl	800f5b4 <memp_free>
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	0801c190 	.word	0x0801c190
 80107d0:	0801c1c0 	.word	0x0801c1c0
 80107d4:	0801c1d4 	.word	0x0801c1d4

080107d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d105      	bne.n	80107f4 <tcp_free_listen+0x1c>
 80107e8:	4b06      	ldr	r3, [pc, #24]	; (8010804 <tcp_free_listen+0x2c>)
 80107ea:	22df      	movs	r2, #223	; 0xdf
 80107ec:	4906      	ldr	r1, [pc, #24]	; (8010808 <tcp_free_listen+0x30>)
 80107ee:	4807      	ldr	r0, [pc, #28]	; (801080c <tcp_free_listen+0x34>)
 80107f0:	f008 fbf8 	bl	8018fe4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80107f4:	6879      	ldr	r1, [r7, #4]
 80107f6:	2002      	movs	r0, #2
 80107f8:	f7fe fedc 	bl	800f5b4 <memp_free>
}
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	0801c190 	.word	0x0801c190
 8010808:	0801c1fc 	.word	0x0801c1fc
 801080c:	0801c1d4 	.word	0x0801c1d4

08010810 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010814:	f000 fea2 	bl	801155c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010818:	4b07      	ldr	r3, [pc, #28]	; (8010838 <tcp_tmr+0x28>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	3301      	adds	r3, #1
 801081e:	b2da      	uxtb	r2, r3
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <tcp_tmr+0x28>)
 8010822:	701a      	strb	r2, [r3, #0]
 8010824:	4b04      	ldr	r3, [pc, #16]	; (8010838 <tcp_tmr+0x28>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	2b00      	cmp	r3, #0
 801082e:	d001      	beq.n	8010834 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010830:	f000 fb54 	bl	8010edc <tcp_slowtmr>
  }
}
 8010834:	bf00      	nop
 8010836:	bd80      	pop	{r7, pc}
 8010838:	2000800d 	.word	0x2000800d

0801083c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d105      	bne.n	8010858 <tcp_remove_listener+0x1c>
 801084c:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <tcp_remove_listener+0x48>)
 801084e:	22ff      	movs	r2, #255	; 0xff
 8010850:	490d      	ldr	r1, [pc, #52]	; (8010888 <tcp_remove_listener+0x4c>)
 8010852:	480e      	ldr	r0, [pc, #56]	; (801088c <tcp_remove_listener+0x50>)
 8010854:	f008 fbc6 	bl	8018fe4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	e00a      	b.n	8010874 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010862:	683a      	ldr	r2, [r7, #0]
 8010864:	429a      	cmp	r2, r3
 8010866:	d102      	bne.n	801086e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	60fb      	str	r3, [r7, #12]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1f1      	bne.n	801085e <tcp_remove_listener+0x22>
    }
  }
}
 801087a:	bf00      	nop
 801087c:	bf00      	nop
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	0801c190 	.word	0x0801c190
 8010888:	0801c218 	.word	0x0801c218
 801088c:	0801c1d4 	.word	0x0801c1d4

08010890 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <tcp_listen_closed+0x1c>
 801089e:	4b14      	ldr	r3, [pc, #80]	; (80108f0 <tcp_listen_closed+0x60>)
 80108a0:	f240 1211 	movw	r2, #273	; 0x111
 80108a4:	4913      	ldr	r1, [pc, #76]	; (80108f4 <tcp_listen_closed+0x64>)
 80108a6:	4814      	ldr	r0, [pc, #80]	; (80108f8 <tcp_listen_closed+0x68>)
 80108a8:	f008 fb9c 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	7d1b      	ldrb	r3, [r3, #20]
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d006      	beq.n	80108c2 <tcp_listen_closed+0x32>
 80108b4:	4b0e      	ldr	r3, [pc, #56]	; (80108f0 <tcp_listen_closed+0x60>)
 80108b6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80108ba:	4910      	ldr	r1, [pc, #64]	; (80108fc <tcp_listen_closed+0x6c>)
 80108bc:	480e      	ldr	r0, [pc, #56]	; (80108f8 <tcp_listen_closed+0x68>)
 80108be:	f008 fb91 	bl	8018fe4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80108c2:	2301      	movs	r3, #1
 80108c4:	60fb      	str	r3, [r7, #12]
 80108c6:	e00b      	b.n	80108e0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80108c8:	4a0d      	ldr	r2, [pc, #52]	; (8010900 <tcp_listen_closed+0x70>)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	6879      	ldr	r1, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff ffb1 	bl	801083c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3301      	adds	r3, #1
 80108de:	60fb      	str	r3, [r7, #12]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d9f0      	bls.n	80108c8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	0801c190 	.word	0x0801c190
 80108f4:	0801c240 	.word	0x0801c240
 80108f8:	0801c1d4 	.word	0x0801c1d4
 80108fc:	0801c24c 	.word	0x0801c24c
 8010900:	0801e1ac 	.word	0x0801e1ac

08010904 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010904:	b5b0      	push	{r4, r5, r7, lr}
 8010906:	b088      	sub	sp, #32
 8010908:	af04      	add	r7, sp, #16
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d106      	bne.n	8010924 <tcp_close_shutdown+0x20>
 8010916:	4b63      	ldr	r3, [pc, #396]	; (8010aa4 <tcp_close_shutdown+0x1a0>)
 8010918:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801091c:	4962      	ldr	r1, [pc, #392]	; (8010aa8 <tcp_close_shutdown+0x1a4>)
 801091e:	4863      	ldr	r0, [pc, #396]	; (8010aac <tcp_close_shutdown+0x1a8>)
 8010920:	f008 fb60 	bl	8018fe4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010924:	78fb      	ldrb	r3, [r7, #3]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d066      	beq.n	80109f8 <tcp_close_shutdown+0xf4>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	7d1b      	ldrb	r3, [r3, #20]
 801092e:	2b04      	cmp	r3, #4
 8010930:	d003      	beq.n	801093a <tcp_close_shutdown+0x36>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	7d1b      	ldrb	r3, [r3, #20]
 8010936:	2b07      	cmp	r3, #7
 8010938:	d15e      	bne.n	80109f8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801093e:	2b00      	cmp	r3, #0
 8010940:	d104      	bne.n	801094c <tcp_close_shutdown+0x48>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010946:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801094a:	d055      	beq.n	80109f8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8b5b      	ldrh	r3, [r3, #26]
 8010950:	f003 0310 	and.w	r3, r3, #16
 8010954:	2b00      	cmp	r3, #0
 8010956:	d106      	bne.n	8010966 <tcp_close_shutdown+0x62>
 8010958:	4b52      	ldr	r3, [pc, #328]	; (8010aa4 <tcp_close_shutdown+0x1a0>)
 801095a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801095e:	4954      	ldr	r1, [pc, #336]	; (8010ab0 <tcp_close_shutdown+0x1ac>)
 8010960:	4852      	ldr	r0, [pc, #328]	; (8010aac <tcp_close_shutdown+0x1a8>)
 8010962:	f008 fb3f 	bl	8018fe4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801096e:	687d      	ldr	r5, [r7, #4]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	3304      	adds	r3, #4
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	8ad2      	ldrh	r2, [r2, #22]
 8010978:	6879      	ldr	r1, [r7, #4]
 801097a:	8b09      	ldrh	r1, [r1, #24]
 801097c:	9102      	str	r1, [sp, #8]
 801097e:	9201      	str	r2, [sp, #4]
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462b      	mov	r3, r5
 8010984:	4622      	mov	r2, r4
 8010986:	4601      	mov	r1, r0
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f004 fe91 	bl	80156b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f001 f8c6 	bl	8011b20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010994:	4b47      	ldr	r3, [pc, #284]	; (8010ab4 <tcp_close_shutdown+0x1b0>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	429a      	cmp	r2, r3
 801099c:	d105      	bne.n	80109aa <tcp_close_shutdown+0xa6>
 801099e:	4b45      	ldr	r3, [pc, #276]	; (8010ab4 <tcp_close_shutdown+0x1b0>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	4a43      	ldr	r2, [pc, #268]	; (8010ab4 <tcp_close_shutdown+0x1b0>)
 80109a6:	6013      	str	r3, [r2, #0]
 80109a8:	e013      	b.n	80109d2 <tcp_close_shutdown+0xce>
 80109aa:	4b42      	ldr	r3, [pc, #264]	; (8010ab4 <tcp_close_shutdown+0x1b0>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	60fb      	str	r3, [r7, #12]
 80109b0:	e00c      	b.n	80109cc <tcp_close_shutdown+0xc8>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d104      	bne.n	80109c6 <tcp_close_shutdown+0xc2>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	68da      	ldr	r2, [r3, #12]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	60da      	str	r2, [r3, #12]
 80109c4:	e005      	b.n	80109d2 <tcp_close_shutdown+0xce>
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	60fb      	str	r3, [r7, #12]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1ef      	bne.n	80109b2 <tcp_close_shutdown+0xae>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	60da      	str	r2, [r3, #12]
 80109d8:	4b37      	ldr	r3, [pc, #220]	; (8010ab8 <tcp_close_shutdown+0x1b4>)
 80109da:	2201      	movs	r2, #1
 80109dc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80109de:	4b37      	ldr	r3, [pc, #220]	; (8010abc <tcp_close_shutdown+0x1b8>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d102      	bne.n	80109ee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80109e8:	f003 fd5e 	bl	80144a8 <tcp_trigger_input_pcb_close>
 80109ec:	e002      	b.n	80109f4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f7ff fed6 	bl	80107a0 <tcp_free>
      }
      return ERR_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	e050      	b.n	8010a9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	7d1b      	ldrb	r3, [r3, #20]
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d03b      	beq.n	8010a78 <tcp_close_shutdown+0x174>
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	dc44      	bgt.n	8010a8e <tcp_close_shutdown+0x18a>
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <tcp_close_shutdown+0x10a>
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d02a      	beq.n	8010a62 <tcp_close_shutdown+0x15e>
 8010a0c:	e03f      	b.n	8010a8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	8adb      	ldrh	r3, [r3, #22]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d021      	beq.n	8010a5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a16:	4b2a      	ldr	r3, [pc, #168]	; (8010ac0 <tcp_close_shutdown+0x1bc>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d105      	bne.n	8010a2c <tcp_close_shutdown+0x128>
 8010a20:	4b27      	ldr	r3, [pc, #156]	; (8010ac0 <tcp_close_shutdown+0x1bc>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	4a26      	ldr	r2, [pc, #152]	; (8010ac0 <tcp_close_shutdown+0x1bc>)
 8010a28:	6013      	str	r3, [r2, #0]
 8010a2a:	e013      	b.n	8010a54 <tcp_close_shutdown+0x150>
 8010a2c:	4b24      	ldr	r3, [pc, #144]	; (8010ac0 <tcp_close_shutdown+0x1bc>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	60bb      	str	r3, [r7, #8]
 8010a32:	e00c      	b.n	8010a4e <tcp_close_shutdown+0x14a>
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d104      	bne.n	8010a48 <tcp_close_shutdown+0x144>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	68da      	ldr	r2, [r3, #12]
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	60da      	str	r2, [r3, #12]
 8010a46:	e005      	b.n	8010a54 <tcp_close_shutdown+0x150>
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	60bb      	str	r3, [r7, #8]
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1ef      	bne.n	8010a34 <tcp_close_shutdown+0x130>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff fea0 	bl	80107a0 <tcp_free>
      break;
 8010a60:	e01a      	b.n	8010a98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff ff14 	bl	8010890 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	4816      	ldr	r0, [pc, #88]	; (8010ac4 <tcp_close_shutdown+0x1c0>)
 8010a6c:	f001 f8a8 	bl	8011bc0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff feb1 	bl	80107d8 <tcp_free_listen>
      break;
 8010a76:	e00f      	b.n	8010a98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	480e      	ldr	r0, [pc, #56]	; (8010ab4 <tcp_close_shutdown+0x1b0>)
 8010a7c:	f001 f8a0 	bl	8011bc0 <tcp_pcb_remove>
 8010a80:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <tcp_close_shutdown+0x1b4>)
 8010a82:	2201      	movs	r2, #1
 8010a84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7ff fe8a 	bl	80107a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010a8c:	e004      	b.n	8010a98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 f81a 	bl	8010ac8 <tcp_close_shutdown_fin>
 8010a94:	4603      	mov	r3, r0
 8010a96:	e000      	b.n	8010a9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	0801c190 	.word	0x0801c190
 8010aa8:	0801c264 	.word	0x0801c264
 8010aac:	0801c1d4 	.word	0x0801c1d4
 8010ab0:	0801c284 	.word	0x0801c284
 8010ab4:	20008004 	.word	0x20008004
 8010ab8:	2000800c 	.word	0x2000800c
 8010abc:	20008044 	.word	0x20008044
 8010ac0:	20007ffc 	.word	0x20007ffc
 8010ac4:	20008000 	.word	0x20008000

08010ac8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <tcp_close_shutdown_fin+0x1c>
 8010ad6:	4b2e      	ldr	r3, [pc, #184]	; (8010b90 <tcp_close_shutdown_fin+0xc8>)
 8010ad8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010adc:	492d      	ldr	r1, [pc, #180]	; (8010b94 <tcp_close_shutdown_fin+0xcc>)
 8010ade:	482e      	ldr	r0, [pc, #184]	; (8010b98 <tcp_close_shutdown_fin+0xd0>)
 8010ae0:	f008 fa80 	bl	8018fe4 <iprintf>

  switch (pcb->state) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
 8010ae8:	2b07      	cmp	r3, #7
 8010aea:	d020      	beq.n	8010b2e <tcp_close_shutdown_fin+0x66>
 8010aec:	2b07      	cmp	r3, #7
 8010aee:	dc2b      	bgt.n	8010b48 <tcp_close_shutdown_fin+0x80>
 8010af0:	2b03      	cmp	r3, #3
 8010af2:	d002      	beq.n	8010afa <tcp_close_shutdown_fin+0x32>
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	d00d      	beq.n	8010b14 <tcp_close_shutdown_fin+0x4c>
 8010af8:	e026      	b.n	8010b48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f003 fee6 	bl	80148cc <tcp_send_fin>
 8010b00:	4603      	mov	r3, r0
 8010b02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d11f      	bne.n	8010b4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2205      	movs	r2, #5
 8010b10:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b12:	e01b      	b.n	8010b4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f003 fed9 	bl	80148cc <tcp_send_fin>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d114      	bne.n	8010b50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2205      	movs	r2, #5
 8010b2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b2c:	e010      	b.n	8010b50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f003 fecc 	bl	80148cc <tcp_send_fin>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d109      	bne.n	8010b54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2209      	movs	r2, #9
 8010b44:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b46:	e005      	b.n	8010b54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	e01c      	b.n	8010b86 <tcp_close_shutdown_fin+0xbe>
      break;
 8010b4c:	bf00      	nop
 8010b4e:	e002      	b.n	8010b56 <tcp_close_shutdown_fin+0x8e>
      break;
 8010b50:	bf00      	nop
 8010b52:	e000      	b.n	8010b56 <tcp_close_shutdown_fin+0x8e>
      break;
 8010b54:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f003 fff2 	bl	8014b48 <tcp_output>
 8010b64:	e00d      	b.n	8010b82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6e:	d108      	bne.n	8010b82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	8b5b      	ldrh	r3, [r3, #26]
 8010b74:	f043 0308 	orr.w	r3, r3, #8
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	e001      	b.n	8010b86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	0801c190 	.word	0x0801c190
 8010b94:	0801c240 	.word	0x0801c240
 8010b98:	0801c1d4 	.word	0x0801c1d4

08010b9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d109      	bne.n	8010bbe <tcp_close+0x22>
 8010baa:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <tcp_close+0x4c>)
 8010bac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010bb0:	490e      	ldr	r1, [pc, #56]	; (8010bec <tcp_close+0x50>)
 8010bb2:	480f      	ldr	r0, [pc, #60]	; (8010bf0 <tcp_close+0x54>)
 8010bb4:	f008 fa16 	bl	8018fe4 <iprintf>
 8010bb8:	f06f 030f 	mvn.w	r3, #15
 8010bbc:	e00f      	b.n	8010bde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	7d1b      	ldrb	r3, [r3, #20]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d006      	beq.n	8010bd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8b5b      	ldrh	r3, [r3, #26]
 8010bca:	f043 0310 	orr.w	r3, r3, #16
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010bd4:	2101      	movs	r1, #1
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7ff fe94 	bl	8010904 <tcp_close_shutdown>
 8010bdc:	4603      	mov	r3, r0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	0801c190 	.word	0x0801c190
 8010bec:	0801c2a0 	.word	0x0801c2a0
 8010bf0:	0801c1d4 	.word	0x0801c1d4

08010bf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b08e      	sub	sp, #56	; 0x38
 8010bf8:	af04      	add	r7, sp, #16
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d107      	bne.n	8010c14 <tcp_abandon+0x20>
 8010c04:	4b52      	ldr	r3, [pc, #328]	; (8010d50 <tcp_abandon+0x15c>)
 8010c06:	f240 223d 	movw	r2, #573	; 0x23d
 8010c0a:	4952      	ldr	r1, [pc, #328]	; (8010d54 <tcp_abandon+0x160>)
 8010c0c:	4852      	ldr	r0, [pc, #328]	; (8010d58 <tcp_abandon+0x164>)
 8010c0e:	f008 f9e9 	bl	8018fe4 <iprintf>
 8010c12:	e099      	b.n	8010d48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d106      	bne.n	8010c2a <tcp_abandon+0x36>
 8010c1c:	4b4c      	ldr	r3, [pc, #304]	; (8010d50 <tcp_abandon+0x15c>)
 8010c1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010c22:	494e      	ldr	r1, [pc, #312]	; (8010d5c <tcp_abandon+0x168>)
 8010c24:	484c      	ldr	r0, [pc, #304]	; (8010d58 <tcp_abandon+0x164>)
 8010c26:	f008 f9dd 	bl	8018fe4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	7d1b      	ldrb	r3, [r3, #20]
 8010c2e:	2b0a      	cmp	r3, #10
 8010c30:	d107      	bne.n	8010c42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	484a      	ldr	r0, [pc, #296]	; (8010d60 <tcp_abandon+0x16c>)
 8010c36:	f000 ffc3 	bl	8011bc0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7ff fdb0 	bl	80107a0 <tcp_free>
 8010c40:	e082      	b.n	8010d48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010c46:	2300      	movs	r3, #0
 8010c48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	7d1b      	ldrb	r3, [r3, #20]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d126      	bne.n	8010cba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	8adb      	ldrh	r3, [r3, #22]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d02e      	beq.n	8010cd2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c74:	4b3b      	ldr	r3, [pc, #236]	; (8010d64 <tcp_abandon+0x170>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d105      	bne.n	8010c8a <tcp_abandon+0x96>
 8010c7e:	4b39      	ldr	r3, [pc, #228]	; (8010d64 <tcp_abandon+0x170>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	4a37      	ldr	r2, [pc, #220]	; (8010d64 <tcp_abandon+0x170>)
 8010c86:	6013      	str	r3, [r2, #0]
 8010c88:	e013      	b.n	8010cb2 <tcp_abandon+0xbe>
 8010c8a:	4b36      	ldr	r3, [pc, #216]	; (8010d64 <tcp_abandon+0x170>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	61fb      	str	r3, [r7, #28]
 8010c90:	e00c      	b.n	8010cac <tcp_abandon+0xb8>
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d104      	bne.n	8010ca6 <tcp_abandon+0xb2>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	68da      	ldr	r2, [r3, #12]
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	60da      	str	r2, [r3, #12]
 8010ca4:	e005      	b.n	8010cb2 <tcp_abandon+0xbe>
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	61fb      	str	r3, [r7, #28]
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1ef      	bne.n	8010c92 <tcp_abandon+0x9e>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	60da      	str	r2, [r3, #12]
 8010cb8:	e00b      	b.n	8010cd2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	8adb      	ldrh	r3, [r3, #22]
 8010cc2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010cc4:	6879      	ldr	r1, [r7, #4]
 8010cc6:	4828      	ldr	r0, [pc, #160]	; (8010d68 <tcp_abandon+0x174>)
 8010cc8:	f000 ff7a 	bl	8011bc0 <tcp_pcb_remove>
 8010ccc:	4b27      	ldr	r3, [pc, #156]	; (8010d6c <tcp_abandon+0x178>)
 8010cce:	2201      	movs	r2, #1
 8010cd0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d004      	beq.n	8010ce4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 fd1c 	bl	801171c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d004      	beq.n	8010cf6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f000 fd13 	bl	801171c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d004      	beq.n	8010d08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d02:	4618      	mov	r0, r3
 8010d04:	f000 fd0a 	bl	801171c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00e      	beq.n	8010d2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3304      	adds	r3, #4
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	8b12      	ldrh	r2, [r2, #24]
 8010d18:	9202      	str	r2, [sp, #8]
 8010d1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d1c:	9201      	str	r2, [sp, #4]
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	460b      	mov	r3, r1
 8010d22:	697a      	ldr	r2, [r7, #20]
 8010d24:	69b9      	ldr	r1, [r7, #24]
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f004 fcc2 	bl	80156b0 <tcp_rst>
    }
    last_state = pcb->state;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	7d1b      	ldrb	r3, [r3, #20]
 8010d30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff fd34 	bl	80107a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <tcp_abandon+0x154>
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f06f 010c 	mvn.w	r1, #12
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	4798      	blx	r3
  }
}
 8010d48:	3728      	adds	r7, #40	; 0x28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	0801c190 	.word	0x0801c190
 8010d54:	0801c2d4 	.word	0x0801c2d4
 8010d58:	0801c1d4 	.word	0x0801c1d4
 8010d5c:	0801c2f0 	.word	0x0801c2f0
 8010d60:	20008008 	.word	0x20008008
 8010d64:	20007ffc 	.word	0x20007ffc
 8010d68:	20008004 	.word	0x20008004
 8010d6c:	2000800c 	.word	0x2000800c

08010d70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010d78:	2101      	movs	r1, #1
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7ff ff3a 	bl	8010bf4 <tcp_abandon>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d106      	bne.n	8010da4 <tcp_update_rcv_ann_wnd+0x1c>
 8010d96:	4b25      	ldr	r3, [pc, #148]	; (8010e2c <tcp_update_rcv_ann_wnd+0xa4>)
 8010d98:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010d9c:	4924      	ldr	r1, [pc, #144]	; (8010e30 <tcp_update_rcv_ann_wnd+0xa8>)
 8010d9e:	4825      	ldr	r0, [pc, #148]	; (8010e34 <tcp_update_rcv_ann_wnd+0xac>)
 8010da0:	f008 f920 	bl	8018fe4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010dac:	4413      	add	r3, r2
 8010dae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010db8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010dbc:	bf28      	it	cs
 8010dbe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010dc2:	b292      	uxth	r2, r2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	68fa      	ldr	r2, [r7, #12]
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	db08      	blt.n	8010de0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	e020      	b.n	8010e22 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	dd03      	ble.n	8010df6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010df4:	e014      	b.n	8010e20 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e08:	d306      	bcc.n	8010e18 <tcp_update_rcv_ann_wnd+0x90>
 8010e0a:	4b08      	ldr	r3, [pc, #32]	; (8010e2c <tcp_update_rcv_ann_wnd+0xa4>)
 8010e0c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010e10:	4909      	ldr	r1, [pc, #36]	; (8010e38 <tcp_update_rcv_ann_wnd+0xb0>)
 8010e12:	4808      	ldr	r0, [pc, #32]	; (8010e34 <tcp_update_rcv_ann_wnd+0xac>)
 8010e14:	f008 f8e6 	bl	8018fe4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010e20:	2300      	movs	r3, #0
  }
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	0801c190 	.word	0x0801c190
 8010e30:	0801c3ec 	.word	0x0801c3ec
 8010e34:	0801c1d4 	.word	0x0801c1d4
 8010e38:	0801c410 	.word	0x0801c410

08010e3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	460b      	mov	r3, r1
 8010e46:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d107      	bne.n	8010e5e <tcp_recved+0x22>
 8010e4e:	4b1f      	ldr	r3, [pc, #124]	; (8010ecc <tcp_recved+0x90>)
 8010e50:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010e54:	491e      	ldr	r1, [pc, #120]	; (8010ed0 <tcp_recved+0x94>)
 8010e56:	481f      	ldr	r0, [pc, #124]	; (8010ed4 <tcp_recved+0x98>)
 8010e58:	f008 f8c4 	bl	8018fe4 <iprintf>
 8010e5c:	e032      	b.n	8010ec4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	7d1b      	ldrb	r3, [r3, #20]
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d106      	bne.n	8010e74 <tcp_recved+0x38>
 8010e66:	4b19      	ldr	r3, [pc, #100]	; (8010ecc <tcp_recved+0x90>)
 8010e68:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010e6c:	491a      	ldr	r1, [pc, #104]	; (8010ed8 <tcp_recved+0x9c>)
 8010e6e:	4819      	ldr	r0, [pc, #100]	; (8010ed4 <tcp_recved+0x98>)
 8010e70:	f008 f8b8 	bl	8018fe4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e78:	887b      	ldrh	r3, [r7, #2]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010e7e:	89fb      	ldrh	r3, [r7, #14]
 8010e80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010e84:	d804      	bhi.n	8010e90 <tcp_recved+0x54>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e8a:	89fa      	ldrh	r2, [r7, #14]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d204      	bcs.n	8010e9a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010e96:	851a      	strh	r2, [r3, #40]	; 0x28
 8010e98:	e002      	b.n	8010ea0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	89fa      	ldrh	r2, [r7, #14]
 8010e9e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7ff ff71 	bl	8010d88 <tcp_update_rcv_ann_wnd>
 8010ea6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010eae:	d309      	bcc.n	8010ec4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8b5b      	ldrh	r3, [r3, #26]
 8010eb4:	f043 0302 	orr.w	r3, r3, #2
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f003 fe42 	bl	8014b48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010ec4:	3710      	adds	r7, #16
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	0801c190 	.word	0x0801c190
 8010ed0:	0801c42c 	.word	0x0801c42c
 8010ed4:	0801c1d4 	.word	0x0801c1d4
 8010ed8:	0801c444 	.word	0x0801c444

08010edc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010edc:	b5b0      	push	{r4, r5, r7, lr}
 8010ede:	b090      	sub	sp, #64	; 0x40
 8010ee0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010ee8:	4b94      	ldr	r3, [pc, #592]	; (801113c <tcp_slowtmr+0x260>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3301      	adds	r3, #1
 8010eee:	4a93      	ldr	r2, [pc, #588]	; (801113c <tcp_slowtmr+0x260>)
 8010ef0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010ef2:	4b93      	ldr	r3, [pc, #588]	; (8011140 <tcp_slowtmr+0x264>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	4b91      	ldr	r3, [pc, #580]	; (8011140 <tcp_slowtmr+0x264>)
 8010efc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010efe:	2300      	movs	r3, #0
 8010f00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010f02:	4b90      	ldr	r3, [pc, #576]	; (8011144 <tcp_slowtmr+0x268>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010f08:	e29d      	b.n	8011446 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0c:	7d1b      	ldrb	r3, [r3, #20]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <tcp_slowtmr+0x44>
 8010f12:	4b8d      	ldr	r3, [pc, #564]	; (8011148 <tcp_slowtmr+0x26c>)
 8010f14:	f240 42be 	movw	r2, #1214	; 0x4be
 8010f18:	498c      	ldr	r1, [pc, #560]	; (801114c <tcp_slowtmr+0x270>)
 8010f1a:	488d      	ldr	r0, [pc, #564]	; (8011150 <tcp_slowtmr+0x274>)
 8010f1c:	f008 f862 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	7d1b      	ldrb	r3, [r3, #20]
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d106      	bne.n	8010f36 <tcp_slowtmr+0x5a>
 8010f28:	4b87      	ldr	r3, [pc, #540]	; (8011148 <tcp_slowtmr+0x26c>)
 8010f2a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010f2e:	4989      	ldr	r1, [pc, #548]	; (8011154 <tcp_slowtmr+0x278>)
 8010f30:	4887      	ldr	r0, [pc, #540]	; (8011150 <tcp_slowtmr+0x274>)
 8010f32:	f008 f857 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	7d1b      	ldrb	r3, [r3, #20]
 8010f3a:	2b0a      	cmp	r3, #10
 8010f3c:	d106      	bne.n	8010f4c <tcp_slowtmr+0x70>
 8010f3e:	4b82      	ldr	r3, [pc, #520]	; (8011148 <tcp_slowtmr+0x26c>)
 8010f40:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010f44:	4984      	ldr	r1, [pc, #528]	; (8011158 <tcp_slowtmr+0x27c>)
 8010f46:	4882      	ldr	r0, [pc, #520]	; (8011150 <tcp_slowtmr+0x274>)
 8010f48:	f008 f84c 	bl	8018fe4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4e:	7f9a      	ldrb	r2, [r3, #30]
 8010f50:	4b7b      	ldr	r3, [pc, #492]	; (8011140 <tcp_slowtmr+0x264>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d105      	bne.n	8010f64 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010f62:	e270      	b.n	8011446 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010f64:	4b76      	ldr	r3, [pc, #472]	; (8011140 <tcp_slowtmr+0x264>)
 8010f66:	781a      	ldrb	r2, [r3, #0]
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	7d1b      	ldrb	r3, [r3, #20]
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d10a      	bne.n	8010f96 <tcp_slowtmr+0xba>
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f86:	2b05      	cmp	r3, #5
 8010f88:	d905      	bls.n	8010f96 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f8e:	3301      	adds	r3, #1
 8010f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f94:	e11e      	b.n	80111d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f9c:	2b0b      	cmp	r3, #11
 8010f9e:	d905      	bls.n	8010fac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010faa:	e113      	b.n	80111d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d075      	beq.n	80110a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d006      	beq.n	8010fcc <tcp_slowtmr+0xf0>
 8010fbe:	4b62      	ldr	r3, [pc, #392]	; (8011148 <tcp_slowtmr+0x26c>)
 8010fc0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010fc4:	4965      	ldr	r1, [pc, #404]	; (801115c <tcp_slowtmr+0x280>)
 8010fc6:	4862      	ldr	r0, [pc, #392]	; (8011150 <tcp_slowtmr+0x274>)
 8010fc8:	f008 f80c 	bl	8018fe4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d106      	bne.n	8010fe2 <tcp_slowtmr+0x106>
 8010fd4:	4b5c      	ldr	r3, [pc, #368]	; (8011148 <tcp_slowtmr+0x26c>)
 8010fd6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010fda:	4961      	ldr	r1, [pc, #388]	; (8011160 <tcp_slowtmr+0x284>)
 8010fdc:	485c      	ldr	r0, [pc, #368]	; (8011150 <tcp_slowtmr+0x274>)
 8010fde:	f008 f801 	bl	8018fe4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010fe8:	2b0b      	cmp	r3, #11
 8010fea:	d905      	bls.n	8010ff8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ff6:	e0ed      	b.n	80111d4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ffe:	3b01      	subs	r3, #1
 8011000:	4a58      	ldr	r2, [pc, #352]	; (8011164 <tcp_slowtmr+0x288>)
 8011002:	5cd3      	ldrb	r3, [r2, r3]
 8011004:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011008:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801100c:	7c7a      	ldrb	r2, [r7, #17]
 801100e:	429a      	cmp	r2, r3
 8011010:	d907      	bls.n	8011022 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011014:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011018:	3301      	adds	r3, #1
 801101a:	b2da      	uxtb	r2, r3
 801101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011024:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011028:	7c7a      	ldrb	r2, [r7, #17]
 801102a:	429a      	cmp	r2, r3
 801102c:	f200 80d2 	bhi.w	80111d4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011030:	2301      	movs	r3, #1
 8011032:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801103a:	2b00      	cmp	r3, #0
 801103c:	d108      	bne.n	8011050 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801103e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011040:	f004 fc2a 	bl	8015898 <tcp_zero_window_probe>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d014      	beq.n	8011074 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801104a:	2300      	movs	r3, #0
 801104c:	623b      	str	r3, [r7, #32]
 801104e:	e011      	b.n	8011074 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011056:	4619      	mov	r1, r3
 8011058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801105a:	f003 faef 	bl	801463c <tcp_split_unsent_seg>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d107      	bne.n	8011074 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011066:	f003 fd6f 	bl	8014b48 <tcp_output>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011070:	2300      	movs	r3, #0
 8011072:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 80ac 	beq.w	80111d4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	2200      	movs	r2, #0
 8011080:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801108a:	2b06      	cmp	r3, #6
 801108c:	f200 80a2 	bhi.w	80111d4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011092:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011096:	3301      	adds	r3, #1
 8011098:	b2da      	uxtb	r2, r3
 801109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80110a0:	e098      	b.n	80111d4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80110a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	db0f      	blt.n	80110cc <tcp_slowtmr+0x1f0>
 80110ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d008      	beq.n	80110cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80110ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	3301      	adds	r3, #1
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	b21a      	sxth	r2, r3
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80110d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110d8:	429a      	cmp	r2, r3
 80110da:	db7b      	blt.n	80111d4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80110dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110de:	f004 f827 	bl	8015130 <tcp_rexmit_rto_prepare>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d007      	beq.n	80110f8 <tcp_slowtmr+0x21c>
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d171      	bne.n	80111d4 <tcp_slowtmr+0x2f8>
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d06d      	beq.n	80111d4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fa:	7d1b      	ldrb	r3, [r3, #20]
 80110fc:	2b02      	cmp	r3, #2
 80110fe:	d03a      	beq.n	8011176 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011106:	2b0c      	cmp	r3, #12
 8011108:	bf28      	it	cs
 801110a:	230c      	movcs	r3, #12
 801110c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011110:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011114:	10db      	asrs	r3, r3, #3
 8011116:	b21b      	sxth	r3, r3
 8011118:	461a      	mov	r2, r3
 801111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011120:	4413      	add	r3, r2
 8011122:	7efa      	ldrb	r2, [r7, #27]
 8011124:	4910      	ldr	r1, [pc, #64]	; (8011168 <tcp_slowtmr+0x28c>)
 8011126:	5c8a      	ldrb	r2, [r1, r2]
 8011128:	4093      	lsls	r3, r2
 801112a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011132:	4293      	cmp	r3, r2
 8011134:	dc1a      	bgt.n	801116c <tcp_slowtmr+0x290>
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	b21a      	sxth	r2, r3
 801113a:	e019      	b.n	8011170 <tcp_slowtmr+0x294>
 801113c:	20007ff8 	.word	0x20007ff8
 8011140:	2000800e 	.word	0x2000800e
 8011144:	20008004 	.word	0x20008004
 8011148:	0801c190 	.word	0x0801c190
 801114c:	0801c4d4 	.word	0x0801c4d4
 8011150:	0801c1d4 	.word	0x0801c1d4
 8011154:	0801c500 	.word	0x0801c500
 8011158:	0801c52c 	.word	0x0801c52c
 801115c:	0801c55c 	.word	0x0801c55c
 8011160:	0801c590 	.word	0x0801c590
 8011164:	0801e1a4 	.word	0x0801e1a4
 8011168:	0801e194 	.word	0x0801e194
 801116c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011178:	2200      	movs	r2, #0
 801117a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011188:	4293      	cmp	r3, r2
 801118a:	bf28      	it	cs
 801118c:	4613      	movcs	r3, r2
 801118e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011190:	8a7b      	ldrh	r3, [r7, #18]
 8011192:	085b      	lsrs	r3, r3, #1
 8011194:	b29a      	uxth	r2, r3
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111a6:	005b      	lsls	r3, r3, #1
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d206      	bcs.n	80111bc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80111bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	2200      	movs	r2, #0
 80111ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80111ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111d0:	f004 f81e 	bl	8015210 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
 80111d8:	2b06      	cmp	r3, #6
 80111da:	d111      	bne.n	8011200 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	8b5b      	ldrh	r3, [r3, #26]
 80111e0:	f003 0310 	and.w	r3, r3, #16
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00b      	beq.n	8011200 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80111e8:	4b9c      	ldr	r3, [pc, #624]	; (801145c <tcp_slowtmr+0x580>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	6a1b      	ldr	r3, [r3, #32]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	2b28      	cmp	r3, #40	; 0x28
 80111f4:	d904      	bls.n	8011200 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80111f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111fa:	3301      	adds	r3, #1
 80111fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011202:	7a5b      	ldrb	r3, [r3, #9]
 8011204:	f003 0308 	and.w	r3, r3, #8
 8011208:	2b00      	cmp	r3, #0
 801120a:	d04a      	beq.n	80112a2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011210:	2b04      	cmp	r3, #4
 8011212:	d003      	beq.n	801121c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011218:	2b07      	cmp	r3, #7
 801121a:	d142      	bne.n	80112a2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801121c:	4b8f      	ldr	r3, [pc, #572]	; (801145c <tcp_slowtmr+0x580>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011222:	6a1b      	ldr	r3, [r3, #32]
 8011224:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011228:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801122c:	4b8c      	ldr	r3, [pc, #560]	; (8011460 <tcp_slowtmr+0x584>)
 801122e:	440b      	add	r3, r1
 8011230:	498c      	ldr	r1, [pc, #560]	; (8011464 <tcp_slowtmr+0x588>)
 8011232:	fba1 1303 	umull	r1, r3, r1, r3
 8011236:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011238:	429a      	cmp	r2, r3
 801123a:	d90a      	bls.n	8011252 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011240:	3301      	adds	r3, #1
 8011242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801124a:	3301      	adds	r3, #1
 801124c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011250:	e027      	b.n	80112a2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011252:	4b82      	ldr	r3, [pc, #520]	; (801145c <tcp_slowtmr+0x580>)
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011264:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011268:	4618      	mov	r0, r3
 801126a:	4b7f      	ldr	r3, [pc, #508]	; (8011468 <tcp_slowtmr+0x58c>)
 801126c:	fb00 f303 	mul.w	r3, r0, r3
 8011270:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011272:	497c      	ldr	r1, [pc, #496]	; (8011464 <tcp_slowtmr+0x588>)
 8011274:	fba1 1303 	umull	r1, r3, r1, r3
 8011278:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801127a:	429a      	cmp	r2, r3
 801127c:	d911      	bls.n	80112a2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801127e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011280:	f004 faca 	bl	8015818 <tcp_keepalive>
 8011284:	4603      	mov	r3, r0
 8011286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801128a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801128e:	2b00      	cmp	r3, #0
 8011290:	d107      	bne.n	80112a2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011294:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011298:	3301      	adds	r3, #1
 801129a:	b2da      	uxtb	r2, r3
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80112a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d011      	beq.n	80112ce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80112aa:	4b6c      	ldr	r3, [pc, #432]	; (801145c <tcp_slowtmr+0x580>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	1ad2      	subs	r2, r2, r3
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80112ba:	4619      	mov	r1, r3
 80112bc:	460b      	mov	r3, r1
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	440b      	add	r3, r1
 80112c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d302      	bcc.n	80112ce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80112c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ca:	f000 fddd 	bl	8011e88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80112ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d0:	7d1b      	ldrb	r3, [r3, #20]
 80112d2:	2b03      	cmp	r3, #3
 80112d4:	d10b      	bne.n	80112ee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112d6:	4b61      	ldr	r3, [pc, #388]	; (801145c <tcp_slowtmr+0x580>)
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112dc:	6a1b      	ldr	r3, [r3, #32]
 80112de:	1ad3      	subs	r3, r2, r3
 80112e0:	2b28      	cmp	r3, #40	; 0x28
 80112e2:	d904      	bls.n	80112ee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80112e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112e8:	3301      	adds	r3, #1
 80112ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80112ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f0:	7d1b      	ldrb	r3, [r3, #20]
 80112f2:	2b09      	cmp	r3, #9
 80112f4:	d10b      	bne.n	801130e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80112f6:	4b59      	ldr	r3, [pc, #356]	; (801145c <tcp_slowtmr+0x580>)
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fc:	6a1b      	ldr	r3, [r3, #32]
 80112fe:	1ad3      	subs	r3, r2, r3
 8011300:	2bf0      	cmp	r3, #240	; 0xf0
 8011302:	d904      	bls.n	801130e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011308:	3301      	adds	r3, #1
 801130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801130e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011312:	2b00      	cmp	r3, #0
 8011314:	d060      	beq.n	80113d8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801131c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801131e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011320:	f000 fbfe 	bl	8011b20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	2b00      	cmp	r3, #0
 8011328:	d010      	beq.n	801134c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801132a:	4b50      	ldr	r3, [pc, #320]	; (801146c <tcp_slowtmr+0x590>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011330:	429a      	cmp	r2, r3
 8011332:	d106      	bne.n	8011342 <tcp_slowtmr+0x466>
 8011334:	4b4e      	ldr	r3, [pc, #312]	; (8011470 <tcp_slowtmr+0x594>)
 8011336:	f240 526d 	movw	r2, #1389	; 0x56d
 801133a:	494e      	ldr	r1, [pc, #312]	; (8011474 <tcp_slowtmr+0x598>)
 801133c:	484e      	ldr	r0, [pc, #312]	; (8011478 <tcp_slowtmr+0x59c>)
 801133e:	f007 fe51 	bl	8018fe4 <iprintf>
        prev->next = pcb->next;
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	68da      	ldr	r2, [r3, #12]
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011348:	60da      	str	r2, [r3, #12]
 801134a:	e00f      	b.n	801136c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801134c:	4b47      	ldr	r3, [pc, #284]	; (801146c <tcp_slowtmr+0x590>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011352:	429a      	cmp	r2, r3
 8011354:	d006      	beq.n	8011364 <tcp_slowtmr+0x488>
 8011356:	4b46      	ldr	r3, [pc, #280]	; (8011470 <tcp_slowtmr+0x594>)
 8011358:	f240 5271 	movw	r2, #1393	; 0x571
 801135c:	4947      	ldr	r1, [pc, #284]	; (801147c <tcp_slowtmr+0x5a0>)
 801135e:	4846      	ldr	r0, [pc, #280]	; (8011478 <tcp_slowtmr+0x59c>)
 8011360:	f007 fe40 	bl	8018fe4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	4a40      	ldr	r2, [pc, #256]	; (801146c <tcp_slowtmr+0x590>)
 801136a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801136c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011370:	2b00      	cmp	r3, #0
 8011372:	d013      	beq.n	801139c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011376:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801137c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	3304      	adds	r3, #4
 8011382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011384:	8ad2      	ldrh	r2, [r2, #22]
 8011386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011388:	8b09      	ldrh	r1, [r1, #24]
 801138a:	9102      	str	r1, [sp, #8]
 801138c:	9201      	str	r2, [sp, #4]
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	462b      	mov	r3, r5
 8011392:	4622      	mov	r2, r4
 8011394:	4601      	mov	r1, r0
 8011396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011398:	f004 f98a 	bl	80156b0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	7d1b      	ldrb	r3, [r3, #20]
 80113a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80113b2:	6838      	ldr	r0, [r7, #0]
 80113b4:	f7ff f9f4 	bl	80107a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80113b8:	4b31      	ldr	r3, [pc, #196]	; (8011480 <tcp_slowtmr+0x5a4>)
 80113ba:	2200      	movs	r2, #0
 80113bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d004      	beq.n	80113ce <tcp_slowtmr+0x4f2>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f06f 010c 	mvn.w	r1, #12
 80113ca:	68b8      	ldr	r0, [r7, #8]
 80113cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80113ce:	4b2c      	ldr	r3, [pc, #176]	; (8011480 <tcp_slowtmr+0x5a4>)
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d037      	beq.n	8011446 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80113d6:	e592      	b.n	8010efe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	7f1b      	ldrb	r3, [r3, #28]
 80113e6:	3301      	adds	r3, #1
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	7f1a      	ldrb	r2, [r3, #28]
 80113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f4:	7f5b      	ldrb	r3, [r3, #29]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d325      	bcc.n	8011446 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	2200      	movs	r2, #0
 80113fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011400:	4b1f      	ldr	r3, [pc, #124]	; (8011480 <tcp_slowtmr+0x5a4>)
 8011402:	2200      	movs	r2, #0
 8011404:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <tcp_slowtmr+0x54c>
 8011410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011418:	6912      	ldr	r2, [r2, #16]
 801141a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801141c:	4610      	mov	r0, r2
 801141e:	4798      	blx	r3
 8011420:	4603      	mov	r3, r0
 8011422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011426:	e002      	b.n	801142e <tcp_slowtmr+0x552>
 8011428:	2300      	movs	r3, #0
 801142a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801142e:	4b14      	ldr	r3, [pc, #80]	; (8011480 <tcp_slowtmr+0x5a4>)
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d000      	beq.n	8011438 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011436:	e562      	b.n	8010efe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011438:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801143c:	2b00      	cmp	r3, #0
 801143e:	d102      	bne.n	8011446 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011442:	f003 fb81 	bl	8014b48 <tcp_output>
  while (pcb != NULL) {
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2b00      	cmp	r3, #0
 801144a:	f47f ad5e 	bne.w	8010f0a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801144e:	2300      	movs	r3, #0
 8011450:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011452:	4b0c      	ldr	r3, [pc, #48]	; (8011484 <tcp_slowtmr+0x5a8>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011458:	e069      	b.n	801152e <tcp_slowtmr+0x652>
 801145a:	bf00      	nop
 801145c:	20007ff8 	.word	0x20007ff8
 8011460:	000a4cb8 	.word	0x000a4cb8
 8011464:	10624dd3 	.word	0x10624dd3
 8011468:	000124f8 	.word	0x000124f8
 801146c:	20008004 	.word	0x20008004
 8011470:	0801c190 	.word	0x0801c190
 8011474:	0801c5c8 	.word	0x0801c5c8
 8011478:	0801c1d4 	.word	0x0801c1d4
 801147c:	0801c5f4 	.word	0x0801c5f4
 8011480:	2000800c 	.word	0x2000800c
 8011484:	20008008 	.word	0x20008008
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	7d1b      	ldrb	r3, [r3, #20]
 801148c:	2b0a      	cmp	r3, #10
 801148e:	d006      	beq.n	801149e <tcp_slowtmr+0x5c2>
 8011490:	4b2b      	ldr	r3, [pc, #172]	; (8011540 <tcp_slowtmr+0x664>)
 8011492:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011496:	492b      	ldr	r1, [pc, #172]	; (8011544 <tcp_slowtmr+0x668>)
 8011498:	482b      	ldr	r0, [pc, #172]	; (8011548 <tcp_slowtmr+0x66c>)
 801149a:	f007 fda3 	bl	8018fe4 <iprintf>
    pcb_remove = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114a4:	4b29      	ldr	r3, [pc, #164]	; (801154c <tcp_slowtmr+0x670>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	6a1b      	ldr	r3, [r3, #32]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	2bf0      	cmp	r3, #240	; 0xf0
 80114b0:	d904      	bls.n	80114bc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80114b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114b6:	3301      	adds	r3, #1
 80114b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d02f      	beq.n	8011524 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80114c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114c6:	f000 fb2b 	bl	8011b20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80114ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d010      	beq.n	80114f2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80114d0:	4b1f      	ldr	r3, [pc, #124]	; (8011550 <tcp_slowtmr+0x674>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d106      	bne.n	80114e8 <tcp_slowtmr+0x60c>
 80114da:	4b19      	ldr	r3, [pc, #100]	; (8011540 <tcp_slowtmr+0x664>)
 80114dc:	f240 52af 	movw	r2, #1455	; 0x5af
 80114e0:	491c      	ldr	r1, [pc, #112]	; (8011554 <tcp_slowtmr+0x678>)
 80114e2:	4819      	ldr	r0, [pc, #100]	; (8011548 <tcp_slowtmr+0x66c>)
 80114e4:	f007 fd7e 	bl	8018fe4 <iprintf>
        prev->next = pcb->next;
 80114e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ea:	68da      	ldr	r2, [r3, #12]
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	60da      	str	r2, [r3, #12]
 80114f0:	e00f      	b.n	8011512 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80114f2:	4b17      	ldr	r3, [pc, #92]	; (8011550 <tcp_slowtmr+0x674>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d006      	beq.n	801150a <tcp_slowtmr+0x62e>
 80114fc:	4b10      	ldr	r3, [pc, #64]	; (8011540 <tcp_slowtmr+0x664>)
 80114fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011502:	4915      	ldr	r1, [pc, #84]	; (8011558 <tcp_slowtmr+0x67c>)
 8011504:	4810      	ldr	r0, [pc, #64]	; (8011548 <tcp_slowtmr+0x66c>)
 8011506:	f007 fd6d 	bl	8018fe4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	4a10      	ldr	r2, [pc, #64]	; (8011550 <tcp_slowtmr+0x674>)
 8011510:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801151c:	69f8      	ldr	r0, [r7, #28]
 801151e:	f7ff f93f 	bl	80107a0 <tcp_free>
 8011522:	e004      	b.n	801152e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1a9      	bne.n	8011488 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop
 8011538:	3730      	adds	r7, #48	; 0x30
 801153a:	46bd      	mov	sp, r7
 801153c:	bdb0      	pop	{r4, r5, r7, pc}
 801153e:	bf00      	nop
 8011540:	0801c190 	.word	0x0801c190
 8011544:	0801c620 	.word	0x0801c620
 8011548:	0801c1d4 	.word	0x0801c1d4
 801154c:	20007ff8 	.word	0x20007ff8
 8011550:	20008008 	.word	0x20008008
 8011554:	0801c650 	.word	0x0801c650
 8011558:	0801c678 	.word	0x0801c678

0801155c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011562:	4b2d      	ldr	r3, [pc, #180]	; (8011618 <tcp_fasttmr+0xbc>)
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	3301      	adds	r3, #1
 8011568:	b2da      	uxtb	r2, r3
 801156a:	4b2b      	ldr	r3, [pc, #172]	; (8011618 <tcp_fasttmr+0xbc>)
 801156c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801156e:	4b2b      	ldr	r3, [pc, #172]	; (801161c <tcp_fasttmr+0xc0>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011574:	e048      	b.n	8011608 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	7f9a      	ldrb	r2, [r3, #30]
 801157a:	4b27      	ldr	r3, [pc, #156]	; (8011618 <tcp_fasttmr+0xbc>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d03f      	beq.n	8011602 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011582:	4b25      	ldr	r3, [pc, #148]	; (8011618 <tcp_fasttmr+0xbc>)
 8011584:	781a      	ldrb	r2, [r3, #0]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	8b5b      	ldrh	r3, [r3, #26]
 801158e:	f003 0301 	and.w	r3, r3, #1
 8011592:	2b00      	cmp	r3, #0
 8011594:	d010      	beq.n	80115b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	8b5b      	ldrh	r3, [r3, #26]
 801159a:	f043 0302 	orr.w	r3, r3, #2
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f003 facf 	bl	8014b48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	8b5b      	ldrh	r3, [r3, #26]
 80115ae:	f023 0303 	bic.w	r3, r3, #3
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	8b5b      	ldrh	r3, [r3, #26]
 80115bc:	f003 0308 	and.w	r3, r3, #8
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d009      	beq.n	80115d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	8b5b      	ldrh	r3, [r3, #26]
 80115c8:	f023 0308 	bic.w	r3, r3, #8
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff fa78 	bl	8010ac8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d00a      	beq.n	80115fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80115e6:	4b0e      	ldr	r3, [pc, #56]	; (8011620 <tcp_fasttmr+0xc4>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 f819 	bl	8011624 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80115f2:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <tcp_fasttmr+0xc4>)
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d000      	beq.n	80115fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80115fa:	e7b8      	b.n	801156e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	607b      	str	r3, [r7, #4]
 8011600:	e002      	b.n	8011608 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1b3      	bne.n	8011576 <tcp_fasttmr+0x1a>
    }
  }
}
 801160e:	bf00      	nop
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	2000800e 	.word	0x2000800e
 801161c:	20008004 	.word	0x20008004
 8011620:	2000800c 	.word	0x2000800c

08011624 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011624:	b590      	push	{r4, r7, lr}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d109      	bne.n	8011646 <tcp_process_refused_data+0x22>
 8011632:	4b37      	ldr	r3, [pc, #220]	; (8011710 <tcp_process_refused_data+0xec>)
 8011634:	f240 6209 	movw	r2, #1545	; 0x609
 8011638:	4936      	ldr	r1, [pc, #216]	; (8011714 <tcp_process_refused_data+0xf0>)
 801163a:	4837      	ldr	r0, [pc, #220]	; (8011718 <tcp_process_refused_data+0xf4>)
 801163c:	f007 fcd2 	bl	8018fe4 <iprintf>
 8011640:	f06f 030f 	mvn.w	r3, #15
 8011644:	e060      	b.n	8011708 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801164a:	7b5b      	ldrb	r3, [r3, #13]
 801164c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011652:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00b      	beq.n	801167c <tcp_process_refused_data+0x58>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6918      	ldr	r0, [r3, #16]
 801166e:	2300      	movs	r3, #0
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	6879      	ldr	r1, [r7, #4]
 8011674:	47a0      	blx	r4
 8011676:	4603      	mov	r3, r0
 8011678:	73fb      	strb	r3, [r7, #15]
 801167a:	e007      	b.n	801168c <tcp_process_refused_data+0x68>
 801167c:	2300      	movs	r3, #0
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	6879      	ldr	r1, [r7, #4]
 8011682:	2000      	movs	r0, #0
 8011684:	f000 f8a4 	bl	80117d0 <tcp_recv_null>
 8011688:	4603      	mov	r3, r0
 801168a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801168c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d12a      	bne.n	80116ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011694:	7bbb      	ldrb	r3, [r7, #14]
 8011696:	f003 0320 	and.w	r3, r3, #32
 801169a:	2b00      	cmp	r3, #0
 801169c:	d033      	beq.n	8011706 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80116a6:	d005      	beq.n	80116b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116ac:	3301      	adds	r3, #1
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00b      	beq.n	80116d6 <tcp_process_refused_data+0xb2>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6918      	ldr	r0, [r3, #16]
 80116c8:	2300      	movs	r3, #0
 80116ca:	2200      	movs	r2, #0
 80116cc:	6879      	ldr	r1, [r7, #4]
 80116ce:	47a0      	blx	r4
 80116d0:	4603      	mov	r3, r0
 80116d2:	73fb      	strb	r3, [r7, #15]
 80116d4:	e001      	b.n	80116da <tcp_process_refused_data+0xb6>
 80116d6:	2300      	movs	r3, #0
 80116d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80116da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116de:	f113 0f0d 	cmn.w	r3, #13
 80116e2:	d110      	bne.n	8011706 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80116e4:	f06f 030c 	mvn.w	r3, #12
 80116e8:	e00e      	b.n	8011708 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80116ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116ee:	f113 0f0d 	cmn.w	r3, #13
 80116f2:	d102      	bne.n	80116fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80116f4:	f06f 030c 	mvn.w	r3, #12
 80116f8:	e006      	b.n	8011708 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	68ba      	ldr	r2, [r7, #8]
 80116fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011700:	f06f 0304 	mvn.w	r3, #4
 8011704:	e000      	b.n	8011708 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3714      	adds	r7, #20
 801170c:	46bd      	mov	sp, r7
 801170e:	bd90      	pop	{r4, r7, pc}
 8011710:	0801c190 	.word	0x0801c190
 8011714:	0801c6a0 	.word	0x0801c6a0
 8011718:	0801c1d4 	.word	0x0801c1d4

0801171c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011724:	e007      	b.n	8011736 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f80a 	bl	8011746 <tcp_seg_free>
    seg = next;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1f4      	bne.n	8011726 <tcp_segs_free+0xa>
  }
}
 801173c:	bf00      	nop
 801173e:	bf00      	nop
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00c      	beq.n	801176e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d004      	beq.n	8011766 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	f7fe fd7d 	bl	8010260 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011766:	6879      	ldr	r1, [r7, #4]
 8011768:	2003      	movs	r0, #3
 801176a:	f7fd ff23 	bl	800f5b4 <memp_free>
  }
}
 801176e:	bf00      	nop
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
	...

08011778 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d106      	bne.n	8011794 <tcp_seg_copy+0x1c>
 8011786:	4b0f      	ldr	r3, [pc, #60]	; (80117c4 <tcp_seg_copy+0x4c>)
 8011788:	f240 6282 	movw	r2, #1666	; 0x682
 801178c:	490e      	ldr	r1, [pc, #56]	; (80117c8 <tcp_seg_copy+0x50>)
 801178e:	480f      	ldr	r0, [pc, #60]	; (80117cc <tcp_seg_copy+0x54>)
 8011790:	f007 fc28 	bl	8018fe4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011794:	2003      	movs	r0, #3
 8011796:	f7fd fe9d 	bl	800f4d4 <memp_malloc>
 801179a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <tcp_seg_copy+0x2e>
    return NULL;
 80117a2:	2300      	movs	r3, #0
 80117a4:	e00a      	b.n	80117bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80117a6:	2210      	movs	r2, #16
 80117a8:	6879      	ldr	r1, [r7, #4]
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f007 fde8 	bl	8019380 <memcpy>
  pbuf_ref(cseg->p);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fe fdf3 	bl	80103a0 <pbuf_ref>
  return cseg;
 80117ba:	68fb      	ldr	r3, [r7, #12]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	0801c190 	.word	0x0801c190
 80117c8:	0801c6e4 	.word	0x0801c6e4
 80117cc:	0801c1d4 	.word	0x0801c1d4

080117d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b084      	sub	sp, #16
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	607a      	str	r2, [r7, #4]
 80117dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d109      	bne.n	80117f8 <tcp_recv_null+0x28>
 80117e4:	4b12      	ldr	r3, [pc, #72]	; (8011830 <tcp_recv_null+0x60>)
 80117e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80117ea:	4912      	ldr	r1, [pc, #72]	; (8011834 <tcp_recv_null+0x64>)
 80117ec:	4812      	ldr	r0, [pc, #72]	; (8011838 <tcp_recv_null+0x68>)
 80117ee:	f007 fbf9 	bl	8018fe4 <iprintf>
 80117f2:	f06f 030f 	mvn.w	r3, #15
 80117f6:	e016      	b.n	8011826 <tcp_recv_null+0x56>

  if (p != NULL) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d009      	beq.n	8011812 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	891b      	ldrh	r3, [r3, #8]
 8011802:	4619      	mov	r1, r3
 8011804:	68b8      	ldr	r0, [r7, #8]
 8011806:	f7ff fb19 	bl	8010e3c <tcp_recved>
    pbuf_free(p);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7fe fd28 	bl	8010260 <pbuf_free>
 8011810:	e008      	b.n	8011824 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d104      	bne.n	8011824 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801181a:	68b8      	ldr	r0, [r7, #8]
 801181c:	f7ff f9be 	bl	8010b9c <tcp_close>
 8011820:	4603      	mov	r3, r0
 8011822:	e000      	b.n	8011826 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	0801c190 	.word	0x0801c190
 8011834:	0801c700 	.word	0x0801c700
 8011838:	0801c1d4 	.word	0x0801c1d4

0801183c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	4603      	mov	r3, r0
 8011844:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801184a:	2b00      	cmp	r3, #0
 801184c:	db01      	blt.n	8011852 <tcp_kill_prio+0x16>
 801184e:	79fb      	ldrb	r3, [r7, #7]
 8011850:	e000      	b.n	8011854 <tcp_kill_prio+0x18>
 8011852:	237f      	movs	r3, #127	; 0x7f
 8011854:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011856:	7afb      	ldrb	r3, [r7, #11]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d034      	beq.n	80118c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801185c:	7afb      	ldrb	r3, [r7, #11]
 801185e:	3b01      	subs	r3, #1
 8011860:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011866:	2300      	movs	r3, #0
 8011868:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801186a:	4b19      	ldr	r3, [pc, #100]	; (80118d0 <tcp_kill_prio+0x94>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	e01f      	b.n	80118b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	7d5b      	ldrb	r3, [r3, #21]
 8011876:	7afa      	ldrb	r2, [r7, #11]
 8011878:	429a      	cmp	r2, r3
 801187a:	d80c      	bhi.n	8011896 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011880:	7afa      	ldrb	r2, [r7, #11]
 8011882:	429a      	cmp	r2, r3
 8011884:	d112      	bne.n	80118ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011886:	4b13      	ldr	r3, [pc, #76]	; (80118d4 <tcp_kill_prio+0x98>)
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	429a      	cmp	r2, r3
 8011894:	d80a      	bhi.n	80118ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011896:	4b0f      	ldr	r3, [pc, #60]	; (80118d4 <tcp_kill_prio+0x98>)
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	6a1b      	ldr	r3, [r3, #32]
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	7d5b      	ldrb	r3, [r3, #21]
 80118aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	617b      	str	r3, [r7, #20]
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1dc      	bne.n	8011872 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d004      	beq.n	80118c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80118be:	6938      	ldr	r0, [r7, #16]
 80118c0:	f7ff fa56 	bl	8010d70 <tcp_abort>
 80118c4:	e000      	b.n	80118c8 <tcp_kill_prio+0x8c>
    return;
 80118c6:	bf00      	nop
  }
}
 80118c8:	3718      	adds	r7, #24
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	20008004 	.word	0x20008004
 80118d4:	20007ff8 	.word	0x20007ff8

080118d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af00      	add	r7, sp, #0
 80118de:	4603      	mov	r3, r0
 80118e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80118e2:	79fb      	ldrb	r3, [r7, #7]
 80118e4:	2b08      	cmp	r3, #8
 80118e6:	d009      	beq.n	80118fc <tcp_kill_state+0x24>
 80118e8:	79fb      	ldrb	r3, [r7, #7]
 80118ea:	2b09      	cmp	r3, #9
 80118ec:	d006      	beq.n	80118fc <tcp_kill_state+0x24>
 80118ee:	4b1a      	ldr	r3, [pc, #104]	; (8011958 <tcp_kill_state+0x80>)
 80118f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80118f4:	4919      	ldr	r1, [pc, #100]	; (801195c <tcp_kill_state+0x84>)
 80118f6:	481a      	ldr	r0, [pc, #104]	; (8011960 <tcp_kill_state+0x88>)
 80118f8:	f007 fb74 	bl	8018fe4 <iprintf>

  inactivity = 0;
 80118fc:	2300      	movs	r3, #0
 80118fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011900:	2300      	movs	r3, #0
 8011902:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011904:	4b17      	ldr	r3, [pc, #92]	; (8011964 <tcp_kill_state+0x8c>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	617b      	str	r3, [r7, #20]
 801190a:	e017      	b.n	801193c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	7d1b      	ldrb	r3, [r3, #20]
 8011910:	79fa      	ldrb	r2, [r7, #7]
 8011912:	429a      	cmp	r2, r3
 8011914:	d10f      	bne.n	8011936 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011916:	4b14      	ldr	r3, [pc, #80]	; (8011968 <tcp_kill_state+0x90>)
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	6a1b      	ldr	r3, [r3, #32]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	429a      	cmp	r2, r3
 8011924:	d807      	bhi.n	8011936 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011926:	4b10      	ldr	r3, [pc, #64]	; (8011968 <tcp_kill_state+0x90>)
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	6a1b      	ldr	r3, [r3, #32]
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	617b      	str	r3, [r7, #20]
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1e4      	bne.n	801190c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011948:	2100      	movs	r1, #0
 801194a:	6938      	ldr	r0, [r7, #16]
 801194c:	f7ff f952 	bl	8010bf4 <tcp_abandon>
  }
}
 8011950:	bf00      	nop
 8011952:	3718      	adds	r7, #24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	0801c190 	.word	0x0801c190
 801195c:	0801c71c 	.word	0x0801c71c
 8011960:	0801c1d4 	.word	0x0801c1d4
 8011964:	20008004 	.word	0x20008004
 8011968:	20007ff8 	.word	0x20007ff8

0801196c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011976:	2300      	movs	r3, #0
 8011978:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801197a:	4b12      	ldr	r3, [pc, #72]	; (80119c4 <tcp_kill_timewait+0x58>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	60fb      	str	r3, [r7, #12]
 8011980:	e012      	b.n	80119a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011982:	4b11      	ldr	r3, [pc, #68]	; (80119c8 <tcp_kill_timewait+0x5c>)
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	429a      	cmp	r2, r3
 8011990:	d807      	bhi.n	80119a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011992:	4b0d      	ldr	r3, [pc, #52]	; (80119c8 <tcp_kill_timewait+0x5c>)
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	60fb      	str	r3, [r7, #12]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1e9      	bne.n	8011982 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80119b4:	68b8      	ldr	r0, [r7, #8]
 80119b6:	f7ff f9db 	bl	8010d70 <tcp_abort>
  }
}
 80119ba:	bf00      	nop
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20008008 	.word	0x20008008
 80119c8:	20007ff8 	.word	0x20007ff8

080119cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80119d2:	4b10      	ldr	r3, [pc, #64]	; (8011a14 <tcp_handle_closepend+0x48>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80119d8:	e014      	b.n	8011a04 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	8b5b      	ldrh	r3, [r3, #26]
 80119e4:	f003 0308 	and.w	r3, r3, #8
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d009      	beq.n	8011a00 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	8b5b      	ldrh	r3, [r3, #26]
 80119f0:	f023 0308 	bic.w	r3, r3, #8
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff f864 	bl	8010ac8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1e7      	bne.n	80119da <tcp_handle_closepend+0xe>
  }
}
 8011a0a:	bf00      	nop
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	20008004 	.word	0x20008004

08011a18 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	4603      	mov	r3, r0
 8011a20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a22:	2001      	movs	r0, #1
 8011a24:	f7fd fd56 	bl	800f4d4 <memp_malloc>
 8011a28:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d126      	bne.n	8011a7e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011a30:	f7ff ffcc 	bl	80119cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011a34:	f7ff ff9a 	bl	801196c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a38:	2001      	movs	r0, #1
 8011a3a:	f7fd fd4b 	bl	800f4d4 <memp_malloc>
 8011a3e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d11b      	bne.n	8011a7e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011a46:	2009      	movs	r0, #9
 8011a48:	f7ff ff46 	bl	80118d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a4c:	2001      	movs	r0, #1
 8011a4e:	f7fd fd41 	bl	800f4d4 <memp_malloc>
 8011a52:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d111      	bne.n	8011a7e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011a5a:	2008      	movs	r0, #8
 8011a5c:	f7ff ff3c 	bl	80118d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a60:	2001      	movs	r0, #1
 8011a62:	f7fd fd37 	bl	800f4d4 <memp_malloc>
 8011a66:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d107      	bne.n	8011a7e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011a6e:	79fb      	ldrb	r3, [r7, #7]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff fee3 	bl	801183c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a76:	2001      	movs	r0, #1
 8011a78:	f7fd fd2c 	bl	800f4d4 <memp_malloc>
 8011a7c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d03f      	beq.n	8011b04 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011a84:	229c      	movs	r2, #156	; 0x9c
 8011a86:	2100      	movs	r1, #0
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f007 fc01 	bl	8019290 <memset>
    pcb->prio = prio;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	79fa      	ldrb	r2, [r7, #7]
 8011a92:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011a9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	22ff      	movs	r2, #255	; 0xff
 8011ab2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011aba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2206      	movs	r2, #6
 8011ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2206      	movs	r2, #6
 8011ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ad0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011ada:	4b0d      	ldr	r3, [pc, #52]	; (8011b10 <tcp_alloc+0xf8>)
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011ae2:	4b0c      	ldr	r3, [pc, #48]	; (8011b14 <tcp_alloc+0xfc>)
 8011ae4:	781a      	ldrb	r2, [r3, #0]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	4a08      	ldr	r2, [pc, #32]	; (8011b18 <tcp_alloc+0x100>)
 8011af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	4a07      	ldr	r2, [pc, #28]	; (8011b1c <tcp_alloc+0x104>)
 8011b00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011b04:	68fb      	ldr	r3, [r7, #12]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	20007ff8 	.word	0x20007ff8
 8011b14:	2000800e 	.word	0x2000800e
 8011b18:	080117d1 	.word	0x080117d1
 8011b1c:	006ddd00 	.word	0x006ddd00

08011b20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d107      	bne.n	8011b3e <tcp_pcb_purge+0x1e>
 8011b2e:	4b21      	ldr	r3, [pc, #132]	; (8011bb4 <tcp_pcb_purge+0x94>)
 8011b30:	f640 0251 	movw	r2, #2129	; 0x851
 8011b34:	4920      	ldr	r1, [pc, #128]	; (8011bb8 <tcp_pcb_purge+0x98>)
 8011b36:	4821      	ldr	r0, [pc, #132]	; (8011bbc <tcp_pcb_purge+0x9c>)
 8011b38:	f007 fa54 	bl	8018fe4 <iprintf>
 8011b3c:	e037      	b.n	8011bae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	7d1b      	ldrb	r3, [r3, #20]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d033      	beq.n	8011bae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011b4a:	2b0a      	cmp	r3, #10
 8011b4c:	d02f      	beq.n	8011bae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d02b      	beq.n	8011bae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d007      	beq.n	8011b6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fe fb7c 	bl	8010260 <pbuf_free>
      pcb->refused_data = NULL;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d002      	beq.n	8011b7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 f986 	bl	8011e88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7ff fdc7 	bl	801171c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7ff fdc2 	bl	801171c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	0801c190 	.word	0x0801c190
 8011bb8:	0801c7dc 	.word	0x0801c7dc
 8011bbc:	0801c1d4 	.word	0x0801c1d4

08011bc0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d106      	bne.n	8011bde <tcp_pcb_remove+0x1e>
 8011bd0:	4b3e      	ldr	r3, [pc, #248]	; (8011ccc <tcp_pcb_remove+0x10c>)
 8011bd2:	f640 0283 	movw	r2, #2179	; 0x883
 8011bd6:	493e      	ldr	r1, [pc, #248]	; (8011cd0 <tcp_pcb_remove+0x110>)
 8011bd8:	483e      	ldr	r0, [pc, #248]	; (8011cd4 <tcp_pcb_remove+0x114>)
 8011bda:	f007 fa03 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d106      	bne.n	8011bf2 <tcp_pcb_remove+0x32>
 8011be4:	4b39      	ldr	r3, [pc, #228]	; (8011ccc <tcp_pcb_remove+0x10c>)
 8011be6:	f640 0284 	movw	r2, #2180	; 0x884
 8011bea:	493b      	ldr	r1, [pc, #236]	; (8011cd8 <tcp_pcb_remove+0x118>)
 8011bec:	4839      	ldr	r0, [pc, #228]	; (8011cd4 <tcp_pcb_remove+0x114>)
 8011bee:	f007 f9f9 	bl	8018fe4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	683a      	ldr	r2, [r7, #0]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d105      	bne.n	8011c08 <tcp_pcb_remove+0x48>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	68da      	ldr	r2, [r3, #12]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	601a      	str	r2, [r3, #0]
 8011c06:	e013      	b.n	8011c30 <tcp_pcb_remove+0x70>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	e00c      	b.n	8011c2a <tcp_pcb_remove+0x6a>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d104      	bne.n	8011c24 <tcp_pcb_remove+0x64>
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	68da      	ldr	r2, [r3, #12]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	60da      	str	r2, [r3, #12]
 8011c22:	e005      	b.n	8011c30 <tcp_pcb_remove+0x70>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1ef      	bne.n	8011c10 <tcp_pcb_remove+0x50>
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	2200      	movs	r2, #0
 8011c34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011c36:	6838      	ldr	r0, [r7, #0]
 8011c38:	f7ff ff72 	bl	8011b20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	7d1b      	ldrb	r3, [r3, #20]
 8011c40:	2b0a      	cmp	r3, #10
 8011c42:	d013      	beq.n	8011c6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d00f      	beq.n	8011c6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	8b5b      	ldrh	r3, [r3, #26]
 8011c50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d009      	beq.n	8011c6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	8b5b      	ldrh	r3, [r3, #26]
 8011c5c:	f043 0302 	orr.w	r3, r3, #2
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c66:	6838      	ldr	r0, [r7, #0]
 8011c68:	f002 ff6e 	bl	8014b48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	7d1b      	ldrb	r3, [r3, #20]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d020      	beq.n	8011cb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d006      	beq.n	8011c8a <tcp_pcb_remove+0xca>
 8011c7c:	4b13      	ldr	r3, [pc, #76]	; (8011ccc <tcp_pcb_remove+0x10c>)
 8011c7e:	f640 0293 	movw	r2, #2195	; 0x893
 8011c82:	4916      	ldr	r1, [pc, #88]	; (8011cdc <tcp_pcb_remove+0x11c>)
 8011c84:	4813      	ldr	r0, [pc, #76]	; (8011cd4 <tcp_pcb_remove+0x114>)
 8011c86:	f007 f9ad 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d006      	beq.n	8011ca0 <tcp_pcb_remove+0xe0>
 8011c92:	4b0e      	ldr	r3, [pc, #56]	; (8011ccc <tcp_pcb_remove+0x10c>)
 8011c94:	f640 0294 	movw	r2, #2196	; 0x894
 8011c98:	4911      	ldr	r1, [pc, #68]	; (8011ce0 <tcp_pcb_remove+0x120>)
 8011c9a:	480e      	ldr	r0, [pc, #56]	; (8011cd4 <tcp_pcb_remove+0x114>)
 8011c9c:	f007 f9a2 	bl	8018fe4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d006      	beq.n	8011cb6 <tcp_pcb_remove+0xf6>
 8011ca8:	4b08      	ldr	r3, [pc, #32]	; (8011ccc <tcp_pcb_remove+0x10c>)
 8011caa:	f640 0296 	movw	r2, #2198	; 0x896
 8011cae:	490d      	ldr	r1, [pc, #52]	; (8011ce4 <tcp_pcb_remove+0x124>)
 8011cb0:	4808      	ldr	r0, [pc, #32]	; (8011cd4 <tcp_pcb_remove+0x114>)
 8011cb2:	f007 f997 	bl	8018fe4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011cc2:	bf00      	nop
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	0801c190 	.word	0x0801c190
 8011cd0:	0801c7f8 	.word	0x0801c7f8
 8011cd4:	0801c1d4 	.word	0x0801c1d4
 8011cd8:	0801c814 	.word	0x0801c814
 8011cdc:	0801c834 	.word	0x0801c834
 8011ce0:	0801c84c 	.word	0x0801c84c
 8011ce4:	0801c868 	.word	0x0801c868

08011ce8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d106      	bne.n	8011d04 <tcp_next_iss+0x1c>
 8011cf6:	4b0a      	ldr	r3, [pc, #40]	; (8011d20 <tcp_next_iss+0x38>)
 8011cf8:	f640 02af 	movw	r2, #2223	; 0x8af
 8011cfc:	4909      	ldr	r1, [pc, #36]	; (8011d24 <tcp_next_iss+0x3c>)
 8011cfe:	480a      	ldr	r0, [pc, #40]	; (8011d28 <tcp_next_iss+0x40>)
 8011d00:	f007 f970 	bl	8018fe4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011d04:	4b09      	ldr	r3, [pc, #36]	; (8011d2c <tcp_next_iss+0x44>)
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <tcp_next_iss+0x48>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	4a07      	ldr	r2, [pc, #28]	; (8011d2c <tcp_next_iss+0x44>)
 8011d10:	6013      	str	r3, [r2, #0]
  return iss;
 8011d12:	4b06      	ldr	r3, [pc, #24]	; (8011d2c <tcp_next_iss+0x44>)
 8011d14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	0801c190 	.word	0x0801c190
 8011d24:	0801c880 	.word	0x0801c880
 8011d28:	0801c1d4 	.word	0x0801c1d4
 8011d2c:	20000058 	.word	0x20000058
 8011d30:	20007ff8 	.word	0x20007ff8

08011d34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b086      	sub	sp, #24
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
 8011d40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d106      	bne.n	8011d56 <tcp_eff_send_mss_netif+0x22>
 8011d48:	4b14      	ldr	r3, [pc, #80]	; (8011d9c <tcp_eff_send_mss_netif+0x68>)
 8011d4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011d4e:	4914      	ldr	r1, [pc, #80]	; (8011da0 <tcp_eff_send_mss_netif+0x6c>)
 8011d50:	4814      	ldr	r0, [pc, #80]	; (8011da4 <tcp_eff_send_mss_netif+0x70>)
 8011d52:	f007 f947 	bl	8018fe4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d101      	bne.n	8011d60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011d5c:	89fb      	ldrh	r3, [r7, #14]
 8011d5e:	e019      	b.n	8011d94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011d64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011d66:	8afb      	ldrh	r3, [r7, #22]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d012      	beq.n	8011d92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011d6c:	2328      	movs	r3, #40	; 0x28
 8011d6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011d70:	8afa      	ldrh	r2, [r7, #22]
 8011d72:	8abb      	ldrh	r3, [r7, #20]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d904      	bls.n	8011d82 <tcp_eff_send_mss_netif+0x4e>
 8011d78:	8afa      	ldrh	r2, [r7, #22]
 8011d7a:	8abb      	ldrh	r3, [r7, #20]
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	e000      	b.n	8011d84 <tcp_eff_send_mss_netif+0x50>
 8011d82:	2300      	movs	r3, #0
 8011d84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011d86:	8a7a      	ldrh	r2, [r7, #18]
 8011d88:	89fb      	ldrh	r3, [r7, #14]
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	bf28      	it	cs
 8011d8e:	4613      	movcs	r3, r2
 8011d90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011d92:	89fb      	ldrh	r3, [r7, #14]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3718      	adds	r7, #24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	0801c190 	.word	0x0801c190
 8011da0:	0801c89c 	.word	0x0801c89c
 8011da4:	0801c1d4 	.word	0x0801c1d4

08011da8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d119      	bne.n	8011df0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011dbc:	4b10      	ldr	r3, [pc, #64]	; (8011e00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011dbe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011dc2:	4910      	ldr	r1, [pc, #64]	; (8011e04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011dc4:	4810      	ldr	r0, [pc, #64]	; (8011e08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011dc6:	f007 f90d 	bl	8018fe4 <iprintf>

  while (pcb != NULL) {
 8011dca:	e011      	b.n	8011df0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d108      	bne.n	8011dea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7fe ffc6 	bl	8010d70 <tcp_abort>
      pcb = next;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e002      	b.n	8011df0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1ea      	bne.n	8011dcc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011df6:	bf00      	nop
 8011df8:	bf00      	nop
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0801c190 	.word	0x0801c190
 8011e04:	0801c8c4 	.word	0x0801c8c4
 8011e08:	0801c1d4 	.word	0x0801c1d4

08011e0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d02a      	beq.n	8011e72 <tcp_netif_ip_addr_changed+0x66>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d026      	beq.n	8011e72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011e24:	4b15      	ldr	r3, [pc, #84]	; (8011e7c <tcp_netif_ip_addr_changed+0x70>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff ffbc 	bl	8011da8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011e30:	4b13      	ldr	r3, [pc, #76]	; (8011e80 <tcp_netif_ip_addr_changed+0x74>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4619      	mov	r1, r3
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f7ff ffb6 	bl	8011da8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d017      	beq.n	8011e72 <tcp_netif_ip_addr_changed+0x66>
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d013      	beq.n	8011e72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011e4a:	4b0e      	ldr	r3, [pc, #56]	; (8011e84 <tcp_netif_ip_addr_changed+0x78>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	60fb      	str	r3, [r7, #12]
 8011e50:	e00c      	b.n	8011e6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d103      	bne.n	8011e66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1ef      	bne.n	8011e52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011e72:	bf00      	nop
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20008004 	.word	0x20008004
 8011e80:	20007ffc 	.word	0x20007ffc
 8011e84:	20008000 	.word	0x20008000

08011e88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d007      	beq.n	8011ea8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7ff fc3d 	bl	801171c <tcp_segs_free>
    pcb->ooseq = NULL;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011ea8:	bf00      	nop
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011eb0:	b590      	push	{r4, r7, lr}
 8011eb2:	b08d      	sub	sp, #52	; 0x34
 8011eb4:	af04      	add	r7, sp, #16
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d105      	bne.n	8011ecc <tcp_input+0x1c>
 8011ec0:	4b9b      	ldr	r3, [pc, #620]	; (8012130 <tcp_input+0x280>)
 8011ec2:	2283      	movs	r2, #131	; 0x83
 8011ec4:	499b      	ldr	r1, [pc, #620]	; (8012134 <tcp_input+0x284>)
 8011ec6:	489c      	ldr	r0, [pc, #624]	; (8012138 <tcp_input+0x288>)
 8011ec8:	f007 f88c 	bl	8018fe4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	4a9a      	ldr	r2, [pc, #616]	; (801213c <tcp_input+0x28c>)
 8011ed2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	895b      	ldrh	r3, [r3, #10]
 8011ed8:	2b13      	cmp	r3, #19
 8011eda:	f240 83d1 	bls.w	8012680 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011ede:	4b98      	ldr	r3, [pc, #608]	; (8012140 <tcp_input+0x290>)
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	4a97      	ldr	r2, [pc, #604]	; (8012140 <tcp_input+0x290>)
 8011ee4:	6812      	ldr	r2, [r2, #0]
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f005 fbfb 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f040 83c7 	bne.w	8012684 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011ef6:	4b92      	ldr	r3, [pc, #584]	; (8012140 <tcp_input+0x290>)
 8011ef8:	695b      	ldr	r3, [r3, #20]
 8011efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011efe:	2be0      	cmp	r3, #224	; 0xe0
 8011f00:	f000 83c0 	beq.w	8012684 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011f04:	4b8d      	ldr	r3, [pc, #564]	; (801213c <tcp_input+0x28c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	899b      	ldrh	r3, [r3, #12]
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fc fdb1 	bl	800ea74 <lwip_htons>
 8011f12:	4603      	mov	r3, r0
 8011f14:	0b1b      	lsrs	r3, r3, #12
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011f1e:	7cbb      	ldrb	r3, [r7, #18]
 8011f20:	2b13      	cmp	r3, #19
 8011f22:	f240 83b1 	bls.w	8012688 <tcp_input+0x7d8>
 8011f26:	7cbb      	ldrb	r3, [r7, #18]
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	891b      	ldrh	r3, [r3, #8]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	f200 83aa 	bhi.w	8012688 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011f34:	7cbb      	ldrb	r3, [r7, #18]
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	3b14      	subs	r3, #20
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	4b81      	ldr	r3, [pc, #516]	; (8012144 <tcp_input+0x294>)
 8011f3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011f40:	4b81      	ldr	r3, [pc, #516]	; (8012148 <tcp_input+0x298>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	895a      	ldrh	r2, [r3, #10]
 8011f4a:	7cbb      	ldrb	r3, [r7, #18]
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d309      	bcc.n	8011f66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011f52:	4b7c      	ldr	r3, [pc, #496]	; (8012144 <tcp_input+0x294>)
 8011f54:	881a      	ldrh	r2, [r3, #0]
 8011f56:	4b7d      	ldr	r3, [pc, #500]	; (801214c <tcp_input+0x29c>)
 8011f58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011f5a:	7cbb      	ldrb	r3, [r7, #18]
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7fe f8f8 	bl	8010154 <pbuf_remove_header>
 8011f64:	e04e      	b.n	8012004 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d105      	bne.n	8011f7a <tcp_input+0xca>
 8011f6e:	4b70      	ldr	r3, [pc, #448]	; (8012130 <tcp_input+0x280>)
 8011f70:	22c2      	movs	r2, #194	; 0xc2
 8011f72:	4977      	ldr	r1, [pc, #476]	; (8012150 <tcp_input+0x2a0>)
 8011f74:	4870      	ldr	r0, [pc, #448]	; (8012138 <tcp_input+0x288>)
 8011f76:	f007 f835 	bl	8018fe4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011f7a:	2114      	movs	r1, #20
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7fe f8e9 	bl	8010154 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	895a      	ldrh	r2, [r3, #10]
 8011f86:	4b71      	ldr	r3, [pc, #452]	; (801214c <tcp_input+0x29c>)
 8011f88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011f8a:	4b6e      	ldr	r3, [pc, #440]	; (8012144 <tcp_input+0x294>)
 8011f8c:	881a      	ldrh	r2, [r3, #0]
 8011f8e:	4b6f      	ldr	r3, [pc, #444]	; (801214c <tcp_input+0x29c>)
 8011f90:	881b      	ldrh	r3, [r3, #0]
 8011f92:	1ad3      	subs	r3, r2, r3
 8011f94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011f96:	4b6d      	ldr	r3, [pc, #436]	; (801214c <tcp_input+0x29c>)
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f7fe f8d9 	bl	8010154 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	895b      	ldrh	r3, [r3, #10]
 8011fa8:	8a3a      	ldrh	r2, [r7, #16]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	f200 836e 	bhi.w	801268c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	4a64      	ldr	r2, [pc, #400]	; (8012148 <tcp_input+0x298>)
 8011fb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	8a3a      	ldrh	r2, [r7, #16]
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fe f8c6 	bl	8010154 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	891a      	ldrh	r2, [r3, #8]
 8011fcc:	8a3b      	ldrh	r3, [r7, #16]
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	895b      	ldrh	r3, [r3, #10]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d005      	beq.n	8011fea <tcp_input+0x13a>
 8011fde:	4b54      	ldr	r3, [pc, #336]	; (8012130 <tcp_input+0x280>)
 8011fe0:	22df      	movs	r2, #223	; 0xdf
 8011fe2:	495c      	ldr	r1, [pc, #368]	; (8012154 <tcp_input+0x2a4>)
 8011fe4:	4854      	ldr	r0, [pc, #336]	; (8012138 <tcp_input+0x288>)
 8011fe6:	f006 fffd 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	891a      	ldrh	r2, [r3, #8]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	891b      	ldrh	r3, [r3, #8]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d005      	beq.n	8012004 <tcp_input+0x154>
 8011ff8:	4b4d      	ldr	r3, [pc, #308]	; (8012130 <tcp_input+0x280>)
 8011ffa:	22e0      	movs	r2, #224	; 0xe0
 8011ffc:	4956      	ldr	r1, [pc, #344]	; (8012158 <tcp_input+0x2a8>)
 8011ffe:	484e      	ldr	r0, [pc, #312]	; (8012138 <tcp_input+0x288>)
 8012000:	f006 fff0 	bl	8018fe4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012004:	4b4d      	ldr	r3, [pc, #308]	; (801213c <tcp_input+0x28c>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	b29b      	uxth	r3, r3
 801200c:	4a4b      	ldr	r2, [pc, #300]	; (801213c <tcp_input+0x28c>)
 801200e:	6814      	ldr	r4, [r2, #0]
 8012010:	4618      	mov	r0, r3
 8012012:	f7fc fd2f 	bl	800ea74 <lwip_htons>
 8012016:	4603      	mov	r3, r0
 8012018:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801201a:	4b48      	ldr	r3, [pc, #288]	; (801213c <tcp_input+0x28c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	885b      	ldrh	r3, [r3, #2]
 8012020:	b29b      	uxth	r3, r3
 8012022:	4a46      	ldr	r2, [pc, #280]	; (801213c <tcp_input+0x28c>)
 8012024:	6814      	ldr	r4, [r2, #0]
 8012026:	4618      	mov	r0, r3
 8012028:	f7fc fd24 	bl	800ea74 <lwip_htons>
 801202c:	4603      	mov	r3, r0
 801202e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012030:	4b42      	ldr	r3, [pc, #264]	; (801213c <tcp_input+0x28c>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	4a41      	ldr	r2, [pc, #260]	; (801213c <tcp_input+0x28c>)
 8012038:	6814      	ldr	r4, [r2, #0]
 801203a:	4618      	mov	r0, r3
 801203c:	f7fc fd2f 	bl	800ea9e <lwip_htonl>
 8012040:	4603      	mov	r3, r0
 8012042:	6063      	str	r3, [r4, #4]
 8012044:	6863      	ldr	r3, [r4, #4]
 8012046:	4a45      	ldr	r2, [pc, #276]	; (801215c <tcp_input+0x2ac>)
 8012048:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801204a:	4b3c      	ldr	r3, [pc, #240]	; (801213c <tcp_input+0x28c>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	4a3a      	ldr	r2, [pc, #232]	; (801213c <tcp_input+0x28c>)
 8012052:	6814      	ldr	r4, [r2, #0]
 8012054:	4618      	mov	r0, r3
 8012056:	f7fc fd22 	bl	800ea9e <lwip_htonl>
 801205a:	4603      	mov	r3, r0
 801205c:	60a3      	str	r3, [r4, #8]
 801205e:	68a3      	ldr	r3, [r4, #8]
 8012060:	4a3f      	ldr	r2, [pc, #252]	; (8012160 <tcp_input+0x2b0>)
 8012062:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012064:	4b35      	ldr	r3, [pc, #212]	; (801213c <tcp_input+0x28c>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	89db      	ldrh	r3, [r3, #14]
 801206a:	b29b      	uxth	r3, r3
 801206c:	4a33      	ldr	r2, [pc, #204]	; (801213c <tcp_input+0x28c>)
 801206e:	6814      	ldr	r4, [r2, #0]
 8012070:	4618      	mov	r0, r3
 8012072:	f7fc fcff 	bl	800ea74 <lwip_htons>
 8012076:	4603      	mov	r3, r0
 8012078:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801207a:	4b30      	ldr	r3, [pc, #192]	; (801213c <tcp_input+0x28c>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	899b      	ldrh	r3, [r3, #12]
 8012080:	b29b      	uxth	r3, r3
 8012082:	4618      	mov	r0, r3
 8012084:	f7fc fcf6 	bl	800ea74 <lwip_htons>
 8012088:	4603      	mov	r3, r0
 801208a:	b2db      	uxtb	r3, r3
 801208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012090:	b2da      	uxtb	r2, r3
 8012092:	4b34      	ldr	r3, [pc, #208]	; (8012164 <tcp_input+0x2b4>)
 8012094:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	891a      	ldrh	r2, [r3, #8]
 801209a:	4b33      	ldr	r3, [pc, #204]	; (8012168 <tcp_input+0x2b8>)
 801209c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801209e:	4b31      	ldr	r3, [pc, #196]	; (8012164 <tcp_input+0x2b4>)
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	f003 0303 	and.w	r3, r3, #3
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d00c      	beq.n	80120c4 <tcp_input+0x214>
    tcplen++;
 80120aa:	4b2f      	ldr	r3, [pc, #188]	; (8012168 <tcp_input+0x2b8>)
 80120ac:	881b      	ldrh	r3, [r3, #0]
 80120ae:	3301      	adds	r3, #1
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	4b2d      	ldr	r3, [pc, #180]	; (8012168 <tcp_input+0x2b8>)
 80120b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	891a      	ldrh	r2, [r3, #8]
 80120ba:	4b2b      	ldr	r3, [pc, #172]	; (8012168 <tcp_input+0x2b8>)
 80120bc:	881b      	ldrh	r3, [r3, #0]
 80120be:	429a      	cmp	r2, r3
 80120c0:	f200 82e6 	bhi.w	8012690 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80120c4:	2300      	movs	r3, #0
 80120c6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120c8:	4b28      	ldr	r3, [pc, #160]	; (801216c <tcp_input+0x2bc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	e09d      	b.n	801220c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	7d1b      	ldrb	r3, [r3, #20]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d105      	bne.n	80120e4 <tcp_input+0x234>
 80120d8:	4b15      	ldr	r3, [pc, #84]	; (8012130 <tcp_input+0x280>)
 80120da:	22fb      	movs	r2, #251	; 0xfb
 80120dc:	4924      	ldr	r1, [pc, #144]	; (8012170 <tcp_input+0x2c0>)
 80120de:	4816      	ldr	r0, [pc, #88]	; (8012138 <tcp_input+0x288>)
 80120e0:	f006 ff80 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	7d1b      	ldrb	r3, [r3, #20]
 80120e8:	2b0a      	cmp	r3, #10
 80120ea:	d105      	bne.n	80120f8 <tcp_input+0x248>
 80120ec:	4b10      	ldr	r3, [pc, #64]	; (8012130 <tcp_input+0x280>)
 80120ee:	22fc      	movs	r2, #252	; 0xfc
 80120f0:	4920      	ldr	r1, [pc, #128]	; (8012174 <tcp_input+0x2c4>)
 80120f2:	4811      	ldr	r0, [pc, #68]	; (8012138 <tcp_input+0x288>)
 80120f4:	f006 ff76 	bl	8018fe4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	7d1b      	ldrb	r3, [r3, #20]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d105      	bne.n	801210c <tcp_input+0x25c>
 8012100:	4b0b      	ldr	r3, [pc, #44]	; (8012130 <tcp_input+0x280>)
 8012102:	22fd      	movs	r2, #253	; 0xfd
 8012104:	491c      	ldr	r1, [pc, #112]	; (8012178 <tcp_input+0x2c8>)
 8012106:	480c      	ldr	r0, [pc, #48]	; (8012138 <tcp_input+0x288>)
 8012108:	f006 ff6c 	bl	8018fe4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	7a1b      	ldrb	r3, [r3, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d033      	beq.n	801217c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	7a1a      	ldrb	r2, [r3, #8]
 8012118:	4b09      	ldr	r3, [pc, #36]	; (8012140 <tcp_input+0x290>)
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012120:	3301      	adds	r3, #1
 8012122:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012124:	429a      	cmp	r2, r3
 8012126:	d029      	beq.n	801217c <tcp_input+0x2cc>
      prev = pcb;
 8012128:	69fb      	ldr	r3, [r7, #28]
 801212a:	61bb      	str	r3, [r7, #24]
      continue;
 801212c:	e06b      	b.n	8012206 <tcp_input+0x356>
 801212e:	bf00      	nop
 8012130:	0801c8f8 	.word	0x0801c8f8
 8012134:	0801c92c 	.word	0x0801c92c
 8012138:	0801c944 	.word	0x0801c944
 801213c:	20008020 	.word	0x20008020
 8012140:	200050dc 	.word	0x200050dc
 8012144:	20008024 	.word	0x20008024
 8012148:	20008028 	.word	0x20008028
 801214c:	20008026 	.word	0x20008026
 8012150:	0801c96c 	.word	0x0801c96c
 8012154:	0801c97c 	.word	0x0801c97c
 8012158:	0801c988 	.word	0x0801c988
 801215c:	20008030 	.word	0x20008030
 8012160:	20008034 	.word	0x20008034
 8012164:	2000803c 	.word	0x2000803c
 8012168:	2000803a 	.word	0x2000803a
 801216c:	20008004 	.word	0x20008004
 8012170:	0801c9a8 	.word	0x0801c9a8
 8012174:	0801c9d0 	.word	0x0801c9d0
 8012178:	0801c9fc 	.word	0x0801c9fc
    }

    if (pcb->remote_port == tcphdr->src &&
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	8b1a      	ldrh	r2, [r3, #24]
 8012180:	4b72      	ldr	r3, [pc, #456]	; (801234c <tcp_input+0x49c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	881b      	ldrh	r3, [r3, #0]
 8012186:	b29b      	uxth	r3, r3
 8012188:	429a      	cmp	r2, r3
 801218a:	d13a      	bne.n	8012202 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	8ada      	ldrh	r2, [r3, #22]
 8012190:	4b6e      	ldr	r3, [pc, #440]	; (801234c <tcp_input+0x49c>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	885b      	ldrh	r3, [r3, #2]
 8012196:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012198:	429a      	cmp	r2, r3
 801219a:	d132      	bne.n	8012202 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	685a      	ldr	r2, [r3, #4]
 80121a0:	4b6b      	ldr	r3, [pc, #428]	; (8012350 <tcp_input+0x4a0>)
 80121a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d12c      	bne.n	8012202 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	4b68      	ldr	r3, [pc, #416]	; (8012350 <tcp_input+0x4a0>)
 80121ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d126      	bne.n	8012202 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	69fa      	ldr	r2, [r7, #28]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d106      	bne.n	80121cc <tcp_input+0x31c>
 80121be:	4b65      	ldr	r3, [pc, #404]	; (8012354 <tcp_input+0x4a4>)
 80121c0:	f240 120d 	movw	r2, #269	; 0x10d
 80121c4:	4964      	ldr	r1, [pc, #400]	; (8012358 <tcp_input+0x4a8>)
 80121c6:	4865      	ldr	r0, [pc, #404]	; (801235c <tcp_input+0x4ac>)
 80121c8:	f006 ff0c 	bl	8018fe4 <iprintf>
      if (prev != NULL) {
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00a      	beq.n	80121e8 <tcp_input+0x338>
        prev->next = pcb->next;
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	68da      	ldr	r2, [r3, #12]
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80121da:	4b61      	ldr	r3, [pc, #388]	; (8012360 <tcp_input+0x4b0>)
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80121e2:	4a5f      	ldr	r2, [pc, #380]	; (8012360 <tcp_input+0x4b0>)
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d111      	bne.n	8012216 <tcp_input+0x366>
 80121f2:	4b58      	ldr	r3, [pc, #352]	; (8012354 <tcp_input+0x4a4>)
 80121f4:	f240 1215 	movw	r2, #277	; 0x115
 80121f8:	495a      	ldr	r1, [pc, #360]	; (8012364 <tcp_input+0x4b4>)
 80121fa:	4858      	ldr	r0, [pc, #352]	; (801235c <tcp_input+0x4ac>)
 80121fc:	f006 fef2 	bl	8018fe4 <iprintf>
      break;
 8012200:	e009      	b.n	8012216 <tcp_input+0x366>
    }
    prev = pcb;
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	2b00      	cmp	r3, #0
 8012210:	f47f af5e 	bne.w	80120d0 <tcp_input+0x220>
 8012214:	e000      	b.n	8012218 <tcp_input+0x368>
      break;
 8012216:	bf00      	nop
  }

  if (pcb == NULL) {
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f040 80aa 	bne.w	8012374 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012220:	4b51      	ldr	r3, [pc, #324]	; (8012368 <tcp_input+0x4b8>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	61fb      	str	r3, [r7, #28]
 8012226:	e03f      	b.n	80122a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	7d1b      	ldrb	r3, [r3, #20]
 801222c:	2b0a      	cmp	r3, #10
 801222e:	d006      	beq.n	801223e <tcp_input+0x38e>
 8012230:	4b48      	ldr	r3, [pc, #288]	; (8012354 <tcp_input+0x4a4>)
 8012232:	f240 121f 	movw	r2, #287	; 0x11f
 8012236:	494d      	ldr	r1, [pc, #308]	; (801236c <tcp_input+0x4bc>)
 8012238:	4848      	ldr	r0, [pc, #288]	; (801235c <tcp_input+0x4ac>)
 801223a:	f006 fed3 	bl	8018fe4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	7a1b      	ldrb	r3, [r3, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d009      	beq.n	801225a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	7a1a      	ldrb	r2, [r3, #8]
 801224a:	4b41      	ldr	r3, [pc, #260]	; (8012350 <tcp_input+0x4a0>)
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012252:	3301      	adds	r3, #1
 8012254:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012256:	429a      	cmp	r2, r3
 8012258:	d122      	bne.n	80122a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	8b1a      	ldrh	r2, [r3, #24]
 801225e:	4b3b      	ldr	r3, [pc, #236]	; (801234c <tcp_input+0x49c>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	881b      	ldrh	r3, [r3, #0]
 8012264:	b29b      	uxth	r3, r3
 8012266:	429a      	cmp	r2, r3
 8012268:	d11b      	bne.n	80122a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	8ada      	ldrh	r2, [r3, #22]
 801226e:	4b37      	ldr	r3, [pc, #220]	; (801234c <tcp_input+0x49c>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	885b      	ldrh	r3, [r3, #2]
 8012274:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012276:	429a      	cmp	r2, r3
 8012278:	d113      	bne.n	80122a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	685a      	ldr	r2, [r3, #4]
 801227e:	4b34      	ldr	r3, [pc, #208]	; (8012350 <tcp_input+0x4a0>)
 8012280:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012282:	429a      	cmp	r2, r3
 8012284:	d10d      	bne.n	80122a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	4b31      	ldr	r3, [pc, #196]	; (8012350 <tcp_input+0x4a0>)
 801228c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801228e:	429a      	cmp	r2, r3
 8012290:	d107      	bne.n	80122a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012292:	69f8      	ldr	r0, [r7, #28]
 8012294:	f000 fb56 	bl	8012944 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7fd ffe1 	bl	8010260 <pbuf_free>
        return;
 801229e:	e1fd      	b.n	801269c <tcp_input+0x7ec>
        continue;
 80122a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	61fb      	str	r3, [r7, #28]
 80122a8:	69fb      	ldr	r3, [r7, #28]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1bc      	bne.n	8012228 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80122ae:	2300      	movs	r3, #0
 80122b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80122b2:	4b2f      	ldr	r3, [pc, #188]	; (8012370 <tcp_input+0x4c0>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	e02a      	b.n	8012310 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	7a1b      	ldrb	r3, [r3, #8]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d00c      	beq.n	80122dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	7a1a      	ldrb	r2, [r3, #8]
 80122c6:	4b22      	ldr	r3, [pc, #136]	; (8012350 <tcp_input+0x4a0>)
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122ce:	3301      	adds	r3, #1
 80122d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d002      	beq.n	80122dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	61bb      	str	r3, [r7, #24]
        continue;
 80122da:	e016      	b.n	801230a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	8ada      	ldrh	r2, [r3, #22]
 80122e0:	4b1a      	ldr	r3, [pc, #104]	; (801234c <tcp_input+0x49c>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	885b      	ldrh	r3, [r3, #2]
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d10c      	bne.n	8012306 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	4b17      	ldr	r3, [pc, #92]	; (8012350 <tcp_input+0x4a0>)
 80122f2:	695b      	ldr	r3, [r3, #20]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d00f      	beq.n	8012318 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00d      	beq.n	801231a <tcp_input+0x46a>
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d009      	beq.n	801231a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1d1      	bne.n	80122ba <tcp_input+0x40a>
 8012316:	e000      	b.n	801231a <tcp_input+0x46a>
            break;
 8012318:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d029      	beq.n	8012374 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00a      	beq.n	801233c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	68da      	ldr	r2, [r3, #12]
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801232e:	4b10      	ldr	r3, [pc, #64]	; (8012370 <tcp_input+0x4c0>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012336:	4a0e      	ldr	r2, [pc, #56]	; (8012370 <tcp_input+0x4c0>)
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801233c:	6978      	ldr	r0, [r7, #20]
 801233e:	f000 fa03 	bl	8012748 <tcp_listen_input>
      }
      pbuf_free(p);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7fd ff8c 	bl	8010260 <pbuf_free>
      return;
 8012348:	e1a8      	b.n	801269c <tcp_input+0x7ec>
 801234a:	bf00      	nop
 801234c:	20008020 	.word	0x20008020
 8012350:	200050dc 	.word	0x200050dc
 8012354:	0801c8f8 	.word	0x0801c8f8
 8012358:	0801ca24 	.word	0x0801ca24
 801235c:	0801c944 	.word	0x0801c944
 8012360:	20008004 	.word	0x20008004
 8012364:	0801ca50 	.word	0x0801ca50
 8012368:	20008008 	.word	0x20008008
 801236c:	0801ca7c 	.word	0x0801ca7c
 8012370:	20008000 	.word	0x20008000
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	2b00      	cmp	r3, #0
 8012378:	f000 8158 	beq.w	801262c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801237c:	4b95      	ldr	r3, [pc, #596]	; (80125d4 <tcp_input+0x724>)
 801237e:	2200      	movs	r2, #0
 8012380:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	891a      	ldrh	r2, [r3, #8]
 8012386:	4b93      	ldr	r3, [pc, #588]	; (80125d4 <tcp_input+0x724>)
 8012388:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801238a:	4a92      	ldr	r2, [pc, #584]	; (80125d4 <tcp_input+0x724>)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012390:	4b91      	ldr	r3, [pc, #580]	; (80125d8 <tcp_input+0x728>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a8f      	ldr	r2, [pc, #572]	; (80125d4 <tcp_input+0x724>)
 8012396:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012398:	4b90      	ldr	r3, [pc, #576]	; (80125dc <tcp_input+0x72c>)
 801239a:	2200      	movs	r2, #0
 801239c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801239e:	4b90      	ldr	r3, [pc, #576]	; (80125e0 <tcp_input+0x730>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80123a4:	4b8f      	ldr	r3, [pc, #572]	; (80125e4 <tcp_input+0x734>)
 80123a6:	2200      	movs	r2, #0
 80123a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80123aa:	4b8f      	ldr	r3, [pc, #572]	; (80125e8 <tcp_input+0x738>)
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	f003 0308 	and.w	r3, r3, #8
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d006      	beq.n	80123c4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	7b5b      	ldrb	r3, [r3, #13]
 80123ba:	f043 0301 	orr.w	r3, r3, #1
 80123be:	b2da      	uxtb	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d017      	beq.n	80123fc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80123cc:	69f8      	ldr	r0, [r7, #28]
 80123ce:	f7ff f929 	bl	8011624 <tcp_process_refused_data>
 80123d2:	4603      	mov	r3, r0
 80123d4:	f113 0f0d 	cmn.w	r3, #13
 80123d8:	d007      	beq.n	80123ea <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00c      	beq.n	80123fc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80123e2:	4b82      	ldr	r3, [pc, #520]	; (80125ec <tcp_input+0x73c>)
 80123e4:	881b      	ldrh	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d008      	beq.n	80123fc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f040 80e3 	bne.w	80125ba <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80123f4:	69f8      	ldr	r0, [r7, #28]
 80123f6:	f003 f9ad 	bl	8015754 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80123fa:	e0de      	b.n	80125ba <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80123fc:	4a7c      	ldr	r2, [pc, #496]	; (80125f0 <tcp_input+0x740>)
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012402:	69f8      	ldr	r0, [r7, #28]
 8012404:	f000 fb18 	bl	8012a38 <tcp_process>
 8012408:	4603      	mov	r3, r0
 801240a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801240c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012410:	f113 0f0d 	cmn.w	r3, #13
 8012414:	f000 80d3 	beq.w	80125be <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012418:	4b71      	ldr	r3, [pc, #452]	; (80125e0 <tcp_input+0x730>)
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	f003 0308 	and.w	r3, r3, #8
 8012420:	2b00      	cmp	r3, #0
 8012422:	d015      	beq.n	8012450 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801242a:	2b00      	cmp	r3, #0
 801242c:	d008      	beq.n	8012440 <tcp_input+0x590>
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012434:	69fa      	ldr	r2, [r7, #28]
 8012436:	6912      	ldr	r2, [r2, #16]
 8012438:	f06f 010d 	mvn.w	r1, #13
 801243c:	4610      	mov	r0, r2
 801243e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012440:	69f9      	ldr	r1, [r7, #28]
 8012442:	486c      	ldr	r0, [pc, #432]	; (80125f4 <tcp_input+0x744>)
 8012444:	f7ff fbbc 	bl	8011bc0 <tcp_pcb_remove>
        tcp_free(pcb);
 8012448:	69f8      	ldr	r0, [r7, #28]
 801244a:	f7fe f9a9 	bl	80107a0 <tcp_free>
 801244e:	e0da      	b.n	8012606 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012450:	2300      	movs	r3, #0
 8012452:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012454:	4b63      	ldr	r3, [pc, #396]	; (80125e4 <tcp_input+0x734>)
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01d      	beq.n	8012498 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801245c:	4b61      	ldr	r3, [pc, #388]	; (80125e4 <tcp_input+0x734>)
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00a      	beq.n	8012482 <tcp_input+0x5d2>
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012472:	69fa      	ldr	r2, [r7, #28]
 8012474:	6910      	ldr	r0, [r2, #16]
 8012476:	89fa      	ldrh	r2, [r7, #14]
 8012478:	69f9      	ldr	r1, [r7, #28]
 801247a:	4798      	blx	r3
 801247c:	4603      	mov	r3, r0
 801247e:	74fb      	strb	r3, [r7, #19]
 8012480:	e001      	b.n	8012486 <tcp_input+0x5d6>
 8012482:	2300      	movs	r3, #0
 8012484:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012486:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801248a:	f113 0f0d 	cmn.w	r3, #13
 801248e:	f000 8098 	beq.w	80125c2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012492:	4b54      	ldr	r3, [pc, #336]	; (80125e4 <tcp_input+0x734>)
 8012494:	2200      	movs	r2, #0
 8012496:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012498:	69f8      	ldr	r0, [r7, #28]
 801249a:	f000 f915 	bl	80126c8 <tcp_input_delayed_close>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f040 8090 	bne.w	80125c6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80124a6:	4b4d      	ldr	r3, [pc, #308]	; (80125dc <tcp_input+0x72c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d041      	beq.n	8012532 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d006      	beq.n	80124c4 <tcp_input+0x614>
 80124b6:	4b50      	ldr	r3, [pc, #320]	; (80125f8 <tcp_input+0x748>)
 80124b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80124bc:	494f      	ldr	r1, [pc, #316]	; (80125fc <tcp_input+0x74c>)
 80124be:	4850      	ldr	r0, [pc, #320]	; (8012600 <tcp_input+0x750>)
 80124c0:	f006 fd90 	bl	8018fe4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	8b5b      	ldrh	r3, [r3, #26]
 80124c8:	f003 0310 	and.w	r3, r3, #16
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d008      	beq.n	80124e2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80124d0:	4b42      	ldr	r3, [pc, #264]	; (80125dc <tcp_input+0x72c>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7fd fec3 	bl	8010260 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80124da:	69f8      	ldr	r0, [r7, #28]
 80124dc:	f7fe fc48 	bl	8010d70 <tcp_abort>
            goto aborted;
 80124e0:	e091      	b.n	8012606 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d00c      	beq.n	8012506 <tcp_input+0x656>
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	6918      	ldr	r0, [r3, #16]
 80124f6:	4b39      	ldr	r3, [pc, #228]	; (80125dc <tcp_input+0x72c>)
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	2300      	movs	r3, #0
 80124fc:	69f9      	ldr	r1, [r7, #28]
 80124fe:	47a0      	blx	r4
 8012500:	4603      	mov	r3, r0
 8012502:	74fb      	strb	r3, [r7, #19]
 8012504:	e008      	b.n	8012518 <tcp_input+0x668>
 8012506:	4b35      	ldr	r3, [pc, #212]	; (80125dc <tcp_input+0x72c>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	2300      	movs	r3, #0
 801250c:	69f9      	ldr	r1, [r7, #28]
 801250e:	2000      	movs	r0, #0
 8012510:	f7ff f95e 	bl	80117d0 <tcp_recv_null>
 8012514:	4603      	mov	r3, r0
 8012516:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801251c:	f113 0f0d 	cmn.w	r3, #13
 8012520:	d053      	beq.n	80125ca <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012522:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d003      	beq.n	8012532 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801252a:	4b2c      	ldr	r3, [pc, #176]	; (80125dc <tcp_input+0x72c>)
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012532:	4b2b      	ldr	r3, [pc, #172]	; (80125e0 <tcp_input+0x730>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	f003 0320 	and.w	r3, r3, #32
 801253a:	2b00      	cmp	r3, #0
 801253c:	d030      	beq.n	80125a0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012542:	2b00      	cmp	r3, #0
 8012544:	d009      	beq.n	801255a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801254a:	7b5a      	ldrb	r2, [r3, #13]
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012550:	f042 0220 	orr.w	r2, r2, #32
 8012554:	b2d2      	uxtb	r2, r2
 8012556:	735a      	strb	r2, [r3, #13]
 8012558:	e022      	b.n	80125a0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801255e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012562:	d005      	beq.n	8012570 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012568:	3301      	adds	r3, #1
 801256a:	b29a      	uxth	r2, r3
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012576:	2b00      	cmp	r3, #0
 8012578:	d00b      	beq.n	8012592 <tcp_input+0x6e2>
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	6918      	ldr	r0, [r3, #16]
 8012584:	2300      	movs	r3, #0
 8012586:	2200      	movs	r2, #0
 8012588:	69f9      	ldr	r1, [r7, #28]
 801258a:	47a0      	blx	r4
 801258c:	4603      	mov	r3, r0
 801258e:	74fb      	strb	r3, [r7, #19]
 8012590:	e001      	b.n	8012596 <tcp_input+0x6e6>
 8012592:	2300      	movs	r3, #0
 8012594:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012596:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801259a:	f113 0f0d 	cmn.w	r3, #13
 801259e:	d016      	beq.n	80125ce <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80125a0:	4b13      	ldr	r3, [pc, #76]	; (80125f0 <tcp_input+0x740>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80125a6:	69f8      	ldr	r0, [r7, #28]
 80125a8:	f000 f88e 	bl	80126c8 <tcp_input_delayed_close>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d128      	bne.n	8012604 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80125b2:	69f8      	ldr	r0, [r7, #28]
 80125b4:	f002 fac8 	bl	8014b48 <tcp_output>
 80125b8:	e025      	b.n	8012606 <tcp_input+0x756>
        goto aborted;
 80125ba:	bf00      	nop
 80125bc:	e023      	b.n	8012606 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80125be:	bf00      	nop
 80125c0:	e021      	b.n	8012606 <tcp_input+0x756>
              goto aborted;
 80125c2:	bf00      	nop
 80125c4:	e01f      	b.n	8012606 <tcp_input+0x756>
          goto aborted;
 80125c6:	bf00      	nop
 80125c8:	e01d      	b.n	8012606 <tcp_input+0x756>
            goto aborted;
 80125ca:	bf00      	nop
 80125cc:	e01b      	b.n	8012606 <tcp_input+0x756>
              goto aborted;
 80125ce:	bf00      	nop
 80125d0:	e019      	b.n	8012606 <tcp_input+0x756>
 80125d2:	bf00      	nop
 80125d4:	20008010 	.word	0x20008010
 80125d8:	20008020 	.word	0x20008020
 80125dc:	20008040 	.word	0x20008040
 80125e0:	2000803d 	.word	0x2000803d
 80125e4:	20008038 	.word	0x20008038
 80125e8:	2000803c 	.word	0x2000803c
 80125ec:	2000803a 	.word	0x2000803a
 80125f0:	20008044 	.word	0x20008044
 80125f4:	20008004 	.word	0x20008004
 80125f8:	0801c8f8 	.word	0x0801c8f8
 80125fc:	0801caac 	.word	0x0801caac
 8012600:	0801c944 	.word	0x0801c944
          goto aborted;
 8012604:	bf00      	nop
    tcp_input_pcb = NULL;
 8012606:	4b27      	ldr	r3, [pc, #156]	; (80126a4 <tcp_input+0x7f4>)
 8012608:	2200      	movs	r2, #0
 801260a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801260c:	4b26      	ldr	r3, [pc, #152]	; (80126a8 <tcp_input+0x7f8>)
 801260e:	2200      	movs	r2, #0
 8012610:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012612:	4b26      	ldr	r3, [pc, #152]	; (80126ac <tcp_input+0x7fc>)
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d03f      	beq.n	801269a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801261a:	4b24      	ldr	r3, [pc, #144]	; (80126ac <tcp_input+0x7fc>)
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	4618      	mov	r0, r3
 8012620:	f7fd fe1e 	bl	8010260 <pbuf_free>
      inseg.p = NULL;
 8012624:	4b21      	ldr	r3, [pc, #132]	; (80126ac <tcp_input+0x7fc>)
 8012626:	2200      	movs	r2, #0
 8012628:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801262a:	e036      	b.n	801269a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801262c:	4b20      	ldr	r3, [pc, #128]	; (80126b0 <tcp_input+0x800>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	899b      	ldrh	r3, [r3, #12]
 8012632:	b29b      	uxth	r3, r3
 8012634:	4618      	mov	r0, r3
 8012636:	f7fc fa1d 	bl	800ea74 <lwip_htons>
 801263a:	4603      	mov	r3, r0
 801263c:	b2db      	uxtb	r3, r3
 801263e:	f003 0304 	and.w	r3, r3, #4
 8012642:	2b00      	cmp	r3, #0
 8012644:	d118      	bne.n	8012678 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012646:	4b1b      	ldr	r3, [pc, #108]	; (80126b4 <tcp_input+0x804>)
 8012648:	6819      	ldr	r1, [r3, #0]
 801264a:	4b1b      	ldr	r3, [pc, #108]	; (80126b8 <tcp_input+0x808>)
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	461a      	mov	r2, r3
 8012650:	4b1a      	ldr	r3, [pc, #104]	; (80126bc <tcp_input+0x80c>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012656:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <tcp_input+0x800>)
 8012658:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801265a:	885b      	ldrh	r3, [r3, #2]
 801265c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801265e:	4a14      	ldr	r2, [pc, #80]	; (80126b0 <tcp_input+0x800>)
 8012660:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012662:	8812      	ldrh	r2, [r2, #0]
 8012664:	b292      	uxth	r2, r2
 8012666:	9202      	str	r2, [sp, #8]
 8012668:	9301      	str	r3, [sp, #4]
 801266a:	4b15      	ldr	r3, [pc, #84]	; (80126c0 <tcp_input+0x810>)
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	4b15      	ldr	r3, [pc, #84]	; (80126c4 <tcp_input+0x814>)
 8012670:	4602      	mov	r2, r0
 8012672:	2000      	movs	r0, #0
 8012674:	f003 f81c 	bl	80156b0 <tcp_rst>
    pbuf_free(p);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f7fd fdf1 	bl	8010260 <pbuf_free>
  return;
 801267e:	e00c      	b.n	801269a <tcp_input+0x7ea>
    goto dropped;
 8012680:	bf00      	nop
 8012682:	e006      	b.n	8012692 <tcp_input+0x7e2>
    goto dropped;
 8012684:	bf00      	nop
 8012686:	e004      	b.n	8012692 <tcp_input+0x7e2>
    goto dropped;
 8012688:	bf00      	nop
 801268a:	e002      	b.n	8012692 <tcp_input+0x7e2>
      goto dropped;
 801268c:	bf00      	nop
 801268e:	e000      	b.n	8012692 <tcp_input+0x7e2>
      goto dropped;
 8012690:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7fd fde4 	bl	8010260 <pbuf_free>
 8012698:	e000      	b.n	801269c <tcp_input+0x7ec>
  return;
 801269a:	bf00      	nop
}
 801269c:	3724      	adds	r7, #36	; 0x24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd90      	pop	{r4, r7, pc}
 80126a2:	bf00      	nop
 80126a4:	20008044 	.word	0x20008044
 80126a8:	20008040 	.word	0x20008040
 80126ac:	20008010 	.word	0x20008010
 80126b0:	20008020 	.word	0x20008020
 80126b4:	20008034 	.word	0x20008034
 80126b8:	2000803a 	.word	0x2000803a
 80126bc:	20008030 	.word	0x20008030
 80126c0:	200050ec 	.word	0x200050ec
 80126c4:	200050f0 	.word	0x200050f0

080126c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_input_delayed_close+0x1c>
 80126d6:	4b17      	ldr	r3, [pc, #92]	; (8012734 <tcp_input_delayed_close+0x6c>)
 80126d8:	f240 225a 	movw	r2, #602	; 0x25a
 80126dc:	4916      	ldr	r1, [pc, #88]	; (8012738 <tcp_input_delayed_close+0x70>)
 80126de:	4817      	ldr	r0, [pc, #92]	; (801273c <tcp_input_delayed_close+0x74>)
 80126e0:	f006 fc80 	bl	8018fe4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80126e4:	4b16      	ldr	r3, [pc, #88]	; (8012740 <tcp_input_delayed_close+0x78>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f003 0310 	and.w	r3, r3, #16
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d01c      	beq.n	801272a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	8b5b      	ldrh	r3, [r3, #26]
 80126f4:	f003 0310 	and.w	r3, r3, #16
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d10d      	bne.n	8012718 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012702:	2b00      	cmp	r3, #0
 8012704:	d008      	beq.n	8012718 <tcp_input_delayed_close+0x50>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	6912      	ldr	r2, [r2, #16]
 8012710:	f06f 010e 	mvn.w	r1, #14
 8012714:	4610      	mov	r0, r2
 8012716:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012718:	6879      	ldr	r1, [r7, #4]
 801271a:	480a      	ldr	r0, [pc, #40]	; (8012744 <tcp_input_delayed_close+0x7c>)
 801271c:	f7ff fa50 	bl	8011bc0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7fe f83d 	bl	80107a0 <tcp_free>
    return 1;
 8012726:	2301      	movs	r3, #1
 8012728:	e000      	b.n	801272c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801272a:	2300      	movs	r3, #0
}
 801272c:	4618      	mov	r0, r3
 801272e:	3708      	adds	r7, #8
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	0801c8f8 	.word	0x0801c8f8
 8012738:	0801cac8 	.word	0x0801cac8
 801273c:	0801c944 	.word	0x0801c944
 8012740:	2000803d 	.word	0x2000803d
 8012744:	20008004 	.word	0x20008004

08012748 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012748:	b590      	push	{r4, r7, lr}
 801274a:	b08b      	sub	sp, #44	; 0x2c
 801274c:	af04      	add	r7, sp, #16
 801274e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012750:	4b6f      	ldr	r3, [pc, #444]	; (8012910 <tcp_listen_input+0x1c8>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	f003 0304 	and.w	r3, r3, #4
 8012758:	2b00      	cmp	r3, #0
 801275a:	f040 80d2 	bne.w	8012902 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <tcp_listen_input+0x2a>
 8012764:	4b6b      	ldr	r3, [pc, #428]	; (8012914 <tcp_listen_input+0x1cc>)
 8012766:	f240 2281 	movw	r2, #641	; 0x281
 801276a:	496b      	ldr	r1, [pc, #428]	; (8012918 <tcp_listen_input+0x1d0>)
 801276c:	486b      	ldr	r0, [pc, #428]	; (801291c <tcp_listen_input+0x1d4>)
 801276e:	f006 fc39 	bl	8018fe4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012772:	4b67      	ldr	r3, [pc, #412]	; (8012910 <tcp_listen_input+0x1c8>)
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	f003 0310 	and.w	r3, r3, #16
 801277a:	2b00      	cmp	r3, #0
 801277c:	d019      	beq.n	80127b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801277e:	4b68      	ldr	r3, [pc, #416]	; (8012920 <tcp_listen_input+0x1d8>)
 8012780:	6819      	ldr	r1, [r3, #0]
 8012782:	4b68      	ldr	r3, [pc, #416]	; (8012924 <tcp_listen_input+0x1dc>)
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	461a      	mov	r2, r3
 8012788:	4b67      	ldr	r3, [pc, #412]	; (8012928 <tcp_listen_input+0x1e0>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801278e:	4b67      	ldr	r3, [pc, #412]	; (801292c <tcp_listen_input+0x1e4>)
 8012790:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012792:	885b      	ldrh	r3, [r3, #2]
 8012794:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012796:	4a65      	ldr	r2, [pc, #404]	; (801292c <tcp_listen_input+0x1e4>)
 8012798:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801279a:	8812      	ldrh	r2, [r2, #0]
 801279c:	b292      	uxth	r2, r2
 801279e:	9202      	str	r2, [sp, #8]
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	4b63      	ldr	r3, [pc, #396]	; (8012930 <tcp_listen_input+0x1e8>)
 80127a4:	9300      	str	r3, [sp, #0]
 80127a6:	4b63      	ldr	r3, [pc, #396]	; (8012934 <tcp_listen_input+0x1ec>)
 80127a8:	4602      	mov	r2, r0
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f002 ff80 	bl	80156b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80127b0:	e0a9      	b.n	8012906 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80127b2:	4b57      	ldr	r3, [pc, #348]	; (8012910 <tcp_listen_input+0x1c8>)
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	f003 0302 	and.w	r3, r3, #2
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f000 80a3 	beq.w	8012906 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	7d5b      	ldrb	r3, [r3, #21]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff f927 	bl	8011a18 <tcp_alloc>
 80127ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d111      	bne.n	80127f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00a      	beq.n	80127f0 <tcp_listen_input+0xa8>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	6910      	ldr	r0, [r2, #16]
 80127e2:	f04f 32ff 	mov.w	r2, #4294967295
 80127e6:	2100      	movs	r1, #0
 80127e8:	4798      	blx	r3
 80127ea:	4603      	mov	r3, r0
 80127ec:	73bb      	strb	r3, [r7, #14]
      return;
 80127ee:	e08b      	b.n	8012908 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80127f0:	23f0      	movs	r3, #240	; 0xf0
 80127f2:	73bb      	strb	r3, [r7, #14]
      return;
 80127f4:	e088      	b.n	8012908 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80127f6:	4b50      	ldr	r3, [pc, #320]	; (8012938 <tcp_listen_input+0x1f0>)
 80127f8:	695a      	ldr	r2, [r3, #20]
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80127fe:	4b4e      	ldr	r3, [pc, #312]	; (8012938 <tcp_listen_input+0x1f0>)
 8012800:	691a      	ldr	r2, [r3, #16]
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	8ada      	ldrh	r2, [r3, #22]
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801280e:	4b47      	ldr	r3, [pc, #284]	; (801292c <tcp_listen_input+0x1e4>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	b29a      	uxth	r2, r3
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	2203      	movs	r2, #3
 801281e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012820:	4b41      	ldr	r3, [pc, #260]	; (8012928 <tcp_listen_input+0x1e0>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	1c5a      	adds	r2, r3, #1
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012832:	6978      	ldr	r0, [r7, #20]
 8012834:	f7ff fa58 	bl	8011ce8 <tcp_next_iss>
 8012838:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	693a      	ldr	r2, [r7, #16]
 801283e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	693a      	ldr	r2, [r7, #16]
 8012844:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	693a      	ldr	r2, [r7, #16]
 801284a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	693a      	ldr	r2, [r7, #16]
 8012850:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012852:	4b35      	ldr	r3, [pc, #212]	; (8012928 <tcp_listen_input+0x1e0>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	1e5a      	subs	r2, r3, #1
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	691a      	ldr	r2, [r3, #16]
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	7a5b      	ldrb	r3, [r3, #9]
 801286e:	f003 030c 	and.w	r3, r3, #12
 8012872:	b2da      	uxtb	r2, r3
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	7a1a      	ldrb	r2, [r3, #8]
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012880:	4b2e      	ldr	r3, [pc, #184]	; (801293c <tcp_listen_input+0x1f4>)
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	60da      	str	r2, [r3, #12]
 8012888:	4a2c      	ldr	r2, [pc, #176]	; (801293c <tcp_listen_input+0x1f4>)
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	6013      	str	r3, [r2, #0]
 801288e:	f003 f8d1 	bl	8015a34 <tcp_timer_needed>
 8012892:	4b2b      	ldr	r3, [pc, #172]	; (8012940 <tcp_listen_input+0x1f8>)
 8012894:	2201      	movs	r2, #1
 8012896:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012898:	6978      	ldr	r0, [r7, #20]
 801289a:	f001 fd8f 	bl	80143bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801289e:	4b23      	ldr	r3, [pc, #140]	; (801292c <tcp_listen_input+0x1e4>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	89db      	ldrh	r3, [r3, #14]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	3304      	adds	r3, #4
 80128c0:	4618      	mov	r0, r3
 80128c2:	f004 fc79 	bl	80171b8 <ip4_route>
 80128c6:	4601      	mov	r1, r0
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	3304      	adds	r3, #4
 80128cc:	461a      	mov	r2, r3
 80128ce:	4620      	mov	r0, r4
 80128d0:	f7ff fa30 	bl	8011d34 <tcp_eff_send_mss_netif>
 80128d4:	4603      	mov	r3, r0
 80128d6:	461a      	mov	r2, r3
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80128dc:	2112      	movs	r1, #18
 80128de:	6978      	ldr	r0, [r7, #20]
 80128e0:	f002 f844 	bl	801496c <tcp_enqueue_flags>
 80128e4:	4603      	mov	r3, r0
 80128e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80128e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d004      	beq.n	80128fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80128f0:	2100      	movs	r1, #0
 80128f2:	6978      	ldr	r0, [r7, #20]
 80128f4:	f7fe f97e 	bl	8010bf4 <tcp_abandon>
      return;
 80128f8:	e006      	b.n	8012908 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80128fa:	6978      	ldr	r0, [r7, #20]
 80128fc:	f002 f924 	bl	8014b48 <tcp_output>
  return;
 8012900:	e001      	b.n	8012906 <tcp_listen_input+0x1be>
    return;
 8012902:	bf00      	nop
 8012904:	e000      	b.n	8012908 <tcp_listen_input+0x1c0>
  return;
 8012906:	bf00      	nop
}
 8012908:	371c      	adds	r7, #28
 801290a:	46bd      	mov	sp, r7
 801290c:	bd90      	pop	{r4, r7, pc}
 801290e:	bf00      	nop
 8012910:	2000803c 	.word	0x2000803c
 8012914:	0801c8f8 	.word	0x0801c8f8
 8012918:	0801caf0 	.word	0x0801caf0
 801291c:	0801c944 	.word	0x0801c944
 8012920:	20008034 	.word	0x20008034
 8012924:	2000803a 	.word	0x2000803a
 8012928:	20008030 	.word	0x20008030
 801292c:	20008020 	.word	0x20008020
 8012930:	200050ec 	.word	0x200050ec
 8012934:	200050f0 	.word	0x200050f0
 8012938:	200050dc 	.word	0x200050dc
 801293c:	20008004 	.word	0x20008004
 8012940:	2000800c 	.word	0x2000800c

08012944 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b086      	sub	sp, #24
 8012948:	af04      	add	r7, sp, #16
 801294a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801294c:	4b2f      	ldr	r3, [pc, #188]	; (8012a0c <tcp_timewait_input+0xc8>)
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	f003 0304 	and.w	r3, r3, #4
 8012954:	2b00      	cmp	r3, #0
 8012956:	d153      	bne.n	8012a00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_timewait_input+0x28>
 801295e:	4b2c      	ldr	r3, [pc, #176]	; (8012a10 <tcp_timewait_input+0xcc>)
 8012960:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012964:	492b      	ldr	r1, [pc, #172]	; (8012a14 <tcp_timewait_input+0xd0>)
 8012966:	482c      	ldr	r0, [pc, #176]	; (8012a18 <tcp_timewait_input+0xd4>)
 8012968:	f006 fb3c 	bl	8018fe4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801296c:	4b27      	ldr	r3, [pc, #156]	; (8012a0c <tcp_timewait_input+0xc8>)
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	f003 0302 	and.w	r3, r3, #2
 8012974:	2b00      	cmp	r3, #0
 8012976:	d02a      	beq.n	80129ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012978:	4b28      	ldr	r3, [pc, #160]	; (8012a1c <tcp_timewait_input+0xd8>)
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	db2d      	blt.n	80129e2 <tcp_timewait_input+0x9e>
 8012986:	4b25      	ldr	r3, [pc, #148]	; (8012a1c <tcp_timewait_input+0xd8>)
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801298e:	6879      	ldr	r1, [r7, #4]
 8012990:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012992:	440b      	add	r3, r1
 8012994:	1ad3      	subs	r3, r2, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	dc23      	bgt.n	80129e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801299a:	4b21      	ldr	r3, [pc, #132]	; (8012a20 <tcp_timewait_input+0xdc>)
 801299c:	6819      	ldr	r1, [r3, #0]
 801299e:	4b21      	ldr	r3, [pc, #132]	; (8012a24 <tcp_timewait_input+0xe0>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	461a      	mov	r2, r3
 80129a4:	4b1d      	ldr	r3, [pc, #116]	; (8012a1c <tcp_timewait_input+0xd8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129aa:	4b1f      	ldr	r3, [pc, #124]	; (8012a28 <tcp_timewait_input+0xe4>)
 80129ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ae:	885b      	ldrh	r3, [r3, #2]
 80129b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129b2:	4a1d      	ldr	r2, [pc, #116]	; (8012a28 <tcp_timewait_input+0xe4>)
 80129b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129b6:	8812      	ldrh	r2, [r2, #0]
 80129b8:	b292      	uxth	r2, r2
 80129ba:	9202      	str	r2, [sp, #8]
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	4b1b      	ldr	r3, [pc, #108]	; (8012a2c <tcp_timewait_input+0xe8>)
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	4b1b      	ldr	r3, [pc, #108]	; (8012a30 <tcp_timewait_input+0xec>)
 80129c4:	4602      	mov	r2, r0
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f002 fe72 	bl	80156b0 <tcp_rst>
      return;
 80129cc:	e01b      	b.n	8012a06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80129ce:	4b0f      	ldr	r3, [pc, #60]	; (8012a0c <tcp_timewait_input+0xc8>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	f003 0301 	and.w	r3, r3, #1
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d003      	beq.n	80129e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80129da:	4b16      	ldr	r3, [pc, #88]	; (8012a34 <tcp_timewait_input+0xf0>)
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80129e2:	4b10      	ldr	r3, [pc, #64]	; (8012a24 <tcp_timewait_input+0xe0>)
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00c      	beq.n	8012a04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	8b5b      	ldrh	r3, [r3, #26]
 80129ee:	f043 0302 	orr.w	r3, r3, #2
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f002 f8a5 	bl	8014b48 <tcp_output>
  }
  return;
 80129fe:	e001      	b.n	8012a04 <tcp_timewait_input+0xc0>
    return;
 8012a00:	bf00      	nop
 8012a02:	e000      	b.n	8012a06 <tcp_timewait_input+0xc2>
  return;
 8012a04:	bf00      	nop
}
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	2000803c 	.word	0x2000803c
 8012a10:	0801c8f8 	.word	0x0801c8f8
 8012a14:	0801cb10 	.word	0x0801cb10
 8012a18:	0801c944 	.word	0x0801c944
 8012a1c:	20008030 	.word	0x20008030
 8012a20:	20008034 	.word	0x20008034
 8012a24:	2000803a 	.word	0x2000803a
 8012a28:	20008020 	.word	0x20008020
 8012a2c:	200050ec 	.word	0x200050ec
 8012a30:	200050f0 	.word	0x200050f0
 8012a34:	20007ff8 	.word	0x20007ff8

08012a38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012a38:	b590      	push	{r4, r7, lr}
 8012a3a:	b08d      	sub	sp, #52	; 0x34
 8012a3c:	af04      	add	r7, sp, #16
 8012a3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012a40:	2300      	movs	r3, #0
 8012a42:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012a44:	2300      	movs	r3, #0
 8012a46:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d106      	bne.n	8012a5c <tcp_process+0x24>
 8012a4e:	4b9d      	ldr	r3, [pc, #628]	; (8012cc4 <tcp_process+0x28c>)
 8012a50:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012a54:	499c      	ldr	r1, [pc, #624]	; (8012cc8 <tcp_process+0x290>)
 8012a56:	489d      	ldr	r0, [pc, #628]	; (8012ccc <tcp_process+0x294>)
 8012a58:	f006 fac4 	bl	8018fe4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012a5c:	4b9c      	ldr	r3, [pc, #624]	; (8012cd0 <tcp_process+0x298>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	f003 0304 	and.w	r3, r3, #4
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d04e      	beq.n	8012b06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	7d1b      	ldrb	r3, [r3, #20]
 8012a6c:	2b02      	cmp	r3, #2
 8012a6e:	d108      	bne.n	8012a82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a74:	4b97      	ldr	r3, [pc, #604]	; (8012cd4 <tcp_process+0x29c>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d123      	bne.n	8012ac4 <tcp_process+0x8c>
        acceptable = 1;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	76fb      	strb	r3, [r7, #27]
 8012a80:	e020      	b.n	8012ac4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a86:	4b94      	ldr	r3, [pc, #592]	; (8012cd8 <tcp_process+0x2a0>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d102      	bne.n	8012a94 <tcp_process+0x5c>
        acceptable = 1;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	76fb      	strb	r3, [r7, #27]
 8012a92:	e017      	b.n	8012ac4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a94:	4b90      	ldr	r3, [pc, #576]	; (8012cd8 <tcp_process+0x2a0>)
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9c:	1ad3      	subs	r3, r2, r3
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	db10      	blt.n	8012ac4 <tcp_process+0x8c>
 8012aa2:	4b8d      	ldr	r3, [pc, #564]	; (8012cd8 <tcp_process+0x2a0>)
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aaa:	6879      	ldr	r1, [r7, #4]
 8012aac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012aae:	440b      	add	r3, r1
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	dc06      	bgt.n	8012ac4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	8b5b      	ldrh	r3, [r3, #26]
 8012aba:	f043 0302 	orr.w	r3, r3, #2
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012ac4:	7efb      	ldrb	r3, [r7, #27]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01b      	beq.n	8012b02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	7d1b      	ldrb	r3, [r3, #20]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d106      	bne.n	8012ae0 <tcp_process+0xa8>
 8012ad2:	4b7c      	ldr	r3, [pc, #496]	; (8012cc4 <tcp_process+0x28c>)
 8012ad4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012ad8:	4980      	ldr	r1, [pc, #512]	; (8012cdc <tcp_process+0x2a4>)
 8012ada:	487c      	ldr	r0, [pc, #496]	; (8012ccc <tcp_process+0x294>)
 8012adc:	f006 fa82 	bl	8018fe4 <iprintf>
      recv_flags |= TF_RESET;
 8012ae0:	4b7f      	ldr	r3, [pc, #508]	; (8012ce0 <tcp_process+0x2a8>)
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	f043 0308 	orr.w	r3, r3, #8
 8012ae8:	b2da      	uxtb	r2, r3
 8012aea:	4b7d      	ldr	r3, [pc, #500]	; (8012ce0 <tcp_process+0x2a8>)
 8012aec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	8b5b      	ldrh	r3, [r3, #26]
 8012af2:	f023 0301 	bic.w	r3, r3, #1
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012afc:	f06f 030d 	mvn.w	r3, #13
 8012b00:	e37a      	b.n	80131f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012b02:	2300      	movs	r3, #0
 8012b04:	e378      	b.n	80131f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012b06:	4b72      	ldr	r3, [pc, #456]	; (8012cd0 <tcp_process+0x298>)
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	f003 0302 	and.w	r3, r3, #2
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d010      	beq.n	8012b34 <tcp_process+0xfc>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	7d1b      	ldrb	r3, [r3, #20]
 8012b16:	2b02      	cmp	r3, #2
 8012b18:	d00c      	beq.n	8012b34 <tcp_process+0xfc>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
 8012b1e:	2b03      	cmp	r3, #3
 8012b20:	d008      	beq.n	8012b34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	8b5b      	ldrh	r3, [r3, #26]
 8012b26:	f043 0302 	orr.w	r3, r3, #2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012b30:	2300      	movs	r3, #0
 8012b32:	e361      	b.n	80131f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	8b5b      	ldrh	r3, [r3, #26]
 8012b38:	f003 0310 	and.w	r3, r3, #16
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d103      	bne.n	8012b48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012b40:	4b68      	ldr	r3, [pc, #416]	; (8012ce4 <tcp_process+0x2ac>)
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f001 fc2f 	bl	80143bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	7d1b      	ldrb	r3, [r3, #20]
 8012b62:	3b02      	subs	r3, #2
 8012b64:	2b07      	cmp	r3, #7
 8012b66:	f200 8337 	bhi.w	80131d8 <tcp_process+0x7a0>
 8012b6a:	a201      	add	r2, pc, #4	; (adr r2, 8012b70 <tcp_process+0x138>)
 8012b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b70:	08012b91 	.word	0x08012b91
 8012b74:	08012dc1 	.word	0x08012dc1
 8012b78:	08012f39 	.word	0x08012f39
 8012b7c:	08012f63 	.word	0x08012f63
 8012b80:	08013087 	.word	0x08013087
 8012b84:	08012f39 	.word	0x08012f39
 8012b88:	08013113 	.word	0x08013113
 8012b8c:	080131a3 	.word	0x080131a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012b90:	4b4f      	ldr	r3, [pc, #316]	; (8012cd0 <tcp_process+0x298>)
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	f003 0310 	and.w	r3, r3, #16
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f000 80e4 	beq.w	8012d66 <tcp_process+0x32e>
 8012b9e:	4b4c      	ldr	r3, [pc, #304]	; (8012cd0 <tcp_process+0x298>)
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	f003 0302 	and.w	r3, r3, #2
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 80dd 	beq.w	8012d66 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bb0:	1c5a      	adds	r2, r3, #1
 8012bb2:	4b48      	ldr	r3, [pc, #288]	; (8012cd4 <tcp_process+0x29c>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	f040 80d5 	bne.w	8012d66 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012bbc:	4b46      	ldr	r3, [pc, #280]	; (8012cd8 <tcp_process+0x2a0>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	1c5a      	adds	r2, r3, #1
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012bce:	4b41      	ldr	r3, [pc, #260]	; (8012cd4 <tcp_process+0x29c>)
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012bd6:	4b44      	ldr	r3, [pc, #272]	; (8012ce8 <tcp_process+0x2b0>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	89db      	ldrh	r3, [r3, #14]
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012bf0:	4b39      	ldr	r3, [pc, #228]	; (8012cd8 <tcp_process+0x2a0>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	1e5a      	subs	r2, r3, #1
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2204      	movs	r2, #4
 8012bfe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3304      	adds	r3, #4
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f004 fad5 	bl	80171b8 <ip4_route>
 8012c0e:	4601      	mov	r1, r0
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	3304      	adds	r3, #4
 8012c14:	461a      	mov	r2, r3
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7ff f88c 	bl	8011d34 <tcp_eff_send_mss_netif>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c28:	009a      	lsls	r2, r3, #2
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	f241 111c 	movw	r1, #4380	; 0x111c
 8012c34:	428b      	cmp	r3, r1
 8012c36:	bf38      	it	cc
 8012c38:	460b      	movcc	r3, r1
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d204      	bcs.n	8012c48 <tcp_process+0x210>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	e00d      	b.n	8012c64 <tcp_process+0x22c>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d904      	bls.n	8012c60 <tcp_process+0x228>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	e001      	b.n	8012c64 <tcp_process+0x22c>
 8012c60:	f241 131c 	movw	r3, #4380	; 0x111c
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <tcp_process+0x24a>
 8012c74:	4b13      	ldr	r3, [pc, #76]	; (8012cc4 <tcp_process+0x28c>)
 8012c76:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012c7a:	491c      	ldr	r1, [pc, #112]	; (8012cec <tcp_process+0x2b4>)
 8012c7c:	4813      	ldr	r0, [pc, #76]	; (8012ccc <tcp_process+0x294>)
 8012c7e:	f006 f9b1 	bl	8018fe4 <iprintf>
        --pcb->snd_queuelen;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	b29a      	uxth	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c96:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d12a      	bne.n	8012cf4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ca2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d106      	bne.n	8012cb8 <tcp_process+0x280>
 8012caa:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <tcp_process+0x28c>)
 8012cac:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012cb0:	490f      	ldr	r1, [pc, #60]	; (8012cf0 <tcp_process+0x2b8>)
 8012cb2:	4806      	ldr	r0, [pc, #24]	; (8012ccc <tcp_process+0x294>)
 8012cb4:	f006 f996 	bl	8018fe4 <iprintf>
          pcb->unsent = rseg->next;
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8012cc0:	e01c      	b.n	8012cfc <tcp_process+0x2c4>
 8012cc2:	bf00      	nop
 8012cc4:	0801c8f8 	.word	0x0801c8f8
 8012cc8:	0801cb30 	.word	0x0801cb30
 8012ccc:	0801c944 	.word	0x0801c944
 8012cd0:	2000803c 	.word	0x2000803c
 8012cd4:	20008034 	.word	0x20008034
 8012cd8:	20008030 	.word	0x20008030
 8012cdc:	0801cb4c 	.word	0x0801cb4c
 8012ce0:	2000803d 	.word	0x2000803d
 8012ce4:	20007ff8 	.word	0x20007ff8
 8012ce8:	20008020 	.word	0x20008020
 8012cec:	0801cb6c 	.word	0x0801cb6c
 8012cf0:	0801cb84 	.word	0x0801cb84
        } else {
          pcb->unacked = rseg->next;
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012cfc:	69f8      	ldr	r0, [r7, #28]
 8012cfe:	f7fe fd22 	bl	8011746 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d104      	bne.n	8012d14 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d10:	861a      	strh	r2, [r3, #48]	; 0x30
 8012d12:	e006      	b.n	8012d22 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2200      	movs	r2, #0
 8012d18:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00a      	beq.n	8012d42 <tcp_process+0x30a>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	6910      	ldr	r0, [r2, #16]
 8012d36:	2200      	movs	r2, #0
 8012d38:	6879      	ldr	r1, [r7, #4]
 8012d3a:	4798      	blx	r3
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	76bb      	strb	r3, [r7, #26]
 8012d40:	e001      	b.n	8012d46 <tcp_process+0x30e>
 8012d42:	2300      	movs	r3, #0
 8012d44:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012d46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d4a:	f113 0f0d 	cmn.w	r3, #13
 8012d4e:	d102      	bne.n	8012d56 <tcp_process+0x31e>
          return ERR_ABRT;
 8012d50:	f06f 030c 	mvn.w	r3, #12
 8012d54:	e250      	b.n	80131f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8b5b      	ldrh	r3, [r3, #26]
 8012d5a:	f043 0302 	orr.w	r3, r3, #2
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012d64:	e23a      	b.n	80131dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012d66:	4b98      	ldr	r3, [pc, #608]	; (8012fc8 <tcp_process+0x590>)
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	f003 0310 	and.w	r3, r3, #16
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 8234 	beq.w	80131dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d74:	4b95      	ldr	r3, [pc, #596]	; (8012fcc <tcp_process+0x594>)
 8012d76:	6819      	ldr	r1, [r3, #0]
 8012d78:	4b95      	ldr	r3, [pc, #596]	; (8012fd0 <tcp_process+0x598>)
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	4b95      	ldr	r3, [pc, #596]	; (8012fd4 <tcp_process+0x59c>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d84:	4b94      	ldr	r3, [pc, #592]	; (8012fd8 <tcp_process+0x5a0>)
 8012d86:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d88:	885b      	ldrh	r3, [r3, #2]
 8012d8a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d8c:	4a92      	ldr	r2, [pc, #584]	; (8012fd8 <tcp_process+0x5a0>)
 8012d8e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d90:	8812      	ldrh	r2, [r2, #0]
 8012d92:	b292      	uxth	r2, r2
 8012d94:	9202      	str	r2, [sp, #8]
 8012d96:	9301      	str	r3, [sp, #4]
 8012d98:	4b90      	ldr	r3, [pc, #576]	; (8012fdc <tcp_process+0x5a4>)
 8012d9a:	9300      	str	r3, [sp, #0]
 8012d9c:	4b90      	ldr	r3, [pc, #576]	; (8012fe0 <tcp_process+0x5a8>)
 8012d9e:	4602      	mov	r2, r0
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f002 fc85 	bl	80156b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dac:	2b05      	cmp	r3, #5
 8012dae:	f200 8215 	bhi.w	80131dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f002 fa51 	bl	8015260 <tcp_rexmit_rto>
      break;
 8012dbe:	e20d      	b.n	80131dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012dc0:	4b81      	ldr	r3, [pc, #516]	; (8012fc8 <tcp_process+0x590>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f003 0310 	and.w	r3, r3, #16
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f000 80a1 	beq.w	8012f10 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012dce:	4b7f      	ldr	r3, [pc, #508]	; (8012fcc <tcp_process+0x594>)
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dd6:	1ad3      	subs	r3, r2, r3
 8012dd8:	3b01      	subs	r3, #1
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	db7e      	blt.n	8012edc <tcp_process+0x4a4>
 8012dde:	4b7b      	ldr	r3, [pc, #492]	; (8012fcc <tcp_process+0x594>)
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	dc77      	bgt.n	8012edc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2204      	movs	r2, #4
 8012df0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d102      	bne.n	8012e00 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012dfa:	23fa      	movs	r3, #250	; 0xfa
 8012dfc:	76bb      	strb	r3, [r7, #26]
 8012dfe:	e01d      	b.n	8012e3c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e04:	699b      	ldr	r3, [r3, #24]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <tcp_process+0x3e0>
 8012e0a:	4b76      	ldr	r3, [pc, #472]	; (8012fe4 <tcp_process+0x5ac>)
 8012e0c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012e10:	4975      	ldr	r1, [pc, #468]	; (8012fe8 <tcp_process+0x5b0>)
 8012e12:	4876      	ldr	r0, [pc, #472]	; (8012fec <tcp_process+0x5b4>)
 8012e14:	f006 f8e6 	bl	8018fe4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e1c:	699b      	ldr	r3, [r3, #24]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00a      	beq.n	8012e38 <tcp_process+0x400>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e26:	699b      	ldr	r3, [r3, #24]
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	6910      	ldr	r0, [r2, #16]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	6879      	ldr	r1, [r7, #4]
 8012e30:	4798      	blx	r3
 8012e32:	4603      	mov	r3, r0
 8012e34:	76bb      	strb	r3, [r7, #26]
 8012e36:	e001      	b.n	8012e3c <tcp_process+0x404>
 8012e38:	23f0      	movs	r3, #240	; 0xf0
 8012e3a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012e3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00a      	beq.n	8012e5a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012e44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012e48:	f113 0f0d 	cmn.w	r3, #13
 8012e4c:	d002      	beq.n	8012e54 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f7fd ff8e 	bl	8010d70 <tcp_abort>
            }
            return ERR_ABRT;
 8012e54:	f06f 030c 	mvn.w	r3, #12
 8012e58:	e1ce      	b.n	80131f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fae0 	bl	8013420 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012e60:	4b63      	ldr	r3, [pc, #396]	; (8012ff0 <tcp_process+0x5b8>)
 8012e62:	881b      	ldrh	r3, [r3, #0]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d005      	beq.n	8012e74 <tcp_process+0x43c>
            recv_acked--;
 8012e68:	4b61      	ldr	r3, [pc, #388]	; (8012ff0 <tcp_process+0x5b8>)
 8012e6a:	881b      	ldrh	r3, [r3, #0]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	4b5f      	ldr	r3, [pc, #380]	; (8012ff0 <tcp_process+0x5b8>)
 8012e72:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e78:	009a      	lsls	r2, r3, #2
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e7e:	005b      	lsls	r3, r3, #1
 8012e80:	f241 111c 	movw	r1, #4380	; 0x111c
 8012e84:	428b      	cmp	r3, r1
 8012e86:	bf38      	it	cc
 8012e88:	460b      	movcc	r3, r1
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d204      	bcs.n	8012e98 <tcp_process+0x460>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	e00d      	b.n	8012eb4 <tcp_process+0x47c>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d904      	bls.n	8012eb0 <tcp_process+0x478>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012eaa:	005b      	lsls	r3, r3, #1
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	e001      	b.n	8012eb4 <tcp_process+0x47c>
 8012eb0:	f241 131c 	movw	r3, #4380	; 0x111c
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012eba:	4b4e      	ldr	r3, [pc, #312]	; (8012ff4 <tcp_process+0x5bc>)
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f003 0320 	and.w	r3, r3, #32
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d037      	beq.n	8012f36 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	8b5b      	ldrh	r3, [r3, #26]
 8012eca:	f043 0302 	orr.w	r3, r3, #2
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2207      	movs	r2, #7
 8012ed8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012eda:	e02c      	b.n	8012f36 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012edc:	4b3b      	ldr	r3, [pc, #236]	; (8012fcc <tcp_process+0x594>)
 8012ede:	6819      	ldr	r1, [r3, #0]
 8012ee0:	4b3b      	ldr	r3, [pc, #236]	; (8012fd0 <tcp_process+0x598>)
 8012ee2:	881b      	ldrh	r3, [r3, #0]
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	4b3b      	ldr	r3, [pc, #236]	; (8012fd4 <tcp_process+0x59c>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012eec:	4b3a      	ldr	r3, [pc, #232]	; (8012fd8 <tcp_process+0x5a0>)
 8012eee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ef0:	885b      	ldrh	r3, [r3, #2]
 8012ef2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ef4:	4a38      	ldr	r2, [pc, #224]	; (8012fd8 <tcp_process+0x5a0>)
 8012ef6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ef8:	8812      	ldrh	r2, [r2, #0]
 8012efa:	b292      	uxth	r2, r2
 8012efc:	9202      	str	r2, [sp, #8]
 8012efe:	9301      	str	r3, [sp, #4]
 8012f00:	4b36      	ldr	r3, [pc, #216]	; (8012fdc <tcp_process+0x5a4>)
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	4b36      	ldr	r3, [pc, #216]	; (8012fe0 <tcp_process+0x5a8>)
 8012f06:	4602      	mov	r2, r0
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f002 fbd1 	bl	80156b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012f0e:	e167      	b.n	80131e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012f10:	4b2d      	ldr	r3, [pc, #180]	; (8012fc8 <tcp_process+0x590>)
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	f003 0302 	and.w	r3, r3, #2
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f000 8161 	beq.w	80131e0 <tcp_process+0x7a8>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f22:	1e5a      	subs	r2, r3, #1
 8012f24:	4b2b      	ldr	r3, [pc, #172]	; (8012fd4 <tcp_process+0x59c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	f040 8159 	bne.w	80131e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f002 f9b8 	bl	80152a4 <tcp_rexmit>
      break;
 8012f34:	e154      	b.n	80131e0 <tcp_process+0x7a8>
 8012f36:	e153      	b.n	80131e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f000 fa71 	bl	8013420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012f3e:	4b2d      	ldr	r3, [pc, #180]	; (8012ff4 <tcp_process+0x5bc>)
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	f003 0320 	and.w	r3, r3, #32
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f000 814c 	beq.w	80131e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	8b5b      	ldrh	r3, [r3, #26]
 8012f50:	f043 0302 	orr.w	r3, r3, #2
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2207      	movs	r2, #7
 8012f5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f60:	e140      	b.n	80131e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 fa5c 	bl	8013420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012f68:	4b22      	ldr	r3, [pc, #136]	; (8012ff4 <tcp_process+0x5bc>)
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	f003 0320 	and.w	r3, r3, #32
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d071      	beq.n	8013058 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f74:	4b14      	ldr	r3, [pc, #80]	; (8012fc8 <tcp_process+0x590>)
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	f003 0310 	and.w	r3, r3, #16
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d060      	beq.n	8013042 <tcp_process+0x60a>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f84:	4b11      	ldr	r3, [pc, #68]	; (8012fcc <tcp_process+0x594>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d15a      	bne.n	8013042 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d156      	bne.n	8013042 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	8b5b      	ldrh	r3, [r3, #26]
 8012f98:	f043 0302 	orr.w	r3, r3, #2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7fe fdbc 	bl	8011b20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012fa8:	4b13      	ldr	r3, [pc, #76]	; (8012ff8 <tcp_process+0x5c0>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d105      	bne.n	8012fbe <tcp_process+0x586>
 8012fb2:	4b11      	ldr	r3, [pc, #68]	; (8012ff8 <tcp_process+0x5c0>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	4a0f      	ldr	r2, [pc, #60]	; (8012ff8 <tcp_process+0x5c0>)
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	e02e      	b.n	801301c <tcp_process+0x5e4>
 8012fbe:	4b0e      	ldr	r3, [pc, #56]	; (8012ff8 <tcp_process+0x5c0>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	617b      	str	r3, [r7, #20]
 8012fc4:	e027      	b.n	8013016 <tcp_process+0x5de>
 8012fc6:	bf00      	nop
 8012fc8:	2000803c 	.word	0x2000803c
 8012fcc:	20008034 	.word	0x20008034
 8012fd0:	2000803a 	.word	0x2000803a
 8012fd4:	20008030 	.word	0x20008030
 8012fd8:	20008020 	.word	0x20008020
 8012fdc:	200050ec 	.word	0x200050ec
 8012fe0:	200050f0 	.word	0x200050f0
 8012fe4:	0801c8f8 	.word	0x0801c8f8
 8012fe8:	0801cb98 	.word	0x0801cb98
 8012fec:	0801c944 	.word	0x0801c944
 8012ff0:	20008038 	.word	0x20008038
 8012ff4:	2000803d 	.word	0x2000803d
 8012ff8:	20008004 	.word	0x20008004
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	68db      	ldr	r3, [r3, #12]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	429a      	cmp	r2, r3
 8013004:	d104      	bne.n	8013010 <tcp_process+0x5d8>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	68da      	ldr	r2, [r3, #12]
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	60da      	str	r2, [r3, #12]
 801300e:	e005      	b.n	801301c <tcp_process+0x5e4>
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	617b      	str	r3, [r7, #20]
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1ef      	bne.n	8012ffc <tcp_process+0x5c4>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	60da      	str	r2, [r3, #12]
 8013022:	4b77      	ldr	r3, [pc, #476]	; (8013200 <tcp_process+0x7c8>)
 8013024:	2201      	movs	r2, #1
 8013026:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	220a      	movs	r2, #10
 801302c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801302e:	4b75      	ldr	r3, [pc, #468]	; (8013204 <tcp_process+0x7cc>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	60da      	str	r2, [r3, #12]
 8013036:	4a73      	ldr	r2, [pc, #460]	; (8013204 <tcp_process+0x7cc>)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6013      	str	r3, [r2, #0]
 801303c:	f002 fcfa 	bl	8015a34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013040:	e0d2      	b.n	80131e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	8b5b      	ldrh	r3, [r3, #26]
 8013046:	f043 0302 	orr.w	r3, r3, #2
 801304a:	b29a      	uxth	r2, r3
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2208      	movs	r2, #8
 8013054:	751a      	strb	r2, [r3, #20]
      break;
 8013056:	e0c7      	b.n	80131e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013058:	4b6b      	ldr	r3, [pc, #428]	; (8013208 <tcp_process+0x7d0>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	f003 0310 	and.w	r3, r3, #16
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 80c1 	beq.w	80131e8 <tcp_process+0x7b0>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801306a:	4b68      	ldr	r3, [pc, #416]	; (801320c <tcp_process+0x7d4>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	429a      	cmp	r2, r3
 8013070:	f040 80ba 	bne.w	80131e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013078:	2b00      	cmp	r3, #0
 801307a:	f040 80b5 	bne.w	80131e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2206      	movs	r2, #6
 8013082:	751a      	strb	r2, [r3, #20]
      break;
 8013084:	e0b0      	b.n	80131e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 f9ca 	bl	8013420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801308c:	4b60      	ldr	r3, [pc, #384]	; (8013210 <tcp_process+0x7d8>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	f003 0320 	and.w	r3, r3, #32
 8013094:	2b00      	cmp	r3, #0
 8013096:	f000 80a9 	beq.w	80131ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	8b5b      	ldrh	r3, [r3, #26]
 801309e:	f043 0302 	orr.w	r3, r3, #2
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f7fe fd39 	bl	8011b20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80130ae:	4b59      	ldr	r3, [pc, #356]	; (8013214 <tcp_process+0x7dc>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d105      	bne.n	80130c4 <tcp_process+0x68c>
 80130b8:	4b56      	ldr	r3, [pc, #344]	; (8013214 <tcp_process+0x7dc>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	4a55      	ldr	r2, [pc, #340]	; (8013214 <tcp_process+0x7dc>)
 80130c0:	6013      	str	r3, [r2, #0]
 80130c2:	e013      	b.n	80130ec <tcp_process+0x6b4>
 80130c4:	4b53      	ldr	r3, [pc, #332]	; (8013214 <tcp_process+0x7dc>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	613b      	str	r3, [r7, #16]
 80130ca:	e00c      	b.n	80130e6 <tcp_process+0x6ae>
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d104      	bne.n	80130e0 <tcp_process+0x6a8>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68da      	ldr	r2, [r3, #12]
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	60da      	str	r2, [r3, #12]
 80130de:	e005      	b.n	80130ec <tcp_process+0x6b4>
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	613b      	str	r3, [r7, #16]
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1ef      	bne.n	80130cc <tcp_process+0x694>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	60da      	str	r2, [r3, #12]
 80130f2:	4b43      	ldr	r3, [pc, #268]	; (8013200 <tcp_process+0x7c8>)
 80130f4:	2201      	movs	r2, #1
 80130f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	220a      	movs	r2, #10
 80130fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80130fe:	4b41      	ldr	r3, [pc, #260]	; (8013204 <tcp_process+0x7cc>)
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	60da      	str	r2, [r3, #12]
 8013106:	4a3f      	ldr	r2, [pc, #252]	; (8013204 <tcp_process+0x7cc>)
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6013      	str	r3, [r2, #0]
 801310c:	f002 fc92 	bl	8015a34 <tcp_timer_needed>
      }
      break;
 8013110:	e06c      	b.n	80131ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f000 f984 	bl	8013420 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013118:	4b3b      	ldr	r3, [pc, #236]	; (8013208 <tcp_process+0x7d0>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 0310 	and.w	r3, r3, #16
 8013120:	2b00      	cmp	r3, #0
 8013122:	d065      	beq.n	80131f0 <tcp_process+0x7b8>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013128:	4b38      	ldr	r3, [pc, #224]	; (801320c <tcp_process+0x7d4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	429a      	cmp	r2, r3
 801312e:	d15f      	bne.n	80131f0 <tcp_process+0x7b8>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013134:	2b00      	cmp	r3, #0
 8013136:	d15b      	bne.n	80131f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7fe fcf1 	bl	8011b20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801313e:	4b35      	ldr	r3, [pc, #212]	; (8013214 <tcp_process+0x7dc>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	429a      	cmp	r2, r3
 8013146:	d105      	bne.n	8013154 <tcp_process+0x71c>
 8013148:	4b32      	ldr	r3, [pc, #200]	; (8013214 <tcp_process+0x7dc>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	4a31      	ldr	r2, [pc, #196]	; (8013214 <tcp_process+0x7dc>)
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	e013      	b.n	801317c <tcp_process+0x744>
 8013154:	4b2f      	ldr	r3, [pc, #188]	; (8013214 <tcp_process+0x7dc>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	60fb      	str	r3, [r7, #12]
 801315a:	e00c      	b.n	8013176 <tcp_process+0x73e>
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	429a      	cmp	r2, r3
 8013164:	d104      	bne.n	8013170 <tcp_process+0x738>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	68da      	ldr	r2, [r3, #12]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	60da      	str	r2, [r3, #12]
 801316e:	e005      	b.n	801317c <tcp_process+0x744>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	60fb      	str	r3, [r7, #12]
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d1ef      	bne.n	801315c <tcp_process+0x724>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	60da      	str	r2, [r3, #12]
 8013182:	4b1f      	ldr	r3, [pc, #124]	; (8013200 <tcp_process+0x7c8>)
 8013184:	2201      	movs	r2, #1
 8013186:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	220a      	movs	r2, #10
 801318c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801318e:	4b1d      	ldr	r3, [pc, #116]	; (8013204 <tcp_process+0x7cc>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	60da      	str	r2, [r3, #12]
 8013196:	4a1b      	ldr	r2, [pc, #108]	; (8013204 <tcp_process+0x7cc>)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	f002 fc4a 	bl	8015a34 <tcp_timer_needed>
      }
      break;
 80131a0:	e026      	b.n	80131f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f000 f93c 	bl	8013420 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80131a8:	4b17      	ldr	r3, [pc, #92]	; (8013208 <tcp_process+0x7d0>)
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	f003 0310 	and.w	r3, r3, #16
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d01f      	beq.n	80131f4 <tcp_process+0x7bc>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131b8:	4b14      	ldr	r3, [pc, #80]	; (801320c <tcp_process+0x7d4>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	429a      	cmp	r2, r3
 80131be:	d119      	bne.n	80131f4 <tcp_process+0x7bc>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d115      	bne.n	80131f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80131c8:	4b11      	ldr	r3, [pc, #68]	; (8013210 <tcp_process+0x7d8>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f043 0310 	orr.w	r3, r3, #16
 80131d0:	b2da      	uxtb	r2, r3
 80131d2:	4b0f      	ldr	r3, [pc, #60]	; (8013210 <tcp_process+0x7d8>)
 80131d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80131d6:	e00d      	b.n	80131f4 <tcp_process+0x7bc>
    default:
      break;
 80131d8:	bf00      	nop
 80131da:	e00c      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131dc:	bf00      	nop
 80131de:	e00a      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131e0:	bf00      	nop
 80131e2:	e008      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131e4:	bf00      	nop
 80131e6:	e006      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131e8:	bf00      	nop
 80131ea:	e004      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131ec:	bf00      	nop
 80131ee:	e002      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131f0:	bf00      	nop
 80131f2:	e000      	b.n	80131f6 <tcp_process+0x7be>
      break;
 80131f4:	bf00      	nop
  }
  return ERR_OK;
 80131f6:	2300      	movs	r3, #0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3724      	adds	r7, #36	; 0x24
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd90      	pop	{r4, r7, pc}
 8013200:	2000800c 	.word	0x2000800c
 8013204:	20008008 	.word	0x20008008
 8013208:	2000803c 	.word	0x2000803c
 801320c:	20008034 	.word	0x20008034
 8013210:	2000803d 	.word	0x2000803d
 8013214:	20008004 	.word	0x20008004

08013218 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013218:	b590      	push	{r4, r7, lr}
 801321a:	b085      	sub	sp, #20
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d106      	bne.n	8013236 <tcp_oos_insert_segment+0x1e>
 8013228:	4b3b      	ldr	r3, [pc, #236]	; (8013318 <tcp_oos_insert_segment+0x100>)
 801322a:	f240 421f 	movw	r2, #1055	; 0x41f
 801322e:	493b      	ldr	r1, [pc, #236]	; (801331c <tcp_oos_insert_segment+0x104>)
 8013230:	483b      	ldr	r0, [pc, #236]	; (8013320 <tcp_oos_insert_segment+0x108>)
 8013232:	f005 fed7 	bl	8018fe4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	899b      	ldrh	r3, [r3, #12]
 801323c:	b29b      	uxth	r3, r3
 801323e:	4618      	mov	r0, r3
 8013240:	f7fb fc18 	bl	800ea74 <lwip_htons>
 8013244:	4603      	mov	r3, r0
 8013246:	b2db      	uxtb	r3, r3
 8013248:	f003 0301 	and.w	r3, r3, #1
 801324c:	2b00      	cmp	r3, #0
 801324e:	d028      	beq.n	80132a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013250:	6838      	ldr	r0, [r7, #0]
 8013252:	f7fe fa63 	bl	801171c <tcp_segs_free>
    next = NULL;
 8013256:	2300      	movs	r3, #0
 8013258:	603b      	str	r3, [r7, #0]
 801325a:	e056      	b.n	801330a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	899b      	ldrh	r3, [r3, #12]
 8013262:	b29b      	uxth	r3, r3
 8013264:	4618      	mov	r0, r3
 8013266:	f7fb fc05 	bl	800ea74 <lwip_htons>
 801326a:	4603      	mov	r3, r0
 801326c:	b2db      	uxtb	r3, r3
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d00d      	beq.n	8013292 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	899b      	ldrh	r3, [r3, #12]
 801327c:	b29c      	uxth	r4, r3
 801327e:	2001      	movs	r0, #1
 8013280:	f7fb fbf8 	bl	800ea74 <lwip_htons>
 8013284:	4603      	mov	r3, r0
 8013286:	461a      	mov	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	4322      	orrs	r2, r4
 801328e:	b292      	uxth	r2, r2
 8013290:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f7fe fa52 	bl	8011746 <tcp_seg_free>
    while (next &&
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00e      	beq.n	80132c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	891b      	ldrh	r3, [r3, #8]
 80132ac:	461a      	mov	r2, r3
 80132ae:	4b1d      	ldr	r3, [pc, #116]	; (8013324 <tcp_oos_insert_segment+0x10c>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	441a      	add	r2, r3
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	6839      	ldr	r1, [r7, #0]
 80132bc:	8909      	ldrh	r1, [r1, #8]
 80132be:	440b      	add	r3, r1
 80132c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	daca      	bge.n	801325c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d01e      	beq.n	801330a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	891b      	ldrh	r3, [r3, #8]
 80132d0:	461a      	mov	r2, r3
 80132d2:	4b14      	ldr	r3, [pc, #80]	; (8013324 <tcp_oos_insert_segment+0x10c>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	441a      	add	r2, r3
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	dd12      	ble.n	801330a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	68db      	ldr	r3, [r3, #12]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	4b0d      	ldr	r3, [pc, #52]	; (8013324 <tcp_oos_insert_segment+0x10c>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685a      	ldr	r2, [r3, #4]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	891b      	ldrh	r3, [r3, #8]
 8013302:	4619      	mov	r1, r3
 8013304:	4610      	mov	r0, r2
 8013306:	f7fc fe25 	bl	800ff54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	683a      	ldr	r2, [r7, #0]
 801330e:	601a      	str	r2, [r3, #0]
}
 8013310:	bf00      	nop
 8013312:	3714      	adds	r7, #20
 8013314:	46bd      	mov	sp, r7
 8013316:	bd90      	pop	{r4, r7, pc}
 8013318:	0801c8f8 	.word	0x0801c8f8
 801331c:	0801cbb8 	.word	0x0801cbb8
 8013320:	0801c944 	.word	0x0801c944
 8013324:	20008030 	.word	0x20008030

08013328 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013328:	b5b0      	push	{r4, r5, r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
 8013334:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013336:	e03e      	b.n	80133b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	4618      	mov	r0, r3
 8013348:	f7fd f812 	bl	8010370 <pbuf_clen>
 801334c:	4603      	mov	r3, r0
 801334e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013356:	8a7a      	ldrh	r2, [r7, #18]
 8013358:	429a      	cmp	r2, r3
 801335a:	d906      	bls.n	801336a <tcp_free_acked_segments+0x42>
 801335c:	4b2a      	ldr	r3, [pc, #168]	; (8013408 <tcp_free_acked_segments+0xe0>)
 801335e:	f240 4257 	movw	r2, #1111	; 0x457
 8013362:	492a      	ldr	r1, [pc, #168]	; (801340c <tcp_free_acked_segments+0xe4>)
 8013364:	482a      	ldr	r0, [pc, #168]	; (8013410 <tcp_free_acked_segments+0xe8>)
 8013366:	f005 fe3d 	bl	8018fe4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013370:	8a7b      	ldrh	r3, [r7, #18]
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	b29a      	uxth	r2, r3
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	891a      	ldrh	r2, [r3, #8]
 8013380:	4b24      	ldr	r3, [pc, #144]	; (8013414 <tcp_free_acked_segments+0xec>)
 8013382:	881b      	ldrh	r3, [r3, #0]
 8013384:	4413      	add	r3, r2
 8013386:	b29a      	uxth	r2, r3
 8013388:	4b22      	ldr	r3, [pc, #136]	; (8013414 <tcp_free_acked_segments+0xec>)
 801338a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801338c:	6978      	ldr	r0, [r7, #20]
 801338e:	f7fe f9da 	bl	8011746 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00c      	beq.n	80133b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d109      	bne.n	80133b6 <tcp_free_acked_segments+0x8e>
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d106      	bne.n	80133b6 <tcp_free_acked_segments+0x8e>
 80133a8:	4b17      	ldr	r3, [pc, #92]	; (8013408 <tcp_free_acked_segments+0xe0>)
 80133aa:	f240 4261 	movw	r2, #1121	; 0x461
 80133ae:	491a      	ldr	r1, [pc, #104]	; (8013418 <tcp_free_acked_segments+0xf0>)
 80133b0:	4817      	ldr	r0, [pc, #92]	; (8013410 <tcp_free_acked_segments+0xe8>)
 80133b2:	f005 fe17 	bl	8018fe4 <iprintf>
  while (seg_list != NULL &&
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d020      	beq.n	80133fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7fb fb6b 	bl	800ea9e <lwip_htonl>
 80133c8:	4604      	mov	r4, r0
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	891b      	ldrh	r3, [r3, #8]
 80133ce:	461d      	mov	r5, r3
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	899b      	ldrh	r3, [r3, #12]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	4618      	mov	r0, r3
 80133da:	f7fb fb4b 	bl	800ea74 <lwip_htons>
 80133de:	4603      	mov	r3, r0
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	f003 0303 	and.w	r3, r3, #3
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <tcp_free_acked_segments+0xc6>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e000      	b.n	80133f0 <tcp_free_acked_segments+0xc8>
 80133ee:	2300      	movs	r3, #0
 80133f0:	442b      	add	r3, r5
 80133f2:	18e2      	adds	r2, r4, r3
 80133f4:	4b09      	ldr	r3, [pc, #36]	; (801341c <tcp_free_acked_segments+0xf4>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	dd9c      	ble.n	8013338 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80133fe:	68bb      	ldr	r3, [r7, #8]
}
 8013400:	4618      	mov	r0, r3
 8013402:	3718      	adds	r7, #24
 8013404:	46bd      	mov	sp, r7
 8013406:	bdb0      	pop	{r4, r5, r7, pc}
 8013408:	0801c8f8 	.word	0x0801c8f8
 801340c:	0801cbe0 	.word	0x0801cbe0
 8013410:	0801c944 	.word	0x0801c944
 8013414:	20008038 	.word	0x20008038
 8013418:	0801cc08 	.word	0x0801cc08
 801341c:	20008034 	.word	0x20008034

08013420 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013420:	b5b0      	push	{r4, r5, r7, lr}
 8013422:	b094      	sub	sp, #80	; 0x50
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d106      	bne.n	8013440 <tcp_receive+0x20>
 8013432:	4b91      	ldr	r3, [pc, #580]	; (8013678 <tcp_receive+0x258>)
 8013434:	f240 427b 	movw	r2, #1147	; 0x47b
 8013438:	4990      	ldr	r1, [pc, #576]	; (801367c <tcp_receive+0x25c>)
 801343a:	4891      	ldr	r0, [pc, #580]	; (8013680 <tcp_receive+0x260>)
 801343c:	f005 fdd2 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	7d1b      	ldrb	r3, [r3, #20]
 8013444:	2b03      	cmp	r3, #3
 8013446:	d806      	bhi.n	8013456 <tcp_receive+0x36>
 8013448:	4b8b      	ldr	r3, [pc, #556]	; (8013678 <tcp_receive+0x258>)
 801344a:	f240 427c 	movw	r2, #1148	; 0x47c
 801344e:	498d      	ldr	r1, [pc, #564]	; (8013684 <tcp_receive+0x264>)
 8013450:	488b      	ldr	r0, [pc, #556]	; (8013680 <tcp_receive+0x260>)
 8013452:	f005 fdc7 	bl	8018fe4 <iprintf>

  if (flags & TCP_ACK) {
 8013456:	4b8c      	ldr	r3, [pc, #560]	; (8013688 <tcp_receive+0x268>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	f003 0310 	and.w	r3, r3, #16
 801345e:	2b00      	cmp	r3, #0
 8013460:	f000 8264 	beq.w	801392c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801346a:	461a      	mov	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013470:	4413      	add	r3, r2
 8013472:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013478:	4b84      	ldr	r3, [pc, #528]	; (801368c <tcp_receive+0x26c>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	1ad3      	subs	r3, r2, r3
 801347e:	2b00      	cmp	r3, #0
 8013480:	db1b      	blt.n	80134ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013486:	4b81      	ldr	r3, [pc, #516]	; (801368c <tcp_receive+0x26c>)
 8013488:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801348a:	429a      	cmp	r2, r3
 801348c:	d106      	bne.n	801349c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013492:	4b7f      	ldr	r3, [pc, #508]	; (8013690 <tcp_receive+0x270>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	2b00      	cmp	r3, #0
 801349a:	db0e      	blt.n	80134ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134a0:	4b7b      	ldr	r3, [pc, #492]	; (8013690 <tcp_receive+0x270>)
 80134a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d125      	bne.n	80134f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134a8:	4b7a      	ldr	r3, [pc, #488]	; (8013694 <tcp_receive+0x274>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	89db      	ldrh	r3, [r3, #14]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d91c      	bls.n	80134f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80134ba:	4b76      	ldr	r3, [pc, #472]	; (8013694 <tcp_receive+0x274>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	89db      	ldrh	r3, [r3, #14]
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d205      	bcs.n	80134e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80134e4:	4b69      	ldr	r3, [pc, #420]	; (801368c <tcp_receive+0x26c>)
 80134e6:	681a      	ldr	r2, [r3, #0]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80134ec:	4b68      	ldr	r3, [pc, #416]	; (8013690 <tcp_receive+0x270>)
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80134f4:	4b66      	ldr	r3, [pc, #408]	; (8013690 <tcp_receive+0x270>)
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134fc:	1ad3      	subs	r3, r2, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	dc58      	bgt.n	80135b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013502:	4b65      	ldr	r3, [pc, #404]	; (8013698 <tcp_receive+0x278>)
 8013504:	881b      	ldrh	r3, [r3, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d14b      	bne.n	80135a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013514:	4413      	add	r3, r2
 8013516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013518:	429a      	cmp	r2, r3
 801351a:	d142      	bne.n	80135a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013522:	2b00      	cmp	r3, #0
 8013524:	db3d      	blt.n	80135a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801352a:	4b59      	ldr	r3, [pc, #356]	; (8013690 <tcp_receive+0x270>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	429a      	cmp	r2, r3
 8013530:	d137      	bne.n	80135a2 <tcp_receive+0x182>
              found_dupack = 1;
 8013532:	2301      	movs	r3, #1
 8013534:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801353c:	2bff      	cmp	r3, #255	; 0xff
 801353e:	d007      	beq.n	8013550 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013546:	3301      	adds	r3, #1
 8013548:	b2da      	uxtb	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013556:	2b03      	cmp	r3, #3
 8013558:	d91b      	bls.n	8013592 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013564:	4413      	add	r3, r2
 8013566:	b29a      	uxth	r2, r3
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801356e:	429a      	cmp	r2, r3
 8013570:	d30a      	bcc.n	8013588 <tcp_receive+0x168>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801357c:	4413      	add	r3, r2
 801357e:	b29a      	uxth	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013586:	e004      	b.n	8013592 <tcp_receive+0x172>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013598:	2b02      	cmp	r3, #2
 801359a:	d902      	bls.n	80135a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f001 feed 	bl	801537c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80135a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	f040 8161 	bne.w	801386c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2200      	movs	r2, #0
 80135ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80135b2:	e15b      	b.n	801386c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80135b4:	4b36      	ldr	r3, [pc, #216]	; (8013690 <tcp_receive+0x270>)
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	3b01      	subs	r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f2c0 814e 	blt.w	8013862 <tcp_receive+0x442>
 80135c6:	4b32      	ldr	r3, [pc, #200]	; (8013690 <tcp_receive+0x270>)
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f300 8146 	bgt.w	8013862 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	8b5b      	ldrh	r3, [r3, #26]
 80135da:	f003 0304 	and.w	r3, r3, #4
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d010      	beq.n	8013604 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8b5b      	ldrh	r3, [r3, #26]
 80135e6:	f023 0304 	bic.w	r3, r3, #4
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013612:	10db      	asrs	r3, r3, #3
 8013614:	b21b      	sxth	r3, r3
 8013616:	b29a      	uxth	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801361e:	b29b      	uxth	r3, r3
 8013620:	4413      	add	r3, r2
 8013622:	b29b      	uxth	r3, r3
 8013624:	b21a      	sxth	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801362c:	4b18      	ldr	r3, [pc, #96]	; (8013690 <tcp_receive+0x270>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	b29a      	uxth	r2, r3
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013636:	b29b      	uxth	r3, r3
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2200      	movs	r2, #0
 8013640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013644:	4b12      	ldr	r3, [pc, #72]	; (8013690 <tcp_receive+0x270>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	7d1b      	ldrb	r3, [r3, #20]
 8013650:	2b03      	cmp	r3, #3
 8013652:	f240 8097 	bls.w	8013784 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013662:	429a      	cmp	r2, r3
 8013664:	d245      	bcs.n	80136f2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	8b5b      	ldrh	r3, [r3, #26]
 801366a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801366e:	2b00      	cmp	r3, #0
 8013670:	d014      	beq.n	801369c <tcp_receive+0x27c>
 8013672:	2301      	movs	r3, #1
 8013674:	e013      	b.n	801369e <tcp_receive+0x27e>
 8013676:	bf00      	nop
 8013678:	0801c8f8 	.word	0x0801c8f8
 801367c:	0801cc28 	.word	0x0801cc28
 8013680:	0801c944 	.word	0x0801c944
 8013684:	0801cc44 	.word	0x0801cc44
 8013688:	2000803c 	.word	0x2000803c
 801368c:	20008030 	.word	0x20008030
 8013690:	20008034 	.word	0x20008034
 8013694:	20008020 	.word	0x20008020
 8013698:	2000803a 	.word	0x2000803a
 801369c:	2302      	movs	r3, #2
 801369e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80136a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136ac:	fb12 f303 	smulbb	r3, r2, r3
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136b4:	4293      	cmp	r3, r2
 80136b6:	bf28      	it	cs
 80136b8:	4613      	movcs	r3, r2
 80136ba:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136c4:	4413      	add	r3, r2
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d309      	bcc.n	80136e6 <tcp_receive+0x2c6>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136da:	4413      	add	r3, r2
 80136dc:	b29a      	uxth	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136e4:	e04e      	b.n	8013784 <tcp_receive+0x364>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136f0:	e048      	b.n	8013784 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80136f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80136fa:	4413      	add	r3, r2
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013704:	429a      	cmp	r2, r3
 8013706:	d309      	bcc.n	801371c <tcp_receive+0x2fc>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801370e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013710:	4413      	add	r3, r2
 8013712:	b29a      	uxth	r2, r3
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801371a:	e004      	b.n	8013726 <tcp_receive+0x306>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013732:	429a      	cmp	r2, r3
 8013734:	d326      	bcc.n	8013784 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	b29a      	uxth	r2, r3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013756:	4413      	add	r3, r2
 8013758:	b29a      	uxth	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013760:	429a      	cmp	r2, r3
 8013762:	d30a      	bcc.n	801377a <tcp_receive+0x35a>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801376e:	4413      	add	r3, r2
 8013770:	b29a      	uxth	r2, r3
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013778:	e004      	b.n	8013784 <tcp_receive+0x364>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013780:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801378c:	4a98      	ldr	r2, [pc, #608]	; (80139f0 <tcp_receive+0x5d0>)
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fdca 	bl	8013328 <tcp_free_acked_segments>
 8013794:	4602      	mov	r2, r0
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137a2:	4a94      	ldr	r2, [pc, #592]	; (80139f4 <tcp_receive+0x5d4>)
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f7ff fdbf 	bl	8013328 <tcp_free_acked_segments>
 80137aa:	4602      	mov	r2, r0
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d104      	bne.n	80137c2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137be:	861a      	strh	r2, [r3, #48]	; 0x30
 80137c0:	e002      	b.n	80137c8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2200      	movs	r2, #0
 80137c6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d103      	bne.n	80137de <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2200      	movs	r2, #0
 80137da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80137e4:	4b84      	ldr	r3, [pc, #528]	; (80139f8 <tcp_receive+0x5d8>)
 80137e6:	881b      	ldrh	r3, [r3, #0]
 80137e8:	4413      	add	r3, r2
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	8b5b      	ldrh	r3, [r3, #26]
 80137f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d035      	beq.n	801386a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013802:	2b00      	cmp	r3, #0
 8013804:	d118      	bne.n	8013838 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00c      	beq.n	8013828 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	4618      	mov	r0, r3
 801381c:	f7fb f93f 	bl	800ea9e <lwip_htonl>
 8013820:	4603      	mov	r3, r0
 8013822:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013824:	2b00      	cmp	r3, #0
 8013826:	dc20      	bgt.n	801386a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	8b5b      	ldrh	r3, [r3, #26]
 801382c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013830:	b29a      	uxth	r2, r3
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013836:	e018      	b.n	801386a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	f7fb f92a 	bl	800ea9e <lwip_htonl>
 801384a:	4603      	mov	r3, r0
 801384c:	1ae3      	subs	r3, r4, r3
 801384e:	2b00      	cmp	r3, #0
 8013850:	dc0b      	bgt.n	801386a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	8b5b      	ldrh	r3, [r3, #26]
 8013856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801385a:	b29a      	uxth	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013860:	e003      	b.n	801386a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f001 ff76 	bl	8015754 <tcp_send_empty_ack>
 8013868:	e000      	b.n	801386c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801386a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013870:	2b00      	cmp	r3, #0
 8013872:	d05b      	beq.n	801392c <tcp_receive+0x50c>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013878:	4b60      	ldr	r3, [pc, #384]	; (80139fc <tcp_receive+0x5dc>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	1ad3      	subs	r3, r2, r3
 801387e:	2b00      	cmp	r3, #0
 8013880:	da54      	bge.n	801392c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013882:	4b5f      	ldr	r3, [pc, #380]	; (8013a00 <tcp_receive+0x5e0>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	b29a      	uxth	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801388c:	b29b      	uxth	r3, r3
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	b29b      	uxth	r3, r3
 8013892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013896:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80138a0:	10db      	asrs	r3, r3, #3
 80138a2:	b21b      	sxth	r3, r3
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	1ad3      	subs	r3, r2, r3
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80138ba:	4413      	add	r3, r2
 80138bc:	b29b      	uxth	r3, r3
 80138be:	b21a      	sxth	r2, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80138c4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	da05      	bge.n	80138d8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80138cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80138d0:	425b      	negs	r3, r3
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80138d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80138e2:	109b      	asrs	r3, r3, #2
 80138e4:	b21b      	sxth	r3, r3
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80138fc:	4413      	add	r3, r2
 80138fe:	b29b      	uxth	r3, r3
 8013900:	b21a      	sxth	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801390c:	10db      	asrs	r3, r3, #3
 801390e:	b21b      	sxth	r3, r3
 8013910:	b29a      	uxth	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013918:	b29b      	uxth	r3, r3
 801391a:	4413      	add	r3, r2
 801391c:	b29b      	uxth	r3, r3
 801391e:	b21a      	sxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801392c:	4b35      	ldr	r3, [pc, #212]	; (8013a04 <tcp_receive+0x5e4>)
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 84e2 	beq.w	80142fa <tcp_receive+0xeda>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	7d1b      	ldrb	r3, [r3, #20]
 801393a:	2b06      	cmp	r3, #6
 801393c:	f200 84dd 	bhi.w	80142fa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013944:	4b30      	ldr	r3, [pc, #192]	; (8013a08 <tcp_receive+0x5e8>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	3b01      	subs	r3, #1
 801394c:	2b00      	cmp	r3, #0
 801394e:	f2c0 808f 	blt.w	8013a70 <tcp_receive+0x650>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013956:	4b2b      	ldr	r3, [pc, #172]	; (8013a04 <tcp_receive+0x5e4>)
 8013958:	881b      	ldrh	r3, [r3, #0]
 801395a:	4619      	mov	r1, r3
 801395c:	4b2a      	ldr	r3, [pc, #168]	; (8013a08 <tcp_receive+0x5e8>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	440b      	add	r3, r1
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	3301      	adds	r3, #1
 8013966:	2b00      	cmp	r3, #0
 8013968:	f300 8082 	bgt.w	8013a70 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801396c:	4b27      	ldr	r3, [pc, #156]	; (8013a0c <tcp_receive+0x5ec>)
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013976:	4b24      	ldr	r3, [pc, #144]	; (8013a08 <tcp_receive+0x5e8>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801397e:	4b23      	ldr	r3, [pc, #140]	; (8013a0c <tcp_receive+0x5ec>)
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d106      	bne.n	8013994 <tcp_receive+0x574>
 8013986:	4b22      	ldr	r3, [pc, #136]	; (8013a10 <tcp_receive+0x5f0>)
 8013988:	f240 5294 	movw	r2, #1428	; 0x594
 801398c:	4921      	ldr	r1, [pc, #132]	; (8013a14 <tcp_receive+0x5f4>)
 801398e:	4822      	ldr	r0, [pc, #136]	; (8013a18 <tcp_receive+0x5f8>)
 8013990:	f005 fb28 	bl	8018fe4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013996:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801399a:	4293      	cmp	r3, r2
 801399c:	d906      	bls.n	80139ac <tcp_receive+0x58c>
 801399e:	4b1c      	ldr	r3, [pc, #112]	; (8013a10 <tcp_receive+0x5f0>)
 80139a0:	f240 5295 	movw	r2, #1429	; 0x595
 80139a4:	491d      	ldr	r1, [pc, #116]	; (8013a1c <tcp_receive+0x5fc>)
 80139a6:	481c      	ldr	r0, [pc, #112]	; (8013a18 <tcp_receive+0x5f8>)
 80139a8:	f005 fb1c 	bl	8018fe4 <iprintf>
      off = (u16_t)off32;
 80139ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80139b2:	4b16      	ldr	r3, [pc, #88]	; (8013a0c <tcp_receive+0x5ec>)
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	891b      	ldrh	r3, [r3, #8]
 80139b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139bc:	429a      	cmp	r2, r3
 80139be:	d906      	bls.n	80139ce <tcp_receive+0x5ae>
 80139c0:	4b13      	ldr	r3, [pc, #76]	; (8013a10 <tcp_receive+0x5f0>)
 80139c2:	f240 5297 	movw	r2, #1431	; 0x597
 80139c6:	4916      	ldr	r1, [pc, #88]	; (8013a20 <tcp_receive+0x600>)
 80139c8:	4813      	ldr	r0, [pc, #76]	; (8013a18 <tcp_receive+0x5f8>)
 80139ca:	f005 fb0b 	bl	8018fe4 <iprintf>
      inseg.len -= off;
 80139ce:	4b0f      	ldr	r3, [pc, #60]	; (8013a0c <tcp_receive+0x5ec>)
 80139d0:	891a      	ldrh	r2, [r3, #8]
 80139d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	b29a      	uxth	r2, r3
 80139da:	4b0c      	ldr	r3, [pc, #48]	; (8013a0c <tcp_receive+0x5ec>)
 80139dc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80139de:	4b0b      	ldr	r3, [pc, #44]	; (8013a0c <tcp_receive+0x5ec>)
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	891a      	ldrh	r2, [r3, #8]
 80139e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80139ec:	e02a      	b.n	8013a44 <tcp_receive+0x624>
 80139ee:	bf00      	nop
 80139f0:	0801cc60 	.word	0x0801cc60
 80139f4:	0801cc68 	.word	0x0801cc68
 80139f8:	20008038 	.word	0x20008038
 80139fc:	20008034 	.word	0x20008034
 8013a00:	20007ff8 	.word	0x20007ff8
 8013a04:	2000803a 	.word	0x2000803a
 8013a08:	20008030 	.word	0x20008030
 8013a0c:	20008010 	.word	0x20008010
 8013a10:	0801c8f8 	.word	0x0801c8f8
 8013a14:	0801cc70 	.word	0x0801cc70
 8013a18:	0801c944 	.word	0x0801c944
 8013a1c:	0801cc80 	.word	0x0801cc80
 8013a20:	0801cc90 	.word	0x0801cc90
        off -= p->len;
 8013a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a26:	895b      	ldrh	r3, [r3, #10]
 8013a28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a36:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a46:	895b      	ldrh	r3, [r3, #10]
 8013a48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d8e9      	bhi.n	8013a24 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a54:	4619      	mov	r1, r3
 8013a56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013a58:	f7fc fb7c 	bl	8010154 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a60:	4a91      	ldr	r2, [pc, #580]	; (8013ca8 <tcp_receive+0x888>)
 8013a62:	6013      	str	r3, [r2, #0]
 8013a64:	4b91      	ldr	r3, [pc, #580]	; (8013cac <tcp_receive+0x88c>)
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	4a8f      	ldr	r2, [pc, #572]	; (8013ca8 <tcp_receive+0x888>)
 8013a6a:	6812      	ldr	r2, [r2, #0]
 8013a6c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a6e:	e00d      	b.n	8013a8c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013a70:	4b8d      	ldr	r3, [pc, #564]	; (8013ca8 <tcp_receive+0x888>)
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	da06      	bge.n	8013a8c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	8b5b      	ldrh	r3, [r3, #26]
 8013a82:	f043 0302 	orr.w	r3, r3, #2
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013a8c:	4b86      	ldr	r3, [pc, #536]	; (8013ca8 <tcp_receive+0x888>)
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	f2c0 842a 	blt.w	80142f0 <tcp_receive+0xed0>
 8013a9c:	4b82      	ldr	r3, [pc, #520]	; (8013ca8 <tcp_receive+0x888>)
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa4:	6879      	ldr	r1, [r7, #4]
 8013aa6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013aa8:	440b      	add	r3, r1
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	3301      	adds	r3, #1
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f300 841e 	bgt.w	80142f0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ab8:	4b7b      	ldr	r3, [pc, #492]	; (8013ca8 <tcp_receive+0x888>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	f040 829a 	bne.w	8013ff6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013ac2:	4b7a      	ldr	r3, [pc, #488]	; (8013cac <tcp_receive+0x88c>)
 8013ac4:	891c      	ldrh	r4, [r3, #8]
 8013ac6:	4b79      	ldr	r3, [pc, #484]	; (8013cac <tcp_receive+0x88c>)
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	899b      	ldrh	r3, [r3, #12]
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7fa ffd0 	bl	800ea74 <lwip_htons>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	f003 0303 	and.w	r3, r3, #3
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <tcp_receive+0x6c4>
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	e000      	b.n	8013ae6 <tcp_receive+0x6c6>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	4423      	add	r3, r4
 8013ae8:	b29a      	uxth	r2, r3
 8013aea:	4b71      	ldr	r3, [pc, #452]	; (8013cb0 <tcp_receive+0x890>)
 8013aec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013af2:	4b6f      	ldr	r3, [pc, #444]	; (8013cb0 <tcp_receive+0x890>)
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d275      	bcs.n	8013be6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013afa:	4b6c      	ldr	r3, [pc, #432]	; (8013cac <tcp_receive+0x88c>)
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	899b      	ldrh	r3, [r3, #12]
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fa ffb6 	bl	800ea74 <lwip_htons>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d01f      	beq.n	8013b54 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013b14:	4b65      	ldr	r3, [pc, #404]	; (8013cac <tcp_receive+0x88c>)
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	899b      	ldrh	r3, [r3, #12]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	b21b      	sxth	r3, r3
 8013b1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b22:	b21c      	sxth	r4, r3
 8013b24:	4b61      	ldr	r3, [pc, #388]	; (8013cac <tcp_receive+0x88c>)
 8013b26:	68db      	ldr	r3, [r3, #12]
 8013b28:	899b      	ldrh	r3, [r3, #12]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fa ffa1 	bl	800ea74 <lwip_htons>
 8013b32:	4603      	mov	r3, r0
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013b3c:	b29b      	uxth	r3, r3
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fa ff98 	bl	800ea74 <lwip_htons>
 8013b44:	4603      	mov	r3, r0
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	4323      	orrs	r3, r4
 8013b4a:	b21a      	sxth	r2, r3
 8013b4c:	4b57      	ldr	r3, [pc, #348]	; (8013cac <tcp_receive+0x88c>)
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	b292      	uxth	r2, r2
 8013b52:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b58:	4b54      	ldr	r3, [pc, #336]	; (8013cac <tcp_receive+0x88c>)
 8013b5a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013b5c:	4b53      	ldr	r3, [pc, #332]	; (8013cac <tcp_receive+0x88c>)
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	899b      	ldrh	r3, [r3, #12]
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7fa ff85 	bl	800ea74 <lwip_htons>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	f003 0302 	and.w	r3, r3, #2
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d005      	beq.n	8013b82 <tcp_receive+0x762>
            inseg.len -= 1;
 8013b76:	4b4d      	ldr	r3, [pc, #308]	; (8013cac <tcp_receive+0x88c>)
 8013b78:	891b      	ldrh	r3, [r3, #8]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	4b4b      	ldr	r3, [pc, #300]	; (8013cac <tcp_receive+0x88c>)
 8013b80:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013b82:	4b4a      	ldr	r3, [pc, #296]	; (8013cac <tcp_receive+0x88c>)
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	4a49      	ldr	r2, [pc, #292]	; (8013cac <tcp_receive+0x88c>)
 8013b88:	8912      	ldrh	r2, [r2, #8]
 8013b8a:	4611      	mov	r1, r2
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7fc f9e1 	bl	800ff54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013b92:	4b46      	ldr	r3, [pc, #280]	; (8013cac <tcp_receive+0x88c>)
 8013b94:	891c      	ldrh	r4, [r3, #8]
 8013b96:	4b45      	ldr	r3, [pc, #276]	; (8013cac <tcp_receive+0x88c>)
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	899b      	ldrh	r3, [r3, #12]
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fa ff68 	bl	800ea74 <lwip_htons>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	f003 0303 	and.w	r3, r3, #3
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d001      	beq.n	8013bb4 <tcp_receive+0x794>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e000      	b.n	8013bb6 <tcp_receive+0x796>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	4423      	add	r3, r4
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	4b3d      	ldr	r3, [pc, #244]	; (8013cb0 <tcp_receive+0x890>)
 8013bbc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013bbe:	4b3c      	ldr	r3, [pc, #240]	; (8013cb0 <tcp_receive+0x890>)
 8013bc0:	881b      	ldrh	r3, [r3, #0]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	4b38      	ldr	r3, [pc, #224]	; (8013ca8 <tcp_receive+0x888>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	441a      	add	r2, r3
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013bd2:	440b      	add	r3, r1
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d006      	beq.n	8013be6 <tcp_receive+0x7c6>
 8013bd8:	4b36      	ldr	r3, [pc, #216]	; (8013cb4 <tcp_receive+0x894>)
 8013bda:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013bde:	4936      	ldr	r1, [pc, #216]	; (8013cb8 <tcp_receive+0x898>)
 8013be0:	4836      	ldr	r0, [pc, #216]	; (8013cbc <tcp_receive+0x89c>)
 8013be2:	f005 f9ff 	bl	8018fe4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	f000 80e7 	beq.w	8013dbe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013bf0:	4b2e      	ldr	r3, [pc, #184]	; (8013cac <tcp_receive+0x88c>)
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	899b      	ldrh	r3, [r3, #12]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fa ff3b 	bl	800ea74 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	f003 0301 	and.w	r3, r3, #1
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d010      	beq.n	8013c2c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013c0a:	e00a      	b.n	8013c22 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013c1c:	68f8      	ldr	r0, [r7, #12]
 8013c1e:	f7fd fd92 	bl	8011746 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d1f0      	bne.n	8013c0c <tcp_receive+0x7ec>
 8013c2a:	e0c8      	b.n	8013dbe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013c32:	e052      	b.n	8013cda <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	899b      	ldrh	r3, [r3, #12]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fa ff19 	bl	800ea74 <lwip_htons>
 8013c42:	4603      	mov	r3, r0
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	f003 0301 	and.w	r3, r3, #1
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d03d      	beq.n	8013cca <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013c4e:	4b17      	ldr	r3, [pc, #92]	; (8013cac <tcp_receive+0x88c>)
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	899b      	ldrh	r3, [r3, #12]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fa ff0c 	bl	800ea74 <lwip_htons>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d130      	bne.n	8013cca <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013c68:	4b10      	ldr	r3, [pc, #64]	; (8013cac <tcp_receive+0x88c>)
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	899b      	ldrh	r3, [r3, #12]
 8013c6e:	b29c      	uxth	r4, r3
 8013c70:	2001      	movs	r0, #1
 8013c72:	f7fa feff 	bl	800ea74 <lwip_htons>
 8013c76:	4603      	mov	r3, r0
 8013c78:	461a      	mov	r2, r3
 8013c7a:	4b0c      	ldr	r3, [pc, #48]	; (8013cac <tcp_receive+0x88c>)
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	4322      	orrs	r2, r4
 8013c80:	b292      	uxth	r2, r2
 8013c82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013c84:	4b09      	ldr	r3, [pc, #36]	; (8013cac <tcp_receive+0x88c>)
 8013c86:	891c      	ldrh	r4, [r3, #8]
 8013c88:	4b08      	ldr	r3, [pc, #32]	; (8013cac <tcp_receive+0x88c>)
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	899b      	ldrh	r3, [r3, #12]
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7fa feef 	bl	800ea74 <lwip_htons>
 8013c96:	4603      	mov	r3, r0
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	f003 0303 	and.w	r3, r3, #3
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00e      	beq.n	8013cc0 <tcp_receive+0x8a0>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e00d      	b.n	8013cc2 <tcp_receive+0x8a2>
 8013ca6:	bf00      	nop
 8013ca8:	20008030 	.word	0x20008030
 8013cac:	20008010 	.word	0x20008010
 8013cb0:	2000803a 	.word	0x2000803a
 8013cb4:	0801c8f8 	.word	0x0801c8f8
 8013cb8:	0801cca0 	.word	0x0801cca0
 8013cbc:	0801c944 	.word	0x0801c944
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	4423      	add	r3, r4
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	4b98      	ldr	r3, [pc, #608]	; (8013f28 <tcp_receive+0xb08>)
 8013cc8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ccc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013cd4:	6938      	ldr	r0, [r7, #16]
 8013cd6:	f7fd fd36 	bl	8011746 <tcp_seg_free>
            while (next &&
 8013cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00e      	beq.n	8013cfe <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013ce0:	4b91      	ldr	r3, [pc, #580]	; (8013f28 <tcp_receive+0xb08>)
 8013ce2:	881b      	ldrh	r3, [r3, #0]
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	4b91      	ldr	r3, [pc, #580]	; (8013f2c <tcp_receive+0xb0c>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	441a      	add	r2, r3
 8013cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013cf4:	8909      	ldrh	r1, [r1, #8]
 8013cf6:	440b      	add	r3, r1
 8013cf8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	da9a      	bge.n	8013c34 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d059      	beq.n	8013db8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013d04:	4b88      	ldr	r3, [pc, #544]	; (8013f28 <tcp_receive+0xb08>)
 8013d06:	881b      	ldrh	r3, [r3, #0]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	4b88      	ldr	r3, [pc, #544]	; (8013f2c <tcp_receive+0xb0c>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	441a      	add	r2, r3
 8013d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d12:	68db      	ldr	r3, [r3, #12]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dd4d      	ble.n	8013db8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d1e:	68db      	ldr	r3, [r3, #12]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	4b81      	ldr	r3, [pc, #516]	; (8013f2c <tcp_receive+0xb0c>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	4b80      	ldr	r3, [pc, #512]	; (8013f30 <tcp_receive+0xb10>)
 8013d30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013d32:	4b7f      	ldr	r3, [pc, #508]	; (8013f30 <tcp_receive+0xb10>)
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	899b      	ldrh	r3, [r3, #12]
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fa fe9a 	bl	800ea74 <lwip_htons>
 8013d40:	4603      	mov	r3, r0
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	f003 0302 	and.w	r3, r3, #2
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d005      	beq.n	8013d58 <tcp_receive+0x938>
                inseg.len -= 1;
 8013d4c:	4b78      	ldr	r3, [pc, #480]	; (8013f30 <tcp_receive+0xb10>)
 8013d4e:	891b      	ldrh	r3, [r3, #8]
 8013d50:	3b01      	subs	r3, #1
 8013d52:	b29a      	uxth	r2, r3
 8013d54:	4b76      	ldr	r3, [pc, #472]	; (8013f30 <tcp_receive+0xb10>)
 8013d56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013d58:	4b75      	ldr	r3, [pc, #468]	; (8013f30 <tcp_receive+0xb10>)
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	4a74      	ldr	r2, [pc, #464]	; (8013f30 <tcp_receive+0xb10>)
 8013d5e:	8912      	ldrh	r2, [r2, #8]
 8013d60:	4611      	mov	r1, r2
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fc f8f6 	bl	800ff54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013d68:	4b71      	ldr	r3, [pc, #452]	; (8013f30 <tcp_receive+0xb10>)
 8013d6a:	891c      	ldrh	r4, [r3, #8]
 8013d6c:	4b70      	ldr	r3, [pc, #448]	; (8013f30 <tcp_receive+0xb10>)
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	899b      	ldrh	r3, [r3, #12]
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fa fe7d 	bl	800ea74 <lwip_htons>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	f003 0303 	and.w	r3, r3, #3
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d001      	beq.n	8013d8a <tcp_receive+0x96a>
 8013d86:	2301      	movs	r3, #1
 8013d88:	e000      	b.n	8013d8c <tcp_receive+0x96c>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	4423      	add	r3, r4
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	4b65      	ldr	r3, [pc, #404]	; (8013f28 <tcp_receive+0xb08>)
 8013d92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013d94:	4b64      	ldr	r3, [pc, #400]	; (8013f28 <tcp_receive+0xb08>)
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	461a      	mov	r2, r3
 8013d9a:	4b64      	ldr	r3, [pc, #400]	; (8013f2c <tcp_receive+0xb0c>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	441a      	add	r2, r3
 8013da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d006      	beq.n	8013db8 <tcp_receive+0x998>
 8013daa:	4b62      	ldr	r3, [pc, #392]	; (8013f34 <tcp_receive+0xb14>)
 8013dac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013db0:	4961      	ldr	r1, [pc, #388]	; (8013f38 <tcp_receive+0xb18>)
 8013db2:	4862      	ldr	r0, [pc, #392]	; (8013f3c <tcp_receive+0xb1c>)
 8013db4:	f005 f916 	bl	8018fe4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013dbc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013dbe:	4b5a      	ldr	r3, [pc, #360]	; (8013f28 <tcp_receive+0xb08>)
 8013dc0:	881b      	ldrh	r3, [r3, #0]
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	4b59      	ldr	r3, [pc, #356]	; (8013f2c <tcp_receive+0xb0c>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	441a      	add	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013dd2:	4b55      	ldr	r3, [pc, #340]	; (8013f28 <tcp_receive+0xb08>)
 8013dd4:	881b      	ldrh	r3, [r3, #0]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d206      	bcs.n	8013de8 <tcp_receive+0x9c8>
 8013dda:	4b56      	ldr	r3, [pc, #344]	; (8013f34 <tcp_receive+0xb14>)
 8013ddc:	f240 6207 	movw	r2, #1543	; 0x607
 8013de0:	4957      	ldr	r1, [pc, #348]	; (8013f40 <tcp_receive+0xb20>)
 8013de2:	4856      	ldr	r0, [pc, #344]	; (8013f3c <tcp_receive+0xb1c>)
 8013de4:	f005 f8fe 	bl	8018fe4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013dec:	4b4e      	ldr	r3, [pc, #312]	; (8013f28 <tcp_receive+0xb08>)
 8013dee:	881b      	ldrh	r3, [r3, #0]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f7fc ffc5 	bl	8010d88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013dfe:	4b4c      	ldr	r3, [pc, #304]	; (8013f30 <tcp_receive+0xb10>)
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	891b      	ldrh	r3, [r3, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013e08:	4b49      	ldr	r3, [pc, #292]	; (8013f30 <tcp_receive+0xb10>)
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	4a4d      	ldr	r2, [pc, #308]	; (8013f44 <tcp_receive+0xb24>)
 8013e0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013e10:	4b47      	ldr	r3, [pc, #284]	; (8013f30 <tcp_receive+0xb10>)
 8013e12:	2200      	movs	r2, #0
 8013e14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013e16:	4b46      	ldr	r3, [pc, #280]	; (8013f30 <tcp_receive+0xb10>)
 8013e18:	68db      	ldr	r3, [r3, #12]
 8013e1a:	899b      	ldrh	r3, [r3, #12]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fa fe28 	bl	800ea74 <lwip_htons>
 8013e24:	4603      	mov	r3, r0
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	f003 0301 	and.w	r3, r3, #1
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f000 80b8 	beq.w	8013fa2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013e32:	4b45      	ldr	r3, [pc, #276]	; (8013f48 <tcp_receive+0xb28>)
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	f043 0320 	orr.w	r3, r3, #32
 8013e3a:	b2da      	uxtb	r2, r3
 8013e3c:	4b42      	ldr	r3, [pc, #264]	; (8013f48 <tcp_receive+0xb28>)
 8013e3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013e40:	e0af      	b.n	8013fa2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	4a36      	ldr	r2, [pc, #216]	; (8013f2c <tcp_receive+0xb0c>)
 8013e52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	891b      	ldrh	r3, [r3, #8]
 8013e58:	461c      	mov	r4, r3
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	899b      	ldrh	r3, [r3, #12]
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fa fe06 	bl	800ea74 <lwip_htons>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	f003 0303 	and.w	r3, r3, #3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d001      	beq.n	8013e78 <tcp_receive+0xa58>
 8013e74:	2301      	movs	r3, #1
 8013e76:	e000      	b.n	8013e7a <tcp_receive+0xa5a>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	191a      	adds	r2, r3, r4
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e80:	441a      	add	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e8a:	461c      	mov	r4, r3
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	891b      	ldrh	r3, [r3, #8]
 8013e90:	461d      	mov	r5, r3
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	899b      	ldrh	r3, [r3, #12]
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fa fdea 	bl	800ea74 <lwip_htons>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	f003 0303 	and.w	r3, r3, #3
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d001      	beq.n	8013eb0 <tcp_receive+0xa90>
 8013eac:	2301      	movs	r3, #1
 8013eae:	e000      	b.n	8013eb2 <tcp_receive+0xa92>
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	442b      	add	r3, r5
 8013eb4:	429c      	cmp	r4, r3
 8013eb6:	d206      	bcs.n	8013ec6 <tcp_receive+0xaa6>
 8013eb8:	4b1e      	ldr	r3, [pc, #120]	; (8013f34 <tcp_receive+0xb14>)
 8013eba:	f240 622b 	movw	r2, #1579	; 0x62b
 8013ebe:	4923      	ldr	r1, [pc, #140]	; (8013f4c <tcp_receive+0xb2c>)
 8013ec0:	481e      	ldr	r0, [pc, #120]	; (8013f3c <tcp_receive+0xb1c>)
 8013ec2:	f005 f88f 	bl	8018fe4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	891b      	ldrh	r3, [r3, #8]
 8013eca:	461c      	mov	r4, r3
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	899b      	ldrh	r3, [r3, #12]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7fa fdcd 	bl	800ea74 <lwip_htons>
 8013eda:	4603      	mov	r3, r0
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	f003 0303 	and.w	r3, r3, #3
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d001      	beq.n	8013eea <tcp_receive+0xaca>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	e000      	b.n	8013eec <tcp_receive+0xacc>
 8013eea:	2300      	movs	r3, #0
 8013eec:	1919      	adds	r1, r3, r4
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ef2:	b28b      	uxth	r3, r1
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7fc ff43 	bl	8010d88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	891b      	ldrh	r3, [r3, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d028      	beq.n	8013f5e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013f0c:	4b0d      	ldr	r3, [pc, #52]	; (8013f44 <tcp_receive+0xb24>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d01d      	beq.n	8013f50 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013f14:	4b0b      	ldr	r3, [pc, #44]	; (8013f44 <tcp_receive+0xb24>)
 8013f16:	681a      	ldr	r2, [r3, #0]
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4610      	mov	r0, r2
 8013f20:	f7fc fa60 	bl	80103e4 <pbuf_cat>
 8013f24:	e018      	b.n	8013f58 <tcp_receive+0xb38>
 8013f26:	bf00      	nop
 8013f28:	2000803a 	.word	0x2000803a
 8013f2c:	20008030 	.word	0x20008030
 8013f30:	20008010 	.word	0x20008010
 8013f34:	0801c8f8 	.word	0x0801c8f8
 8013f38:	0801ccd8 	.word	0x0801ccd8
 8013f3c:	0801c944 	.word	0x0801c944
 8013f40:	0801cd14 	.word	0x0801cd14
 8013f44:	20008040 	.word	0x20008040
 8013f48:	2000803d 	.word	0x2000803d
 8013f4c:	0801cd34 	.word	0x0801cd34
            } else {
              recv_data = cseg->p;
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	4a70      	ldr	r2, [pc, #448]	; (8014118 <tcp_receive+0xcf8>)
 8013f56:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	68db      	ldr	r3, [r3, #12]
 8013f62:	899b      	ldrh	r3, [r3, #12]
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fa fd84 	bl	800ea74 <lwip_htons>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	f003 0301 	and.w	r3, r3, #1
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00d      	beq.n	8013f94 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013f78:	4b68      	ldr	r3, [pc, #416]	; (801411c <tcp_receive+0xcfc>)
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	f043 0320 	orr.w	r3, r3, #32
 8013f80:	b2da      	uxtb	r2, r3
 8013f82:	4b66      	ldr	r3, [pc, #408]	; (801411c <tcp_receive+0xcfc>)
 8013f84:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	7d1b      	ldrb	r3, [r3, #20]
 8013f8a:	2b04      	cmp	r3, #4
 8013f8c:	d102      	bne.n	8013f94 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2207      	movs	r2, #7
 8013f92:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013f9c:	68b8      	ldr	r0, [r7, #8]
 8013f9e:	f7fd fbd2 	bl	8011746 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d008      	beq.n	8013fbc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fae:	68db      	ldr	r3, [r3, #12]
 8013fb0:	685a      	ldr	r2, [r3, #4]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	f43f af43 	beq.w	8013e42 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	8b5b      	ldrh	r3, [r3, #26]
 8013fc0:	f003 0301 	and.w	r3, r3, #1
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d00e      	beq.n	8013fe6 <tcp_receive+0xbc6>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	8b5b      	ldrh	r3, [r3, #26]
 8013fcc:	f023 0301 	bic.w	r3, r3, #1
 8013fd0:	b29a      	uxth	r2, r3
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	835a      	strh	r2, [r3, #26]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	8b5b      	ldrh	r3, [r3, #26]
 8013fda:	f043 0302 	orr.w	r3, r3, #2
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013fe4:	e188      	b.n	80142f8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8b5b      	ldrh	r3, [r3, #26]
 8013fea:	f043 0301 	orr.w	r3, r3, #1
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ff4:	e180      	b.n	80142f8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013ffe:	4848      	ldr	r0, [pc, #288]	; (8014120 <tcp_receive+0xd00>)
 8014000:	f7fd fbba 	bl	8011778 <tcp_seg_copy>
 8014004:	4602      	mov	r2, r0
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	675a      	str	r2, [r3, #116]	; 0x74
 801400a:	e16d      	b.n	80142e8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801400c:	2300      	movs	r3, #0
 801400e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014014:	63bb      	str	r3, [r7, #56]	; 0x38
 8014016:	e157      	b.n	80142c8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	685a      	ldr	r2, [r3, #4]
 801401e:	4b41      	ldr	r3, [pc, #260]	; (8014124 <tcp_receive+0xd04>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	429a      	cmp	r2, r3
 8014024:	d11d      	bne.n	8014062 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014026:	4b3e      	ldr	r3, [pc, #248]	; (8014120 <tcp_receive+0xd00>)
 8014028:	891a      	ldrh	r2, [r3, #8]
 801402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402c:	891b      	ldrh	r3, [r3, #8]
 801402e:	429a      	cmp	r2, r3
 8014030:	f240 814f 	bls.w	80142d2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014034:	483a      	ldr	r0, [pc, #232]	; (8014120 <tcp_receive+0xd00>)
 8014036:	f7fd fb9f 	bl	8011778 <tcp_seg_copy>
 801403a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	f000 8149 	beq.w	80142d6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014046:	2b00      	cmp	r3, #0
 8014048:	d003      	beq.n	8014052 <tcp_receive+0xc32>
                    prev->next = cseg;
 801404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	601a      	str	r2, [r3, #0]
 8014050:	e002      	b.n	8014058 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	697a      	ldr	r2, [r7, #20]
 8014056:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801405a:	6978      	ldr	r0, [r7, #20]
 801405c:	f7ff f8dc 	bl	8013218 <tcp_oos_insert_segment>
                }
                break;
 8014060:	e139      	b.n	80142d6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014064:	2b00      	cmp	r3, #0
 8014066:	d117      	bne.n	8014098 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014068:	4b2e      	ldr	r3, [pc, #184]	; (8014124 <tcp_receive+0xd04>)
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	2b00      	cmp	r3, #0
 8014076:	da57      	bge.n	8014128 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014078:	4829      	ldr	r0, [pc, #164]	; (8014120 <tcp_receive+0xd00>)
 801407a:	f7fd fb7d 	bl	8011778 <tcp_seg_copy>
 801407e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 8129 	beq.w	80142da <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	69ba      	ldr	r2, [r7, #24]
 801408c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801408e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014090:	69b8      	ldr	r0, [r7, #24]
 8014092:	f7ff f8c1 	bl	8013218 <tcp_oos_insert_segment>
                  }
                  break;
 8014096:	e120      	b.n	80142da <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014098:	4b22      	ldr	r3, [pc, #136]	; (8014124 <tcp_receive+0xd04>)
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	3b01      	subs	r3, #1
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	db3e      	blt.n	8014128 <tcp_receive+0xd08>
 80140aa:	4b1e      	ldr	r3, [pc, #120]	; (8014124 <tcp_receive+0xd04>)
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	3301      	adds	r3, #1
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	dc35      	bgt.n	8014128 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80140bc:	4818      	ldr	r0, [pc, #96]	; (8014120 <tcp_receive+0xd00>)
 80140be:	f7fd fb5b 	bl	8011778 <tcp_seg_copy>
 80140c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80140c4:	69fb      	ldr	r3, [r7, #28]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	f000 8109 	beq.w	80142de <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80140cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140d4:	8912      	ldrh	r2, [r2, #8]
 80140d6:	441a      	add	r2, r3
 80140d8:	4b12      	ldr	r3, [pc, #72]	; (8014124 <tcp_receive+0xd04>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	dd12      	ble.n	8014108 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80140e2:	4b10      	ldr	r3, [pc, #64]	; (8014124 <tcp_receive+0xd04>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80140f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fe:	891b      	ldrh	r3, [r3, #8]
 8014100:	4619      	mov	r1, r3
 8014102:	4610      	mov	r0, r2
 8014104:	f7fb ff26 	bl	800ff54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410a:	69fa      	ldr	r2, [r7, #28]
 801410c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801410e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014110:	69f8      	ldr	r0, [r7, #28]
 8014112:	f7ff f881 	bl	8013218 <tcp_oos_insert_segment>
                  }
                  break;
 8014116:	e0e2      	b.n	80142de <tcp_receive+0xebe>
 8014118:	20008040 	.word	0x20008040
 801411c:	2000803d 	.word	0x2000803d
 8014120:	20008010 	.word	0x20008010
 8014124:	20008030 	.word	0x20008030
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	f040 80c6 	bne.w	80142c2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014136:	4b80      	ldr	r3, [pc, #512]	; (8014338 <tcp_receive+0xf18>)
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014142:	2b00      	cmp	r3, #0
 8014144:	f340 80bd 	ble.w	80142c2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	899b      	ldrh	r3, [r3, #12]
 801414e:	b29b      	uxth	r3, r3
 8014150:	4618      	mov	r0, r3
 8014152:	f7fa fc8f 	bl	800ea74 <lwip_htons>
 8014156:	4603      	mov	r3, r0
 8014158:	b2db      	uxtb	r3, r3
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	f040 80bf 	bne.w	80142e2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014164:	4875      	ldr	r0, [pc, #468]	; (801433c <tcp_receive+0xf1c>)
 8014166:	f7fd fb07 	bl	8011778 <tcp_seg_copy>
 801416a:	4602      	mov	r2, r0
 801416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	f000 80b6 	beq.w	80142e6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417c:	68db      	ldr	r3, [r3, #12]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014182:	8912      	ldrh	r2, [r2, #8]
 8014184:	441a      	add	r2, r3
 8014186:	4b6c      	ldr	r3, [pc, #432]	; (8014338 <tcp_receive+0xf18>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	1ad3      	subs	r3, r2, r3
 801418c:	2b00      	cmp	r3, #0
 801418e:	dd12      	ble.n	80141b6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014190:	4b69      	ldr	r3, [pc, #420]	; (8014338 <tcp_receive+0xf18>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	b29a      	uxth	r2, r3
 8014196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	b29b      	uxth	r3, r3
 801419e:	1ad3      	subs	r3, r2, r3
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80141a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a8:	685a      	ldr	r2, [r3, #4]
 80141aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ac:	891b      	ldrh	r3, [r3, #8]
 80141ae:	4619      	mov	r1, r3
 80141b0:	4610      	mov	r0, r2
 80141b2:	f7fb fecf 	bl	800ff54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80141b6:	4b62      	ldr	r3, [pc, #392]	; (8014340 <tcp_receive+0xf20>)
 80141b8:	881b      	ldrh	r3, [r3, #0]
 80141ba:	461a      	mov	r2, r3
 80141bc:	4b5e      	ldr	r3, [pc, #376]	; (8014338 <tcp_receive+0xf18>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	441a      	add	r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c6:	6879      	ldr	r1, [r7, #4]
 80141c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141ca:	440b      	add	r3, r1
 80141cc:	1ad3      	subs	r3, r2, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f340 8089 	ble.w	80142e6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80141d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	68db      	ldr	r3, [r3, #12]
 80141da:	899b      	ldrh	r3, [r3, #12]
 80141dc:	b29b      	uxth	r3, r3
 80141de:	4618      	mov	r0, r3
 80141e0:	f7fa fc48 	bl	800ea74 <lwip_htons>
 80141e4:	4603      	mov	r3, r0
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	f003 0301 	and.w	r3, r3, #1
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d022      	beq.n	8014236 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	899b      	ldrh	r3, [r3, #12]
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	b21b      	sxth	r3, r3
 80141fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014200:	b21c      	sxth	r4, r3
 8014202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	899b      	ldrh	r3, [r3, #12]
 801420a:	b29b      	uxth	r3, r3
 801420c:	4618      	mov	r0, r3
 801420e:	f7fa fc31 	bl	800ea74 <lwip_htons>
 8014212:	4603      	mov	r3, r0
 8014214:	b2db      	uxtb	r3, r3
 8014216:	b29b      	uxth	r3, r3
 8014218:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801421c:	b29b      	uxth	r3, r3
 801421e:	4618      	mov	r0, r3
 8014220:	f7fa fc28 	bl	800ea74 <lwip_htons>
 8014224:	4603      	mov	r3, r0
 8014226:	b21b      	sxth	r3, r3
 8014228:	4323      	orrs	r3, r4
 801422a:	b21a      	sxth	r2, r3
 801422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	b292      	uxth	r2, r2
 8014234:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423a:	b29a      	uxth	r2, r3
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014240:	4413      	add	r3, r2
 8014242:	b299      	uxth	r1, r3
 8014244:	4b3c      	ldr	r3, [pc, #240]	; (8014338 <tcp_receive+0xf18>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	b29a      	uxth	r2, r3
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	1a8a      	subs	r2, r1, r2
 8014250:	b292      	uxth	r2, r2
 8014252:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	685a      	ldr	r2, [r3, #4]
 801425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	891b      	ldrh	r3, [r3, #8]
 8014260:	4619      	mov	r1, r3
 8014262:	4610      	mov	r0, r2
 8014264:	f7fb fe76 	bl	800ff54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	891c      	ldrh	r4, [r3, #8]
 801426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	899b      	ldrh	r3, [r3, #12]
 8014276:	b29b      	uxth	r3, r3
 8014278:	4618      	mov	r0, r3
 801427a:	f7fa fbfb 	bl	800ea74 <lwip_htons>
 801427e:	4603      	mov	r3, r0
 8014280:	b2db      	uxtb	r3, r3
 8014282:	f003 0303 	and.w	r3, r3, #3
 8014286:	2b00      	cmp	r3, #0
 8014288:	d001      	beq.n	801428e <tcp_receive+0xe6e>
 801428a:	2301      	movs	r3, #1
 801428c:	e000      	b.n	8014290 <tcp_receive+0xe70>
 801428e:	2300      	movs	r3, #0
 8014290:	4423      	add	r3, r4
 8014292:	b29a      	uxth	r2, r3
 8014294:	4b2a      	ldr	r3, [pc, #168]	; (8014340 <tcp_receive+0xf20>)
 8014296:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014298:	4b29      	ldr	r3, [pc, #164]	; (8014340 <tcp_receive+0xf20>)
 801429a:	881b      	ldrh	r3, [r3, #0]
 801429c:	461a      	mov	r2, r3
 801429e:	4b26      	ldr	r3, [pc, #152]	; (8014338 <tcp_receive+0xf18>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	441a      	add	r2, r3
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a8:	6879      	ldr	r1, [r7, #4]
 80142aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142ac:	440b      	add	r3, r1
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d019      	beq.n	80142e6 <tcp_receive+0xec6>
 80142b2:	4b24      	ldr	r3, [pc, #144]	; (8014344 <tcp_receive+0xf24>)
 80142b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80142b8:	4923      	ldr	r1, [pc, #140]	; (8014348 <tcp_receive+0xf28>)
 80142ba:	4824      	ldr	r0, [pc, #144]	; (801434c <tcp_receive+0xf2c>)
 80142bc:	f004 fe92 	bl	8018fe4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80142c0:	e011      	b.n	80142e6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80142c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f47f aea4 	bne.w	8014018 <tcp_receive+0xbf8>
 80142d0:	e00a      	b.n	80142e8 <tcp_receive+0xec8>
                break;
 80142d2:	bf00      	nop
 80142d4:	e008      	b.n	80142e8 <tcp_receive+0xec8>
                break;
 80142d6:	bf00      	nop
 80142d8:	e006      	b.n	80142e8 <tcp_receive+0xec8>
                  break;
 80142da:	bf00      	nop
 80142dc:	e004      	b.n	80142e8 <tcp_receive+0xec8>
                  break;
 80142de:	bf00      	nop
 80142e0:	e002      	b.n	80142e8 <tcp_receive+0xec8>
                  break;
 80142e2:	bf00      	nop
 80142e4:	e000      	b.n	80142e8 <tcp_receive+0xec8>
                break;
 80142e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f001 fa33 	bl	8015754 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80142ee:	e003      	b.n	80142f8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f001 fa2f 	bl	8015754 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142f6:	e01a      	b.n	801432e <tcp_receive+0xf0e>
 80142f8:	e019      	b.n	801432e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80142fa:	4b0f      	ldr	r3, [pc, #60]	; (8014338 <tcp_receive+0xf18>)
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014302:	1ad3      	subs	r3, r2, r3
 8014304:	2b00      	cmp	r3, #0
 8014306:	db0a      	blt.n	801431e <tcp_receive+0xefe>
 8014308:	4b0b      	ldr	r3, [pc, #44]	; (8014338 <tcp_receive+0xf18>)
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014310:	6879      	ldr	r1, [r7, #4]
 8014312:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014314:	440b      	add	r3, r1
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	3301      	adds	r3, #1
 801431a:	2b00      	cmp	r3, #0
 801431c:	dd07      	ble.n	801432e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	8b5b      	ldrh	r3, [r3, #26]
 8014322:	f043 0302 	orr.w	r3, r3, #2
 8014326:	b29a      	uxth	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801432c:	e7ff      	b.n	801432e <tcp_receive+0xf0e>
 801432e:	bf00      	nop
 8014330:	3750      	adds	r7, #80	; 0x50
 8014332:	46bd      	mov	sp, r7
 8014334:	bdb0      	pop	{r4, r5, r7, pc}
 8014336:	bf00      	nop
 8014338:	20008030 	.word	0x20008030
 801433c:	20008010 	.word	0x20008010
 8014340:	2000803a 	.word	0x2000803a
 8014344:	0801c8f8 	.word	0x0801c8f8
 8014348:	0801cca0 	.word	0x0801cca0
 801434c:	0801c944 	.word	0x0801c944

08014350 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014356:	4b15      	ldr	r3, [pc, #84]	; (80143ac <tcp_get_next_optbyte+0x5c>)
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	b291      	uxth	r1, r2
 801435e:	4a13      	ldr	r2, [pc, #76]	; (80143ac <tcp_get_next_optbyte+0x5c>)
 8014360:	8011      	strh	r1, [r2, #0]
 8014362:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014364:	4b12      	ldr	r3, [pc, #72]	; (80143b0 <tcp_get_next_optbyte+0x60>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d004      	beq.n	8014376 <tcp_get_next_optbyte+0x26>
 801436c:	4b11      	ldr	r3, [pc, #68]	; (80143b4 <tcp_get_next_optbyte+0x64>)
 801436e:	881b      	ldrh	r3, [r3, #0]
 8014370:	88fa      	ldrh	r2, [r7, #6]
 8014372:	429a      	cmp	r2, r3
 8014374:	d208      	bcs.n	8014388 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014376:	4b10      	ldr	r3, [pc, #64]	; (80143b8 <tcp_get_next_optbyte+0x68>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3314      	adds	r3, #20
 801437c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801437e:	88fb      	ldrh	r3, [r7, #6]
 8014380:	683a      	ldr	r2, [r7, #0]
 8014382:	4413      	add	r3, r2
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	e00b      	b.n	80143a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014388:	88fb      	ldrh	r3, [r7, #6]
 801438a:	b2da      	uxtb	r2, r3
 801438c:	4b09      	ldr	r3, [pc, #36]	; (80143b4 <tcp_get_next_optbyte+0x64>)
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	b2db      	uxtb	r3, r3
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014396:	4b06      	ldr	r3, [pc, #24]	; (80143b0 <tcp_get_next_optbyte+0x60>)
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	797b      	ldrb	r3, [r7, #5]
 801439c:	4413      	add	r3, r2
 801439e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr
 80143ac:	2000802c 	.word	0x2000802c
 80143b0:	20008028 	.word	0x20008028
 80143b4:	20008026 	.word	0x20008026
 80143b8:	20008020 	.word	0x20008020

080143bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d106      	bne.n	80143d8 <tcp_parseopt+0x1c>
 80143ca:	4b32      	ldr	r3, [pc, #200]	; (8014494 <tcp_parseopt+0xd8>)
 80143cc:	f240 727d 	movw	r2, #1917	; 0x77d
 80143d0:	4931      	ldr	r1, [pc, #196]	; (8014498 <tcp_parseopt+0xdc>)
 80143d2:	4832      	ldr	r0, [pc, #200]	; (801449c <tcp_parseopt+0xe0>)
 80143d4:	f004 fe06 	bl	8018fe4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80143d8:	4b31      	ldr	r3, [pc, #196]	; (80144a0 <tcp_parseopt+0xe4>)
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d055      	beq.n	801448c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80143e0:	4b30      	ldr	r3, [pc, #192]	; (80144a4 <tcp_parseopt+0xe8>)
 80143e2:	2200      	movs	r2, #0
 80143e4:	801a      	strh	r2, [r3, #0]
 80143e6:	e045      	b.n	8014474 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80143e8:	f7ff ffb2 	bl	8014350 <tcp_get_next_optbyte>
 80143ec:	4603      	mov	r3, r0
 80143ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80143f0:	7bfb      	ldrb	r3, [r7, #15]
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d006      	beq.n	8014404 <tcp_parseopt+0x48>
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	dc2b      	bgt.n	8014452 <tcp_parseopt+0x96>
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d041      	beq.n	8014482 <tcp_parseopt+0xc6>
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d127      	bne.n	8014452 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014402:	e037      	b.n	8014474 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014404:	f7ff ffa4 	bl	8014350 <tcp_get_next_optbyte>
 8014408:	4603      	mov	r3, r0
 801440a:	2b04      	cmp	r3, #4
 801440c:	d13b      	bne.n	8014486 <tcp_parseopt+0xca>
 801440e:	4b25      	ldr	r3, [pc, #148]	; (80144a4 <tcp_parseopt+0xe8>)
 8014410:	881b      	ldrh	r3, [r3, #0]
 8014412:	3301      	adds	r3, #1
 8014414:	4a22      	ldr	r2, [pc, #136]	; (80144a0 <tcp_parseopt+0xe4>)
 8014416:	8812      	ldrh	r2, [r2, #0]
 8014418:	4293      	cmp	r3, r2
 801441a:	da34      	bge.n	8014486 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801441c:	f7ff ff98 	bl	8014350 <tcp_get_next_optbyte>
 8014420:	4603      	mov	r3, r0
 8014422:	b29b      	uxth	r3, r3
 8014424:	021b      	lsls	r3, r3, #8
 8014426:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014428:	f7ff ff92 	bl	8014350 <tcp_get_next_optbyte>
 801442c:	4603      	mov	r3, r0
 801442e:	b29a      	uxth	r2, r3
 8014430:	89bb      	ldrh	r3, [r7, #12]
 8014432:	4313      	orrs	r3, r2
 8014434:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014436:	89bb      	ldrh	r3, [r7, #12]
 8014438:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801443c:	d804      	bhi.n	8014448 <tcp_parseopt+0x8c>
 801443e:	89bb      	ldrh	r3, [r7, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d001      	beq.n	8014448 <tcp_parseopt+0x8c>
 8014444:	89ba      	ldrh	r2, [r7, #12]
 8014446:	e001      	b.n	801444c <tcp_parseopt+0x90>
 8014448:	f44f 7206 	mov.w	r2, #536	; 0x218
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014450:	e010      	b.n	8014474 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014452:	f7ff ff7d 	bl	8014350 <tcp_get_next_optbyte>
 8014456:	4603      	mov	r3, r0
 8014458:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801445a:	7afb      	ldrb	r3, [r7, #11]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d914      	bls.n	801448a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014460:	7afb      	ldrb	r3, [r7, #11]
 8014462:	b29a      	uxth	r2, r3
 8014464:	4b0f      	ldr	r3, [pc, #60]	; (80144a4 <tcp_parseopt+0xe8>)
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	4413      	add	r3, r2
 801446a:	b29b      	uxth	r3, r3
 801446c:	3b02      	subs	r3, #2
 801446e:	b29a      	uxth	r2, r3
 8014470:	4b0c      	ldr	r3, [pc, #48]	; (80144a4 <tcp_parseopt+0xe8>)
 8014472:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014474:	4b0b      	ldr	r3, [pc, #44]	; (80144a4 <tcp_parseopt+0xe8>)
 8014476:	881a      	ldrh	r2, [r3, #0]
 8014478:	4b09      	ldr	r3, [pc, #36]	; (80144a0 <tcp_parseopt+0xe4>)
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	429a      	cmp	r2, r3
 801447e:	d3b3      	bcc.n	80143e8 <tcp_parseopt+0x2c>
 8014480:	e004      	b.n	801448c <tcp_parseopt+0xd0>
          return;
 8014482:	bf00      	nop
 8014484:	e002      	b.n	801448c <tcp_parseopt+0xd0>
            return;
 8014486:	bf00      	nop
 8014488:	e000      	b.n	801448c <tcp_parseopt+0xd0>
            return;
 801448a:	bf00      	nop
      }
    }
  }
}
 801448c:	3710      	adds	r7, #16
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	0801c8f8 	.word	0x0801c8f8
 8014498:	0801cd5c 	.word	0x0801cd5c
 801449c:	0801c944 	.word	0x0801c944
 80144a0:	20008024 	.word	0x20008024
 80144a4:	2000802c 	.word	0x2000802c

080144a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80144a8:	b480      	push	{r7}
 80144aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <tcp_trigger_input_pcb_close+0x1c>)
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	f043 0310 	orr.w	r3, r3, #16
 80144b4:	b2da      	uxtb	r2, r3
 80144b6:	4b03      	ldr	r3, [pc, #12]	; (80144c4 <tcp_trigger_input_pcb_close+0x1c>)
 80144b8:	701a      	strb	r2, [r3, #0]
}
 80144ba:	bf00      	nop
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr
 80144c4:	2000803d 	.word	0x2000803d

080144c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00a      	beq.n	80144f0 <tcp_route+0x28>
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	7a1b      	ldrb	r3, [r3, #8]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d006      	beq.n	80144f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	7a1b      	ldrb	r3, [r3, #8]
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fb fb7a 	bl	800fbe0 <netif_get_by_index>
 80144ec:	4603      	mov	r3, r0
 80144ee:	e003      	b.n	80144f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f002 fe61 	bl	80171b8 <ip4_route>
 80144f6:	4603      	mov	r3, r0
  }
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014500:	b590      	push	{r4, r7, lr}
 8014502:	b087      	sub	sp, #28
 8014504:	af00      	add	r7, sp, #0
 8014506:	60f8      	str	r0, [r7, #12]
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	603b      	str	r3, [r7, #0]
 801450c:	4613      	mov	r3, r2
 801450e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d105      	bne.n	8014522 <tcp_create_segment+0x22>
 8014516:	4b44      	ldr	r3, [pc, #272]	; (8014628 <tcp_create_segment+0x128>)
 8014518:	22a3      	movs	r2, #163	; 0xa3
 801451a:	4944      	ldr	r1, [pc, #272]	; (801462c <tcp_create_segment+0x12c>)
 801451c:	4844      	ldr	r0, [pc, #272]	; (8014630 <tcp_create_segment+0x130>)
 801451e:	f004 fd61 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d105      	bne.n	8014534 <tcp_create_segment+0x34>
 8014528:	4b3f      	ldr	r3, [pc, #252]	; (8014628 <tcp_create_segment+0x128>)
 801452a:	22a4      	movs	r2, #164	; 0xa4
 801452c:	4941      	ldr	r1, [pc, #260]	; (8014634 <tcp_create_segment+0x134>)
 801452e:	4840      	ldr	r0, [pc, #256]	; (8014630 <tcp_create_segment+0x130>)
 8014530:	f004 fd58 	bl	8018fe4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	b2db      	uxtb	r3, r3
 801453c:	f003 0304 	and.w	r3, r3, #4
 8014540:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014542:	2003      	movs	r0, #3
 8014544:	f7fa ffc6 	bl	800f4d4 <memp_malloc>
 8014548:	6138      	str	r0, [r7, #16]
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d104      	bne.n	801455a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014550:	68b8      	ldr	r0, [r7, #8]
 8014552:	f7fb fe85 	bl	8010260 <pbuf_free>
    return NULL;
 8014556:	2300      	movs	r3, #0
 8014558:	e061      	b.n	801461e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014560:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	2200      	movs	r2, #0
 8014566:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	891a      	ldrh	r2, [r3, #8]
 8014572:	7dfb      	ldrb	r3, [r7, #23]
 8014574:	b29b      	uxth	r3, r3
 8014576:	429a      	cmp	r2, r3
 8014578:	d205      	bcs.n	8014586 <tcp_create_segment+0x86>
 801457a:	4b2b      	ldr	r3, [pc, #172]	; (8014628 <tcp_create_segment+0x128>)
 801457c:	22b0      	movs	r2, #176	; 0xb0
 801457e:	492e      	ldr	r1, [pc, #184]	; (8014638 <tcp_create_segment+0x138>)
 8014580:	482b      	ldr	r0, [pc, #172]	; (8014630 <tcp_create_segment+0x130>)
 8014582:	f004 fd2f 	bl	8018fe4 <iprintf>
  seg->len = p->tot_len - optlen;
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	891a      	ldrh	r2, [r3, #8]
 801458a:	7dfb      	ldrb	r3, [r7, #23]
 801458c:	b29b      	uxth	r3, r3
 801458e:	1ad3      	subs	r3, r2, r3
 8014590:	b29a      	uxth	r2, r3
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014596:	2114      	movs	r1, #20
 8014598:	68b8      	ldr	r0, [r7, #8]
 801459a:	f7fb fdcb 	bl	8010134 <pbuf_add_header>
 801459e:	4603      	mov	r3, r0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d004      	beq.n	80145ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80145a4:	6938      	ldr	r0, [r7, #16]
 80145a6:	f7fd f8ce 	bl	8011746 <tcp_seg_free>
    return NULL;
 80145aa:	2300      	movs	r3, #0
 80145ac:	e037      	b.n	801461e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	685a      	ldr	r2, [r3, #4]
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	8ada      	ldrh	r2, [r3, #22]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	68dc      	ldr	r4, [r3, #12]
 80145c0:	4610      	mov	r0, r2
 80145c2:	f7fa fa57 	bl	800ea74 <lwip_htons>
 80145c6:	4603      	mov	r3, r0
 80145c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	8b1a      	ldrh	r2, [r3, #24]
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	68dc      	ldr	r4, [r3, #12]
 80145d2:	4610      	mov	r0, r2
 80145d4:	f7fa fa4e 	bl	800ea74 <lwip_htons>
 80145d8:	4603      	mov	r3, r0
 80145da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	68dc      	ldr	r4, [r3, #12]
 80145e0:	6838      	ldr	r0, [r7, #0]
 80145e2:	f7fa fa5c 	bl	800ea9e <lwip_htonl>
 80145e6:	4603      	mov	r3, r0
 80145e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80145ea:	7dfb      	ldrb	r3, [r7, #23]
 80145ec:	089b      	lsrs	r3, r3, #2
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	3305      	adds	r3, #5
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	031b      	lsls	r3, r3, #12
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	79fb      	ldrb	r3, [r7, #7]
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	4313      	orrs	r3, r2
 8014600:	b29a      	uxth	r2, r3
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	68dc      	ldr	r4, [r3, #12]
 8014606:	4610      	mov	r0, r2
 8014608:	f7fa fa34 	bl	800ea74 <lwip_htons>
 801460c:	4603      	mov	r3, r0
 801460e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	2200      	movs	r2, #0
 8014616:	749a      	strb	r2, [r3, #18]
 8014618:	2200      	movs	r2, #0
 801461a:	74da      	strb	r2, [r3, #19]
  return seg;
 801461c:	693b      	ldr	r3, [r7, #16]
}
 801461e:	4618      	mov	r0, r3
 8014620:	371c      	adds	r7, #28
 8014622:	46bd      	mov	sp, r7
 8014624:	bd90      	pop	{r4, r7, pc}
 8014626:	bf00      	nop
 8014628:	0801cd78 	.word	0x0801cd78
 801462c:	0801cdac 	.word	0x0801cdac
 8014630:	0801cdcc 	.word	0x0801cdcc
 8014634:	0801cdf4 	.word	0x0801cdf4
 8014638:	0801ce18 	.word	0x0801ce18

0801463c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801463c:	b590      	push	{r4, r7, lr}
 801463e:	b08b      	sub	sp, #44	; 0x2c
 8014640:	af02      	add	r7, sp, #8
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	460b      	mov	r3, r1
 8014646:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014648:	2300      	movs	r3, #0
 801464a:	61fb      	str	r3, [r7, #28]
 801464c:	2300      	movs	r3, #0
 801464e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014650:	2300      	movs	r3, #0
 8014652:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d106      	bne.n	8014668 <tcp_split_unsent_seg+0x2c>
 801465a:	4b95      	ldr	r3, [pc, #596]	; (80148b0 <tcp_split_unsent_seg+0x274>)
 801465c:	f240 324b 	movw	r2, #843	; 0x34b
 8014660:	4994      	ldr	r1, [pc, #592]	; (80148b4 <tcp_split_unsent_seg+0x278>)
 8014662:	4895      	ldr	r0, [pc, #596]	; (80148b8 <tcp_split_unsent_seg+0x27c>)
 8014664:	f004 fcbe 	bl	8018fe4 <iprintf>

  useg = pcb->unsent;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801466c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d102      	bne.n	801467a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014674:	f04f 33ff 	mov.w	r3, #4294967295
 8014678:	e116      	b.n	80148a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801467a:	887b      	ldrh	r3, [r7, #2]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d109      	bne.n	8014694 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014680:	4b8b      	ldr	r3, [pc, #556]	; (80148b0 <tcp_split_unsent_seg+0x274>)
 8014682:	f240 3253 	movw	r2, #851	; 0x353
 8014686:	498d      	ldr	r1, [pc, #564]	; (80148bc <tcp_split_unsent_seg+0x280>)
 8014688:	488b      	ldr	r0, [pc, #556]	; (80148b8 <tcp_split_unsent_seg+0x27c>)
 801468a:	f004 fcab 	bl	8018fe4 <iprintf>
    return ERR_VAL;
 801468e:	f06f 0305 	mvn.w	r3, #5
 8014692:	e109      	b.n	80148a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	891b      	ldrh	r3, [r3, #8]
 8014698:	887a      	ldrh	r2, [r7, #2]
 801469a:	429a      	cmp	r2, r3
 801469c:	d301      	bcc.n	80146a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801469e:	2300      	movs	r3, #0
 80146a0:	e102      	b.n	80148a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a6:	887a      	ldrh	r2, [r7, #2]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d906      	bls.n	80146ba <tcp_split_unsent_seg+0x7e>
 80146ac:	4b80      	ldr	r3, [pc, #512]	; (80148b0 <tcp_split_unsent_seg+0x274>)
 80146ae:	f240 325b 	movw	r2, #859	; 0x35b
 80146b2:	4983      	ldr	r1, [pc, #524]	; (80148c0 <tcp_split_unsent_seg+0x284>)
 80146b4:	4880      	ldr	r0, [pc, #512]	; (80148b8 <tcp_split_unsent_seg+0x27c>)
 80146b6:	f004 fc95 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	891b      	ldrh	r3, [r3, #8]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <tcp_split_unsent_seg+0x94>
 80146c2:	4b7b      	ldr	r3, [pc, #492]	; (80148b0 <tcp_split_unsent_seg+0x274>)
 80146c4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80146c8:	497e      	ldr	r1, [pc, #504]	; (80148c4 <tcp_split_unsent_seg+0x288>)
 80146ca:	487b      	ldr	r0, [pc, #492]	; (80148b8 <tcp_split_unsent_seg+0x27c>)
 80146cc:	f004 fc8a 	bl	8018fe4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	7a9b      	ldrb	r3, [r3, #10]
 80146d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80146d6:	7bfb      	ldrb	r3, [r7, #15]
 80146d8:	009b      	lsls	r3, r3, #2
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	f003 0304 	and.w	r3, r3, #4
 80146e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	891a      	ldrh	r2, [r3, #8]
 80146e6:	887b      	ldrh	r3, [r7, #2]
 80146e8:	1ad3      	subs	r3, r2, r3
 80146ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80146ec:	7bbb      	ldrb	r3, [r7, #14]
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	89bb      	ldrh	r3, [r7, #12]
 80146f2:	4413      	add	r3, r2
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146fa:	4619      	mov	r1, r3
 80146fc:	2036      	movs	r0, #54	; 0x36
 80146fe:	f7fb facb 	bl	800fc98 <pbuf_alloc>
 8014702:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 80b7 	beq.w	801487a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	891a      	ldrh	r2, [r3, #8]
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	891b      	ldrh	r3, [r3, #8]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	b29a      	uxth	r2, r3
 801471a:	887b      	ldrh	r3, [r7, #2]
 801471c:	4413      	add	r3, r2
 801471e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	6858      	ldr	r0, [r3, #4]
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	685a      	ldr	r2, [r3, #4]
 8014728:	7bbb      	ldrb	r3, [r7, #14]
 801472a:	18d1      	adds	r1, r2, r3
 801472c:	897b      	ldrh	r3, [r7, #10]
 801472e:	89ba      	ldrh	r2, [r7, #12]
 8014730:	f7fb ff80 	bl	8010634 <pbuf_copy_partial>
 8014734:	4603      	mov	r3, r0
 8014736:	461a      	mov	r2, r3
 8014738:	89bb      	ldrh	r3, [r7, #12]
 801473a:	4293      	cmp	r3, r2
 801473c:	f040 809f 	bne.w	801487e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	899b      	ldrh	r3, [r3, #12]
 8014746:	b29b      	uxth	r3, r3
 8014748:	4618      	mov	r0, r3
 801474a:	f7fa f993 	bl	800ea74 <lwip_htons>
 801474e:	4603      	mov	r3, r0
 8014750:	b2db      	uxtb	r3, r3
 8014752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014756:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014758:	2300      	movs	r3, #0
 801475a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801475c:	7efb      	ldrb	r3, [r7, #27]
 801475e:	f003 0308 	and.w	r3, r3, #8
 8014762:	2b00      	cmp	r3, #0
 8014764:	d007      	beq.n	8014776 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014766:	7efb      	ldrb	r3, [r7, #27]
 8014768:	f023 0308 	bic.w	r3, r3, #8
 801476c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801476e:	7ebb      	ldrb	r3, [r7, #26]
 8014770:	f043 0308 	orr.w	r3, r3, #8
 8014774:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014776:	7efb      	ldrb	r3, [r7, #27]
 8014778:	f003 0301 	and.w	r3, r3, #1
 801477c:	2b00      	cmp	r3, #0
 801477e:	d007      	beq.n	8014790 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014780:	7efb      	ldrb	r3, [r7, #27]
 8014782:	f023 0301 	bic.w	r3, r3, #1
 8014786:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014788:	7ebb      	ldrb	r3, [r7, #26]
 801478a:	f043 0301 	orr.w	r3, r3, #1
 801478e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	f7fa f981 	bl	800ea9e <lwip_htonl>
 801479c:	4602      	mov	r2, r0
 801479e:	887b      	ldrh	r3, [r7, #2]
 80147a0:	18d1      	adds	r1, r2, r3
 80147a2:	7eba      	ldrb	r2, [r7, #26]
 80147a4:	7bfb      	ldrb	r3, [r7, #15]
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	460b      	mov	r3, r1
 80147aa:	6939      	ldr	r1, [r7, #16]
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7ff fea7 	bl	8014500 <tcp_create_segment>
 80147b2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80147b4:	69fb      	ldr	r3, [r7, #28]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d063      	beq.n	8014882 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fb fdd6 	bl	8010370 <pbuf_clen>
 80147c4:	4603      	mov	r3, r0
 80147c6:	461a      	mov	r2, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80147ce:	1a9b      	subs	r3, r3, r2
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	6858      	ldr	r0, [r3, #4]
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	891a      	ldrh	r2, [r3, #8]
 80147e2:	89bb      	ldrh	r3, [r7, #12]
 80147e4:	1ad3      	subs	r3, r2, r3
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	4619      	mov	r1, r3
 80147ea:	f7fb fbb3 	bl	800ff54 <pbuf_realloc>
  useg->len -= remainder;
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	891a      	ldrh	r2, [r3, #8]
 80147f2:	89bb      	ldrh	r3, [r7, #12]
 80147f4:	1ad3      	subs	r3, r2, r3
 80147f6:	b29a      	uxth	r2, r3
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	68db      	ldr	r3, [r3, #12]
 8014800:	899b      	ldrh	r3, [r3, #12]
 8014802:	b29c      	uxth	r4, r3
 8014804:	7efb      	ldrb	r3, [r7, #27]
 8014806:	b29b      	uxth	r3, r3
 8014808:	4618      	mov	r0, r3
 801480a:	f7fa f933 	bl	800ea74 <lwip_htons>
 801480e:	4603      	mov	r3, r0
 8014810:	461a      	mov	r2, r3
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	4322      	orrs	r2, r4
 8014818:	b292      	uxth	r2, r2
 801481a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	4618      	mov	r0, r3
 8014822:	f7fb fda5 	bl	8010370 <pbuf_clen>
 8014826:	4603      	mov	r3, r0
 8014828:	461a      	mov	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014830:	4413      	add	r3, r2
 8014832:	b29a      	uxth	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801483a:	69fb      	ldr	r3, [r7, #28]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	4618      	mov	r0, r3
 8014840:	f7fb fd96 	bl	8010370 <pbuf_clen>
 8014844:	4603      	mov	r3, r0
 8014846:	461a      	mov	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801484e:	4413      	add	r3, r2
 8014850:	b29a      	uxth	r2, r3
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	69fa      	ldr	r2, [r7, #28]
 8014864:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d103      	bne.n	8014876 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014876:	2300      	movs	r3, #0
 8014878:	e016      	b.n	80148a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801487a:	bf00      	nop
 801487c:	e002      	b.n	8014884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801487e:	bf00      	nop
 8014880:	e000      	b.n	8014884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014882:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d006      	beq.n	8014898 <tcp_split_unsent_seg+0x25c>
 801488a:	4b09      	ldr	r3, [pc, #36]	; (80148b0 <tcp_split_unsent_seg+0x274>)
 801488c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014890:	490d      	ldr	r1, [pc, #52]	; (80148c8 <tcp_split_unsent_seg+0x28c>)
 8014892:	4809      	ldr	r0, [pc, #36]	; (80148b8 <tcp_split_unsent_seg+0x27c>)
 8014894:	f004 fba6 	bl	8018fe4 <iprintf>
  if (p != NULL) {
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d002      	beq.n	80148a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801489e:	6938      	ldr	r0, [r7, #16]
 80148a0:	f7fb fcde 	bl	8010260 <pbuf_free>
  }

  return ERR_MEM;
 80148a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3724      	adds	r7, #36	; 0x24
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd90      	pop	{r4, r7, pc}
 80148b0:	0801cd78 	.word	0x0801cd78
 80148b4:	0801d10c 	.word	0x0801d10c
 80148b8:	0801cdcc 	.word	0x0801cdcc
 80148bc:	0801d130 	.word	0x0801d130
 80148c0:	0801d154 	.word	0x0801d154
 80148c4:	0801d164 	.word	0x0801d164
 80148c8:	0801d174 	.word	0x0801d174

080148cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d106      	bne.n	80148e8 <tcp_send_fin+0x1c>
 80148da:	4b21      	ldr	r3, [pc, #132]	; (8014960 <tcp_send_fin+0x94>)
 80148dc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80148e0:	4920      	ldr	r1, [pc, #128]	; (8014964 <tcp_send_fin+0x98>)
 80148e2:	4821      	ldr	r0, [pc, #132]	; (8014968 <tcp_send_fin+0x9c>)
 80148e4:	f004 fb7e 	bl	8018fe4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d02e      	beq.n	801494e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148f4:	60fb      	str	r3, [r7, #12]
 80148f6:	e002      	b.n	80148fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1f8      	bne.n	80148f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	68db      	ldr	r3, [r3, #12]
 801490a:	899b      	ldrh	r3, [r3, #12]
 801490c:	b29b      	uxth	r3, r3
 801490e:	4618      	mov	r0, r3
 8014910:	f7fa f8b0 	bl	800ea74 <lwip_htons>
 8014914:	4603      	mov	r3, r0
 8014916:	b2db      	uxtb	r3, r3
 8014918:	f003 0307 	and.w	r3, r3, #7
 801491c:	2b00      	cmp	r3, #0
 801491e:	d116      	bne.n	801494e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	899b      	ldrh	r3, [r3, #12]
 8014926:	b29c      	uxth	r4, r3
 8014928:	2001      	movs	r0, #1
 801492a:	f7fa f8a3 	bl	800ea74 <lwip_htons>
 801492e:	4603      	mov	r3, r0
 8014930:	461a      	mov	r2, r3
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	4322      	orrs	r2, r4
 8014938:	b292      	uxth	r2, r2
 801493a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	8b5b      	ldrh	r3, [r3, #26]
 8014940:	f043 0320 	orr.w	r3, r3, #32
 8014944:	b29a      	uxth	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801494a:	2300      	movs	r3, #0
 801494c:	e004      	b.n	8014958 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801494e:	2101      	movs	r1, #1
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f000 f80b 	bl	801496c <tcp_enqueue_flags>
 8014956:	4603      	mov	r3, r0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	bd90      	pop	{r4, r7, pc}
 8014960:	0801cd78 	.word	0x0801cd78
 8014964:	0801d180 	.word	0x0801d180
 8014968:	0801cdcc 	.word	0x0801cdcc

0801496c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b08a      	sub	sp, #40	; 0x28
 8014970:	af02      	add	r7, sp, #8
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014978:	2300      	movs	r3, #0
 801497a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	f003 0303 	and.w	r3, r3, #3
 8014986:	2b00      	cmp	r3, #0
 8014988:	d106      	bne.n	8014998 <tcp_enqueue_flags+0x2c>
 801498a:	4b67      	ldr	r3, [pc, #412]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 801498c:	f240 4211 	movw	r2, #1041	; 0x411
 8014990:	4966      	ldr	r1, [pc, #408]	; (8014b2c <tcp_enqueue_flags+0x1c0>)
 8014992:	4867      	ldr	r0, [pc, #412]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 8014994:	f004 fb26 	bl	8018fe4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d106      	bne.n	80149ac <tcp_enqueue_flags+0x40>
 801499e:	4b62      	ldr	r3, [pc, #392]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 80149a0:	f240 4213 	movw	r2, #1043	; 0x413
 80149a4:	4963      	ldr	r1, [pc, #396]	; (8014b34 <tcp_enqueue_flags+0x1c8>)
 80149a6:	4862      	ldr	r0, [pc, #392]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 80149a8:	f004 fb1c 	bl	8018fe4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80149ac:	78fb      	ldrb	r3, [r7, #3]
 80149ae:	f003 0302 	and.w	r3, r3, #2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d001      	beq.n	80149ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80149b6:	2301      	movs	r3, #1
 80149b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80149ba:	7ffb      	ldrb	r3, [r7, #31]
 80149bc:	009b      	lsls	r3, r3, #2
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	f003 0304 	and.w	r3, r3, #4
 80149c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149ce:	4619      	mov	r1, r3
 80149d0:	2036      	movs	r0, #54	; 0x36
 80149d2:	f7fb f961 	bl	800fc98 <pbuf_alloc>
 80149d6:	6138      	str	r0, [r7, #16]
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d109      	bne.n	80149f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	8b5b      	ldrh	r3, [r3, #26]
 80149e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149e6:	b29a      	uxth	r2, r3
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80149ec:	f04f 33ff 	mov.w	r3, #4294967295
 80149f0:	e095      	b.n	8014b1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	895a      	ldrh	r2, [r3, #10]
 80149f6:	7dfb      	ldrb	r3, [r7, #23]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d206      	bcs.n	8014a0c <tcp_enqueue_flags+0xa0>
 80149fe:	4b4a      	ldr	r3, [pc, #296]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 8014a00:	f240 4239 	movw	r2, #1081	; 0x439
 8014a04:	494c      	ldr	r1, [pc, #304]	; (8014b38 <tcp_enqueue_flags+0x1cc>)
 8014a06:	484a      	ldr	r0, [pc, #296]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 8014a08:	f004 faec 	bl	8018fe4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014a10:	78fa      	ldrb	r2, [r7, #3]
 8014a12:	7ffb      	ldrb	r3, [r7, #31]
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	460b      	mov	r3, r1
 8014a18:	6939      	ldr	r1, [r7, #16]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7ff fd70 	bl	8014500 <tcp_create_segment>
 8014a20:	60f8      	str	r0, [r7, #12]
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d109      	bne.n	8014a3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	8b5b      	ldrh	r3, [r3, #26]
 8014a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a30:	b29a      	uxth	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014a36:	f04f 33ff 	mov.w	r3, #4294967295
 8014a3a:	e070      	b.n	8014b1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	f003 0303 	and.w	r3, r3, #3
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d006      	beq.n	8014a56 <tcp_enqueue_flags+0xea>
 8014a48:	4b37      	ldr	r3, [pc, #220]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 8014a4a:	f240 4242 	movw	r2, #1090	; 0x442
 8014a4e:	493b      	ldr	r1, [pc, #236]	; (8014b3c <tcp_enqueue_flags+0x1d0>)
 8014a50:	4837      	ldr	r0, [pc, #220]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 8014a52:	f004 fac7 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	891b      	ldrh	r3, [r3, #8]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d006      	beq.n	8014a6c <tcp_enqueue_flags+0x100>
 8014a5e:	4b32      	ldr	r3, [pc, #200]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 8014a60:	f240 4243 	movw	r2, #1091	; 0x443
 8014a64:	4936      	ldr	r1, [pc, #216]	; (8014b40 <tcp_enqueue_flags+0x1d4>)
 8014a66:	4832      	ldr	r0, [pc, #200]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 8014a68:	f004 fabc 	bl	8018fe4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d103      	bne.n	8014a7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	66da      	str	r2, [r3, #108]	; 0x6c
 8014a7a:	e00d      	b.n	8014a98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a80:	61bb      	str	r3, [r7, #24]
 8014a82:	e002      	b.n	8014a8a <tcp_enqueue_flags+0x11e>
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	61bb      	str	r3, [r7, #24]
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d1f8      	bne.n	8014a84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014aa0:	78fb      	ldrb	r3, [r7, #3]
 8014aa2:	f003 0302 	and.w	r3, r3, #2
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d104      	bne.n	8014ab4 <tcp_enqueue_flags+0x148>
 8014aaa:	78fb      	ldrb	r3, [r7, #3]
 8014aac:	f003 0301 	and.w	r3, r3, #1
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d004      	beq.n	8014abe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ab8:	1c5a      	adds	r2, r3, #1
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014abe:	78fb      	ldrb	r3, [r7, #3]
 8014ac0:	f003 0301 	and.w	r3, r3, #1
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d006      	beq.n	8014ad6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	8b5b      	ldrh	r3, [r3, #26]
 8014acc:	f043 0320 	orr.w	r3, r3, #32
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7fb fc48 	bl	8010370 <pbuf_clen>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014aea:	4413      	add	r3, r2
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d00e      	beq.n	8014b1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10a      	bne.n	8014b1c <tcp_enqueue_flags+0x1b0>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d106      	bne.n	8014b1c <tcp_enqueue_flags+0x1b0>
 8014b0e:	4b06      	ldr	r3, [pc, #24]	; (8014b28 <tcp_enqueue_flags+0x1bc>)
 8014b10:	f240 4265 	movw	r2, #1125	; 0x465
 8014b14:	490b      	ldr	r1, [pc, #44]	; (8014b44 <tcp_enqueue_flags+0x1d8>)
 8014b16:	4806      	ldr	r0, [pc, #24]	; (8014b30 <tcp_enqueue_flags+0x1c4>)
 8014b18:	f004 fa64 	bl	8018fe4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014b1c:	2300      	movs	r3, #0
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3720      	adds	r7, #32
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	0801cd78 	.word	0x0801cd78
 8014b2c:	0801d19c 	.word	0x0801d19c
 8014b30:	0801cdcc 	.word	0x0801cdcc
 8014b34:	0801d1f4 	.word	0x0801d1f4
 8014b38:	0801d214 	.word	0x0801d214
 8014b3c:	0801d250 	.word	0x0801d250
 8014b40:	0801d268 	.word	0x0801d268
 8014b44:	0801d294 	.word	0x0801d294

08014b48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014b48:	b5b0      	push	{r4, r5, r7, lr}
 8014b4a:	b08a      	sub	sp, #40	; 0x28
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d106      	bne.n	8014b64 <tcp_output+0x1c>
 8014b56:	4b8a      	ldr	r3, [pc, #552]	; (8014d80 <tcp_output+0x238>)
 8014b58:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014b5c:	4989      	ldr	r1, [pc, #548]	; (8014d84 <tcp_output+0x23c>)
 8014b5e:	488a      	ldr	r0, [pc, #552]	; (8014d88 <tcp_output+0x240>)
 8014b60:	f004 fa40 	bl	8018fe4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	7d1b      	ldrb	r3, [r3, #20]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d106      	bne.n	8014b7a <tcp_output+0x32>
 8014b6c:	4b84      	ldr	r3, [pc, #528]	; (8014d80 <tcp_output+0x238>)
 8014b6e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014b72:	4986      	ldr	r1, [pc, #536]	; (8014d8c <tcp_output+0x244>)
 8014b74:	4884      	ldr	r0, [pc, #528]	; (8014d88 <tcp_output+0x240>)
 8014b76:	f004 fa35 	bl	8018fe4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014b7a:	4b85      	ldr	r3, [pc, #532]	; (8014d90 <tcp_output+0x248>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d101      	bne.n	8014b88 <tcp_output+0x40>
    return ERR_OK;
 8014b84:	2300      	movs	r3, #0
 8014b86:	e1ce      	b.n	8014f26 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b94:	4293      	cmp	r3, r2
 8014b96:	bf28      	it	cs
 8014b98:	4613      	movcs	r3, r2
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ba2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10b      	bne.n	8014bc2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	8b5b      	ldrh	r3, [r3, #26]
 8014bae:	f003 0302 	and.w	r3, r3, #2
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 81aa 	beq.w	8014f0c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 fdcb 	bl	8015754 <tcp_send_empty_ack>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	e1b1      	b.n	8014f26 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014bc2:	6879      	ldr	r1, [r7, #4]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	3304      	adds	r3, #4
 8014bc8:	461a      	mov	r2, r3
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f7ff fc7c 	bl	80144c8 <tcp_route>
 8014bd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d102      	bne.n	8014bde <tcp_output+0x96>
    return ERR_RTE;
 8014bd8:	f06f 0303 	mvn.w	r3, #3
 8014bdc:	e1a3      	b.n	8014f26 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d003      	beq.n	8014bec <tcp_output+0xa4>
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d111      	bne.n	8014c10 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d002      	beq.n	8014bf8 <tcp_output+0xb0>
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	e000      	b.n	8014bfa <tcp_output+0xb2>
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d102      	bne.n	8014c08 <tcp_output+0xc0>
      return ERR_RTE;
 8014c02:	f06f 0303 	mvn.w	r3, #3
 8014c06:	e18e      	b.n	8014f26 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	681a      	ldr	r2, [r3, #0]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7f9 ff41 	bl	800ea9e <lwip_htonl>
 8014c1c:	4602      	mov	r2, r0
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c22:	1ad3      	subs	r3, r2, r3
 8014c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c26:	8912      	ldrh	r2, [r2, #8]
 8014c28:	4413      	add	r3, r2
 8014c2a:	69ba      	ldr	r2, [r7, #24]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d227      	bcs.n	8014c80 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c36:	461a      	mov	r2, r3
 8014c38:	69bb      	ldr	r3, [r7, #24]
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d114      	bne.n	8014c68 <tcp_output+0x120>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d110      	bne.n	8014c68 <tcp_output+0x120>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d10b      	bne.n	8014c68 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2200      	movs	r2, #0
 8014c54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2200      	movs	r2, #0
 8014c64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	8b5b      	ldrh	r3, [r3, #26]
 8014c6c:	f003 0302 	and.w	r3, r3, #2
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	f000 814d 	beq.w	8014f10 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f000 fd6c 	bl	8015754 <tcp_send_empty_ack>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	e152      	b.n	8014f26 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c8c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014c8e:	6a3b      	ldr	r3, [r7, #32]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 811c 	beq.w	8014ece <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014c96:	e002      	b.n	8014c9e <tcp_output+0x156>
 8014c98:	6a3b      	ldr	r3, [r7, #32]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	623b      	str	r3, [r7, #32]
 8014c9e:	6a3b      	ldr	r3, [r7, #32]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1f8      	bne.n	8014c98 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014ca6:	e112      	b.n	8014ece <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	899b      	ldrh	r3, [r3, #12]
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f9 fedf 	bl	800ea74 <lwip_htons>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	f003 0304 	and.w	r3, r3, #4
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d006      	beq.n	8014cd0 <tcp_output+0x188>
 8014cc2:	4b2f      	ldr	r3, [pc, #188]	; (8014d80 <tcp_output+0x238>)
 8014cc4:	f240 5236 	movw	r2, #1334	; 0x536
 8014cc8:	4932      	ldr	r1, [pc, #200]	; (8014d94 <tcp_output+0x24c>)
 8014cca:	482f      	ldr	r0, [pc, #188]	; (8014d88 <tcp_output+0x240>)
 8014ccc:	f004 f98a 	bl	8018fe4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d01f      	beq.n	8014d18 <tcp_output+0x1d0>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	8b5b      	ldrh	r3, [r3, #26]
 8014cdc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d119      	bne.n	8014d18 <tcp_output+0x1d0>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d00b      	beq.n	8014d04 <tcp_output+0x1bc>
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d110      	bne.n	8014d18 <tcp_output+0x1d0>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cfa:	891a      	ldrh	r2, [r3, #8]
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d209      	bcs.n	8014d18 <tcp_output+0x1d0>
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d004      	beq.n	8014d18 <tcp_output+0x1d0>
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d14:	2b08      	cmp	r3, #8
 8014d16:	d901      	bls.n	8014d1c <tcp_output+0x1d4>
 8014d18:	2301      	movs	r3, #1
 8014d1a:	e000      	b.n	8014d1e <tcp_output+0x1d6>
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d106      	bne.n	8014d30 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	8b5b      	ldrh	r3, [r3, #26]
 8014d26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	f000 80e4 	beq.w	8014ef8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	7d1b      	ldrb	r3, [r3, #20]
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	d00d      	beq.n	8014d54 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	899b      	ldrh	r3, [r3, #12]
 8014d3e:	b29c      	uxth	r4, r3
 8014d40:	2010      	movs	r0, #16
 8014d42:	f7f9 fe97 	bl	800ea74 <lwip_htons>
 8014d46:	4603      	mov	r3, r0
 8014d48:	461a      	mov	r2, r3
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	4322      	orrs	r2, r4
 8014d50:	b292      	uxth	r2, r2
 8014d52:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014d54:	697a      	ldr	r2, [r7, #20]
 8014d56:	6879      	ldr	r1, [r7, #4]
 8014d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d5a:	f000 f909 	bl	8014f70 <tcp_output_segment>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d016      	beq.n	8014d98 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8b5b      	ldrh	r3, [r3, #26]
 8014d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	835a      	strh	r2, [r3, #26]
      return err;
 8014d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d7c:	e0d3      	b.n	8014f26 <tcp_output+0x3de>
 8014d7e:	bf00      	nop
 8014d80:	0801cd78 	.word	0x0801cd78
 8014d84:	0801d2bc 	.word	0x0801d2bc
 8014d88:	0801cdcc 	.word	0x0801cdcc
 8014d8c:	0801d2d4 	.word	0x0801d2d4
 8014d90:	20008044 	.word	0x20008044
 8014d94:	0801d2fc 	.word	0x0801d2fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	7d1b      	ldrb	r3, [r3, #20]
 8014da4:	2b02      	cmp	r3, #2
 8014da6:	d006      	beq.n	8014db6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	8b5b      	ldrh	r3, [r3, #26]
 8014dac:	f023 0303 	bic.w	r3, r3, #3
 8014db0:	b29a      	uxth	r2, r3
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7f9 fe6e 	bl	800ea9e <lwip_htonl>
 8014dc2:	4604      	mov	r4, r0
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc6:	891b      	ldrh	r3, [r3, #8]
 8014dc8:	461d      	mov	r5, r3
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	899b      	ldrh	r3, [r3, #12]
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7f9 fe4e 	bl	800ea74 <lwip_htons>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	f003 0303 	and.w	r3, r3, #3
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d001      	beq.n	8014de8 <tcp_output+0x2a0>
 8014de4:	2301      	movs	r3, #1
 8014de6:	e000      	b.n	8014dea <tcp_output+0x2a2>
 8014de8:	2300      	movs	r3, #0
 8014dea:	442b      	add	r3, r5
 8014dec:	4423      	add	r3, r4
 8014dee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	1ad3      	subs	r3, r2, r3
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	da02      	bge.n	8014e02 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	891b      	ldrh	r3, [r3, #8]
 8014e06:	461c      	mov	r4, r3
 8014e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	899b      	ldrh	r3, [r3, #12]
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7f9 fe2f 	bl	800ea74 <lwip_htons>
 8014e16:	4603      	mov	r3, r0
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	f003 0303 	and.w	r3, r3, #3
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d001      	beq.n	8014e26 <tcp_output+0x2de>
 8014e22:	2301      	movs	r3, #1
 8014e24:	e000      	b.n	8014e28 <tcp_output+0x2e0>
 8014e26:	2300      	movs	r3, #0
 8014e28:	4423      	add	r3, r4
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d049      	beq.n	8014ec2 <tcp_output+0x37a>
      seg->next = NULL;
 8014e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e30:	2200      	movs	r2, #0
 8014e32:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d105      	bne.n	8014e48 <tcp_output+0x300>
        pcb->unacked = seg;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e40:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e44:	623b      	str	r3, [r7, #32]
 8014e46:	e03f      	b.n	8014ec8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4a:	68db      	ldr	r3, [r3, #12]
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7f9 fe25 	bl	800ea9e <lwip_htonl>
 8014e54:	4604      	mov	r4, r0
 8014e56:	6a3b      	ldr	r3, [r7, #32]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7f9 fe1e 	bl	800ea9e <lwip_htonl>
 8014e62:	4603      	mov	r3, r0
 8014e64:	1ae3      	subs	r3, r4, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	da24      	bge.n	8014eb4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	3370      	adds	r3, #112	; 0x70
 8014e6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e70:	e002      	b.n	8014e78 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014e72:	69fb      	ldr	r3, [r7, #28]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d011      	beq.n	8014ea4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f9 fe08 	bl	800ea9e <lwip_htonl>
 8014e8e:	4604      	mov	r4, r0
 8014e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7f9 fe01 	bl	800ea9e <lwip_htonl>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	dbe6      	blt.n	8014e72 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eaa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eb0:	601a      	str	r2, [r3, #0]
 8014eb2:	e009      	b.n	8014ec8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
 8014eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eb8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014eba:	6a3b      	ldr	r3, [r7, #32]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	623b      	str	r3, [r7, #32]
 8014ec0:	e002      	b.n	8014ec8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ec4:	f7fc fc3f 	bl	8011746 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ecc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d012      	beq.n	8014efa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7f9 fddf 	bl	800ea9e <lwip_htonl>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eea:	8912      	ldrh	r2, [r2, #8]
 8014eec:	4413      	add	r3, r2
  while (seg != NULL &&
 8014eee:	69ba      	ldr	r2, [r7, #24]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	f4bf aed9 	bcs.w	8014ca8 <tcp_output+0x160>
 8014ef6:	e000      	b.n	8014efa <tcp_output+0x3b2>
      break;
 8014ef8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d108      	bne.n	8014f14 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2200      	movs	r2, #0
 8014f06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014f0a:	e004      	b.n	8014f16 <tcp_output+0x3ce>
    goto output_done;
 8014f0c:	bf00      	nop
 8014f0e:	e002      	b.n	8014f16 <tcp_output+0x3ce>
    goto output_done;
 8014f10:	bf00      	nop
 8014f12:	e000      	b.n	8014f16 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014f14:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	8b5b      	ldrh	r3, [r3, #26]
 8014f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3728      	adds	r7, #40	; 0x28
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f2e:	bf00      	nop

08014f30 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_output_segment_busy+0x1c>
 8014f3e:	4b09      	ldr	r3, [pc, #36]	; (8014f64 <tcp_output_segment_busy+0x34>)
 8014f40:	f240 529a 	movw	r2, #1434	; 0x59a
 8014f44:	4908      	ldr	r1, [pc, #32]	; (8014f68 <tcp_output_segment_busy+0x38>)
 8014f46:	4809      	ldr	r0, [pc, #36]	; (8014f6c <tcp_output_segment_busy+0x3c>)
 8014f48:	f004 f84c 	bl	8018fe4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	7b9b      	ldrb	r3, [r3, #14]
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d001      	beq.n	8014f5a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014f56:	2301      	movs	r3, #1
 8014f58:	e000      	b.n	8014f5c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	0801cd78 	.word	0x0801cd78
 8014f68:	0801d314 	.word	0x0801d314
 8014f6c:	0801cdcc 	.word	0x0801cdcc

08014f70 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014f70:	b5b0      	push	{r4, r5, r7, lr}
 8014f72:	b08c      	sub	sp, #48	; 0x30
 8014f74:	af04      	add	r7, sp, #16
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d106      	bne.n	8014f90 <tcp_output_segment+0x20>
 8014f82:	4b64      	ldr	r3, [pc, #400]	; (8015114 <tcp_output_segment+0x1a4>)
 8014f84:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014f88:	4963      	ldr	r1, [pc, #396]	; (8015118 <tcp_output_segment+0x1a8>)
 8014f8a:	4864      	ldr	r0, [pc, #400]	; (801511c <tcp_output_segment+0x1ac>)
 8014f8c:	f004 f82a 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d106      	bne.n	8014fa4 <tcp_output_segment+0x34>
 8014f96:	4b5f      	ldr	r3, [pc, #380]	; (8015114 <tcp_output_segment+0x1a4>)
 8014f98:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014f9c:	4960      	ldr	r1, [pc, #384]	; (8015120 <tcp_output_segment+0x1b0>)
 8014f9e:	485f      	ldr	r0, [pc, #380]	; (801511c <tcp_output_segment+0x1ac>)
 8014fa0:	f004 f820 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d106      	bne.n	8014fb8 <tcp_output_segment+0x48>
 8014faa:	4b5a      	ldr	r3, [pc, #360]	; (8015114 <tcp_output_segment+0x1a4>)
 8014fac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014fb0:	495c      	ldr	r1, [pc, #368]	; (8015124 <tcp_output_segment+0x1b4>)
 8014fb2:	485a      	ldr	r0, [pc, #360]	; (801511c <tcp_output_segment+0x1ac>)
 8014fb4:	f004 f816 	bl	8018fe4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	f7ff ffb9 	bl	8014f30 <tcp_output_segment_busy>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d001      	beq.n	8014fc8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	e0a1      	b.n	801510c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	68dc      	ldr	r4, [r3, #12]
 8014fd0:	4610      	mov	r0, r2
 8014fd2:	f7f9 fd64 	bl	800ea9e <lwip_htonl>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	68dc      	ldr	r4, [r3, #12]
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	f7f9 fd46 	bl	800ea74 <lwip_htons>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff0:	68ba      	ldr	r2, [r7, #8]
 8014ff2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014ff4:	441a      	add	r2, r3
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	3314      	adds	r3, #20
 8015000:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	7a9b      	ldrb	r3, [r3, #10]
 8015006:	f003 0301 	and.w	r3, r3, #1
 801500a:	2b00      	cmp	r3, #0
 801500c:	d015      	beq.n	801503a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	3304      	adds	r3, #4
 8015012:	461a      	mov	r2, r3
 8015014:	6879      	ldr	r1, [r7, #4]
 8015016:	f44f 7006 	mov.w	r0, #536	; 0x218
 801501a:	f7fc fe8b 	bl	8011d34 <tcp_eff_send_mss_netif>
 801501e:	4603      	mov	r3, r0
 8015020:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015022:	8b7b      	ldrh	r3, [r7, #26]
 8015024:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015028:	4618      	mov	r0, r3
 801502a:	f7f9 fd38 	bl	800ea9e <lwip_htonl>
 801502e:	4602      	mov	r2, r0
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015034:	69fb      	ldr	r3, [r7, #28]
 8015036:	3304      	adds	r3, #4
 8015038:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015040:	2b00      	cmp	r3, #0
 8015042:	da02      	bge.n	801504a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2200      	movs	r2, #0
 8015048:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801504e:	2b00      	cmp	r3, #0
 8015050:	d10c      	bne.n	801506c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015052:	4b35      	ldr	r3, [pc, #212]	; (8015128 <tcp_output_segment+0x1b8>)
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	f7f9 fd1c 	bl	800ea9e <lwip_htonl>
 8015066:	4602      	mov	r2, r0
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68da      	ldr	r2, [r3, #12]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	8959      	ldrh	r1, [r3, #10]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	8b3a      	ldrh	r2, [r7, #24]
 8015086:	1a8a      	subs	r2, r1, r2
 8015088:	b292      	uxth	r2, r2
 801508a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	8919      	ldrh	r1, [r3, #8]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	8b3a      	ldrh	r2, [r7, #24]
 8015098:	1a8a      	subs	r2, r1, r2
 801509a:	b292      	uxth	r2, r2
 801509c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	68fa      	ldr	r2, [r7, #12]
 80150a4:	68d2      	ldr	r2, [r2, #12]
 80150a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	2200      	movs	r2, #0
 80150ae:	741a      	strb	r2, [r3, #16]
 80150b0:	2200      	movs	r2, #0
 80150b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	68da      	ldr	r2, [r3, #12]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	7a9b      	ldrb	r3, [r3, #10]
 80150bc:	f003 0301 	and.w	r3, r3, #1
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <tcp_output_segment+0x158>
 80150c4:	2318      	movs	r3, #24
 80150c6:	e000      	b.n	80150ca <tcp_output_segment+0x15a>
 80150c8:	2314      	movs	r3, #20
 80150ca:	4413      	add	r3, r2
 80150cc:	69fa      	ldr	r2, [r7, #28]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d006      	beq.n	80150e0 <tcp_output_segment+0x170>
 80150d2:	4b10      	ldr	r3, [pc, #64]	; (8015114 <tcp_output_segment+0x1a4>)
 80150d4:	f240 621c 	movw	r2, #1564	; 0x61c
 80150d8:	4914      	ldr	r1, [pc, #80]	; (801512c <tcp_output_segment+0x1bc>)
 80150da:	4810      	ldr	r0, [pc, #64]	; (801511c <tcp_output_segment+0x1ac>)
 80150dc:	f003 ff82 	bl	8018fe4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	6858      	ldr	r0, [r3, #4]
 80150e4:	68b9      	ldr	r1, [r7, #8]
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	1d1c      	adds	r4, r3, #4
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	7add      	ldrb	r5, [r3, #11]
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	7a9b      	ldrb	r3, [r3, #10]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	9202      	str	r2, [sp, #8]
 80150f6:	2206      	movs	r2, #6
 80150f8:	9201      	str	r2, [sp, #4]
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	462b      	mov	r3, r5
 80150fe:	4622      	mov	r2, r4
 8015100:	f002 fa18 	bl	8017534 <ip4_output_if>
 8015104:	4603      	mov	r3, r0
 8015106:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801510c:	4618      	mov	r0, r3
 801510e:	3720      	adds	r7, #32
 8015110:	46bd      	mov	sp, r7
 8015112:	bdb0      	pop	{r4, r5, r7, pc}
 8015114:	0801cd78 	.word	0x0801cd78
 8015118:	0801d33c 	.word	0x0801d33c
 801511c:	0801cdcc 	.word	0x0801cdcc
 8015120:	0801d35c 	.word	0x0801d35c
 8015124:	0801d37c 	.word	0x0801d37c
 8015128:	20007ff8 	.word	0x20007ff8
 801512c:	0801d3a0 	.word	0x0801d3a0

08015130 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015130:	b5b0      	push	{r4, r5, r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d106      	bne.n	801514c <tcp_rexmit_rto_prepare+0x1c>
 801513e:	4b31      	ldr	r3, [pc, #196]	; (8015204 <tcp_rexmit_rto_prepare+0xd4>)
 8015140:	f240 6263 	movw	r2, #1635	; 0x663
 8015144:	4930      	ldr	r1, [pc, #192]	; (8015208 <tcp_rexmit_rto_prepare+0xd8>)
 8015146:	4831      	ldr	r0, [pc, #196]	; (801520c <tcp_rexmit_rto_prepare+0xdc>)
 8015148:	f003 ff4c 	bl	8018fe4 <iprintf>

  if (pcb->unacked == NULL) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015150:	2b00      	cmp	r3, #0
 8015152:	d102      	bne.n	801515a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015154:	f06f 0305 	mvn.w	r3, #5
 8015158:	e050      	b.n	80151fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	e00b      	b.n	801517a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f7ff fee4 	bl	8014f30 <tcp_output_segment_busy>
 8015168:	4603      	mov	r3, r0
 801516a:	2b00      	cmp	r3, #0
 801516c:	d002      	beq.n	8015174 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801516e:	f06f 0305 	mvn.w	r3, #5
 8015172:	e043      	b.n	80151fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	60fb      	str	r3, [r7, #12]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1ef      	bne.n	8015162 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f7ff fed4 	bl	8014f30 <tcp_output_segment_busy>
 8015188:	4603      	mov	r3, r0
 801518a:	2b00      	cmp	r3, #0
 801518c:	d002      	beq.n	8015194 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801518e:	f06f 0305 	mvn.w	r3, #5
 8015192:	e033      	b.n	80151fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2200      	movs	r2, #0
 80151a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	8b5b      	ldrh	r3, [r3, #26]
 80151ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7f9 fc6d 	bl	800ea9e <lwip_htonl>
 80151c4:	4604      	mov	r4, r0
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	891b      	ldrh	r3, [r3, #8]
 80151ca:	461d      	mov	r5, r3
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	899b      	ldrh	r3, [r3, #12]
 80151d2:	b29b      	uxth	r3, r3
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7f9 fc4d 	bl	800ea74 <lwip_htons>
 80151da:	4603      	mov	r3, r0
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	f003 0303 	and.w	r3, r3, #3
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d001      	beq.n	80151ea <tcp_rexmit_rto_prepare+0xba>
 80151e6:	2301      	movs	r3, #1
 80151e8:	e000      	b.n	80151ec <tcp_rexmit_rto_prepare+0xbc>
 80151ea:	2300      	movs	r3, #0
 80151ec:	442b      	add	r3, r5
 80151ee:	18e2      	adds	r2, r4, r3
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2200      	movs	r2, #0
 80151f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3710      	adds	r7, #16
 8015200:	46bd      	mov	sp, r7
 8015202:	bdb0      	pop	{r4, r5, r7, pc}
 8015204:	0801cd78 	.word	0x0801cd78
 8015208:	0801d3b4 	.word	0x0801d3b4
 801520c:	0801cdcc 	.word	0x0801cdcc

08015210 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d106      	bne.n	801522c <tcp_rexmit_rto_commit+0x1c>
 801521e:	4b0d      	ldr	r3, [pc, #52]	; (8015254 <tcp_rexmit_rto_commit+0x44>)
 8015220:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015224:	490c      	ldr	r1, [pc, #48]	; (8015258 <tcp_rexmit_rto_commit+0x48>)
 8015226:	480d      	ldr	r0, [pc, #52]	; (801525c <tcp_rexmit_rto_commit+0x4c>)
 8015228:	f003 fedc 	bl	8018fe4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015232:	2bff      	cmp	r3, #255	; 0xff
 8015234:	d007      	beq.n	8015246 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801523c:	3301      	adds	r3, #1
 801523e:	b2da      	uxtb	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f7ff fc7e 	bl	8014b48 <tcp_output>
}
 801524c:	bf00      	nop
 801524e:	3708      	adds	r7, #8
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	0801cd78 	.word	0x0801cd78
 8015258:	0801d3d8 	.word	0x0801d3d8
 801525c:	0801cdcc 	.word	0x0801cdcc

08015260 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d106      	bne.n	801527c <tcp_rexmit_rto+0x1c>
 801526e:	4b0a      	ldr	r3, [pc, #40]	; (8015298 <tcp_rexmit_rto+0x38>)
 8015270:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015274:	4909      	ldr	r1, [pc, #36]	; (801529c <tcp_rexmit_rto+0x3c>)
 8015276:	480a      	ldr	r0, [pc, #40]	; (80152a0 <tcp_rexmit_rto+0x40>)
 8015278:	f003 feb4 	bl	8018fe4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f7ff ff57 	bl	8015130 <tcp_rexmit_rto_prepare>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d102      	bne.n	801528e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f7ff ffc1 	bl	8015210 <tcp_rexmit_rto_commit>
  }
}
 801528e:	bf00      	nop
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	0801cd78 	.word	0x0801cd78
 801529c:	0801d3fc 	.word	0x0801d3fc
 80152a0:	0801cdcc 	.word	0x0801cdcc

080152a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80152a4:	b590      	push	{r4, r7, lr}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d106      	bne.n	80152c0 <tcp_rexmit+0x1c>
 80152b2:	4b2f      	ldr	r3, [pc, #188]	; (8015370 <tcp_rexmit+0xcc>)
 80152b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80152b8:	492e      	ldr	r1, [pc, #184]	; (8015374 <tcp_rexmit+0xd0>)
 80152ba:	482f      	ldr	r0, [pc, #188]	; (8015378 <tcp_rexmit+0xd4>)
 80152bc:	f003 fe92 	bl	8018fe4 <iprintf>

  if (pcb->unacked == NULL) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d102      	bne.n	80152ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80152c8:	f06f 0305 	mvn.w	r3, #5
 80152cc:	e04c      	b.n	8015368 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80152d4:	68b8      	ldr	r0, [r7, #8]
 80152d6:	f7ff fe2b 	bl	8014f30 <tcp_output_segment_busy>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d002      	beq.n	80152e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80152e0:	f06f 0305 	mvn.w	r3, #5
 80152e4:	e040      	b.n	8015368 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	336c      	adds	r3, #108	; 0x6c
 80152f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80152f4:	e002      	b.n	80152fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d011      	beq.n	8015328 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	4618      	mov	r0, r3
 801530e:	f7f9 fbc6 	bl	800ea9e <lwip_htonl>
 8015312:	4604      	mov	r4, r0
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	4618      	mov	r0, r3
 801531c:	f7f9 fbbf 	bl	800ea9e <lwip_htonl>
 8015320:	4603      	mov	r3, r0
 8015322:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015324:	2b00      	cmp	r3, #0
 8015326:	dbe6      	blt.n	80152f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	68ba      	ldr	r2, [r7, #8]
 8015334:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d103      	bne.n	8015346 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2200      	movs	r2, #0
 8015342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801534c:	2bff      	cmp	r3, #255	; 0xff
 801534e:	d007      	beq.n	8015360 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015356:	3301      	adds	r3, #1
 8015358:	b2da      	uxtb	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2200      	movs	r2, #0
 8015364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015366:	2300      	movs	r3, #0
}
 8015368:	4618      	mov	r0, r3
 801536a:	3714      	adds	r7, #20
 801536c:	46bd      	mov	sp, r7
 801536e:	bd90      	pop	{r4, r7, pc}
 8015370:	0801cd78 	.word	0x0801cd78
 8015374:	0801d418 	.word	0x0801d418
 8015378:	0801cdcc 	.word	0x0801cdcc

0801537c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <tcp_rexmit_fast+0x1c>
 801538a:	4b2a      	ldr	r3, [pc, #168]	; (8015434 <tcp_rexmit_fast+0xb8>)
 801538c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015390:	4929      	ldr	r1, [pc, #164]	; (8015438 <tcp_rexmit_fast+0xbc>)
 8015392:	482a      	ldr	r0, [pc, #168]	; (801543c <tcp_rexmit_fast+0xc0>)
 8015394:	f003 fe26 	bl	8018fe4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801539c:	2b00      	cmp	r3, #0
 801539e:	d045      	beq.n	801542c <tcp_rexmit_fast+0xb0>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	8b5b      	ldrh	r3, [r3, #26]
 80153a4:	f003 0304 	and.w	r3, r3, #4
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d13f      	bne.n	801542c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f7ff ff79 	bl	80152a4 <tcp_rexmit>
 80153b2:	4603      	mov	r3, r0
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d139      	bne.n	801542c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153c4:	4293      	cmp	r3, r2
 80153c6:	bf28      	it	cs
 80153c8:	4613      	movcs	r3, r2
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	da00      	bge.n	80153d2 <tcp_rexmit_fast+0x56>
 80153d0:	3301      	adds	r3, #1
 80153d2:	105b      	asrs	r3, r3, #1
 80153d4:	b29a      	uxth	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80153e2:	461a      	mov	r2, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d206      	bcs.n	80153fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	b29a      	uxth	r2, r3
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015406:	4619      	mov	r1, r3
 8015408:	0049      	lsls	r1, r1, #1
 801540a:	440b      	add	r3, r1
 801540c:	b29b      	uxth	r3, r3
 801540e:	4413      	add	r3, r2
 8015410:	b29a      	uxth	r2, r3
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	8b5b      	ldrh	r3, [r3, #26]
 801541c:	f043 0304 	orr.w	r3, r3, #4
 8015420:	b29a      	uxth	r2, r3
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2200      	movs	r2, #0
 801542a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	0801cd78 	.word	0x0801cd78
 8015438:	0801d430 	.word	0x0801d430
 801543c:	0801cdcc 	.word	0x0801cdcc

08015440 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	607b      	str	r3, [r7, #4]
 801544a:	460b      	mov	r3, r1
 801544c:	817b      	strh	r3, [r7, #10]
 801544e:	4613      	mov	r3, r2
 8015450:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015452:	897a      	ldrh	r2, [r7, #10]
 8015454:	893b      	ldrh	r3, [r7, #8]
 8015456:	4413      	add	r3, r2
 8015458:	b29b      	uxth	r3, r3
 801545a:	3314      	adds	r3, #20
 801545c:	b29b      	uxth	r3, r3
 801545e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015462:	4619      	mov	r1, r3
 8015464:	2022      	movs	r0, #34	; 0x22
 8015466:	f7fa fc17 	bl	800fc98 <pbuf_alloc>
 801546a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d04d      	beq.n	801550e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015472:	897b      	ldrh	r3, [r7, #10]
 8015474:	3313      	adds	r3, #19
 8015476:	697a      	ldr	r2, [r7, #20]
 8015478:	8952      	ldrh	r2, [r2, #10]
 801547a:	4293      	cmp	r3, r2
 801547c:	db06      	blt.n	801548c <tcp_output_alloc_header_common+0x4c>
 801547e:	4b26      	ldr	r3, [pc, #152]	; (8015518 <tcp_output_alloc_header_common+0xd8>)
 8015480:	f240 7223 	movw	r2, #1827	; 0x723
 8015484:	4925      	ldr	r1, [pc, #148]	; (801551c <tcp_output_alloc_header_common+0xdc>)
 8015486:	4826      	ldr	r0, [pc, #152]	; (8015520 <tcp_output_alloc_header_common+0xe0>)
 8015488:	f003 fdac 	bl	8018fe4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015492:	8c3b      	ldrh	r3, [r7, #32]
 8015494:	4618      	mov	r0, r3
 8015496:	f7f9 faed 	bl	800ea74 <lwip_htons>
 801549a:	4603      	mov	r3, r0
 801549c:	461a      	mov	r2, r3
 801549e:	693b      	ldr	r3, [r7, #16]
 80154a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80154a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154a4:	4618      	mov	r0, r3
 80154a6:	f7f9 fae5 	bl	800ea74 <lwip_htons>
 80154aa:	4603      	mov	r3, r0
 80154ac:	461a      	mov	r2, r3
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80154b2:	693b      	ldr	r3, [r7, #16]
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f7f9 faf0 	bl	800ea9e <lwip_htonl>
 80154be:	4602      	mov	r2, r0
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80154c4:	897b      	ldrh	r3, [r7, #10]
 80154c6:	089b      	lsrs	r3, r3, #2
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	3305      	adds	r3, #5
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	031b      	lsls	r3, r3, #12
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	4313      	orrs	r3, r2
 80154da:	b29b      	uxth	r3, r3
 80154dc:	4618      	mov	r0, r3
 80154de:	f7f9 fac9 	bl	800ea74 <lwip_htons>
 80154e2:	4603      	mov	r3, r0
 80154e4:	461a      	mov	r2, r3
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80154ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7f9 fac1 	bl	800ea74 <lwip_htons>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461a      	mov	r2, r3
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	2200      	movs	r2, #0
 80154fe:	741a      	strb	r2, [r3, #16]
 8015500:	2200      	movs	r2, #0
 8015502:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	2200      	movs	r2, #0
 8015508:	749a      	strb	r2, [r3, #18]
 801550a:	2200      	movs	r2, #0
 801550c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801550e:	697b      	ldr	r3, [r7, #20]
}
 8015510:	4618      	mov	r0, r3
 8015512:	3718      	adds	r7, #24
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	0801cd78 	.word	0x0801cd78
 801551c:	0801d450 	.word	0x0801d450
 8015520:	0801cdcc 	.word	0x0801cdcc

08015524 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015524:	b5b0      	push	{r4, r5, r7, lr}
 8015526:	b08a      	sub	sp, #40	; 0x28
 8015528:	af04      	add	r7, sp, #16
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	607b      	str	r3, [r7, #4]
 801552e:	460b      	mov	r3, r1
 8015530:	817b      	strh	r3, [r7, #10]
 8015532:	4613      	mov	r3, r2
 8015534:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d106      	bne.n	801554a <tcp_output_alloc_header+0x26>
 801553c:	4b15      	ldr	r3, [pc, #84]	; (8015594 <tcp_output_alloc_header+0x70>)
 801553e:	f240 7242 	movw	r2, #1858	; 0x742
 8015542:	4915      	ldr	r1, [pc, #84]	; (8015598 <tcp_output_alloc_header+0x74>)
 8015544:	4815      	ldr	r0, [pc, #84]	; (801559c <tcp_output_alloc_header+0x78>)
 8015546:	f003 fd4d 	bl	8018fe4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	8adb      	ldrh	r3, [r3, #22]
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	8b12      	ldrh	r2, [r2, #24]
 8015556:	68f9      	ldr	r1, [r7, #12]
 8015558:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801555a:	893d      	ldrh	r5, [r7, #8]
 801555c:	897c      	ldrh	r4, [r7, #10]
 801555e:	9103      	str	r1, [sp, #12]
 8015560:	2110      	movs	r1, #16
 8015562:	9102      	str	r1, [sp, #8]
 8015564:	9201      	str	r2, [sp, #4]
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	462a      	mov	r2, r5
 801556c:	4621      	mov	r1, r4
 801556e:	f7ff ff67 	bl	8015440 <tcp_output_alloc_header_common>
 8015572:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d006      	beq.n	8015588 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801557e:	68fa      	ldr	r2, [r7, #12]
 8015580:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015582:	441a      	add	r2, r3
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015588:	697b      	ldr	r3, [r7, #20]
}
 801558a:	4618      	mov	r0, r3
 801558c:	3718      	adds	r7, #24
 801558e:	46bd      	mov	sp, r7
 8015590:	bdb0      	pop	{r4, r5, r7, pc}
 8015592:	bf00      	nop
 8015594:	0801cd78 	.word	0x0801cd78
 8015598:	0801d480 	.word	0x0801d480
 801559c:	0801cdcc 	.word	0x0801cdcc

080155a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b088      	sub	sp, #32
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	60b9      	str	r1, [r7, #8]
 80155aa:	4611      	mov	r1, r2
 80155ac:	461a      	mov	r2, r3
 80155ae:	460b      	mov	r3, r1
 80155b0:	71fb      	strb	r3, [r7, #7]
 80155b2:	4613      	mov	r3, r2
 80155b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80155b6:	2300      	movs	r3, #0
 80155b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d106      	bne.n	80155ce <tcp_output_fill_options+0x2e>
 80155c0:	4b12      	ldr	r3, [pc, #72]	; (801560c <tcp_output_fill_options+0x6c>)
 80155c2:	f240 7256 	movw	r2, #1878	; 0x756
 80155c6:	4912      	ldr	r1, [pc, #72]	; (8015610 <tcp_output_fill_options+0x70>)
 80155c8:	4812      	ldr	r0, [pc, #72]	; (8015614 <tcp_output_fill_options+0x74>)
 80155ca:	f003 fd0b 	bl	8018fe4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	3314      	adds	r3, #20
 80155d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80155da:	8bfb      	ldrh	r3, [r7, #30]
 80155dc:	009b      	lsls	r3, r3, #2
 80155de:	461a      	mov	r2, r3
 80155e0:	79fb      	ldrb	r3, [r7, #7]
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	f003 0304 	and.w	r3, r3, #4
 80155e8:	4413      	add	r3, r2
 80155ea:	3314      	adds	r3, #20
 80155ec:	69ba      	ldr	r2, [r7, #24]
 80155ee:	4413      	add	r3, r2
 80155f0:	697a      	ldr	r2, [r7, #20]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d006      	beq.n	8015604 <tcp_output_fill_options+0x64>
 80155f6:	4b05      	ldr	r3, [pc, #20]	; (801560c <tcp_output_fill_options+0x6c>)
 80155f8:	f240 7275 	movw	r2, #1909	; 0x775
 80155fc:	4906      	ldr	r1, [pc, #24]	; (8015618 <tcp_output_fill_options+0x78>)
 80155fe:	4805      	ldr	r0, [pc, #20]	; (8015614 <tcp_output_fill_options+0x74>)
 8015600:	f003 fcf0 	bl	8018fe4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015604:	bf00      	nop
 8015606:	3720      	adds	r7, #32
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}
 801560c:	0801cd78 	.word	0x0801cd78
 8015610:	0801d4a8 	.word	0x0801d4a8
 8015614:	0801cdcc 	.word	0x0801cdcc
 8015618:	0801d3a0 	.word	0x0801d3a0

0801561c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b08a      	sub	sp, #40	; 0x28
 8015620:	af04      	add	r7, sp, #16
 8015622:	60f8      	str	r0, [r7, #12]
 8015624:	60b9      	str	r1, [r7, #8]
 8015626:	607a      	str	r2, [r7, #4]
 8015628:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d106      	bne.n	801563e <tcp_output_control_segment+0x22>
 8015630:	4b1c      	ldr	r3, [pc, #112]	; (80156a4 <tcp_output_control_segment+0x88>)
 8015632:	f240 7287 	movw	r2, #1927	; 0x787
 8015636:	491c      	ldr	r1, [pc, #112]	; (80156a8 <tcp_output_control_segment+0x8c>)
 8015638:	481c      	ldr	r0, [pc, #112]	; (80156ac <tcp_output_control_segment+0x90>)
 801563a:	f003 fcd3 	bl	8018fe4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801563e:	683a      	ldr	r2, [r7, #0]
 8015640:	6879      	ldr	r1, [r7, #4]
 8015642:	68f8      	ldr	r0, [r7, #12]
 8015644:	f7fe ff40 	bl	80144c8 <tcp_route>
 8015648:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d102      	bne.n	8015656 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015650:	23fc      	movs	r3, #252	; 0xfc
 8015652:	75fb      	strb	r3, [r7, #23]
 8015654:	e01c      	b.n	8015690 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d006      	beq.n	801566a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	7adb      	ldrb	r3, [r3, #11]
 8015660:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	7a9b      	ldrb	r3, [r3, #10]
 8015666:	757b      	strb	r3, [r7, #21]
 8015668:	e003      	b.n	8015672 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801566a:	23ff      	movs	r3, #255	; 0xff
 801566c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801566e:	2300      	movs	r3, #0
 8015670:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015672:	7dba      	ldrb	r2, [r7, #22]
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	9302      	str	r3, [sp, #8]
 8015678:	2306      	movs	r3, #6
 801567a:	9301      	str	r3, [sp, #4]
 801567c:	7d7b      	ldrb	r3, [r7, #21]
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	4613      	mov	r3, r2
 8015682:	683a      	ldr	r2, [r7, #0]
 8015684:	6879      	ldr	r1, [r7, #4]
 8015686:	68b8      	ldr	r0, [r7, #8]
 8015688:	f001 ff54 	bl	8017534 <ip4_output_if>
 801568c:	4603      	mov	r3, r0
 801568e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015690:	68b8      	ldr	r0, [r7, #8]
 8015692:	f7fa fde5 	bl	8010260 <pbuf_free>
  return err;
 8015696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801569a:	4618      	mov	r0, r3
 801569c:	3718      	adds	r7, #24
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	0801cd78 	.word	0x0801cd78
 80156a8:	0801d4d0 	.word	0x0801d4d0
 80156ac:	0801cdcc 	.word	0x0801cdcc

080156b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80156b0:	b590      	push	{r4, r7, lr}
 80156b2:	b08b      	sub	sp, #44	; 0x2c
 80156b4:	af04      	add	r7, sp, #16
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
 80156bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d106      	bne.n	80156d2 <tcp_rst+0x22>
 80156c4:	4b1f      	ldr	r3, [pc, #124]	; (8015744 <tcp_rst+0x94>)
 80156c6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80156ca:	491f      	ldr	r1, [pc, #124]	; (8015748 <tcp_rst+0x98>)
 80156cc:	481f      	ldr	r0, [pc, #124]	; (801574c <tcp_rst+0x9c>)
 80156ce:	f003 fc89 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80156d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d106      	bne.n	80156e6 <tcp_rst+0x36>
 80156d8:	4b1a      	ldr	r3, [pc, #104]	; (8015744 <tcp_rst+0x94>)
 80156da:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80156de:	491c      	ldr	r1, [pc, #112]	; (8015750 <tcp_rst+0xa0>)
 80156e0:	481a      	ldr	r0, [pc, #104]	; (801574c <tcp_rst+0x9c>)
 80156e2:	f003 fc7f 	bl	8018fe4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80156e6:	2300      	movs	r3, #0
 80156e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80156ea:	f246 0308 	movw	r3, #24584	; 0x6008
 80156ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80156f0:	7dfb      	ldrb	r3, [r7, #23]
 80156f2:	b29c      	uxth	r4, r3
 80156f4:	68b8      	ldr	r0, [r7, #8]
 80156f6:	f7f9 f9d2 	bl	800ea9e <lwip_htonl>
 80156fa:	4602      	mov	r2, r0
 80156fc:	8abb      	ldrh	r3, [r7, #20]
 80156fe:	9303      	str	r3, [sp, #12]
 8015700:	2314      	movs	r3, #20
 8015702:	9302      	str	r3, [sp, #8]
 8015704:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015706:	9301      	str	r3, [sp, #4]
 8015708:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801570a:	9300      	str	r3, [sp, #0]
 801570c:	4613      	mov	r3, r2
 801570e:	2200      	movs	r2, #0
 8015710:	4621      	mov	r1, r4
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f7ff fe94 	bl	8015440 <tcp_output_alloc_header_common>
 8015718:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00c      	beq.n	801573a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	2200      	movs	r2, #0
 8015724:	6939      	ldr	r1, [r7, #16]
 8015726:	68f8      	ldr	r0, [r7, #12]
 8015728:	f7ff ff3a 	bl	80155a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	6939      	ldr	r1, [r7, #16]
 8015732:	68f8      	ldr	r0, [r7, #12]
 8015734:	f7ff ff72 	bl	801561c <tcp_output_control_segment>
 8015738:	e000      	b.n	801573c <tcp_rst+0x8c>
    return;
 801573a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801573c:	371c      	adds	r7, #28
 801573e:	46bd      	mov	sp, r7
 8015740:	bd90      	pop	{r4, r7, pc}
 8015742:	bf00      	nop
 8015744:	0801cd78 	.word	0x0801cd78
 8015748:	0801d4fc 	.word	0x0801d4fc
 801574c:	0801cdcc 	.word	0x0801cdcc
 8015750:	0801d518 	.word	0x0801d518

08015754 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015754:	b590      	push	{r4, r7, lr}
 8015756:	b087      	sub	sp, #28
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801575c:	2300      	movs	r3, #0
 801575e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015760:	2300      	movs	r3, #0
 8015762:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d106      	bne.n	8015778 <tcp_send_empty_ack+0x24>
 801576a:	4b28      	ldr	r3, [pc, #160]	; (801580c <tcp_send_empty_ack+0xb8>)
 801576c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015770:	4927      	ldr	r1, [pc, #156]	; (8015810 <tcp_send_empty_ack+0xbc>)
 8015772:	4828      	ldr	r0, [pc, #160]	; (8015814 <tcp_send_empty_ack+0xc0>)
 8015774:	f003 fc36 	bl	8018fe4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015778:	7dfb      	ldrb	r3, [r7, #23]
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	b2db      	uxtb	r3, r3
 801577e:	f003 0304 	and.w	r3, r3, #4
 8015782:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015784:	7d7b      	ldrb	r3, [r7, #21]
 8015786:	b29c      	uxth	r4, r3
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801578c:	4618      	mov	r0, r3
 801578e:	f7f9 f986 	bl	800ea9e <lwip_htonl>
 8015792:	4603      	mov	r3, r0
 8015794:	2200      	movs	r2, #0
 8015796:	4621      	mov	r1, r4
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f7ff fec3 	bl	8015524 <tcp_output_alloc_header>
 801579e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d109      	bne.n	80157ba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	8b5b      	ldrh	r3, [r3, #26]
 80157aa:	f043 0303 	orr.w	r3, r3, #3
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80157b4:	f06f 0301 	mvn.w	r3, #1
 80157b8:	e023      	b.n	8015802 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80157ba:	7dbb      	ldrb	r3, [r7, #22]
 80157bc:	7dfa      	ldrb	r2, [r7, #23]
 80157be:	6939      	ldr	r1, [r7, #16]
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f7ff feed 	bl	80155a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	3304      	adds	r3, #4
 80157cc:	6939      	ldr	r1, [r7, #16]
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f7ff ff24 	bl	801561c <tcp_output_control_segment>
 80157d4:	4603      	mov	r3, r0
 80157d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80157d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d007      	beq.n	80157f0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	8b5b      	ldrh	r3, [r3, #26]
 80157e4:	f043 0303 	orr.w	r3, r3, #3
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	835a      	strh	r2, [r3, #26]
 80157ee:	e006      	b.n	80157fe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	8b5b      	ldrh	r3, [r3, #26]
 80157f4:	f023 0303 	bic.w	r3, r3, #3
 80157f8:	b29a      	uxth	r2, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80157fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015802:	4618      	mov	r0, r3
 8015804:	371c      	adds	r7, #28
 8015806:	46bd      	mov	sp, r7
 8015808:	bd90      	pop	{r4, r7, pc}
 801580a:	bf00      	nop
 801580c:	0801cd78 	.word	0x0801cd78
 8015810:	0801d534 	.word	0x0801d534
 8015814:	0801cdcc 	.word	0x0801cdcc

08015818 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015818:	b590      	push	{r4, r7, lr}
 801581a:	b087      	sub	sp, #28
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015820:	2300      	movs	r3, #0
 8015822:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d106      	bne.n	8015838 <tcp_keepalive+0x20>
 801582a:	4b18      	ldr	r3, [pc, #96]	; (801588c <tcp_keepalive+0x74>)
 801582c:	f640 0224 	movw	r2, #2084	; 0x824
 8015830:	4917      	ldr	r1, [pc, #92]	; (8015890 <tcp_keepalive+0x78>)
 8015832:	4818      	ldr	r0, [pc, #96]	; (8015894 <tcp_keepalive+0x7c>)
 8015834:	f003 fbd6 	bl	8018fe4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015838:	7dfb      	ldrb	r3, [r7, #23]
 801583a:	b29c      	uxth	r4, r3
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015840:	3b01      	subs	r3, #1
 8015842:	4618      	mov	r0, r3
 8015844:	f7f9 f92b 	bl	800ea9e <lwip_htonl>
 8015848:	4603      	mov	r3, r0
 801584a:	2200      	movs	r2, #0
 801584c:	4621      	mov	r1, r4
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f7ff fe68 	bl	8015524 <tcp_output_alloc_header>
 8015854:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d102      	bne.n	8015862 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801585c:	f04f 33ff 	mov.w	r3, #4294967295
 8015860:	e010      	b.n	8015884 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	2200      	movs	r2, #0
 8015866:	6939      	ldr	r1, [r7, #16]
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ff fe99 	bl	80155a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	3304      	adds	r3, #4
 8015874:	6939      	ldr	r1, [r7, #16]
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f7ff fed0 	bl	801561c <tcp_output_control_segment>
 801587c:	4603      	mov	r3, r0
 801587e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015884:	4618      	mov	r0, r3
 8015886:	371c      	adds	r7, #28
 8015888:	46bd      	mov	sp, r7
 801588a:	bd90      	pop	{r4, r7, pc}
 801588c:	0801cd78 	.word	0x0801cd78
 8015890:	0801d554 	.word	0x0801d554
 8015894:	0801cdcc 	.word	0x0801cdcc

08015898 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015898:	b590      	push	{r4, r7, lr}
 801589a:	b08b      	sub	sp, #44	; 0x2c
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158a0:	2300      	movs	r3, #0
 80158a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <tcp_zero_window_probe+0x22>
 80158ac:	4b4c      	ldr	r3, [pc, #304]	; (80159e0 <tcp_zero_window_probe+0x148>)
 80158ae:	f640 024f 	movw	r2, #2127	; 0x84f
 80158b2:	494c      	ldr	r1, [pc, #304]	; (80159e4 <tcp_zero_window_probe+0x14c>)
 80158b4:	484c      	ldr	r0, [pc, #304]	; (80159e8 <tcp_zero_window_probe+0x150>)
 80158b6:	f003 fb95 	bl	8018fe4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158be:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80158c0:	6a3b      	ldr	r3, [r7, #32]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d101      	bne.n	80158ca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80158c6:	2300      	movs	r3, #0
 80158c8:	e086      	b.n	80159d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80158d0:	2bff      	cmp	r3, #255	; 0xff
 80158d2:	d007      	beq.n	80158e4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80158da:	3301      	adds	r3, #1
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80158e4:	6a3b      	ldr	r3, [r7, #32]
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	899b      	ldrh	r3, [r3, #12]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7f9 f8c1 	bl	800ea74 <lwip_htons>
 80158f2:	4603      	mov	r3, r0
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	f003 0301 	and.w	r3, r3, #1
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d005      	beq.n	801590a <tcp_zero_window_probe+0x72>
 80158fe:	6a3b      	ldr	r3, [r7, #32]
 8015900:	891b      	ldrh	r3, [r3, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <tcp_zero_window_probe+0x72>
 8015906:	2301      	movs	r3, #1
 8015908:	e000      	b.n	801590c <tcp_zero_window_probe+0x74>
 801590a:	2300      	movs	r3, #0
 801590c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801590e:	7ffb      	ldrb	r3, [r7, #31]
 8015910:	2b00      	cmp	r3, #0
 8015912:	bf0c      	ite	eq
 8015914:	2301      	moveq	r3, #1
 8015916:	2300      	movne	r3, #0
 8015918:	b2db      	uxtb	r3, r3
 801591a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801591c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015920:	b299      	uxth	r1, r3
 8015922:	6a3b      	ldr	r3, [r7, #32]
 8015924:	68db      	ldr	r3, [r3, #12]
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	8bba      	ldrh	r2, [r7, #28]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7ff fdfa 	bl	8015524 <tcp_output_alloc_header>
 8015930:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015932:	69bb      	ldr	r3, [r7, #24]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d102      	bne.n	801593e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015938:	f04f 33ff 	mov.w	r3, #4294967295
 801593c:	e04c      	b.n	80159d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015944:	7ffb      	ldrb	r3, [r7, #31]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d011      	beq.n	801596e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	899b      	ldrh	r3, [r3, #12]
 801594e:	b29b      	uxth	r3, r3
 8015950:	b21b      	sxth	r3, r3
 8015952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015956:	b21c      	sxth	r4, r3
 8015958:	2011      	movs	r0, #17
 801595a:	f7f9 f88b 	bl	800ea74 <lwip_htons>
 801595e:	4603      	mov	r3, r0
 8015960:	b21b      	sxth	r3, r3
 8015962:	4323      	orrs	r3, r4
 8015964:	b21b      	sxth	r3, r3
 8015966:	b29a      	uxth	r2, r3
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	819a      	strh	r2, [r3, #12]
 801596c:	e010      	b.n	8015990 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	685b      	ldr	r3, [r3, #4]
 8015972:	3314      	adds	r3, #20
 8015974:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	6858      	ldr	r0, [r3, #4]
 801597a:	6a3b      	ldr	r3, [r7, #32]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	891a      	ldrh	r2, [r3, #8]
 8015980:	6a3b      	ldr	r3, [r7, #32]
 8015982:	891b      	ldrh	r3, [r3, #8]
 8015984:	1ad3      	subs	r3, r2, r3
 8015986:	b29b      	uxth	r3, r3
 8015988:	2201      	movs	r2, #1
 801598a:	6939      	ldr	r1, [r7, #16]
 801598c:	f7fa fe52 	bl	8010634 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015990:	6a3b      	ldr	r3, [r7, #32]
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	4618      	mov	r0, r3
 8015998:	f7f9 f881 	bl	800ea9e <lwip_htonl>
 801599c:	4603      	mov	r3, r0
 801599e:	3301      	adds	r3, #1
 80159a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	1ad3      	subs	r3, r2, r3
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	da02      	bge.n	80159b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	68fa      	ldr	r2, [r7, #12]
 80159b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80159b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159b8:	2200      	movs	r2, #0
 80159ba:	69b9      	ldr	r1, [r7, #24]
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f7ff fdef 	bl	80155a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3304      	adds	r3, #4
 80159c8:	69b9      	ldr	r1, [r7, #24]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7ff fe26 	bl	801561c <tcp_output_control_segment>
 80159d0:	4603      	mov	r3, r0
 80159d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80159d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	372c      	adds	r7, #44	; 0x2c
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd90      	pop	{r4, r7, pc}
 80159e0:	0801cd78 	.word	0x0801cd78
 80159e4:	0801d570 	.word	0x0801d570
 80159e8:	0801cdcc 	.word	0x0801cdcc

080159ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80159f4:	f7fa ff0c 	bl	8010810 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80159f8:	4b0a      	ldr	r3, [pc, #40]	; (8015a24 <tcpip_tcp_timer+0x38>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d103      	bne.n	8015a08 <tcpip_tcp_timer+0x1c>
 8015a00:	4b09      	ldr	r3, [pc, #36]	; (8015a28 <tcpip_tcp_timer+0x3c>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d005      	beq.n	8015a14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015a08:	2200      	movs	r2, #0
 8015a0a:	4908      	ldr	r1, [pc, #32]	; (8015a2c <tcpip_tcp_timer+0x40>)
 8015a0c:	20fa      	movs	r0, #250	; 0xfa
 8015a0e:	f000 f8f3 	bl	8015bf8 <sys_timeout>
 8015a12:	e003      	b.n	8015a1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015a14:	4b06      	ldr	r3, [pc, #24]	; (8015a30 <tcpip_tcp_timer+0x44>)
 8015a16:	2200      	movs	r2, #0
 8015a18:	601a      	str	r2, [r3, #0]
  }
}
 8015a1a:	bf00      	nop
 8015a1c:	bf00      	nop
 8015a1e:	3708      	adds	r7, #8
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}
 8015a24:	20008004 	.word	0x20008004
 8015a28:	20008008 	.word	0x20008008
 8015a2c:	080159ed 	.word	0x080159ed
 8015a30:	20008050 	.word	0x20008050

08015a34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015a38:	4b0a      	ldr	r3, [pc, #40]	; (8015a64 <tcp_timer_needed+0x30>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d10f      	bne.n	8015a60 <tcp_timer_needed+0x2c>
 8015a40:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <tcp_timer_needed+0x34>)
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d103      	bne.n	8015a50 <tcp_timer_needed+0x1c>
 8015a48:	4b08      	ldr	r3, [pc, #32]	; (8015a6c <tcp_timer_needed+0x38>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d007      	beq.n	8015a60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015a50:	4b04      	ldr	r3, [pc, #16]	; (8015a64 <tcp_timer_needed+0x30>)
 8015a52:	2201      	movs	r2, #1
 8015a54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015a56:	2200      	movs	r2, #0
 8015a58:	4905      	ldr	r1, [pc, #20]	; (8015a70 <tcp_timer_needed+0x3c>)
 8015a5a:	20fa      	movs	r0, #250	; 0xfa
 8015a5c:	f000 f8cc 	bl	8015bf8 <sys_timeout>
  }
}
 8015a60:	bf00      	nop
 8015a62:	bd80      	pop	{r7, pc}
 8015a64:	20008050 	.word	0x20008050
 8015a68:	20008004 	.word	0x20008004
 8015a6c:	20008008 	.word	0x20008008
 8015a70:	080159ed 	.word	0x080159ed

08015a74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b086      	sub	sp, #24
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015a80:	2006      	movs	r0, #6
 8015a82:	f7f9 fd27 	bl	800f4d4 <memp_malloc>
 8015a86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d109      	bne.n	8015aa2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d151      	bne.n	8015b38 <sys_timeout_abs+0xc4>
 8015a94:	4b2a      	ldr	r3, [pc, #168]	; (8015b40 <sys_timeout_abs+0xcc>)
 8015a96:	22be      	movs	r2, #190	; 0xbe
 8015a98:	492a      	ldr	r1, [pc, #168]	; (8015b44 <sys_timeout_abs+0xd0>)
 8015a9a:	482b      	ldr	r0, [pc, #172]	; (8015b48 <sys_timeout_abs+0xd4>)
 8015a9c:	f003 faa2 	bl	8018fe4 <iprintf>
    return;
 8015aa0:	e04a      	b.n	8015b38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	68ba      	ldr	r2, [r7, #8]
 8015aac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015aba:	4b24      	ldr	r3, [pc, #144]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d103      	bne.n	8015aca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015ac2:	4a22      	ldr	r2, [pc, #136]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	6013      	str	r3, [r2, #0]
    return;
 8015ac8:	e037      	b.n	8015b3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	685a      	ldr	r2, [r3, #4]
 8015ace:	4b1f      	ldr	r3, [pc, #124]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	1ad3      	subs	r3, r2, r3
 8015ad6:	0fdb      	lsrs	r3, r3, #31
 8015ad8:	f003 0301 	and.w	r3, r3, #1
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d007      	beq.n	8015af2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015ae2:	4b1a      	ldr	r3, [pc, #104]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015aea:	4a18      	ldr	r2, [pc, #96]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	6013      	str	r3, [r2, #0]
 8015af0:	e023      	b.n	8015b3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015af2:	4b16      	ldr	r3, [pc, #88]	; (8015b4c <sys_timeout_abs+0xd8>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	617b      	str	r3, [r7, #20]
 8015af8:	e01a      	b.n	8015b30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d00b      	beq.n	8015b1a <sys_timeout_abs+0xa6>
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	685a      	ldr	r2, [r3, #4]
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	0fdb      	lsrs	r3, r3, #31
 8015b10:	f003 0301 	and.w	r3, r3, #1
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d007      	beq.n	8015b2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	693a      	ldr	r2, [r7, #16]
 8015b26:	601a      	str	r2, [r3, #0]
        break;
 8015b28:	e007      	b.n	8015b3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	617b      	str	r3, [r7, #20]
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d1e1      	bne.n	8015afa <sys_timeout_abs+0x86>
 8015b36:	e000      	b.n	8015b3a <sys_timeout_abs+0xc6>
    return;
 8015b38:	bf00      	nop
      }
    }
  }
}
 8015b3a:	3718      	adds	r7, #24
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	0801d594 	.word	0x0801d594
 8015b44:	0801d5c8 	.word	0x0801d5c8
 8015b48:	0801d608 	.word	0x0801d608
 8015b4c:	20008048 	.word	0x20008048

08015b50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	4798      	blx	r3

  now = sys_now();
 8015b62:	f7f8 fda7 	bl	800e6b4 <sys_now>
 8015b66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	4b0f      	ldr	r3, [pc, #60]	; (8015bac <lwip_cyclic_timer+0x5c>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4413      	add	r3, r2
 8015b72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015b74:	68fa      	ldr	r2, [r7, #12]
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	1ad3      	subs	r3, r2, r3
 8015b7a:	0fdb      	lsrs	r3, r3, #31
 8015b7c:	f003 0301 	and.w	r3, r3, #1
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d009      	beq.n	8015b9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	4413      	add	r3, r2
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	4907      	ldr	r1, [pc, #28]	; (8015bb0 <lwip_cyclic_timer+0x60>)
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ff ff6e 	bl	8015a74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015b98:	e004      	b.n	8015ba4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	4904      	ldr	r1, [pc, #16]	; (8015bb0 <lwip_cyclic_timer+0x60>)
 8015b9e:	68f8      	ldr	r0, [r7, #12]
 8015ba0:	f7ff ff68 	bl	8015a74 <sys_timeout_abs>
}
 8015ba4:	bf00      	nop
 8015ba6:	3718      	adds	r7, #24
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	2000804c 	.word	0x2000804c
 8015bb0:	08015b51 	.word	0x08015b51

08015bb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015bba:	2301      	movs	r3, #1
 8015bbc:	607b      	str	r3, [r7, #4]
 8015bbe:	e00e      	b.n	8015bde <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015bc0:	4a0b      	ldr	r2, [pc, #44]	; (8015bf0 <sys_timeouts_init+0x3c>)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	00db      	lsls	r3, r3, #3
 8015bcc:	4a08      	ldr	r2, [pc, #32]	; (8015bf0 <sys_timeouts_init+0x3c>)
 8015bce:	4413      	add	r3, r2
 8015bd0:	461a      	mov	r2, r3
 8015bd2:	4908      	ldr	r1, [pc, #32]	; (8015bf4 <sys_timeouts_init+0x40>)
 8015bd4:	f000 f810 	bl	8015bf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	607b      	str	r3, [r7, #4]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2b02      	cmp	r3, #2
 8015be2:	d9ed      	bls.n	8015bc0 <sys_timeouts_init+0xc>
  }
}
 8015be4:	bf00      	nop
 8015be6:	bf00      	nop
 8015be8:	3708      	adds	r7, #8
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	0801e1bc 	.word	0x0801e1bc
 8015bf4:	08015b51 	.word	0x08015b51

08015bf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	60b9      	str	r1, [r7, #8]
 8015c02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c0a:	d306      	bcc.n	8015c1a <sys_timeout+0x22>
 8015c0c:	4b0a      	ldr	r3, [pc, #40]	; (8015c38 <sys_timeout+0x40>)
 8015c0e:	f240 1229 	movw	r2, #297	; 0x129
 8015c12:	490a      	ldr	r1, [pc, #40]	; (8015c3c <sys_timeout+0x44>)
 8015c14:	480a      	ldr	r0, [pc, #40]	; (8015c40 <sys_timeout+0x48>)
 8015c16:	f003 f9e5 	bl	8018fe4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015c1a:	f7f8 fd4b 	bl	800e6b4 <sys_now>
 8015c1e:	4602      	mov	r2, r0
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	4413      	add	r3, r2
 8015c24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	68b9      	ldr	r1, [r7, #8]
 8015c2a:	6978      	ldr	r0, [r7, #20]
 8015c2c:	f7ff ff22 	bl	8015a74 <sys_timeout_abs>
#endif
}
 8015c30:	bf00      	nop
 8015c32:	3718      	adds	r7, #24
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	0801d594 	.word	0x0801d594
 8015c3c:	0801d630 	.word	0x0801d630
 8015c40:	0801d608 	.word	0x0801d608

08015c44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015c48:	f002 fca2 	bl	8018590 <rand>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	4b01      	ldr	r3, [pc, #4]	; (8015c64 <udp_init+0x20>)
 8015c5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c60:	bf00      	nop
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	2000005c 	.word	0x2000005c

08015c68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	4613      	mov	r3, r2
 8015c74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d105      	bne.n	8015c88 <udp_input_local_match+0x20>
 8015c7c:	4b27      	ldr	r3, [pc, #156]	; (8015d1c <udp_input_local_match+0xb4>)
 8015c7e:	2287      	movs	r2, #135	; 0x87
 8015c80:	4927      	ldr	r1, [pc, #156]	; (8015d20 <udp_input_local_match+0xb8>)
 8015c82:	4828      	ldr	r0, [pc, #160]	; (8015d24 <udp_input_local_match+0xbc>)
 8015c84:	f003 f9ae 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d105      	bne.n	8015c9a <udp_input_local_match+0x32>
 8015c8e:	4b23      	ldr	r3, [pc, #140]	; (8015d1c <udp_input_local_match+0xb4>)
 8015c90:	2288      	movs	r2, #136	; 0x88
 8015c92:	4925      	ldr	r1, [pc, #148]	; (8015d28 <udp_input_local_match+0xc0>)
 8015c94:	4823      	ldr	r0, [pc, #140]	; (8015d24 <udp_input_local_match+0xbc>)
 8015c96:	f003 f9a5 	bl	8018fe4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	7a1b      	ldrb	r3, [r3, #8]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d00b      	beq.n	8015cba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	7a1a      	ldrb	r2, [r3, #8]
 8015ca6:	4b21      	ldr	r3, [pc, #132]	; (8015d2c <udp_input_local_match+0xc4>)
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cae:	3301      	adds	r3, #1
 8015cb0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d001      	beq.n	8015cba <udp_input_local_match+0x52>
    return 0;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	e02b      	b.n	8015d12 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015cba:	79fb      	ldrb	r3, [r7, #7]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d018      	beq.n	8015cf2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d013      	beq.n	8015cee <udp_input_local_match+0x86>
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00f      	beq.n	8015cee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015cce:	4b17      	ldr	r3, [pc, #92]	; (8015d2c <udp_input_local_match+0xc4>)
 8015cd0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd6:	d00a      	beq.n	8015cee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681a      	ldr	r2, [r3, #0]
 8015cdc:	4b13      	ldr	r3, [pc, #76]	; (8015d2c <udp_input_local_match+0xc4>)
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	405a      	eors	r2, r3
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	3308      	adds	r3, #8
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d110      	bne.n	8015d10 <udp_input_local_match+0xa8>
          return 1;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	e00f      	b.n	8015d12 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d009      	beq.n	8015d0c <udp_input_local_match+0xa4>
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d005      	beq.n	8015d0c <udp_input_local_match+0xa4>
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	4b09      	ldr	r3, [pc, #36]	; (8015d2c <udp_input_local_match+0xc4>)
 8015d06:	695b      	ldr	r3, [r3, #20]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d101      	bne.n	8015d10 <udp_input_local_match+0xa8>
        return 1;
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	e000      	b.n	8015d12 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d10:	2300      	movs	r3, #0
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0801d67c 	.word	0x0801d67c
 8015d20:	0801d6ac 	.word	0x0801d6ac
 8015d24:	0801d6d0 	.word	0x0801d6d0
 8015d28:	0801d6f8 	.word	0x0801d6f8
 8015d2c:	200050dc 	.word	0x200050dc

08015d30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015d30:	b590      	push	{r4, r7, lr}
 8015d32:	b08d      	sub	sp, #52	; 0x34
 8015d34:	af02      	add	r7, sp, #8
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d105      	bne.n	8015d50 <udp_input+0x20>
 8015d44:	4b7c      	ldr	r3, [pc, #496]	; (8015f38 <udp_input+0x208>)
 8015d46:	22cf      	movs	r2, #207	; 0xcf
 8015d48:	497c      	ldr	r1, [pc, #496]	; (8015f3c <udp_input+0x20c>)
 8015d4a:	487d      	ldr	r0, [pc, #500]	; (8015f40 <udp_input+0x210>)
 8015d4c:	f003 f94a 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d105      	bne.n	8015d62 <udp_input+0x32>
 8015d56:	4b78      	ldr	r3, [pc, #480]	; (8015f38 <udp_input+0x208>)
 8015d58:	22d0      	movs	r2, #208	; 0xd0
 8015d5a:	497a      	ldr	r1, [pc, #488]	; (8015f44 <udp_input+0x214>)
 8015d5c:	4878      	ldr	r0, [pc, #480]	; (8015f40 <udp_input+0x210>)
 8015d5e:	f003 f941 	bl	8018fe4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	895b      	ldrh	r3, [r3, #10]
 8015d66:	2b07      	cmp	r3, #7
 8015d68:	d803      	bhi.n	8015d72 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7fa fa78 	bl	8010260 <pbuf_free>
    goto end;
 8015d70:	e0de      	b.n	8015f30 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015d78:	4b73      	ldr	r3, [pc, #460]	; (8015f48 <udp_input+0x218>)
 8015d7a:	695b      	ldr	r3, [r3, #20]
 8015d7c:	4a72      	ldr	r2, [pc, #456]	; (8015f48 <udp_input+0x218>)
 8015d7e:	6812      	ldr	r2, [r2, #0]
 8015d80:	4611      	mov	r1, r2
 8015d82:	4618      	mov	r0, r3
 8015d84:	f001 fcae 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	881b      	ldrh	r3, [r3, #0]
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7f8 fe6e 	bl	800ea74 <lwip_htons>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	885b      	ldrh	r3, [r3, #2]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7f8 fe66 	bl	800ea74 <lwip_htons>
 8015da8:	4603      	mov	r3, r0
 8015daa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015dac:	2300      	movs	r3, #0
 8015dae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015db0:	2300      	movs	r3, #0
 8015db2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015db4:	2300      	movs	r3, #0
 8015db6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015db8:	4b64      	ldr	r3, [pc, #400]	; (8015f4c <udp_input+0x21c>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8015dbe:	e054      	b.n	8015e6a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc2:	8a5b      	ldrh	r3, [r3, #18]
 8015dc4:	89fa      	ldrh	r2, [r7, #14]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d14a      	bne.n	8015e60 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015dca:	7cfb      	ldrb	r3, [r7, #19]
 8015dcc:	461a      	mov	r2, r3
 8015dce:	6839      	ldr	r1, [r7, #0]
 8015dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dd2:	f7ff ff49 	bl	8015c68 <udp_input_local_match>
 8015dd6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d041      	beq.n	8015e60 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	7c1b      	ldrb	r3, [r3, #16]
 8015de0:	f003 0304 	and.w	r3, r3, #4
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d11d      	bne.n	8015e24 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d102      	bne.n	8015df4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df0:	61fb      	str	r3, [r7, #28]
 8015df2:	e017      	b.n	8015e24 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015df4:	7cfb      	ldrb	r3, [r7, #19]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d014      	beq.n	8015e24 <udp_input+0xf4>
 8015dfa:	4b53      	ldr	r3, [pc, #332]	; (8015f48 <udp_input+0x218>)
 8015dfc:	695b      	ldr	r3, [r3, #20]
 8015dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e02:	d10f      	bne.n	8015e24 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d008      	beq.n	8015e24 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e14:	681a      	ldr	r2, [r3, #0]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	3304      	adds	r3, #4
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d101      	bne.n	8015e24 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e22:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e26:	8a9b      	ldrh	r3, [r3, #20]
 8015e28:	8a3a      	ldrh	r2, [r7, #16]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d118      	bne.n	8015e60 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e30:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d005      	beq.n	8015e42 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e38:	685a      	ldr	r2, [r3, #4]
 8015e3a:	4b43      	ldr	r3, [pc, #268]	; (8015f48 <udp_input+0x218>)
 8015e3c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d10e      	bne.n	8015e60 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015e42:	6a3b      	ldr	r3, [r7, #32]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d014      	beq.n	8015e72 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	68da      	ldr	r2, [r3, #12]
 8015e4c:	6a3b      	ldr	r3, [r7, #32]
 8015e4e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015e50:	4b3e      	ldr	r3, [pc, #248]	; (8015f4c <udp_input+0x21c>)
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e56:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015e58:	4a3c      	ldr	r2, [pc, #240]	; (8015f4c <udp_input+0x21c>)
 8015e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015e5e:	e008      	b.n	8015e72 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e62:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	627b      	str	r3, [r7, #36]	; 0x24
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d1a7      	bne.n	8015dc0 <udp_input+0x90>
 8015e70:	e000      	b.n	8015e74 <udp_input+0x144>
        break;
 8015e72:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d101      	bne.n	8015e7e <udp_input+0x14e>
    pcb = uncon_pcb;
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d002      	beq.n	8015e8a <udp_input+0x15a>
    for_us = 1;
 8015e84:	2301      	movs	r3, #1
 8015e86:	76fb      	strb	r3, [r7, #27]
 8015e88:	e00a      	b.n	8015ea0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	4b2d      	ldr	r3, [pc, #180]	; (8015f48 <udp_input+0x218>)
 8015e92:	695b      	ldr	r3, [r3, #20]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	bf0c      	ite	eq
 8015e98:	2301      	moveq	r3, #1
 8015e9a:	2300      	movne	r3, #0
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015ea0:	7efb      	ldrb	r3, [r7, #27]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d041      	beq.n	8015f2a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015ea6:	2108      	movs	r1, #8
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7fa f953 	bl	8010154 <pbuf_remove_header>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00a      	beq.n	8015eca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015eb4:	4b20      	ldr	r3, [pc, #128]	; (8015f38 <udp_input+0x208>)
 8015eb6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015eba:	4925      	ldr	r1, [pc, #148]	; (8015f50 <udp_input+0x220>)
 8015ebc:	4820      	ldr	r0, [pc, #128]	; (8015f40 <udp_input+0x210>)
 8015ebe:	f003 f891 	bl	8018fe4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f7fa f9cc 	bl	8010260 <pbuf_free>
      goto end;
 8015ec8:	e032      	b.n	8015f30 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d012      	beq.n	8015ef6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	699b      	ldr	r3, [r3, #24]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d00a      	beq.n	8015eee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eda:	699c      	ldr	r4, [r3, #24]
 8015edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ede:	69d8      	ldr	r0, [r3, #28]
 8015ee0:	8a3b      	ldrh	r3, [r7, #16]
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	4b1b      	ldr	r3, [pc, #108]	; (8015f54 <udp_input+0x224>)
 8015ee6:	687a      	ldr	r2, [r7, #4]
 8015ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015eea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015eec:	e021      	b.n	8015f32 <udp_input+0x202>
        pbuf_free(p);
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7fa f9b6 	bl	8010260 <pbuf_free>
        goto end;
 8015ef4:	e01c      	b.n	8015f30 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015ef6:	7cfb      	ldrb	r3, [r7, #19]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d112      	bne.n	8015f22 <udp_input+0x1f2>
 8015efc:	4b12      	ldr	r3, [pc, #72]	; (8015f48 <udp_input+0x218>)
 8015efe:	695b      	ldr	r3, [r3, #20]
 8015f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f04:	2be0      	cmp	r3, #224	; 0xe0
 8015f06:	d00c      	beq.n	8015f22 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f08:	4b0f      	ldr	r3, [pc, #60]	; (8015f48 <udp_input+0x218>)
 8015f0a:	899b      	ldrh	r3, [r3, #12]
 8015f0c:	3308      	adds	r3, #8
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	b21b      	sxth	r3, r3
 8015f12:	4619      	mov	r1, r3
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7fa f990 	bl	801023a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015f1a:	2103      	movs	r1, #3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f001 f8b7 	bl	8017090 <icmp_dest_unreach>
      pbuf_free(p);
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7fa f99c 	bl	8010260 <pbuf_free>
  return;
 8015f28:	e003      	b.n	8015f32 <udp_input+0x202>
    pbuf_free(p);
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7fa f998 	bl	8010260 <pbuf_free>
  return;
 8015f30:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015f32:	372c      	adds	r7, #44	; 0x2c
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd90      	pop	{r4, r7, pc}
 8015f38:	0801d67c 	.word	0x0801d67c
 8015f3c:	0801d720 	.word	0x0801d720
 8015f40:	0801d6d0 	.word	0x0801d6d0
 8015f44:	0801d738 	.word	0x0801d738
 8015f48:	200050dc 	.word	0x200050dc
 8015f4c:	20008054 	.word	0x20008054
 8015f50:	0801d754 	.word	0x0801d754
 8015f54:	200050ec 	.word	0x200050ec

08015f58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b085      	sub	sp, #20
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d01e      	beq.n	8015fa6 <udp_netif_ip_addr_changed+0x4e>
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d01a      	beq.n	8015fa6 <udp_netif_ip_addr_changed+0x4e>
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d017      	beq.n	8015fa6 <udp_netif_ip_addr_changed+0x4e>
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d013      	beq.n	8015fa6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015f7e:	4b0d      	ldr	r3, [pc, #52]	; (8015fb4 <udp_netif_ip_addr_changed+0x5c>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	60fb      	str	r3, [r7, #12]
 8015f84:	e00c      	b.n	8015fa0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	681a      	ldr	r2, [r3, #0]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d103      	bne.n	8015f9a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	681a      	ldr	r2, [r3, #0]
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	60fb      	str	r3, [r7, #12]
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d1ef      	bne.n	8015f86 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015fa6:	bf00      	nop
 8015fa8:	3714      	adds	r7, #20
 8015faa:	46bd      	mov	sp, r7
 8015fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop
 8015fb4:	20008054 	.word	0x20008054

08015fb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015fc0:	4915      	ldr	r1, [pc, #84]	; (8016018 <etharp_free_entry+0x60>)
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	005b      	lsls	r3, r3, #1
 8015fc8:	4413      	add	r3, r2
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	440b      	add	r3, r1
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d013      	beq.n	8015ffc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015fd4:	4910      	ldr	r1, [pc, #64]	; (8016018 <etharp_free_entry+0x60>)
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	4413      	add	r3, r2
 8015fde:	00db      	lsls	r3, r3, #3
 8015fe0:	440b      	add	r3, r1
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7fa f93b 	bl	8010260 <pbuf_free>
    arp_table[i].q = NULL;
 8015fea:	490b      	ldr	r1, [pc, #44]	; (8016018 <etharp_free_entry+0x60>)
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	4613      	mov	r3, r2
 8015ff0:	005b      	lsls	r3, r3, #1
 8015ff2:	4413      	add	r3, r2
 8015ff4:	00db      	lsls	r3, r3, #3
 8015ff6:	440b      	add	r3, r1
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015ffc:	4906      	ldr	r1, [pc, #24]	; (8016018 <etharp_free_entry+0x60>)
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	4613      	mov	r3, r2
 8016002:	005b      	lsls	r3, r3, #1
 8016004:	4413      	add	r3, r2
 8016006:	00db      	lsls	r3, r3, #3
 8016008:	440b      	add	r3, r1
 801600a:	3314      	adds	r3, #20
 801600c:	2200      	movs	r2, #0
 801600e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016010:	bf00      	nop
 8016012:	3708      	adds	r7, #8
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}
 8016018:	20008058 	.word	0x20008058

0801601c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016022:	2300      	movs	r3, #0
 8016024:	607b      	str	r3, [r7, #4]
 8016026:	e096      	b.n	8016156 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016028:	494f      	ldr	r1, [pc, #316]	; (8016168 <etharp_tmr+0x14c>)
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	4613      	mov	r3, r2
 801602e:	005b      	lsls	r3, r3, #1
 8016030:	4413      	add	r3, r2
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	440b      	add	r3, r1
 8016036:	3314      	adds	r3, #20
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801603c:	78fb      	ldrb	r3, [r7, #3]
 801603e:	2b00      	cmp	r3, #0
 8016040:	f000 8086 	beq.w	8016150 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016044:	4948      	ldr	r1, [pc, #288]	; (8016168 <etharp_tmr+0x14c>)
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	4613      	mov	r3, r2
 801604a:	005b      	lsls	r3, r3, #1
 801604c:	4413      	add	r3, r2
 801604e:	00db      	lsls	r3, r3, #3
 8016050:	440b      	add	r3, r1
 8016052:	3312      	adds	r3, #18
 8016054:	881b      	ldrh	r3, [r3, #0]
 8016056:	3301      	adds	r3, #1
 8016058:	b298      	uxth	r0, r3
 801605a:	4943      	ldr	r1, [pc, #268]	; (8016168 <etharp_tmr+0x14c>)
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	4613      	mov	r3, r2
 8016060:	005b      	lsls	r3, r3, #1
 8016062:	4413      	add	r3, r2
 8016064:	00db      	lsls	r3, r3, #3
 8016066:	440b      	add	r3, r1
 8016068:	3312      	adds	r3, #18
 801606a:	4602      	mov	r2, r0
 801606c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801606e:	493e      	ldr	r1, [pc, #248]	; (8016168 <etharp_tmr+0x14c>)
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	4613      	mov	r3, r2
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	4413      	add	r3, r2
 8016078:	00db      	lsls	r3, r3, #3
 801607a:	440b      	add	r3, r1
 801607c:	3312      	adds	r3, #18
 801607e:	881b      	ldrh	r3, [r3, #0]
 8016080:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016084:	d215      	bcs.n	80160b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016086:	4938      	ldr	r1, [pc, #224]	; (8016168 <etharp_tmr+0x14c>)
 8016088:	687a      	ldr	r2, [r7, #4]
 801608a:	4613      	mov	r3, r2
 801608c:	005b      	lsls	r3, r3, #1
 801608e:	4413      	add	r3, r2
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	440b      	add	r3, r1
 8016094:	3314      	adds	r3, #20
 8016096:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016098:	2b01      	cmp	r3, #1
 801609a:	d10e      	bne.n	80160ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801609c:	4932      	ldr	r1, [pc, #200]	; (8016168 <etharp_tmr+0x14c>)
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	4613      	mov	r3, r2
 80160a2:	005b      	lsls	r3, r3, #1
 80160a4:	4413      	add	r3, r2
 80160a6:	00db      	lsls	r3, r3, #3
 80160a8:	440b      	add	r3, r1
 80160aa:	3312      	adds	r3, #18
 80160ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160ae:	2b04      	cmp	r3, #4
 80160b0:	d903      	bls.n	80160ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7ff ff80 	bl	8015fb8 <etharp_free_entry>
 80160b8:	e04a      	b.n	8016150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80160ba:	492b      	ldr	r1, [pc, #172]	; (8016168 <etharp_tmr+0x14c>)
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	4613      	mov	r3, r2
 80160c0:	005b      	lsls	r3, r3, #1
 80160c2:	4413      	add	r3, r2
 80160c4:	00db      	lsls	r3, r3, #3
 80160c6:	440b      	add	r3, r1
 80160c8:	3314      	adds	r3, #20
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	2b03      	cmp	r3, #3
 80160ce:	d10a      	bne.n	80160e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80160d0:	4925      	ldr	r1, [pc, #148]	; (8016168 <etharp_tmr+0x14c>)
 80160d2:	687a      	ldr	r2, [r7, #4]
 80160d4:	4613      	mov	r3, r2
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	4413      	add	r3, r2
 80160da:	00db      	lsls	r3, r3, #3
 80160dc:	440b      	add	r3, r1
 80160de:	3314      	adds	r3, #20
 80160e0:	2204      	movs	r2, #4
 80160e2:	701a      	strb	r2, [r3, #0]
 80160e4:	e034      	b.n	8016150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80160e6:	4920      	ldr	r1, [pc, #128]	; (8016168 <etharp_tmr+0x14c>)
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	4613      	mov	r3, r2
 80160ec:	005b      	lsls	r3, r3, #1
 80160ee:	4413      	add	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	440b      	add	r3, r1
 80160f4:	3314      	adds	r3, #20
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b04      	cmp	r3, #4
 80160fa:	d10a      	bne.n	8016112 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80160fc:	491a      	ldr	r1, [pc, #104]	; (8016168 <etharp_tmr+0x14c>)
 80160fe:	687a      	ldr	r2, [r7, #4]
 8016100:	4613      	mov	r3, r2
 8016102:	005b      	lsls	r3, r3, #1
 8016104:	4413      	add	r3, r2
 8016106:	00db      	lsls	r3, r3, #3
 8016108:	440b      	add	r3, r1
 801610a:	3314      	adds	r3, #20
 801610c:	2202      	movs	r2, #2
 801610e:	701a      	strb	r2, [r3, #0]
 8016110:	e01e      	b.n	8016150 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016112:	4915      	ldr	r1, [pc, #84]	; (8016168 <etharp_tmr+0x14c>)
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	4613      	mov	r3, r2
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	440b      	add	r3, r1
 8016120:	3314      	adds	r3, #20
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	2b01      	cmp	r3, #1
 8016126:	d113      	bne.n	8016150 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016128:	490f      	ldr	r1, [pc, #60]	; (8016168 <etharp_tmr+0x14c>)
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	4613      	mov	r3, r2
 801612e:	005b      	lsls	r3, r3, #1
 8016130:	4413      	add	r3, r2
 8016132:	00db      	lsls	r3, r3, #3
 8016134:	440b      	add	r3, r1
 8016136:	3308      	adds	r3, #8
 8016138:	6818      	ldr	r0, [r3, #0]
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	4613      	mov	r3, r2
 801613e:	005b      	lsls	r3, r3, #1
 8016140:	4413      	add	r3, r2
 8016142:	00db      	lsls	r3, r3, #3
 8016144:	4a08      	ldr	r2, [pc, #32]	; (8016168 <etharp_tmr+0x14c>)
 8016146:	4413      	add	r3, r2
 8016148:	3304      	adds	r3, #4
 801614a:	4619      	mov	r1, r3
 801614c:	f000 fe6e 	bl	8016e2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	3301      	adds	r3, #1
 8016154:	607b      	str	r3, [r7, #4]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2b09      	cmp	r3, #9
 801615a:	f77f af65 	ble.w	8016028 <etharp_tmr+0xc>
      }
    }
  }
}
 801615e:	bf00      	nop
 8016160:	bf00      	nop
 8016162:	3708      	adds	r7, #8
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}
 8016168:	20008058 	.word	0x20008058

0801616c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b08a      	sub	sp, #40	; 0x28
 8016170:	af00      	add	r7, sp, #0
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	460b      	mov	r3, r1
 8016176:	607a      	str	r2, [r7, #4]
 8016178:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801617a:	230a      	movs	r3, #10
 801617c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801617e:	230a      	movs	r3, #10
 8016180:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016182:	230a      	movs	r3, #10
 8016184:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016186:	2300      	movs	r3, #0
 8016188:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801618a:	230a      	movs	r3, #10
 801618c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801618e:	2300      	movs	r3, #0
 8016190:	83bb      	strh	r3, [r7, #28]
 8016192:	2300      	movs	r3, #0
 8016194:	837b      	strh	r3, [r7, #26]
 8016196:	2300      	movs	r3, #0
 8016198:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801619a:	2300      	movs	r3, #0
 801619c:	843b      	strh	r3, [r7, #32]
 801619e:	e0ae      	b.n	80162fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80161a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161a4:	49a6      	ldr	r1, [pc, #664]	; (8016440 <etharp_find_entry+0x2d4>)
 80161a6:	4613      	mov	r3, r2
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	4413      	add	r3, r2
 80161ac:	00db      	lsls	r3, r3, #3
 80161ae:	440b      	add	r3, r1
 80161b0:	3314      	adds	r3, #20
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80161b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161ba:	2b0a      	cmp	r3, #10
 80161bc:	d105      	bne.n	80161ca <etharp_find_entry+0x5e>
 80161be:	7dfb      	ldrb	r3, [r7, #23]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d102      	bne.n	80161ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80161c4:	8c3b      	ldrh	r3, [r7, #32]
 80161c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80161c8:	e095      	b.n	80162f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80161ca:	7dfb      	ldrb	r3, [r7, #23]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	f000 8092 	beq.w	80162f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80161d2:	7dfb      	ldrb	r3, [r7, #23]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d009      	beq.n	80161ec <etharp_find_entry+0x80>
 80161d8:	7dfb      	ldrb	r3, [r7, #23]
 80161da:	2b01      	cmp	r3, #1
 80161dc:	d806      	bhi.n	80161ec <etharp_find_entry+0x80>
 80161de:	4b99      	ldr	r3, [pc, #612]	; (8016444 <etharp_find_entry+0x2d8>)
 80161e0:	f240 1223 	movw	r2, #291	; 0x123
 80161e4:	4998      	ldr	r1, [pc, #608]	; (8016448 <etharp_find_entry+0x2dc>)
 80161e6:	4899      	ldr	r0, [pc, #612]	; (801644c <etharp_find_entry+0x2e0>)
 80161e8:	f002 fefc 	bl	8018fe4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d020      	beq.n	8016234 <etharp_find_entry+0xc8>
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	6819      	ldr	r1, [r3, #0]
 80161f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161fa:	4891      	ldr	r0, [pc, #580]	; (8016440 <etharp_find_entry+0x2d4>)
 80161fc:	4613      	mov	r3, r2
 80161fe:	005b      	lsls	r3, r3, #1
 8016200:	4413      	add	r3, r2
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	4403      	add	r3, r0
 8016206:	3304      	adds	r3, #4
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4299      	cmp	r1, r3
 801620c:	d112      	bne.n	8016234 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d00c      	beq.n	801622e <etharp_find_entry+0xc2>
 8016214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016218:	4989      	ldr	r1, [pc, #548]	; (8016440 <etharp_find_entry+0x2d4>)
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	440b      	add	r3, r1
 8016224:	3308      	adds	r3, #8
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	429a      	cmp	r2, r3
 801622c:	d102      	bne.n	8016234 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801622e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016232:	e100      	b.n	8016436 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016234:	7dfb      	ldrb	r3, [r7, #23]
 8016236:	2b01      	cmp	r3, #1
 8016238:	d140      	bne.n	80162bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801623a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801623e:	4980      	ldr	r1, [pc, #512]	; (8016440 <etharp_find_entry+0x2d4>)
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	440b      	add	r3, r1
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d01a      	beq.n	8016286 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016254:	497a      	ldr	r1, [pc, #488]	; (8016440 <etharp_find_entry+0x2d4>)
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	440b      	add	r3, r1
 8016260:	3312      	adds	r3, #18
 8016262:	881b      	ldrh	r3, [r3, #0]
 8016264:	8bba      	ldrh	r2, [r7, #28]
 8016266:	429a      	cmp	r2, r3
 8016268:	d845      	bhi.n	80162f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801626a:	8c3b      	ldrh	r3, [r7, #32]
 801626c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801626e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016272:	4973      	ldr	r1, [pc, #460]	; (8016440 <etharp_find_entry+0x2d4>)
 8016274:	4613      	mov	r3, r2
 8016276:	005b      	lsls	r3, r3, #1
 8016278:	4413      	add	r3, r2
 801627a:	00db      	lsls	r3, r3, #3
 801627c:	440b      	add	r3, r1
 801627e:	3312      	adds	r3, #18
 8016280:	881b      	ldrh	r3, [r3, #0]
 8016282:	83bb      	strh	r3, [r7, #28]
 8016284:	e037      	b.n	80162f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801628a:	496d      	ldr	r1, [pc, #436]	; (8016440 <etharp_find_entry+0x2d4>)
 801628c:	4613      	mov	r3, r2
 801628e:	005b      	lsls	r3, r3, #1
 8016290:	4413      	add	r3, r2
 8016292:	00db      	lsls	r3, r3, #3
 8016294:	440b      	add	r3, r1
 8016296:	3312      	adds	r3, #18
 8016298:	881b      	ldrh	r3, [r3, #0]
 801629a:	8b7a      	ldrh	r2, [r7, #26]
 801629c:	429a      	cmp	r2, r3
 801629e:	d82a      	bhi.n	80162f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80162a0:	8c3b      	ldrh	r3, [r7, #32]
 80162a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80162a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162a8:	4965      	ldr	r1, [pc, #404]	; (8016440 <etharp_find_entry+0x2d4>)
 80162aa:	4613      	mov	r3, r2
 80162ac:	005b      	lsls	r3, r3, #1
 80162ae:	4413      	add	r3, r2
 80162b0:	00db      	lsls	r3, r3, #3
 80162b2:	440b      	add	r3, r1
 80162b4:	3312      	adds	r3, #18
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	837b      	strh	r3, [r7, #26]
 80162ba:	e01c      	b.n	80162f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162bc:	7dfb      	ldrb	r3, [r7, #23]
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d919      	bls.n	80162f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162c6:	495e      	ldr	r1, [pc, #376]	; (8016440 <etharp_find_entry+0x2d4>)
 80162c8:	4613      	mov	r3, r2
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4413      	add	r3, r2
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	440b      	add	r3, r1
 80162d2:	3312      	adds	r3, #18
 80162d4:	881b      	ldrh	r3, [r3, #0]
 80162d6:	8b3a      	ldrh	r2, [r7, #24]
 80162d8:	429a      	cmp	r2, r3
 80162da:	d80c      	bhi.n	80162f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80162dc:	8c3b      	ldrh	r3, [r7, #32]
 80162de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80162e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162e4:	4956      	ldr	r1, [pc, #344]	; (8016440 <etharp_find_entry+0x2d4>)
 80162e6:	4613      	mov	r3, r2
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4413      	add	r3, r2
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	440b      	add	r3, r1
 80162f0:	3312      	adds	r3, #18
 80162f2:	881b      	ldrh	r3, [r3, #0]
 80162f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162f6:	8c3b      	ldrh	r3, [r7, #32]
 80162f8:	3301      	adds	r3, #1
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	843b      	strh	r3, [r7, #32]
 80162fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016302:	2b09      	cmp	r3, #9
 8016304:	f77f af4c 	ble.w	80161a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016308:	7afb      	ldrb	r3, [r7, #11]
 801630a:	f003 0302 	and.w	r3, r3, #2
 801630e:	2b00      	cmp	r3, #0
 8016310:	d108      	bne.n	8016324 <etharp_find_entry+0x1b8>
 8016312:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016316:	2b0a      	cmp	r3, #10
 8016318:	d107      	bne.n	801632a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801631a:	7afb      	ldrb	r3, [r7, #11]
 801631c:	f003 0301 	and.w	r3, r3, #1
 8016320:	2b00      	cmp	r3, #0
 8016322:	d102      	bne.n	801632a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016324:	f04f 33ff 	mov.w	r3, #4294967295
 8016328:	e085      	b.n	8016436 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801632a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801632e:	2b09      	cmp	r3, #9
 8016330:	dc02      	bgt.n	8016338 <etharp_find_entry+0x1cc>
    i = empty;
 8016332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016334:	843b      	strh	r3, [r7, #32]
 8016336:	e039      	b.n	80163ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016338:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801633c:	2b09      	cmp	r3, #9
 801633e:	dc14      	bgt.n	801636a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016342:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016348:	493d      	ldr	r1, [pc, #244]	; (8016440 <etharp_find_entry+0x2d4>)
 801634a:	4613      	mov	r3, r2
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4413      	add	r3, r2
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	440b      	add	r3, r1
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d018      	beq.n	801638c <etharp_find_entry+0x220>
 801635a:	4b3a      	ldr	r3, [pc, #232]	; (8016444 <etharp_find_entry+0x2d8>)
 801635c:	f240 126d 	movw	r2, #365	; 0x16d
 8016360:	493b      	ldr	r1, [pc, #236]	; (8016450 <etharp_find_entry+0x2e4>)
 8016362:	483a      	ldr	r0, [pc, #232]	; (801644c <etharp_find_entry+0x2e0>)
 8016364:	f002 fe3e 	bl	8018fe4 <iprintf>
 8016368:	e010      	b.n	801638c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801636a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801636e:	2b09      	cmp	r3, #9
 8016370:	dc02      	bgt.n	8016378 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016374:	843b      	strh	r3, [r7, #32]
 8016376:	e009      	b.n	801638c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016378:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801637c:	2b09      	cmp	r3, #9
 801637e:	dc02      	bgt.n	8016386 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016380:	8bfb      	ldrh	r3, [r7, #30]
 8016382:	843b      	strh	r3, [r7, #32]
 8016384:	e002      	b.n	801638c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016386:	f04f 33ff 	mov.w	r3, #4294967295
 801638a:	e054      	b.n	8016436 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801638c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016390:	2b09      	cmp	r3, #9
 8016392:	dd06      	ble.n	80163a2 <etharp_find_entry+0x236>
 8016394:	4b2b      	ldr	r3, [pc, #172]	; (8016444 <etharp_find_entry+0x2d8>)
 8016396:	f240 127f 	movw	r2, #383	; 0x17f
 801639a:	492e      	ldr	r1, [pc, #184]	; (8016454 <etharp_find_entry+0x2e8>)
 801639c:	482b      	ldr	r0, [pc, #172]	; (801644c <etharp_find_entry+0x2e0>)
 801639e:	f002 fe21 	bl	8018fe4 <iprintf>
    etharp_free_entry(i);
 80163a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7ff fe06 	bl	8015fb8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163b0:	2b09      	cmp	r3, #9
 80163b2:	dd06      	ble.n	80163c2 <etharp_find_entry+0x256>
 80163b4:	4b23      	ldr	r3, [pc, #140]	; (8016444 <etharp_find_entry+0x2d8>)
 80163b6:	f240 1283 	movw	r2, #387	; 0x183
 80163ba:	4926      	ldr	r1, [pc, #152]	; (8016454 <etharp_find_entry+0x2e8>)
 80163bc:	4823      	ldr	r0, [pc, #140]	; (801644c <etharp_find_entry+0x2e0>)
 80163be:	f002 fe11 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163c6:	491e      	ldr	r1, [pc, #120]	; (8016440 <etharp_find_entry+0x2d4>)
 80163c8:	4613      	mov	r3, r2
 80163ca:	005b      	lsls	r3, r3, #1
 80163cc:	4413      	add	r3, r2
 80163ce:	00db      	lsls	r3, r3, #3
 80163d0:	440b      	add	r3, r1
 80163d2:	3314      	adds	r3, #20
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d006      	beq.n	80163e8 <etharp_find_entry+0x27c>
 80163da:	4b1a      	ldr	r3, [pc, #104]	; (8016444 <etharp_find_entry+0x2d8>)
 80163dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80163e0:	491d      	ldr	r1, [pc, #116]	; (8016458 <etharp_find_entry+0x2ec>)
 80163e2:	481a      	ldr	r0, [pc, #104]	; (801644c <etharp_find_entry+0x2e0>)
 80163e4:	f002 fdfe 	bl	8018fe4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d00b      	beq.n	8016406 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80163ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	6819      	ldr	r1, [r3, #0]
 80163f6:	4812      	ldr	r0, [pc, #72]	; (8016440 <etharp_find_entry+0x2d4>)
 80163f8:	4613      	mov	r3, r2
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	4413      	add	r3, r2
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	4403      	add	r3, r0
 8016402:	3304      	adds	r3, #4
 8016404:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801640a:	490d      	ldr	r1, [pc, #52]	; (8016440 <etharp_find_entry+0x2d4>)
 801640c:	4613      	mov	r3, r2
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	4413      	add	r3, r2
 8016412:	00db      	lsls	r3, r3, #3
 8016414:	440b      	add	r3, r1
 8016416:	3312      	adds	r3, #18
 8016418:	2200      	movs	r2, #0
 801641a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801641c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016420:	4907      	ldr	r1, [pc, #28]	; (8016440 <etharp_find_entry+0x2d4>)
 8016422:	4613      	mov	r3, r2
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4413      	add	r3, r2
 8016428:	00db      	lsls	r3, r3, #3
 801642a:	440b      	add	r3, r1
 801642c:	3308      	adds	r3, #8
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016436:	4618      	mov	r0, r3
 8016438:	3728      	adds	r7, #40	; 0x28
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	20008058 	.word	0x20008058
 8016444:	0801d9e0 	.word	0x0801d9e0
 8016448:	0801da18 	.word	0x0801da18
 801644c:	0801da58 	.word	0x0801da58
 8016450:	0801da80 	.word	0x0801da80
 8016454:	0801da98 	.word	0x0801da98
 8016458:	0801daac 	.word	0x0801daac

0801645c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b088      	sub	sp, #32
 8016460:	af02      	add	r7, sp, #8
 8016462:	60f8      	str	r0, [r7, #12]
 8016464:	60b9      	str	r1, [r7, #8]
 8016466:	607a      	str	r2, [r7, #4]
 8016468:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016470:	2b06      	cmp	r3, #6
 8016472:	d006      	beq.n	8016482 <etharp_update_arp_entry+0x26>
 8016474:	4b48      	ldr	r3, [pc, #288]	; (8016598 <etharp_update_arp_entry+0x13c>)
 8016476:	f240 12a9 	movw	r2, #425	; 0x1a9
 801647a:	4948      	ldr	r1, [pc, #288]	; (801659c <etharp_update_arp_entry+0x140>)
 801647c:	4848      	ldr	r0, [pc, #288]	; (80165a0 <etharp_update_arp_entry+0x144>)
 801647e:	f002 fdb1 	bl	8018fe4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d012      	beq.n	80164ae <etharp_update_arp_entry+0x52>
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00e      	beq.n	80164ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	68f9      	ldr	r1, [r7, #12]
 8016496:	4618      	mov	r0, r3
 8016498:	f001 f924 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 801649c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d105      	bne.n	80164ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164aa:	2be0      	cmp	r3, #224	; 0xe0
 80164ac:	d102      	bne.n	80164b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164ae:	f06f 030f 	mvn.w	r3, #15
 80164b2:	e06c      	b.n	801658e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80164b4:	78fb      	ldrb	r3, [r7, #3]
 80164b6:	68fa      	ldr	r2, [r7, #12]
 80164b8:	4619      	mov	r1, r3
 80164ba:	68b8      	ldr	r0, [r7, #8]
 80164bc:	f7ff fe56 	bl	801616c <etharp_find_entry>
 80164c0:	4603      	mov	r3, r0
 80164c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80164c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	da02      	bge.n	80164d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80164cc:	8afb      	ldrh	r3, [r7, #22]
 80164ce:	b25b      	sxtb	r3, r3
 80164d0:	e05d      	b.n	801658e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80164d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164d6:	4933      	ldr	r1, [pc, #204]	; (80165a4 <etharp_update_arp_entry+0x148>)
 80164d8:	4613      	mov	r3, r2
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	4413      	add	r3, r2
 80164de:	00db      	lsls	r3, r3, #3
 80164e0:	440b      	add	r3, r1
 80164e2:	3314      	adds	r3, #20
 80164e4:	2202      	movs	r2, #2
 80164e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80164e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164ec:	492d      	ldr	r1, [pc, #180]	; (80165a4 <etharp_update_arp_entry+0x148>)
 80164ee:	4613      	mov	r3, r2
 80164f0:	005b      	lsls	r3, r3, #1
 80164f2:	4413      	add	r3, r2
 80164f4:	00db      	lsls	r3, r3, #3
 80164f6:	440b      	add	r3, r1
 80164f8:	3308      	adds	r3, #8
 80164fa:	68fa      	ldr	r2, [r7, #12]
 80164fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80164fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016502:	4613      	mov	r3, r2
 8016504:	005b      	lsls	r3, r3, #1
 8016506:	4413      	add	r3, r2
 8016508:	00db      	lsls	r3, r3, #3
 801650a:	3308      	adds	r3, #8
 801650c:	4a25      	ldr	r2, [pc, #148]	; (80165a4 <etharp_update_arp_entry+0x148>)
 801650e:	4413      	add	r3, r2
 8016510:	3304      	adds	r3, #4
 8016512:	2206      	movs	r2, #6
 8016514:	6879      	ldr	r1, [r7, #4]
 8016516:	4618      	mov	r0, r3
 8016518:	f002 ff32 	bl	8019380 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801651c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016520:	4920      	ldr	r1, [pc, #128]	; (80165a4 <etharp_update_arp_entry+0x148>)
 8016522:	4613      	mov	r3, r2
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	440b      	add	r3, r1
 801652c:	3312      	adds	r3, #18
 801652e:	2200      	movs	r2, #0
 8016530:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016532:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016536:	491b      	ldr	r1, [pc, #108]	; (80165a4 <etharp_update_arp_entry+0x148>)
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	440b      	add	r3, r1
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d021      	beq.n	801658c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016548:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801654c:	4915      	ldr	r1, [pc, #84]	; (80165a4 <etharp_update_arp_entry+0x148>)
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801655c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016560:	4910      	ldr	r1, [pc, #64]	; (80165a4 <etharp_update_arp_entry+0x148>)
 8016562:	4613      	mov	r3, r2
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	4413      	add	r3, r2
 8016568:	00db      	lsls	r3, r3, #3
 801656a:	440b      	add	r3, r1
 801656c:	2200      	movs	r2, #0
 801656e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6939      	ldr	r1, [r7, #16]
 8016580:	68f8      	ldr	r0, [r7, #12]
 8016582:	f001 ffbd 	bl	8018500 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016586:	6938      	ldr	r0, [r7, #16]
 8016588:	f7f9 fe6a 	bl	8010260 <pbuf_free>
  }
  return ERR_OK;
 801658c:	2300      	movs	r3, #0
}
 801658e:	4618      	mov	r0, r3
 8016590:	3718      	adds	r7, #24
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	0801d9e0 	.word	0x0801d9e0
 801659c:	0801dad8 	.word	0x0801dad8
 80165a0:	0801da58 	.word	0x0801da58
 80165a4:	20008058 	.word	0x20008058

080165a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165b0:	2300      	movs	r3, #0
 80165b2:	60fb      	str	r3, [r7, #12]
 80165b4:	e01e      	b.n	80165f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80165b6:	4913      	ldr	r1, [pc, #76]	; (8016604 <etharp_cleanup_netif+0x5c>)
 80165b8:	68fa      	ldr	r2, [r7, #12]
 80165ba:	4613      	mov	r3, r2
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4413      	add	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	440b      	add	r3, r1
 80165c4:	3314      	adds	r3, #20
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80165ca:	7afb      	ldrb	r3, [r7, #11]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d00e      	beq.n	80165ee <etharp_cleanup_netif+0x46>
 80165d0:	490c      	ldr	r1, [pc, #48]	; (8016604 <etharp_cleanup_netif+0x5c>)
 80165d2:	68fa      	ldr	r2, [r7, #12]
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3308      	adds	r3, #8
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d102      	bne.n	80165ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7ff fce5 	bl	8015fb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	3301      	adds	r3, #1
 80165f2:	60fb      	str	r3, [r7, #12]
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2b09      	cmp	r3, #9
 80165f8:	dddd      	ble.n	80165b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80165fa:	bf00      	nop
 80165fc:	bf00      	nop
 80165fe:	3710      	adds	r7, #16
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	20008058 	.word	0x20008058

08016608 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016608:	b5b0      	push	{r4, r5, r7, lr}
 801660a:	b08a      	sub	sp, #40	; 0x28
 801660c:	af04      	add	r7, sp, #16
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d107      	bne.n	8016628 <etharp_input+0x20>
 8016618:	4b3d      	ldr	r3, [pc, #244]	; (8016710 <etharp_input+0x108>)
 801661a:	f240 228a 	movw	r2, #650	; 0x28a
 801661e:	493d      	ldr	r1, [pc, #244]	; (8016714 <etharp_input+0x10c>)
 8016620:	483d      	ldr	r0, [pc, #244]	; (8016718 <etharp_input+0x110>)
 8016622:	f002 fcdf 	bl	8018fe4 <iprintf>
 8016626:	e06f      	b.n	8016708 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	881b      	ldrh	r3, [r3, #0]
 8016632:	b29b      	uxth	r3, r3
 8016634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016638:	d10c      	bne.n	8016654 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801663e:	2b06      	cmp	r3, #6
 8016640:	d108      	bne.n	8016654 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016646:	2b04      	cmp	r3, #4
 8016648:	d104      	bne.n	8016654 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	885b      	ldrh	r3, [r3, #2]
 801664e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016650:	2b08      	cmp	r3, #8
 8016652:	d003      	beq.n	801665c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f7f9 fe03 	bl	8010260 <pbuf_free>
    return;
 801665a:	e055      	b.n	8016708 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	330e      	adds	r3, #14
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	3318      	adds	r3, #24
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	3304      	adds	r3, #4
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d102      	bne.n	801667c <etharp_input+0x74>
    for_us = 0;
 8016676:	2300      	movs	r3, #0
 8016678:	75fb      	strb	r3, [r7, #23]
 801667a:	e009      	b.n	8016690 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801667c:	68ba      	ldr	r2, [r7, #8]
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	3304      	adds	r3, #4
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	429a      	cmp	r2, r3
 8016686:	bf0c      	ite	eq
 8016688:	2301      	moveq	r3, #1
 801668a:	2300      	movne	r3, #0
 801668c:	b2db      	uxtb	r3, r3
 801668e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	f103 0208 	add.w	r2, r3, #8
 8016696:	7dfb      	ldrb	r3, [r7, #23]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d001      	beq.n	80166a0 <etharp_input+0x98>
 801669c:	2301      	movs	r3, #1
 801669e:	e000      	b.n	80166a2 <etharp_input+0x9a>
 80166a0:	2302      	movs	r3, #2
 80166a2:	f107 010c 	add.w	r1, r7, #12
 80166a6:	6838      	ldr	r0, [r7, #0]
 80166a8:	f7ff fed8 	bl	801645c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	88db      	ldrh	r3, [r3, #6]
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166b6:	d003      	beq.n	80166c0 <etharp_input+0xb8>
 80166b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166bc:	d01e      	beq.n	80166fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80166be:	e020      	b.n	8016702 <etharp_input+0xfa>
      if (for_us) {
 80166c0:	7dfb      	ldrb	r3, [r7, #23]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d01c      	beq.n	8016700 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80166dc:	693a      	ldr	r2, [r7, #16]
 80166de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80166e0:	2102      	movs	r1, #2
 80166e2:	9103      	str	r1, [sp, #12]
 80166e4:	f107 010c 	add.w	r1, r7, #12
 80166e8:	9102      	str	r1, [sp, #8]
 80166ea:	9201      	str	r2, [sp, #4]
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	462b      	mov	r3, r5
 80166f0:	4622      	mov	r2, r4
 80166f2:	4601      	mov	r1, r0
 80166f4:	6838      	ldr	r0, [r7, #0]
 80166f6:	f000 faeb 	bl	8016cd0 <etharp_raw>
      break;
 80166fa:	e001      	b.n	8016700 <etharp_input+0xf8>
      break;
 80166fc:	bf00      	nop
 80166fe:	e000      	b.n	8016702 <etharp_input+0xfa>
      break;
 8016700:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7f9 fdac 	bl	8010260 <pbuf_free>
}
 8016708:	3718      	adds	r7, #24
 801670a:	46bd      	mov	sp, r7
 801670c:	bdb0      	pop	{r4, r5, r7, pc}
 801670e:	bf00      	nop
 8016710:	0801d9e0 	.word	0x0801d9e0
 8016714:	0801db30 	.word	0x0801db30
 8016718:	0801da58 	.word	0x0801da58

0801671c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b086      	sub	sp, #24
 8016720:	af02      	add	r7, sp, #8
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	4613      	mov	r3, r2
 8016728:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801672a:	79fa      	ldrb	r2, [r7, #7]
 801672c:	4944      	ldr	r1, [pc, #272]	; (8016840 <etharp_output_to_arp_index+0x124>)
 801672e:	4613      	mov	r3, r2
 8016730:	005b      	lsls	r3, r3, #1
 8016732:	4413      	add	r3, r2
 8016734:	00db      	lsls	r3, r3, #3
 8016736:	440b      	add	r3, r1
 8016738:	3314      	adds	r3, #20
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	2b01      	cmp	r3, #1
 801673e:	d806      	bhi.n	801674e <etharp_output_to_arp_index+0x32>
 8016740:	4b40      	ldr	r3, [pc, #256]	; (8016844 <etharp_output_to_arp_index+0x128>)
 8016742:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016746:	4940      	ldr	r1, [pc, #256]	; (8016848 <etharp_output_to_arp_index+0x12c>)
 8016748:	4840      	ldr	r0, [pc, #256]	; (801684c <etharp_output_to_arp_index+0x130>)
 801674a:	f002 fc4b 	bl	8018fe4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801674e:	79fa      	ldrb	r2, [r7, #7]
 8016750:	493b      	ldr	r1, [pc, #236]	; (8016840 <etharp_output_to_arp_index+0x124>)
 8016752:	4613      	mov	r3, r2
 8016754:	005b      	lsls	r3, r3, #1
 8016756:	4413      	add	r3, r2
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	440b      	add	r3, r1
 801675c:	3314      	adds	r3, #20
 801675e:	781b      	ldrb	r3, [r3, #0]
 8016760:	2b02      	cmp	r3, #2
 8016762:	d153      	bne.n	801680c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016764:	79fa      	ldrb	r2, [r7, #7]
 8016766:	4936      	ldr	r1, [pc, #216]	; (8016840 <etharp_output_to_arp_index+0x124>)
 8016768:	4613      	mov	r3, r2
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	4413      	add	r3, r2
 801676e:	00db      	lsls	r3, r3, #3
 8016770:	440b      	add	r3, r1
 8016772:	3312      	adds	r3, #18
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801677a:	d919      	bls.n	80167b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801677c:	79fa      	ldrb	r2, [r7, #7]
 801677e:	4613      	mov	r3, r2
 8016780:	005b      	lsls	r3, r3, #1
 8016782:	4413      	add	r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	4a2e      	ldr	r2, [pc, #184]	; (8016840 <etharp_output_to_arp_index+0x124>)
 8016788:	4413      	add	r3, r2
 801678a:	3304      	adds	r3, #4
 801678c:	4619      	mov	r1, r3
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	f000 fb4c 	bl	8016e2c <etharp_request>
 8016794:	4603      	mov	r3, r0
 8016796:	2b00      	cmp	r3, #0
 8016798:	d138      	bne.n	801680c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801679a:	79fa      	ldrb	r2, [r7, #7]
 801679c:	4928      	ldr	r1, [pc, #160]	; (8016840 <etharp_output_to_arp_index+0x124>)
 801679e:	4613      	mov	r3, r2
 80167a0:	005b      	lsls	r3, r3, #1
 80167a2:	4413      	add	r3, r2
 80167a4:	00db      	lsls	r3, r3, #3
 80167a6:	440b      	add	r3, r1
 80167a8:	3314      	adds	r3, #20
 80167aa:	2203      	movs	r2, #3
 80167ac:	701a      	strb	r2, [r3, #0]
 80167ae:	e02d      	b.n	801680c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167b0:	79fa      	ldrb	r2, [r7, #7]
 80167b2:	4923      	ldr	r1, [pc, #140]	; (8016840 <etharp_output_to_arp_index+0x124>)
 80167b4:	4613      	mov	r3, r2
 80167b6:	005b      	lsls	r3, r3, #1
 80167b8:	4413      	add	r3, r2
 80167ba:	00db      	lsls	r3, r3, #3
 80167bc:	440b      	add	r3, r1
 80167be:	3312      	adds	r3, #18
 80167c0:	881b      	ldrh	r3, [r3, #0]
 80167c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80167c6:	d321      	bcc.n	801680c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80167c8:	79fa      	ldrb	r2, [r7, #7]
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	4a1b      	ldr	r2, [pc, #108]	; (8016840 <etharp_output_to_arp_index+0x124>)
 80167d4:	4413      	add	r3, r2
 80167d6:	1d19      	adds	r1, r3, #4
 80167d8:	79fa      	ldrb	r2, [r7, #7]
 80167da:	4613      	mov	r3, r2
 80167dc:	005b      	lsls	r3, r3, #1
 80167de:	4413      	add	r3, r2
 80167e0:	00db      	lsls	r3, r3, #3
 80167e2:	3308      	adds	r3, #8
 80167e4:	4a16      	ldr	r2, [pc, #88]	; (8016840 <etharp_output_to_arp_index+0x124>)
 80167e6:	4413      	add	r3, r2
 80167e8:	3304      	adds	r3, #4
 80167ea:	461a      	mov	r2, r3
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f000 fafb 	bl	8016de8 <etharp_request_dst>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d109      	bne.n	801680c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167f8:	79fa      	ldrb	r2, [r7, #7]
 80167fa:	4911      	ldr	r1, [pc, #68]	; (8016840 <etharp_output_to_arp_index+0x124>)
 80167fc:	4613      	mov	r3, r2
 80167fe:	005b      	lsls	r3, r3, #1
 8016800:	4413      	add	r3, r2
 8016802:	00db      	lsls	r3, r3, #3
 8016804:	440b      	add	r3, r1
 8016806:	3314      	adds	r3, #20
 8016808:	2203      	movs	r2, #3
 801680a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016812:	79fa      	ldrb	r2, [r7, #7]
 8016814:	4613      	mov	r3, r2
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4413      	add	r3, r2
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	3308      	adds	r3, #8
 801681e:	4a08      	ldr	r2, [pc, #32]	; (8016840 <etharp_output_to_arp_index+0x124>)
 8016820:	4413      	add	r3, r2
 8016822:	3304      	adds	r3, #4
 8016824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016828:	9200      	str	r2, [sp, #0]
 801682a:	460a      	mov	r2, r1
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	68f8      	ldr	r0, [r7, #12]
 8016830:	f001 fe66 	bl	8018500 <ethernet_output>
 8016834:	4603      	mov	r3, r0
}
 8016836:	4618      	mov	r0, r3
 8016838:	3710      	adds	r7, #16
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
 801683e:	bf00      	nop
 8016840:	20008058 	.word	0x20008058
 8016844:	0801d9e0 	.word	0x0801d9e0
 8016848:	0801db50 	.word	0x0801db50
 801684c:	0801da58 	.word	0x0801da58

08016850 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08a      	sub	sp, #40	; 0x28
 8016854:	af02      	add	r7, sp, #8
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d106      	bne.n	8016874 <etharp_output+0x24>
 8016866:	4b73      	ldr	r3, [pc, #460]	; (8016a34 <etharp_output+0x1e4>)
 8016868:	f240 321e 	movw	r2, #798	; 0x31e
 801686c:	4972      	ldr	r1, [pc, #456]	; (8016a38 <etharp_output+0x1e8>)
 801686e:	4873      	ldr	r0, [pc, #460]	; (8016a3c <etharp_output+0x1ec>)
 8016870:	f002 fbb8 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d106      	bne.n	8016888 <etharp_output+0x38>
 801687a:	4b6e      	ldr	r3, [pc, #440]	; (8016a34 <etharp_output+0x1e4>)
 801687c:	f240 321f 	movw	r2, #799	; 0x31f
 8016880:	496f      	ldr	r1, [pc, #444]	; (8016a40 <etharp_output+0x1f0>)
 8016882:	486e      	ldr	r0, [pc, #440]	; (8016a3c <etharp_output+0x1ec>)
 8016884:	f002 fbae 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d106      	bne.n	801689c <etharp_output+0x4c>
 801688e:	4b69      	ldr	r3, [pc, #420]	; (8016a34 <etharp_output+0x1e4>)
 8016890:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016894:	496b      	ldr	r1, [pc, #428]	; (8016a44 <etharp_output+0x1f4>)
 8016896:	4869      	ldr	r0, [pc, #420]	; (8016a3c <etharp_output+0x1ec>)
 8016898:	f002 fba4 	bl	8018fe4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	68f9      	ldr	r1, [r7, #12]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f000 ff1e 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d002      	beq.n	80168b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80168ae:	4b66      	ldr	r3, [pc, #408]	; (8016a48 <etharp_output+0x1f8>)
 80168b0:	61fb      	str	r3, [r7, #28]
 80168b2:	e0af      	b.n	8016a14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168bc:	2be0      	cmp	r3, #224	; 0xe0
 80168be:	d118      	bne.n	80168f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80168c0:	2301      	movs	r3, #1
 80168c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80168c4:	2300      	movs	r3, #0
 80168c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80168c8:	235e      	movs	r3, #94	; 0x5e
 80168ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	3301      	adds	r3, #1
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	3302      	adds	r3, #2
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	3303      	adds	r3, #3
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80168ea:	f107 0310 	add.w	r3, r7, #16
 80168ee:	61fb      	str	r3, [r7, #28]
 80168f0:	e090      	b.n	8016a14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	3304      	adds	r3, #4
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	405a      	eors	r2, r3
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3308      	adds	r3, #8
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4013      	ands	r3, r2
 8016906:	2b00      	cmp	r3, #0
 8016908:	d012      	beq.n	8016930 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016910:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016914:	4293      	cmp	r3, r2
 8016916:	d00b      	beq.n	8016930 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	330c      	adds	r3, #12
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d003      	beq.n	801692a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	330c      	adds	r3, #12
 8016926:	61bb      	str	r3, [r7, #24]
 8016928:	e002      	b.n	8016930 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801692a:	f06f 0303 	mvn.w	r3, #3
 801692e:	e07d      	b.n	8016a2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016930:	4b46      	ldr	r3, [pc, #280]	; (8016a4c <etharp_output+0x1fc>)
 8016932:	781b      	ldrb	r3, [r3, #0]
 8016934:	4619      	mov	r1, r3
 8016936:	4a46      	ldr	r2, [pc, #280]	; (8016a50 <etharp_output+0x200>)
 8016938:	460b      	mov	r3, r1
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	440b      	add	r3, r1
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	4413      	add	r3, r2
 8016942:	3314      	adds	r3, #20
 8016944:	781b      	ldrb	r3, [r3, #0]
 8016946:	2b01      	cmp	r3, #1
 8016948:	d925      	bls.n	8016996 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801694a:	4b40      	ldr	r3, [pc, #256]	; (8016a4c <etharp_output+0x1fc>)
 801694c:	781b      	ldrb	r3, [r3, #0]
 801694e:	4619      	mov	r1, r3
 8016950:	4a3f      	ldr	r2, [pc, #252]	; (8016a50 <etharp_output+0x200>)
 8016952:	460b      	mov	r3, r1
 8016954:	005b      	lsls	r3, r3, #1
 8016956:	440b      	add	r3, r1
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	4413      	add	r3, r2
 801695c:	3308      	adds	r3, #8
 801695e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	429a      	cmp	r2, r3
 8016964:	d117      	bne.n	8016996 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	681a      	ldr	r2, [r3, #0]
 801696a:	4b38      	ldr	r3, [pc, #224]	; (8016a4c <etharp_output+0x1fc>)
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	4618      	mov	r0, r3
 8016970:	4937      	ldr	r1, [pc, #220]	; (8016a50 <etharp_output+0x200>)
 8016972:	4603      	mov	r3, r0
 8016974:	005b      	lsls	r3, r3, #1
 8016976:	4403      	add	r3, r0
 8016978:	00db      	lsls	r3, r3, #3
 801697a:	440b      	add	r3, r1
 801697c:	3304      	adds	r3, #4
 801697e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016980:	429a      	cmp	r2, r3
 8016982:	d108      	bne.n	8016996 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016984:	4b31      	ldr	r3, [pc, #196]	; (8016a4c <etharp_output+0x1fc>)
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	461a      	mov	r2, r3
 801698a:	68b9      	ldr	r1, [r7, #8]
 801698c:	68f8      	ldr	r0, [r7, #12]
 801698e:	f7ff fec5 	bl	801671c <etharp_output_to_arp_index>
 8016992:	4603      	mov	r3, r0
 8016994:	e04a      	b.n	8016a2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016996:	2300      	movs	r3, #0
 8016998:	75fb      	strb	r3, [r7, #23]
 801699a:	e031      	b.n	8016a00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801699c:	7dfa      	ldrb	r2, [r7, #23]
 801699e:	492c      	ldr	r1, [pc, #176]	; (8016a50 <etharp_output+0x200>)
 80169a0:	4613      	mov	r3, r2
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	4413      	add	r3, r2
 80169a6:	00db      	lsls	r3, r3, #3
 80169a8:	440b      	add	r3, r1
 80169aa:	3314      	adds	r3, #20
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d923      	bls.n	80169fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80169b2:	7dfa      	ldrb	r2, [r7, #23]
 80169b4:	4926      	ldr	r1, [pc, #152]	; (8016a50 <etharp_output+0x200>)
 80169b6:	4613      	mov	r3, r2
 80169b8:	005b      	lsls	r3, r3, #1
 80169ba:	4413      	add	r3, r2
 80169bc:	00db      	lsls	r3, r3, #3
 80169be:	440b      	add	r3, r1
 80169c0:	3308      	adds	r3, #8
 80169c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d117      	bne.n	80169fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80169ca:	69bb      	ldr	r3, [r7, #24]
 80169cc:	6819      	ldr	r1, [r3, #0]
 80169ce:	7dfa      	ldrb	r2, [r7, #23]
 80169d0:	481f      	ldr	r0, [pc, #124]	; (8016a50 <etharp_output+0x200>)
 80169d2:	4613      	mov	r3, r2
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	4413      	add	r3, r2
 80169d8:	00db      	lsls	r3, r3, #3
 80169da:	4403      	add	r3, r0
 80169dc:	3304      	adds	r3, #4
 80169de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80169e0:	4299      	cmp	r1, r3
 80169e2:	d10a      	bne.n	80169fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80169e4:	4a19      	ldr	r2, [pc, #100]	; (8016a4c <etharp_output+0x1fc>)
 80169e6:	7dfb      	ldrb	r3, [r7, #23]
 80169e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80169ea:	7dfb      	ldrb	r3, [r7, #23]
 80169ec:	461a      	mov	r2, r3
 80169ee:	68b9      	ldr	r1, [r7, #8]
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f7ff fe93 	bl	801671c <etharp_output_to_arp_index>
 80169f6:	4603      	mov	r3, r0
 80169f8:	e018      	b.n	8016a2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80169fa:	7dfb      	ldrb	r3, [r7, #23]
 80169fc:	3301      	adds	r3, #1
 80169fe:	75fb      	strb	r3, [r7, #23]
 8016a00:	7dfb      	ldrb	r3, [r7, #23]
 8016a02:	2b09      	cmp	r3, #9
 8016a04:	d9ca      	bls.n	801699c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a06:	68ba      	ldr	r2, [r7, #8]
 8016a08:	69b9      	ldr	r1, [r7, #24]
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	f000 f822 	bl	8016a54 <etharp_query>
 8016a10:	4603      	mov	r3, r0
 8016a12:	e00b      	b.n	8016a2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	68b9      	ldr	r1, [r7, #8]
 8016a24:	68f8      	ldr	r0, [r7, #12]
 8016a26:	f001 fd6b 	bl	8018500 <ethernet_output>
 8016a2a:	4603      	mov	r3, r0
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3720      	adds	r7, #32
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	0801d9e0 	.word	0x0801d9e0
 8016a38:	0801db30 	.word	0x0801db30
 8016a3c:	0801da58 	.word	0x0801da58
 8016a40:	0801db80 	.word	0x0801db80
 8016a44:	0801db20 	.word	0x0801db20
 8016a48:	0801e1d8 	.word	0x0801e1d8
 8016a4c:	20008148 	.word	0x20008148
 8016a50:	20008058 	.word	0x20008058

08016a54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b08c      	sub	sp, #48	; 0x30
 8016a58:	af02      	add	r7, sp, #8
 8016a5a:	60f8      	str	r0, [r7, #12]
 8016a5c:	60b9      	str	r1, [r7, #8]
 8016a5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	3326      	adds	r3, #38	; 0x26
 8016a64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016a66:	23ff      	movs	r3, #255	; 0xff
 8016a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	68f9      	ldr	r1, [r7, #12]
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 fe34 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d10c      	bne.n	8016a9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a8a:	2be0      	cmp	r3, #224	; 0xe0
 8016a8c:	d006      	beq.n	8016a9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d003      	beq.n	8016a9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016a9c:	f06f 030f 	mvn.w	r3, #15
 8016aa0:	e101      	b.n	8016ca6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	2101      	movs	r1, #1
 8016aa6:	68b8      	ldr	r0, [r7, #8]
 8016aa8:	f7ff fb60 	bl	801616c <etharp_find_entry>
 8016aac:	4603      	mov	r3, r0
 8016aae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016ab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	da02      	bge.n	8016abe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016ab8:	8a7b      	ldrh	r3, [r7, #18]
 8016aba:	b25b      	sxtb	r3, r3
 8016abc:	e0f3      	b.n	8016ca6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016abe:	8a7b      	ldrh	r3, [r7, #18]
 8016ac0:	2b7e      	cmp	r3, #126	; 0x7e
 8016ac2:	d906      	bls.n	8016ad2 <etharp_query+0x7e>
 8016ac4:	4b7a      	ldr	r3, [pc, #488]	; (8016cb0 <etharp_query+0x25c>)
 8016ac6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016aca:	497a      	ldr	r1, [pc, #488]	; (8016cb4 <etharp_query+0x260>)
 8016acc:	487a      	ldr	r0, [pc, #488]	; (8016cb8 <etharp_query+0x264>)
 8016ace:	f002 fa89 	bl	8018fe4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016ad2:	8a7b      	ldrh	r3, [r7, #18]
 8016ad4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016ad6:	7c7a      	ldrb	r2, [r7, #17]
 8016ad8:	4978      	ldr	r1, [pc, #480]	; (8016cbc <etharp_query+0x268>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3314      	adds	r3, #20
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d115      	bne.n	8016b18 <etharp_query+0xc4>
    is_new_entry = 1;
 8016aec:	2301      	movs	r3, #1
 8016aee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016af0:	7c7a      	ldrb	r2, [r7, #17]
 8016af2:	4972      	ldr	r1, [pc, #456]	; (8016cbc <etharp_query+0x268>)
 8016af4:	4613      	mov	r3, r2
 8016af6:	005b      	lsls	r3, r3, #1
 8016af8:	4413      	add	r3, r2
 8016afa:	00db      	lsls	r3, r3, #3
 8016afc:	440b      	add	r3, r1
 8016afe:	3314      	adds	r3, #20
 8016b00:	2201      	movs	r2, #1
 8016b02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b04:	7c7a      	ldrb	r2, [r7, #17]
 8016b06:	496d      	ldr	r1, [pc, #436]	; (8016cbc <etharp_query+0x268>)
 8016b08:	4613      	mov	r3, r2
 8016b0a:	005b      	lsls	r3, r3, #1
 8016b0c:	4413      	add	r3, r2
 8016b0e:	00db      	lsls	r3, r3, #3
 8016b10:	440b      	add	r3, r1
 8016b12:	3308      	adds	r3, #8
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b18:	7c7a      	ldrb	r2, [r7, #17]
 8016b1a:	4968      	ldr	r1, [pc, #416]	; (8016cbc <etharp_query+0x268>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	3314      	adds	r3, #20
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b01      	cmp	r3, #1
 8016b2c:	d011      	beq.n	8016b52 <etharp_query+0xfe>
 8016b2e:	7c7a      	ldrb	r2, [r7, #17]
 8016b30:	4962      	ldr	r1, [pc, #392]	; (8016cbc <etharp_query+0x268>)
 8016b32:	4613      	mov	r3, r2
 8016b34:	005b      	lsls	r3, r3, #1
 8016b36:	4413      	add	r3, r2
 8016b38:	00db      	lsls	r3, r3, #3
 8016b3a:	440b      	add	r3, r1
 8016b3c:	3314      	adds	r3, #20
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d806      	bhi.n	8016b52 <etharp_query+0xfe>
 8016b44:	4b5a      	ldr	r3, [pc, #360]	; (8016cb0 <etharp_query+0x25c>)
 8016b46:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016b4a:	495d      	ldr	r1, [pc, #372]	; (8016cc0 <etharp_query+0x26c>)
 8016b4c:	485a      	ldr	r0, [pc, #360]	; (8016cb8 <etharp_query+0x264>)
 8016b4e:	f002 fa49 	bl	8018fe4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016b52:	6a3b      	ldr	r3, [r7, #32]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <etharp_query+0x10a>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d10c      	bne.n	8016b78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016b5e:	68b9      	ldr	r1, [r7, #8]
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f000 f963 	bl	8016e2c <etharp_request>
 8016b66:	4603      	mov	r3, r0
 8016b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d102      	bne.n	8016b78 <etharp_query+0x124>
      return result;
 8016b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b76:	e096      	b.n	8016ca6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d106      	bne.n	8016b8c <etharp_query+0x138>
 8016b7e:	4b4c      	ldr	r3, [pc, #304]	; (8016cb0 <etharp_query+0x25c>)
 8016b80:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016b84:	494f      	ldr	r1, [pc, #316]	; (8016cc4 <etharp_query+0x270>)
 8016b86:	484c      	ldr	r0, [pc, #304]	; (8016cb8 <etharp_query+0x264>)
 8016b88:	f002 fa2c 	bl	8018fe4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016b8c:	7c7a      	ldrb	r2, [r7, #17]
 8016b8e:	494b      	ldr	r1, [pc, #300]	; (8016cbc <etharp_query+0x268>)
 8016b90:	4613      	mov	r3, r2
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	440b      	add	r3, r1
 8016b9a:	3314      	adds	r3, #20
 8016b9c:	781b      	ldrb	r3, [r3, #0]
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	d917      	bls.n	8016bd2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016ba2:	4a49      	ldr	r2, [pc, #292]	; (8016cc8 <etharp_query+0x274>)
 8016ba4:	7c7b      	ldrb	r3, [r7, #17]
 8016ba6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016ba8:	7c7a      	ldrb	r2, [r7, #17]
 8016baa:	4613      	mov	r3, r2
 8016bac:	005b      	lsls	r3, r3, #1
 8016bae:	4413      	add	r3, r2
 8016bb0:	00db      	lsls	r3, r3, #3
 8016bb2:	3308      	adds	r3, #8
 8016bb4:	4a41      	ldr	r2, [pc, #260]	; (8016cbc <etharp_query+0x268>)
 8016bb6:	4413      	add	r3, r2
 8016bb8:	3304      	adds	r3, #4
 8016bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bbe:	9200      	str	r2, [sp, #0]
 8016bc0:	697a      	ldr	r2, [r7, #20]
 8016bc2:	6879      	ldr	r1, [r7, #4]
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	f001 fc9b 	bl	8018500 <ethernet_output>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bd0:	e067      	b.n	8016ca2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016bd2:	7c7a      	ldrb	r2, [r7, #17]
 8016bd4:	4939      	ldr	r1, [pc, #228]	; (8016cbc <etharp_query+0x268>)
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	005b      	lsls	r3, r3, #1
 8016bda:	4413      	add	r3, r2
 8016bdc:	00db      	lsls	r3, r3, #3
 8016bde:	440b      	add	r3, r1
 8016be0:	3314      	adds	r3, #20
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d15c      	bne.n	8016ca2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016be8:	2300      	movs	r3, #0
 8016bea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016bf0:	e01c      	b.n	8016c2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	895a      	ldrh	r2, [r3, #10]
 8016bf6:	69fb      	ldr	r3, [r7, #28]
 8016bf8:	891b      	ldrh	r3, [r3, #8]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d10a      	bne.n	8016c14 <etharp_query+0x1c0>
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d006      	beq.n	8016c14 <etharp_query+0x1c0>
 8016c06:	4b2a      	ldr	r3, [pc, #168]	; (8016cb0 <etharp_query+0x25c>)
 8016c08:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016c0c:	492f      	ldr	r1, [pc, #188]	; (8016ccc <etharp_query+0x278>)
 8016c0e:	482a      	ldr	r0, [pc, #168]	; (8016cb8 <etharp_query+0x264>)
 8016c10:	f002 f9e8 	bl	8018fe4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	7b1b      	ldrb	r3, [r3, #12]
 8016c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d002      	beq.n	8016c26 <etharp_query+0x1d2>
        copy_needed = 1;
 8016c20:	2301      	movs	r3, #1
 8016c22:	61bb      	str	r3, [r7, #24]
        break;
 8016c24:	e005      	b.n	8016c32 <etharp_query+0x1de>
      }
      p = p->next;
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d1df      	bne.n	8016bf2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c32:	69bb      	ldr	r3, [r7, #24]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d007      	beq.n	8016c48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016c3e:	200e      	movs	r0, #14
 8016c40:	f7f9 fd6a 	bl	8010718 <pbuf_clone>
 8016c44:	61f8      	str	r0, [r7, #28]
 8016c46:	e004      	b.n	8016c52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016c4c:	69f8      	ldr	r0, [r7, #28]
 8016c4e:	f7f9 fba7 	bl	80103a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d021      	beq.n	8016c9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016c58:	7c7a      	ldrb	r2, [r7, #17]
 8016c5a:	4918      	ldr	r1, [pc, #96]	; (8016cbc <etharp_query+0x268>)
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	4413      	add	r3, r2
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	440b      	add	r3, r1
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d00a      	beq.n	8016c82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016c6c:	7c7a      	ldrb	r2, [r7, #17]
 8016c6e:	4913      	ldr	r1, [pc, #76]	; (8016cbc <etharp_query+0x268>)
 8016c70:	4613      	mov	r3, r2
 8016c72:	005b      	lsls	r3, r3, #1
 8016c74:	4413      	add	r3, r2
 8016c76:	00db      	lsls	r3, r3, #3
 8016c78:	440b      	add	r3, r1
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7f9 faef 	bl	8010260 <pbuf_free>
      }
      arp_table[i].q = p;
 8016c82:	7c7a      	ldrb	r2, [r7, #17]
 8016c84:	490d      	ldr	r1, [pc, #52]	; (8016cbc <etharp_query+0x268>)
 8016c86:	4613      	mov	r3, r2
 8016c88:	005b      	lsls	r3, r3, #1
 8016c8a:	4413      	add	r3, r2
 8016c8c:	00db      	lsls	r3, r3, #3
 8016c8e:	440b      	add	r3, r1
 8016c90:	69fa      	ldr	r2, [r7, #28]
 8016c92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016c94:	2300      	movs	r3, #0
 8016c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c9a:	e002      	b.n	8016ca2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016c9c:	23ff      	movs	r3, #255	; 0xff
 8016c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	3728      	adds	r7, #40	; 0x28
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}
 8016cae:	bf00      	nop
 8016cb0:	0801d9e0 	.word	0x0801d9e0
 8016cb4:	0801db8c 	.word	0x0801db8c
 8016cb8:	0801da58 	.word	0x0801da58
 8016cbc:	20008058 	.word	0x20008058
 8016cc0:	0801db9c 	.word	0x0801db9c
 8016cc4:	0801db80 	.word	0x0801db80
 8016cc8:	20008148 	.word	0x20008148
 8016ccc:	0801dbc4 	.word	0x0801dbc4

08016cd0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b08a      	sub	sp, #40	; 0x28
 8016cd4:	af02      	add	r7, sp, #8
 8016cd6:	60f8      	str	r0, [r7, #12]
 8016cd8:	60b9      	str	r1, [r7, #8]
 8016cda:	607a      	str	r2, [r7, #4]
 8016cdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d106      	bne.n	8016cf6 <etharp_raw+0x26>
 8016ce8:	4b3a      	ldr	r3, [pc, #232]	; (8016dd4 <etharp_raw+0x104>)
 8016cea:	f240 4257 	movw	r2, #1111	; 0x457
 8016cee:	493a      	ldr	r1, [pc, #232]	; (8016dd8 <etharp_raw+0x108>)
 8016cf0:	483a      	ldr	r0, [pc, #232]	; (8016ddc <etharp_raw+0x10c>)
 8016cf2:	f002 f977 	bl	8018fe4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cfa:	211c      	movs	r1, #28
 8016cfc:	200e      	movs	r0, #14
 8016cfe:	f7f8 ffcb 	bl	800fc98 <pbuf_alloc>
 8016d02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d04:	69bb      	ldr	r3, [r7, #24]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d102      	bne.n	8016d10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d0e:	e05d      	b.n	8016dcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	895b      	ldrh	r3, [r3, #10]
 8016d14:	2b1b      	cmp	r3, #27
 8016d16:	d806      	bhi.n	8016d26 <etharp_raw+0x56>
 8016d18:	4b2e      	ldr	r3, [pc, #184]	; (8016dd4 <etharp_raw+0x104>)
 8016d1a:	f240 4262 	movw	r2, #1122	; 0x462
 8016d1e:	4930      	ldr	r1, [pc, #192]	; (8016de0 <etharp_raw+0x110>)
 8016d20:	482e      	ldr	r0, [pc, #184]	; (8016ddc <etharp_raw+0x10c>)
 8016d22:	f002 f95f 	bl	8018fe4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d26:	69bb      	ldr	r3, [r7, #24]
 8016d28:	685b      	ldr	r3, [r3, #4]
 8016d2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7f7 fea0 	bl	800ea74 <lwip_htons>
 8016d34:	4603      	mov	r3, r0
 8016d36:	461a      	mov	r2, r3
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d42:	2b06      	cmp	r3, #6
 8016d44:	d006      	beq.n	8016d54 <etharp_raw+0x84>
 8016d46:	4b23      	ldr	r3, [pc, #140]	; (8016dd4 <etharp_raw+0x104>)
 8016d48:	f240 4269 	movw	r2, #1129	; 0x469
 8016d4c:	4925      	ldr	r1, [pc, #148]	; (8016de4 <etharp_raw+0x114>)
 8016d4e:	4823      	ldr	r0, [pc, #140]	; (8016ddc <etharp_raw+0x10c>)
 8016d50:	f002 f948 	bl	8018fe4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	3308      	adds	r3, #8
 8016d58:	2206      	movs	r2, #6
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f002 fb0f 	bl	8019380 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	3312      	adds	r3, #18
 8016d66:	2206      	movs	r2, #6
 8016d68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f002 fb08 	bl	8019380 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	330e      	adds	r3, #14
 8016d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d76:	6812      	ldr	r2, [r2, #0]
 8016d78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	3318      	adds	r3, #24
 8016d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d80:	6812      	ldr	r2, [r2, #0]
 8016d82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	2200      	movs	r2, #0
 8016d88:	701a      	strb	r2, [r3, #0]
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	f042 0201 	orr.w	r2, r2, #1
 8016d90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	2200      	movs	r2, #0
 8016d96:	f042 0208 	orr.w	r2, r2, #8
 8016d9a:	709a      	strb	r2, [r3, #2]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	2206      	movs	r2, #6
 8016da4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	2204      	movs	r2, #4
 8016daa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016dac:	f640 0306 	movw	r3, #2054	; 0x806
 8016db0:	9300      	str	r3, [sp, #0]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	68ba      	ldr	r2, [r7, #8]
 8016db6:	69b9      	ldr	r1, [r7, #24]
 8016db8:	68f8      	ldr	r0, [r7, #12]
 8016dba:	f001 fba1 	bl	8018500 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016dbe:	69b8      	ldr	r0, [r7, #24]
 8016dc0:	f7f9 fa4e 	bl	8010260 <pbuf_free>
  p = NULL;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3720      	adds	r7, #32
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	0801d9e0 	.word	0x0801d9e0
 8016dd8:	0801db30 	.word	0x0801db30
 8016ddc:	0801da58 	.word	0x0801da58
 8016de0:	0801dbe0 	.word	0x0801dbe0
 8016de4:	0801dc14 	.word	0x0801dc14

08016de8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b088      	sub	sp, #32
 8016dec:	af04      	add	r7, sp, #16
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e04:	2201      	movs	r2, #1
 8016e06:	9203      	str	r2, [sp, #12]
 8016e08:	68ba      	ldr	r2, [r7, #8]
 8016e0a:	9202      	str	r2, [sp, #8]
 8016e0c:	4a06      	ldr	r2, [pc, #24]	; (8016e28 <etharp_request_dst+0x40>)
 8016e0e:	9201      	str	r2, [sp, #4]
 8016e10:	9300      	str	r3, [sp, #0]
 8016e12:	4603      	mov	r3, r0
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	68f8      	ldr	r0, [r7, #12]
 8016e18:	f7ff ff5a 	bl	8016cd0 <etharp_raw>
 8016e1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3710      	adds	r7, #16
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	0801e1e0 	.word	0x0801e1e0

08016e2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016e36:	4a05      	ldr	r2, [pc, #20]	; (8016e4c <etharp_request+0x20>)
 8016e38:	6839      	ldr	r1, [r7, #0]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7ff ffd4 	bl	8016de8 <etharp_request_dst>
 8016e40:	4603      	mov	r3, r0
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	0801e1d8 	.word	0x0801e1d8

08016e50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b08e      	sub	sp, #56	; 0x38
 8016e54:	af04      	add	r7, sp, #16
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016e5a:	4b87      	ldr	r3, [pc, #540]	; (8017078 <icmp_input+0x228>)
 8016e5c:	689b      	ldr	r3, [r3, #8]
 8016e5e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	f003 030f 	and.w	r3, r3, #15
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	b2db      	uxtb	r3, r3
 8016e6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e72:	2b13      	cmp	r3, #19
 8016e74:	f240 80e8 	bls.w	8017048 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	895b      	ldrh	r3, [r3, #10]
 8016e7c:	2b03      	cmp	r3, #3
 8016e7e:	f240 80e5 	bls.w	801704c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016e8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 80d2 	beq.w	801703a <icmp_input+0x1ea>
 8016e96:	2b08      	cmp	r3, #8
 8016e98:	f040 80d2 	bne.w	8017040 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016e9c:	4b77      	ldr	r3, [pc, #476]	; (801707c <icmp_input+0x22c>)
 8016e9e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ea0:	4b75      	ldr	r3, [pc, #468]	; (8017078 <icmp_input+0x228>)
 8016ea2:	695b      	ldr	r3, [r3, #20]
 8016ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ea8:	2be0      	cmp	r3, #224	; 0xe0
 8016eaa:	f000 80d6 	beq.w	801705a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016eae:	4b72      	ldr	r3, [pc, #456]	; (8017078 <icmp_input+0x228>)
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	4a71      	ldr	r2, [pc, #452]	; (8017078 <icmp_input+0x228>)
 8016eb4:	6812      	ldr	r2, [r2, #0]
 8016eb6:	4611      	mov	r1, r2
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f000 fc13 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f040 80cc 	bne.w	801705e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	891b      	ldrh	r3, [r3, #8]
 8016eca:	2b07      	cmp	r3, #7
 8016ecc:	f240 80c0 	bls.w	8017050 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f7f7 fe6c 	bl	800ebae <inet_chksum_pbuf>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d003      	beq.n	8016ee4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f7f9 f9bf 	bl	8010260 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016ee2:	e0c5      	b.n	8017070 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ee6:	330e      	adds	r3, #14
 8016ee8:	4619      	mov	r1, r3
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f7f9 f922 	bl	8010134 <pbuf_add_header>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d04b      	beq.n	8016f8e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	891a      	ldrh	r2, [r3, #8]
 8016efa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016efc:	4413      	add	r3, r2
 8016efe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	891b      	ldrh	r3, [r3, #8]
 8016f04:	8b7a      	ldrh	r2, [r7, #26]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	f0c0 80ab 	bcc.w	8017062 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f0c:	8b7b      	ldrh	r3, [r7, #26]
 8016f0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f12:	4619      	mov	r1, r3
 8016f14:	200e      	movs	r0, #14
 8016f16:	f7f8 febf 	bl	800fc98 <pbuf_alloc>
 8016f1a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f1c:	697b      	ldr	r3, [r7, #20]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f000 80a1 	beq.w	8017066 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	895b      	ldrh	r3, [r3, #10]
 8016f28:	461a      	mov	r2, r3
 8016f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f2c:	3308      	adds	r3, #8
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d203      	bcs.n	8016f3a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f32:	6978      	ldr	r0, [r7, #20]
 8016f34:	f7f9 f994 	bl	8010260 <pbuf_free>
          goto icmperr;
 8016f38:	e096      	b.n	8017068 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f42:	4618      	mov	r0, r3
 8016f44:	f002 fa1c 	bl	8019380 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	6978      	ldr	r0, [r7, #20]
 8016f4e:	f7f9 f901 	bl	8010154 <pbuf_remove_header>
 8016f52:	4603      	mov	r3, r0
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d009      	beq.n	8016f6c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016f58:	4b49      	ldr	r3, [pc, #292]	; (8017080 <icmp_input+0x230>)
 8016f5a:	22b6      	movs	r2, #182	; 0xb6
 8016f5c:	4949      	ldr	r1, [pc, #292]	; (8017084 <icmp_input+0x234>)
 8016f5e:	484a      	ldr	r0, [pc, #296]	; (8017088 <icmp_input+0x238>)
 8016f60:	f002 f840 	bl	8018fe4 <iprintf>
          pbuf_free(r);
 8016f64:	6978      	ldr	r0, [r7, #20]
 8016f66:	f7f9 f97b 	bl	8010260 <pbuf_free>
          goto icmperr;
 8016f6a:	e07d      	b.n	8017068 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016f6c:	6879      	ldr	r1, [r7, #4]
 8016f6e:	6978      	ldr	r0, [r7, #20]
 8016f70:	f7f9 fa8e 	bl	8010490 <pbuf_copy>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d003      	beq.n	8016f82 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016f7a:	6978      	ldr	r0, [r7, #20]
 8016f7c:	f7f9 f970 	bl	8010260 <pbuf_free>
          goto icmperr;
 8016f80:	e072      	b.n	8017068 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f7f9 f96c 	bl	8010260 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	607b      	str	r3, [r7, #4]
 8016f8c:	e00f      	b.n	8016fae <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f90:	330e      	adds	r3, #14
 8016f92:	4619      	mov	r1, r3
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f7f9 f8dd 	bl	8010154 <pbuf_remove_header>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d006      	beq.n	8016fae <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016fa0:	4b37      	ldr	r3, [pc, #220]	; (8017080 <icmp_input+0x230>)
 8016fa2:	22c7      	movs	r2, #199	; 0xc7
 8016fa4:	4939      	ldr	r1, [pc, #228]	; (801708c <icmp_input+0x23c>)
 8016fa6:	4838      	ldr	r0, [pc, #224]	; (8017088 <icmp_input+0x238>)
 8016fa8:	f002 f81c 	bl	8018fe4 <iprintf>
          goto icmperr;
 8016fac:	e05c      	b.n	8017068 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f7f9 f8bb 	bl	8010134 <pbuf_add_header>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d13c      	bne.n	801703e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016fd2:	4b29      	ldr	r3, [pc, #164]	; (8017078 <icmp_input+0x228>)
 8016fd4:	691a      	ldr	r2, [r3, #16]
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	885b      	ldrh	r3, [r3, #2]
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016fea:	4293      	cmp	r3, r2
 8016fec:	d907      	bls.n	8016ffe <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	885b      	ldrh	r3, [r3, #2]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	3309      	adds	r3, #9
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	805a      	strh	r2, [r3, #2]
 8016ffc:	e006      	b.n	801700c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8016ffe:	693b      	ldr	r3, [r7, #16]
 8017000:	885b      	ldrh	r3, [r3, #2]
 8017002:	b29b      	uxth	r3, r3
 8017004:	3308      	adds	r3, #8
 8017006:	b29a      	uxth	r2, r3
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	22ff      	movs	r2, #255	; 0xff
 8017010:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2200      	movs	r2, #0
 8017016:	729a      	strb	r2, [r3, #10]
 8017018:	2200      	movs	r2, #0
 801701a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	9302      	str	r3, [sp, #8]
 8017020:	2301      	movs	r3, #1
 8017022:	9301      	str	r3, [sp, #4]
 8017024:	2300      	movs	r3, #0
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	23ff      	movs	r3, #255	; 0xff
 801702a:	2200      	movs	r2, #0
 801702c:	69f9      	ldr	r1, [r7, #28]
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f000 fa80 	bl	8017534 <ip4_output_if>
 8017034:	4603      	mov	r3, r0
 8017036:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017038:	e001      	b.n	801703e <icmp_input+0x1ee>
      break;
 801703a:	bf00      	nop
 801703c:	e000      	b.n	8017040 <icmp_input+0x1f0>
      break;
 801703e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7f9 f90d 	bl	8010260 <pbuf_free>
  return;
 8017046:	e013      	b.n	8017070 <icmp_input+0x220>
    goto lenerr;
 8017048:	bf00      	nop
 801704a:	e002      	b.n	8017052 <icmp_input+0x202>
    goto lenerr;
 801704c:	bf00      	nop
 801704e:	e000      	b.n	8017052 <icmp_input+0x202>
        goto lenerr;
 8017050:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f7f9 f904 	bl	8010260 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017058:	e00a      	b.n	8017070 <icmp_input+0x220>
        goto icmperr;
 801705a:	bf00      	nop
 801705c:	e004      	b.n	8017068 <icmp_input+0x218>
        goto icmperr;
 801705e:	bf00      	nop
 8017060:	e002      	b.n	8017068 <icmp_input+0x218>
          goto icmperr;
 8017062:	bf00      	nop
 8017064:	e000      	b.n	8017068 <icmp_input+0x218>
          goto icmperr;
 8017066:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7f9 f8f9 	bl	8010260 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801706e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017070:	3728      	adds	r7, #40	; 0x28
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	200050dc 	.word	0x200050dc
 801707c:	200050f0 	.word	0x200050f0
 8017080:	0801dc58 	.word	0x0801dc58
 8017084:	0801dc90 	.word	0x0801dc90
 8017088:	0801dcc8 	.word	0x0801dcc8
 801708c:	0801dcf0 	.word	0x0801dcf0

08017090 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
 8017098:	460b      	mov	r3, r1
 801709a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801709c:	78fb      	ldrb	r3, [r7, #3]
 801709e:	461a      	mov	r2, r3
 80170a0:	2103      	movs	r1, #3
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f000 f814 	bl	80170d0 <icmp_send_response>
}
 80170a8:	bf00      	nop
 80170aa:	3708      	adds	r7, #8
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}

080170b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b082      	sub	sp, #8
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
 80170b8:	460b      	mov	r3, r1
 80170ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80170bc:	78fb      	ldrb	r3, [r7, #3]
 80170be:	461a      	mov	r2, r3
 80170c0:	210b      	movs	r1, #11
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f000 f804 	bl	80170d0 <icmp_send_response>
}
 80170c8:	bf00      	nop
 80170ca:	3708      	adds	r7, #8
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b08c      	sub	sp, #48	; 0x30
 80170d4:	af04      	add	r7, sp, #16
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	460b      	mov	r3, r1
 80170da:	70fb      	strb	r3, [r7, #3]
 80170dc:	4613      	mov	r3, r2
 80170de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80170e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170e4:	2124      	movs	r1, #36	; 0x24
 80170e6:	2022      	movs	r0, #34	; 0x22
 80170e8:	f7f8 fdd6 	bl	800fc98 <pbuf_alloc>
 80170ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d056      	beq.n	80171a2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	895b      	ldrh	r3, [r3, #10]
 80170f8:	2b23      	cmp	r3, #35	; 0x23
 80170fa:	d806      	bhi.n	801710a <icmp_send_response+0x3a>
 80170fc:	4b2b      	ldr	r3, [pc, #172]	; (80171ac <icmp_send_response+0xdc>)
 80170fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017102:	492b      	ldr	r1, [pc, #172]	; (80171b0 <icmp_send_response+0xe0>)
 8017104:	482b      	ldr	r0, [pc, #172]	; (80171b4 <icmp_send_response+0xe4>)
 8017106:	f001 ff6d 	bl	8018fe4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017110:	69fb      	ldr	r3, [r7, #28]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	78fa      	ldrb	r2, [r7, #3]
 801711a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	78ba      	ldrb	r2, [r7, #2]
 8017120:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	2200      	movs	r2, #0
 8017126:	711a      	strb	r2, [r3, #4]
 8017128:	2200      	movs	r2, #0
 801712a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	2200      	movs	r2, #0
 8017130:	719a      	strb	r2, [r3, #6]
 8017132:	2200      	movs	r2, #0
 8017134:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	f103 0008 	add.w	r0, r3, #8
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	221c      	movs	r2, #28
 8017144:	4619      	mov	r1, r3
 8017146:	f002 f91b 	bl	8019380 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	68db      	ldr	r3, [r3, #12]
 801714e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017150:	f107 030c 	add.w	r3, r7, #12
 8017154:	4618      	mov	r0, r3
 8017156:	f000 f82f 	bl	80171b8 <ip4_route>
 801715a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801715c:	693b      	ldr	r3, [r7, #16]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d01b      	beq.n	801719a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	2200      	movs	r2, #0
 8017166:	709a      	strb	r2, [r3, #2]
 8017168:	2200      	movs	r2, #0
 801716a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	895b      	ldrh	r3, [r3, #10]
 8017170:	4619      	mov	r1, r3
 8017172:	6978      	ldr	r0, [r7, #20]
 8017174:	f7f7 fd09 	bl	800eb8a <inet_chksum>
 8017178:	4603      	mov	r3, r0
 801717a:	461a      	mov	r2, r3
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017180:	f107 020c 	add.w	r2, r7, #12
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	9302      	str	r3, [sp, #8]
 8017188:	2301      	movs	r3, #1
 801718a:	9301      	str	r3, [sp, #4]
 801718c:	2300      	movs	r3, #0
 801718e:	9300      	str	r3, [sp, #0]
 8017190:	23ff      	movs	r3, #255	; 0xff
 8017192:	2100      	movs	r1, #0
 8017194:	69f8      	ldr	r0, [r7, #28]
 8017196:	f000 f9cd 	bl	8017534 <ip4_output_if>
  }
  pbuf_free(q);
 801719a:	69f8      	ldr	r0, [r7, #28]
 801719c:	f7f9 f860 	bl	8010260 <pbuf_free>
 80171a0:	e000      	b.n	80171a4 <icmp_send_response+0xd4>
    return;
 80171a2:	bf00      	nop
}
 80171a4:	3720      	adds	r7, #32
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
 80171aa:	bf00      	nop
 80171ac:	0801dc58 	.word	0x0801dc58
 80171b0:	0801dd24 	.word	0x0801dd24
 80171b4:	0801dcc8 	.word	0x0801dcc8

080171b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b085      	sub	sp, #20
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80171c0:	4b33      	ldr	r3, [pc, #204]	; (8017290 <ip4_route+0xd8>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	60fb      	str	r3, [r7, #12]
 80171c6:	e036      	b.n	8017236 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171ce:	f003 0301 	and.w	r3, r3, #1
 80171d2:	b2db      	uxtb	r3, r3
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d02b      	beq.n	8017230 <ip4_route+0x78>
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80171de:	089b      	lsrs	r3, r3, #2
 80171e0:	f003 0301 	and.w	r3, r3, #1
 80171e4:	b2db      	uxtb	r3, r3
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d022      	beq.n	8017230 <ip4_route+0x78>
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	3304      	adds	r3, #4
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d01d      	beq.n	8017230 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681a      	ldr	r2, [r3, #0]
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	3304      	adds	r3, #4
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	405a      	eors	r2, r3
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	3308      	adds	r3, #8
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	4013      	ands	r3, r2
 8017208:	2b00      	cmp	r3, #0
 801720a:	d101      	bne.n	8017210 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	e038      	b.n	8017282 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017216:	f003 0302 	and.w	r3, r3, #2
 801721a:	2b00      	cmp	r3, #0
 801721c:	d108      	bne.n	8017230 <ip4_route+0x78>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681a      	ldr	r2, [r3, #0]
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	330c      	adds	r3, #12
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	429a      	cmp	r2, r3
 801722a:	d101      	bne.n	8017230 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	e028      	b.n	8017282 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	60fb      	str	r3, [r7, #12]
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d1c5      	bne.n	80171c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801723c:	4b15      	ldr	r3, [pc, #84]	; (8017294 <ip4_route+0xdc>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d01a      	beq.n	801727a <ip4_route+0xc2>
 8017244:	4b13      	ldr	r3, [pc, #76]	; (8017294 <ip4_route+0xdc>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801724c:	f003 0301 	and.w	r3, r3, #1
 8017250:	2b00      	cmp	r3, #0
 8017252:	d012      	beq.n	801727a <ip4_route+0xc2>
 8017254:	4b0f      	ldr	r3, [pc, #60]	; (8017294 <ip4_route+0xdc>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801725c:	f003 0304 	and.w	r3, r3, #4
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00a      	beq.n	801727a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017264:	4b0b      	ldr	r3, [pc, #44]	; (8017294 <ip4_route+0xdc>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	3304      	adds	r3, #4
 801726a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801726c:	2b00      	cmp	r3, #0
 801726e:	d004      	beq.n	801727a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b7f      	cmp	r3, #127	; 0x7f
 8017278:	d101      	bne.n	801727e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801727a:	2300      	movs	r3, #0
 801727c:	e001      	b.n	8017282 <ip4_route+0xca>
  }

  return netif_default;
 801727e:	4b05      	ldr	r3, [pc, #20]	; (8017294 <ip4_route+0xdc>)
 8017280:	681b      	ldr	r3, [r3, #0]
}
 8017282:	4618      	mov	r0, r3
 8017284:	3714      	adds	r7, #20
 8017286:	46bd      	mov	sp, r7
 8017288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728c:	4770      	bx	lr
 801728e:	bf00      	nop
 8017290:	20007fec 	.word	0x20007fec
 8017294:	20007ff0 	.word	0x20007ff0

08017298 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172a6:	f003 0301 	and.w	r3, r3, #1
 80172aa:	b2db      	uxtb	r3, r3
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d016      	beq.n	80172de <ip4_input_accept+0x46>
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	3304      	adds	r3, #4
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d011      	beq.n	80172de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172ba:	4b0b      	ldr	r3, [pc, #44]	; (80172e8 <ip4_input_accept+0x50>)
 80172bc:	695a      	ldr	r2, [r3, #20]
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	3304      	adds	r3, #4
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	429a      	cmp	r2, r3
 80172c6:	d008      	beq.n	80172da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80172c8:	4b07      	ldr	r3, [pc, #28]	; (80172e8 <ip4_input_accept+0x50>)
 80172ca:	695b      	ldr	r3, [r3, #20]
 80172cc:	6879      	ldr	r1, [r7, #4]
 80172ce:	4618      	mov	r0, r3
 80172d0:	f000 fa08 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 80172d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d001      	beq.n	80172de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80172da:	2301      	movs	r3, #1
 80172dc:	e000      	b.n	80172e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80172de:	2300      	movs	r3, #0
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	200050dc 	.word	0x200050dc

080172ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b086      	sub	sp, #24
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	091b      	lsrs	r3, r3, #4
 8017302:	b2db      	uxtb	r3, r3
 8017304:	2b04      	cmp	r3, #4
 8017306:	d004      	beq.n	8017312 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f7f8 ffa9 	bl	8010260 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801730e:	2300      	movs	r3, #0
 8017310:	e107      	b.n	8017522 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	f003 030f 	and.w	r3, r3, #15
 801731a:	b2db      	uxtb	r3, r3
 801731c:	009b      	lsls	r3, r3, #2
 801731e:	b2db      	uxtb	r3, r3
 8017320:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	885b      	ldrh	r3, [r3, #2]
 8017326:	b29b      	uxth	r3, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7f7 fba3 	bl	800ea74 <lwip_htons>
 801732e:	4603      	mov	r3, r0
 8017330:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	891b      	ldrh	r3, [r3, #8]
 8017336:	89ba      	ldrh	r2, [r7, #12]
 8017338:	429a      	cmp	r2, r3
 801733a:	d204      	bcs.n	8017346 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801733c:	89bb      	ldrh	r3, [r7, #12]
 801733e:	4619      	mov	r1, r3
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7f8 fe07 	bl	800ff54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	895b      	ldrh	r3, [r3, #10]
 801734a:	89fa      	ldrh	r2, [r7, #14]
 801734c:	429a      	cmp	r2, r3
 801734e:	d807      	bhi.n	8017360 <ip4_input+0x74>
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	891b      	ldrh	r3, [r3, #8]
 8017354:	89ba      	ldrh	r2, [r7, #12]
 8017356:	429a      	cmp	r2, r3
 8017358:	d802      	bhi.n	8017360 <ip4_input+0x74>
 801735a:	89fb      	ldrh	r3, [r7, #14]
 801735c:	2b13      	cmp	r3, #19
 801735e:	d804      	bhi.n	801736a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7f8 ff7d 	bl	8010260 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017366:	2300      	movs	r3, #0
 8017368:	e0db      	b.n	8017522 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	691b      	ldr	r3, [r3, #16]
 801736e:	4a6f      	ldr	r2, [pc, #444]	; (801752c <ip4_input+0x240>)
 8017370:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	68db      	ldr	r3, [r3, #12]
 8017376:	4a6d      	ldr	r2, [pc, #436]	; (801752c <ip4_input+0x240>)
 8017378:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801737a:	4b6c      	ldr	r3, [pc, #432]	; (801752c <ip4_input+0x240>)
 801737c:	695b      	ldr	r3, [r3, #20]
 801737e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017382:	2be0      	cmp	r3, #224	; 0xe0
 8017384:	d112      	bne.n	80173ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801738c:	f003 0301 	and.w	r3, r3, #1
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d007      	beq.n	80173a6 <ip4_input+0xba>
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	3304      	adds	r3, #4
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d002      	beq.n	80173a6 <ip4_input+0xba>
      netif = inp;
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	613b      	str	r3, [r7, #16]
 80173a4:	e02a      	b.n	80173fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80173a6:	2300      	movs	r3, #0
 80173a8:	613b      	str	r3, [r7, #16]
 80173aa:	e027      	b.n	80173fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80173ac:	6838      	ldr	r0, [r7, #0]
 80173ae:	f7ff ff73 	bl	8017298 <ip4_input_accept>
 80173b2:	4603      	mov	r3, r0
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <ip4_input+0xd2>
      netif = inp;
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	613b      	str	r3, [r7, #16]
 80173bc:	e01e      	b.n	80173fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80173be:	2300      	movs	r3, #0
 80173c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80173c2:	4b5a      	ldr	r3, [pc, #360]	; (801752c <ip4_input+0x240>)
 80173c4:	695b      	ldr	r3, [r3, #20]
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	2b7f      	cmp	r3, #127	; 0x7f
 80173ca:	d017      	beq.n	80173fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80173cc:	4b58      	ldr	r3, [pc, #352]	; (8017530 <ip4_input+0x244>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	613b      	str	r3, [r7, #16]
 80173d2:	e00e      	b.n	80173f2 <ip4_input+0x106>
          if (netif == inp) {
 80173d4:	693a      	ldr	r2, [r7, #16]
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d006      	beq.n	80173ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80173dc:	6938      	ldr	r0, [r7, #16]
 80173de:	f7ff ff5b 	bl	8017298 <ip4_input_accept>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d108      	bne.n	80173fa <ip4_input+0x10e>
 80173e8:	e000      	b.n	80173ec <ip4_input+0x100>
            continue;
 80173ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80173ec:	693b      	ldr	r3, [r7, #16]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	613b      	str	r3, [r7, #16]
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d1ed      	bne.n	80173d4 <ip4_input+0xe8>
 80173f8:	e000      	b.n	80173fc <ip4_input+0x110>
            break;
 80173fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80173fc:	4b4b      	ldr	r3, [pc, #300]	; (801752c <ip4_input+0x240>)
 80173fe:	691b      	ldr	r3, [r3, #16]
 8017400:	6839      	ldr	r1, [r7, #0]
 8017402:	4618      	mov	r0, r3
 8017404:	f000 f96e 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 8017408:	4603      	mov	r3, r0
 801740a:	2b00      	cmp	r3, #0
 801740c:	d105      	bne.n	801741a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801740e:	4b47      	ldr	r3, [pc, #284]	; (801752c <ip4_input+0x240>)
 8017410:	691b      	ldr	r3, [r3, #16]
 8017412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017416:	2be0      	cmp	r3, #224	; 0xe0
 8017418:	d104      	bne.n	8017424 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f7f8 ff20 	bl	8010260 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017420:	2300      	movs	r3, #0
 8017422:	e07e      	b.n	8017522 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d104      	bne.n	8017434 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7f8 ff18 	bl	8010260 <pbuf_free>
    return ERR_OK;
 8017430:	2300      	movs	r3, #0
 8017432:	e076      	b.n	8017522 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	88db      	ldrh	r3, [r3, #6]
 8017438:	b29b      	uxth	r3, r3
 801743a:	461a      	mov	r2, r3
 801743c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017440:	4013      	ands	r3, r2
 8017442:	2b00      	cmp	r3, #0
 8017444:	d00b      	beq.n	801745e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 fc92 	bl	8017d70 <ip4_reass>
 801744c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d101      	bne.n	8017458 <ip4_input+0x16c>
      return ERR_OK;
 8017454:	2300      	movs	r3, #0
 8017456:	e064      	b.n	8017522 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801745e:	4a33      	ldr	r2, [pc, #204]	; (801752c <ip4_input+0x240>)
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017464:	4a31      	ldr	r2, [pc, #196]	; (801752c <ip4_input+0x240>)
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801746a:	4a30      	ldr	r2, [pc, #192]	; (801752c <ip4_input+0x240>)
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	f003 030f 	and.w	r3, r3, #15
 8017478:	b2db      	uxtb	r3, r3
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	b2db      	uxtb	r3, r3
 801747e:	b29a      	uxth	r2, r3
 8017480:	4b2a      	ldr	r3, [pc, #168]	; (801752c <ip4_input+0x240>)
 8017482:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017484:	89fb      	ldrh	r3, [r7, #14]
 8017486:	4619      	mov	r1, r3
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f7f8 fe63 	bl	8010154 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	7a5b      	ldrb	r3, [r3, #9]
 8017492:	2b11      	cmp	r3, #17
 8017494:	d006      	beq.n	80174a4 <ip4_input+0x1b8>
 8017496:	2b11      	cmp	r3, #17
 8017498:	dc13      	bgt.n	80174c2 <ip4_input+0x1d6>
 801749a:	2b01      	cmp	r3, #1
 801749c:	d00c      	beq.n	80174b8 <ip4_input+0x1cc>
 801749e:	2b06      	cmp	r3, #6
 80174a0:	d005      	beq.n	80174ae <ip4_input+0x1c2>
 80174a2:	e00e      	b.n	80174c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80174a4:	6839      	ldr	r1, [r7, #0]
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7fe fc42 	bl	8015d30 <udp_input>
        break;
 80174ac:	e026      	b.n	80174fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80174ae:	6839      	ldr	r1, [r7, #0]
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f7fa fcfd 	bl	8011eb0 <tcp_input>
        break;
 80174b6:	e021      	b.n	80174fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80174b8:	6839      	ldr	r1, [r7, #0]
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f7ff fcc8 	bl	8016e50 <icmp_input>
        break;
 80174c0:	e01c      	b.n	80174fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174c2:	4b1a      	ldr	r3, [pc, #104]	; (801752c <ip4_input+0x240>)
 80174c4:	695b      	ldr	r3, [r3, #20]
 80174c6:	6939      	ldr	r1, [r7, #16]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f000 f90b 	bl	80176e4 <ip4_addr_isbroadcast_u32>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d10f      	bne.n	80174f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80174d4:	4b15      	ldr	r3, [pc, #84]	; (801752c <ip4_input+0x240>)
 80174d6:	695b      	ldr	r3, [r3, #20]
 80174d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174dc:	2be0      	cmp	r3, #224	; 0xe0
 80174de:	d009      	beq.n	80174f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80174e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80174e4:	4619      	mov	r1, r3
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f7f8 fea7 	bl	801023a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80174ec:	2102      	movs	r1, #2
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7ff fdce 	bl	8017090 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7f8 feb3 	bl	8010260 <pbuf_free>
        break;
 80174fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80174fc:	4b0b      	ldr	r3, [pc, #44]	; (801752c <ip4_input+0x240>)
 80174fe:	2200      	movs	r2, #0
 8017500:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017502:	4b0a      	ldr	r3, [pc, #40]	; (801752c <ip4_input+0x240>)
 8017504:	2200      	movs	r2, #0
 8017506:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017508:	4b08      	ldr	r3, [pc, #32]	; (801752c <ip4_input+0x240>)
 801750a:	2200      	movs	r2, #0
 801750c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801750e:	4b07      	ldr	r3, [pc, #28]	; (801752c <ip4_input+0x240>)
 8017510:	2200      	movs	r2, #0
 8017512:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017514:	4b05      	ldr	r3, [pc, #20]	; (801752c <ip4_input+0x240>)
 8017516:	2200      	movs	r2, #0
 8017518:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801751a:	4b04      	ldr	r3, [pc, #16]	; (801752c <ip4_input+0x240>)
 801751c:	2200      	movs	r2, #0
 801751e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017520:	2300      	movs	r3, #0
}
 8017522:	4618      	mov	r0, r3
 8017524:	3718      	adds	r7, #24
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	200050dc 	.word	0x200050dc
 8017530:	20007fec 	.word	0x20007fec

08017534 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b08a      	sub	sp, #40	; 0x28
 8017538:	af04      	add	r7, sp, #16
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
 8017540:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d009      	beq.n	8017560 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d003      	beq.n	801755a <ip4_output_if+0x26>
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d102      	bne.n	8017560 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755c:	3304      	adds	r3, #4
 801755e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017560:	78fa      	ldrb	r2, [r7, #3]
 8017562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017564:	9302      	str	r3, [sp, #8]
 8017566:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801756a:	9301      	str	r3, [sp, #4]
 801756c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017570:	9300      	str	r3, [sp, #0]
 8017572:	4613      	mov	r3, r2
 8017574:	687a      	ldr	r2, [r7, #4]
 8017576:	6979      	ldr	r1, [r7, #20]
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f000 f805 	bl	8017588 <ip4_output_if_src>
 801757e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017580:	4618      	mov	r0, r3
 8017582:	3718      	adds	r7, #24
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b088      	sub	sp, #32
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	7b9b      	ldrb	r3, [r3, #14]
 801759a:	2b01      	cmp	r3, #1
 801759c:	d006      	beq.n	80175ac <ip4_output_if_src+0x24>
 801759e:	4b4b      	ldr	r3, [pc, #300]	; (80176cc <ip4_output_if_src+0x144>)
 80175a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80175a4:	494a      	ldr	r1, [pc, #296]	; (80176d0 <ip4_output_if_src+0x148>)
 80175a6:	484b      	ldr	r0, [pc, #300]	; (80176d4 <ip4_output_if_src+0x14c>)
 80175a8:	f001 fd1c 	bl	8018fe4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d060      	beq.n	8017674 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80175b2:	2314      	movs	r3, #20
 80175b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80175b6:	2114      	movs	r1, #20
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	f7f8 fdbb 	bl	8010134 <pbuf_add_header>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d002      	beq.n	80175ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80175c4:	f06f 0301 	mvn.w	r3, #1
 80175c8:	e07c      	b.n	80176c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	895b      	ldrh	r3, [r3, #10]
 80175d4:	2b13      	cmp	r3, #19
 80175d6:	d806      	bhi.n	80175e6 <ip4_output_if_src+0x5e>
 80175d8:	4b3c      	ldr	r3, [pc, #240]	; (80176cc <ip4_output_if_src+0x144>)
 80175da:	f44f 7262 	mov.w	r2, #904	; 0x388
 80175de:	493e      	ldr	r1, [pc, #248]	; (80176d8 <ip4_output_if_src+0x150>)
 80175e0:	483c      	ldr	r0, [pc, #240]	; (80176d4 <ip4_output_if_src+0x14c>)
 80175e2:	f001 fcff 	bl	8018fe4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	78fa      	ldrb	r2, [r7, #3]
 80175ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80175ec:	69fb      	ldr	r3, [r7, #28]
 80175ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80175f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80175fc:	8b7b      	ldrh	r3, [r7, #26]
 80175fe:	089b      	lsrs	r3, r3, #2
 8017600:	b29b      	uxth	r3, r3
 8017602:	b2db      	uxtb	r3, r3
 8017604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017608:	b2da      	uxtb	r2, r3
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017614:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	891b      	ldrh	r3, [r3, #8]
 801761a:	4618      	mov	r0, r3
 801761c:	f7f7 fa2a 	bl	800ea74 <lwip_htons>
 8017620:	4603      	mov	r3, r0
 8017622:	461a      	mov	r2, r3
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	2200      	movs	r2, #0
 801762c:	719a      	strb	r2, [r3, #6]
 801762e:	2200      	movs	r2, #0
 8017630:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017632:	4b2a      	ldr	r3, [pc, #168]	; (80176dc <ip4_output_if_src+0x154>)
 8017634:	881b      	ldrh	r3, [r3, #0]
 8017636:	4618      	mov	r0, r3
 8017638:	f7f7 fa1c 	bl	800ea74 <lwip_htons>
 801763c:	4603      	mov	r3, r0
 801763e:	461a      	mov	r2, r3
 8017640:	69fb      	ldr	r3, [r7, #28]
 8017642:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017644:	4b25      	ldr	r3, [pc, #148]	; (80176dc <ip4_output_if_src+0x154>)
 8017646:	881b      	ldrh	r3, [r3, #0]
 8017648:	3301      	adds	r3, #1
 801764a:	b29a      	uxth	r2, r3
 801764c:	4b23      	ldr	r3, [pc, #140]	; (80176dc <ip4_output_if_src+0x154>)
 801764e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d104      	bne.n	8017660 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017656:	4b22      	ldr	r3, [pc, #136]	; (80176e0 <ip4_output_if_src+0x158>)
 8017658:	681a      	ldr	r2, [r3, #0]
 801765a:	69fb      	ldr	r3, [r7, #28]
 801765c:	60da      	str	r2, [r3, #12]
 801765e:	e003      	b.n	8017668 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	69fb      	ldr	r3, [r7, #28]
 8017666:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017668:	69fb      	ldr	r3, [r7, #28]
 801766a:	2200      	movs	r2, #0
 801766c:	729a      	strb	r2, [r3, #10]
 801766e:	2200      	movs	r2, #0
 8017670:	72da      	strb	r2, [r3, #11]
 8017672:	e00f      	b.n	8017694 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	895b      	ldrh	r3, [r3, #10]
 8017678:	2b13      	cmp	r3, #19
 801767a:	d802      	bhi.n	8017682 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801767c:	f06f 0301 	mvn.w	r3, #1
 8017680:	e020      	b.n	80176c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017688:	69fb      	ldr	r3, [r7, #28]
 801768a:	691b      	ldr	r3, [r3, #16]
 801768c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801768e:	f107 0314 	add.w	r3, r7, #20
 8017692:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017696:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017698:	2b00      	cmp	r3, #0
 801769a:	d00c      	beq.n	80176b6 <ip4_output_if_src+0x12e>
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	891a      	ldrh	r2, [r3, #8]
 80176a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d906      	bls.n	80176b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	f000 fd53 	bl	8018158 <ip4_frag>
 80176b2:	4603      	mov	r3, r0
 80176b4:	e006      	b.n	80176c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80176b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b8:	695b      	ldr	r3, [r3, #20]
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	68f9      	ldr	r1, [r7, #12]
 80176be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176c0:	4798      	blx	r3
 80176c2:	4603      	mov	r3, r0
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3720      	adds	r7, #32
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}
 80176cc:	0801dd50 	.word	0x0801dd50
 80176d0:	0801dd84 	.word	0x0801dd84
 80176d4:	0801dd90 	.word	0x0801dd90
 80176d8:	0801ddb8 	.word	0x0801ddb8
 80176dc:	2000814a 	.word	0x2000814a
 80176e0:	0801e1d4 	.word	0x0801e1d4

080176e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80176e4:	b480      	push	{r7}
 80176e6:	b085      	sub	sp, #20
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
 80176ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176f8:	d002      	beq.n	8017700 <ip4_addr_isbroadcast_u32+0x1c>
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d101      	bne.n	8017704 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017700:	2301      	movs	r3, #1
 8017702:	e02a      	b.n	801775a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801770a:	f003 0302 	and.w	r3, r3, #2
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017712:	2300      	movs	r3, #0
 8017714:	e021      	b.n	801775a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	3304      	adds	r3, #4
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	429a      	cmp	r2, r3
 8017720:	d101      	bne.n	8017726 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017722:	2300      	movs	r3, #0
 8017724:	e019      	b.n	801775a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017726:	68fa      	ldr	r2, [r7, #12]
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	3304      	adds	r3, #4
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	405a      	eors	r2, r3
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	3308      	adds	r3, #8
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	4013      	ands	r3, r2
 8017738:	2b00      	cmp	r3, #0
 801773a:	d10d      	bne.n	8017758 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	3308      	adds	r3, #8
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	43da      	mvns	r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	3308      	adds	r3, #8
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017750:	429a      	cmp	r2, r3
 8017752:	d101      	bne.n	8017758 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017754:	2301      	movs	r3, #1
 8017756:	e000      	b.n	801775a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017758:	2300      	movs	r3, #0
  }
}
 801775a:	4618      	mov	r0, r3
 801775c:	3714      	adds	r7, #20
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr
	...

08017768 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801776e:	2300      	movs	r3, #0
 8017770:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017772:	4b12      	ldr	r3, [pc, #72]	; (80177bc <ip_reass_tmr+0x54>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017778:	e018      	b.n	80177ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7fdb      	ldrb	r3, [r3, #31]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d00b      	beq.n	801779a <ip_reass_tmr+0x32>
      r->timer--;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7fdb      	ldrb	r3, [r3, #31]
 8017786:	3b01      	subs	r3, #1
 8017788:	b2da      	uxtb	r2, r3
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	60fb      	str	r3, [r7, #12]
 8017798:	e008      	b.n	80177ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177a4:	68b9      	ldr	r1, [r7, #8]
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f000 f80a 	bl	80177c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d1e3      	bne.n	801777a <ip_reass_tmr+0x12>
    }
  }
}
 80177b2:	bf00      	nop
 80177b4:	bf00      	nop
 80177b6:	3710      	adds	r7, #16
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	2000814c 	.word	0x2000814c

080177c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b088      	sub	sp, #32
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80177ca:	2300      	movs	r3, #0
 80177cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80177ce:	683a      	ldr	r2, [r7, #0]
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d105      	bne.n	80177e2 <ip_reass_free_complete_datagram+0x22>
 80177d6:	4b45      	ldr	r3, [pc, #276]	; (80178ec <ip_reass_free_complete_datagram+0x12c>)
 80177d8:	22ab      	movs	r2, #171	; 0xab
 80177da:	4945      	ldr	r1, [pc, #276]	; (80178f0 <ip_reass_free_complete_datagram+0x130>)
 80177dc:	4845      	ldr	r0, [pc, #276]	; (80178f4 <ip_reass_free_complete_datagram+0x134>)
 80177de:	f001 fc01 	bl	8018fe4 <iprintf>
  if (prev != NULL) {
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d00a      	beq.n	80177fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d005      	beq.n	80177fe <ip_reass_free_complete_datagram+0x3e>
 80177f2:	4b3e      	ldr	r3, [pc, #248]	; (80178ec <ip_reass_free_complete_datagram+0x12c>)
 80177f4:	22ad      	movs	r2, #173	; 0xad
 80177f6:	4940      	ldr	r1, [pc, #256]	; (80178f8 <ip_reass_free_complete_datagram+0x138>)
 80177f8:	483e      	ldr	r0, [pc, #248]	; (80178f4 <ip_reass_free_complete_datagram+0x134>)
 80177fa:	f001 fbf3 	bl	8018fe4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	685b      	ldr	r3, [r3, #4]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	889b      	ldrh	r3, [r3, #4]
 801780a:	b29b      	uxth	r3, r3
 801780c:	2b00      	cmp	r3, #0
 801780e:	d12a      	bne.n	8017866 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	685b      	ldr	r3, [r3, #4]
 8017814:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	681a      	ldr	r2, [r3, #0]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	6858      	ldr	r0, [r3, #4]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3308      	adds	r3, #8
 8017826:	2214      	movs	r2, #20
 8017828:	4619      	mov	r1, r3
 801782a:	f001 fda9 	bl	8019380 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801782e:	2101      	movs	r1, #1
 8017830:	69b8      	ldr	r0, [r7, #24]
 8017832:	f7ff fc3d 	bl	80170b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017836:	69b8      	ldr	r0, [r7, #24]
 8017838:	f7f8 fd9a 	bl	8010370 <pbuf_clen>
 801783c:	4603      	mov	r3, r0
 801783e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017840:	8bfa      	ldrh	r2, [r7, #30]
 8017842:	8a7b      	ldrh	r3, [r7, #18]
 8017844:	4413      	add	r3, r2
 8017846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801784a:	db05      	blt.n	8017858 <ip_reass_free_complete_datagram+0x98>
 801784c:	4b27      	ldr	r3, [pc, #156]	; (80178ec <ip_reass_free_complete_datagram+0x12c>)
 801784e:	22bc      	movs	r2, #188	; 0xbc
 8017850:	492a      	ldr	r1, [pc, #168]	; (80178fc <ip_reass_free_complete_datagram+0x13c>)
 8017852:	4828      	ldr	r0, [pc, #160]	; (80178f4 <ip_reass_free_complete_datagram+0x134>)
 8017854:	f001 fbc6 	bl	8018fe4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017858:	8bfa      	ldrh	r2, [r7, #30]
 801785a:	8a7b      	ldrh	r3, [r7, #18]
 801785c:	4413      	add	r3, r2
 801785e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017860:	69b8      	ldr	r0, [r7, #24]
 8017862:	f7f8 fcfd 	bl	8010260 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801786c:	e01f      	b.n	80178ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801786e:	69bb      	ldr	r3, [r7, #24]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017874:	69bb      	ldr	r3, [r7, #24]
 8017876:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017878:	697b      	ldr	r3, [r7, #20]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	f7f8 fd76 	bl	8010370 <pbuf_clen>
 8017884:	4603      	mov	r3, r0
 8017886:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017888:	8bfa      	ldrh	r2, [r7, #30]
 801788a:	8a7b      	ldrh	r3, [r7, #18]
 801788c:	4413      	add	r3, r2
 801788e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017892:	db05      	blt.n	80178a0 <ip_reass_free_complete_datagram+0xe0>
 8017894:	4b15      	ldr	r3, [pc, #84]	; (80178ec <ip_reass_free_complete_datagram+0x12c>)
 8017896:	22cc      	movs	r2, #204	; 0xcc
 8017898:	4918      	ldr	r1, [pc, #96]	; (80178fc <ip_reass_free_complete_datagram+0x13c>)
 801789a:	4816      	ldr	r0, [pc, #88]	; (80178f4 <ip_reass_free_complete_datagram+0x134>)
 801789c:	f001 fba2 	bl	8018fe4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178a0:	8bfa      	ldrh	r2, [r7, #30]
 80178a2:	8a7b      	ldrh	r3, [r7, #18]
 80178a4:	4413      	add	r3, r2
 80178a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178a8:	68f8      	ldr	r0, [r7, #12]
 80178aa:	f7f8 fcd9 	bl	8010260 <pbuf_free>
  while (p != NULL) {
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d1dc      	bne.n	801786e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178b4:	6839      	ldr	r1, [r7, #0]
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f000 f8c2 	bl	8017a40 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178bc:	4b10      	ldr	r3, [pc, #64]	; (8017900 <ip_reass_free_complete_datagram+0x140>)
 80178be:	881b      	ldrh	r3, [r3, #0]
 80178c0:	8bfa      	ldrh	r2, [r7, #30]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d905      	bls.n	80178d2 <ip_reass_free_complete_datagram+0x112>
 80178c6:	4b09      	ldr	r3, [pc, #36]	; (80178ec <ip_reass_free_complete_datagram+0x12c>)
 80178c8:	22d2      	movs	r2, #210	; 0xd2
 80178ca:	490e      	ldr	r1, [pc, #56]	; (8017904 <ip_reass_free_complete_datagram+0x144>)
 80178cc:	4809      	ldr	r0, [pc, #36]	; (80178f4 <ip_reass_free_complete_datagram+0x134>)
 80178ce:	f001 fb89 	bl	8018fe4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80178d2:	4b0b      	ldr	r3, [pc, #44]	; (8017900 <ip_reass_free_complete_datagram+0x140>)
 80178d4:	881a      	ldrh	r2, [r3, #0]
 80178d6:	8bfb      	ldrh	r3, [r7, #30]
 80178d8:	1ad3      	subs	r3, r2, r3
 80178da:	b29a      	uxth	r2, r3
 80178dc:	4b08      	ldr	r3, [pc, #32]	; (8017900 <ip_reass_free_complete_datagram+0x140>)
 80178de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80178e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3720      	adds	r7, #32
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
 80178ea:	bf00      	nop
 80178ec:	0801dde8 	.word	0x0801dde8
 80178f0:	0801de24 	.word	0x0801de24
 80178f4:	0801de30 	.word	0x0801de30
 80178f8:	0801de58 	.word	0x0801de58
 80178fc:	0801de6c 	.word	0x0801de6c
 8017900:	20008150 	.word	0x20008150
 8017904:	0801de8c 	.word	0x0801de8c

08017908 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b08a      	sub	sp, #40	; 0x28
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017912:	2300      	movs	r3, #0
 8017914:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017916:	2300      	movs	r3, #0
 8017918:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801791a:	2300      	movs	r3, #0
 801791c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801791e:	2300      	movs	r3, #0
 8017920:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017922:	2300      	movs	r3, #0
 8017924:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017926:	4b28      	ldr	r3, [pc, #160]	; (80179c8 <ip_reass_remove_oldest_datagram+0xc0>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801792c:	e030      	b.n	8017990 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017930:	695a      	ldr	r2, [r3, #20]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	429a      	cmp	r2, r3
 8017938:	d10c      	bne.n	8017954 <ip_reass_remove_oldest_datagram+0x4c>
 801793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801793c:	699a      	ldr	r2, [r3, #24]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	691b      	ldr	r3, [r3, #16]
 8017942:	429a      	cmp	r2, r3
 8017944:	d106      	bne.n	8017954 <ip_reass_remove_oldest_datagram+0x4c>
 8017946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017948:	899a      	ldrh	r2, [r3, #12]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	889b      	ldrh	r3, [r3, #4]
 801794e:	b29b      	uxth	r3, r3
 8017950:	429a      	cmp	r2, r3
 8017952:	d014      	beq.n	801797e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017954:	693b      	ldr	r3, [r7, #16]
 8017956:	3301      	adds	r3, #1
 8017958:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801795a:	6a3b      	ldr	r3, [r7, #32]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d104      	bne.n	801796a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017962:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017964:	69fb      	ldr	r3, [r7, #28]
 8017966:	61bb      	str	r3, [r7, #24]
 8017968:	e009      	b.n	801797e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	7fda      	ldrb	r2, [r3, #31]
 801796e:	6a3b      	ldr	r3, [r7, #32]
 8017970:	7fdb      	ldrb	r3, [r3, #31]
 8017972:	429a      	cmp	r2, r3
 8017974:	d803      	bhi.n	801797e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801797a:	69fb      	ldr	r3, [r7, #28]
 801797c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d001      	beq.n	801798a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017988:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017992:	2b00      	cmp	r3, #0
 8017994:	d1cb      	bne.n	801792e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017996:	6a3b      	ldr	r3, [r7, #32]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d008      	beq.n	80179ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801799c:	69b9      	ldr	r1, [r7, #24]
 801799e:	6a38      	ldr	r0, [r7, #32]
 80179a0:	f7ff ff0e 	bl	80177c0 <ip_reass_free_complete_datagram>
 80179a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179a6:	697a      	ldr	r2, [r7, #20]
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	4413      	add	r3, r2
 80179ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179ae:	697a      	ldr	r2, [r7, #20]
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	429a      	cmp	r2, r3
 80179b4:	da02      	bge.n	80179bc <ip_reass_remove_oldest_datagram+0xb4>
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	2b01      	cmp	r3, #1
 80179ba:	dcac      	bgt.n	8017916 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179bc:	697b      	ldr	r3, [r7, #20]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3728      	adds	r7, #40	; 0x28
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	2000814c 	.word	0x2000814c

080179cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b084      	sub	sp, #16
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179d6:	2004      	movs	r0, #4
 80179d8:	f7f7 fd7c 	bl	800f4d4 <memp_malloc>
 80179dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d110      	bne.n	8017a06 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80179e4:	6839      	ldr	r1, [r7, #0]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7ff ff8e 	bl	8017908 <ip_reass_remove_oldest_datagram>
 80179ec:	4602      	mov	r2, r0
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	4293      	cmp	r3, r2
 80179f2:	dc03      	bgt.n	80179fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179f4:	2004      	movs	r0, #4
 80179f6:	f7f7 fd6d 	bl	800f4d4 <memp_malloc>
 80179fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d101      	bne.n	8017a06 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a02:	2300      	movs	r3, #0
 8017a04:	e016      	b.n	8017a34 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a06:	2220      	movs	r2, #32
 8017a08:	2100      	movs	r1, #0
 8017a0a:	68f8      	ldr	r0, [r7, #12]
 8017a0c:	f001 fc40 	bl	8019290 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	220f      	movs	r2, #15
 8017a14:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a16:	4b09      	ldr	r3, [pc, #36]	; (8017a3c <ip_reass_enqueue_new_datagram+0x70>)
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a1e:	4a07      	ldr	r2, [pc, #28]	; (8017a3c <ip_reass_enqueue_new_datagram+0x70>)
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	3308      	adds	r3, #8
 8017a28:	2214      	movs	r2, #20
 8017a2a:	6879      	ldr	r1, [r7, #4]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f001 fca7 	bl	8019380 <memcpy>
  return ipr;
 8017a32:	68fb      	ldr	r3, [r7, #12]
}
 8017a34:	4618      	mov	r0, r3
 8017a36:	3710      	adds	r7, #16
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	bd80      	pop	{r7, pc}
 8017a3c:	2000814c 	.word	0x2000814c

08017a40 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a4a:	4b10      	ldr	r3, [pc, #64]	; (8017a8c <ip_reass_dequeue_datagram+0x4c>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	429a      	cmp	r2, r3
 8017a52:	d104      	bne.n	8017a5e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	4a0c      	ldr	r2, [pc, #48]	; (8017a8c <ip_reass_dequeue_datagram+0x4c>)
 8017a5a:	6013      	str	r3, [r2, #0]
 8017a5c:	e00d      	b.n	8017a7a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d106      	bne.n	8017a72 <ip_reass_dequeue_datagram+0x32>
 8017a64:	4b0a      	ldr	r3, [pc, #40]	; (8017a90 <ip_reass_dequeue_datagram+0x50>)
 8017a66:	f240 1245 	movw	r2, #325	; 0x145
 8017a6a:	490a      	ldr	r1, [pc, #40]	; (8017a94 <ip_reass_dequeue_datagram+0x54>)
 8017a6c:	480a      	ldr	r0, [pc, #40]	; (8017a98 <ip_reass_dequeue_datagram+0x58>)
 8017a6e:	f001 fab9 	bl	8018fe4 <iprintf>
    prev->next = ipr->next;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	683b      	ldr	r3, [r7, #0]
 8017a78:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017a7a:	6879      	ldr	r1, [r7, #4]
 8017a7c:	2004      	movs	r0, #4
 8017a7e:	f7f7 fd99 	bl	800f5b4 <memp_free>
}
 8017a82:	bf00      	nop
 8017a84:	3708      	adds	r7, #8
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	2000814c 	.word	0x2000814c
 8017a90:	0801dde8 	.word	0x0801dde8
 8017a94:	0801deb0 	.word	0x0801deb0
 8017a98:	0801de30 	.word	0x0801de30

08017a9c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b08c      	sub	sp, #48	; 0x30
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	60f8      	str	r0, [r7, #12]
 8017aa4:	60b9      	str	r1, [r7, #8]
 8017aa6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017aac:	2301      	movs	r3, #1
 8017aae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017ab6:	69fb      	ldr	r3, [r7, #28]
 8017ab8:	885b      	ldrh	r3, [r3, #2]
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7f6 ffd9 	bl	800ea74 <lwip_htons>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017ac6:	69fb      	ldr	r3, [r7, #28]
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	f003 030f 	and.w	r3, r3, #15
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	009b      	lsls	r3, r3, #2
 8017ad2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017ad4:	7e7b      	ldrb	r3, [r7, #25]
 8017ad6:	b29b      	uxth	r3, r3
 8017ad8:	8b7a      	ldrh	r2, [r7, #26]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d202      	bcs.n	8017ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ade:	f04f 33ff 	mov.w	r3, #4294967295
 8017ae2:	e135      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017ae4:	7e7b      	ldrb	r3, [r7, #25]
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	8b7a      	ldrh	r2, [r7, #26]
 8017aea:	1ad3      	subs	r3, r2, r3
 8017aec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017aee:	69fb      	ldr	r3, [r7, #28]
 8017af0:	88db      	ldrh	r3, [r3, #6]
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7f6 ffbd 	bl	800ea74 <lwip_htons>
 8017afa:	4603      	mov	r3, r0
 8017afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b00:	b29b      	uxth	r3, r3
 8017b02:	00db      	lsls	r3, r3, #3
 8017b04:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0e:	2200      	movs	r2, #0
 8017b10:	701a      	strb	r2, [r3, #0]
 8017b12:	2200      	movs	r2, #0
 8017b14:	705a      	strb	r2, [r3, #1]
 8017b16:	2200      	movs	r2, #0
 8017b18:	709a      	strb	r2, [r3, #2]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b20:	8afa      	ldrh	r2, [r7, #22]
 8017b22:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b24:	8afa      	ldrh	r2, [r7, #22]
 8017b26:	8b7b      	ldrh	r3, [r7, #26]
 8017b28:	4413      	add	r3, r2
 8017b2a:	b29a      	uxth	r2, r3
 8017b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b32:	88db      	ldrh	r3, [r3, #6]
 8017b34:	b29b      	uxth	r3, r3
 8017b36:	8afa      	ldrh	r2, [r7, #22]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d902      	bls.n	8017b42 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b40:	e106      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	627b      	str	r3, [r7, #36]	; 0x24
 8017b48:	e068      	b.n	8017c1c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4c:	685b      	ldr	r3, [r3, #4]
 8017b4e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b52:	889b      	ldrh	r3, [r3, #4]
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	889b      	ldrh	r3, [r3, #4]
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d235      	bcs.n	8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b64:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d020      	beq.n	8017bae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6e:	889b      	ldrh	r3, [r3, #4]
 8017b70:	b29a      	uxth	r2, r3
 8017b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b74:	88db      	ldrh	r3, [r3, #6]
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d307      	bcc.n	8017b8c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7e:	88db      	ldrh	r3, [r3, #6]
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	889b      	ldrh	r3, [r3, #4]
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d902      	bls.n	8017b92 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b90:	e0de      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b94:	68ba      	ldr	r2, [r7, #8]
 8017b96:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b9a:	88db      	ldrh	r3, [r3, #6]
 8017b9c:	b29a      	uxth	r2, r3
 8017b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ba0:	889b      	ldrh	r3, [r3, #4]
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d03d      	beq.n	8017c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017bac:	e03a      	b.n	8017c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb0:	88db      	ldrh	r3, [r3, #6]
 8017bb2:	b29a      	uxth	r2, r3
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	889b      	ldrh	r3, [r3, #4]
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	d902      	bls.n	8017bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8017bc2:	e0c5      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	68ba      	ldr	r2, [r7, #8]
 8017bc8:	605a      	str	r2, [r3, #4]
      break;
 8017bca:	e02b      	b.n	8017c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bce:	889b      	ldrh	r3, [r3, #4]
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	693b      	ldr	r3, [r7, #16]
 8017bd4:	889b      	ldrh	r3, [r3, #4]
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d102      	bne.n	8017be2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8017be0:	e0b6      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be4:	889b      	ldrh	r3, [r3, #4]
 8017be6:	b29a      	uxth	r2, r3
 8017be8:	693b      	ldr	r3, [r7, #16]
 8017bea:	88db      	ldrh	r3, [r3, #6]
 8017bec:	b29b      	uxth	r3, r3
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	d202      	bcs.n	8017bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf6:	e0ab      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d009      	beq.n	8017c12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	88db      	ldrh	r3, [r3, #6]
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	889b      	ldrh	r3, [r3, #4]
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d001      	beq.n	8017c12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017c18:	693b      	ldr	r3, [r7, #16]
 8017c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d193      	bne.n	8017b4a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c22:	e000      	b.n	8017c26 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c24:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d12d      	bne.n	8017c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d01c      	beq.n	8017c6c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c34:	88db      	ldrh	r3, [r3, #6]
 8017c36:	b29a      	uxth	r2, r3
 8017c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3a:	889b      	ldrh	r3, [r3, #4]
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d906      	bls.n	8017c50 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c42:	4b45      	ldr	r3, [pc, #276]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c44:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017c48:	4944      	ldr	r1, [pc, #272]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c4a:	4845      	ldr	r0, [pc, #276]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c4c:	f001 f9ca 	bl	8018fe4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c52:	68ba      	ldr	r2, [r7, #8]
 8017c54:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c58:	88db      	ldrh	r3, [r3, #6]
 8017c5a:	b29a      	uxth	r2, r3
 8017c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5e:	889b      	ldrh	r3, [r3, #4]
 8017c60:	b29b      	uxth	r3, r3
 8017c62:	429a      	cmp	r2, r3
 8017c64:	d010      	beq.n	8017c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	623b      	str	r3, [r7, #32]
 8017c6a:	e00d      	b.n	8017c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d006      	beq.n	8017c82 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017c74:	4b38      	ldr	r3, [pc, #224]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c76:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017c7a:	493a      	ldr	r1, [pc, #232]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017c7c:	4838      	ldr	r0, [pc, #224]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c7e:	f001 f9b1 	bl	8018fe4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	68ba      	ldr	r2, [r7, #8]
 8017c86:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d105      	bne.n	8017c9a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	7f9b      	ldrb	r3, [r3, #30]
 8017c92:	f003 0301 	and.w	r3, r3, #1
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d059      	beq.n	8017d4e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017c9a:	6a3b      	ldr	r3, [r7, #32]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d04f      	beq.n	8017d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d006      	beq.n	8017cb6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	889b      	ldrh	r3, [r3, #4]
 8017cb0:	b29b      	uxth	r3, r3
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d002      	beq.n	8017cbc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	623b      	str	r3, [r7, #32]
 8017cba:	e041      	b.n	8017d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cbe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cc6:	e012      	b.n	8017cee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd0:	88db      	ldrh	r3, [r3, #6]
 8017cd2:	b29a      	uxth	r2, r3
 8017cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd6:	889b      	ldrh	r3, [r3, #4]
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	d002      	beq.n	8017ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	623b      	str	r3, [r7, #32]
            break;
 8017ce2:	e007      	b.n	8017cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d1e9      	bne.n	8017cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017cf4:	6a3b      	ldr	r3, [r7, #32]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d022      	beq.n	8017d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d106      	bne.n	8017d10 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d02:	4b15      	ldr	r3, [pc, #84]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d04:	f240 12df 	movw	r2, #479	; 0x1df
 8017d08:	4917      	ldr	r1, [pc, #92]	; (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d0a:	4815      	ldr	r0, [pc, #84]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d0c:	f001 f96a 	bl	8018fe4 <iprintf>
          LWIP_ASSERT("sanity check",
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d106      	bne.n	8017d2a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d1c:	4b0e      	ldr	r3, [pc, #56]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017d22:	4911      	ldr	r1, [pc, #68]	; (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d24:	480e      	ldr	r0, [pc, #56]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d26:	f001 f95d 	bl	8018fe4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d006      	beq.n	8017d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d32:	4b09      	ldr	r3, [pc, #36]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d34:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017d38:	490c      	ldr	r1, [pc, #48]	; (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d3a:	4809      	ldr	r0, [pc, #36]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d3c:	f001 f952 	bl	8018fe4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d40:	6a3b      	ldr	r3, [r7, #32]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	bf14      	ite	ne
 8017d46:	2301      	movne	r3, #1
 8017d48:	2300      	moveq	r3, #0
 8017d4a:	b2db      	uxtb	r3, r3
 8017d4c:	e000      	b.n	8017d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d4e:	2300      	movs	r3, #0
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3730      	adds	r7, #48	; 0x30
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}
 8017d58:	0801dde8 	.word	0x0801dde8
 8017d5c:	0801decc 	.word	0x0801decc
 8017d60:	0801de30 	.word	0x0801de30
 8017d64:	0801deec 	.word	0x0801deec
 8017d68:	0801df24 	.word	0x0801df24
 8017d6c:	0801df34 	.word	0x0801df34

08017d70 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b08e      	sub	sp, #56	; 0x38
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	685b      	ldr	r3, [r3, #4]
 8017d7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	f003 030f 	and.w	r3, r3, #15
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	009b      	lsls	r3, r3, #2
 8017d8a:	b2db      	uxtb	r3, r3
 8017d8c:	2b14      	cmp	r3, #20
 8017d8e:	f040 8171 	bne.w	8018074 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d94:	88db      	ldrh	r3, [r3, #6]
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7f6 fe6b 	bl	800ea74 <lwip_htons>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	00db      	lsls	r3, r3, #3
 8017da8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dac:	885b      	ldrh	r3, [r3, #2]
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7f6 fe5f 	bl	800ea74 <lwip_htons>
 8017db6:	4603      	mov	r3, r0
 8017db8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	f003 030f 	and.w	r3, r3, #15
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	f0c0 8150 	bcc.w	8018078 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017de0:	1ad3      	subs	r3, r2, r3
 8017de2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017de4:	6878      	ldr	r0, [r7, #4]
 8017de6:	f7f8 fac3 	bl	8010370 <pbuf_clen>
 8017dea:	4603      	mov	r3, r0
 8017dec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017dee:	4b8c      	ldr	r3, [pc, #560]	; (8018020 <ip4_reass+0x2b0>)
 8017df0:	881b      	ldrh	r3, [r3, #0]
 8017df2:	461a      	mov	r2, r3
 8017df4:	8c3b      	ldrh	r3, [r7, #32]
 8017df6:	4413      	add	r3, r2
 8017df8:	2b0a      	cmp	r3, #10
 8017dfa:	dd10      	ble.n	8017e1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017dfc:	8c3b      	ldrh	r3, [r7, #32]
 8017dfe:	4619      	mov	r1, r3
 8017e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e02:	f7ff fd81 	bl	8017908 <ip_reass_remove_oldest_datagram>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 8137 	beq.w	801807c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e0e:	4b84      	ldr	r3, [pc, #528]	; (8018020 <ip4_reass+0x2b0>)
 8017e10:	881b      	ldrh	r3, [r3, #0]
 8017e12:	461a      	mov	r2, r3
 8017e14:	8c3b      	ldrh	r3, [r7, #32]
 8017e16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e18:	2b0a      	cmp	r3, #10
 8017e1a:	f300 812f 	bgt.w	801807c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e1e:	4b81      	ldr	r3, [pc, #516]	; (8018024 <ip4_reass+0x2b4>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	633b      	str	r3, [r7, #48]	; 0x30
 8017e24:	e015      	b.n	8017e52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e28:	695a      	ldr	r2, [r3, #20]
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	68db      	ldr	r3, [r3, #12]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d10c      	bne.n	8017e4c <ip4_reass+0xdc>
 8017e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e34:	699a      	ldr	r2, [r3, #24]
 8017e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e38:	691b      	ldr	r3, [r3, #16]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d106      	bne.n	8017e4c <ip4_reass+0xdc>
 8017e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e40:	899a      	ldrh	r2, [r3, #12]
 8017e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e44:	889b      	ldrh	r3, [r3, #4]
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d006      	beq.n	8017e5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	633b      	str	r3, [r7, #48]	; 0x30
 8017e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d1e6      	bne.n	8017e26 <ip4_reass+0xb6>
 8017e58:	e000      	b.n	8017e5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017e5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d109      	bne.n	8017e76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017e62:	8c3b      	ldrh	r3, [r7, #32]
 8017e64:	4619      	mov	r1, r3
 8017e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e68:	f7ff fdb0 	bl	80179cc <ip_reass_enqueue_new_datagram>
 8017e6c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d11c      	bne.n	8017eae <ip4_reass+0x13e>
      goto nullreturn;
 8017e74:	e105      	b.n	8018082 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e78:	88db      	ldrh	r3, [r3, #6]
 8017e7a:	b29b      	uxth	r3, r3
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7f6 fdf9 	bl	800ea74 <lwip_htons>
 8017e82:	4603      	mov	r3, r0
 8017e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d110      	bne.n	8017eae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8e:	89db      	ldrh	r3, [r3, #14]
 8017e90:	4618      	mov	r0, r3
 8017e92:	f7f6 fdef 	bl	800ea74 <lwip_htons>
 8017e96:	4603      	mov	r3, r0
 8017e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d006      	beq.n	8017eae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea2:	3308      	adds	r3, #8
 8017ea4:	2214      	movs	r2, #20
 8017ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f001 fa69 	bl	8019380 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb0:	88db      	ldrh	r3, [r3, #6]
 8017eb2:	b29b      	uxth	r3, r3
 8017eb4:	f003 0320 	and.w	r3, r3, #32
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	bf0c      	ite	eq
 8017ebc:	2301      	moveq	r3, #1
 8017ebe:	2300      	movne	r3, #0
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d00e      	beq.n	8017ee8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017eca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ece:	4413      	add	r3, r2
 8017ed0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017ed2:	8b7a      	ldrh	r2, [r7, #26]
 8017ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	f0c0 80a0 	bcc.w	801801c <ip4_reass+0x2ac>
 8017edc:	8b7b      	ldrh	r3, [r7, #26]
 8017ede:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	f200 809a 	bhi.w	801801c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ee8:	69fa      	ldr	r2, [r7, #28]
 8017eea:	6879      	ldr	r1, [r7, #4]
 8017eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017eee:	f7ff fdd5 	bl	8017a9c <ip_reass_chain_frag_into_datagram_and_validate>
 8017ef2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017efa:	f000 809b 	beq.w	8018034 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017efe:	4b48      	ldr	r3, [pc, #288]	; (8018020 <ip4_reass+0x2b0>)
 8017f00:	881a      	ldrh	r2, [r3, #0]
 8017f02:	8c3b      	ldrh	r3, [r7, #32]
 8017f04:	4413      	add	r3, r2
 8017f06:	b29a      	uxth	r2, r3
 8017f08:	4b45      	ldr	r3, [pc, #276]	; (8018020 <ip4_reass+0x2b0>)
 8017f0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f0c:	69fb      	ldr	r3, [r7, #28]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d00d      	beq.n	8017f2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f16:	4413      	add	r3, r2
 8017f18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1c:	8a7a      	ldrh	r2, [r7, #18]
 8017f1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f22:	7f9b      	ldrb	r3, [r3, #30]
 8017f24:	f043 0301 	orr.w	r3, r3, #1
 8017f28:	b2da      	uxtb	r2, r3
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f2e:	697b      	ldr	r3, [r7, #20]
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d171      	bne.n	8018018 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	8b9b      	ldrh	r3, [r3, #28]
 8017f38:	3314      	adds	r3, #20
 8017f3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3e:	685b      	ldr	r3, [r3, #4]
 8017f40:	685b      	ldr	r3, [r3, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f50:	3308      	adds	r3, #8
 8017f52:	2214      	movs	r2, #20
 8017f54:	4619      	mov	r1, r3
 8017f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f58:	f001 fa12 	bl	8019380 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017f5c:	8a3b      	ldrh	r3, [r7, #16]
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7f6 fd88 	bl	800ea74 <lwip_htons>
 8017f64:	4603      	mov	r3, r0
 8017f66:	461a      	mov	r2, r3
 8017f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6e:	2200      	movs	r2, #0
 8017f70:	719a      	strb	r2, [r3, #6]
 8017f72:	2200      	movs	r2, #0
 8017f74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f78:	2200      	movs	r2, #0
 8017f7a:	729a      	strb	r2, [r3, #10]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017f86:	e00d      	b.n	8017fa4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017f8e:	2114      	movs	r1, #20
 8017f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f92:	f7f8 f8df 	bl	8010154 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017f96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f7f8 fa23 	bl	80103e4 <pbuf_cat>
      r = iprh->next_pbuf;
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d1ee      	bne.n	8017f88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017faa:	4b1e      	ldr	r3, [pc, #120]	; (8018024 <ip4_reass+0x2b4>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d102      	bne.n	8017fba <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fb8:	e010      	b.n	8017fdc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fba:	4b1a      	ldr	r3, [pc, #104]	; (8018024 <ip4_reass+0x2b4>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fc0:	e007      	b.n	8017fd2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d006      	beq.n	8017fda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d1f4      	bne.n	8017fc2 <ip4_reass+0x252>
 8017fd8:	e000      	b.n	8017fdc <ip4_reass+0x26c>
          break;
 8017fda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fe0:	f7ff fd2e 	bl	8017a40 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7f8 f9c3 	bl	8010370 <pbuf_clen>
 8017fea:	4603      	mov	r3, r0
 8017fec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017fee:	4b0c      	ldr	r3, [pc, #48]	; (8018020 <ip4_reass+0x2b0>)
 8017ff0:	881b      	ldrh	r3, [r3, #0]
 8017ff2:	8c3a      	ldrh	r2, [r7, #32]
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d906      	bls.n	8018006 <ip4_reass+0x296>
 8017ff8:	4b0b      	ldr	r3, [pc, #44]	; (8018028 <ip4_reass+0x2b8>)
 8017ffa:	f240 229b 	movw	r2, #667	; 0x29b
 8017ffe:	490b      	ldr	r1, [pc, #44]	; (801802c <ip4_reass+0x2bc>)
 8018000:	480b      	ldr	r0, [pc, #44]	; (8018030 <ip4_reass+0x2c0>)
 8018002:	f000 ffef 	bl	8018fe4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018006:	4b06      	ldr	r3, [pc, #24]	; (8018020 <ip4_reass+0x2b0>)
 8018008:	881a      	ldrh	r2, [r3, #0]
 801800a:	8c3b      	ldrh	r3, [r7, #32]
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	b29a      	uxth	r2, r3
 8018010:	4b03      	ldr	r3, [pc, #12]	; (8018020 <ip4_reass+0x2b0>)
 8018012:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	e038      	b.n	801808a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018018:	2300      	movs	r3, #0
 801801a:	e036      	b.n	801808a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801801c:	bf00      	nop
 801801e:	e00a      	b.n	8018036 <ip4_reass+0x2c6>
 8018020:	20008150 	.word	0x20008150
 8018024:	2000814c 	.word	0x2000814c
 8018028:	0801dde8 	.word	0x0801dde8
 801802c:	0801df58 	.word	0x0801df58
 8018030:	0801de30 	.word	0x0801de30
    goto nullreturn_ipr;
 8018034:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018038:	2b00      	cmp	r3, #0
 801803a:	d106      	bne.n	801804a <ip4_reass+0x2da>
 801803c:	4b15      	ldr	r3, [pc, #84]	; (8018094 <ip4_reass+0x324>)
 801803e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018042:	4915      	ldr	r1, [pc, #84]	; (8018098 <ip4_reass+0x328>)
 8018044:	4815      	ldr	r0, [pc, #84]	; (801809c <ip4_reass+0x32c>)
 8018046:	f000 ffcd 	bl	8018fe4 <iprintf>
  if (ipr->p == NULL) {
 801804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d116      	bne.n	8018080 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018052:	4b13      	ldr	r3, [pc, #76]	; (80180a0 <ip4_reass+0x330>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018058:	429a      	cmp	r2, r3
 801805a:	d006      	beq.n	801806a <ip4_reass+0x2fa>
 801805c:	4b0d      	ldr	r3, [pc, #52]	; (8018094 <ip4_reass+0x324>)
 801805e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018062:	4910      	ldr	r1, [pc, #64]	; (80180a4 <ip4_reass+0x334>)
 8018064:	480d      	ldr	r0, [pc, #52]	; (801809c <ip4_reass+0x32c>)
 8018066:	f000 ffbd 	bl	8018fe4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801806a:	2100      	movs	r1, #0
 801806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801806e:	f7ff fce7 	bl	8017a40 <ip_reass_dequeue_datagram>
 8018072:	e006      	b.n	8018082 <ip4_reass+0x312>
    goto nullreturn;
 8018074:	bf00      	nop
 8018076:	e004      	b.n	8018082 <ip4_reass+0x312>
    goto nullreturn;
 8018078:	bf00      	nop
 801807a:	e002      	b.n	8018082 <ip4_reass+0x312>
      goto nullreturn;
 801807c:	bf00      	nop
 801807e:	e000      	b.n	8018082 <ip4_reass+0x312>
  }

nullreturn:
 8018080:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7f8 f8ec 	bl	8010260 <pbuf_free>
  return NULL;
 8018088:	2300      	movs	r3, #0
}
 801808a:	4618      	mov	r0, r3
 801808c:	3738      	adds	r7, #56	; 0x38
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop
 8018094:	0801dde8 	.word	0x0801dde8
 8018098:	0801df74 	.word	0x0801df74
 801809c:	0801de30 	.word	0x0801de30
 80180a0:	2000814c 	.word	0x2000814c
 80180a4:	0801df80 	.word	0x0801df80

080180a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80180ac:	2005      	movs	r0, #5
 80180ae:	f7f7 fa11 	bl	800f4d4 <memp_malloc>
 80180b2:	4603      	mov	r3, r0
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b082      	sub	sp, #8
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d106      	bne.n	80180d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80180c6:	4b07      	ldr	r3, [pc, #28]	; (80180e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80180c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80180cc:	4906      	ldr	r1, [pc, #24]	; (80180e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80180ce:	4807      	ldr	r0, [pc, #28]	; (80180ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80180d0:	f000 ff88 	bl	8018fe4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80180d4:	6879      	ldr	r1, [r7, #4]
 80180d6:	2005      	movs	r0, #5
 80180d8:	f7f7 fa6c 	bl	800f5b4 <memp_free>
}
 80180dc:	bf00      	nop
 80180de:	3708      	adds	r7, #8
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	0801dde8 	.word	0x0801dde8
 80180e8:	0801dfa0 	.word	0x0801dfa0
 80180ec:	0801de30 	.word	0x0801de30

080180f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d106      	bne.n	8018110 <ipfrag_free_pbuf_custom+0x20>
 8018102:	4b11      	ldr	r3, [pc, #68]	; (8018148 <ipfrag_free_pbuf_custom+0x58>)
 8018104:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018108:	4910      	ldr	r1, [pc, #64]	; (801814c <ipfrag_free_pbuf_custom+0x5c>)
 801810a:	4811      	ldr	r0, [pc, #68]	; (8018150 <ipfrag_free_pbuf_custom+0x60>)
 801810c:	f000 ff6a 	bl	8018fe4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018110:	68fa      	ldr	r2, [r7, #12]
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	429a      	cmp	r2, r3
 8018116:	d006      	beq.n	8018126 <ipfrag_free_pbuf_custom+0x36>
 8018118:	4b0b      	ldr	r3, [pc, #44]	; (8018148 <ipfrag_free_pbuf_custom+0x58>)
 801811a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801811e:	490d      	ldr	r1, [pc, #52]	; (8018154 <ipfrag_free_pbuf_custom+0x64>)
 8018120:	480b      	ldr	r0, [pc, #44]	; (8018150 <ipfrag_free_pbuf_custom+0x60>)
 8018122:	f000 ff5f 	bl	8018fe4 <iprintf>
  if (pcr->original != NULL) {
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	695b      	ldr	r3, [r3, #20]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d004      	beq.n	8018138 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	695b      	ldr	r3, [r3, #20]
 8018132:	4618      	mov	r0, r3
 8018134:	f7f8 f894 	bl	8010260 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018138:	68f8      	ldr	r0, [r7, #12]
 801813a:	f7ff ffbd 	bl	80180b8 <ip_frag_free_pbuf_custom_ref>
}
 801813e:	bf00      	nop
 8018140:	3710      	adds	r7, #16
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	0801dde8 	.word	0x0801dde8
 801814c:	0801dfac 	.word	0x0801dfac
 8018150:	0801de30 	.word	0x0801de30
 8018154:	0801dfb8 	.word	0x0801dfb8

08018158 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b094      	sub	sp, #80	; 0x50
 801815c:	af02      	add	r7, sp, #8
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018164:	2300      	movs	r3, #0
 8018166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801816e:	3b14      	subs	r3, #20
 8018170:	2b00      	cmp	r3, #0
 8018172:	da00      	bge.n	8018176 <ip4_frag+0x1e>
 8018174:	3307      	adds	r3, #7
 8018176:	10db      	asrs	r3, r3, #3
 8018178:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801817a:	2314      	movs	r3, #20
 801817c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018186:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	f003 030f 	and.w	r3, r3, #15
 8018190:	b2db      	uxtb	r3, r3
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	b2db      	uxtb	r3, r3
 8018196:	2b14      	cmp	r3, #20
 8018198:	d002      	beq.n	80181a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801819a:	f06f 0305 	mvn.w	r3, #5
 801819e:	e110      	b.n	80183c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	895b      	ldrh	r3, [r3, #10]
 80181a4:	2b13      	cmp	r3, #19
 80181a6:	d809      	bhi.n	80181bc <ip4_frag+0x64>
 80181a8:	4b88      	ldr	r3, [pc, #544]	; (80183cc <ip4_frag+0x274>)
 80181aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80181ae:	4988      	ldr	r1, [pc, #544]	; (80183d0 <ip4_frag+0x278>)
 80181b0:	4888      	ldr	r0, [pc, #544]	; (80183d4 <ip4_frag+0x27c>)
 80181b2:	f000 ff17 	bl	8018fe4 <iprintf>
 80181b6:	f06f 0305 	mvn.w	r3, #5
 80181ba:	e102      	b.n	80183c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80181bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181be:	88db      	ldrh	r3, [r3, #6]
 80181c0:	b29b      	uxth	r3, r3
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7f6 fc56 	bl	800ea74 <lwip_htons>
 80181c8:	4603      	mov	r3, r0
 80181ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80181cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80181d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80181dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	891b      	ldrh	r3, [r3, #8]
 80181e2:	3b14      	subs	r3, #20
 80181e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80181e8:	e0e1      	b.n	80183ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80181ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80181ec:	00db      	lsls	r3, r3, #3
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181f4:	4293      	cmp	r3, r2
 80181f6:	bf28      	it	cs
 80181f8:	4613      	movcs	r3, r2
 80181fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80181fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018200:	2114      	movs	r1, #20
 8018202:	200e      	movs	r0, #14
 8018204:	f7f7 fd48 	bl	800fc98 <pbuf_alloc>
 8018208:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820c:	2b00      	cmp	r3, #0
 801820e:	f000 80d5 	beq.w	80183bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018214:	895b      	ldrh	r3, [r3, #10]
 8018216:	2b13      	cmp	r3, #19
 8018218:	d806      	bhi.n	8018228 <ip4_frag+0xd0>
 801821a:	4b6c      	ldr	r3, [pc, #432]	; (80183cc <ip4_frag+0x274>)
 801821c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018220:	496d      	ldr	r1, [pc, #436]	; (80183d8 <ip4_frag+0x280>)
 8018222:	486c      	ldr	r0, [pc, #432]	; (80183d4 <ip4_frag+0x27c>)
 8018224:	f000 fede 	bl	8018fe4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	2214      	movs	r2, #20
 801822e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018230:	4618      	mov	r0, r3
 8018232:	f001 f8a5 	bl	8019380 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018238:	685b      	ldr	r3, [r3, #4]
 801823a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801823c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801823e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018242:	e064      	b.n	801830e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	895a      	ldrh	r2, [r3, #10]
 8018248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801824a:	1ad3      	subs	r3, r2, r3
 801824c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	895b      	ldrh	r3, [r3, #10]
 8018252:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018254:	429a      	cmp	r2, r3
 8018256:	d906      	bls.n	8018266 <ip4_frag+0x10e>
 8018258:	4b5c      	ldr	r3, [pc, #368]	; (80183cc <ip4_frag+0x274>)
 801825a:	f240 322d 	movw	r2, #813	; 0x32d
 801825e:	495f      	ldr	r1, [pc, #380]	; (80183dc <ip4_frag+0x284>)
 8018260:	485c      	ldr	r0, [pc, #368]	; (80183d4 <ip4_frag+0x27c>)
 8018262:	f000 febf 	bl	8018fe4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018266:	8bfa      	ldrh	r2, [r7, #30]
 8018268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801826c:	4293      	cmp	r3, r2
 801826e:	bf28      	it	cs
 8018270:	4613      	movcs	r3, r2
 8018272:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801827a:	2b00      	cmp	r3, #0
 801827c:	d105      	bne.n	801828a <ip4_frag+0x132>
        poff = 0;
 801827e:	2300      	movs	r3, #0
 8018280:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	60fb      	str	r3, [r7, #12]
        continue;
 8018288:	e041      	b.n	801830e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801828a:	f7ff ff0d 	bl	80180a8 <ip_frag_alloc_pbuf_custom_ref>
 801828e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018290:	69bb      	ldr	r3, [r7, #24]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d103      	bne.n	801829e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018298:	f7f7 ffe2 	bl	8010260 <pbuf_free>
        goto memerr;
 801829c:	e08f      	b.n	80183be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801829e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182a6:	4413      	add	r3, r2
 80182a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80182ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80182b0:	9201      	str	r2, [sp, #4]
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	4603      	mov	r3, r0
 80182b6:	2241      	movs	r2, #65	; 0x41
 80182b8:	2000      	movs	r0, #0
 80182ba:	f7f7 fe17 	bl	800feec <pbuf_alloced_custom>
 80182be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d106      	bne.n	80182d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80182c6:	69b8      	ldr	r0, [r7, #24]
 80182c8:	f7ff fef6 	bl	80180b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80182cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182ce:	f7f7 ffc7 	bl	8010260 <pbuf_free>
        goto memerr;
 80182d2:	e074      	b.n	80183be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80182d4:	68f8      	ldr	r0, [r7, #12]
 80182d6:	f7f8 f863 	bl	80103a0 <pbuf_ref>
      pcr->original = p;
 80182da:	69bb      	ldr	r3, [r7, #24]
 80182dc:	68fa      	ldr	r2, [r7, #12]
 80182de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80182e0:	69bb      	ldr	r3, [r7, #24]
 80182e2:	4a3f      	ldr	r2, [pc, #252]	; (80183e0 <ip4_frag+0x288>)
 80182e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80182e6:	6979      	ldr	r1, [r7, #20]
 80182e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182ea:	f7f8 f87b 	bl	80103e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80182ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80182f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80182fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018300:	2b00      	cmp	r3, #0
 8018302:	d004      	beq.n	801830e <ip4_frag+0x1b6>
        poff = 0;
 8018304:	2300      	movs	r3, #0
 8018306:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801830e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018312:	2b00      	cmp	r3, #0
 8018314:	d196      	bne.n	8018244 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018316:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801831c:	4413      	add	r3, r2
 801831e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018324:	f1a3 0213 	sub.w	r2, r3, #19
 8018328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801832c:	429a      	cmp	r2, r3
 801832e:	bfcc      	ite	gt
 8018330:	2301      	movgt	r3, #1
 8018332:	2300      	movle	r3, #0
 8018334:	b2db      	uxtb	r3, r3
 8018336:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801833c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018340:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018342:	6a3b      	ldr	r3, [r7, #32]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d002      	beq.n	801834e <ip4_frag+0x1f6>
 8018348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801834a:	2b00      	cmp	r3, #0
 801834c:	d003      	beq.n	8018356 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801834e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018354:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018358:	4618      	mov	r0, r3
 801835a:	f7f6 fb8b 	bl	800ea74 <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	461a      	mov	r2, r3
 8018362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018364:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018368:	3314      	adds	r3, #20
 801836a:	b29b      	uxth	r3, r3
 801836c:	4618      	mov	r0, r3
 801836e:	f7f6 fb81 	bl	800ea74 <lwip_htons>
 8018372:	4603      	mov	r3, r0
 8018374:	461a      	mov	r2, r3
 8018376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018378:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837c:	2200      	movs	r2, #0
 801837e:	729a      	strb	r2, [r3, #10]
 8018380:	2200      	movs	r2, #0
 8018382:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	695b      	ldr	r3, [r3, #20]
 8018388:	687a      	ldr	r2, [r7, #4]
 801838a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801838c:	68b8      	ldr	r0, [r7, #8]
 801838e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018392:	f7f7 ff65 	bl	8010260 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018396:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801839a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80183a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80183a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183a8:	4413      	add	r3, r2
 80183aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80183ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f47f af19 	bne.w	80181ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80183b8:	2300      	movs	r3, #0
 80183ba:	e002      	b.n	80183c2 <ip4_frag+0x26a>
      goto memerr;
 80183bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80183be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3748      	adds	r7, #72	; 0x48
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}
 80183ca:	bf00      	nop
 80183cc:	0801dde8 	.word	0x0801dde8
 80183d0:	0801dfc4 	.word	0x0801dfc4
 80183d4:	0801de30 	.word	0x0801de30
 80183d8:	0801dfe0 	.word	0x0801dfe0
 80183dc:	0801e000 	.word	0x0801e000
 80183e0:	080180f1 	.word	0x080180f1

080183e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b086      	sub	sp, #24
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
 80183ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80183ee:	230e      	movs	r3, #14
 80183f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	895b      	ldrh	r3, [r3, #10]
 80183f6:	2b0e      	cmp	r3, #14
 80183f8:	d96e      	bls.n	80184d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	7bdb      	ldrb	r3, [r3, #15]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d106      	bne.n	8018410 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018402:	683b      	ldr	r3, [r7, #0]
 8018404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018408:	3301      	adds	r3, #1
 801840a:	b2da      	uxtb	r2, r3
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018416:	693b      	ldr	r3, [r7, #16]
 8018418:	7b1a      	ldrb	r2, [r3, #12]
 801841a:	7b5b      	ldrb	r3, [r3, #13]
 801841c:	021b      	lsls	r3, r3, #8
 801841e:	4313      	orrs	r3, r2
 8018420:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	f003 0301 	and.w	r3, r3, #1
 801842a:	2b00      	cmp	r3, #0
 801842c:	d023      	beq.n	8018476 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	2b01      	cmp	r3, #1
 8018434:	d10f      	bne.n	8018456 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	785b      	ldrb	r3, [r3, #1]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d11b      	bne.n	8018476 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018442:	2b5e      	cmp	r3, #94	; 0x5e
 8018444:	d117      	bne.n	8018476 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	7b5b      	ldrb	r3, [r3, #13]
 801844a:	f043 0310 	orr.w	r3, r3, #16
 801844e:	b2da      	uxtb	r2, r3
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	735a      	strb	r2, [r3, #13]
 8018454:	e00f      	b.n	8018476 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	2206      	movs	r2, #6
 801845a:	4928      	ldr	r1, [pc, #160]	; (80184fc <ethernet_input+0x118>)
 801845c:	4618      	mov	r0, r3
 801845e:	f000 ff07 	bl	8019270 <memcmp>
 8018462:	4603      	mov	r3, r0
 8018464:	2b00      	cmp	r3, #0
 8018466:	d106      	bne.n	8018476 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	7b5b      	ldrb	r3, [r3, #13]
 801846c:	f043 0308 	orr.w	r3, r3, #8
 8018470:	b2da      	uxtb	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018476:	89fb      	ldrh	r3, [r7, #14]
 8018478:	2b08      	cmp	r3, #8
 801847a:	d003      	beq.n	8018484 <ethernet_input+0xa0>
 801847c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018480:	d014      	beq.n	80184ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018482:	e032      	b.n	80184ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801848a:	f003 0308 	and.w	r3, r3, #8
 801848e:	2b00      	cmp	r3, #0
 8018490:	d024      	beq.n	80184dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018492:	8afb      	ldrh	r3, [r7, #22]
 8018494:	4619      	mov	r1, r3
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	f7f7 fe5c 	bl	8010154 <pbuf_remove_header>
 801849c:	4603      	mov	r3, r0
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d11e      	bne.n	80184e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80184a2:	6839      	ldr	r1, [r7, #0]
 80184a4:	6878      	ldr	r0, [r7, #4]
 80184a6:	f7fe ff21 	bl	80172ec <ip4_input>
      break;
 80184aa:	e013      	b.n	80184d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184b2:	f003 0308 	and.w	r3, r3, #8
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d014      	beq.n	80184e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184ba:	8afb      	ldrh	r3, [r7, #22]
 80184bc:	4619      	mov	r1, r3
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f7f7 fe48 	bl	8010154 <pbuf_remove_header>
 80184c4:	4603      	mov	r3, r0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d10e      	bne.n	80184e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80184ca:	6839      	ldr	r1, [r7, #0]
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f7fe f89b 	bl	8016608 <etharp_input>
      break;
 80184d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80184d4:	2300      	movs	r3, #0
 80184d6:	e00c      	b.n	80184f2 <ethernet_input+0x10e>
    goto free_and_return;
 80184d8:	bf00      	nop
 80184da:	e006      	b.n	80184ea <ethernet_input+0x106>
        goto free_and_return;
 80184dc:	bf00      	nop
 80184de:	e004      	b.n	80184ea <ethernet_input+0x106>
        goto free_and_return;
 80184e0:	bf00      	nop
 80184e2:	e002      	b.n	80184ea <ethernet_input+0x106>
        goto free_and_return;
 80184e4:	bf00      	nop
 80184e6:	e000      	b.n	80184ea <ethernet_input+0x106>
        goto free_and_return;
 80184e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f7f7 feb8 	bl	8010260 <pbuf_free>
  return ERR_OK;
 80184f0:	2300      	movs	r3, #0
}
 80184f2:	4618      	mov	r0, r3
 80184f4:	3718      	adds	r7, #24
 80184f6:	46bd      	mov	sp, r7
 80184f8:	bd80      	pop	{r7, pc}
 80184fa:	bf00      	nop
 80184fc:	0801e1d8 	.word	0x0801e1d8

08018500 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018500:	b580      	push	{r7, lr}
 8018502:	b086      	sub	sp, #24
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
 801850c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801850e:	8c3b      	ldrh	r3, [r7, #32]
 8018510:	4618      	mov	r0, r3
 8018512:	f7f6 faaf 	bl	800ea74 <lwip_htons>
 8018516:	4603      	mov	r3, r0
 8018518:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801851a:	210e      	movs	r1, #14
 801851c:	68b8      	ldr	r0, [r7, #8]
 801851e:	f7f7 fe09 	bl	8010134 <pbuf_add_header>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d125      	bne.n	8018574 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801852e:	693b      	ldr	r3, [r7, #16]
 8018530:	8afa      	ldrh	r2, [r7, #22]
 8018532:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	2206      	movs	r2, #6
 8018538:	6839      	ldr	r1, [r7, #0]
 801853a:	4618      	mov	r0, r3
 801853c:	f000 ff20 	bl	8019380 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	3306      	adds	r3, #6
 8018544:	2206      	movs	r2, #6
 8018546:	6879      	ldr	r1, [r7, #4]
 8018548:	4618      	mov	r0, r3
 801854a:	f000 ff19 	bl	8019380 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018554:	2b06      	cmp	r3, #6
 8018556:	d006      	beq.n	8018566 <ethernet_output+0x66>
 8018558:	4b0a      	ldr	r3, [pc, #40]	; (8018584 <ethernet_output+0x84>)
 801855a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801855e:	490a      	ldr	r1, [pc, #40]	; (8018588 <ethernet_output+0x88>)
 8018560:	480a      	ldr	r0, [pc, #40]	; (801858c <ethernet_output+0x8c>)
 8018562:	f000 fd3f 	bl	8018fe4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	699b      	ldr	r3, [r3, #24]
 801856a:	68b9      	ldr	r1, [r7, #8]
 801856c:	68f8      	ldr	r0, [r7, #12]
 801856e:	4798      	blx	r3
 8018570:	4603      	mov	r3, r0
 8018572:	e002      	b.n	801857a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018574:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018576:	f06f 0301 	mvn.w	r3, #1
}
 801857a:	4618      	mov	r0, r3
 801857c:	3718      	adds	r7, #24
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
 8018582:	bf00      	nop
 8018584:	0801e010 	.word	0x0801e010
 8018588:	0801e048 	.word	0x0801e048
 801858c:	0801e07c 	.word	0x0801e07c

08018590 <rand>:
 8018590:	4b16      	ldr	r3, [pc, #88]	; (80185ec <rand+0x5c>)
 8018592:	b510      	push	{r4, lr}
 8018594:	681c      	ldr	r4, [r3, #0]
 8018596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018598:	b9b3      	cbnz	r3, 80185c8 <rand+0x38>
 801859a:	2018      	movs	r0, #24
 801859c:	f001 fd5c 	bl	801a058 <malloc>
 80185a0:	4602      	mov	r2, r0
 80185a2:	6320      	str	r0, [r4, #48]	; 0x30
 80185a4:	b920      	cbnz	r0, 80185b0 <rand+0x20>
 80185a6:	4b12      	ldr	r3, [pc, #72]	; (80185f0 <rand+0x60>)
 80185a8:	4812      	ldr	r0, [pc, #72]	; (80185f4 <rand+0x64>)
 80185aa:	2152      	movs	r1, #82	; 0x52
 80185ac:	f000 fef6 	bl	801939c <__assert_func>
 80185b0:	4911      	ldr	r1, [pc, #68]	; (80185f8 <rand+0x68>)
 80185b2:	4b12      	ldr	r3, [pc, #72]	; (80185fc <rand+0x6c>)
 80185b4:	e9c0 1300 	strd	r1, r3, [r0]
 80185b8:	4b11      	ldr	r3, [pc, #68]	; (8018600 <rand+0x70>)
 80185ba:	6083      	str	r3, [r0, #8]
 80185bc:	230b      	movs	r3, #11
 80185be:	8183      	strh	r3, [r0, #12]
 80185c0:	2100      	movs	r1, #0
 80185c2:	2001      	movs	r0, #1
 80185c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80185c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80185ca:	480e      	ldr	r0, [pc, #56]	; (8018604 <rand+0x74>)
 80185cc:	690b      	ldr	r3, [r1, #16]
 80185ce:	694c      	ldr	r4, [r1, #20]
 80185d0:	4a0d      	ldr	r2, [pc, #52]	; (8018608 <rand+0x78>)
 80185d2:	4358      	muls	r0, r3
 80185d4:	fb02 0004 	mla	r0, r2, r4, r0
 80185d8:	fba3 3202 	umull	r3, r2, r3, r2
 80185dc:	3301      	adds	r3, #1
 80185de:	eb40 0002 	adc.w	r0, r0, r2
 80185e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80185e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80185ea:	bd10      	pop	{r4, pc}
 80185ec:	200000b8 	.word	0x200000b8
 80185f0:	0801e1e6 	.word	0x0801e1e6
 80185f4:	0801e1fd 	.word	0x0801e1fd
 80185f8:	abcd330e 	.word	0xabcd330e
 80185fc:	e66d1234 	.word	0xe66d1234
 8018600:	0005deec 	.word	0x0005deec
 8018604:	5851f42d 	.word	0x5851f42d
 8018608:	4c957f2d 	.word	0x4c957f2d

0801860c <__cvt>:
 801860c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801860e:	ed2d 8b02 	vpush	{d8}
 8018612:	eeb0 8b40 	vmov.f64	d8, d0
 8018616:	b085      	sub	sp, #20
 8018618:	4617      	mov	r7, r2
 801861a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801861c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801861e:	ee18 2a90 	vmov	r2, s17
 8018622:	f025 0520 	bic.w	r5, r5, #32
 8018626:	2a00      	cmp	r2, #0
 8018628:	bfb6      	itet	lt
 801862a:	222d      	movlt	r2, #45	; 0x2d
 801862c:	2200      	movge	r2, #0
 801862e:	eeb1 8b40 	vneglt.f64	d8, d0
 8018632:	2d46      	cmp	r5, #70	; 0x46
 8018634:	460c      	mov	r4, r1
 8018636:	701a      	strb	r2, [r3, #0]
 8018638:	d004      	beq.n	8018644 <__cvt+0x38>
 801863a:	2d45      	cmp	r5, #69	; 0x45
 801863c:	d100      	bne.n	8018640 <__cvt+0x34>
 801863e:	3401      	adds	r4, #1
 8018640:	2102      	movs	r1, #2
 8018642:	e000      	b.n	8018646 <__cvt+0x3a>
 8018644:	2103      	movs	r1, #3
 8018646:	ab03      	add	r3, sp, #12
 8018648:	9301      	str	r3, [sp, #4]
 801864a:	ab02      	add	r3, sp, #8
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	4622      	mov	r2, r4
 8018650:	4633      	mov	r3, r6
 8018652:	eeb0 0b48 	vmov.f64	d0, d8
 8018656:	f000 ff47 	bl	80194e8 <_dtoa_r>
 801865a:	2d47      	cmp	r5, #71	; 0x47
 801865c:	d101      	bne.n	8018662 <__cvt+0x56>
 801865e:	07fb      	lsls	r3, r7, #31
 8018660:	d51a      	bpl.n	8018698 <__cvt+0x8c>
 8018662:	2d46      	cmp	r5, #70	; 0x46
 8018664:	eb00 0204 	add.w	r2, r0, r4
 8018668:	d10c      	bne.n	8018684 <__cvt+0x78>
 801866a:	7803      	ldrb	r3, [r0, #0]
 801866c:	2b30      	cmp	r3, #48	; 0x30
 801866e:	d107      	bne.n	8018680 <__cvt+0x74>
 8018670:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018678:	bf1c      	itt	ne
 801867a:	f1c4 0401 	rsbne	r4, r4, #1
 801867e:	6034      	strne	r4, [r6, #0]
 8018680:	6833      	ldr	r3, [r6, #0]
 8018682:	441a      	add	r2, r3
 8018684:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868c:	bf08      	it	eq
 801868e:	9203      	streq	r2, [sp, #12]
 8018690:	2130      	movs	r1, #48	; 0x30
 8018692:	9b03      	ldr	r3, [sp, #12]
 8018694:	4293      	cmp	r3, r2
 8018696:	d307      	bcc.n	80186a8 <__cvt+0x9c>
 8018698:	9b03      	ldr	r3, [sp, #12]
 801869a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801869c:	1a1b      	subs	r3, r3, r0
 801869e:	6013      	str	r3, [r2, #0]
 80186a0:	b005      	add	sp, #20
 80186a2:	ecbd 8b02 	vpop	{d8}
 80186a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186a8:	1c5c      	adds	r4, r3, #1
 80186aa:	9403      	str	r4, [sp, #12]
 80186ac:	7019      	strb	r1, [r3, #0]
 80186ae:	e7f0      	b.n	8018692 <__cvt+0x86>

080186b0 <__exponent>:
 80186b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186b2:	4603      	mov	r3, r0
 80186b4:	2900      	cmp	r1, #0
 80186b6:	bfb8      	it	lt
 80186b8:	4249      	neglt	r1, r1
 80186ba:	f803 2b02 	strb.w	r2, [r3], #2
 80186be:	bfb4      	ite	lt
 80186c0:	222d      	movlt	r2, #45	; 0x2d
 80186c2:	222b      	movge	r2, #43	; 0x2b
 80186c4:	2909      	cmp	r1, #9
 80186c6:	7042      	strb	r2, [r0, #1]
 80186c8:	dd2a      	ble.n	8018720 <__exponent+0x70>
 80186ca:	f10d 0207 	add.w	r2, sp, #7
 80186ce:	4617      	mov	r7, r2
 80186d0:	260a      	movs	r6, #10
 80186d2:	4694      	mov	ip, r2
 80186d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80186d8:	fb06 1415 	mls	r4, r6, r5, r1
 80186dc:	3430      	adds	r4, #48	; 0x30
 80186de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80186e2:	460c      	mov	r4, r1
 80186e4:	2c63      	cmp	r4, #99	; 0x63
 80186e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80186ea:	4629      	mov	r1, r5
 80186ec:	dcf1      	bgt.n	80186d2 <__exponent+0x22>
 80186ee:	3130      	adds	r1, #48	; 0x30
 80186f0:	f1ac 0402 	sub.w	r4, ip, #2
 80186f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80186f8:	1c41      	adds	r1, r0, #1
 80186fa:	4622      	mov	r2, r4
 80186fc:	42ba      	cmp	r2, r7
 80186fe:	d30a      	bcc.n	8018716 <__exponent+0x66>
 8018700:	f10d 0209 	add.w	r2, sp, #9
 8018704:	eba2 020c 	sub.w	r2, r2, ip
 8018708:	42bc      	cmp	r4, r7
 801870a:	bf88      	it	hi
 801870c:	2200      	movhi	r2, #0
 801870e:	4413      	add	r3, r2
 8018710:	1a18      	subs	r0, r3, r0
 8018712:	b003      	add	sp, #12
 8018714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018716:	f812 5b01 	ldrb.w	r5, [r2], #1
 801871a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801871e:	e7ed      	b.n	80186fc <__exponent+0x4c>
 8018720:	2330      	movs	r3, #48	; 0x30
 8018722:	3130      	adds	r1, #48	; 0x30
 8018724:	7083      	strb	r3, [r0, #2]
 8018726:	70c1      	strb	r1, [r0, #3]
 8018728:	1d03      	adds	r3, r0, #4
 801872a:	e7f1      	b.n	8018710 <__exponent+0x60>
 801872c:	0000      	movs	r0, r0
	...

08018730 <_printf_float>:
 8018730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018734:	b08b      	sub	sp, #44	; 0x2c
 8018736:	460c      	mov	r4, r1
 8018738:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801873c:	4616      	mov	r6, r2
 801873e:	461f      	mov	r7, r3
 8018740:	4605      	mov	r5, r0
 8018742:	f000 fdad 	bl	80192a0 <_localeconv_r>
 8018746:	f8d0 b000 	ldr.w	fp, [r0]
 801874a:	4658      	mov	r0, fp
 801874c:	f7e8 fea8 	bl	80014a0 <strlen>
 8018750:	2300      	movs	r3, #0
 8018752:	9308      	str	r3, [sp, #32]
 8018754:	f8d8 3000 	ldr.w	r3, [r8]
 8018758:	f894 9018 	ldrb.w	r9, [r4, #24]
 801875c:	6822      	ldr	r2, [r4, #0]
 801875e:	3307      	adds	r3, #7
 8018760:	f023 0307 	bic.w	r3, r3, #7
 8018764:	f103 0108 	add.w	r1, r3, #8
 8018768:	f8c8 1000 	str.w	r1, [r8]
 801876c:	ed93 0b00 	vldr	d0, [r3]
 8018770:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80189d0 <_printf_float+0x2a0>
 8018774:	eeb0 7bc0 	vabs.f64	d7, d0
 8018778:	eeb4 7b46 	vcmp.f64	d7, d6
 801877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018780:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8018784:	4682      	mov	sl, r0
 8018786:	dd24      	ble.n	80187d2 <_printf_float+0xa2>
 8018788:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018790:	d502      	bpl.n	8018798 <_printf_float+0x68>
 8018792:	232d      	movs	r3, #45	; 0x2d
 8018794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018798:	498f      	ldr	r1, [pc, #572]	; (80189d8 <_printf_float+0x2a8>)
 801879a:	4b90      	ldr	r3, [pc, #576]	; (80189dc <_printf_float+0x2ac>)
 801879c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80187a0:	bf94      	ite	ls
 80187a2:	4688      	movls	r8, r1
 80187a4:	4698      	movhi	r8, r3
 80187a6:	2303      	movs	r3, #3
 80187a8:	6123      	str	r3, [r4, #16]
 80187aa:	f022 0204 	bic.w	r2, r2, #4
 80187ae:	2300      	movs	r3, #0
 80187b0:	6022      	str	r2, [r4, #0]
 80187b2:	9304      	str	r3, [sp, #16]
 80187b4:	9700      	str	r7, [sp, #0]
 80187b6:	4633      	mov	r3, r6
 80187b8:	aa09      	add	r2, sp, #36	; 0x24
 80187ba:	4621      	mov	r1, r4
 80187bc:	4628      	mov	r0, r5
 80187be:	f000 f9d1 	bl	8018b64 <_printf_common>
 80187c2:	3001      	adds	r0, #1
 80187c4:	f040 808a 	bne.w	80188dc <_printf_float+0x1ac>
 80187c8:	f04f 30ff 	mov.w	r0, #4294967295
 80187cc:	b00b      	add	sp, #44	; 0x2c
 80187ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80187d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187da:	d709      	bvc.n	80187f0 <_printf_float+0xc0>
 80187dc:	ee10 3a90 	vmov	r3, s1
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	bfbc      	itt	lt
 80187e4:	232d      	movlt	r3, #45	; 0x2d
 80187e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80187ea:	497d      	ldr	r1, [pc, #500]	; (80189e0 <_printf_float+0x2b0>)
 80187ec:	4b7d      	ldr	r3, [pc, #500]	; (80189e4 <_printf_float+0x2b4>)
 80187ee:	e7d5      	b.n	801879c <_printf_float+0x6c>
 80187f0:	6863      	ldr	r3, [r4, #4]
 80187f2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80187f6:	9104      	str	r1, [sp, #16]
 80187f8:	1c59      	adds	r1, r3, #1
 80187fa:	d13c      	bne.n	8018876 <_printf_float+0x146>
 80187fc:	2306      	movs	r3, #6
 80187fe:	6063      	str	r3, [r4, #4]
 8018800:	2300      	movs	r3, #0
 8018802:	9303      	str	r3, [sp, #12]
 8018804:	ab08      	add	r3, sp, #32
 8018806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801880a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801880e:	ab07      	add	r3, sp, #28
 8018810:	6861      	ldr	r1, [r4, #4]
 8018812:	9300      	str	r3, [sp, #0]
 8018814:	6022      	str	r2, [r4, #0]
 8018816:	f10d 031b 	add.w	r3, sp, #27
 801881a:	4628      	mov	r0, r5
 801881c:	f7ff fef6 	bl	801860c <__cvt>
 8018820:	9b04      	ldr	r3, [sp, #16]
 8018822:	9907      	ldr	r1, [sp, #28]
 8018824:	2b47      	cmp	r3, #71	; 0x47
 8018826:	4680      	mov	r8, r0
 8018828:	d108      	bne.n	801883c <_printf_float+0x10c>
 801882a:	1cc8      	adds	r0, r1, #3
 801882c:	db02      	blt.n	8018834 <_printf_float+0x104>
 801882e:	6863      	ldr	r3, [r4, #4]
 8018830:	4299      	cmp	r1, r3
 8018832:	dd41      	ble.n	80188b8 <_printf_float+0x188>
 8018834:	f1a9 0902 	sub.w	r9, r9, #2
 8018838:	fa5f f989 	uxtb.w	r9, r9
 801883c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018840:	d820      	bhi.n	8018884 <_printf_float+0x154>
 8018842:	3901      	subs	r1, #1
 8018844:	464a      	mov	r2, r9
 8018846:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801884a:	9107      	str	r1, [sp, #28]
 801884c:	f7ff ff30 	bl	80186b0 <__exponent>
 8018850:	9a08      	ldr	r2, [sp, #32]
 8018852:	9004      	str	r0, [sp, #16]
 8018854:	1813      	adds	r3, r2, r0
 8018856:	2a01      	cmp	r2, #1
 8018858:	6123      	str	r3, [r4, #16]
 801885a:	dc02      	bgt.n	8018862 <_printf_float+0x132>
 801885c:	6822      	ldr	r2, [r4, #0]
 801885e:	07d2      	lsls	r2, r2, #31
 8018860:	d501      	bpl.n	8018866 <_printf_float+0x136>
 8018862:	3301      	adds	r3, #1
 8018864:	6123      	str	r3, [r4, #16]
 8018866:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d0a2      	beq.n	80187b4 <_printf_float+0x84>
 801886e:	232d      	movs	r3, #45	; 0x2d
 8018870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018874:	e79e      	b.n	80187b4 <_printf_float+0x84>
 8018876:	9904      	ldr	r1, [sp, #16]
 8018878:	2947      	cmp	r1, #71	; 0x47
 801887a:	d1c1      	bne.n	8018800 <_printf_float+0xd0>
 801887c:	2b00      	cmp	r3, #0
 801887e:	d1bf      	bne.n	8018800 <_printf_float+0xd0>
 8018880:	2301      	movs	r3, #1
 8018882:	e7bc      	b.n	80187fe <_printf_float+0xce>
 8018884:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018888:	d118      	bne.n	80188bc <_printf_float+0x18c>
 801888a:	2900      	cmp	r1, #0
 801888c:	6863      	ldr	r3, [r4, #4]
 801888e:	dd0b      	ble.n	80188a8 <_printf_float+0x178>
 8018890:	6121      	str	r1, [r4, #16]
 8018892:	b913      	cbnz	r3, 801889a <_printf_float+0x16a>
 8018894:	6822      	ldr	r2, [r4, #0]
 8018896:	07d0      	lsls	r0, r2, #31
 8018898:	d502      	bpl.n	80188a0 <_printf_float+0x170>
 801889a:	3301      	adds	r3, #1
 801889c:	440b      	add	r3, r1
 801889e:	6123      	str	r3, [r4, #16]
 80188a0:	2300      	movs	r3, #0
 80188a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80188a4:	9304      	str	r3, [sp, #16]
 80188a6:	e7de      	b.n	8018866 <_printf_float+0x136>
 80188a8:	b913      	cbnz	r3, 80188b0 <_printf_float+0x180>
 80188aa:	6822      	ldr	r2, [r4, #0]
 80188ac:	07d2      	lsls	r2, r2, #31
 80188ae:	d501      	bpl.n	80188b4 <_printf_float+0x184>
 80188b0:	3302      	adds	r3, #2
 80188b2:	e7f4      	b.n	801889e <_printf_float+0x16e>
 80188b4:	2301      	movs	r3, #1
 80188b6:	e7f2      	b.n	801889e <_printf_float+0x16e>
 80188b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80188bc:	9b08      	ldr	r3, [sp, #32]
 80188be:	4299      	cmp	r1, r3
 80188c0:	db05      	blt.n	80188ce <_printf_float+0x19e>
 80188c2:	6823      	ldr	r3, [r4, #0]
 80188c4:	6121      	str	r1, [r4, #16]
 80188c6:	07d8      	lsls	r0, r3, #31
 80188c8:	d5ea      	bpl.n	80188a0 <_printf_float+0x170>
 80188ca:	1c4b      	adds	r3, r1, #1
 80188cc:	e7e7      	b.n	801889e <_printf_float+0x16e>
 80188ce:	2900      	cmp	r1, #0
 80188d0:	bfd4      	ite	le
 80188d2:	f1c1 0202 	rsble	r2, r1, #2
 80188d6:	2201      	movgt	r2, #1
 80188d8:	4413      	add	r3, r2
 80188da:	e7e0      	b.n	801889e <_printf_float+0x16e>
 80188dc:	6823      	ldr	r3, [r4, #0]
 80188de:	055a      	lsls	r2, r3, #21
 80188e0:	d407      	bmi.n	80188f2 <_printf_float+0x1c2>
 80188e2:	6923      	ldr	r3, [r4, #16]
 80188e4:	4642      	mov	r2, r8
 80188e6:	4631      	mov	r1, r6
 80188e8:	4628      	mov	r0, r5
 80188ea:	47b8      	blx	r7
 80188ec:	3001      	adds	r0, #1
 80188ee:	d12a      	bne.n	8018946 <_printf_float+0x216>
 80188f0:	e76a      	b.n	80187c8 <_printf_float+0x98>
 80188f2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80188f6:	f240 80e0 	bls.w	8018aba <_printf_float+0x38a>
 80188fa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80188fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018906:	d133      	bne.n	8018970 <_printf_float+0x240>
 8018908:	4a37      	ldr	r2, [pc, #220]	; (80189e8 <_printf_float+0x2b8>)
 801890a:	2301      	movs	r3, #1
 801890c:	4631      	mov	r1, r6
 801890e:	4628      	mov	r0, r5
 8018910:	47b8      	blx	r7
 8018912:	3001      	adds	r0, #1
 8018914:	f43f af58 	beq.w	80187c8 <_printf_float+0x98>
 8018918:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801891c:	429a      	cmp	r2, r3
 801891e:	db02      	blt.n	8018926 <_printf_float+0x1f6>
 8018920:	6823      	ldr	r3, [r4, #0]
 8018922:	07d8      	lsls	r0, r3, #31
 8018924:	d50f      	bpl.n	8018946 <_printf_float+0x216>
 8018926:	4653      	mov	r3, sl
 8018928:	465a      	mov	r2, fp
 801892a:	4631      	mov	r1, r6
 801892c:	4628      	mov	r0, r5
 801892e:	47b8      	blx	r7
 8018930:	3001      	adds	r0, #1
 8018932:	f43f af49 	beq.w	80187c8 <_printf_float+0x98>
 8018936:	f04f 0800 	mov.w	r8, #0
 801893a:	f104 091a 	add.w	r9, r4, #26
 801893e:	9b08      	ldr	r3, [sp, #32]
 8018940:	3b01      	subs	r3, #1
 8018942:	4543      	cmp	r3, r8
 8018944:	dc09      	bgt.n	801895a <_printf_float+0x22a>
 8018946:	6823      	ldr	r3, [r4, #0]
 8018948:	079b      	lsls	r3, r3, #30
 801894a:	f100 8106 	bmi.w	8018b5a <_printf_float+0x42a>
 801894e:	68e0      	ldr	r0, [r4, #12]
 8018950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018952:	4298      	cmp	r0, r3
 8018954:	bfb8      	it	lt
 8018956:	4618      	movlt	r0, r3
 8018958:	e738      	b.n	80187cc <_printf_float+0x9c>
 801895a:	2301      	movs	r3, #1
 801895c:	464a      	mov	r2, r9
 801895e:	4631      	mov	r1, r6
 8018960:	4628      	mov	r0, r5
 8018962:	47b8      	blx	r7
 8018964:	3001      	adds	r0, #1
 8018966:	f43f af2f 	beq.w	80187c8 <_printf_float+0x98>
 801896a:	f108 0801 	add.w	r8, r8, #1
 801896e:	e7e6      	b.n	801893e <_printf_float+0x20e>
 8018970:	9b07      	ldr	r3, [sp, #28]
 8018972:	2b00      	cmp	r3, #0
 8018974:	dc3a      	bgt.n	80189ec <_printf_float+0x2bc>
 8018976:	4a1c      	ldr	r2, [pc, #112]	; (80189e8 <_printf_float+0x2b8>)
 8018978:	2301      	movs	r3, #1
 801897a:	4631      	mov	r1, r6
 801897c:	4628      	mov	r0, r5
 801897e:	47b8      	blx	r7
 8018980:	3001      	adds	r0, #1
 8018982:	f43f af21 	beq.w	80187c8 <_printf_float+0x98>
 8018986:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801898a:	4313      	orrs	r3, r2
 801898c:	d102      	bne.n	8018994 <_printf_float+0x264>
 801898e:	6823      	ldr	r3, [r4, #0]
 8018990:	07d9      	lsls	r1, r3, #31
 8018992:	d5d8      	bpl.n	8018946 <_printf_float+0x216>
 8018994:	4653      	mov	r3, sl
 8018996:	465a      	mov	r2, fp
 8018998:	4631      	mov	r1, r6
 801899a:	4628      	mov	r0, r5
 801899c:	47b8      	blx	r7
 801899e:	3001      	adds	r0, #1
 80189a0:	f43f af12 	beq.w	80187c8 <_printf_float+0x98>
 80189a4:	f04f 0900 	mov.w	r9, #0
 80189a8:	f104 0a1a 	add.w	sl, r4, #26
 80189ac:	9b07      	ldr	r3, [sp, #28]
 80189ae:	425b      	negs	r3, r3
 80189b0:	454b      	cmp	r3, r9
 80189b2:	dc01      	bgt.n	80189b8 <_printf_float+0x288>
 80189b4:	9b08      	ldr	r3, [sp, #32]
 80189b6:	e795      	b.n	80188e4 <_printf_float+0x1b4>
 80189b8:	2301      	movs	r3, #1
 80189ba:	4652      	mov	r2, sl
 80189bc:	4631      	mov	r1, r6
 80189be:	4628      	mov	r0, r5
 80189c0:	47b8      	blx	r7
 80189c2:	3001      	adds	r0, #1
 80189c4:	f43f af00 	beq.w	80187c8 <_printf_float+0x98>
 80189c8:	f109 0901 	add.w	r9, r9, #1
 80189cc:	e7ee      	b.n	80189ac <_printf_float+0x27c>
 80189ce:	bf00      	nop
 80189d0:	ffffffff 	.word	0xffffffff
 80189d4:	7fefffff 	.word	0x7fefffff
 80189d8:	0801e356 	.word	0x0801e356
 80189dc:	0801e35a 	.word	0x0801e35a
 80189e0:	0801e35e 	.word	0x0801e35e
 80189e4:	0801e362 	.word	0x0801e362
 80189e8:	0801e366 	.word	0x0801e366
 80189ec:	9a08      	ldr	r2, [sp, #32]
 80189ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80189f0:	429a      	cmp	r2, r3
 80189f2:	bfa8      	it	ge
 80189f4:	461a      	movge	r2, r3
 80189f6:	2a00      	cmp	r2, #0
 80189f8:	4691      	mov	r9, r2
 80189fa:	dc38      	bgt.n	8018a6e <_printf_float+0x33e>
 80189fc:	2300      	movs	r3, #0
 80189fe:	9305      	str	r3, [sp, #20]
 8018a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018a04:	f104 021a 	add.w	r2, r4, #26
 8018a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018a0a:	9905      	ldr	r1, [sp, #20]
 8018a0c:	9304      	str	r3, [sp, #16]
 8018a0e:	eba3 0309 	sub.w	r3, r3, r9
 8018a12:	428b      	cmp	r3, r1
 8018a14:	dc33      	bgt.n	8018a7e <_printf_float+0x34e>
 8018a16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	db3c      	blt.n	8018a98 <_printf_float+0x368>
 8018a1e:	6823      	ldr	r3, [r4, #0]
 8018a20:	07da      	lsls	r2, r3, #31
 8018a22:	d439      	bmi.n	8018a98 <_printf_float+0x368>
 8018a24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018a28:	eba2 0903 	sub.w	r9, r2, r3
 8018a2c:	9b04      	ldr	r3, [sp, #16]
 8018a2e:	1ad2      	subs	r2, r2, r3
 8018a30:	4591      	cmp	r9, r2
 8018a32:	bfa8      	it	ge
 8018a34:	4691      	movge	r9, r2
 8018a36:	f1b9 0f00 	cmp.w	r9, #0
 8018a3a:	dc35      	bgt.n	8018aa8 <_printf_float+0x378>
 8018a3c:	f04f 0800 	mov.w	r8, #0
 8018a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018a44:	f104 0a1a 	add.w	sl, r4, #26
 8018a48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018a4c:	1a9b      	subs	r3, r3, r2
 8018a4e:	eba3 0309 	sub.w	r3, r3, r9
 8018a52:	4543      	cmp	r3, r8
 8018a54:	f77f af77 	ble.w	8018946 <_printf_float+0x216>
 8018a58:	2301      	movs	r3, #1
 8018a5a:	4652      	mov	r2, sl
 8018a5c:	4631      	mov	r1, r6
 8018a5e:	4628      	mov	r0, r5
 8018a60:	47b8      	blx	r7
 8018a62:	3001      	adds	r0, #1
 8018a64:	f43f aeb0 	beq.w	80187c8 <_printf_float+0x98>
 8018a68:	f108 0801 	add.w	r8, r8, #1
 8018a6c:	e7ec      	b.n	8018a48 <_printf_float+0x318>
 8018a6e:	4613      	mov	r3, r2
 8018a70:	4631      	mov	r1, r6
 8018a72:	4642      	mov	r2, r8
 8018a74:	4628      	mov	r0, r5
 8018a76:	47b8      	blx	r7
 8018a78:	3001      	adds	r0, #1
 8018a7a:	d1bf      	bne.n	80189fc <_printf_float+0x2cc>
 8018a7c:	e6a4      	b.n	80187c8 <_printf_float+0x98>
 8018a7e:	2301      	movs	r3, #1
 8018a80:	4631      	mov	r1, r6
 8018a82:	4628      	mov	r0, r5
 8018a84:	9204      	str	r2, [sp, #16]
 8018a86:	47b8      	blx	r7
 8018a88:	3001      	adds	r0, #1
 8018a8a:	f43f ae9d 	beq.w	80187c8 <_printf_float+0x98>
 8018a8e:	9b05      	ldr	r3, [sp, #20]
 8018a90:	9a04      	ldr	r2, [sp, #16]
 8018a92:	3301      	adds	r3, #1
 8018a94:	9305      	str	r3, [sp, #20]
 8018a96:	e7b7      	b.n	8018a08 <_printf_float+0x2d8>
 8018a98:	4653      	mov	r3, sl
 8018a9a:	465a      	mov	r2, fp
 8018a9c:	4631      	mov	r1, r6
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	47b8      	blx	r7
 8018aa2:	3001      	adds	r0, #1
 8018aa4:	d1be      	bne.n	8018a24 <_printf_float+0x2f4>
 8018aa6:	e68f      	b.n	80187c8 <_printf_float+0x98>
 8018aa8:	9a04      	ldr	r2, [sp, #16]
 8018aaa:	464b      	mov	r3, r9
 8018aac:	4442      	add	r2, r8
 8018aae:	4631      	mov	r1, r6
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	47b8      	blx	r7
 8018ab4:	3001      	adds	r0, #1
 8018ab6:	d1c1      	bne.n	8018a3c <_printf_float+0x30c>
 8018ab8:	e686      	b.n	80187c8 <_printf_float+0x98>
 8018aba:	9a08      	ldr	r2, [sp, #32]
 8018abc:	2a01      	cmp	r2, #1
 8018abe:	dc01      	bgt.n	8018ac4 <_printf_float+0x394>
 8018ac0:	07db      	lsls	r3, r3, #31
 8018ac2:	d537      	bpl.n	8018b34 <_printf_float+0x404>
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	4642      	mov	r2, r8
 8018ac8:	4631      	mov	r1, r6
 8018aca:	4628      	mov	r0, r5
 8018acc:	47b8      	blx	r7
 8018ace:	3001      	adds	r0, #1
 8018ad0:	f43f ae7a 	beq.w	80187c8 <_printf_float+0x98>
 8018ad4:	4653      	mov	r3, sl
 8018ad6:	465a      	mov	r2, fp
 8018ad8:	4631      	mov	r1, r6
 8018ada:	4628      	mov	r0, r5
 8018adc:	47b8      	blx	r7
 8018ade:	3001      	adds	r0, #1
 8018ae0:	f43f ae72 	beq.w	80187c8 <_printf_float+0x98>
 8018ae4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018ae8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af0:	9b08      	ldr	r3, [sp, #32]
 8018af2:	d01a      	beq.n	8018b2a <_printf_float+0x3fa>
 8018af4:	3b01      	subs	r3, #1
 8018af6:	f108 0201 	add.w	r2, r8, #1
 8018afa:	4631      	mov	r1, r6
 8018afc:	4628      	mov	r0, r5
 8018afe:	47b8      	blx	r7
 8018b00:	3001      	adds	r0, #1
 8018b02:	d10e      	bne.n	8018b22 <_printf_float+0x3f2>
 8018b04:	e660      	b.n	80187c8 <_printf_float+0x98>
 8018b06:	2301      	movs	r3, #1
 8018b08:	464a      	mov	r2, r9
 8018b0a:	4631      	mov	r1, r6
 8018b0c:	4628      	mov	r0, r5
 8018b0e:	47b8      	blx	r7
 8018b10:	3001      	adds	r0, #1
 8018b12:	f43f ae59 	beq.w	80187c8 <_printf_float+0x98>
 8018b16:	f108 0801 	add.w	r8, r8, #1
 8018b1a:	9b08      	ldr	r3, [sp, #32]
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	4543      	cmp	r3, r8
 8018b20:	dcf1      	bgt.n	8018b06 <_printf_float+0x3d6>
 8018b22:	9b04      	ldr	r3, [sp, #16]
 8018b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018b28:	e6dd      	b.n	80188e6 <_printf_float+0x1b6>
 8018b2a:	f04f 0800 	mov.w	r8, #0
 8018b2e:	f104 091a 	add.w	r9, r4, #26
 8018b32:	e7f2      	b.n	8018b1a <_printf_float+0x3ea>
 8018b34:	2301      	movs	r3, #1
 8018b36:	4642      	mov	r2, r8
 8018b38:	e7df      	b.n	8018afa <_printf_float+0x3ca>
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	464a      	mov	r2, r9
 8018b3e:	4631      	mov	r1, r6
 8018b40:	4628      	mov	r0, r5
 8018b42:	47b8      	blx	r7
 8018b44:	3001      	adds	r0, #1
 8018b46:	f43f ae3f 	beq.w	80187c8 <_printf_float+0x98>
 8018b4a:	f108 0801 	add.w	r8, r8, #1
 8018b4e:	68e3      	ldr	r3, [r4, #12]
 8018b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b52:	1a5b      	subs	r3, r3, r1
 8018b54:	4543      	cmp	r3, r8
 8018b56:	dcf0      	bgt.n	8018b3a <_printf_float+0x40a>
 8018b58:	e6f9      	b.n	801894e <_printf_float+0x21e>
 8018b5a:	f04f 0800 	mov.w	r8, #0
 8018b5e:	f104 0919 	add.w	r9, r4, #25
 8018b62:	e7f4      	b.n	8018b4e <_printf_float+0x41e>

08018b64 <_printf_common>:
 8018b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b68:	4616      	mov	r6, r2
 8018b6a:	4699      	mov	r9, r3
 8018b6c:	688a      	ldr	r2, [r1, #8]
 8018b6e:	690b      	ldr	r3, [r1, #16]
 8018b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b74:	4293      	cmp	r3, r2
 8018b76:	bfb8      	it	lt
 8018b78:	4613      	movlt	r3, r2
 8018b7a:	6033      	str	r3, [r6, #0]
 8018b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018b80:	4607      	mov	r7, r0
 8018b82:	460c      	mov	r4, r1
 8018b84:	b10a      	cbz	r2, 8018b8a <_printf_common+0x26>
 8018b86:	3301      	adds	r3, #1
 8018b88:	6033      	str	r3, [r6, #0]
 8018b8a:	6823      	ldr	r3, [r4, #0]
 8018b8c:	0699      	lsls	r1, r3, #26
 8018b8e:	bf42      	ittt	mi
 8018b90:	6833      	ldrmi	r3, [r6, #0]
 8018b92:	3302      	addmi	r3, #2
 8018b94:	6033      	strmi	r3, [r6, #0]
 8018b96:	6825      	ldr	r5, [r4, #0]
 8018b98:	f015 0506 	ands.w	r5, r5, #6
 8018b9c:	d106      	bne.n	8018bac <_printf_common+0x48>
 8018b9e:	f104 0a19 	add.w	sl, r4, #25
 8018ba2:	68e3      	ldr	r3, [r4, #12]
 8018ba4:	6832      	ldr	r2, [r6, #0]
 8018ba6:	1a9b      	subs	r3, r3, r2
 8018ba8:	42ab      	cmp	r3, r5
 8018baa:	dc26      	bgt.n	8018bfa <_printf_common+0x96>
 8018bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018bb0:	1e13      	subs	r3, r2, #0
 8018bb2:	6822      	ldr	r2, [r4, #0]
 8018bb4:	bf18      	it	ne
 8018bb6:	2301      	movne	r3, #1
 8018bb8:	0692      	lsls	r2, r2, #26
 8018bba:	d42b      	bmi.n	8018c14 <_printf_common+0xb0>
 8018bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018bc0:	4649      	mov	r1, r9
 8018bc2:	4638      	mov	r0, r7
 8018bc4:	47c0      	blx	r8
 8018bc6:	3001      	adds	r0, #1
 8018bc8:	d01e      	beq.n	8018c08 <_printf_common+0xa4>
 8018bca:	6823      	ldr	r3, [r4, #0]
 8018bcc:	6922      	ldr	r2, [r4, #16]
 8018bce:	f003 0306 	and.w	r3, r3, #6
 8018bd2:	2b04      	cmp	r3, #4
 8018bd4:	bf02      	ittt	eq
 8018bd6:	68e5      	ldreq	r5, [r4, #12]
 8018bd8:	6833      	ldreq	r3, [r6, #0]
 8018bda:	1aed      	subeq	r5, r5, r3
 8018bdc:	68a3      	ldr	r3, [r4, #8]
 8018bde:	bf0c      	ite	eq
 8018be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018be4:	2500      	movne	r5, #0
 8018be6:	4293      	cmp	r3, r2
 8018be8:	bfc4      	itt	gt
 8018bea:	1a9b      	subgt	r3, r3, r2
 8018bec:	18ed      	addgt	r5, r5, r3
 8018bee:	2600      	movs	r6, #0
 8018bf0:	341a      	adds	r4, #26
 8018bf2:	42b5      	cmp	r5, r6
 8018bf4:	d11a      	bne.n	8018c2c <_printf_common+0xc8>
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	e008      	b.n	8018c0c <_printf_common+0xa8>
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	4652      	mov	r2, sl
 8018bfe:	4649      	mov	r1, r9
 8018c00:	4638      	mov	r0, r7
 8018c02:	47c0      	blx	r8
 8018c04:	3001      	adds	r0, #1
 8018c06:	d103      	bne.n	8018c10 <_printf_common+0xac>
 8018c08:	f04f 30ff 	mov.w	r0, #4294967295
 8018c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c10:	3501      	adds	r5, #1
 8018c12:	e7c6      	b.n	8018ba2 <_printf_common+0x3e>
 8018c14:	18e1      	adds	r1, r4, r3
 8018c16:	1c5a      	adds	r2, r3, #1
 8018c18:	2030      	movs	r0, #48	; 0x30
 8018c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018c1e:	4422      	add	r2, r4
 8018c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018c28:	3302      	adds	r3, #2
 8018c2a:	e7c7      	b.n	8018bbc <_printf_common+0x58>
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	4622      	mov	r2, r4
 8018c30:	4649      	mov	r1, r9
 8018c32:	4638      	mov	r0, r7
 8018c34:	47c0      	blx	r8
 8018c36:	3001      	adds	r0, #1
 8018c38:	d0e6      	beq.n	8018c08 <_printf_common+0xa4>
 8018c3a:	3601      	adds	r6, #1
 8018c3c:	e7d9      	b.n	8018bf2 <_printf_common+0x8e>
	...

08018c40 <_printf_i>:
 8018c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c44:	7e0f      	ldrb	r7, [r1, #24]
 8018c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c48:	2f78      	cmp	r7, #120	; 0x78
 8018c4a:	4691      	mov	r9, r2
 8018c4c:	4680      	mov	r8, r0
 8018c4e:	460c      	mov	r4, r1
 8018c50:	469a      	mov	sl, r3
 8018c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018c56:	d807      	bhi.n	8018c68 <_printf_i+0x28>
 8018c58:	2f62      	cmp	r7, #98	; 0x62
 8018c5a:	d80a      	bhi.n	8018c72 <_printf_i+0x32>
 8018c5c:	2f00      	cmp	r7, #0
 8018c5e:	f000 80d4 	beq.w	8018e0a <_printf_i+0x1ca>
 8018c62:	2f58      	cmp	r7, #88	; 0x58
 8018c64:	f000 80c0 	beq.w	8018de8 <_printf_i+0x1a8>
 8018c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018c70:	e03a      	b.n	8018ce8 <_printf_i+0xa8>
 8018c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018c76:	2b15      	cmp	r3, #21
 8018c78:	d8f6      	bhi.n	8018c68 <_printf_i+0x28>
 8018c7a:	a101      	add	r1, pc, #4	; (adr r1, 8018c80 <_printf_i+0x40>)
 8018c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018c80:	08018cd9 	.word	0x08018cd9
 8018c84:	08018ced 	.word	0x08018ced
 8018c88:	08018c69 	.word	0x08018c69
 8018c8c:	08018c69 	.word	0x08018c69
 8018c90:	08018c69 	.word	0x08018c69
 8018c94:	08018c69 	.word	0x08018c69
 8018c98:	08018ced 	.word	0x08018ced
 8018c9c:	08018c69 	.word	0x08018c69
 8018ca0:	08018c69 	.word	0x08018c69
 8018ca4:	08018c69 	.word	0x08018c69
 8018ca8:	08018c69 	.word	0x08018c69
 8018cac:	08018df1 	.word	0x08018df1
 8018cb0:	08018d19 	.word	0x08018d19
 8018cb4:	08018dab 	.word	0x08018dab
 8018cb8:	08018c69 	.word	0x08018c69
 8018cbc:	08018c69 	.word	0x08018c69
 8018cc0:	08018e13 	.word	0x08018e13
 8018cc4:	08018c69 	.word	0x08018c69
 8018cc8:	08018d19 	.word	0x08018d19
 8018ccc:	08018c69 	.word	0x08018c69
 8018cd0:	08018c69 	.word	0x08018c69
 8018cd4:	08018db3 	.word	0x08018db3
 8018cd8:	682b      	ldr	r3, [r5, #0]
 8018cda:	1d1a      	adds	r2, r3, #4
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	602a      	str	r2, [r5, #0]
 8018ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018ce8:	2301      	movs	r3, #1
 8018cea:	e09f      	b.n	8018e2c <_printf_i+0x1ec>
 8018cec:	6820      	ldr	r0, [r4, #0]
 8018cee:	682b      	ldr	r3, [r5, #0]
 8018cf0:	0607      	lsls	r7, r0, #24
 8018cf2:	f103 0104 	add.w	r1, r3, #4
 8018cf6:	6029      	str	r1, [r5, #0]
 8018cf8:	d501      	bpl.n	8018cfe <_printf_i+0xbe>
 8018cfa:	681e      	ldr	r6, [r3, #0]
 8018cfc:	e003      	b.n	8018d06 <_printf_i+0xc6>
 8018cfe:	0646      	lsls	r6, r0, #25
 8018d00:	d5fb      	bpl.n	8018cfa <_printf_i+0xba>
 8018d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018d06:	2e00      	cmp	r6, #0
 8018d08:	da03      	bge.n	8018d12 <_printf_i+0xd2>
 8018d0a:	232d      	movs	r3, #45	; 0x2d
 8018d0c:	4276      	negs	r6, r6
 8018d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d12:	485a      	ldr	r0, [pc, #360]	; (8018e7c <_printf_i+0x23c>)
 8018d14:	230a      	movs	r3, #10
 8018d16:	e012      	b.n	8018d3e <_printf_i+0xfe>
 8018d18:	682b      	ldr	r3, [r5, #0]
 8018d1a:	6820      	ldr	r0, [r4, #0]
 8018d1c:	1d19      	adds	r1, r3, #4
 8018d1e:	6029      	str	r1, [r5, #0]
 8018d20:	0605      	lsls	r5, r0, #24
 8018d22:	d501      	bpl.n	8018d28 <_printf_i+0xe8>
 8018d24:	681e      	ldr	r6, [r3, #0]
 8018d26:	e002      	b.n	8018d2e <_printf_i+0xee>
 8018d28:	0641      	lsls	r1, r0, #25
 8018d2a:	d5fb      	bpl.n	8018d24 <_printf_i+0xe4>
 8018d2c:	881e      	ldrh	r6, [r3, #0]
 8018d2e:	4853      	ldr	r0, [pc, #332]	; (8018e7c <_printf_i+0x23c>)
 8018d30:	2f6f      	cmp	r7, #111	; 0x6f
 8018d32:	bf0c      	ite	eq
 8018d34:	2308      	moveq	r3, #8
 8018d36:	230a      	movne	r3, #10
 8018d38:	2100      	movs	r1, #0
 8018d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018d3e:	6865      	ldr	r5, [r4, #4]
 8018d40:	60a5      	str	r5, [r4, #8]
 8018d42:	2d00      	cmp	r5, #0
 8018d44:	bfa2      	ittt	ge
 8018d46:	6821      	ldrge	r1, [r4, #0]
 8018d48:	f021 0104 	bicge.w	r1, r1, #4
 8018d4c:	6021      	strge	r1, [r4, #0]
 8018d4e:	b90e      	cbnz	r6, 8018d54 <_printf_i+0x114>
 8018d50:	2d00      	cmp	r5, #0
 8018d52:	d04b      	beq.n	8018dec <_printf_i+0x1ac>
 8018d54:	4615      	mov	r5, r2
 8018d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8018d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8018d5e:	5dc7      	ldrb	r7, [r0, r7]
 8018d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018d64:	4637      	mov	r7, r6
 8018d66:	42bb      	cmp	r3, r7
 8018d68:	460e      	mov	r6, r1
 8018d6a:	d9f4      	bls.n	8018d56 <_printf_i+0x116>
 8018d6c:	2b08      	cmp	r3, #8
 8018d6e:	d10b      	bne.n	8018d88 <_printf_i+0x148>
 8018d70:	6823      	ldr	r3, [r4, #0]
 8018d72:	07de      	lsls	r6, r3, #31
 8018d74:	d508      	bpl.n	8018d88 <_printf_i+0x148>
 8018d76:	6923      	ldr	r3, [r4, #16]
 8018d78:	6861      	ldr	r1, [r4, #4]
 8018d7a:	4299      	cmp	r1, r3
 8018d7c:	bfde      	ittt	le
 8018d7e:	2330      	movle	r3, #48	; 0x30
 8018d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018d88:	1b52      	subs	r2, r2, r5
 8018d8a:	6122      	str	r2, [r4, #16]
 8018d8c:	f8cd a000 	str.w	sl, [sp]
 8018d90:	464b      	mov	r3, r9
 8018d92:	aa03      	add	r2, sp, #12
 8018d94:	4621      	mov	r1, r4
 8018d96:	4640      	mov	r0, r8
 8018d98:	f7ff fee4 	bl	8018b64 <_printf_common>
 8018d9c:	3001      	adds	r0, #1
 8018d9e:	d14a      	bne.n	8018e36 <_printf_i+0x1f6>
 8018da0:	f04f 30ff 	mov.w	r0, #4294967295
 8018da4:	b004      	add	sp, #16
 8018da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018daa:	6823      	ldr	r3, [r4, #0]
 8018dac:	f043 0320 	orr.w	r3, r3, #32
 8018db0:	6023      	str	r3, [r4, #0]
 8018db2:	4833      	ldr	r0, [pc, #204]	; (8018e80 <_printf_i+0x240>)
 8018db4:	2778      	movs	r7, #120	; 0x78
 8018db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018dba:	6823      	ldr	r3, [r4, #0]
 8018dbc:	6829      	ldr	r1, [r5, #0]
 8018dbe:	061f      	lsls	r7, r3, #24
 8018dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8018dc4:	d402      	bmi.n	8018dcc <_printf_i+0x18c>
 8018dc6:	065f      	lsls	r7, r3, #25
 8018dc8:	bf48      	it	mi
 8018dca:	b2b6      	uxthmi	r6, r6
 8018dcc:	07df      	lsls	r7, r3, #31
 8018dce:	bf48      	it	mi
 8018dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8018dd4:	6029      	str	r1, [r5, #0]
 8018dd6:	bf48      	it	mi
 8018dd8:	6023      	strmi	r3, [r4, #0]
 8018dda:	b91e      	cbnz	r6, 8018de4 <_printf_i+0x1a4>
 8018ddc:	6823      	ldr	r3, [r4, #0]
 8018dde:	f023 0320 	bic.w	r3, r3, #32
 8018de2:	6023      	str	r3, [r4, #0]
 8018de4:	2310      	movs	r3, #16
 8018de6:	e7a7      	b.n	8018d38 <_printf_i+0xf8>
 8018de8:	4824      	ldr	r0, [pc, #144]	; (8018e7c <_printf_i+0x23c>)
 8018dea:	e7e4      	b.n	8018db6 <_printf_i+0x176>
 8018dec:	4615      	mov	r5, r2
 8018dee:	e7bd      	b.n	8018d6c <_printf_i+0x12c>
 8018df0:	682b      	ldr	r3, [r5, #0]
 8018df2:	6826      	ldr	r6, [r4, #0]
 8018df4:	6961      	ldr	r1, [r4, #20]
 8018df6:	1d18      	adds	r0, r3, #4
 8018df8:	6028      	str	r0, [r5, #0]
 8018dfa:	0635      	lsls	r5, r6, #24
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	d501      	bpl.n	8018e04 <_printf_i+0x1c4>
 8018e00:	6019      	str	r1, [r3, #0]
 8018e02:	e002      	b.n	8018e0a <_printf_i+0x1ca>
 8018e04:	0670      	lsls	r0, r6, #25
 8018e06:	d5fb      	bpl.n	8018e00 <_printf_i+0x1c0>
 8018e08:	8019      	strh	r1, [r3, #0]
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	6123      	str	r3, [r4, #16]
 8018e0e:	4615      	mov	r5, r2
 8018e10:	e7bc      	b.n	8018d8c <_printf_i+0x14c>
 8018e12:	682b      	ldr	r3, [r5, #0]
 8018e14:	1d1a      	adds	r2, r3, #4
 8018e16:	602a      	str	r2, [r5, #0]
 8018e18:	681d      	ldr	r5, [r3, #0]
 8018e1a:	6862      	ldr	r2, [r4, #4]
 8018e1c:	2100      	movs	r1, #0
 8018e1e:	4628      	mov	r0, r5
 8018e20:	f7e8 faee 	bl	8001400 <memchr>
 8018e24:	b108      	cbz	r0, 8018e2a <_printf_i+0x1ea>
 8018e26:	1b40      	subs	r0, r0, r5
 8018e28:	6060      	str	r0, [r4, #4]
 8018e2a:	6863      	ldr	r3, [r4, #4]
 8018e2c:	6123      	str	r3, [r4, #16]
 8018e2e:	2300      	movs	r3, #0
 8018e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e34:	e7aa      	b.n	8018d8c <_printf_i+0x14c>
 8018e36:	6923      	ldr	r3, [r4, #16]
 8018e38:	462a      	mov	r2, r5
 8018e3a:	4649      	mov	r1, r9
 8018e3c:	4640      	mov	r0, r8
 8018e3e:	47d0      	blx	sl
 8018e40:	3001      	adds	r0, #1
 8018e42:	d0ad      	beq.n	8018da0 <_printf_i+0x160>
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	079b      	lsls	r3, r3, #30
 8018e48:	d413      	bmi.n	8018e72 <_printf_i+0x232>
 8018e4a:	68e0      	ldr	r0, [r4, #12]
 8018e4c:	9b03      	ldr	r3, [sp, #12]
 8018e4e:	4298      	cmp	r0, r3
 8018e50:	bfb8      	it	lt
 8018e52:	4618      	movlt	r0, r3
 8018e54:	e7a6      	b.n	8018da4 <_printf_i+0x164>
 8018e56:	2301      	movs	r3, #1
 8018e58:	4632      	mov	r2, r6
 8018e5a:	4649      	mov	r1, r9
 8018e5c:	4640      	mov	r0, r8
 8018e5e:	47d0      	blx	sl
 8018e60:	3001      	adds	r0, #1
 8018e62:	d09d      	beq.n	8018da0 <_printf_i+0x160>
 8018e64:	3501      	adds	r5, #1
 8018e66:	68e3      	ldr	r3, [r4, #12]
 8018e68:	9903      	ldr	r1, [sp, #12]
 8018e6a:	1a5b      	subs	r3, r3, r1
 8018e6c:	42ab      	cmp	r3, r5
 8018e6e:	dcf2      	bgt.n	8018e56 <_printf_i+0x216>
 8018e70:	e7eb      	b.n	8018e4a <_printf_i+0x20a>
 8018e72:	2500      	movs	r5, #0
 8018e74:	f104 0619 	add.w	r6, r4, #25
 8018e78:	e7f5      	b.n	8018e66 <_printf_i+0x226>
 8018e7a:	bf00      	nop
 8018e7c:	0801e368 	.word	0x0801e368
 8018e80:	0801e379 	.word	0x0801e379

08018e84 <std>:
 8018e84:	2300      	movs	r3, #0
 8018e86:	b510      	push	{r4, lr}
 8018e88:	4604      	mov	r4, r0
 8018e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8018e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e92:	6083      	str	r3, [r0, #8]
 8018e94:	8181      	strh	r1, [r0, #12]
 8018e96:	6643      	str	r3, [r0, #100]	; 0x64
 8018e98:	81c2      	strh	r2, [r0, #14]
 8018e9a:	6183      	str	r3, [r0, #24]
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	2208      	movs	r2, #8
 8018ea0:	305c      	adds	r0, #92	; 0x5c
 8018ea2:	f000 f9f5 	bl	8019290 <memset>
 8018ea6:	4b05      	ldr	r3, [pc, #20]	; (8018ebc <std+0x38>)
 8018ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8018eaa:	4b05      	ldr	r3, [pc, #20]	; (8018ec0 <std+0x3c>)
 8018eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8018eae:	4b05      	ldr	r3, [pc, #20]	; (8018ec4 <std+0x40>)
 8018eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018eb2:	4b05      	ldr	r3, [pc, #20]	; (8018ec8 <std+0x44>)
 8018eb4:	6224      	str	r4, [r4, #32]
 8018eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8018eb8:	bd10      	pop	{r4, pc}
 8018eba:	bf00      	nop
 8018ebc:	080190c1 	.word	0x080190c1
 8018ec0:	080190e3 	.word	0x080190e3
 8018ec4:	0801911b 	.word	0x0801911b
 8018ec8:	0801913f 	.word	0x0801913f

08018ecc <stdio_exit_handler>:
 8018ecc:	4a02      	ldr	r2, [pc, #8]	; (8018ed8 <stdio_exit_handler+0xc>)
 8018ece:	4903      	ldr	r1, [pc, #12]	; (8018edc <stdio_exit_handler+0x10>)
 8018ed0:	4803      	ldr	r0, [pc, #12]	; (8018ee0 <stdio_exit_handler+0x14>)
 8018ed2:	f000 b869 	b.w	8018fa8 <_fwalk_sglue>
 8018ed6:	bf00      	nop
 8018ed8:	20000060 	.word	0x20000060
 8018edc:	0801ac4d 	.word	0x0801ac4d
 8018ee0:	2000006c 	.word	0x2000006c

08018ee4 <cleanup_stdio>:
 8018ee4:	6841      	ldr	r1, [r0, #4]
 8018ee6:	4b0c      	ldr	r3, [pc, #48]	; (8018f18 <cleanup_stdio+0x34>)
 8018ee8:	4299      	cmp	r1, r3
 8018eea:	b510      	push	{r4, lr}
 8018eec:	4604      	mov	r4, r0
 8018eee:	d001      	beq.n	8018ef4 <cleanup_stdio+0x10>
 8018ef0:	f001 feac 	bl	801ac4c <_fflush_r>
 8018ef4:	68a1      	ldr	r1, [r4, #8]
 8018ef6:	4b09      	ldr	r3, [pc, #36]	; (8018f1c <cleanup_stdio+0x38>)
 8018ef8:	4299      	cmp	r1, r3
 8018efa:	d002      	beq.n	8018f02 <cleanup_stdio+0x1e>
 8018efc:	4620      	mov	r0, r4
 8018efe:	f001 fea5 	bl	801ac4c <_fflush_r>
 8018f02:	68e1      	ldr	r1, [r4, #12]
 8018f04:	4b06      	ldr	r3, [pc, #24]	; (8018f20 <cleanup_stdio+0x3c>)
 8018f06:	4299      	cmp	r1, r3
 8018f08:	d004      	beq.n	8018f14 <cleanup_stdio+0x30>
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f10:	f001 be9c 	b.w	801ac4c <_fflush_r>
 8018f14:	bd10      	pop	{r4, pc}
 8018f16:	bf00      	nop
 8018f18:	20008154 	.word	0x20008154
 8018f1c:	200081bc 	.word	0x200081bc
 8018f20:	20008224 	.word	0x20008224

08018f24 <global_stdio_init.part.0>:
 8018f24:	b510      	push	{r4, lr}
 8018f26:	4b0b      	ldr	r3, [pc, #44]	; (8018f54 <global_stdio_init.part.0+0x30>)
 8018f28:	4c0b      	ldr	r4, [pc, #44]	; (8018f58 <global_stdio_init.part.0+0x34>)
 8018f2a:	4a0c      	ldr	r2, [pc, #48]	; (8018f5c <global_stdio_init.part.0+0x38>)
 8018f2c:	601a      	str	r2, [r3, #0]
 8018f2e:	4620      	mov	r0, r4
 8018f30:	2200      	movs	r2, #0
 8018f32:	2104      	movs	r1, #4
 8018f34:	f7ff ffa6 	bl	8018e84 <std>
 8018f38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018f3c:	2201      	movs	r2, #1
 8018f3e:	2109      	movs	r1, #9
 8018f40:	f7ff ffa0 	bl	8018e84 <std>
 8018f44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018f48:	2202      	movs	r2, #2
 8018f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f4e:	2112      	movs	r1, #18
 8018f50:	f7ff bf98 	b.w	8018e84 <std>
 8018f54:	2000828c 	.word	0x2000828c
 8018f58:	20008154 	.word	0x20008154
 8018f5c:	08018ecd 	.word	0x08018ecd

08018f60 <__sfp_lock_acquire>:
 8018f60:	4801      	ldr	r0, [pc, #4]	; (8018f68 <__sfp_lock_acquire+0x8>)
 8018f62:	f000 ba0b 	b.w	801937c <__retarget_lock_acquire_recursive>
 8018f66:	bf00      	nop
 8018f68:	20008295 	.word	0x20008295

08018f6c <__sfp_lock_release>:
 8018f6c:	4801      	ldr	r0, [pc, #4]	; (8018f74 <__sfp_lock_release+0x8>)
 8018f6e:	f000 ba06 	b.w	801937e <__retarget_lock_release_recursive>
 8018f72:	bf00      	nop
 8018f74:	20008295 	.word	0x20008295

08018f78 <__sinit>:
 8018f78:	b510      	push	{r4, lr}
 8018f7a:	4604      	mov	r4, r0
 8018f7c:	f7ff fff0 	bl	8018f60 <__sfp_lock_acquire>
 8018f80:	6a23      	ldr	r3, [r4, #32]
 8018f82:	b11b      	cbz	r3, 8018f8c <__sinit+0x14>
 8018f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f88:	f7ff bff0 	b.w	8018f6c <__sfp_lock_release>
 8018f8c:	4b04      	ldr	r3, [pc, #16]	; (8018fa0 <__sinit+0x28>)
 8018f8e:	6223      	str	r3, [r4, #32]
 8018f90:	4b04      	ldr	r3, [pc, #16]	; (8018fa4 <__sinit+0x2c>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1f5      	bne.n	8018f84 <__sinit+0xc>
 8018f98:	f7ff ffc4 	bl	8018f24 <global_stdio_init.part.0>
 8018f9c:	e7f2      	b.n	8018f84 <__sinit+0xc>
 8018f9e:	bf00      	nop
 8018fa0:	08018ee5 	.word	0x08018ee5
 8018fa4:	2000828c 	.word	0x2000828c

08018fa8 <_fwalk_sglue>:
 8018fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fac:	4607      	mov	r7, r0
 8018fae:	4688      	mov	r8, r1
 8018fb0:	4614      	mov	r4, r2
 8018fb2:	2600      	movs	r6, #0
 8018fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8018fbc:	d505      	bpl.n	8018fca <_fwalk_sglue+0x22>
 8018fbe:	6824      	ldr	r4, [r4, #0]
 8018fc0:	2c00      	cmp	r4, #0
 8018fc2:	d1f7      	bne.n	8018fb4 <_fwalk_sglue+0xc>
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fca:	89ab      	ldrh	r3, [r5, #12]
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d907      	bls.n	8018fe0 <_fwalk_sglue+0x38>
 8018fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018fd4:	3301      	adds	r3, #1
 8018fd6:	d003      	beq.n	8018fe0 <_fwalk_sglue+0x38>
 8018fd8:	4629      	mov	r1, r5
 8018fda:	4638      	mov	r0, r7
 8018fdc:	47c0      	blx	r8
 8018fde:	4306      	orrs	r6, r0
 8018fe0:	3568      	adds	r5, #104	; 0x68
 8018fe2:	e7e9      	b.n	8018fb8 <_fwalk_sglue+0x10>

08018fe4 <iprintf>:
 8018fe4:	b40f      	push	{r0, r1, r2, r3}
 8018fe6:	b507      	push	{r0, r1, r2, lr}
 8018fe8:	4906      	ldr	r1, [pc, #24]	; (8019004 <iprintf+0x20>)
 8018fea:	ab04      	add	r3, sp, #16
 8018fec:	6808      	ldr	r0, [r1, #0]
 8018fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ff2:	6881      	ldr	r1, [r0, #8]
 8018ff4:	9301      	str	r3, [sp, #4]
 8018ff6:	f001 fc89 	bl	801a90c <_vfiprintf_r>
 8018ffa:	b003      	add	sp, #12
 8018ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019000:	b004      	add	sp, #16
 8019002:	4770      	bx	lr
 8019004:	200000b8 	.word	0x200000b8

08019008 <_puts_r>:
 8019008:	6a03      	ldr	r3, [r0, #32]
 801900a:	b570      	push	{r4, r5, r6, lr}
 801900c:	6884      	ldr	r4, [r0, #8]
 801900e:	4605      	mov	r5, r0
 8019010:	460e      	mov	r6, r1
 8019012:	b90b      	cbnz	r3, 8019018 <_puts_r+0x10>
 8019014:	f7ff ffb0 	bl	8018f78 <__sinit>
 8019018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801901a:	07db      	lsls	r3, r3, #31
 801901c:	d405      	bmi.n	801902a <_puts_r+0x22>
 801901e:	89a3      	ldrh	r3, [r4, #12]
 8019020:	0598      	lsls	r0, r3, #22
 8019022:	d402      	bmi.n	801902a <_puts_r+0x22>
 8019024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019026:	f000 f9a9 	bl	801937c <__retarget_lock_acquire_recursive>
 801902a:	89a3      	ldrh	r3, [r4, #12]
 801902c:	0719      	lsls	r1, r3, #28
 801902e:	d513      	bpl.n	8019058 <_puts_r+0x50>
 8019030:	6923      	ldr	r3, [r4, #16]
 8019032:	b18b      	cbz	r3, 8019058 <_puts_r+0x50>
 8019034:	3e01      	subs	r6, #1
 8019036:	68a3      	ldr	r3, [r4, #8]
 8019038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801903c:	3b01      	subs	r3, #1
 801903e:	60a3      	str	r3, [r4, #8]
 8019040:	b9e9      	cbnz	r1, 801907e <_puts_r+0x76>
 8019042:	2b00      	cmp	r3, #0
 8019044:	da2e      	bge.n	80190a4 <_puts_r+0x9c>
 8019046:	4622      	mov	r2, r4
 8019048:	210a      	movs	r1, #10
 801904a:	4628      	mov	r0, r5
 801904c:	f000 f87b 	bl	8019146 <__swbuf_r>
 8019050:	3001      	adds	r0, #1
 8019052:	d007      	beq.n	8019064 <_puts_r+0x5c>
 8019054:	250a      	movs	r5, #10
 8019056:	e007      	b.n	8019068 <_puts_r+0x60>
 8019058:	4621      	mov	r1, r4
 801905a:	4628      	mov	r0, r5
 801905c:	f000 f8b0 	bl	80191c0 <__swsetup_r>
 8019060:	2800      	cmp	r0, #0
 8019062:	d0e7      	beq.n	8019034 <_puts_r+0x2c>
 8019064:	f04f 35ff 	mov.w	r5, #4294967295
 8019068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801906a:	07da      	lsls	r2, r3, #31
 801906c:	d405      	bmi.n	801907a <_puts_r+0x72>
 801906e:	89a3      	ldrh	r3, [r4, #12]
 8019070:	059b      	lsls	r3, r3, #22
 8019072:	d402      	bmi.n	801907a <_puts_r+0x72>
 8019074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019076:	f000 f982 	bl	801937e <__retarget_lock_release_recursive>
 801907a:	4628      	mov	r0, r5
 801907c:	bd70      	pop	{r4, r5, r6, pc}
 801907e:	2b00      	cmp	r3, #0
 8019080:	da04      	bge.n	801908c <_puts_r+0x84>
 8019082:	69a2      	ldr	r2, [r4, #24]
 8019084:	429a      	cmp	r2, r3
 8019086:	dc06      	bgt.n	8019096 <_puts_r+0x8e>
 8019088:	290a      	cmp	r1, #10
 801908a:	d004      	beq.n	8019096 <_puts_r+0x8e>
 801908c:	6823      	ldr	r3, [r4, #0]
 801908e:	1c5a      	adds	r2, r3, #1
 8019090:	6022      	str	r2, [r4, #0]
 8019092:	7019      	strb	r1, [r3, #0]
 8019094:	e7cf      	b.n	8019036 <_puts_r+0x2e>
 8019096:	4622      	mov	r2, r4
 8019098:	4628      	mov	r0, r5
 801909a:	f000 f854 	bl	8019146 <__swbuf_r>
 801909e:	3001      	adds	r0, #1
 80190a0:	d1c9      	bne.n	8019036 <_puts_r+0x2e>
 80190a2:	e7df      	b.n	8019064 <_puts_r+0x5c>
 80190a4:	6823      	ldr	r3, [r4, #0]
 80190a6:	250a      	movs	r5, #10
 80190a8:	1c5a      	adds	r2, r3, #1
 80190aa:	6022      	str	r2, [r4, #0]
 80190ac:	701d      	strb	r5, [r3, #0]
 80190ae:	e7db      	b.n	8019068 <_puts_r+0x60>

080190b0 <puts>:
 80190b0:	4b02      	ldr	r3, [pc, #8]	; (80190bc <puts+0xc>)
 80190b2:	4601      	mov	r1, r0
 80190b4:	6818      	ldr	r0, [r3, #0]
 80190b6:	f7ff bfa7 	b.w	8019008 <_puts_r>
 80190ba:	bf00      	nop
 80190bc:	200000b8 	.word	0x200000b8

080190c0 <__sread>:
 80190c0:	b510      	push	{r4, lr}
 80190c2:	460c      	mov	r4, r1
 80190c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c8:	f000 f910 	bl	80192ec <_read_r>
 80190cc:	2800      	cmp	r0, #0
 80190ce:	bfab      	itete	ge
 80190d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80190d2:	89a3      	ldrhlt	r3, [r4, #12]
 80190d4:	181b      	addge	r3, r3, r0
 80190d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80190da:	bfac      	ite	ge
 80190dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80190de:	81a3      	strhlt	r3, [r4, #12]
 80190e0:	bd10      	pop	{r4, pc}

080190e2 <__swrite>:
 80190e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e6:	461f      	mov	r7, r3
 80190e8:	898b      	ldrh	r3, [r1, #12]
 80190ea:	05db      	lsls	r3, r3, #23
 80190ec:	4605      	mov	r5, r0
 80190ee:	460c      	mov	r4, r1
 80190f0:	4616      	mov	r6, r2
 80190f2:	d505      	bpl.n	8019100 <__swrite+0x1e>
 80190f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190f8:	2302      	movs	r3, #2
 80190fa:	2200      	movs	r2, #0
 80190fc:	f000 f8e4 	bl	80192c8 <_lseek_r>
 8019100:	89a3      	ldrh	r3, [r4, #12]
 8019102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801910a:	81a3      	strh	r3, [r4, #12]
 801910c:	4632      	mov	r2, r6
 801910e:	463b      	mov	r3, r7
 8019110:	4628      	mov	r0, r5
 8019112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019116:	f000 b8fb 	b.w	8019310 <_write_r>

0801911a <__sseek>:
 801911a:	b510      	push	{r4, lr}
 801911c:	460c      	mov	r4, r1
 801911e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019122:	f000 f8d1 	bl	80192c8 <_lseek_r>
 8019126:	1c43      	adds	r3, r0, #1
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	bf15      	itete	ne
 801912c:	6560      	strne	r0, [r4, #84]	; 0x54
 801912e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019136:	81a3      	strheq	r3, [r4, #12]
 8019138:	bf18      	it	ne
 801913a:	81a3      	strhne	r3, [r4, #12]
 801913c:	bd10      	pop	{r4, pc}

0801913e <__sclose>:
 801913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019142:	f000 b8b1 	b.w	80192a8 <_close_r>

08019146 <__swbuf_r>:
 8019146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019148:	460e      	mov	r6, r1
 801914a:	4614      	mov	r4, r2
 801914c:	4605      	mov	r5, r0
 801914e:	b118      	cbz	r0, 8019158 <__swbuf_r+0x12>
 8019150:	6a03      	ldr	r3, [r0, #32]
 8019152:	b90b      	cbnz	r3, 8019158 <__swbuf_r+0x12>
 8019154:	f7ff ff10 	bl	8018f78 <__sinit>
 8019158:	69a3      	ldr	r3, [r4, #24]
 801915a:	60a3      	str	r3, [r4, #8]
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	071a      	lsls	r2, r3, #28
 8019160:	d525      	bpl.n	80191ae <__swbuf_r+0x68>
 8019162:	6923      	ldr	r3, [r4, #16]
 8019164:	b31b      	cbz	r3, 80191ae <__swbuf_r+0x68>
 8019166:	6823      	ldr	r3, [r4, #0]
 8019168:	6922      	ldr	r2, [r4, #16]
 801916a:	1a98      	subs	r0, r3, r2
 801916c:	6963      	ldr	r3, [r4, #20]
 801916e:	b2f6      	uxtb	r6, r6
 8019170:	4283      	cmp	r3, r0
 8019172:	4637      	mov	r7, r6
 8019174:	dc04      	bgt.n	8019180 <__swbuf_r+0x3a>
 8019176:	4621      	mov	r1, r4
 8019178:	4628      	mov	r0, r5
 801917a:	f001 fd67 	bl	801ac4c <_fflush_r>
 801917e:	b9e0      	cbnz	r0, 80191ba <__swbuf_r+0x74>
 8019180:	68a3      	ldr	r3, [r4, #8]
 8019182:	3b01      	subs	r3, #1
 8019184:	60a3      	str	r3, [r4, #8]
 8019186:	6823      	ldr	r3, [r4, #0]
 8019188:	1c5a      	adds	r2, r3, #1
 801918a:	6022      	str	r2, [r4, #0]
 801918c:	701e      	strb	r6, [r3, #0]
 801918e:	6962      	ldr	r2, [r4, #20]
 8019190:	1c43      	adds	r3, r0, #1
 8019192:	429a      	cmp	r2, r3
 8019194:	d004      	beq.n	80191a0 <__swbuf_r+0x5a>
 8019196:	89a3      	ldrh	r3, [r4, #12]
 8019198:	07db      	lsls	r3, r3, #31
 801919a:	d506      	bpl.n	80191aa <__swbuf_r+0x64>
 801919c:	2e0a      	cmp	r6, #10
 801919e:	d104      	bne.n	80191aa <__swbuf_r+0x64>
 80191a0:	4621      	mov	r1, r4
 80191a2:	4628      	mov	r0, r5
 80191a4:	f001 fd52 	bl	801ac4c <_fflush_r>
 80191a8:	b938      	cbnz	r0, 80191ba <__swbuf_r+0x74>
 80191aa:	4638      	mov	r0, r7
 80191ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ae:	4621      	mov	r1, r4
 80191b0:	4628      	mov	r0, r5
 80191b2:	f000 f805 	bl	80191c0 <__swsetup_r>
 80191b6:	2800      	cmp	r0, #0
 80191b8:	d0d5      	beq.n	8019166 <__swbuf_r+0x20>
 80191ba:	f04f 37ff 	mov.w	r7, #4294967295
 80191be:	e7f4      	b.n	80191aa <__swbuf_r+0x64>

080191c0 <__swsetup_r>:
 80191c0:	b538      	push	{r3, r4, r5, lr}
 80191c2:	4b2a      	ldr	r3, [pc, #168]	; (801926c <__swsetup_r+0xac>)
 80191c4:	4605      	mov	r5, r0
 80191c6:	6818      	ldr	r0, [r3, #0]
 80191c8:	460c      	mov	r4, r1
 80191ca:	b118      	cbz	r0, 80191d4 <__swsetup_r+0x14>
 80191cc:	6a03      	ldr	r3, [r0, #32]
 80191ce:	b90b      	cbnz	r3, 80191d4 <__swsetup_r+0x14>
 80191d0:	f7ff fed2 	bl	8018f78 <__sinit>
 80191d4:	89a3      	ldrh	r3, [r4, #12]
 80191d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191da:	0718      	lsls	r0, r3, #28
 80191dc:	d422      	bmi.n	8019224 <__swsetup_r+0x64>
 80191de:	06d9      	lsls	r1, r3, #27
 80191e0:	d407      	bmi.n	80191f2 <__swsetup_r+0x32>
 80191e2:	2309      	movs	r3, #9
 80191e4:	602b      	str	r3, [r5, #0]
 80191e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80191ea:	81a3      	strh	r3, [r4, #12]
 80191ec:	f04f 30ff 	mov.w	r0, #4294967295
 80191f0:	e034      	b.n	801925c <__swsetup_r+0x9c>
 80191f2:	0758      	lsls	r0, r3, #29
 80191f4:	d512      	bpl.n	801921c <__swsetup_r+0x5c>
 80191f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80191f8:	b141      	cbz	r1, 801920c <__swsetup_r+0x4c>
 80191fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80191fe:	4299      	cmp	r1, r3
 8019200:	d002      	beq.n	8019208 <__swsetup_r+0x48>
 8019202:	4628      	mov	r0, r5
 8019204:	f000 fedc 	bl	8019fc0 <_free_r>
 8019208:	2300      	movs	r3, #0
 801920a:	6363      	str	r3, [r4, #52]	; 0x34
 801920c:	89a3      	ldrh	r3, [r4, #12]
 801920e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019212:	81a3      	strh	r3, [r4, #12]
 8019214:	2300      	movs	r3, #0
 8019216:	6063      	str	r3, [r4, #4]
 8019218:	6923      	ldr	r3, [r4, #16]
 801921a:	6023      	str	r3, [r4, #0]
 801921c:	89a3      	ldrh	r3, [r4, #12]
 801921e:	f043 0308 	orr.w	r3, r3, #8
 8019222:	81a3      	strh	r3, [r4, #12]
 8019224:	6923      	ldr	r3, [r4, #16]
 8019226:	b94b      	cbnz	r3, 801923c <__swsetup_r+0x7c>
 8019228:	89a3      	ldrh	r3, [r4, #12]
 801922a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801922e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019232:	d003      	beq.n	801923c <__swsetup_r+0x7c>
 8019234:	4621      	mov	r1, r4
 8019236:	4628      	mov	r0, r5
 8019238:	f001 fd68 	bl	801ad0c <__smakebuf_r>
 801923c:	89a0      	ldrh	r0, [r4, #12]
 801923e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019242:	f010 0301 	ands.w	r3, r0, #1
 8019246:	d00a      	beq.n	801925e <__swsetup_r+0x9e>
 8019248:	2300      	movs	r3, #0
 801924a:	60a3      	str	r3, [r4, #8]
 801924c:	6963      	ldr	r3, [r4, #20]
 801924e:	425b      	negs	r3, r3
 8019250:	61a3      	str	r3, [r4, #24]
 8019252:	6923      	ldr	r3, [r4, #16]
 8019254:	b943      	cbnz	r3, 8019268 <__swsetup_r+0xa8>
 8019256:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801925a:	d1c4      	bne.n	80191e6 <__swsetup_r+0x26>
 801925c:	bd38      	pop	{r3, r4, r5, pc}
 801925e:	0781      	lsls	r1, r0, #30
 8019260:	bf58      	it	pl
 8019262:	6963      	ldrpl	r3, [r4, #20]
 8019264:	60a3      	str	r3, [r4, #8]
 8019266:	e7f4      	b.n	8019252 <__swsetup_r+0x92>
 8019268:	2000      	movs	r0, #0
 801926a:	e7f7      	b.n	801925c <__swsetup_r+0x9c>
 801926c:	200000b8 	.word	0x200000b8

08019270 <memcmp>:
 8019270:	b510      	push	{r4, lr}
 8019272:	3901      	subs	r1, #1
 8019274:	4402      	add	r2, r0
 8019276:	4290      	cmp	r0, r2
 8019278:	d101      	bne.n	801927e <memcmp+0xe>
 801927a:	2000      	movs	r0, #0
 801927c:	e005      	b.n	801928a <memcmp+0x1a>
 801927e:	7803      	ldrb	r3, [r0, #0]
 8019280:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019284:	42a3      	cmp	r3, r4
 8019286:	d001      	beq.n	801928c <memcmp+0x1c>
 8019288:	1b18      	subs	r0, r3, r4
 801928a:	bd10      	pop	{r4, pc}
 801928c:	3001      	adds	r0, #1
 801928e:	e7f2      	b.n	8019276 <memcmp+0x6>

08019290 <memset>:
 8019290:	4402      	add	r2, r0
 8019292:	4603      	mov	r3, r0
 8019294:	4293      	cmp	r3, r2
 8019296:	d100      	bne.n	801929a <memset+0xa>
 8019298:	4770      	bx	lr
 801929a:	f803 1b01 	strb.w	r1, [r3], #1
 801929e:	e7f9      	b.n	8019294 <memset+0x4>

080192a0 <_localeconv_r>:
 80192a0:	4800      	ldr	r0, [pc, #0]	; (80192a4 <_localeconv_r+0x4>)
 80192a2:	4770      	bx	lr
 80192a4:	200001ac 	.word	0x200001ac

080192a8 <_close_r>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	4d06      	ldr	r5, [pc, #24]	; (80192c4 <_close_r+0x1c>)
 80192ac:	2300      	movs	r3, #0
 80192ae:	4604      	mov	r4, r0
 80192b0:	4608      	mov	r0, r1
 80192b2:	602b      	str	r3, [r5, #0]
 80192b4:	f7e9 fcc5 	bl	8002c42 <_close>
 80192b8:	1c43      	adds	r3, r0, #1
 80192ba:	d102      	bne.n	80192c2 <_close_r+0x1a>
 80192bc:	682b      	ldr	r3, [r5, #0]
 80192be:	b103      	cbz	r3, 80192c2 <_close_r+0x1a>
 80192c0:	6023      	str	r3, [r4, #0]
 80192c2:	bd38      	pop	{r3, r4, r5, pc}
 80192c4:	20008290 	.word	0x20008290

080192c8 <_lseek_r>:
 80192c8:	b538      	push	{r3, r4, r5, lr}
 80192ca:	4d07      	ldr	r5, [pc, #28]	; (80192e8 <_lseek_r+0x20>)
 80192cc:	4604      	mov	r4, r0
 80192ce:	4608      	mov	r0, r1
 80192d0:	4611      	mov	r1, r2
 80192d2:	2200      	movs	r2, #0
 80192d4:	602a      	str	r2, [r5, #0]
 80192d6:	461a      	mov	r2, r3
 80192d8:	f7e9 fcda 	bl	8002c90 <_lseek>
 80192dc:	1c43      	adds	r3, r0, #1
 80192de:	d102      	bne.n	80192e6 <_lseek_r+0x1e>
 80192e0:	682b      	ldr	r3, [r5, #0]
 80192e2:	b103      	cbz	r3, 80192e6 <_lseek_r+0x1e>
 80192e4:	6023      	str	r3, [r4, #0]
 80192e6:	bd38      	pop	{r3, r4, r5, pc}
 80192e8:	20008290 	.word	0x20008290

080192ec <_read_r>:
 80192ec:	b538      	push	{r3, r4, r5, lr}
 80192ee:	4d07      	ldr	r5, [pc, #28]	; (801930c <_read_r+0x20>)
 80192f0:	4604      	mov	r4, r0
 80192f2:	4608      	mov	r0, r1
 80192f4:	4611      	mov	r1, r2
 80192f6:	2200      	movs	r2, #0
 80192f8:	602a      	str	r2, [r5, #0]
 80192fa:	461a      	mov	r2, r3
 80192fc:	f7e9 fc68 	bl	8002bd0 <_read>
 8019300:	1c43      	adds	r3, r0, #1
 8019302:	d102      	bne.n	801930a <_read_r+0x1e>
 8019304:	682b      	ldr	r3, [r5, #0]
 8019306:	b103      	cbz	r3, 801930a <_read_r+0x1e>
 8019308:	6023      	str	r3, [r4, #0]
 801930a:	bd38      	pop	{r3, r4, r5, pc}
 801930c:	20008290 	.word	0x20008290

08019310 <_write_r>:
 8019310:	b538      	push	{r3, r4, r5, lr}
 8019312:	4d07      	ldr	r5, [pc, #28]	; (8019330 <_write_r+0x20>)
 8019314:	4604      	mov	r4, r0
 8019316:	4608      	mov	r0, r1
 8019318:	4611      	mov	r1, r2
 801931a:	2200      	movs	r2, #0
 801931c:	602a      	str	r2, [r5, #0]
 801931e:	461a      	mov	r2, r3
 8019320:	f7e9 fc73 	bl	8002c0a <_write>
 8019324:	1c43      	adds	r3, r0, #1
 8019326:	d102      	bne.n	801932e <_write_r+0x1e>
 8019328:	682b      	ldr	r3, [r5, #0]
 801932a:	b103      	cbz	r3, 801932e <_write_r+0x1e>
 801932c:	6023      	str	r3, [r4, #0]
 801932e:	bd38      	pop	{r3, r4, r5, pc}
 8019330:	20008290 	.word	0x20008290

08019334 <__libc_init_array>:
 8019334:	b570      	push	{r4, r5, r6, lr}
 8019336:	4d0d      	ldr	r5, [pc, #52]	; (801936c <__libc_init_array+0x38>)
 8019338:	4c0d      	ldr	r4, [pc, #52]	; (8019370 <__libc_init_array+0x3c>)
 801933a:	1b64      	subs	r4, r4, r5
 801933c:	10a4      	asrs	r4, r4, #2
 801933e:	2600      	movs	r6, #0
 8019340:	42a6      	cmp	r6, r4
 8019342:	d109      	bne.n	8019358 <__libc_init_array+0x24>
 8019344:	4d0b      	ldr	r5, [pc, #44]	; (8019374 <__libc_init_array+0x40>)
 8019346:	4c0c      	ldr	r4, [pc, #48]	; (8019378 <__libc_init_array+0x44>)
 8019348:	f001 fdce 	bl	801aee8 <_init>
 801934c:	1b64      	subs	r4, r4, r5
 801934e:	10a4      	asrs	r4, r4, #2
 8019350:	2600      	movs	r6, #0
 8019352:	42a6      	cmp	r6, r4
 8019354:	d105      	bne.n	8019362 <__libc_init_array+0x2e>
 8019356:	bd70      	pop	{r4, r5, r6, pc}
 8019358:	f855 3b04 	ldr.w	r3, [r5], #4
 801935c:	4798      	blx	r3
 801935e:	3601      	adds	r6, #1
 8019360:	e7ee      	b.n	8019340 <__libc_init_array+0xc>
 8019362:	f855 3b04 	ldr.w	r3, [r5], #4
 8019366:	4798      	blx	r3
 8019368:	3601      	adds	r6, #1
 801936a:	e7f2      	b.n	8019352 <__libc_init_array+0x1e>
 801936c:	0801e5b8 	.word	0x0801e5b8
 8019370:	0801e5b8 	.word	0x0801e5b8
 8019374:	0801e5b8 	.word	0x0801e5b8
 8019378:	0801e5bc 	.word	0x0801e5bc

0801937c <__retarget_lock_acquire_recursive>:
 801937c:	4770      	bx	lr

0801937e <__retarget_lock_release_recursive>:
 801937e:	4770      	bx	lr

08019380 <memcpy>:
 8019380:	440a      	add	r2, r1
 8019382:	4291      	cmp	r1, r2
 8019384:	f100 33ff 	add.w	r3, r0, #4294967295
 8019388:	d100      	bne.n	801938c <memcpy+0xc>
 801938a:	4770      	bx	lr
 801938c:	b510      	push	{r4, lr}
 801938e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019396:	4291      	cmp	r1, r2
 8019398:	d1f9      	bne.n	801938e <memcpy+0xe>
 801939a:	bd10      	pop	{r4, pc}

0801939c <__assert_func>:
 801939c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801939e:	4614      	mov	r4, r2
 80193a0:	461a      	mov	r2, r3
 80193a2:	4b09      	ldr	r3, [pc, #36]	; (80193c8 <__assert_func+0x2c>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4605      	mov	r5, r0
 80193a8:	68d8      	ldr	r0, [r3, #12]
 80193aa:	b14c      	cbz	r4, 80193c0 <__assert_func+0x24>
 80193ac:	4b07      	ldr	r3, [pc, #28]	; (80193cc <__assert_func+0x30>)
 80193ae:	9100      	str	r1, [sp, #0]
 80193b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80193b4:	4906      	ldr	r1, [pc, #24]	; (80193d0 <__assert_func+0x34>)
 80193b6:	462b      	mov	r3, r5
 80193b8:	f001 fc70 	bl	801ac9c <fiprintf>
 80193bc:	f001 fd14 	bl	801ade8 <abort>
 80193c0:	4b04      	ldr	r3, [pc, #16]	; (80193d4 <__assert_func+0x38>)
 80193c2:	461c      	mov	r4, r3
 80193c4:	e7f3      	b.n	80193ae <__assert_func+0x12>
 80193c6:	bf00      	nop
 80193c8:	200000b8 	.word	0x200000b8
 80193cc:	0801e38a 	.word	0x0801e38a
 80193d0:	0801e397 	.word	0x0801e397
 80193d4:	0801e3c5 	.word	0x0801e3c5

080193d8 <quorem>:
 80193d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193dc:	6903      	ldr	r3, [r0, #16]
 80193de:	690c      	ldr	r4, [r1, #16]
 80193e0:	42a3      	cmp	r3, r4
 80193e2:	4607      	mov	r7, r0
 80193e4:	db7e      	blt.n	80194e4 <quorem+0x10c>
 80193e6:	3c01      	subs	r4, #1
 80193e8:	f101 0814 	add.w	r8, r1, #20
 80193ec:	f100 0514 	add.w	r5, r0, #20
 80193f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193f4:	9301      	str	r3, [sp, #4]
 80193f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193fe:	3301      	adds	r3, #1
 8019400:	429a      	cmp	r2, r3
 8019402:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019406:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801940a:	fbb2 f6f3 	udiv	r6, r2, r3
 801940e:	d331      	bcc.n	8019474 <quorem+0x9c>
 8019410:	f04f 0e00 	mov.w	lr, #0
 8019414:	4640      	mov	r0, r8
 8019416:	46ac      	mov	ip, r5
 8019418:	46f2      	mov	sl, lr
 801941a:	f850 2b04 	ldr.w	r2, [r0], #4
 801941e:	b293      	uxth	r3, r2
 8019420:	fb06 e303 	mla	r3, r6, r3, lr
 8019424:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019428:	0c1a      	lsrs	r2, r3, #16
 801942a:	b29b      	uxth	r3, r3
 801942c:	ebaa 0303 	sub.w	r3, sl, r3
 8019430:	f8dc a000 	ldr.w	sl, [ip]
 8019434:	fa13 f38a 	uxtah	r3, r3, sl
 8019438:	fb06 220e 	mla	r2, r6, lr, r2
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	9b00      	ldr	r3, [sp, #0]
 8019440:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019444:	b292      	uxth	r2, r2
 8019446:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801944a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801944e:	f8bd 3000 	ldrh.w	r3, [sp]
 8019452:	4581      	cmp	r9, r0
 8019454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019458:	f84c 3b04 	str.w	r3, [ip], #4
 801945c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019460:	d2db      	bcs.n	801941a <quorem+0x42>
 8019462:	f855 300b 	ldr.w	r3, [r5, fp]
 8019466:	b92b      	cbnz	r3, 8019474 <quorem+0x9c>
 8019468:	9b01      	ldr	r3, [sp, #4]
 801946a:	3b04      	subs	r3, #4
 801946c:	429d      	cmp	r5, r3
 801946e:	461a      	mov	r2, r3
 8019470:	d32c      	bcc.n	80194cc <quorem+0xf4>
 8019472:	613c      	str	r4, [r7, #16]
 8019474:	4638      	mov	r0, r7
 8019476:	f001 f91f 	bl	801a6b8 <__mcmp>
 801947a:	2800      	cmp	r0, #0
 801947c:	db22      	blt.n	80194c4 <quorem+0xec>
 801947e:	3601      	adds	r6, #1
 8019480:	4629      	mov	r1, r5
 8019482:	2000      	movs	r0, #0
 8019484:	f858 2b04 	ldr.w	r2, [r8], #4
 8019488:	f8d1 c000 	ldr.w	ip, [r1]
 801948c:	b293      	uxth	r3, r2
 801948e:	1ac3      	subs	r3, r0, r3
 8019490:	0c12      	lsrs	r2, r2, #16
 8019492:	fa13 f38c 	uxtah	r3, r3, ip
 8019496:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801949a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801949e:	b29b      	uxth	r3, r3
 80194a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80194a4:	45c1      	cmp	r9, r8
 80194a6:	f841 3b04 	str.w	r3, [r1], #4
 80194aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80194ae:	d2e9      	bcs.n	8019484 <quorem+0xac>
 80194b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80194b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80194b8:	b922      	cbnz	r2, 80194c4 <quorem+0xec>
 80194ba:	3b04      	subs	r3, #4
 80194bc:	429d      	cmp	r5, r3
 80194be:	461a      	mov	r2, r3
 80194c0:	d30a      	bcc.n	80194d8 <quorem+0x100>
 80194c2:	613c      	str	r4, [r7, #16]
 80194c4:	4630      	mov	r0, r6
 80194c6:	b003      	add	sp, #12
 80194c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194cc:	6812      	ldr	r2, [r2, #0]
 80194ce:	3b04      	subs	r3, #4
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	d1ce      	bne.n	8019472 <quorem+0x9a>
 80194d4:	3c01      	subs	r4, #1
 80194d6:	e7c9      	b.n	801946c <quorem+0x94>
 80194d8:	6812      	ldr	r2, [r2, #0]
 80194da:	3b04      	subs	r3, #4
 80194dc:	2a00      	cmp	r2, #0
 80194de:	d1f0      	bne.n	80194c2 <quorem+0xea>
 80194e0:	3c01      	subs	r4, #1
 80194e2:	e7eb      	b.n	80194bc <quorem+0xe4>
 80194e4:	2000      	movs	r0, #0
 80194e6:	e7ee      	b.n	80194c6 <quorem+0xee>

080194e8 <_dtoa_r>:
 80194e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ec:	ed2d 8b02 	vpush	{d8}
 80194f0:	69c5      	ldr	r5, [r0, #28]
 80194f2:	b091      	sub	sp, #68	; 0x44
 80194f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194f8:	ec59 8b10 	vmov	r8, r9, d0
 80194fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80194fe:	9106      	str	r1, [sp, #24]
 8019500:	4606      	mov	r6, r0
 8019502:	9208      	str	r2, [sp, #32]
 8019504:	930c      	str	r3, [sp, #48]	; 0x30
 8019506:	b975      	cbnz	r5, 8019526 <_dtoa_r+0x3e>
 8019508:	2010      	movs	r0, #16
 801950a:	f000 fda5 	bl	801a058 <malloc>
 801950e:	4602      	mov	r2, r0
 8019510:	61f0      	str	r0, [r6, #28]
 8019512:	b920      	cbnz	r0, 801951e <_dtoa_r+0x36>
 8019514:	4ba6      	ldr	r3, [pc, #664]	; (80197b0 <_dtoa_r+0x2c8>)
 8019516:	21ef      	movs	r1, #239	; 0xef
 8019518:	48a6      	ldr	r0, [pc, #664]	; (80197b4 <_dtoa_r+0x2cc>)
 801951a:	f7ff ff3f 	bl	801939c <__assert_func>
 801951e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019522:	6005      	str	r5, [r0, #0]
 8019524:	60c5      	str	r5, [r0, #12]
 8019526:	69f3      	ldr	r3, [r6, #28]
 8019528:	6819      	ldr	r1, [r3, #0]
 801952a:	b151      	cbz	r1, 8019542 <_dtoa_r+0x5a>
 801952c:	685a      	ldr	r2, [r3, #4]
 801952e:	604a      	str	r2, [r1, #4]
 8019530:	2301      	movs	r3, #1
 8019532:	4093      	lsls	r3, r2
 8019534:	608b      	str	r3, [r1, #8]
 8019536:	4630      	mov	r0, r6
 8019538:	f000 fe82 	bl	801a240 <_Bfree>
 801953c:	69f3      	ldr	r3, [r6, #28]
 801953e:	2200      	movs	r2, #0
 8019540:	601a      	str	r2, [r3, #0]
 8019542:	f1b9 0300 	subs.w	r3, r9, #0
 8019546:	bfbb      	ittet	lt
 8019548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801954c:	9303      	strlt	r3, [sp, #12]
 801954e:	2300      	movge	r3, #0
 8019550:	2201      	movlt	r2, #1
 8019552:	bfac      	ite	ge
 8019554:	6023      	strge	r3, [r4, #0]
 8019556:	6022      	strlt	r2, [r4, #0]
 8019558:	4b97      	ldr	r3, [pc, #604]	; (80197b8 <_dtoa_r+0x2d0>)
 801955a:	9c03      	ldr	r4, [sp, #12]
 801955c:	43a3      	bics	r3, r4
 801955e:	d11c      	bne.n	801959a <_dtoa_r+0xb2>
 8019560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019562:	f242 730f 	movw	r3, #9999	; 0x270f
 8019566:	6013      	str	r3, [r2, #0]
 8019568:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801956c:	ea53 0308 	orrs.w	r3, r3, r8
 8019570:	f000 84fb 	beq.w	8019f6a <_dtoa_r+0xa82>
 8019574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019576:	b963      	cbnz	r3, 8019592 <_dtoa_r+0xaa>
 8019578:	4b90      	ldr	r3, [pc, #576]	; (80197bc <_dtoa_r+0x2d4>)
 801957a:	e020      	b.n	80195be <_dtoa_r+0xd6>
 801957c:	4b90      	ldr	r3, [pc, #576]	; (80197c0 <_dtoa_r+0x2d8>)
 801957e:	9301      	str	r3, [sp, #4]
 8019580:	3308      	adds	r3, #8
 8019582:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019584:	6013      	str	r3, [r2, #0]
 8019586:	9801      	ldr	r0, [sp, #4]
 8019588:	b011      	add	sp, #68	; 0x44
 801958a:	ecbd 8b02 	vpop	{d8}
 801958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019592:	4b8a      	ldr	r3, [pc, #552]	; (80197bc <_dtoa_r+0x2d4>)
 8019594:	9301      	str	r3, [sp, #4]
 8019596:	3303      	adds	r3, #3
 8019598:	e7f3      	b.n	8019582 <_dtoa_r+0x9a>
 801959a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801959e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80195a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a6:	d10c      	bne.n	80195c2 <_dtoa_r+0xda>
 80195a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195aa:	2301      	movs	r3, #1
 80195ac:	6013      	str	r3, [r2, #0]
 80195ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	f000 84d7 	beq.w	8019f64 <_dtoa_r+0xa7c>
 80195b6:	4b83      	ldr	r3, [pc, #524]	; (80197c4 <_dtoa_r+0x2dc>)
 80195b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80195ba:	6013      	str	r3, [r2, #0]
 80195bc:	3b01      	subs	r3, #1
 80195be:	9301      	str	r3, [sp, #4]
 80195c0:	e7e1      	b.n	8019586 <_dtoa_r+0x9e>
 80195c2:	aa0e      	add	r2, sp, #56	; 0x38
 80195c4:	a90f      	add	r1, sp, #60	; 0x3c
 80195c6:	4630      	mov	r0, r6
 80195c8:	eeb0 0b48 	vmov.f64	d0, d8
 80195cc:	f001 f91a 	bl	801a804 <__d2b>
 80195d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80195d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80195d6:	4605      	mov	r5, r0
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d046      	beq.n	801966a <_dtoa_r+0x182>
 80195dc:	eeb0 7b48 	vmov.f64	d7, d8
 80195e0:	ee18 1a90 	vmov	r1, s17
 80195e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80195e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80195ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80195f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80195f4:	2000      	movs	r0, #0
 80195f6:	ee07 1a90 	vmov	s15, r1
 80195fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80195fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019798 <_dtoa_r+0x2b0>
 8019602:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019606:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80197a0 <_dtoa_r+0x2b8>
 801960a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801960e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80197a8 <_dtoa_r+0x2c0>
 8019612:	ee07 3a90 	vmov	s15, r3
 8019616:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801961a:	eeb0 7b46 	vmov.f64	d7, d6
 801961e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019622:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019626:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801962a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801962e:	ee16 ba90 	vmov	fp, s13
 8019632:	9009      	str	r0, [sp, #36]	; 0x24
 8019634:	d508      	bpl.n	8019648 <_dtoa_r+0x160>
 8019636:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801963a:	eeb4 6b47 	vcmp.f64	d6, d7
 801963e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019642:	bf18      	it	ne
 8019644:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019648:	f1bb 0f16 	cmp.w	fp, #22
 801964c:	d82b      	bhi.n	80196a6 <_dtoa_r+0x1be>
 801964e:	495e      	ldr	r1, [pc, #376]	; (80197c8 <_dtoa_r+0x2e0>)
 8019650:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019654:	ed91 7b00 	vldr	d7, [r1]
 8019658:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019660:	d501      	bpl.n	8019666 <_dtoa_r+0x17e>
 8019662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019666:	2100      	movs	r1, #0
 8019668:	e01e      	b.n	80196a8 <_dtoa_r+0x1c0>
 801966a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801966c:	4413      	add	r3, r2
 801966e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8019672:	2920      	cmp	r1, #32
 8019674:	bfc1      	itttt	gt
 8019676:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801967a:	408c      	lslgt	r4, r1
 801967c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8019680:	fa28 f101 	lsrgt.w	r1, r8, r1
 8019684:	bfd6      	itet	le
 8019686:	f1c1 0120 	rsble	r1, r1, #32
 801968a:	4321      	orrgt	r1, r4
 801968c:	fa08 f101 	lslle.w	r1, r8, r1
 8019690:	ee07 1a90 	vmov	s15, r1
 8019694:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019698:	3b01      	subs	r3, #1
 801969a:	ee17 1a90 	vmov	r1, s15
 801969e:	2001      	movs	r0, #1
 80196a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80196a4:	e7a7      	b.n	80195f6 <_dtoa_r+0x10e>
 80196a6:	2101      	movs	r1, #1
 80196a8:	1ad2      	subs	r2, r2, r3
 80196aa:	1e53      	subs	r3, r2, #1
 80196ac:	9305      	str	r3, [sp, #20]
 80196ae:	bf45      	ittet	mi
 80196b0:	f1c2 0301 	rsbmi	r3, r2, #1
 80196b4:	9304      	strmi	r3, [sp, #16]
 80196b6:	2300      	movpl	r3, #0
 80196b8:	2300      	movmi	r3, #0
 80196ba:	bf4c      	ite	mi
 80196bc:	9305      	strmi	r3, [sp, #20]
 80196be:	9304      	strpl	r3, [sp, #16]
 80196c0:	f1bb 0f00 	cmp.w	fp, #0
 80196c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80196c6:	db18      	blt.n	80196fa <_dtoa_r+0x212>
 80196c8:	9b05      	ldr	r3, [sp, #20]
 80196ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80196ce:	445b      	add	r3, fp
 80196d0:	9305      	str	r3, [sp, #20]
 80196d2:	2300      	movs	r3, #0
 80196d4:	9a06      	ldr	r2, [sp, #24]
 80196d6:	2a09      	cmp	r2, #9
 80196d8:	d848      	bhi.n	801976c <_dtoa_r+0x284>
 80196da:	2a05      	cmp	r2, #5
 80196dc:	bfc4      	itt	gt
 80196de:	3a04      	subgt	r2, #4
 80196e0:	9206      	strgt	r2, [sp, #24]
 80196e2:	9a06      	ldr	r2, [sp, #24]
 80196e4:	f1a2 0202 	sub.w	r2, r2, #2
 80196e8:	bfcc      	ite	gt
 80196ea:	2400      	movgt	r4, #0
 80196ec:	2401      	movle	r4, #1
 80196ee:	2a03      	cmp	r2, #3
 80196f0:	d847      	bhi.n	8019782 <_dtoa_r+0x29a>
 80196f2:	e8df f002 	tbb	[pc, r2]
 80196f6:	2d0b      	.short	0x2d0b
 80196f8:	392b      	.short	0x392b
 80196fa:	9b04      	ldr	r3, [sp, #16]
 80196fc:	2200      	movs	r2, #0
 80196fe:	eba3 030b 	sub.w	r3, r3, fp
 8019702:	9304      	str	r3, [sp, #16]
 8019704:	920a      	str	r2, [sp, #40]	; 0x28
 8019706:	f1cb 0300 	rsb	r3, fp, #0
 801970a:	e7e3      	b.n	80196d4 <_dtoa_r+0x1ec>
 801970c:	2200      	movs	r2, #0
 801970e:	9207      	str	r2, [sp, #28]
 8019710:	9a08      	ldr	r2, [sp, #32]
 8019712:	2a00      	cmp	r2, #0
 8019714:	dc38      	bgt.n	8019788 <_dtoa_r+0x2a0>
 8019716:	f04f 0a01 	mov.w	sl, #1
 801971a:	46d1      	mov	r9, sl
 801971c:	4652      	mov	r2, sl
 801971e:	f8cd a020 	str.w	sl, [sp, #32]
 8019722:	69f7      	ldr	r7, [r6, #28]
 8019724:	2100      	movs	r1, #0
 8019726:	2004      	movs	r0, #4
 8019728:	f100 0c14 	add.w	ip, r0, #20
 801972c:	4594      	cmp	ip, r2
 801972e:	d930      	bls.n	8019792 <_dtoa_r+0x2aa>
 8019730:	6079      	str	r1, [r7, #4]
 8019732:	4630      	mov	r0, r6
 8019734:	930d      	str	r3, [sp, #52]	; 0x34
 8019736:	f000 fd43 	bl	801a1c0 <_Balloc>
 801973a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801973c:	9001      	str	r0, [sp, #4]
 801973e:	4602      	mov	r2, r0
 8019740:	2800      	cmp	r0, #0
 8019742:	d145      	bne.n	80197d0 <_dtoa_r+0x2e8>
 8019744:	4b21      	ldr	r3, [pc, #132]	; (80197cc <_dtoa_r+0x2e4>)
 8019746:	f240 11af 	movw	r1, #431	; 0x1af
 801974a:	e6e5      	b.n	8019518 <_dtoa_r+0x30>
 801974c:	2201      	movs	r2, #1
 801974e:	e7de      	b.n	801970e <_dtoa_r+0x226>
 8019750:	2200      	movs	r2, #0
 8019752:	9207      	str	r2, [sp, #28]
 8019754:	9a08      	ldr	r2, [sp, #32]
 8019756:	eb0b 0a02 	add.w	sl, fp, r2
 801975a:	f10a 0901 	add.w	r9, sl, #1
 801975e:	464a      	mov	r2, r9
 8019760:	2a01      	cmp	r2, #1
 8019762:	bfb8      	it	lt
 8019764:	2201      	movlt	r2, #1
 8019766:	e7dc      	b.n	8019722 <_dtoa_r+0x23a>
 8019768:	2201      	movs	r2, #1
 801976a:	e7f2      	b.n	8019752 <_dtoa_r+0x26a>
 801976c:	2401      	movs	r4, #1
 801976e:	2200      	movs	r2, #0
 8019770:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019774:	f04f 3aff 	mov.w	sl, #4294967295
 8019778:	2100      	movs	r1, #0
 801977a:	46d1      	mov	r9, sl
 801977c:	2212      	movs	r2, #18
 801977e:	9108      	str	r1, [sp, #32]
 8019780:	e7cf      	b.n	8019722 <_dtoa_r+0x23a>
 8019782:	2201      	movs	r2, #1
 8019784:	9207      	str	r2, [sp, #28]
 8019786:	e7f5      	b.n	8019774 <_dtoa_r+0x28c>
 8019788:	f8dd a020 	ldr.w	sl, [sp, #32]
 801978c:	46d1      	mov	r9, sl
 801978e:	4652      	mov	r2, sl
 8019790:	e7c7      	b.n	8019722 <_dtoa_r+0x23a>
 8019792:	3101      	adds	r1, #1
 8019794:	0040      	lsls	r0, r0, #1
 8019796:	e7c7      	b.n	8019728 <_dtoa_r+0x240>
 8019798:	636f4361 	.word	0x636f4361
 801979c:	3fd287a7 	.word	0x3fd287a7
 80197a0:	8b60c8b3 	.word	0x8b60c8b3
 80197a4:	3fc68a28 	.word	0x3fc68a28
 80197a8:	509f79fb 	.word	0x509f79fb
 80197ac:	3fd34413 	.word	0x3fd34413
 80197b0:	0801e1e6 	.word	0x0801e1e6
 80197b4:	0801e3d3 	.word	0x0801e3d3
 80197b8:	7ff00000 	.word	0x7ff00000
 80197bc:	0801e3cf 	.word	0x0801e3cf
 80197c0:	0801e3c6 	.word	0x0801e3c6
 80197c4:	0801e367 	.word	0x0801e367
 80197c8:	0801e4c0 	.word	0x0801e4c0
 80197cc:	0801e42b 	.word	0x0801e42b
 80197d0:	69f2      	ldr	r2, [r6, #28]
 80197d2:	9901      	ldr	r1, [sp, #4]
 80197d4:	6011      	str	r1, [r2, #0]
 80197d6:	f1b9 0f0e 	cmp.w	r9, #14
 80197da:	d86c      	bhi.n	80198b6 <_dtoa_r+0x3ce>
 80197dc:	2c00      	cmp	r4, #0
 80197de:	d06a      	beq.n	80198b6 <_dtoa_r+0x3ce>
 80197e0:	f1bb 0f00 	cmp.w	fp, #0
 80197e4:	f340 80a0 	ble.w	8019928 <_dtoa_r+0x440>
 80197e8:	4ac1      	ldr	r2, [pc, #772]	; (8019af0 <_dtoa_r+0x608>)
 80197ea:	f00b 010f 	and.w	r1, fp, #15
 80197ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80197f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80197f6:	ed92 7b00 	vldr	d7, [r2]
 80197fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80197fe:	f000 8087 	beq.w	8019910 <_dtoa_r+0x428>
 8019802:	49bc      	ldr	r1, [pc, #752]	; (8019af4 <_dtoa_r+0x60c>)
 8019804:	ed91 6b08 	vldr	d6, [r1, #32]
 8019808:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801980c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019810:	f002 020f 	and.w	r2, r2, #15
 8019814:	2103      	movs	r1, #3
 8019816:	48b7      	ldr	r0, [pc, #732]	; (8019af4 <_dtoa_r+0x60c>)
 8019818:	2a00      	cmp	r2, #0
 801981a:	d17b      	bne.n	8019914 <_dtoa_r+0x42c>
 801981c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019820:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019824:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801982a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801982e:	2a00      	cmp	r2, #0
 8019830:	f000 80a0 	beq.w	8019974 <_dtoa_r+0x48c>
 8019834:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019838:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019840:	f140 8098 	bpl.w	8019974 <_dtoa_r+0x48c>
 8019844:	f1b9 0f00 	cmp.w	r9, #0
 8019848:	f000 8094 	beq.w	8019974 <_dtoa_r+0x48c>
 801984c:	f1ba 0f00 	cmp.w	sl, #0
 8019850:	dd2f      	ble.n	80198b2 <_dtoa_r+0x3ca>
 8019852:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019856:	ee27 7b06 	vmul.f64	d7, d7, d6
 801985a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801985e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019862:	3101      	adds	r1, #1
 8019864:	4654      	mov	r4, sl
 8019866:	ed9d 6b02 	vldr	d6, [sp, #8]
 801986a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801986e:	ee07 1a90 	vmov	s15, r1
 8019872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019876:	eea7 5b06 	vfma.f64	d5, d7, d6
 801987a:	ee15 7a90 	vmov	r7, s11
 801987e:	ec51 0b15 	vmov	r0, r1, d5
 8019882:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8019886:	2c00      	cmp	r4, #0
 8019888:	d177      	bne.n	801997a <_dtoa_r+0x492>
 801988a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801988e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019892:	ec41 0b17 	vmov	d7, r0, r1
 8019896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801989a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801989e:	f300 826a 	bgt.w	8019d76 <_dtoa_r+0x88e>
 80198a2:	eeb1 7b47 	vneg.f64	d7, d7
 80198a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80198aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ae:	f100 8260 	bmi.w	8019d72 <_dtoa_r+0x88a>
 80198b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80198b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80198b8:	2a00      	cmp	r2, #0
 80198ba:	f2c0 811d 	blt.w	8019af8 <_dtoa_r+0x610>
 80198be:	f1bb 0f0e 	cmp.w	fp, #14
 80198c2:	f300 8119 	bgt.w	8019af8 <_dtoa_r+0x610>
 80198c6:	4b8a      	ldr	r3, [pc, #552]	; (8019af0 <_dtoa_r+0x608>)
 80198c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80198cc:	ed93 6b00 	vldr	d6, [r3]
 80198d0:	9b08      	ldr	r3, [sp, #32]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	f280 80b7 	bge.w	8019a46 <_dtoa_r+0x55e>
 80198d8:	f1b9 0f00 	cmp.w	r9, #0
 80198dc:	f300 80b3 	bgt.w	8019a46 <_dtoa_r+0x55e>
 80198e0:	f040 8246 	bne.w	8019d70 <_dtoa_r+0x888>
 80198e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80198e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80198ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80198f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198f8:	464c      	mov	r4, r9
 80198fa:	464f      	mov	r7, r9
 80198fc:	f280 821c 	bge.w	8019d38 <_dtoa_r+0x850>
 8019900:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019904:	2331      	movs	r3, #49	; 0x31
 8019906:	f808 3b01 	strb.w	r3, [r8], #1
 801990a:	f10b 0b01 	add.w	fp, fp, #1
 801990e:	e218      	b.n	8019d42 <_dtoa_r+0x85a>
 8019910:	2102      	movs	r1, #2
 8019912:	e780      	b.n	8019816 <_dtoa_r+0x32e>
 8019914:	07d4      	lsls	r4, r2, #31
 8019916:	d504      	bpl.n	8019922 <_dtoa_r+0x43a>
 8019918:	ed90 6b00 	vldr	d6, [r0]
 801991c:	3101      	adds	r1, #1
 801991e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019922:	1052      	asrs	r2, r2, #1
 8019924:	3008      	adds	r0, #8
 8019926:	e777      	b.n	8019818 <_dtoa_r+0x330>
 8019928:	d022      	beq.n	8019970 <_dtoa_r+0x488>
 801992a:	f1cb 0200 	rsb	r2, fp, #0
 801992e:	4970      	ldr	r1, [pc, #448]	; (8019af0 <_dtoa_r+0x608>)
 8019930:	f002 000f 	and.w	r0, r2, #15
 8019934:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019938:	ed91 7b00 	vldr	d7, [r1]
 801993c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019944:	486b      	ldr	r0, [pc, #428]	; (8019af4 <_dtoa_r+0x60c>)
 8019946:	1112      	asrs	r2, r2, #4
 8019948:	2400      	movs	r4, #0
 801994a:	2102      	movs	r1, #2
 801994c:	b92a      	cbnz	r2, 801995a <_dtoa_r+0x472>
 801994e:	2c00      	cmp	r4, #0
 8019950:	f43f af6a 	beq.w	8019828 <_dtoa_r+0x340>
 8019954:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019958:	e766      	b.n	8019828 <_dtoa_r+0x340>
 801995a:	07d7      	lsls	r7, r2, #31
 801995c:	d505      	bpl.n	801996a <_dtoa_r+0x482>
 801995e:	ed90 6b00 	vldr	d6, [r0]
 8019962:	3101      	adds	r1, #1
 8019964:	2401      	movs	r4, #1
 8019966:	ee27 7b06 	vmul.f64	d7, d7, d6
 801996a:	1052      	asrs	r2, r2, #1
 801996c:	3008      	adds	r0, #8
 801996e:	e7ed      	b.n	801994c <_dtoa_r+0x464>
 8019970:	2102      	movs	r1, #2
 8019972:	e759      	b.n	8019828 <_dtoa_r+0x340>
 8019974:	465a      	mov	r2, fp
 8019976:	464c      	mov	r4, r9
 8019978:	e775      	b.n	8019866 <_dtoa_r+0x37e>
 801997a:	ec41 0b17 	vmov	d7, r0, r1
 801997e:	495c      	ldr	r1, [pc, #368]	; (8019af0 <_dtoa_r+0x608>)
 8019980:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8019984:	ed11 4b02 	vldr	d4, [r1, #-8]
 8019988:	9901      	ldr	r1, [sp, #4]
 801998a:	440c      	add	r4, r1
 801998c:	9907      	ldr	r1, [sp, #28]
 801998e:	b351      	cbz	r1, 80199e6 <_dtoa_r+0x4fe>
 8019990:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8019994:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019998:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801999c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80199a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80199a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80199a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199ac:	ee14 1a90 	vmov	r1, s9
 80199b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80199b4:	3130      	adds	r1, #48	; 0x30
 80199b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80199ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80199be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c2:	f808 1b01 	strb.w	r1, [r8], #1
 80199c6:	d439      	bmi.n	8019a3c <_dtoa_r+0x554>
 80199c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80199cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80199d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d4:	d472      	bmi.n	8019abc <_dtoa_r+0x5d4>
 80199d6:	45a0      	cmp	r8, r4
 80199d8:	f43f af6b 	beq.w	80198b2 <_dtoa_r+0x3ca>
 80199dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80199e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80199e4:	e7e0      	b.n	80199a8 <_dtoa_r+0x4c0>
 80199e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80199ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80199ee:	4620      	mov	r0, r4
 80199f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80199f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199f8:	ee14 1a90 	vmov	r1, s9
 80199fc:	3130      	adds	r1, #48	; 0x30
 80199fe:	f808 1b01 	strb.w	r1, [r8], #1
 8019a02:	45a0      	cmp	r8, r4
 8019a04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019a08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019a0c:	d118      	bne.n	8019a40 <_dtoa_r+0x558>
 8019a0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019a12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019a16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1e:	dc4d      	bgt.n	8019abc <_dtoa_r+0x5d4>
 8019a20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019a24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2c:	f57f af41 	bpl.w	80198b2 <_dtoa_r+0x3ca>
 8019a30:	4680      	mov	r8, r0
 8019a32:	3801      	subs	r0, #1
 8019a34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019a38:	2b30      	cmp	r3, #48	; 0x30
 8019a3a:	d0f9      	beq.n	8019a30 <_dtoa_r+0x548>
 8019a3c:	4693      	mov	fp, r2
 8019a3e:	e02a      	b.n	8019a96 <_dtoa_r+0x5ae>
 8019a40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a44:	e7d6      	b.n	80199f4 <_dtoa_r+0x50c>
 8019a46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8019a4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019a52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019a56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019a5a:	ee15 3a10 	vmov	r3, s10
 8019a5e:	3330      	adds	r3, #48	; 0x30
 8019a60:	f808 3b01 	strb.w	r3, [r8], #1
 8019a64:	9b01      	ldr	r3, [sp, #4]
 8019a66:	eba8 0303 	sub.w	r3, r8, r3
 8019a6a:	4599      	cmp	r9, r3
 8019a6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019a70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019a74:	d133      	bne.n	8019ade <_dtoa_r+0x5f6>
 8019a76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019a7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a82:	dc1a      	bgt.n	8019aba <_dtoa_r+0x5d2>
 8019a84:	eeb4 7b46 	vcmp.f64	d7, d6
 8019a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a8c:	d103      	bne.n	8019a96 <_dtoa_r+0x5ae>
 8019a8e:	ee15 3a10 	vmov	r3, s10
 8019a92:	07d9      	lsls	r1, r3, #31
 8019a94:	d411      	bmi.n	8019aba <_dtoa_r+0x5d2>
 8019a96:	4629      	mov	r1, r5
 8019a98:	4630      	mov	r0, r6
 8019a9a:	f000 fbd1 	bl	801a240 <_Bfree>
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019aa2:	f888 3000 	strb.w	r3, [r8]
 8019aa6:	f10b 0301 	add.w	r3, fp, #1
 8019aaa:	6013      	str	r3, [r2, #0]
 8019aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	f43f ad69 	beq.w	8019586 <_dtoa_r+0x9e>
 8019ab4:	f8c3 8000 	str.w	r8, [r3]
 8019ab8:	e565      	b.n	8019586 <_dtoa_r+0x9e>
 8019aba:	465a      	mov	r2, fp
 8019abc:	4643      	mov	r3, r8
 8019abe:	4698      	mov	r8, r3
 8019ac0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8019ac4:	2939      	cmp	r1, #57	; 0x39
 8019ac6:	d106      	bne.n	8019ad6 <_dtoa_r+0x5ee>
 8019ac8:	9901      	ldr	r1, [sp, #4]
 8019aca:	4299      	cmp	r1, r3
 8019acc:	d1f7      	bne.n	8019abe <_dtoa_r+0x5d6>
 8019ace:	9801      	ldr	r0, [sp, #4]
 8019ad0:	2130      	movs	r1, #48	; 0x30
 8019ad2:	3201      	adds	r2, #1
 8019ad4:	7001      	strb	r1, [r0, #0]
 8019ad6:	7819      	ldrb	r1, [r3, #0]
 8019ad8:	3101      	adds	r1, #1
 8019ada:	7019      	strb	r1, [r3, #0]
 8019adc:	e7ae      	b.n	8019a3c <_dtoa_r+0x554>
 8019ade:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aea:	d1b2      	bne.n	8019a52 <_dtoa_r+0x56a>
 8019aec:	e7d3      	b.n	8019a96 <_dtoa_r+0x5ae>
 8019aee:	bf00      	nop
 8019af0:	0801e4c0 	.word	0x0801e4c0
 8019af4:	0801e498 	.word	0x0801e498
 8019af8:	9907      	ldr	r1, [sp, #28]
 8019afa:	2900      	cmp	r1, #0
 8019afc:	f000 80d0 	beq.w	8019ca0 <_dtoa_r+0x7b8>
 8019b00:	9906      	ldr	r1, [sp, #24]
 8019b02:	2901      	cmp	r1, #1
 8019b04:	f300 80b4 	bgt.w	8019c70 <_dtoa_r+0x788>
 8019b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b0a:	2900      	cmp	r1, #0
 8019b0c:	f000 80ac 	beq.w	8019c68 <_dtoa_r+0x780>
 8019b10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019b14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019b18:	461c      	mov	r4, r3
 8019b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8019b1c:	9b04      	ldr	r3, [sp, #16]
 8019b1e:	4413      	add	r3, r2
 8019b20:	9304      	str	r3, [sp, #16]
 8019b22:	9b05      	ldr	r3, [sp, #20]
 8019b24:	2101      	movs	r1, #1
 8019b26:	4413      	add	r3, r2
 8019b28:	4630      	mov	r0, r6
 8019b2a:	9305      	str	r3, [sp, #20]
 8019b2c:	f000 fc3e 	bl	801a3ac <__i2b>
 8019b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b32:	4607      	mov	r7, r0
 8019b34:	f1b8 0f00 	cmp.w	r8, #0
 8019b38:	d00d      	beq.n	8019b56 <_dtoa_r+0x66e>
 8019b3a:	9a05      	ldr	r2, [sp, #20]
 8019b3c:	2a00      	cmp	r2, #0
 8019b3e:	dd0a      	ble.n	8019b56 <_dtoa_r+0x66e>
 8019b40:	4542      	cmp	r2, r8
 8019b42:	9904      	ldr	r1, [sp, #16]
 8019b44:	bfa8      	it	ge
 8019b46:	4642      	movge	r2, r8
 8019b48:	1a89      	subs	r1, r1, r2
 8019b4a:	9104      	str	r1, [sp, #16]
 8019b4c:	9905      	ldr	r1, [sp, #20]
 8019b4e:	eba8 0802 	sub.w	r8, r8, r2
 8019b52:	1a8a      	subs	r2, r1, r2
 8019b54:	9205      	str	r2, [sp, #20]
 8019b56:	b303      	cbz	r3, 8019b9a <_dtoa_r+0x6b2>
 8019b58:	9a07      	ldr	r2, [sp, #28]
 8019b5a:	2a00      	cmp	r2, #0
 8019b5c:	f000 80a5 	beq.w	8019caa <_dtoa_r+0x7c2>
 8019b60:	2c00      	cmp	r4, #0
 8019b62:	dd13      	ble.n	8019b8c <_dtoa_r+0x6a4>
 8019b64:	4639      	mov	r1, r7
 8019b66:	4622      	mov	r2, r4
 8019b68:	4630      	mov	r0, r6
 8019b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8019b6c:	f000 fcde 	bl	801a52c <__pow5mult>
 8019b70:	462a      	mov	r2, r5
 8019b72:	4601      	mov	r1, r0
 8019b74:	4607      	mov	r7, r0
 8019b76:	4630      	mov	r0, r6
 8019b78:	f000 fc2e 	bl	801a3d8 <__multiply>
 8019b7c:	4629      	mov	r1, r5
 8019b7e:	9009      	str	r0, [sp, #36]	; 0x24
 8019b80:	4630      	mov	r0, r6
 8019b82:	f000 fb5d 	bl	801a240 <_Bfree>
 8019b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b8a:	4615      	mov	r5, r2
 8019b8c:	1b1a      	subs	r2, r3, r4
 8019b8e:	d004      	beq.n	8019b9a <_dtoa_r+0x6b2>
 8019b90:	4629      	mov	r1, r5
 8019b92:	4630      	mov	r0, r6
 8019b94:	f000 fcca 	bl	801a52c <__pow5mult>
 8019b98:	4605      	mov	r5, r0
 8019b9a:	2101      	movs	r1, #1
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	f000 fc05 	bl	801a3ac <__i2b>
 8019ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	4604      	mov	r4, r0
 8019ba8:	f340 8081 	ble.w	8019cae <_dtoa_r+0x7c6>
 8019bac:	461a      	mov	r2, r3
 8019bae:	4601      	mov	r1, r0
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	f000 fcbb 	bl	801a52c <__pow5mult>
 8019bb6:	9b06      	ldr	r3, [sp, #24]
 8019bb8:	2b01      	cmp	r3, #1
 8019bba:	4604      	mov	r4, r0
 8019bbc:	dd7a      	ble.n	8019cb4 <_dtoa_r+0x7cc>
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8019bc2:	6922      	ldr	r2, [r4, #16]
 8019bc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019bc8:	6910      	ldr	r0, [r2, #16]
 8019bca:	f000 fba1 	bl	801a310 <__hi0bits>
 8019bce:	f1c0 0020 	rsb	r0, r0, #32
 8019bd2:	9b05      	ldr	r3, [sp, #20]
 8019bd4:	4418      	add	r0, r3
 8019bd6:	f010 001f 	ands.w	r0, r0, #31
 8019bda:	f000 8093 	beq.w	8019d04 <_dtoa_r+0x81c>
 8019bde:	f1c0 0220 	rsb	r2, r0, #32
 8019be2:	2a04      	cmp	r2, #4
 8019be4:	f340 8085 	ble.w	8019cf2 <_dtoa_r+0x80a>
 8019be8:	9b04      	ldr	r3, [sp, #16]
 8019bea:	f1c0 001c 	rsb	r0, r0, #28
 8019bee:	4403      	add	r3, r0
 8019bf0:	9304      	str	r3, [sp, #16]
 8019bf2:	9b05      	ldr	r3, [sp, #20]
 8019bf4:	4480      	add	r8, r0
 8019bf6:	4403      	add	r3, r0
 8019bf8:	9305      	str	r3, [sp, #20]
 8019bfa:	9b04      	ldr	r3, [sp, #16]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	dd05      	ble.n	8019c0c <_dtoa_r+0x724>
 8019c00:	4629      	mov	r1, r5
 8019c02:	461a      	mov	r2, r3
 8019c04:	4630      	mov	r0, r6
 8019c06:	f000 fceb 	bl	801a5e0 <__lshift>
 8019c0a:	4605      	mov	r5, r0
 8019c0c:	9b05      	ldr	r3, [sp, #20]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	dd05      	ble.n	8019c1e <_dtoa_r+0x736>
 8019c12:	4621      	mov	r1, r4
 8019c14:	461a      	mov	r2, r3
 8019c16:	4630      	mov	r0, r6
 8019c18:	f000 fce2 	bl	801a5e0 <__lshift>
 8019c1c:	4604      	mov	r4, r0
 8019c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d071      	beq.n	8019d08 <_dtoa_r+0x820>
 8019c24:	4621      	mov	r1, r4
 8019c26:	4628      	mov	r0, r5
 8019c28:	f000 fd46 	bl	801a6b8 <__mcmp>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	da6b      	bge.n	8019d08 <_dtoa_r+0x820>
 8019c30:	2300      	movs	r3, #0
 8019c32:	4629      	mov	r1, r5
 8019c34:	220a      	movs	r2, #10
 8019c36:	4630      	mov	r0, r6
 8019c38:	f000 fb24 	bl	801a284 <__multadd>
 8019c3c:	9b07      	ldr	r3, [sp, #28]
 8019c3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019c42:	4605      	mov	r5, r0
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	f000 8197 	beq.w	8019f78 <_dtoa_r+0xa90>
 8019c4a:	4639      	mov	r1, r7
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	220a      	movs	r2, #10
 8019c50:	4630      	mov	r0, r6
 8019c52:	f000 fb17 	bl	801a284 <__multadd>
 8019c56:	f1ba 0f00 	cmp.w	sl, #0
 8019c5a:	4607      	mov	r7, r0
 8019c5c:	f300 8093 	bgt.w	8019d86 <_dtoa_r+0x89e>
 8019c60:	9b06      	ldr	r3, [sp, #24]
 8019c62:	2b02      	cmp	r3, #2
 8019c64:	dc57      	bgt.n	8019d16 <_dtoa_r+0x82e>
 8019c66:	e08e      	b.n	8019d86 <_dtoa_r+0x89e>
 8019c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019c6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019c6e:	e751      	b.n	8019b14 <_dtoa_r+0x62c>
 8019c70:	f109 34ff 	add.w	r4, r9, #4294967295
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	bfbf      	itttt	lt
 8019c78:	1ae2      	sublt	r2, r4, r3
 8019c7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8019c7c:	189b      	addlt	r3, r3, r2
 8019c7e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8019c80:	bfae      	itee	ge
 8019c82:	1b1c      	subge	r4, r3, r4
 8019c84:	4623      	movlt	r3, r4
 8019c86:	2400      	movlt	r4, #0
 8019c88:	f1b9 0f00 	cmp.w	r9, #0
 8019c8c:	bfb5      	itete	lt
 8019c8e:	9a04      	ldrlt	r2, [sp, #16]
 8019c90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8019c94:	eba2 0809 	sublt.w	r8, r2, r9
 8019c98:	464a      	movge	r2, r9
 8019c9a:	bfb8      	it	lt
 8019c9c:	2200      	movlt	r2, #0
 8019c9e:	e73c      	b.n	8019b1a <_dtoa_r+0x632>
 8019ca0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019ca4:	9f07      	ldr	r7, [sp, #28]
 8019ca6:	461c      	mov	r4, r3
 8019ca8:	e744      	b.n	8019b34 <_dtoa_r+0x64c>
 8019caa:	461a      	mov	r2, r3
 8019cac:	e770      	b.n	8019b90 <_dtoa_r+0x6a8>
 8019cae:	9b06      	ldr	r3, [sp, #24]
 8019cb0:	2b01      	cmp	r3, #1
 8019cb2:	dc18      	bgt.n	8019ce6 <_dtoa_r+0x7fe>
 8019cb4:	9b02      	ldr	r3, [sp, #8]
 8019cb6:	b9b3      	cbnz	r3, 8019ce6 <_dtoa_r+0x7fe>
 8019cb8:	9b03      	ldr	r3, [sp, #12]
 8019cba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019cbe:	b9a2      	cbnz	r2, 8019cea <_dtoa_r+0x802>
 8019cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019cc4:	0d12      	lsrs	r2, r2, #20
 8019cc6:	0512      	lsls	r2, r2, #20
 8019cc8:	b18a      	cbz	r2, 8019cee <_dtoa_r+0x806>
 8019cca:	9b04      	ldr	r3, [sp, #16]
 8019ccc:	3301      	adds	r3, #1
 8019cce:	9304      	str	r3, [sp, #16]
 8019cd0:	9b05      	ldr	r3, [sp, #20]
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	9305      	str	r3, [sp, #20]
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8019cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	f47f af70 	bne.w	8019bc2 <_dtoa_r+0x6da>
 8019ce2:	2001      	movs	r0, #1
 8019ce4:	e775      	b.n	8019bd2 <_dtoa_r+0x6ea>
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	e7f6      	b.n	8019cd8 <_dtoa_r+0x7f0>
 8019cea:	9b02      	ldr	r3, [sp, #8]
 8019cec:	e7f4      	b.n	8019cd8 <_dtoa_r+0x7f0>
 8019cee:	9209      	str	r2, [sp, #36]	; 0x24
 8019cf0:	e7f3      	b.n	8019cda <_dtoa_r+0x7f2>
 8019cf2:	d082      	beq.n	8019bfa <_dtoa_r+0x712>
 8019cf4:	9b04      	ldr	r3, [sp, #16]
 8019cf6:	321c      	adds	r2, #28
 8019cf8:	4413      	add	r3, r2
 8019cfa:	9304      	str	r3, [sp, #16]
 8019cfc:	9b05      	ldr	r3, [sp, #20]
 8019cfe:	4490      	add	r8, r2
 8019d00:	4413      	add	r3, r2
 8019d02:	e779      	b.n	8019bf8 <_dtoa_r+0x710>
 8019d04:	4602      	mov	r2, r0
 8019d06:	e7f5      	b.n	8019cf4 <_dtoa_r+0x80c>
 8019d08:	f1b9 0f00 	cmp.w	r9, #0
 8019d0c:	dc36      	bgt.n	8019d7c <_dtoa_r+0x894>
 8019d0e:	9b06      	ldr	r3, [sp, #24]
 8019d10:	2b02      	cmp	r3, #2
 8019d12:	dd33      	ble.n	8019d7c <_dtoa_r+0x894>
 8019d14:	46ca      	mov	sl, r9
 8019d16:	f1ba 0f00 	cmp.w	sl, #0
 8019d1a:	d10d      	bne.n	8019d38 <_dtoa_r+0x850>
 8019d1c:	4621      	mov	r1, r4
 8019d1e:	4653      	mov	r3, sl
 8019d20:	2205      	movs	r2, #5
 8019d22:	4630      	mov	r0, r6
 8019d24:	f000 faae 	bl	801a284 <__multadd>
 8019d28:	4601      	mov	r1, r0
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	f000 fcc3 	bl	801a6b8 <__mcmp>
 8019d32:	2800      	cmp	r0, #0
 8019d34:	f73f ade4 	bgt.w	8019900 <_dtoa_r+0x418>
 8019d38:	9b08      	ldr	r3, [sp, #32]
 8019d3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019d3e:	ea6f 0b03 	mvn.w	fp, r3
 8019d42:	f04f 0900 	mov.w	r9, #0
 8019d46:	4621      	mov	r1, r4
 8019d48:	4630      	mov	r0, r6
 8019d4a:	f000 fa79 	bl	801a240 <_Bfree>
 8019d4e:	2f00      	cmp	r7, #0
 8019d50:	f43f aea1 	beq.w	8019a96 <_dtoa_r+0x5ae>
 8019d54:	f1b9 0f00 	cmp.w	r9, #0
 8019d58:	d005      	beq.n	8019d66 <_dtoa_r+0x87e>
 8019d5a:	45b9      	cmp	r9, r7
 8019d5c:	d003      	beq.n	8019d66 <_dtoa_r+0x87e>
 8019d5e:	4649      	mov	r1, r9
 8019d60:	4630      	mov	r0, r6
 8019d62:	f000 fa6d 	bl	801a240 <_Bfree>
 8019d66:	4639      	mov	r1, r7
 8019d68:	4630      	mov	r0, r6
 8019d6a:	f000 fa69 	bl	801a240 <_Bfree>
 8019d6e:	e692      	b.n	8019a96 <_dtoa_r+0x5ae>
 8019d70:	2400      	movs	r4, #0
 8019d72:	4627      	mov	r7, r4
 8019d74:	e7e0      	b.n	8019d38 <_dtoa_r+0x850>
 8019d76:	4693      	mov	fp, r2
 8019d78:	4627      	mov	r7, r4
 8019d7a:	e5c1      	b.n	8019900 <_dtoa_r+0x418>
 8019d7c:	9b07      	ldr	r3, [sp, #28]
 8019d7e:	46ca      	mov	sl, r9
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	f000 8100 	beq.w	8019f86 <_dtoa_r+0xa9e>
 8019d86:	f1b8 0f00 	cmp.w	r8, #0
 8019d8a:	dd05      	ble.n	8019d98 <_dtoa_r+0x8b0>
 8019d8c:	4639      	mov	r1, r7
 8019d8e:	4642      	mov	r2, r8
 8019d90:	4630      	mov	r0, r6
 8019d92:	f000 fc25 	bl	801a5e0 <__lshift>
 8019d96:	4607      	mov	r7, r0
 8019d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d05d      	beq.n	8019e5a <_dtoa_r+0x972>
 8019d9e:	6879      	ldr	r1, [r7, #4]
 8019da0:	4630      	mov	r0, r6
 8019da2:	f000 fa0d 	bl	801a1c0 <_Balloc>
 8019da6:	4680      	mov	r8, r0
 8019da8:	b928      	cbnz	r0, 8019db6 <_dtoa_r+0x8ce>
 8019daa:	4b82      	ldr	r3, [pc, #520]	; (8019fb4 <_dtoa_r+0xacc>)
 8019dac:	4602      	mov	r2, r0
 8019dae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019db2:	f7ff bbb1 	b.w	8019518 <_dtoa_r+0x30>
 8019db6:	693a      	ldr	r2, [r7, #16]
 8019db8:	3202      	adds	r2, #2
 8019dba:	0092      	lsls	r2, r2, #2
 8019dbc:	f107 010c 	add.w	r1, r7, #12
 8019dc0:	300c      	adds	r0, #12
 8019dc2:	f7ff fadd 	bl	8019380 <memcpy>
 8019dc6:	2201      	movs	r2, #1
 8019dc8:	4641      	mov	r1, r8
 8019dca:	4630      	mov	r0, r6
 8019dcc:	f000 fc08 	bl	801a5e0 <__lshift>
 8019dd0:	9b01      	ldr	r3, [sp, #4]
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	9304      	str	r3, [sp, #16]
 8019dd6:	9b01      	ldr	r3, [sp, #4]
 8019dd8:	4453      	add	r3, sl
 8019dda:	9308      	str	r3, [sp, #32]
 8019ddc:	9b02      	ldr	r3, [sp, #8]
 8019dde:	f003 0301 	and.w	r3, r3, #1
 8019de2:	46b9      	mov	r9, r7
 8019de4:	9307      	str	r3, [sp, #28]
 8019de6:	4607      	mov	r7, r0
 8019de8:	9b04      	ldr	r3, [sp, #16]
 8019dea:	4621      	mov	r1, r4
 8019dec:	3b01      	subs	r3, #1
 8019dee:	4628      	mov	r0, r5
 8019df0:	9302      	str	r3, [sp, #8]
 8019df2:	f7ff faf1 	bl	80193d8 <quorem>
 8019df6:	4603      	mov	r3, r0
 8019df8:	3330      	adds	r3, #48	; 0x30
 8019dfa:	9005      	str	r0, [sp, #20]
 8019dfc:	4649      	mov	r1, r9
 8019dfe:	4628      	mov	r0, r5
 8019e00:	9309      	str	r3, [sp, #36]	; 0x24
 8019e02:	f000 fc59 	bl	801a6b8 <__mcmp>
 8019e06:	463a      	mov	r2, r7
 8019e08:	4682      	mov	sl, r0
 8019e0a:	4621      	mov	r1, r4
 8019e0c:	4630      	mov	r0, r6
 8019e0e:	f000 fc6f 	bl	801a6f0 <__mdiff>
 8019e12:	68c2      	ldr	r2, [r0, #12]
 8019e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e16:	4680      	mov	r8, r0
 8019e18:	bb0a      	cbnz	r2, 8019e5e <_dtoa_r+0x976>
 8019e1a:	4601      	mov	r1, r0
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	f000 fc4b 	bl	801a6b8 <__mcmp>
 8019e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e24:	4602      	mov	r2, r0
 8019e26:	4641      	mov	r1, r8
 8019e28:	4630      	mov	r0, r6
 8019e2a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8019e2e:	f000 fa07 	bl	801a240 <_Bfree>
 8019e32:	9b06      	ldr	r3, [sp, #24]
 8019e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e36:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019e3a:	ea43 0102 	orr.w	r1, r3, r2
 8019e3e:	9b07      	ldr	r3, [sp, #28]
 8019e40:	4319      	orrs	r1, r3
 8019e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e44:	d10d      	bne.n	8019e62 <_dtoa_r+0x97a>
 8019e46:	2b39      	cmp	r3, #57	; 0x39
 8019e48:	d029      	beq.n	8019e9e <_dtoa_r+0x9b6>
 8019e4a:	f1ba 0f00 	cmp.w	sl, #0
 8019e4e:	dd01      	ble.n	8019e54 <_dtoa_r+0x96c>
 8019e50:	9b05      	ldr	r3, [sp, #20]
 8019e52:	3331      	adds	r3, #49	; 0x31
 8019e54:	9a02      	ldr	r2, [sp, #8]
 8019e56:	7013      	strb	r3, [r2, #0]
 8019e58:	e775      	b.n	8019d46 <_dtoa_r+0x85e>
 8019e5a:	4638      	mov	r0, r7
 8019e5c:	e7b8      	b.n	8019dd0 <_dtoa_r+0x8e8>
 8019e5e:	2201      	movs	r2, #1
 8019e60:	e7e1      	b.n	8019e26 <_dtoa_r+0x93e>
 8019e62:	f1ba 0f00 	cmp.w	sl, #0
 8019e66:	db06      	blt.n	8019e76 <_dtoa_r+0x98e>
 8019e68:	9906      	ldr	r1, [sp, #24]
 8019e6a:	ea41 0a0a 	orr.w	sl, r1, sl
 8019e6e:	9907      	ldr	r1, [sp, #28]
 8019e70:	ea5a 0a01 	orrs.w	sl, sl, r1
 8019e74:	d120      	bne.n	8019eb8 <_dtoa_r+0x9d0>
 8019e76:	2a00      	cmp	r2, #0
 8019e78:	ddec      	ble.n	8019e54 <_dtoa_r+0x96c>
 8019e7a:	4629      	mov	r1, r5
 8019e7c:	2201      	movs	r2, #1
 8019e7e:	4630      	mov	r0, r6
 8019e80:	9304      	str	r3, [sp, #16]
 8019e82:	f000 fbad 	bl	801a5e0 <__lshift>
 8019e86:	4621      	mov	r1, r4
 8019e88:	4605      	mov	r5, r0
 8019e8a:	f000 fc15 	bl	801a6b8 <__mcmp>
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	9b04      	ldr	r3, [sp, #16]
 8019e92:	dc02      	bgt.n	8019e9a <_dtoa_r+0x9b2>
 8019e94:	d1de      	bne.n	8019e54 <_dtoa_r+0x96c>
 8019e96:	07da      	lsls	r2, r3, #31
 8019e98:	d5dc      	bpl.n	8019e54 <_dtoa_r+0x96c>
 8019e9a:	2b39      	cmp	r3, #57	; 0x39
 8019e9c:	d1d8      	bne.n	8019e50 <_dtoa_r+0x968>
 8019e9e:	9a02      	ldr	r2, [sp, #8]
 8019ea0:	2339      	movs	r3, #57	; 0x39
 8019ea2:	7013      	strb	r3, [r2, #0]
 8019ea4:	4643      	mov	r3, r8
 8019ea6:	4698      	mov	r8, r3
 8019ea8:	3b01      	subs	r3, #1
 8019eaa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8019eae:	2a39      	cmp	r2, #57	; 0x39
 8019eb0:	d051      	beq.n	8019f56 <_dtoa_r+0xa6e>
 8019eb2:	3201      	adds	r2, #1
 8019eb4:	701a      	strb	r2, [r3, #0]
 8019eb6:	e746      	b.n	8019d46 <_dtoa_r+0x85e>
 8019eb8:	2a00      	cmp	r2, #0
 8019eba:	dd03      	ble.n	8019ec4 <_dtoa_r+0x9dc>
 8019ebc:	2b39      	cmp	r3, #57	; 0x39
 8019ebe:	d0ee      	beq.n	8019e9e <_dtoa_r+0x9b6>
 8019ec0:	3301      	adds	r3, #1
 8019ec2:	e7c7      	b.n	8019e54 <_dtoa_r+0x96c>
 8019ec4:	9a04      	ldr	r2, [sp, #16]
 8019ec6:	9908      	ldr	r1, [sp, #32]
 8019ec8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019ecc:	428a      	cmp	r2, r1
 8019ece:	d02b      	beq.n	8019f28 <_dtoa_r+0xa40>
 8019ed0:	4629      	mov	r1, r5
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	220a      	movs	r2, #10
 8019ed6:	4630      	mov	r0, r6
 8019ed8:	f000 f9d4 	bl	801a284 <__multadd>
 8019edc:	45b9      	cmp	r9, r7
 8019ede:	4605      	mov	r5, r0
 8019ee0:	f04f 0300 	mov.w	r3, #0
 8019ee4:	f04f 020a 	mov.w	r2, #10
 8019ee8:	4649      	mov	r1, r9
 8019eea:	4630      	mov	r0, r6
 8019eec:	d107      	bne.n	8019efe <_dtoa_r+0xa16>
 8019eee:	f000 f9c9 	bl	801a284 <__multadd>
 8019ef2:	4681      	mov	r9, r0
 8019ef4:	4607      	mov	r7, r0
 8019ef6:	9b04      	ldr	r3, [sp, #16]
 8019ef8:	3301      	adds	r3, #1
 8019efa:	9304      	str	r3, [sp, #16]
 8019efc:	e774      	b.n	8019de8 <_dtoa_r+0x900>
 8019efe:	f000 f9c1 	bl	801a284 <__multadd>
 8019f02:	4639      	mov	r1, r7
 8019f04:	4681      	mov	r9, r0
 8019f06:	2300      	movs	r3, #0
 8019f08:	220a      	movs	r2, #10
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f000 f9ba 	bl	801a284 <__multadd>
 8019f10:	4607      	mov	r7, r0
 8019f12:	e7f0      	b.n	8019ef6 <_dtoa_r+0xa0e>
 8019f14:	f1ba 0f00 	cmp.w	sl, #0
 8019f18:	9a01      	ldr	r2, [sp, #4]
 8019f1a:	bfcc      	ite	gt
 8019f1c:	46d0      	movgt	r8, sl
 8019f1e:	f04f 0801 	movle.w	r8, #1
 8019f22:	4490      	add	r8, r2
 8019f24:	f04f 0900 	mov.w	r9, #0
 8019f28:	4629      	mov	r1, r5
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	9302      	str	r3, [sp, #8]
 8019f30:	f000 fb56 	bl	801a5e0 <__lshift>
 8019f34:	4621      	mov	r1, r4
 8019f36:	4605      	mov	r5, r0
 8019f38:	f000 fbbe 	bl	801a6b8 <__mcmp>
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	dcb1      	bgt.n	8019ea4 <_dtoa_r+0x9bc>
 8019f40:	d102      	bne.n	8019f48 <_dtoa_r+0xa60>
 8019f42:	9b02      	ldr	r3, [sp, #8]
 8019f44:	07db      	lsls	r3, r3, #31
 8019f46:	d4ad      	bmi.n	8019ea4 <_dtoa_r+0x9bc>
 8019f48:	4643      	mov	r3, r8
 8019f4a:	4698      	mov	r8, r3
 8019f4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019f50:	2a30      	cmp	r2, #48	; 0x30
 8019f52:	d0fa      	beq.n	8019f4a <_dtoa_r+0xa62>
 8019f54:	e6f7      	b.n	8019d46 <_dtoa_r+0x85e>
 8019f56:	9a01      	ldr	r2, [sp, #4]
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	d1a4      	bne.n	8019ea6 <_dtoa_r+0x9be>
 8019f5c:	f10b 0b01 	add.w	fp, fp, #1
 8019f60:	2331      	movs	r3, #49	; 0x31
 8019f62:	e778      	b.n	8019e56 <_dtoa_r+0x96e>
 8019f64:	4b14      	ldr	r3, [pc, #80]	; (8019fb8 <_dtoa_r+0xad0>)
 8019f66:	f7ff bb2a 	b.w	80195be <_dtoa_r+0xd6>
 8019f6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	f47f ab05 	bne.w	801957c <_dtoa_r+0x94>
 8019f72:	4b12      	ldr	r3, [pc, #72]	; (8019fbc <_dtoa_r+0xad4>)
 8019f74:	f7ff bb23 	b.w	80195be <_dtoa_r+0xd6>
 8019f78:	f1ba 0f00 	cmp.w	sl, #0
 8019f7c:	dc03      	bgt.n	8019f86 <_dtoa_r+0xa9e>
 8019f7e:	9b06      	ldr	r3, [sp, #24]
 8019f80:	2b02      	cmp	r3, #2
 8019f82:	f73f aec8 	bgt.w	8019d16 <_dtoa_r+0x82e>
 8019f86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019f8a:	4621      	mov	r1, r4
 8019f8c:	4628      	mov	r0, r5
 8019f8e:	f7ff fa23 	bl	80193d8 <quorem>
 8019f92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019f96:	f808 3b01 	strb.w	r3, [r8], #1
 8019f9a:	9a01      	ldr	r2, [sp, #4]
 8019f9c:	eba8 0202 	sub.w	r2, r8, r2
 8019fa0:	4592      	cmp	sl, r2
 8019fa2:	ddb7      	ble.n	8019f14 <_dtoa_r+0xa2c>
 8019fa4:	4629      	mov	r1, r5
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	220a      	movs	r2, #10
 8019faa:	4630      	mov	r0, r6
 8019fac:	f000 f96a 	bl	801a284 <__multadd>
 8019fb0:	4605      	mov	r5, r0
 8019fb2:	e7ea      	b.n	8019f8a <_dtoa_r+0xaa2>
 8019fb4:	0801e42b 	.word	0x0801e42b
 8019fb8:	0801e366 	.word	0x0801e366
 8019fbc:	0801e3c6 	.word	0x0801e3c6

08019fc0 <_free_r>:
 8019fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019fc2:	2900      	cmp	r1, #0
 8019fc4:	d044      	beq.n	801a050 <_free_r+0x90>
 8019fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019fca:	9001      	str	r0, [sp, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	f1a1 0404 	sub.w	r4, r1, #4
 8019fd2:	bfb8      	it	lt
 8019fd4:	18e4      	addlt	r4, r4, r3
 8019fd6:	f000 f8e7 	bl	801a1a8 <__malloc_lock>
 8019fda:	4a1e      	ldr	r2, [pc, #120]	; (801a054 <_free_r+0x94>)
 8019fdc:	9801      	ldr	r0, [sp, #4]
 8019fde:	6813      	ldr	r3, [r2, #0]
 8019fe0:	b933      	cbnz	r3, 8019ff0 <_free_r+0x30>
 8019fe2:	6063      	str	r3, [r4, #4]
 8019fe4:	6014      	str	r4, [r2, #0]
 8019fe6:	b003      	add	sp, #12
 8019fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019fec:	f000 b8e2 	b.w	801a1b4 <__malloc_unlock>
 8019ff0:	42a3      	cmp	r3, r4
 8019ff2:	d908      	bls.n	801a006 <_free_r+0x46>
 8019ff4:	6825      	ldr	r5, [r4, #0]
 8019ff6:	1961      	adds	r1, r4, r5
 8019ff8:	428b      	cmp	r3, r1
 8019ffa:	bf01      	itttt	eq
 8019ffc:	6819      	ldreq	r1, [r3, #0]
 8019ffe:	685b      	ldreq	r3, [r3, #4]
 801a000:	1949      	addeq	r1, r1, r5
 801a002:	6021      	streq	r1, [r4, #0]
 801a004:	e7ed      	b.n	8019fe2 <_free_r+0x22>
 801a006:	461a      	mov	r2, r3
 801a008:	685b      	ldr	r3, [r3, #4]
 801a00a:	b10b      	cbz	r3, 801a010 <_free_r+0x50>
 801a00c:	42a3      	cmp	r3, r4
 801a00e:	d9fa      	bls.n	801a006 <_free_r+0x46>
 801a010:	6811      	ldr	r1, [r2, #0]
 801a012:	1855      	adds	r5, r2, r1
 801a014:	42a5      	cmp	r5, r4
 801a016:	d10b      	bne.n	801a030 <_free_r+0x70>
 801a018:	6824      	ldr	r4, [r4, #0]
 801a01a:	4421      	add	r1, r4
 801a01c:	1854      	adds	r4, r2, r1
 801a01e:	42a3      	cmp	r3, r4
 801a020:	6011      	str	r1, [r2, #0]
 801a022:	d1e0      	bne.n	8019fe6 <_free_r+0x26>
 801a024:	681c      	ldr	r4, [r3, #0]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	6053      	str	r3, [r2, #4]
 801a02a:	440c      	add	r4, r1
 801a02c:	6014      	str	r4, [r2, #0]
 801a02e:	e7da      	b.n	8019fe6 <_free_r+0x26>
 801a030:	d902      	bls.n	801a038 <_free_r+0x78>
 801a032:	230c      	movs	r3, #12
 801a034:	6003      	str	r3, [r0, #0]
 801a036:	e7d6      	b.n	8019fe6 <_free_r+0x26>
 801a038:	6825      	ldr	r5, [r4, #0]
 801a03a:	1961      	adds	r1, r4, r5
 801a03c:	428b      	cmp	r3, r1
 801a03e:	bf04      	itt	eq
 801a040:	6819      	ldreq	r1, [r3, #0]
 801a042:	685b      	ldreq	r3, [r3, #4]
 801a044:	6063      	str	r3, [r4, #4]
 801a046:	bf04      	itt	eq
 801a048:	1949      	addeq	r1, r1, r5
 801a04a:	6021      	streq	r1, [r4, #0]
 801a04c:	6054      	str	r4, [r2, #4]
 801a04e:	e7ca      	b.n	8019fe6 <_free_r+0x26>
 801a050:	b003      	add	sp, #12
 801a052:	bd30      	pop	{r4, r5, pc}
 801a054:	20008298 	.word	0x20008298

0801a058 <malloc>:
 801a058:	4b02      	ldr	r3, [pc, #8]	; (801a064 <malloc+0xc>)
 801a05a:	4601      	mov	r1, r0
 801a05c:	6818      	ldr	r0, [r3, #0]
 801a05e:	f000 b823 	b.w	801a0a8 <_malloc_r>
 801a062:	bf00      	nop
 801a064:	200000b8 	.word	0x200000b8

0801a068 <sbrk_aligned>:
 801a068:	b570      	push	{r4, r5, r6, lr}
 801a06a:	4e0e      	ldr	r6, [pc, #56]	; (801a0a4 <sbrk_aligned+0x3c>)
 801a06c:	460c      	mov	r4, r1
 801a06e:	6831      	ldr	r1, [r6, #0]
 801a070:	4605      	mov	r5, r0
 801a072:	b911      	cbnz	r1, 801a07a <sbrk_aligned+0x12>
 801a074:	f000 fea8 	bl	801adc8 <_sbrk_r>
 801a078:	6030      	str	r0, [r6, #0]
 801a07a:	4621      	mov	r1, r4
 801a07c:	4628      	mov	r0, r5
 801a07e:	f000 fea3 	bl	801adc8 <_sbrk_r>
 801a082:	1c43      	adds	r3, r0, #1
 801a084:	d00a      	beq.n	801a09c <sbrk_aligned+0x34>
 801a086:	1cc4      	adds	r4, r0, #3
 801a088:	f024 0403 	bic.w	r4, r4, #3
 801a08c:	42a0      	cmp	r0, r4
 801a08e:	d007      	beq.n	801a0a0 <sbrk_aligned+0x38>
 801a090:	1a21      	subs	r1, r4, r0
 801a092:	4628      	mov	r0, r5
 801a094:	f000 fe98 	bl	801adc8 <_sbrk_r>
 801a098:	3001      	adds	r0, #1
 801a09a:	d101      	bne.n	801a0a0 <sbrk_aligned+0x38>
 801a09c:	f04f 34ff 	mov.w	r4, #4294967295
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	bd70      	pop	{r4, r5, r6, pc}
 801a0a4:	2000829c 	.word	0x2000829c

0801a0a8 <_malloc_r>:
 801a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0ac:	1ccd      	adds	r5, r1, #3
 801a0ae:	f025 0503 	bic.w	r5, r5, #3
 801a0b2:	3508      	adds	r5, #8
 801a0b4:	2d0c      	cmp	r5, #12
 801a0b6:	bf38      	it	cc
 801a0b8:	250c      	movcc	r5, #12
 801a0ba:	2d00      	cmp	r5, #0
 801a0bc:	4607      	mov	r7, r0
 801a0be:	db01      	blt.n	801a0c4 <_malloc_r+0x1c>
 801a0c0:	42a9      	cmp	r1, r5
 801a0c2:	d905      	bls.n	801a0d0 <_malloc_r+0x28>
 801a0c4:	230c      	movs	r3, #12
 801a0c6:	603b      	str	r3, [r7, #0]
 801a0c8:	2600      	movs	r6, #0
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a1a4 <_malloc_r+0xfc>
 801a0d4:	f000 f868 	bl	801a1a8 <__malloc_lock>
 801a0d8:	f8d8 3000 	ldr.w	r3, [r8]
 801a0dc:	461c      	mov	r4, r3
 801a0de:	bb5c      	cbnz	r4, 801a138 <_malloc_r+0x90>
 801a0e0:	4629      	mov	r1, r5
 801a0e2:	4638      	mov	r0, r7
 801a0e4:	f7ff ffc0 	bl	801a068 <sbrk_aligned>
 801a0e8:	1c43      	adds	r3, r0, #1
 801a0ea:	4604      	mov	r4, r0
 801a0ec:	d155      	bne.n	801a19a <_malloc_r+0xf2>
 801a0ee:	f8d8 4000 	ldr.w	r4, [r8]
 801a0f2:	4626      	mov	r6, r4
 801a0f4:	2e00      	cmp	r6, #0
 801a0f6:	d145      	bne.n	801a184 <_malloc_r+0xdc>
 801a0f8:	2c00      	cmp	r4, #0
 801a0fa:	d048      	beq.n	801a18e <_malloc_r+0xe6>
 801a0fc:	6823      	ldr	r3, [r4, #0]
 801a0fe:	4631      	mov	r1, r6
 801a100:	4638      	mov	r0, r7
 801a102:	eb04 0903 	add.w	r9, r4, r3
 801a106:	f000 fe5f 	bl	801adc8 <_sbrk_r>
 801a10a:	4581      	cmp	r9, r0
 801a10c:	d13f      	bne.n	801a18e <_malloc_r+0xe6>
 801a10e:	6821      	ldr	r1, [r4, #0]
 801a110:	1a6d      	subs	r5, r5, r1
 801a112:	4629      	mov	r1, r5
 801a114:	4638      	mov	r0, r7
 801a116:	f7ff ffa7 	bl	801a068 <sbrk_aligned>
 801a11a:	3001      	adds	r0, #1
 801a11c:	d037      	beq.n	801a18e <_malloc_r+0xe6>
 801a11e:	6823      	ldr	r3, [r4, #0]
 801a120:	442b      	add	r3, r5
 801a122:	6023      	str	r3, [r4, #0]
 801a124:	f8d8 3000 	ldr.w	r3, [r8]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d038      	beq.n	801a19e <_malloc_r+0xf6>
 801a12c:	685a      	ldr	r2, [r3, #4]
 801a12e:	42a2      	cmp	r2, r4
 801a130:	d12b      	bne.n	801a18a <_malloc_r+0xe2>
 801a132:	2200      	movs	r2, #0
 801a134:	605a      	str	r2, [r3, #4]
 801a136:	e00f      	b.n	801a158 <_malloc_r+0xb0>
 801a138:	6822      	ldr	r2, [r4, #0]
 801a13a:	1b52      	subs	r2, r2, r5
 801a13c:	d41f      	bmi.n	801a17e <_malloc_r+0xd6>
 801a13e:	2a0b      	cmp	r2, #11
 801a140:	d917      	bls.n	801a172 <_malloc_r+0xca>
 801a142:	1961      	adds	r1, r4, r5
 801a144:	42a3      	cmp	r3, r4
 801a146:	6025      	str	r5, [r4, #0]
 801a148:	bf18      	it	ne
 801a14a:	6059      	strne	r1, [r3, #4]
 801a14c:	6863      	ldr	r3, [r4, #4]
 801a14e:	bf08      	it	eq
 801a150:	f8c8 1000 	streq.w	r1, [r8]
 801a154:	5162      	str	r2, [r4, r5]
 801a156:	604b      	str	r3, [r1, #4]
 801a158:	4638      	mov	r0, r7
 801a15a:	f104 060b 	add.w	r6, r4, #11
 801a15e:	f000 f829 	bl	801a1b4 <__malloc_unlock>
 801a162:	f026 0607 	bic.w	r6, r6, #7
 801a166:	1d23      	adds	r3, r4, #4
 801a168:	1af2      	subs	r2, r6, r3
 801a16a:	d0ae      	beq.n	801a0ca <_malloc_r+0x22>
 801a16c:	1b9b      	subs	r3, r3, r6
 801a16e:	50a3      	str	r3, [r4, r2]
 801a170:	e7ab      	b.n	801a0ca <_malloc_r+0x22>
 801a172:	42a3      	cmp	r3, r4
 801a174:	6862      	ldr	r2, [r4, #4]
 801a176:	d1dd      	bne.n	801a134 <_malloc_r+0x8c>
 801a178:	f8c8 2000 	str.w	r2, [r8]
 801a17c:	e7ec      	b.n	801a158 <_malloc_r+0xb0>
 801a17e:	4623      	mov	r3, r4
 801a180:	6864      	ldr	r4, [r4, #4]
 801a182:	e7ac      	b.n	801a0de <_malloc_r+0x36>
 801a184:	4634      	mov	r4, r6
 801a186:	6876      	ldr	r6, [r6, #4]
 801a188:	e7b4      	b.n	801a0f4 <_malloc_r+0x4c>
 801a18a:	4613      	mov	r3, r2
 801a18c:	e7cc      	b.n	801a128 <_malloc_r+0x80>
 801a18e:	230c      	movs	r3, #12
 801a190:	603b      	str	r3, [r7, #0]
 801a192:	4638      	mov	r0, r7
 801a194:	f000 f80e 	bl	801a1b4 <__malloc_unlock>
 801a198:	e797      	b.n	801a0ca <_malloc_r+0x22>
 801a19a:	6025      	str	r5, [r4, #0]
 801a19c:	e7dc      	b.n	801a158 <_malloc_r+0xb0>
 801a19e:	605b      	str	r3, [r3, #4]
 801a1a0:	deff      	udf	#255	; 0xff
 801a1a2:	bf00      	nop
 801a1a4:	20008298 	.word	0x20008298

0801a1a8 <__malloc_lock>:
 801a1a8:	4801      	ldr	r0, [pc, #4]	; (801a1b0 <__malloc_lock+0x8>)
 801a1aa:	f7ff b8e7 	b.w	801937c <__retarget_lock_acquire_recursive>
 801a1ae:	bf00      	nop
 801a1b0:	20008294 	.word	0x20008294

0801a1b4 <__malloc_unlock>:
 801a1b4:	4801      	ldr	r0, [pc, #4]	; (801a1bc <__malloc_unlock+0x8>)
 801a1b6:	f7ff b8e2 	b.w	801937e <__retarget_lock_release_recursive>
 801a1ba:	bf00      	nop
 801a1bc:	20008294 	.word	0x20008294

0801a1c0 <_Balloc>:
 801a1c0:	b570      	push	{r4, r5, r6, lr}
 801a1c2:	69c6      	ldr	r6, [r0, #28]
 801a1c4:	4604      	mov	r4, r0
 801a1c6:	460d      	mov	r5, r1
 801a1c8:	b976      	cbnz	r6, 801a1e8 <_Balloc+0x28>
 801a1ca:	2010      	movs	r0, #16
 801a1cc:	f7ff ff44 	bl	801a058 <malloc>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	61e0      	str	r0, [r4, #28]
 801a1d4:	b920      	cbnz	r0, 801a1e0 <_Balloc+0x20>
 801a1d6:	4b18      	ldr	r3, [pc, #96]	; (801a238 <_Balloc+0x78>)
 801a1d8:	4818      	ldr	r0, [pc, #96]	; (801a23c <_Balloc+0x7c>)
 801a1da:	216b      	movs	r1, #107	; 0x6b
 801a1dc:	f7ff f8de 	bl	801939c <__assert_func>
 801a1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a1e4:	6006      	str	r6, [r0, #0]
 801a1e6:	60c6      	str	r6, [r0, #12]
 801a1e8:	69e6      	ldr	r6, [r4, #28]
 801a1ea:	68f3      	ldr	r3, [r6, #12]
 801a1ec:	b183      	cbz	r3, 801a210 <_Balloc+0x50>
 801a1ee:	69e3      	ldr	r3, [r4, #28]
 801a1f0:	68db      	ldr	r3, [r3, #12]
 801a1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a1f6:	b9b8      	cbnz	r0, 801a228 <_Balloc+0x68>
 801a1f8:	2101      	movs	r1, #1
 801a1fa:	fa01 f605 	lsl.w	r6, r1, r5
 801a1fe:	1d72      	adds	r2, r6, #5
 801a200:	0092      	lsls	r2, r2, #2
 801a202:	4620      	mov	r0, r4
 801a204:	f000 fdf7 	bl	801adf6 <_calloc_r>
 801a208:	b160      	cbz	r0, 801a224 <_Balloc+0x64>
 801a20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a20e:	e00e      	b.n	801a22e <_Balloc+0x6e>
 801a210:	2221      	movs	r2, #33	; 0x21
 801a212:	2104      	movs	r1, #4
 801a214:	4620      	mov	r0, r4
 801a216:	f000 fdee 	bl	801adf6 <_calloc_r>
 801a21a:	69e3      	ldr	r3, [r4, #28]
 801a21c:	60f0      	str	r0, [r6, #12]
 801a21e:	68db      	ldr	r3, [r3, #12]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d1e4      	bne.n	801a1ee <_Balloc+0x2e>
 801a224:	2000      	movs	r0, #0
 801a226:	bd70      	pop	{r4, r5, r6, pc}
 801a228:	6802      	ldr	r2, [r0, #0]
 801a22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a22e:	2300      	movs	r3, #0
 801a230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a234:	e7f7      	b.n	801a226 <_Balloc+0x66>
 801a236:	bf00      	nop
 801a238:	0801e1e6 	.word	0x0801e1e6
 801a23c:	0801e43c 	.word	0x0801e43c

0801a240 <_Bfree>:
 801a240:	b570      	push	{r4, r5, r6, lr}
 801a242:	69c6      	ldr	r6, [r0, #28]
 801a244:	4605      	mov	r5, r0
 801a246:	460c      	mov	r4, r1
 801a248:	b976      	cbnz	r6, 801a268 <_Bfree+0x28>
 801a24a:	2010      	movs	r0, #16
 801a24c:	f7ff ff04 	bl	801a058 <malloc>
 801a250:	4602      	mov	r2, r0
 801a252:	61e8      	str	r0, [r5, #28]
 801a254:	b920      	cbnz	r0, 801a260 <_Bfree+0x20>
 801a256:	4b09      	ldr	r3, [pc, #36]	; (801a27c <_Bfree+0x3c>)
 801a258:	4809      	ldr	r0, [pc, #36]	; (801a280 <_Bfree+0x40>)
 801a25a:	218f      	movs	r1, #143	; 0x8f
 801a25c:	f7ff f89e 	bl	801939c <__assert_func>
 801a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a264:	6006      	str	r6, [r0, #0]
 801a266:	60c6      	str	r6, [r0, #12]
 801a268:	b13c      	cbz	r4, 801a27a <_Bfree+0x3a>
 801a26a:	69eb      	ldr	r3, [r5, #28]
 801a26c:	6862      	ldr	r2, [r4, #4]
 801a26e:	68db      	ldr	r3, [r3, #12]
 801a270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a274:	6021      	str	r1, [r4, #0]
 801a276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a27a:	bd70      	pop	{r4, r5, r6, pc}
 801a27c:	0801e1e6 	.word	0x0801e1e6
 801a280:	0801e43c 	.word	0x0801e43c

0801a284 <__multadd>:
 801a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a288:	690d      	ldr	r5, [r1, #16]
 801a28a:	4607      	mov	r7, r0
 801a28c:	460c      	mov	r4, r1
 801a28e:	461e      	mov	r6, r3
 801a290:	f101 0c14 	add.w	ip, r1, #20
 801a294:	2000      	movs	r0, #0
 801a296:	f8dc 3000 	ldr.w	r3, [ip]
 801a29a:	b299      	uxth	r1, r3
 801a29c:	fb02 6101 	mla	r1, r2, r1, r6
 801a2a0:	0c1e      	lsrs	r6, r3, #16
 801a2a2:	0c0b      	lsrs	r3, r1, #16
 801a2a4:	fb02 3306 	mla	r3, r2, r6, r3
 801a2a8:	b289      	uxth	r1, r1
 801a2aa:	3001      	adds	r0, #1
 801a2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a2b0:	4285      	cmp	r5, r0
 801a2b2:	f84c 1b04 	str.w	r1, [ip], #4
 801a2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a2ba:	dcec      	bgt.n	801a296 <__multadd+0x12>
 801a2bc:	b30e      	cbz	r6, 801a302 <__multadd+0x7e>
 801a2be:	68a3      	ldr	r3, [r4, #8]
 801a2c0:	42ab      	cmp	r3, r5
 801a2c2:	dc19      	bgt.n	801a2f8 <__multadd+0x74>
 801a2c4:	6861      	ldr	r1, [r4, #4]
 801a2c6:	4638      	mov	r0, r7
 801a2c8:	3101      	adds	r1, #1
 801a2ca:	f7ff ff79 	bl	801a1c0 <_Balloc>
 801a2ce:	4680      	mov	r8, r0
 801a2d0:	b928      	cbnz	r0, 801a2de <__multadd+0x5a>
 801a2d2:	4602      	mov	r2, r0
 801a2d4:	4b0c      	ldr	r3, [pc, #48]	; (801a308 <__multadd+0x84>)
 801a2d6:	480d      	ldr	r0, [pc, #52]	; (801a30c <__multadd+0x88>)
 801a2d8:	21ba      	movs	r1, #186	; 0xba
 801a2da:	f7ff f85f 	bl	801939c <__assert_func>
 801a2de:	6922      	ldr	r2, [r4, #16]
 801a2e0:	3202      	adds	r2, #2
 801a2e2:	f104 010c 	add.w	r1, r4, #12
 801a2e6:	0092      	lsls	r2, r2, #2
 801a2e8:	300c      	adds	r0, #12
 801a2ea:	f7ff f849 	bl	8019380 <memcpy>
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	4638      	mov	r0, r7
 801a2f2:	f7ff ffa5 	bl	801a240 <_Bfree>
 801a2f6:	4644      	mov	r4, r8
 801a2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a2fc:	3501      	adds	r5, #1
 801a2fe:	615e      	str	r6, [r3, #20]
 801a300:	6125      	str	r5, [r4, #16]
 801a302:	4620      	mov	r0, r4
 801a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a308:	0801e42b 	.word	0x0801e42b
 801a30c:	0801e43c 	.word	0x0801e43c

0801a310 <__hi0bits>:
 801a310:	0c03      	lsrs	r3, r0, #16
 801a312:	041b      	lsls	r3, r3, #16
 801a314:	b9d3      	cbnz	r3, 801a34c <__hi0bits+0x3c>
 801a316:	0400      	lsls	r0, r0, #16
 801a318:	2310      	movs	r3, #16
 801a31a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a31e:	bf04      	itt	eq
 801a320:	0200      	lsleq	r0, r0, #8
 801a322:	3308      	addeq	r3, #8
 801a324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a328:	bf04      	itt	eq
 801a32a:	0100      	lsleq	r0, r0, #4
 801a32c:	3304      	addeq	r3, #4
 801a32e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a332:	bf04      	itt	eq
 801a334:	0080      	lsleq	r0, r0, #2
 801a336:	3302      	addeq	r3, #2
 801a338:	2800      	cmp	r0, #0
 801a33a:	db05      	blt.n	801a348 <__hi0bits+0x38>
 801a33c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a340:	f103 0301 	add.w	r3, r3, #1
 801a344:	bf08      	it	eq
 801a346:	2320      	moveq	r3, #32
 801a348:	4618      	mov	r0, r3
 801a34a:	4770      	bx	lr
 801a34c:	2300      	movs	r3, #0
 801a34e:	e7e4      	b.n	801a31a <__hi0bits+0xa>

0801a350 <__lo0bits>:
 801a350:	6803      	ldr	r3, [r0, #0]
 801a352:	f013 0207 	ands.w	r2, r3, #7
 801a356:	d00c      	beq.n	801a372 <__lo0bits+0x22>
 801a358:	07d9      	lsls	r1, r3, #31
 801a35a:	d422      	bmi.n	801a3a2 <__lo0bits+0x52>
 801a35c:	079a      	lsls	r2, r3, #30
 801a35e:	bf49      	itett	mi
 801a360:	085b      	lsrmi	r3, r3, #1
 801a362:	089b      	lsrpl	r3, r3, #2
 801a364:	6003      	strmi	r3, [r0, #0]
 801a366:	2201      	movmi	r2, #1
 801a368:	bf5c      	itt	pl
 801a36a:	6003      	strpl	r3, [r0, #0]
 801a36c:	2202      	movpl	r2, #2
 801a36e:	4610      	mov	r0, r2
 801a370:	4770      	bx	lr
 801a372:	b299      	uxth	r1, r3
 801a374:	b909      	cbnz	r1, 801a37a <__lo0bits+0x2a>
 801a376:	0c1b      	lsrs	r3, r3, #16
 801a378:	2210      	movs	r2, #16
 801a37a:	b2d9      	uxtb	r1, r3
 801a37c:	b909      	cbnz	r1, 801a382 <__lo0bits+0x32>
 801a37e:	3208      	adds	r2, #8
 801a380:	0a1b      	lsrs	r3, r3, #8
 801a382:	0719      	lsls	r1, r3, #28
 801a384:	bf04      	itt	eq
 801a386:	091b      	lsreq	r3, r3, #4
 801a388:	3204      	addeq	r2, #4
 801a38a:	0799      	lsls	r1, r3, #30
 801a38c:	bf04      	itt	eq
 801a38e:	089b      	lsreq	r3, r3, #2
 801a390:	3202      	addeq	r2, #2
 801a392:	07d9      	lsls	r1, r3, #31
 801a394:	d403      	bmi.n	801a39e <__lo0bits+0x4e>
 801a396:	085b      	lsrs	r3, r3, #1
 801a398:	f102 0201 	add.w	r2, r2, #1
 801a39c:	d003      	beq.n	801a3a6 <__lo0bits+0x56>
 801a39e:	6003      	str	r3, [r0, #0]
 801a3a0:	e7e5      	b.n	801a36e <__lo0bits+0x1e>
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	e7e3      	b.n	801a36e <__lo0bits+0x1e>
 801a3a6:	2220      	movs	r2, #32
 801a3a8:	e7e1      	b.n	801a36e <__lo0bits+0x1e>
	...

0801a3ac <__i2b>:
 801a3ac:	b510      	push	{r4, lr}
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	2101      	movs	r1, #1
 801a3b2:	f7ff ff05 	bl	801a1c0 <_Balloc>
 801a3b6:	4602      	mov	r2, r0
 801a3b8:	b928      	cbnz	r0, 801a3c6 <__i2b+0x1a>
 801a3ba:	4b05      	ldr	r3, [pc, #20]	; (801a3d0 <__i2b+0x24>)
 801a3bc:	4805      	ldr	r0, [pc, #20]	; (801a3d4 <__i2b+0x28>)
 801a3be:	f240 1145 	movw	r1, #325	; 0x145
 801a3c2:	f7fe ffeb 	bl	801939c <__assert_func>
 801a3c6:	2301      	movs	r3, #1
 801a3c8:	6144      	str	r4, [r0, #20]
 801a3ca:	6103      	str	r3, [r0, #16]
 801a3cc:	bd10      	pop	{r4, pc}
 801a3ce:	bf00      	nop
 801a3d0:	0801e42b 	.word	0x0801e42b
 801a3d4:	0801e43c 	.word	0x0801e43c

0801a3d8 <__multiply>:
 801a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3dc:	4691      	mov	r9, r2
 801a3de:	690a      	ldr	r2, [r1, #16]
 801a3e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a3e4:	429a      	cmp	r2, r3
 801a3e6:	bfb8      	it	lt
 801a3e8:	460b      	movlt	r3, r1
 801a3ea:	460c      	mov	r4, r1
 801a3ec:	bfbc      	itt	lt
 801a3ee:	464c      	movlt	r4, r9
 801a3f0:	4699      	movlt	r9, r3
 801a3f2:	6927      	ldr	r7, [r4, #16]
 801a3f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a3f8:	68a3      	ldr	r3, [r4, #8]
 801a3fa:	6861      	ldr	r1, [r4, #4]
 801a3fc:	eb07 060a 	add.w	r6, r7, sl
 801a400:	42b3      	cmp	r3, r6
 801a402:	b085      	sub	sp, #20
 801a404:	bfb8      	it	lt
 801a406:	3101      	addlt	r1, #1
 801a408:	f7ff feda 	bl	801a1c0 <_Balloc>
 801a40c:	b930      	cbnz	r0, 801a41c <__multiply+0x44>
 801a40e:	4602      	mov	r2, r0
 801a410:	4b44      	ldr	r3, [pc, #272]	; (801a524 <__multiply+0x14c>)
 801a412:	4845      	ldr	r0, [pc, #276]	; (801a528 <__multiply+0x150>)
 801a414:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a418:	f7fe ffc0 	bl	801939c <__assert_func>
 801a41c:	f100 0514 	add.w	r5, r0, #20
 801a420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a424:	462b      	mov	r3, r5
 801a426:	2200      	movs	r2, #0
 801a428:	4543      	cmp	r3, r8
 801a42a:	d321      	bcc.n	801a470 <__multiply+0x98>
 801a42c:	f104 0314 	add.w	r3, r4, #20
 801a430:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a434:	f109 0314 	add.w	r3, r9, #20
 801a438:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a43c:	9202      	str	r2, [sp, #8]
 801a43e:	1b3a      	subs	r2, r7, r4
 801a440:	3a15      	subs	r2, #21
 801a442:	f022 0203 	bic.w	r2, r2, #3
 801a446:	3204      	adds	r2, #4
 801a448:	f104 0115 	add.w	r1, r4, #21
 801a44c:	428f      	cmp	r7, r1
 801a44e:	bf38      	it	cc
 801a450:	2204      	movcc	r2, #4
 801a452:	9201      	str	r2, [sp, #4]
 801a454:	9a02      	ldr	r2, [sp, #8]
 801a456:	9303      	str	r3, [sp, #12]
 801a458:	429a      	cmp	r2, r3
 801a45a:	d80c      	bhi.n	801a476 <__multiply+0x9e>
 801a45c:	2e00      	cmp	r6, #0
 801a45e:	dd03      	ble.n	801a468 <__multiply+0x90>
 801a460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a464:	2b00      	cmp	r3, #0
 801a466:	d05b      	beq.n	801a520 <__multiply+0x148>
 801a468:	6106      	str	r6, [r0, #16]
 801a46a:	b005      	add	sp, #20
 801a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a470:	f843 2b04 	str.w	r2, [r3], #4
 801a474:	e7d8      	b.n	801a428 <__multiply+0x50>
 801a476:	f8b3 a000 	ldrh.w	sl, [r3]
 801a47a:	f1ba 0f00 	cmp.w	sl, #0
 801a47e:	d024      	beq.n	801a4ca <__multiply+0xf2>
 801a480:	f104 0e14 	add.w	lr, r4, #20
 801a484:	46a9      	mov	r9, r5
 801a486:	f04f 0c00 	mov.w	ip, #0
 801a48a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a48e:	f8d9 1000 	ldr.w	r1, [r9]
 801a492:	fa1f fb82 	uxth.w	fp, r2
 801a496:	b289      	uxth	r1, r1
 801a498:	fb0a 110b 	mla	r1, sl, fp, r1
 801a49c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a4a0:	f8d9 2000 	ldr.w	r2, [r9]
 801a4a4:	4461      	add	r1, ip
 801a4a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a4aa:	fb0a c20b 	mla	r2, sl, fp, ip
 801a4ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a4b2:	b289      	uxth	r1, r1
 801a4b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a4b8:	4577      	cmp	r7, lr
 801a4ba:	f849 1b04 	str.w	r1, [r9], #4
 801a4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a4c2:	d8e2      	bhi.n	801a48a <__multiply+0xb2>
 801a4c4:	9a01      	ldr	r2, [sp, #4]
 801a4c6:	f845 c002 	str.w	ip, [r5, r2]
 801a4ca:	9a03      	ldr	r2, [sp, #12]
 801a4cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a4d0:	3304      	adds	r3, #4
 801a4d2:	f1b9 0f00 	cmp.w	r9, #0
 801a4d6:	d021      	beq.n	801a51c <__multiply+0x144>
 801a4d8:	6829      	ldr	r1, [r5, #0]
 801a4da:	f104 0c14 	add.w	ip, r4, #20
 801a4de:	46ae      	mov	lr, r5
 801a4e0:	f04f 0a00 	mov.w	sl, #0
 801a4e4:	f8bc b000 	ldrh.w	fp, [ip]
 801a4e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a4ec:	fb09 220b 	mla	r2, r9, fp, r2
 801a4f0:	4452      	add	r2, sl
 801a4f2:	b289      	uxth	r1, r1
 801a4f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a4f8:	f84e 1b04 	str.w	r1, [lr], #4
 801a4fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a504:	f8be 1000 	ldrh.w	r1, [lr]
 801a508:	fb09 110a 	mla	r1, r9, sl, r1
 801a50c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a510:	4567      	cmp	r7, ip
 801a512:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a516:	d8e5      	bhi.n	801a4e4 <__multiply+0x10c>
 801a518:	9a01      	ldr	r2, [sp, #4]
 801a51a:	50a9      	str	r1, [r5, r2]
 801a51c:	3504      	adds	r5, #4
 801a51e:	e799      	b.n	801a454 <__multiply+0x7c>
 801a520:	3e01      	subs	r6, #1
 801a522:	e79b      	b.n	801a45c <__multiply+0x84>
 801a524:	0801e42b 	.word	0x0801e42b
 801a528:	0801e43c 	.word	0x0801e43c

0801a52c <__pow5mult>:
 801a52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a530:	4615      	mov	r5, r2
 801a532:	f012 0203 	ands.w	r2, r2, #3
 801a536:	4606      	mov	r6, r0
 801a538:	460f      	mov	r7, r1
 801a53a:	d007      	beq.n	801a54c <__pow5mult+0x20>
 801a53c:	4c25      	ldr	r4, [pc, #148]	; (801a5d4 <__pow5mult+0xa8>)
 801a53e:	3a01      	subs	r2, #1
 801a540:	2300      	movs	r3, #0
 801a542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a546:	f7ff fe9d 	bl	801a284 <__multadd>
 801a54a:	4607      	mov	r7, r0
 801a54c:	10ad      	asrs	r5, r5, #2
 801a54e:	d03d      	beq.n	801a5cc <__pow5mult+0xa0>
 801a550:	69f4      	ldr	r4, [r6, #28]
 801a552:	b97c      	cbnz	r4, 801a574 <__pow5mult+0x48>
 801a554:	2010      	movs	r0, #16
 801a556:	f7ff fd7f 	bl	801a058 <malloc>
 801a55a:	4602      	mov	r2, r0
 801a55c:	61f0      	str	r0, [r6, #28]
 801a55e:	b928      	cbnz	r0, 801a56c <__pow5mult+0x40>
 801a560:	4b1d      	ldr	r3, [pc, #116]	; (801a5d8 <__pow5mult+0xac>)
 801a562:	481e      	ldr	r0, [pc, #120]	; (801a5dc <__pow5mult+0xb0>)
 801a564:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a568:	f7fe ff18 	bl	801939c <__assert_func>
 801a56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a570:	6004      	str	r4, [r0, #0]
 801a572:	60c4      	str	r4, [r0, #12]
 801a574:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a57c:	b94c      	cbnz	r4, 801a592 <__pow5mult+0x66>
 801a57e:	f240 2171 	movw	r1, #625	; 0x271
 801a582:	4630      	mov	r0, r6
 801a584:	f7ff ff12 	bl	801a3ac <__i2b>
 801a588:	2300      	movs	r3, #0
 801a58a:	f8c8 0008 	str.w	r0, [r8, #8]
 801a58e:	4604      	mov	r4, r0
 801a590:	6003      	str	r3, [r0, #0]
 801a592:	f04f 0900 	mov.w	r9, #0
 801a596:	07eb      	lsls	r3, r5, #31
 801a598:	d50a      	bpl.n	801a5b0 <__pow5mult+0x84>
 801a59a:	4639      	mov	r1, r7
 801a59c:	4622      	mov	r2, r4
 801a59e:	4630      	mov	r0, r6
 801a5a0:	f7ff ff1a 	bl	801a3d8 <__multiply>
 801a5a4:	4639      	mov	r1, r7
 801a5a6:	4680      	mov	r8, r0
 801a5a8:	4630      	mov	r0, r6
 801a5aa:	f7ff fe49 	bl	801a240 <_Bfree>
 801a5ae:	4647      	mov	r7, r8
 801a5b0:	106d      	asrs	r5, r5, #1
 801a5b2:	d00b      	beq.n	801a5cc <__pow5mult+0xa0>
 801a5b4:	6820      	ldr	r0, [r4, #0]
 801a5b6:	b938      	cbnz	r0, 801a5c8 <__pow5mult+0x9c>
 801a5b8:	4622      	mov	r2, r4
 801a5ba:	4621      	mov	r1, r4
 801a5bc:	4630      	mov	r0, r6
 801a5be:	f7ff ff0b 	bl	801a3d8 <__multiply>
 801a5c2:	6020      	str	r0, [r4, #0]
 801a5c4:	f8c0 9000 	str.w	r9, [r0]
 801a5c8:	4604      	mov	r4, r0
 801a5ca:	e7e4      	b.n	801a596 <__pow5mult+0x6a>
 801a5cc:	4638      	mov	r0, r7
 801a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5d2:	bf00      	nop
 801a5d4:	0801e588 	.word	0x0801e588
 801a5d8:	0801e1e6 	.word	0x0801e1e6
 801a5dc:	0801e43c 	.word	0x0801e43c

0801a5e0 <__lshift>:
 801a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5e4:	460c      	mov	r4, r1
 801a5e6:	6849      	ldr	r1, [r1, #4]
 801a5e8:	6923      	ldr	r3, [r4, #16]
 801a5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a5ee:	68a3      	ldr	r3, [r4, #8]
 801a5f0:	4607      	mov	r7, r0
 801a5f2:	4691      	mov	r9, r2
 801a5f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a5f8:	f108 0601 	add.w	r6, r8, #1
 801a5fc:	42b3      	cmp	r3, r6
 801a5fe:	db0b      	blt.n	801a618 <__lshift+0x38>
 801a600:	4638      	mov	r0, r7
 801a602:	f7ff fddd 	bl	801a1c0 <_Balloc>
 801a606:	4605      	mov	r5, r0
 801a608:	b948      	cbnz	r0, 801a61e <__lshift+0x3e>
 801a60a:	4602      	mov	r2, r0
 801a60c:	4b28      	ldr	r3, [pc, #160]	; (801a6b0 <__lshift+0xd0>)
 801a60e:	4829      	ldr	r0, [pc, #164]	; (801a6b4 <__lshift+0xd4>)
 801a610:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a614:	f7fe fec2 	bl	801939c <__assert_func>
 801a618:	3101      	adds	r1, #1
 801a61a:	005b      	lsls	r3, r3, #1
 801a61c:	e7ee      	b.n	801a5fc <__lshift+0x1c>
 801a61e:	2300      	movs	r3, #0
 801a620:	f100 0114 	add.w	r1, r0, #20
 801a624:	f100 0210 	add.w	r2, r0, #16
 801a628:	4618      	mov	r0, r3
 801a62a:	4553      	cmp	r3, sl
 801a62c:	db33      	blt.n	801a696 <__lshift+0xb6>
 801a62e:	6920      	ldr	r0, [r4, #16]
 801a630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a634:	f104 0314 	add.w	r3, r4, #20
 801a638:	f019 091f 	ands.w	r9, r9, #31
 801a63c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a644:	d02b      	beq.n	801a69e <__lshift+0xbe>
 801a646:	f1c9 0e20 	rsb	lr, r9, #32
 801a64a:	468a      	mov	sl, r1
 801a64c:	2200      	movs	r2, #0
 801a64e:	6818      	ldr	r0, [r3, #0]
 801a650:	fa00 f009 	lsl.w	r0, r0, r9
 801a654:	4310      	orrs	r0, r2
 801a656:	f84a 0b04 	str.w	r0, [sl], #4
 801a65a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a65e:	459c      	cmp	ip, r3
 801a660:	fa22 f20e 	lsr.w	r2, r2, lr
 801a664:	d8f3      	bhi.n	801a64e <__lshift+0x6e>
 801a666:	ebac 0304 	sub.w	r3, ip, r4
 801a66a:	3b15      	subs	r3, #21
 801a66c:	f023 0303 	bic.w	r3, r3, #3
 801a670:	3304      	adds	r3, #4
 801a672:	f104 0015 	add.w	r0, r4, #21
 801a676:	4584      	cmp	ip, r0
 801a678:	bf38      	it	cc
 801a67a:	2304      	movcc	r3, #4
 801a67c:	50ca      	str	r2, [r1, r3]
 801a67e:	b10a      	cbz	r2, 801a684 <__lshift+0xa4>
 801a680:	f108 0602 	add.w	r6, r8, #2
 801a684:	3e01      	subs	r6, #1
 801a686:	4638      	mov	r0, r7
 801a688:	612e      	str	r6, [r5, #16]
 801a68a:	4621      	mov	r1, r4
 801a68c:	f7ff fdd8 	bl	801a240 <_Bfree>
 801a690:	4628      	mov	r0, r5
 801a692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a696:	f842 0f04 	str.w	r0, [r2, #4]!
 801a69a:	3301      	adds	r3, #1
 801a69c:	e7c5      	b.n	801a62a <__lshift+0x4a>
 801a69e:	3904      	subs	r1, #4
 801a6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 801a6a8:	459c      	cmp	ip, r3
 801a6aa:	d8f9      	bhi.n	801a6a0 <__lshift+0xc0>
 801a6ac:	e7ea      	b.n	801a684 <__lshift+0xa4>
 801a6ae:	bf00      	nop
 801a6b0:	0801e42b 	.word	0x0801e42b
 801a6b4:	0801e43c 	.word	0x0801e43c

0801a6b8 <__mcmp>:
 801a6b8:	b530      	push	{r4, r5, lr}
 801a6ba:	6902      	ldr	r2, [r0, #16]
 801a6bc:	690c      	ldr	r4, [r1, #16]
 801a6be:	1b12      	subs	r2, r2, r4
 801a6c0:	d10e      	bne.n	801a6e0 <__mcmp+0x28>
 801a6c2:	f100 0314 	add.w	r3, r0, #20
 801a6c6:	3114      	adds	r1, #20
 801a6c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a6cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a6d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a6d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a6d8:	42a5      	cmp	r5, r4
 801a6da:	d003      	beq.n	801a6e4 <__mcmp+0x2c>
 801a6dc:	d305      	bcc.n	801a6ea <__mcmp+0x32>
 801a6de:	2201      	movs	r2, #1
 801a6e0:	4610      	mov	r0, r2
 801a6e2:	bd30      	pop	{r4, r5, pc}
 801a6e4:	4283      	cmp	r3, r0
 801a6e6:	d3f3      	bcc.n	801a6d0 <__mcmp+0x18>
 801a6e8:	e7fa      	b.n	801a6e0 <__mcmp+0x28>
 801a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ee:	e7f7      	b.n	801a6e0 <__mcmp+0x28>

0801a6f0 <__mdiff>:
 801a6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f4:	460c      	mov	r4, r1
 801a6f6:	4606      	mov	r6, r0
 801a6f8:	4611      	mov	r1, r2
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	4690      	mov	r8, r2
 801a6fe:	f7ff ffdb 	bl	801a6b8 <__mcmp>
 801a702:	1e05      	subs	r5, r0, #0
 801a704:	d110      	bne.n	801a728 <__mdiff+0x38>
 801a706:	4629      	mov	r1, r5
 801a708:	4630      	mov	r0, r6
 801a70a:	f7ff fd59 	bl	801a1c0 <_Balloc>
 801a70e:	b930      	cbnz	r0, 801a71e <__mdiff+0x2e>
 801a710:	4b3a      	ldr	r3, [pc, #232]	; (801a7fc <__mdiff+0x10c>)
 801a712:	4602      	mov	r2, r0
 801a714:	f240 2137 	movw	r1, #567	; 0x237
 801a718:	4839      	ldr	r0, [pc, #228]	; (801a800 <__mdiff+0x110>)
 801a71a:	f7fe fe3f 	bl	801939c <__assert_func>
 801a71e:	2301      	movs	r3, #1
 801a720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a728:	bfa4      	itt	ge
 801a72a:	4643      	movge	r3, r8
 801a72c:	46a0      	movge	r8, r4
 801a72e:	4630      	mov	r0, r6
 801a730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a734:	bfa6      	itte	ge
 801a736:	461c      	movge	r4, r3
 801a738:	2500      	movge	r5, #0
 801a73a:	2501      	movlt	r5, #1
 801a73c:	f7ff fd40 	bl	801a1c0 <_Balloc>
 801a740:	b920      	cbnz	r0, 801a74c <__mdiff+0x5c>
 801a742:	4b2e      	ldr	r3, [pc, #184]	; (801a7fc <__mdiff+0x10c>)
 801a744:	4602      	mov	r2, r0
 801a746:	f240 2145 	movw	r1, #581	; 0x245
 801a74a:	e7e5      	b.n	801a718 <__mdiff+0x28>
 801a74c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a750:	6926      	ldr	r6, [r4, #16]
 801a752:	60c5      	str	r5, [r0, #12]
 801a754:	f104 0914 	add.w	r9, r4, #20
 801a758:	f108 0514 	add.w	r5, r8, #20
 801a75c:	f100 0e14 	add.w	lr, r0, #20
 801a760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a768:	f108 0210 	add.w	r2, r8, #16
 801a76c:	46f2      	mov	sl, lr
 801a76e:	2100      	movs	r1, #0
 801a770:	f859 3b04 	ldr.w	r3, [r9], #4
 801a774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a778:	fa11 f88b 	uxtah	r8, r1, fp
 801a77c:	b299      	uxth	r1, r3
 801a77e:	0c1b      	lsrs	r3, r3, #16
 801a780:	eba8 0801 	sub.w	r8, r8, r1
 801a784:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a788:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a78c:	fa1f f888 	uxth.w	r8, r8
 801a790:	1419      	asrs	r1, r3, #16
 801a792:	454e      	cmp	r6, r9
 801a794:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a798:	f84a 3b04 	str.w	r3, [sl], #4
 801a79c:	d8e8      	bhi.n	801a770 <__mdiff+0x80>
 801a79e:	1b33      	subs	r3, r6, r4
 801a7a0:	3b15      	subs	r3, #21
 801a7a2:	f023 0303 	bic.w	r3, r3, #3
 801a7a6:	3304      	adds	r3, #4
 801a7a8:	3415      	adds	r4, #21
 801a7aa:	42a6      	cmp	r6, r4
 801a7ac:	bf38      	it	cc
 801a7ae:	2304      	movcc	r3, #4
 801a7b0:	441d      	add	r5, r3
 801a7b2:	4473      	add	r3, lr
 801a7b4:	469e      	mov	lr, r3
 801a7b6:	462e      	mov	r6, r5
 801a7b8:	4566      	cmp	r6, ip
 801a7ba:	d30e      	bcc.n	801a7da <__mdiff+0xea>
 801a7bc:	f10c 0203 	add.w	r2, ip, #3
 801a7c0:	1b52      	subs	r2, r2, r5
 801a7c2:	f022 0203 	bic.w	r2, r2, #3
 801a7c6:	3d03      	subs	r5, #3
 801a7c8:	45ac      	cmp	ip, r5
 801a7ca:	bf38      	it	cc
 801a7cc:	2200      	movcc	r2, #0
 801a7ce:	4413      	add	r3, r2
 801a7d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a7d4:	b17a      	cbz	r2, 801a7f6 <__mdiff+0x106>
 801a7d6:	6107      	str	r7, [r0, #16]
 801a7d8:	e7a4      	b.n	801a724 <__mdiff+0x34>
 801a7da:	f856 8b04 	ldr.w	r8, [r6], #4
 801a7de:	fa11 f288 	uxtah	r2, r1, r8
 801a7e2:	1414      	asrs	r4, r2, #16
 801a7e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a7e8:	b292      	uxth	r2, r2
 801a7ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a7ee:	f84e 2b04 	str.w	r2, [lr], #4
 801a7f2:	1421      	asrs	r1, r4, #16
 801a7f4:	e7e0      	b.n	801a7b8 <__mdiff+0xc8>
 801a7f6:	3f01      	subs	r7, #1
 801a7f8:	e7ea      	b.n	801a7d0 <__mdiff+0xe0>
 801a7fa:	bf00      	nop
 801a7fc:	0801e42b 	.word	0x0801e42b
 801a800:	0801e43c 	.word	0x0801e43c

0801a804 <__d2b>:
 801a804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a808:	460f      	mov	r7, r1
 801a80a:	2101      	movs	r1, #1
 801a80c:	ec59 8b10 	vmov	r8, r9, d0
 801a810:	4616      	mov	r6, r2
 801a812:	f7ff fcd5 	bl	801a1c0 <_Balloc>
 801a816:	4604      	mov	r4, r0
 801a818:	b930      	cbnz	r0, 801a828 <__d2b+0x24>
 801a81a:	4602      	mov	r2, r0
 801a81c:	4b24      	ldr	r3, [pc, #144]	; (801a8b0 <__d2b+0xac>)
 801a81e:	4825      	ldr	r0, [pc, #148]	; (801a8b4 <__d2b+0xb0>)
 801a820:	f240 310f 	movw	r1, #783	; 0x30f
 801a824:	f7fe fdba 	bl	801939c <__assert_func>
 801a828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a830:	bb2d      	cbnz	r5, 801a87e <__d2b+0x7a>
 801a832:	9301      	str	r3, [sp, #4]
 801a834:	f1b8 0300 	subs.w	r3, r8, #0
 801a838:	d026      	beq.n	801a888 <__d2b+0x84>
 801a83a:	4668      	mov	r0, sp
 801a83c:	9300      	str	r3, [sp, #0]
 801a83e:	f7ff fd87 	bl	801a350 <__lo0bits>
 801a842:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a846:	b1e8      	cbz	r0, 801a884 <__d2b+0x80>
 801a848:	f1c0 0320 	rsb	r3, r0, #32
 801a84c:	fa02 f303 	lsl.w	r3, r2, r3
 801a850:	430b      	orrs	r3, r1
 801a852:	40c2      	lsrs	r2, r0
 801a854:	6163      	str	r3, [r4, #20]
 801a856:	9201      	str	r2, [sp, #4]
 801a858:	9b01      	ldr	r3, [sp, #4]
 801a85a:	61a3      	str	r3, [r4, #24]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	bf14      	ite	ne
 801a860:	2202      	movne	r2, #2
 801a862:	2201      	moveq	r2, #1
 801a864:	6122      	str	r2, [r4, #16]
 801a866:	b1bd      	cbz	r5, 801a898 <__d2b+0x94>
 801a868:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a86c:	4405      	add	r5, r0
 801a86e:	603d      	str	r5, [r7, #0]
 801a870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a874:	6030      	str	r0, [r6, #0]
 801a876:	4620      	mov	r0, r4
 801a878:	b003      	add	sp, #12
 801a87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a87e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a882:	e7d6      	b.n	801a832 <__d2b+0x2e>
 801a884:	6161      	str	r1, [r4, #20]
 801a886:	e7e7      	b.n	801a858 <__d2b+0x54>
 801a888:	a801      	add	r0, sp, #4
 801a88a:	f7ff fd61 	bl	801a350 <__lo0bits>
 801a88e:	9b01      	ldr	r3, [sp, #4]
 801a890:	6163      	str	r3, [r4, #20]
 801a892:	3020      	adds	r0, #32
 801a894:	2201      	movs	r2, #1
 801a896:	e7e5      	b.n	801a864 <__d2b+0x60>
 801a898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a89c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a8a0:	6038      	str	r0, [r7, #0]
 801a8a2:	6918      	ldr	r0, [r3, #16]
 801a8a4:	f7ff fd34 	bl	801a310 <__hi0bits>
 801a8a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a8ac:	e7e2      	b.n	801a874 <__d2b+0x70>
 801a8ae:	bf00      	nop
 801a8b0:	0801e42b 	.word	0x0801e42b
 801a8b4:	0801e43c 	.word	0x0801e43c

0801a8b8 <__sfputc_r>:
 801a8b8:	6893      	ldr	r3, [r2, #8]
 801a8ba:	3b01      	subs	r3, #1
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	b410      	push	{r4}
 801a8c0:	6093      	str	r3, [r2, #8]
 801a8c2:	da08      	bge.n	801a8d6 <__sfputc_r+0x1e>
 801a8c4:	6994      	ldr	r4, [r2, #24]
 801a8c6:	42a3      	cmp	r3, r4
 801a8c8:	db01      	blt.n	801a8ce <__sfputc_r+0x16>
 801a8ca:	290a      	cmp	r1, #10
 801a8cc:	d103      	bne.n	801a8d6 <__sfputc_r+0x1e>
 801a8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8d2:	f7fe bc38 	b.w	8019146 <__swbuf_r>
 801a8d6:	6813      	ldr	r3, [r2, #0]
 801a8d8:	1c58      	adds	r0, r3, #1
 801a8da:	6010      	str	r0, [r2, #0]
 801a8dc:	7019      	strb	r1, [r3, #0]
 801a8de:	4608      	mov	r0, r1
 801a8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8e4:	4770      	bx	lr

0801a8e6 <__sfputs_r>:
 801a8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8e8:	4606      	mov	r6, r0
 801a8ea:	460f      	mov	r7, r1
 801a8ec:	4614      	mov	r4, r2
 801a8ee:	18d5      	adds	r5, r2, r3
 801a8f0:	42ac      	cmp	r4, r5
 801a8f2:	d101      	bne.n	801a8f8 <__sfputs_r+0x12>
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	e007      	b.n	801a908 <__sfputs_r+0x22>
 801a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8fc:	463a      	mov	r2, r7
 801a8fe:	4630      	mov	r0, r6
 801a900:	f7ff ffda 	bl	801a8b8 <__sfputc_r>
 801a904:	1c43      	adds	r3, r0, #1
 801a906:	d1f3      	bne.n	801a8f0 <__sfputs_r+0xa>
 801a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a90c <_vfiprintf_r>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	460d      	mov	r5, r1
 801a912:	b09d      	sub	sp, #116	; 0x74
 801a914:	4614      	mov	r4, r2
 801a916:	4698      	mov	r8, r3
 801a918:	4606      	mov	r6, r0
 801a91a:	b118      	cbz	r0, 801a924 <_vfiprintf_r+0x18>
 801a91c:	6a03      	ldr	r3, [r0, #32]
 801a91e:	b90b      	cbnz	r3, 801a924 <_vfiprintf_r+0x18>
 801a920:	f7fe fb2a 	bl	8018f78 <__sinit>
 801a924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a926:	07d9      	lsls	r1, r3, #31
 801a928:	d405      	bmi.n	801a936 <_vfiprintf_r+0x2a>
 801a92a:	89ab      	ldrh	r3, [r5, #12]
 801a92c:	059a      	lsls	r2, r3, #22
 801a92e:	d402      	bmi.n	801a936 <_vfiprintf_r+0x2a>
 801a930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a932:	f7fe fd23 	bl	801937c <__retarget_lock_acquire_recursive>
 801a936:	89ab      	ldrh	r3, [r5, #12]
 801a938:	071b      	lsls	r3, r3, #28
 801a93a:	d501      	bpl.n	801a940 <_vfiprintf_r+0x34>
 801a93c:	692b      	ldr	r3, [r5, #16]
 801a93e:	b99b      	cbnz	r3, 801a968 <_vfiprintf_r+0x5c>
 801a940:	4629      	mov	r1, r5
 801a942:	4630      	mov	r0, r6
 801a944:	f7fe fc3c 	bl	80191c0 <__swsetup_r>
 801a948:	b170      	cbz	r0, 801a968 <_vfiprintf_r+0x5c>
 801a94a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a94c:	07dc      	lsls	r4, r3, #31
 801a94e:	d504      	bpl.n	801a95a <_vfiprintf_r+0x4e>
 801a950:	f04f 30ff 	mov.w	r0, #4294967295
 801a954:	b01d      	add	sp, #116	; 0x74
 801a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a95a:	89ab      	ldrh	r3, [r5, #12]
 801a95c:	0598      	lsls	r0, r3, #22
 801a95e:	d4f7      	bmi.n	801a950 <_vfiprintf_r+0x44>
 801a960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a962:	f7fe fd0c 	bl	801937e <__retarget_lock_release_recursive>
 801a966:	e7f3      	b.n	801a950 <_vfiprintf_r+0x44>
 801a968:	2300      	movs	r3, #0
 801a96a:	9309      	str	r3, [sp, #36]	; 0x24
 801a96c:	2320      	movs	r3, #32
 801a96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a972:	f8cd 800c 	str.w	r8, [sp, #12]
 801a976:	2330      	movs	r3, #48	; 0x30
 801a978:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ab2c <_vfiprintf_r+0x220>
 801a97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a980:	f04f 0901 	mov.w	r9, #1
 801a984:	4623      	mov	r3, r4
 801a986:	469a      	mov	sl, r3
 801a988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a98c:	b10a      	cbz	r2, 801a992 <_vfiprintf_r+0x86>
 801a98e:	2a25      	cmp	r2, #37	; 0x25
 801a990:	d1f9      	bne.n	801a986 <_vfiprintf_r+0x7a>
 801a992:	ebba 0b04 	subs.w	fp, sl, r4
 801a996:	d00b      	beq.n	801a9b0 <_vfiprintf_r+0xa4>
 801a998:	465b      	mov	r3, fp
 801a99a:	4622      	mov	r2, r4
 801a99c:	4629      	mov	r1, r5
 801a99e:	4630      	mov	r0, r6
 801a9a0:	f7ff ffa1 	bl	801a8e6 <__sfputs_r>
 801a9a4:	3001      	adds	r0, #1
 801a9a6:	f000 80a9 	beq.w	801aafc <_vfiprintf_r+0x1f0>
 801a9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9ac:	445a      	add	r2, fp
 801a9ae:	9209      	str	r2, [sp, #36]	; 0x24
 801a9b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	f000 80a1 	beq.w	801aafc <_vfiprintf_r+0x1f0>
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9c4:	f10a 0a01 	add.w	sl, sl, #1
 801a9c8:	9304      	str	r3, [sp, #16]
 801a9ca:	9307      	str	r3, [sp, #28]
 801a9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9d0:	931a      	str	r3, [sp, #104]	; 0x68
 801a9d2:	4654      	mov	r4, sl
 801a9d4:	2205      	movs	r2, #5
 801a9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9da:	4854      	ldr	r0, [pc, #336]	; (801ab2c <_vfiprintf_r+0x220>)
 801a9dc:	f7e6 fd10 	bl	8001400 <memchr>
 801a9e0:	9a04      	ldr	r2, [sp, #16]
 801a9e2:	b9d8      	cbnz	r0, 801aa1c <_vfiprintf_r+0x110>
 801a9e4:	06d1      	lsls	r1, r2, #27
 801a9e6:	bf44      	itt	mi
 801a9e8:	2320      	movmi	r3, #32
 801a9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9ee:	0713      	lsls	r3, r2, #28
 801a9f0:	bf44      	itt	mi
 801a9f2:	232b      	movmi	r3, #43	; 0x2b
 801a9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a9fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fe:	d015      	beq.n	801aa2c <_vfiprintf_r+0x120>
 801aa00:	9a07      	ldr	r2, [sp, #28]
 801aa02:	4654      	mov	r4, sl
 801aa04:	2000      	movs	r0, #0
 801aa06:	f04f 0c0a 	mov.w	ip, #10
 801aa0a:	4621      	mov	r1, r4
 801aa0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa10:	3b30      	subs	r3, #48	; 0x30
 801aa12:	2b09      	cmp	r3, #9
 801aa14:	d94d      	bls.n	801aab2 <_vfiprintf_r+0x1a6>
 801aa16:	b1b0      	cbz	r0, 801aa46 <_vfiprintf_r+0x13a>
 801aa18:	9207      	str	r2, [sp, #28]
 801aa1a:	e014      	b.n	801aa46 <_vfiprintf_r+0x13a>
 801aa1c:	eba0 0308 	sub.w	r3, r0, r8
 801aa20:	fa09 f303 	lsl.w	r3, r9, r3
 801aa24:	4313      	orrs	r3, r2
 801aa26:	9304      	str	r3, [sp, #16]
 801aa28:	46a2      	mov	sl, r4
 801aa2a:	e7d2      	b.n	801a9d2 <_vfiprintf_r+0xc6>
 801aa2c:	9b03      	ldr	r3, [sp, #12]
 801aa2e:	1d19      	adds	r1, r3, #4
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	9103      	str	r1, [sp, #12]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	bfbb      	ittet	lt
 801aa38:	425b      	neglt	r3, r3
 801aa3a:	f042 0202 	orrlt.w	r2, r2, #2
 801aa3e:	9307      	strge	r3, [sp, #28]
 801aa40:	9307      	strlt	r3, [sp, #28]
 801aa42:	bfb8      	it	lt
 801aa44:	9204      	strlt	r2, [sp, #16]
 801aa46:	7823      	ldrb	r3, [r4, #0]
 801aa48:	2b2e      	cmp	r3, #46	; 0x2e
 801aa4a:	d10c      	bne.n	801aa66 <_vfiprintf_r+0x15a>
 801aa4c:	7863      	ldrb	r3, [r4, #1]
 801aa4e:	2b2a      	cmp	r3, #42	; 0x2a
 801aa50:	d134      	bne.n	801aabc <_vfiprintf_r+0x1b0>
 801aa52:	9b03      	ldr	r3, [sp, #12]
 801aa54:	1d1a      	adds	r2, r3, #4
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	9203      	str	r2, [sp, #12]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	bfb8      	it	lt
 801aa5e:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa62:	3402      	adds	r4, #2
 801aa64:	9305      	str	r3, [sp, #20]
 801aa66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ab3c <_vfiprintf_r+0x230>
 801aa6a:	7821      	ldrb	r1, [r4, #0]
 801aa6c:	2203      	movs	r2, #3
 801aa6e:	4650      	mov	r0, sl
 801aa70:	f7e6 fcc6 	bl	8001400 <memchr>
 801aa74:	b138      	cbz	r0, 801aa86 <_vfiprintf_r+0x17a>
 801aa76:	9b04      	ldr	r3, [sp, #16]
 801aa78:	eba0 000a 	sub.w	r0, r0, sl
 801aa7c:	2240      	movs	r2, #64	; 0x40
 801aa7e:	4082      	lsls	r2, r0
 801aa80:	4313      	orrs	r3, r2
 801aa82:	3401      	adds	r4, #1
 801aa84:	9304      	str	r3, [sp, #16]
 801aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa8a:	4829      	ldr	r0, [pc, #164]	; (801ab30 <_vfiprintf_r+0x224>)
 801aa8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa90:	2206      	movs	r2, #6
 801aa92:	f7e6 fcb5 	bl	8001400 <memchr>
 801aa96:	2800      	cmp	r0, #0
 801aa98:	d03f      	beq.n	801ab1a <_vfiprintf_r+0x20e>
 801aa9a:	4b26      	ldr	r3, [pc, #152]	; (801ab34 <_vfiprintf_r+0x228>)
 801aa9c:	bb1b      	cbnz	r3, 801aae6 <_vfiprintf_r+0x1da>
 801aa9e:	9b03      	ldr	r3, [sp, #12]
 801aaa0:	3307      	adds	r3, #7
 801aaa2:	f023 0307 	bic.w	r3, r3, #7
 801aaa6:	3308      	adds	r3, #8
 801aaa8:	9303      	str	r3, [sp, #12]
 801aaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaac:	443b      	add	r3, r7
 801aaae:	9309      	str	r3, [sp, #36]	; 0x24
 801aab0:	e768      	b.n	801a984 <_vfiprintf_r+0x78>
 801aab2:	fb0c 3202 	mla	r2, ip, r2, r3
 801aab6:	460c      	mov	r4, r1
 801aab8:	2001      	movs	r0, #1
 801aaba:	e7a6      	b.n	801aa0a <_vfiprintf_r+0xfe>
 801aabc:	2300      	movs	r3, #0
 801aabe:	3401      	adds	r4, #1
 801aac0:	9305      	str	r3, [sp, #20]
 801aac2:	4619      	mov	r1, r3
 801aac4:	f04f 0c0a 	mov.w	ip, #10
 801aac8:	4620      	mov	r0, r4
 801aaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aace:	3a30      	subs	r2, #48	; 0x30
 801aad0:	2a09      	cmp	r2, #9
 801aad2:	d903      	bls.n	801aadc <_vfiprintf_r+0x1d0>
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d0c6      	beq.n	801aa66 <_vfiprintf_r+0x15a>
 801aad8:	9105      	str	r1, [sp, #20]
 801aada:	e7c4      	b.n	801aa66 <_vfiprintf_r+0x15a>
 801aadc:	fb0c 2101 	mla	r1, ip, r1, r2
 801aae0:	4604      	mov	r4, r0
 801aae2:	2301      	movs	r3, #1
 801aae4:	e7f0      	b.n	801aac8 <_vfiprintf_r+0x1bc>
 801aae6:	ab03      	add	r3, sp, #12
 801aae8:	9300      	str	r3, [sp, #0]
 801aaea:	462a      	mov	r2, r5
 801aaec:	4b12      	ldr	r3, [pc, #72]	; (801ab38 <_vfiprintf_r+0x22c>)
 801aaee:	a904      	add	r1, sp, #16
 801aaf0:	4630      	mov	r0, r6
 801aaf2:	f7fd fe1d 	bl	8018730 <_printf_float>
 801aaf6:	4607      	mov	r7, r0
 801aaf8:	1c78      	adds	r0, r7, #1
 801aafa:	d1d6      	bne.n	801aaaa <_vfiprintf_r+0x19e>
 801aafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aafe:	07d9      	lsls	r1, r3, #31
 801ab00:	d405      	bmi.n	801ab0e <_vfiprintf_r+0x202>
 801ab02:	89ab      	ldrh	r3, [r5, #12]
 801ab04:	059a      	lsls	r2, r3, #22
 801ab06:	d402      	bmi.n	801ab0e <_vfiprintf_r+0x202>
 801ab08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab0a:	f7fe fc38 	bl	801937e <__retarget_lock_release_recursive>
 801ab0e:	89ab      	ldrh	r3, [r5, #12]
 801ab10:	065b      	lsls	r3, r3, #25
 801ab12:	f53f af1d 	bmi.w	801a950 <_vfiprintf_r+0x44>
 801ab16:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab18:	e71c      	b.n	801a954 <_vfiprintf_r+0x48>
 801ab1a:	ab03      	add	r3, sp, #12
 801ab1c:	9300      	str	r3, [sp, #0]
 801ab1e:	462a      	mov	r2, r5
 801ab20:	4b05      	ldr	r3, [pc, #20]	; (801ab38 <_vfiprintf_r+0x22c>)
 801ab22:	a904      	add	r1, sp, #16
 801ab24:	4630      	mov	r0, r6
 801ab26:	f7fe f88b 	bl	8018c40 <_printf_i>
 801ab2a:	e7e4      	b.n	801aaf6 <_vfiprintf_r+0x1ea>
 801ab2c:	0801e594 	.word	0x0801e594
 801ab30:	0801e59e 	.word	0x0801e59e
 801ab34:	08018731 	.word	0x08018731
 801ab38:	0801a8e7 	.word	0x0801a8e7
 801ab3c:	0801e59a 	.word	0x0801e59a

0801ab40 <__sflush_r>:
 801ab40:	898a      	ldrh	r2, [r1, #12]
 801ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab46:	4605      	mov	r5, r0
 801ab48:	0710      	lsls	r0, r2, #28
 801ab4a:	460c      	mov	r4, r1
 801ab4c:	d458      	bmi.n	801ac00 <__sflush_r+0xc0>
 801ab4e:	684b      	ldr	r3, [r1, #4]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	dc05      	bgt.n	801ab60 <__sflush_r+0x20>
 801ab54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	dc02      	bgt.n	801ab60 <__sflush_r+0x20>
 801ab5a:	2000      	movs	r0, #0
 801ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ab62:	2e00      	cmp	r6, #0
 801ab64:	d0f9      	beq.n	801ab5a <__sflush_r+0x1a>
 801ab66:	2300      	movs	r3, #0
 801ab68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ab6c:	682f      	ldr	r7, [r5, #0]
 801ab6e:	6a21      	ldr	r1, [r4, #32]
 801ab70:	602b      	str	r3, [r5, #0]
 801ab72:	d032      	beq.n	801abda <__sflush_r+0x9a>
 801ab74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ab76:	89a3      	ldrh	r3, [r4, #12]
 801ab78:	075a      	lsls	r2, r3, #29
 801ab7a:	d505      	bpl.n	801ab88 <__sflush_r+0x48>
 801ab7c:	6863      	ldr	r3, [r4, #4]
 801ab7e:	1ac0      	subs	r0, r0, r3
 801ab80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ab82:	b10b      	cbz	r3, 801ab88 <__sflush_r+0x48>
 801ab84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab86:	1ac0      	subs	r0, r0, r3
 801ab88:	2300      	movs	r3, #0
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ab8e:	6a21      	ldr	r1, [r4, #32]
 801ab90:	4628      	mov	r0, r5
 801ab92:	47b0      	blx	r6
 801ab94:	1c43      	adds	r3, r0, #1
 801ab96:	89a3      	ldrh	r3, [r4, #12]
 801ab98:	d106      	bne.n	801aba8 <__sflush_r+0x68>
 801ab9a:	6829      	ldr	r1, [r5, #0]
 801ab9c:	291d      	cmp	r1, #29
 801ab9e:	d82b      	bhi.n	801abf8 <__sflush_r+0xb8>
 801aba0:	4a29      	ldr	r2, [pc, #164]	; (801ac48 <__sflush_r+0x108>)
 801aba2:	410a      	asrs	r2, r1
 801aba4:	07d6      	lsls	r6, r2, #31
 801aba6:	d427      	bmi.n	801abf8 <__sflush_r+0xb8>
 801aba8:	2200      	movs	r2, #0
 801abaa:	6062      	str	r2, [r4, #4]
 801abac:	04d9      	lsls	r1, r3, #19
 801abae:	6922      	ldr	r2, [r4, #16]
 801abb0:	6022      	str	r2, [r4, #0]
 801abb2:	d504      	bpl.n	801abbe <__sflush_r+0x7e>
 801abb4:	1c42      	adds	r2, r0, #1
 801abb6:	d101      	bne.n	801abbc <__sflush_r+0x7c>
 801abb8:	682b      	ldr	r3, [r5, #0]
 801abba:	b903      	cbnz	r3, 801abbe <__sflush_r+0x7e>
 801abbc:	6560      	str	r0, [r4, #84]	; 0x54
 801abbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801abc0:	602f      	str	r7, [r5, #0]
 801abc2:	2900      	cmp	r1, #0
 801abc4:	d0c9      	beq.n	801ab5a <__sflush_r+0x1a>
 801abc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801abca:	4299      	cmp	r1, r3
 801abcc:	d002      	beq.n	801abd4 <__sflush_r+0x94>
 801abce:	4628      	mov	r0, r5
 801abd0:	f7ff f9f6 	bl	8019fc0 <_free_r>
 801abd4:	2000      	movs	r0, #0
 801abd6:	6360      	str	r0, [r4, #52]	; 0x34
 801abd8:	e7c0      	b.n	801ab5c <__sflush_r+0x1c>
 801abda:	2301      	movs	r3, #1
 801abdc:	4628      	mov	r0, r5
 801abde:	47b0      	blx	r6
 801abe0:	1c41      	adds	r1, r0, #1
 801abe2:	d1c8      	bne.n	801ab76 <__sflush_r+0x36>
 801abe4:	682b      	ldr	r3, [r5, #0]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d0c5      	beq.n	801ab76 <__sflush_r+0x36>
 801abea:	2b1d      	cmp	r3, #29
 801abec:	d001      	beq.n	801abf2 <__sflush_r+0xb2>
 801abee:	2b16      	cmp	r3, #22
 801abf0:	d101      	bne.n	801abf6 <__sflush_r+0xb6>
 801abf2:	602f      	str	r7, [r5, #0]
 801abf4:	e7b1      	b.n	801ab5a <__sflush_r+0x1a>
 801abf6:	89a3      	ldrh	r3, [r4, #12]
 801abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801abfc:	81a3      	strh	r3, [r4, #12]
 801abfe:	e7ad      	b.n	801ab5c <__sflush_r+0x1c>
 801ac00:	690f      	ldr	r7, [r1, #16]
 801ac02:	2f00      	cmp	r7, #0
 801ac04:	d0a9      	beq.n	801ab5a <__sflush_r+0x1a>
 801ac06:	0793      	lsls	r3, r2, #30
 801ac08:	680e      	ldr	r6, [r1, #0]
 801ac0a:	bf08      	it	eq
 801ac0c:	694b      	ldreq	r3, [r1, #20]
 801ac0e:	600f      	str	r7, [r1, #0]
 801ac10:	bf18      	it	ne
 801ac12:	2300      	movne	r3, #0
 801ac14:	eba6 0807 	sub.w	r8, r6, r7
 801ac18:	608b      	str	r3, [r1, #8]
 801ac1a:	f1b8 0f00 	cmp.w	r8, #0
 801ac1e:	dd9c      	ble.n	801ab5a <__sflush_r+0x1a>
 801ac20:	6a21      	ldr	r1, [r4, #32]
 801ac22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ac24:	4643      	mov	r3, r8
 801ac26:	463a      	mov	r2, r7
 801ac28:	4628      	mov	r0, r5
 801ac2a:	47b0      	blx	r6
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	dc06      	bgt.n	801ac3e <__sflush_r+0xfe>
 801ac30:	89a3      	ldrh	r3, [r4, #12]
 801ac32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac36:	81a3      	strh	r3, [r4, #12]
 801ac38:	f04f 30ff 	mov.w	r0, #4294967295
 801ac3c:	e78e      	b.n	801ab5c <__sflush_r+0x1c>
 801ac3e:	4407      	add	r7, r0
 801ac40:	eba8 0800 	sub.w	r8, r8, r0
 801ac44:	e7e9      	b.n	801ac1a <__sflush_r+0xda>
 801ac46:	bf00      	nop
 801ac48:	dfbffffe 	.word	0xdfbffffe

0801ac4c <_fflush_r>:
 801ac4c:	b538      	push	{r3, r4, r5, lr}
 801ac4e:	690b      	ldr	r3, [r1, #16]
 801ac50:	4605      	mov	r5, r0
 801ac52:	460c      	mov	r4, r1
 801ac54:	b913      	cbnz	r3, 801ac5c <_fflush_r+0x10>
 801ac56:	2500      	movs	r5, #0
 801ac58:	4628      	mov	r0, r5
 801ac5a:	bd38      	pop	{r3, r4, r5, pc}
 801ac5c:	b118      	cbz	r0, 801ac66 <_fflush_r+0x1a>
 801ac5e:	6a03      	ldr	r3, [r0, #32]
 801ac60:	b90b      	cbnz	r3, 801ac66 <_fflush_r+0x1a>
 801ac62:	f7fe f989 	bl	8018f78 <__sinit>
 801ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d0f3      	beq.n	801ac56 <_fflush_r+0xa>
 801ac6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ac70:	07d0      	lsls	r0, r2, #31
 801ac72:	d404      	bmi.n	801ac7e <_fflush_r+0x32>
 801ac74:	0599      	lsls	r1, r3, #22
 801ac76:	d402      	bmi.n	801ac7e <_fflush_r+0x32>
 801ac78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac7a:	f7fe fb7f 	bl	801937c <__retarget_lock_acquire_recursive>
 801ac7e:	4628      	mov	r0, r5
 801ac80:	4621      	mov	r1, r4
 801ac82:	f7ff ff5d 	bl	801ab40 <__sflush_r>
 801ac86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac88:	07da      	lsls	r2, r3, #31
 801ac8a:	4605      	mov	r5, r0
 801ac8c:	d4e4      	bmi.n	801ac58 <_fflush_r+0xc>
 801ac8e:	89a3      	ldrh	r3, [r4, #12]
 801ac90:	059b      	lsls	r3, r3, #22
 801ac92:	d4e1      	bmi.n	801ac58 <_fflush_r+0xc>
 801ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac96:	f7fe fb72 	bl	801937e <__retarget_lock_release_recursive>
 801ac9a:	e7dd      	b.n	801ac58 <_fflush_r+0xc>

0801ac9c <fiprintf>:
 801ac9c:	b40e      	push	{r1, r2, r3}
 801ac9e:	b503      	push	{r0, r1, lr}
 801aca0:	4601      	mov	r1, r0
 801aca2:	ab03      	add	r3, sp, #12
 801aca4:	4805      	ldr	r0, [pc, #20]	; (801acbc <fiprintf+0x20>)
 801aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 801acaa:	6800      	ldr	r0, [r0, #0]
 801acac:	9301      	str	r3, [sp, #4]
 801acae:	f7ff fe2d 	bl	801a90c <_vfiprintf_r>
 801acb2:	b002      	add	sp, #8
 801acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801acb8:	b003      	add	sp, #12
 801acba:	4770      	bx	lr
 801acbc:	200000b8 	.word	0x200000b8

0801acc0 <__swhatbuf_r>:
 801acc0:	b570      	push	{r4, r5, r6, lr}
 801acc2:	460c      	mov	r4, r1
 801acc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acc8:	2900      	cmp	r1, #0
 801acca:	b096      	sub	sp, #88	; 0x58
 801accc:	4615      	mov	r5, r2
 801acce:	461e      	mov	r6, r3
 801acd0:	da0d      	bge.n	801acee <__swhatbuf_r+0x2e>
 801acd2:	89a3      	ldrh	r3, [r4, #12]
 801acd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801acd8:	f04f 0100 	mov.w	r1, #0
 801acdc:	bf0c      	ite	eq
 801acde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ace2:	2340      	movne	r3, #64	; 0x40
 801ace4:	2000      	movs	r0, #0
 801ace6:	6031      	str	r1, [r6, #0]
 801ace8:	602b      	str	r3, [r5, #0]
 801acea:	b016      	add	sp, #88	; 0x58
 801acec:	bd70      	pop	{r4, r5, r6, pc}
 801acee:	466a      	mov	r2, sp
 801acf0:	f000 f848 	bl	801ad84 <_fstat_r>
 801acf4:	2800      	cmp	r0, #0
 801acf6:	dbec      	blt.n	801acd2 <__swhatbuf_r+0x12>
 801acf8:	9901      	ldr	r1, [sp, #4]
 801acfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801acfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ad02:	4259      	negs	r1, r3
 801ad04:	4159      	adcs	r1, r3
 801ad06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad0a:	e7eb      	b.n	801ace4 <__swhatbuf_r+0x24>

0801ad0c <__smakebuf_r>:
 801ad0c:	898b      	ldrh	r3, [r1, #12]
 801ad0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad10:	079d      	lsls	r5, r3, #30
 801ad12:	4606      	mov	r6, r0
 801ad14:	460c      	mov	r4, r1
 801ad16:	d507      	bpl.n	801ad28 <__smakebuf_r+0x1c>
 801ad18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad1c:	6023      	str	r3, [r4, #0]
 801ad1e:	6123      	str	r3, [r4, #16]
 801ad20:	2301      	movs	r3, #1
 801ad22:	6163      	str	r3, [r4, #20]
 801ad24:	b002      	add	sp, #8
 801ad26:	bd70      	pop	{r4, r5, r6, pc}
 801ad28:	ab01      	add	r3, sp, #4
 801ad2a:	466a      	mov	r2, sp
 801ad2c:	f7ff ffc8 	bl	801acc0 <__swhatbuf_r>
 801ad30:	9900      	ldr	r1, [sp, #0]
 801ad32:	4605      	mov	r5, r0
 801ad34:	4630      	mov	r0, r6
 801ad36:	f7ff f9b7 	bl	801a0a8 <_malloc_r>
 801ad3a:	b948      	cbnz	r0, 801ad50 <__smakebuf_r+0x44>
 801ad3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad40:	059a      	lsls	r2, r3, #22
 801ad42:	d4ef      	bmi.n	801ad24 <__smakebuf_r+0x18>
 801ad44:	f023 0303 	bic.w	r3, r3, #3
 801ad48:	f043 0302 	orr.w	r3, r3, #2
 801ad4c:	81a3      	strh	r3, [r4, #12]
 801ad4e:	e7e3      	b.n	801ad18 <__smakebuf_r+0xc>
 801ad50:	89a3      	ldrh	r3, [r4, #12]
 801ad52:	6020      	str	r0, [r4, #0]
 801ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad58:	81a3      	strh	r3, [r4, #12]
 801ad5a:	9b00      	ldr	r3, [sp, #0]
 801ad5c:	6163      	str	r3, [r4, #20]
 801ad5e:	9b01      	ldr	r3, [sp, #4]
 801ad60:	6120      	str	r0, [r4, #16]
 801ad62:	b15b      	cbz	r3, 801ad7c <__smakebuf_r+0x70>
 801ad64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad68:	4630      	mov	r0, r6
 801ad6a:	f000 f81d 	bl	801ada8 <_isatty_r>
 801ad6e:	b128      	cbz	r0, 801ad7c <__smakebuf_r+0x70>
 801ad70:	89a3      	ldrh	r3, [r4, #12]
 801ad72:	f023 0303 	bic.w	r3, r3, #3
 801ad76:	f043 0301 	orr.w	r3, r3, #1
 801ad7a:	81a3      	strh	r3, [r4, #12]
 801ad7c:	89a3      	ldrh	r3, [r4, #12]
 801ad7e:	431d      	orrs	r5, r3
 801ad80:	81a5      	strh	r5, [r4, #12]
 801ad82:	e7cf      	b.n	801ad24 <__smakebuf_r+0x18>

0801ad84 <_fstat_r>:
 801ad84:	b538      	push	{r3, r4, r5, lr}
 801ad86:	4d07      	ldr	r5, [pc, #28]	; (801ada4 <_fstat_r+0x20>)
 801ad88:	2300      	movs	r3, #0
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	4608      	mov	r0, r1
 801ad8e:	4611      	mov	r1, r2
 801ad90:	602b      	str	r3, [r5, #0]
 801ad92:	f7e7 ff62 	bl	8002c5a <_fstat>
 801ad96:	1c43      	adds	r3, r0, #1
 801ad98:	d102      	bne.n	801ada0 <_fstat_r+0x1c>
 801ad9a:	682b      	ldr	r3, [r5, #0]
 801ad9c:	b103      	cbz	r3, 801ada0 <_fstat_r+0x1c>
 801ad9e:	6023      	str	r3, [r4, #0]
 801ada0:	bd38      	pop	{r3, r4, r5, pc}
 801ada2:	bf00      	nop
 801ada4:	20008290 	.word	0x20008290

0801ada8 <_isatty_r>:
 801ada8:	b538      	push	{r3, r4, r5, lr}
 801adaa:	4d06      	ldr	r5, [pc, #24]	; (801adc4 <_isatty_r+0x1c>)
 801adac:	2300      	movs	r3, #0
 801adae:	4604      	mov	r4, r0
 801adb0:	4608      	mov	r0, r1
 801adb2:	602b      	str	r3, [r5, #0]
 801adb4:	f7e7 ff61 	bl	8002c7a <_isatty>
 801adb8:	1c43      	adds	r3, r0, #1
 801adba:	d102      	bne.n	801adc2 <_isatty_r+0x1a>
 801adbc:	682b      	ldr	r3, [r5, #0]
 801adbe:	b103      	cbz	r3, 801adc2 <_isatty_r+0x1a>
 801adc0:	6023      	str	r3, [r4, #0]
 801adc2:	bd38      	pop	{r3, r4, r5, pc}
 801adc4:	20008290 	.word	0x20008290

0801adc8 <_sbrk_r>:
 801adc8:	b538      	push	{r3, r4, r5, lr}
 801adca:	4d06      	ldr	r5, [pc, #24]	; (801ade4 <_sbrk_r+0x1c>)
 801adcc:	2300      	movs	r3, #0
 801adce:	4604      	mov	r4, r0
 801add0:	4608      	mov	r0, r1
 801add2:	602b      	str	r3, [r5, #0]
 801add4:	f7e7 ff6a 	bl	8002cac <_sbrk>
 801add8:	1c43      	adds	r3, r0, #1
 801adda:	d102      	bne.n	801ade2 <_sbrk_r+0x1a>
 801addc:	682b      	ldr	r3, [r5, #0]
 801adde:	b103      	cbz	r3, 801ade2 <_sbrk_r+0x1a>
 801ade0:	6023      	str	r3, [r4, #0]
 801ade2:	bd38      	pop	{r3, r4, r5, pc}
 801ade4:	20008290 	.word	0x20008290

0801ade8 <abort>:
 801ade8:	b508      	push	{r3, lr}
 801adea:	2006      	movs	r0, #6
 801adec:	f000 f860 	bl	801aeb0 <raise>
 801adf0:	2001      	movs	r0, #1
 801adf2:	f7e7 fee3 	bl	8002bbc <_exit>

0801adf6 <_calloc_r>:
 801adf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adf8:	fba1 2402 	umull	r2, r4, r1, r2
 801adfc:	b94c      	cbnz	r4, 801ae12 <_calloc_r+0x1c>
 801adfe:	4611      	mov	r1, r2
 801ae00:	9201      	str	r2, [sp, #4]
 801ae02:	f7ff f951 	bl	801a0a8 <_malloc_r>
 801ae06:	9a01      	ldr	r2, [sp, #4]
 801ae08:	4605      	mov	r5, r0
 801ae0a:	b930      	cbnz	r0, 801ae1a <_calloc_r+0x24>
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	b003      	add	sp, #12
 801ae10:	bd30      	pop	{r4, r5, pc}
 801ae12:	220c      	movs	r2, #12
 801ae14:	6002      	str	r2, [r0, #0]
 801ae16:	2500      	movs	r5, #0
 801ae18:	e7f8      	b.n	801ae0c <_calloc_r+0x16>
 801ae1a:	4621      	mov	r1, r4
 801ae1c:	f7fe fa38 	bl	8019290 <memset>
 801ae20:	e7f4      	b.n	801ae0c <_calloc_r+0x16>

0801ae22 <__ascii_mbtowc>:
 801ae22:	b082      	sub	sp, #8
 801ae24:	b901      	cbnz	r1, 801ae28 <__ascii_mbtowc+0x6>
 801ae26:	a901      	add	r1, sp, #4
 801ae28:	b142      	cbz	r2, 801ae3c <__ascii_mbtowc+0x1a>
 801ae2a:	b14b      	cbz	r3, 801ae40 <__ascii_mbtowc+0x1e>
 801ae2c:	7813      	ldrb	r3, [r2, #0]
 801ae2e:	600b      	str	r3, [r1, #0]
 801ae30:	7812      	ldrb	r2, [r2, #0]
 801ae32:	1e10      	subs	r0, r2, #0
 801ae34:	bf18      	it	ne
 801ae36:	2001      	movne	r0, #1
 801ae38:	b002      	add	sp, #8
 801ae3a:	4770      	bx	lr
 801ae3c:	4610      	mov	r0, r2
 801ae3e:	e7fb      	b.n	801ae38 <__ascii_mbtowc+0x16>
 801ae40:	f06f 0001 	mvn.w	r0, #1
 801ae44:	e7f8      	b.n	801ae38 <__ascii_mbtowc+0x16>

0801ae46 <__ascii_wctomb>:
 801ae46:	b149      	cbz	r1, 801ae5c <__ascii_wctomb+0x16>
 801ae48:	2aff      	cmp	r2, #255	; 0xff
 801ae4a:	bf85      	ittet	hi
 801ae4c:	238a      	movhi	r3, #138	; 0x8a
 801ae4e:	6003      	strhi	r3, [r0, #0]
 801ae50:	700a      	strbls	r2, [r1, #0]
 801ae52:	f04f 30ff 	movhi.w	r0, #4294967295
 801ae56:	bf98      	it	ls
 801ae58:	2001      	movls	r0, #1
 801ae5a:	4770      	bx	lr
 801ae5c:	4608      	mov	r0, r1
 801ae5e:	4770      	bx	lr

0801ae60 <_raise_r>:
 801ae60:	291f      	cmp	r1, #31
 801ae62:	b538      	push	{r3, r4, r5, lr}
 801ae64:	4604      	mov	r4, r0
 801ae66:	460d      	mov	r5, r1
 801ae68:	d904      	bls.n	801ae74 <_raise_r+0x14>
 801ae6a:	2316      	movs	r3, #22
 801ae6c:	6003      	str	r3, [r0, #0]
 801ae6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae72:	bd38      	pop	{r3, r4, r5, pc}
 801ae74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ae76:	b112      	cbz	r2, 801ae7e <_raise_r+0x1e>
 801ae78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae7c:	b94b      	cbnz	r3, 801ae92 <_raise_r+0x32>
 801ae7e:	4620      	mov	r0, r4
 801ae80:	f000 f830 	bl	801aee4 <_getpid_r>
 801ae84:	462a      	mov	r2, r5
 801ae86:	4601      	mov	r1, r0
 801ae88:	4620      	mov	r0, r4
 801ae8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae8e:	f000 b817 	b.w	801aec0 <_kill_r>
 801ae92:	2b01      	cmp	r3, #1
 801ae94:	d00a      	beq.n	801aeac <_raise_r+0x4c>
 801ae96:	1c59      	adds	r1, r3, #1
 801ae98:	d103      	bne.n	801aea2 <_raise_r+0x42>
 801ae9a:	2316      	movs	r3, #22
 801ae9c:	6003      	str	r3, [r0, #0]
 801ae9e:	2001      	movs	r0, #1
 801aea0:	e7e7      	b.n	801ae72 <_raise_r+0x12>
 801aea2:	2400      	movs	r4, #0
 801aea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801aea8:	4628      	mov	r0, r5
 801aeaa:	4798      	blx	r3
 801aeac:	2000      	movs	r0, #0
 801aeae:	e7e0      	b.n	801ae72 <_raise_r+0x12>

0801aeb0 <raise>:
 801aeb0:	4b02      	ldr	r3, [pc, #8]	; (801aebc <raise+0xc>)
 801aeb2:	4601      	mov	r1, r0
 801aeb4:	6818      	ldr	r0, [r3, #0]
 801aeb6:	f7ff bfd3 	b.w	801ae60 <_raise_r>
 801aeba:	bf00      	nop
 801aebc:	200000b8 	.word	0x200000b8

0801aec0 <_kill_r>:
 801aec0:	b538      	push	{r3, r4, r5, lr}
 801aec2:	4d07      	ldr	r5, [pc, #28]	; (801aee0 <_kill_r+0x20>)
 801aec4:	2300      	movs	r3, #0
 801aec6:	4604      	mov	r4, r0
 801aec8:	4608      	mov	r0, r1
 801aeca:	4611      	mov	r1, r2
 801aecc:	602b      	str	r3, [r5, #0]
 801aece:	f7e7 fe63 	bl	8002b98 <_kill>
 801aed2:	1c43      	adds	r3, r0, #1
 801aed4:	d102      	bne.n	801aedc <_kill_r+0x1c>
 801aed6:	682b      	ldr	r3, [r5, #0]
 801aed8:	b103      	cbz	r3, 801aedc <_kill_r+0x1c>
 801aeda:	6023      	str	r3, [r4, #0]
 801aedc:	bd38      	pop	{r3, r4, r5, pc}
 801aede:	bf00      	nop
 801aee0:	20008290 	.word	0x20008290

0801aee4 <_getpid_r>:
 801aee4:	f7e7 be50 	b.w	8002b88 <_getpid>

0801aee8 <_init>:
 801aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeea:	bf00      	nop
 801aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aeee:	bc08      	pop	{r3}
 801aef0:	469e      	mov	lr, r3
 801aef2:	4770      	bx	lr

0801aef4 <_fini>:
 801aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aef6:	bf00      	nop
 801aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aefa:	bc08      	pop	{r3}
 801aefc:	469e      	mov	lr, r3
 801aefe:	4770      	bx	lr

0801af00 <__calc_defined_step_MW_sweep_veneer>:
 801af00:	f85f f000 	ldr.w	pc, [pc]	; 801af04 <__calc_defined_step_MW_sweep_veneer+0x4>
 801af04:	0000056d 	.word	0x0000056d

0801af08 <__start_pop_veneer>:
 801af08:	f85f f000 	ldr.w	pc, [pc]	; 801af0c <__start_pop_veneer+0x4>
 801af0c:	00000ff9 	.word	0x00000ff9

0801af10 <__MW_update_veneer>:
 801af10:	f85f f000 	ldr.w	pc, [pc]	; 801af14 <__MW_update_veneer+0x4>
 801af14:	00000bf5 	.word	0x00000bf5

0801af18 <__timer_delay_veneer>:
 801af18:	f85f f000 	ldr.w	pc, [pc]	; 801af1c <__timer_delay_veneer+0x4>
 801af1c:	00000fcd 	.word	0x00000fcd

0801af20 <__init_synthesiser_veneer>:
 801af20:	f85f f000 	ldr.w	pc, [pc]	; 801af24 <__init_synthesiser_veneer+0x4>
 801af24:	00000181 	.word	0x00000181

0801af28 <__set_MW_power_veneer>:
 801af28:	f85f f000 	ldr.w	pc, [pc]	; 801af2c <__set_MW_power_veneer+0x4>
 801af2c:	00000123 	.word	0x00000123

0801af30 <__stop_pop_veneer>:
 801af30:	f85f f000 	ldr.w	pc, [pc]	; 801af34 <__stop_pop_veneer+0x4>
 801af34:	00001055 	.word	0x00001055

0801af38 <__start_MW_sweep_veneer>:
 801af38:	f85f f000 	ldr.w	pc, [pc]	; 801af3c <__start_MW_sweep_veneer+0x4>
 801af3c:	00000b91 	.word	0x00000b91
