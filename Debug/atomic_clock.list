
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000848  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b740  08000ae0  08000ae0  00020ae0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0003020c  2**0
                  CONTENTS
  4 .rodata       00000774  0800c220  0800c220  0002c220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800c994  0800c994  0002c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800c99c  0800c99c  0002c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a0  0800c9a0  0002c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c9a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000020c  0800cbb0  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800cbb0  000304a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f734  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003154  00000000  00000000  0004f96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00052ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  000542e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a757  00000000  00000000  000559d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb16  00000000  00000000  00090127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c9ba  00000000  00000000  000acc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002295f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007734  00000000  00000000  00229648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);

}

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
  bc:	b580      	push	{r7, lr}
  be:	b082      	sub	sp, #8
  c0:	af00      	add	r7, sp, #0
  c2:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
  c4:	2201      	movs	r2, #1
  c6:	2180      	movs	r1, #128	; 0x80
  c8:	4822      	ldr	r0, [pc, #136]	; (154 <set_aom_atten+0x98>)
  ca:	f000 fbb1 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
  ce:	793b      	ldrb	r3, [r7, #4]
  d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
  d4:	b2db      	uxtb	r3, r3
  d6:	461a      	mov	r2, r3
  d8:	2140      	movs	r1, #64	; 0x40
  da:	481e      	ldr	r0, [pc, #120]	; (154 <set_aom_atten+0x98>)
  dc:	f000 fba8 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
  e0:	793b      	ldrb	r3, [r7, #4]
  e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
  e6:	b2db      	uxtb	r3, r3
  e8:	461a      	mov	r2, r3
  ea:	2120      	movs	r1, #32
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <set_aom_atten+0x98>)
  ee:	f000 fb9f 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
  f2:	793b      	ldrb	r3, [r7, #4]
  f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
  f8:	b2db      	uxtb	r3, r3
  fa:	461a      	mov	r2, r3
  fc:	2110      	movs	r1, #16
  fe:	4815      	ldr	r0, [pc, #84]	; (154 <set_aom_atten+0x98>)
 100:	f000 fb96 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 104:	793b      	ldrb	r3, [r7, #4]
 106:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 10a:	b2db      	uxtb	r3, r3
 10c:	461a      	mov	r2, r3
 10e:	2108      	movs	r1, #8
 110:	4810      	ldr	r0, [pc, #64]	; (154 <set_aom_atten+0x98>)
 112:	f000 fb8d 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 116:	793b      	ldrb	r3, [r7, #4]
 118:	f3c3 1300 	ubfx	r3, r3, #4, #1
 11c:	b2db      	uxtb	r3, r3
 11e:	461a      	mov	r2, r3
 120:	2104      	movs	r1, #4
 122:	480d      	ldr	r0, [pc, #52]	; (158 <set_aom_atten+0x9c>)
 124:	f000 fb84 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 128:	793b      	ldrb	r3, [r7, #4]
 12a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 12e:	b2db      	uxtb	r3, r3
 130:	461a      	mov	r2, r3
 132:	2110      	movs	r1, #16
 134:	4808      	ldr	r0, [pc, #32]	; (158 <set_aom_atten+0x9c>)
 136:	f000 fb7b 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 13a:	793b      	ldrb	r3, [r7, #4]
 13c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 140:	b2db      	uxtb	r3, r3
 142:	461a      	mov	r2, r3
 144:	2120      	movs	r1, #32
 146:	4804      	ldr	r0, [pc, #16]	; (158 <set_aom_atten+0x9c>)
 148:	f000 fb72 	bl	830 <__HAL_GPIO_WritePin_veneer>
}
 14c:	bf00      	nop
 14e:	3708      	adds	r7, #8
 150:	46bd      	mov	sp, r7
 152:	bd80      	pop	{r7, pc}
 154:	58020c00 	.word	0x58020c00
 158:	58021000 	.word	0x58021000

0000015c <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
 15c:	b580      	push	{r7, lr}
 15e:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 160:	f240 1103 	movw	r1, #259	; 0x103
 164:	4821      	ldr	r0, [pc, #132]	; (1ec <start_pop+0x90>)
 166:	f000 fb47 	bl	7f8 <__HAL_HRTIM_WaveformOutputStart_veneer>
 16a:	4603      	mov	r3, r0
 16c:	2b00      	cmp	r3, #0
 16e:	d004      	beq.n	17a <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
 170:	481f      	ldr	r0, [pc, #124]	; (1f0 <start_pop+0x94>)
 172:	f000 fb49 	bl	808 <__puts_veneer>
		Error_Handler();
 176:	f000 fb43 	bl	800 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 17a:	2302      	movs	r3, #2
 17c:	2202      	movs	r2, #2
 17e:	2100      	movs	r1, #0
 180:	481a      	ldr	r0, [pc, #104]	; (1ec <start_pop+0x90>)
 182:	f000 fb35 	bl	7f0 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 186:	4603      	mov	r3, r0
 188:	2b00      	cmp	r3, #0
 18a:	d004      	beq.n	196 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
 18c:	4819      	ldr	r0, [pc, #100]	; (1f4 <start_pop+0x98>)
 18e:	f000 fb3b 	bl	808 <__puts_veneer>
		Error_Handler();
 192:	f000 fb35 	bl	800 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
 196:	4b18      	ldr	r3, [pc, #96]	; (1f8 <start_pop+0x9c>)
 198:	681b      	ldr	r3, [r3, #0]
 19a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 19e:	4618      	mov	r0, r3
 1a0:	f7ff ff5e 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 1a4:	2301      	movs	r3, #1
 1a6:	2202      	movs	r2, #2
 1a8:	2100      	movs	r1, #0
 1aa:	4810      	ldr	r0, [pc, #64]	; (1ec <start_pop+0x90>)
 1ac:	f000 fb20 	bl	7f0 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 1b0:	4603      	mov	r3, r0
 1b2:	2b00      	cmp	r3, #0
 1b4:	d004      	beq.n	1c0 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 1b6:	4811      	ldr	r0, [pc, #68]	; (1fc <start_pop+0xa0>)
 1b8:	f000 fb26 	bl	808 <__puts_veneer>
		Error_Handler();
 1bc:	f000 fb20 	bl	800 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 1c0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 1c4:	4809      	ldr	r0, [pc, #36]	; (1ec <start_pop+0x90>)
 1c6:	f000 fb23 	bl	810 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 1ca:	4603      	mov	r3, r0
 1cc:	2b00      	cmp	r3, #0
 1ce:	d004      	beq.n	1da <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 1d0:	480b      	ldr	r0, [pc, #44]	; (200 <_Min_Heap_Size>)
 1d2:	f000 fb19 	bl	808 <__puts_veneer>
		Error_Handler();
 1d6:	f000 fb13 	bl	800 <__Error_Handler_veneer>
	}

	pop_running = true;
 1da:	4b0a      	ldr	r3, [pc, #40]	; (204 <_Min_Heap_Size+0x4>)
 1dc:	2201      	movs	r2, #1
 1de:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 1e0:	4809      	ldr	r0, [pc, #36]	; (208 <_Min_Heap_Size+0x8>)
 1e2:	f000 fb11 	bl	808 <__puts_veneer>

}
 1e6:	bf00      	nop
 1e8:	bd80      	pop	{r7, pc}
 1ea:	bf00      	nop
 1ec:	2000023c 	.word	0x2000023c
 1f0:	0800c220 	.word	0x0800c220
 1f4:	0800c238 	.word	0x0800c238
 1f8:	20000000 	.word	0x20000000
 1fc:	0800c250 	.word	0x0800c250
 200:	0800c268 	.word	0x0800c268
 204:	2000047c 	.word	0x2000047c
 208:	0800c280 	.word	0x0800c280

0000020c <stop_pop>:
static void stop_pop() {
 20c:	b580      	push	{r7, lr}
 20e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 210:	f240 1103 	movw	r1, #259	; 0x103
 214:	4813      	ldr	r0, [pc, #76]	; (264 <stop_pop+0x58>)
 216:	f000 fb0f 	bl	838 <__HAL_HRTIM_WaveformOutputStop_veneer>
 21a:	4603      	mov	r3, r0
 21c:	2b00      	cmp	r3, #0
 21e:	d004      	beq.n	22a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 220:	4811      	ldr	r0, [pc, #68]	; (268 <stop_pop+0x5c>)
 222:	f000 faf1 	bl	808 <__puts_veneer>
		Error_Handler();
 226:	f000 faeb 	bl	800 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 22a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 22e:	480d      	ldr	r0, [pc, #52]	; (264 <stop_pop+0x58>)
 230:	f000 fb06 	bl	840 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 234:	4603      	mov	r3, r0
 236:	2b00      	cmp	r3, #0
 238:	d004      	beq.n	244 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 23a:	480c      	ldr	r0, [pc, #48]	; (26c <stop_pop+0x60>)
 23c:	f000 fae4 	bl	808 <__puts_veneer>
		Error_Handler();
 240:	f000 fade 	bl	800 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 244:	4b0a      	ldr	r3, [pc, #40]	; (270 <stop_pop+0x64>)
 246:	2200      	movs	r2, #0
 248:	601a      	str	r2, [r3, #0]
	pop_running = false;
 24a:	4b0a      	ldr	r3, [pc, #40]	; (274 <stop_pop+0x68>)
 24c:	2200      	movs	r2, #0
 24e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 250:	2200      	movs	r2, #0
 252:	2102      	movs	r1, #2
 254:	4808      	ldr	r0, [pc, #32]	; (278 <stop_pop+0x6c>)
 256:	f000 faeb 	bl	830 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 25a:	4808      	ldr	r0, [pc, #32]	; (27c <stop_pop+0x70>)
 25c:	f000 fad4 	bl	808 <__puts_veneer>
}
 260:	bf00      	nop
 262:	bd80      	pop	{r7, pc}
 264:	2000023c 	.word	0x2000023c
 268:	0800c294 	.word	0x0800c294
 26c:	0800c2ac 	.word	0x0800c2ac
 270:	20000480 	.word	0x20000480
 274:	2000047c 	.word	0x2000047c
 278:	58021000 	.word	0x58021000
 27c:	0800c2c4 	.word	0x0800c2c4

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%08x \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fac1 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fabb 	bl	830 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 faa1 	bl	830 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fa9b 	bl	830 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fa95 	bl	830 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fa88 	bl	820 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fa77 	bl	830 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fa55 	bl	808 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fa4f 	bl	800 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800c43c 	.word	0x0800c43c

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <init_synthesiser>:

uint32_t init_synthesiser() {
 3a2:	b580      	push	{r7, lr}
 3a4:	b082      	sub	sp, #8
 3a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the lock LED
 3a8:	2200      	movs	r2, #0
 3aa:	2102      	movs	r1, #2
 3ac:	4850      	ldr	r0, [pc, #320]	; (4f0 <_Min_Stack_Size+0xf0>)
 3ae:	f000 fa3f 	bl	830 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 3b2:	2200      	movs	r2, #0
 3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 3b8:	484e      	ldr	r0, [pc, #312]	; (4f4 <_Min_Stack_Size+0xf4>)
 3ba:	f000 fa39 	bl	830 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 3be:	2201      	movs	r2, #1
 3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 3c4:	484b      	ldr	r0, [pc, #300]	; (4f4 <_Min_Stack_Size+0xf4>)
 3c6:	f000 fa33 	bl	830 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 3ca:	2201      	movs	r2, #1
 3cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 3d0:	4848      	ldr	r0, [pc, #288]	; (4f4 <_Min_Stack_Size+0xf4>)
 3d2:	f000 fa2d 	bl	830 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 3d6:	2064      	movs	r0, #100	; 0x64
 3d8:	f000 fa26 	bl	828 <__HAL_Delay_veneer>

	//synth_writereg(0x1UL << 5, 0x0, 0x0, false); // Soft reset.
	//synth_writereg(0x41BFFF, 0x08, 0x0, true); // Set the SDO output level to 3.3 Volts
	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 3dc:	2300      	movs	r3, #0
 3de:	2200      	movs	r2, #0
 3e0:	2100      	movs	r1, #0
 3e2:	2020      	movs	r0, #32
 3e4:	f7ff ff4c 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 3e8:	2301      	movs	r3, #1
 3ea:	2200      	movs	r2, #0
 3ec:	2108      	movs	r1, #8
 3ee:	4842      	ldr	r0, [pc, #264]	; (4f8 <_Min_Stack_Size+0xf8>)
 3f0:	f7ff ff46 	bl	280 <synth_writereg>

	//uint32_t read_data = synth_readreg(0x00); // Read the ID register to check the chip is communicating
	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 3f4:	2000      	movs	r0, #0
 3f6:	f7ff ffbd 	bl	374 <synth_readreg>
 3fa:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 3fc:	4a3f      	ldr	r2, [pc, #252]	; (4fc <_Min_Stack_Size+0xfc>)
 3fe:	687b      	ldr	r3, [r7, #4]
 400:	4293      	cmp	r3, r2
 402:	d00a      	beq.n	41a <_Min_Stack_Size+0x1a>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 404:	2200      	movs	r2, #0
 406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 40a:	483a      	ldr	r0, [pc, #232]	; (4f4 <_Min_Stack_Size+0xf4>)
 40c:	f000 fa10 	bl	830 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 410:	483b      	ldr	r0, [pc, #236]	; (500 <_Min_Stack_Size+0x100>)
 412:	f000 f9f9 	bl	808 <__puts_veneer>
		return ERROR;
 416:	2301      	movs	r3, #1
 418:	e065      	b.n	4e6 <_Min_Stack_Size+0xe6>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 41a:	483a      	ldr	r0, [pc, #232]	; (504 <_Min_Stack_Size+0x104>)
 41c:	f000 f9f4 	bl	808 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	//read_data = synth_readreg(0x17); // Get the current value of the modes register
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 420:	2017      	movs	r0, #23
 422:	f7ff ffa7 	bl	374 <synth_readreg>
 426:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 428:	687b      	ldr	r3, [r7, #4]
 42a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 42e:	607b      	str	r3, [r7, #4]
	//synth_writereg(read_data, 0x17, 0x0, true); // Send
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 430:	2301      	movs	r3, #1
 432:	2200      	movs	r2, #0
 434:	2117      	movs	r1, #23
 436:	6878      	ldr	r0, [r7, #4]
 438:	f7ff ff22 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED MODE REGISTER: 0x%8lu \r\n", read_data);
 43c:	6879      	ldr	r1, [r7, #4]
 43e:	4832      	ldr	r0, [pc, #200]	; (508 <_Min_Stack_Size+0x108>)
 440:	f000 f9ea 	bl	818 <__printf_veneer>
#endif

	/* Set auto mute */
	//read_data = synth_readreg(0x17);
	read_data = synth_readreg(MODES_REGISTER);
 444:	2017      	movs	r0, #23
 446:	f7ff ff95 	bl	374 <synth_readreg>
 44a:	6078      	str	r0, [r7, #4]
	//read_data  &= ~(0x1UL << 7); disables auto_mute
	read_data  &= ~(AUTO_MUTE << 7);
 44c:	2300      	movs	r3, #0
 44e:	01db      	lsls	r3, r3, #7
 450:	43db      	mvns	r3, r3
 452:	461a      	mov	r2, r3
 454:	687b      	ldr	r3, [r7, #4]
 456:	4013      	ands	r3, r2
 458:	607b      	str	r3, [r7, #4]
	//synth_writereg(read_data, 0x17, 0x0, true); // Send
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 45a:	2301      	movs	r3, #1
 45c:	2200      	movs	r2, #0
 45e:	2117      	movs	r1, #23
 460:	6878      	ldr	r0, [r7, #4]
 462:	f7ff ff0d 	bl	280 <synth_writereg>
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, 0x07, 0x0, true); // Update the VCO divide register.

	//synth_writereg(1, 0x02, 0x0, true); // Reference divider setting.
	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 466:	2301      	movs	r3, #1
 468:	2200      	movs	r2, #0
 46a:	2102      	movs	r1, #2
 46c:	2001      	movs	r0, #1
 46e:	f7ff ff07 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED DIVIDER REGISTER: 0x%8lu \r\n", read_data);
 472:	6879      	ldr	r1, [r7, #4]
 474:	4825      	ldr	r0, [pc, #148]	; (50c <_Min_Stack_Size+0x10c>)
 476:	f000 f9cf 	bl	818 <__printf_veneer>
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	//read_data = synth_readreg(0x16); // Get the current value - Simon's code, bug??
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value - Simon's code, bug??
 47a:	2016      	movs	r0, #22
 47c:	f7ff ff7a 	bl	374 <synth_readreg>
 480:	6078      	str	r0, [r7, #4]
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
#ifdef MW_VERBOSE
	printf("READ GAIN DIVIDER REGISTER: 0x%8lu \r\n", read_data);
 482:	6879      	ldr	r1, [r7, #4]
 484:	4822      	ldr	r0, [pc, #136]	; (510 <_Min_Stack_Size+0x110>)
 486:	f000 f9c7 	bl	818 <__printf_veneer>
	//printf("READ LOCK_DETECT_REGISTER: 0x%8lu \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 48a:	687b      	ldr	r3, [r7, #4]
 48c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 490:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 492:	687b      	ldr	r3, [r7, #4]
 494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 498:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 49a:	687b      	ldr	r3, [r7, #4]
 49c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 4a0:	607b      	str	r3, [r7, #4]
	//synth_writereg(read_data, 0x07, 0x0, true); // Send
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 4a2:	2301      	movs	r3, #1
 4a4:	2200      	movs	r2, #0
 4a6:	2107      	movs	r1, #7
 4a8:	6878      	ldr	r0, [r7, #4]
 4aa:	f7ff fee9 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%8lu \r\n", read_data);
 4ae:	6879      	ldr	r1, [r7, #4]
 4b0:	4818      	ldr	r0, [pc, #96]	; (514 <_Min_Stack_Size+0x114>)
 4b2:	f000 f9b1 	bl	818 <__printf_veneer>
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 4b6:	200a      	movs	r0, #10
 4b8:	f000 f9b6 	bl	828 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 4bc:	2016      	movs	r0, #22
 4be:	f7ff ff59 	bl	374 <synth_readreg>
 4c2:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 4c4:	687b      	ldr	r3, [r7, #4]
 4c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 4ca:	607b      	str	r3, [r7, #4]
	read_data |= (LO2GAIN << 8);	// Set LO2GAIN value.
 4cc:	2303      	movs	r3, #3
 4ce:	021b      	lsls	r3, r3, #8
 4d0:	461a      	mov	r2, r3
 4d2:	687b      	ldr	r3, [r7, #4]
 4d4:	4313      	orrs	r3, r2
 4d6:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 4d8:	2301      	movs	r3, #1
 4da:	2200      	movs	r2, #0
 4dc:	2116      	movs	r1, #22
 4de:	6878      	ldr	r0, [r7, #4]
 4e0:	f7ff fece 	bl	280 <synth_writereg>
	return SUCCESS;
 4e4:	2300      	movs	r3, #0

}
 4e6:	4618      	mov	r0, r3
 4e8:	3708      	adds	r7, #8
 4ea:	46bd      	mov	sp, r7
 4ec:	bd80      	pop	{r7, pc}
 4ee:	bf00      	nop
 4f0:	58021000 	.word	0x58021000
 4f4:	58020800 	.word	0x58020800
 4f8:	0041bfff 	.word	0x0041bfff
 4fc:	00c7701a 	.word	0x00c7701a
 500:	0800c454 	.word	0x0800c454
 504:	0800c470 	.word	0x0800c470
 508:	0800c484 	.word	0x0800c484
 50c:	0800c4a8 	.word	0x0800c4a8
 510:	0800c4d0 	.word	0x0800c4d0
 514:	0800c4f8 	.word	0x0800c4f8

00000518 <check_lock>:

static const bool check_lock(uint32_t timeout) {
 518:	b580      	push	{r7, lr}
 51a:	b084      	sub	sp, #16
 51c:	af00      	add	r7, sp, #0
 51e:	6078      	str	r0, [r7, #4]

	bool locked = false;
 520:	2300      	movs	r3, #0
 522:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 524:	4b16      	ldr	r3, [pc, #88]	; (580 <check_lock+0x68>)
 526:	681b      	ldr	r3, [r3, #0]
 528:	4618      	mov	r0, r3
 52a:	f7ff fd69 	bl	0 <start_timer>
 52e:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 530:	e014      	b.n	55c <check_lock+0x44>
		//printf("Debug lock while condition\r\n");
		//locked = synth_readreg(0x12) & (1UL << 1);
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 532:	2012      	movs	r0, #18
 534:	f7ff ff1e 	bl	374 <synth_readreg>
 538:	4603      	mov	r3, r0
 53a:	f003 0302 	and.w	r3, r3, #2
 53e:	2b00      	cmp	r3, #0
 540:	bf14      	ite	ne
 542:	2301      	movne	r3, #1
 544:	2300      	moveq	r3, #0
 546:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 548:	7bfb      	ldrb	r3, [r7, #15]
 54a:	2b00      	cmp	r3, #0
 54c:	d006      	beq.n	55c <check_lock+0x44>
			stop_timer(FAST_TIMER);
 54e:	4b0c      	ldr	r3, [pc, #48]	; (580 <check_lock+0x68>)
 550:	681b      	ldr	r3, [r3, #0]
 552:	4618      	mov	r0, r3
 554:	f7ff fd72 	bl	3c <stop_timer>
			return true;
 558:	2301      	movs	r3, #1
 55a:	e00d      	b.n	578 <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 55c:	4b08      	ldr	r3, [pc, #32]	; (580 <check_lock+0x68>)
 55e:	681b      	ldr	r3, [r3, #0]
 560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 562:	68bb      	ldr	r3, [r7, #8]
 564:	1ad3      	subs	r3, r2, r3
 566:	687a      	ldr	r2, [r7, #4]
 568:	429a      	cmp	r2, r3
 56a:	d8e2      	bhi.n	532 <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 56c:	4b04      	ldr	r3, [pc, #16]	; (580 <check_lock+0x68>)
 56e:	681b      	ldr	r3, [r3, #0]
 570:	4618      	mov	r0, r3
 572:	f7ff fd63 	bl	3c <stop_timer>
	return false;
 576:	2300      	movs	r3, #0
}
 578:	4618      	mov	r0, r3
 57a:	3710      	adds	r7, #16
 57c:	46bd      	mov	sp, r7
 57e:	bd80      	pop	{r7, pc}
 580:	20000004 	.word	0x20000004

00000584 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 584:	b580      	push	{r7, lr}
 586:	b086      	sub	sp, #24
 588:	af00      	add	r7, sp, #0
 58a:	60f8      	str	r0, [r7, #12]
 58c:	60b9      	str	r1, [r7, #8]
 58e:	607a      	str	r2, [r7, #4]
 590:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 592:	2300      	movs	r3, #0
 594:	617b      	str	r3, [r7, #20]

	if (mute) {
 596:	78fb      	ldrb	r3, [r7, #3]
 598:	2b00      	cmp	r3, #0
 59a:	d00d      	beq.n	5b8 <set_frequency+0x34>
		/* Mute the outputs */
		//read_data = synth_readreg(0x16); // Get the current value.
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 59c:	2016      	movs	r0, #22
 59e:	f7ff fee9 	bl	374 <synth_readreg>
 5a2:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 5a4:	697b      	ldr	r3, [r7, #20]
 5a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 5aa:	617b      	str	r3, [r7, #20]
		//synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 5ac:	2301      	movs	r3, #1
 5ae:	2200      	movs	r2, #0
 5b0:	2116      	movs	r1, #22
 5b2:	6978      	ldr	r0, [r7, #20]
 5b4:	f7ff fe64 	bl	280 <synth_writereg>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 5b8:	4b2e      	ldr	r3, [pc, #184]	; (674 <set_frequency+0xf0>)
 5ba:	681b      	ldr	r3, [r3, #0]
 5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 5c0:	d004      	beq.n	5cc <set_frequency+0x48>
 5c2:	4b2c      	ldr	r3, [pc, #176]	; (674 <set_frequency+0xf0>)
 5c4:	681b      	ldr	r3, [r3, #0]
 5c6:	68fa      	ldr	r2, [r7, #12]
 5c8:	429a      	cmp	r2, r3
 5ca:	d008      	beq.n	5de <set_frequency+0x5a>
		//synth_writereg(integer, 0x03, 0x0, true);   // Integer register.
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 5cc:	2301      	movs	r3, #1
 5ce:	2200      	movs	r2, #0
 5d0:	2103      	movs	r1, #3
 5d2:	68f8      	ldr	r0, [r7, #12]
 5d4:	f7ff fe54 	bl	280 <synth_writereg>
		last_integer = integer;
 5d8:	4a26      	ldr	r2, [pc, #152]	; (674 <set_frequency+0xf0>)
 5da:	68fb      	ldr	r3, [r7, #12]
 5dc:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 5de:	4b26      	ldr	r3, [pc, #152]	; (678 <set_frequency+0xf4>)
 5e0:	681b      	ldr	r3, [r3, #0]
 5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 5e6:	d004      	beq.n	5f2 <set_frequency+0x6e>
 5e8:	4b23      	ldr	r3, [pc, #140]	; (678 <set_frequency+0xf4>)
 5ea:	681b      	ldr	r3, [r3, #0]
 5ec:	68ba      	ldr	r2, [r7, #8]
 5ee:	429a      	cmp	r2, r3
 5f0:	d008      	beq.n	604 <set_frequency+0x80>
		//synth_writereg(fraction, 0x04, 0x0, true);  // Fractional register.
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 5f2:	2301      	movs	r3, #1
 5f4:	2200      	movs	r2, #0
 5f6:	2104      	movs	r1, #4
 5f8:	68b8      	ldr	r0, [r7, #8]
 5fa:	f7ff fe41 	bl	280 <synth_writereg>
		last_fraction = fraction;
 5fe:	4a1e      	ldr	r2, [pc, #120]	; (678 <set_frequency+0xf4>)
 600:	68bb      	ldr	r3, [r7, #8]
 602:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
 604:	4b1d      	ldr	r3, [pc, #116]	; (67c <set_frequency+0xf8>)
 606:	681b      	ldr	r3, [r3, #0]
 608:	f1b3 3fff 	cmp.w	r3, #4294967295
 60c:	d004      	beq.n	618 <set_frequency+0x94>
 60e:	4b1b      	ldr	r3, [pc, #108]	; (67c <set_frequency+0xf8>)
 610:	681b      	ldr	r3, [r3, #0]
 612:	687a      	ldr	r2, [r7, #4]
 614:	429a      	cmp	r2, r3
 616:	d014      	beq.n	642 <set_frequency+0xbe>
		//read_data = synth_readreg(0x16); // Get the current value.
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 618:	2016      	movs	r0, #22
 61a:	f7ff feab 	bl	374 <synth_readreg>
 61e:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 620:	697b      	ldr	r3, [r7, #20]
 622:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 626:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will un-mute the outputs */
 628:	697a      	ldr	r2, [r7, #20]
 62a:	687b      	ldr	r3, [r7, #4]
 62c:	4313      	orrs	r3, r2
 62e:	617b      	str	r3, [r7, #20]
		//synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 630:	2301      	movs	r3, #1
 632:	2200      	movs	r2, #0
 634:	2116      	movs	r1, #22
 636:	6978      	ldr	r0, [r7, #20]
 638:	f7ff fe22 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 63c:	4a0f      	ldr	r2, [pc, #60]	; (67c <set_frequency+0xf8>)
 63e:	687b      	ldr	r3, [r7, #4]
 640:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 642:	2396      	movs	r3, #150	; 0x96
 644:	4618      	mov	r0, r3
 646:	f7ff ff67 	bl	518 <check_lock>
 64a:	4603      	mov	r3, r0
 64c:	f083 0301 	eor.w	r3, r3, #1
 650:	b2db      	uxtb	r3, r3
 652:	2b00      	cmp	r3, #0
 654:	d009      	beq.n	66a <set_frequency+0xe6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 656:	2200      	movs	r2, #0
 658:	2102      	movs	r1, #2
 65a:	4809      	ldr	r0, [pc, #36]	; (680 <set_frequency+0xfc>)
 65c:	f000 f8e8 	bl	830 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed within set_frequency!\r\n");
 660:	4808      	ldr	r0, [pc, #32]	; (684 <set_frequency+0x100>)
 662:	f000 f8d1 	bl	808 <__puts_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 666:	f000 f8cb 	bl	800 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
	}

}
 66a:	bf00      	nop
 66c:	3718      	adds	r7, #24
 66e:	46bd      	mov	sp, r7
 670:	bd80      	pop	{r7, pc}
 672:	bf00      	nop
 674:	20000008 	.word	0x20000008
 678:	2000000c 	.word	0x2000000c
 67c:	20000010 	.word	0x20000010
 680:	58021000 	.word	0x58021000
 684:	0800c524 	.word	0x0800c524

00000688 <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 688:	b580      	push	{r7, lr}
 68a:	b088      	sub	sp, #32
 68c:	af00      	add	r7, sp, #0
 68e:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 692:	ed9f 5b29 	vldr	d5, [pc, #164]	; 738 <set_frequency_hz+0xb0>
 696:	ed97 6b00 	vldr	d6, [r7]
 69a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 69e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6a2:	ee17 3a90 	vmov	r3, s15
 6a6:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 6a8:	69fb      	ldr	r3, [r7, #28]
 6aa:	2b01      	cmp	r3, #1
 6ac:	d00b      	beq.n	6c6 <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 6ae:	e002      	b.n	6b6 <set_frequency_hz+0x2e>
			k = k - 1;
 6b0:	69fb      	ldr	r3, [r7, #28]
 6b2:	3b01      	subs	r3, #1
 6b4:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 6b6:	69fb      	ldr	r3, [r7, #28]
 6b8:	2b3e      	cmp	r3, #62	; 0x3e
 6ba:	d8f9      	bhi.n	6b0 <set_frequency_hz+0x28>
 6bc:	69fb      	ldr	r3, [r7, #28]
 6be:	f003 0301 	and.w	r3, r3, #1
 6c2:	2b00      	cmp	r3, #0
 6c4:	d1f4      	bne.n	6b0 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 6c6:	69fb      	ldr	r3, [r7, #28]
 6c8:	ee07 3a90 	vmov	s15, r3
 6cc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 6d0:	ed97 7b00 	vldr	d7, [r7]
 6d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 6d8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 740 <set_frequency_hz+0xb8>
 6dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 6e0:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 6e4:	ed97 7b04 	vldr	d7, [r7, #16]
 6e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6ec:	ee17 3a90 	vmov	r3, s15
 6f0:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 6f2:	68fb      	ldr	r3, [r7, #12]
 6f4:	ee07 3a90 	vmov	s15, r3
 6f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 6fc:	ed97 6b04 	vldr	d6, [r7, #16]
 700:	ee36 7b47 	vsub.f64	d7, d6, d7
 704:	ed9f 6b10 	vldr	d6, [pc, #64]	; 748 <set_frequency_hz+0xc0>
 708:	ee27 7b06 	vmul.f64	d7, d7, d6
 70c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 710:	ee37 7b06 	vadd.f64	d7, d7, d6
 714:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 718:	ee17 3a90 	vmov	r3, s15
 71c:	60bb      	str	r3, [r7, #8]
		Error_Handler();
	}
#endif

	//set_frequency(NINT, NFRAC, k, false);
	set_frequency(NINT, NFRAC, k, AUTO_MUTE);
 71e:	2300      	movs	r3, #0
 720:	69fa      	ldr	r2, [r7, #28]
 722:	68b9      	ldr	r1, [r7, #8]
 724:	68f8      	ldr	r0, [r7, #12]
 726:	f7ff ff2d 	bl	584 <set_frequency>

}
 72a:	bf00      	nop
 72c:	3720      	adds	r7, #32
 72e:	46bd      	mov	sp, r7
 730:	bd80      	pop	{r7, pc}
 732:	bf00      	nop
 734:	f3af 8000 	nop.w
 738:	20000000 	.word	0x20000000
 73c:	41ee8c21 	.word	0x41ee8c21
 740:	00000000 	.word	0x00000000
 744:	4187d784 	.word	0x4187d784
 748:	00000000 	.word	0x00000000
 74c:	41700000 	.word	0x41700000

00000750 <run_sweep>:

void run_sweep() {
 750:	b580      	push	{r7, lr}
 752:	b084      	sub	sp, #16
 754:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 756:	2201      	movs	r2, #1
 758:	2102      	movs	r1, #2
 75a:	481f      	ldr	r0, [pc, #124]	; (7d8 <run_sweep+0x88>)
 75c:	f000 f868 	bl	830 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 760:	b672      	cpsid	i
}
 762:	bf00      	nop
	double dac_val = 0;
#endif

	__disable_irq();

	for (uint32_t i = 0; i < num_points; i++) {
 764:	2300      	movs	r3, #0
 766:	60fb      	str	r3, [r7, #12]
 768:	e01e      	b.n	7a8 <run_sweep+0x58>

		double fo = start_freq + (i * sweep_settings.step_size);
 76a:	68fb      	ldr	r3, [r7, #12]
 76c:	ee07 3a90 	vmov	s15, r3
 770:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 774:	ed9f 6b16 	vldr	d6, [pc, #88]	; 7d0 <run_sweep+0x80>
 778:	ee27 6b06 	vmul.f64	d6, d7, d6
 77c:	4b17      	ldr	r3, [pc, #92]	; (7dc <run_sweep+0x8c>)
 77e:	ed93 7b00 	vldr	d7, [r3]
 782:	ee36 7b07 	vadd.f64	d7, d6, d7
 786:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 78a:	ed97 0b00 	vldr	d0, [r7]
 78e:	f7ff ff7b 	bl	688 <set_frequency_hz>
			printf("DAC setup failed!\r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 792:	4b13      	ldr	r3, [pc, #76]	; (7e0 <run_sweep+0x90>)
 794:	681b      	ldr	r3, [r3, #0]
 796:	f241 1208 	movw	r2, #4360	; 0x1108
 79a:	4611      	mov	r1, r2
 79c:	4618      	mov	r0, r3
 79e:	f7ff fc5f 	bl	60 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 7a2:	68fb      	ldr	r3, [r7, #12]
 7a4:	3301      	adds	r3, #1
 7a6:	60fb      	str	r3, [r7, #12]
 7a8:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <run_sweep+0x94>)
 7aa:	681b      	ldr	r3, [r3, #0]
 7ac:	68fa      	ldr	r2, [r7, #12]
 7ae:	429a      	cmp	r2, r3
 7b0:	d3db      	bcc.n	76a <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 7b2:	b662      	cpsie	i
}
 7b4:	bf00      	nop

	}

	__enable_irq();

	printf("Total Points: %lu\r\n", num_points);
 7b6:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <run_sweep+0x94>)
 7b8:	681b      	ldr	r3, [r3, #0]
 7ba:	4619      	mov	r1, r3
 7bc:	480a      	ldr	r0, [pc, #40]	; (7e8 <run_sweep+0x98>)
 7be:	f000 f82b 	bl	818 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 7c2:	bf00      	nop
 7c4:	3710      	adds	r7, #16
 7c6:	46bd      	mov	sp, r7
 7c8:	bd80      	pop	{r7, pc}
 7ca:	bf00      	nop
 7cc:	f3af 8000 	nop.w
 7d0:	00000000 	.word	0x00000000
 7d4:	4017d784 	.word	0x4017d784
 7d8:	58021000 	.word	0x58021000
 7dc:	0800c578 	.word	0x0800c578
 7e0:	20000004 	.word	0x20000004
 7e4:	0800c580 	.word	0x0800c580
 7e8:	0800c548 	.word	0x0800c548
 7ec:	00000000 	.word	0x00000000

000007f0 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 7f0:	f85f f000 	ldr.w	pc, [pc]	; 7f4 <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 7f4:	080035d1 	.word	0x080035d1

000007f8 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 7f8:	f85f f000 	ldr.w	pc, [pc]	; 7fc <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 7fc:	080037bd 	.word	0x080037bd

00000800 <__Error_Handler_veneer>:
 800:	f85f f000 	ldr.w	pc, [pc]	; 804 <__Error_Handler_veneer+0x4>
 804:	08001d09 	.word	0x08001d09

00000808 <__puts_veneer>:
 808:	f85f f000 	ldr.w	pc, [pc]	; 80c <__puts_veneer+0x4>
 80c:	0800a189 	.word	0x0800a189

00000810 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 810:	f85f f000 	ldr.w	pc, [pc]	; 814 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 814:	08003871 	.word	0x08003871

00000818 <__printf_veneer>:
 818:	f85f f000 	ldr.w	pc, [pc]	; 81c <__printf_veneer+0x4>
 81c:	0800a07d 	.word	0x0800a07d

00000820 <__HAL_GPIO_ReadPin_veneer>:
 820:	f85f f000 	ldr.w	pc, [pc]	; 824 <__HAL_GPIO_ReadPin_veneer+0x4>
 824:	08002ef1 	.word	0x08002ef1

00000828 <__HAL_Delay_veneer>:
 828:	f85f f000 	ldr.w	pc, [pc]	; 82c <__HAL_Delay_veneer+0x4>
 82c:	08002611 	.word	0x08002611

00000830 <__HAL_GPIO_WritePin_veneer>:
 830:	f85f f000 	ldr.w	pc, [pc]	; 834 <__HAL_GPIO_WritePin_veneer+0x4>
 834:	08002f21 	.word	0x08002f21

00000838 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 838:	f85f f000 	ldr.w	pc, [pc]	; 83c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 83c:	08003817 	.word	0x08003817

00000840 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 840:	f85f f000 	ldr.w	pc, [pc]	; 844 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 844:	08003951 	.word	0x08003951

Disassembly of section .text:

08000ae0 <__do_global_dtors_aux>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4c05      	ldr	r4, [pc, #20]	; (8000af8 <__do_global_dtors_aux+0x18>)
 8000ae4:	7823      	ldrb	r3, [r4, #0]
 8000ae6:	b933      	cbnz	r3, 8000af6 <__do_global_dtors_aux+0x16>
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__do_global_dtors_aux+0x1c>)
 8000aea:	b113      	cbz	r3, 8000af2 <__do_global_dtors_aux+0x12>
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <__do_global_dtors_aux+0x20>)
 8000aee:	f3af 8000 	nop.w
 8000af2:	2301      	movs	r3, #1
 8000af4:	7023      	strb	r3, [r4, #0]
 8000af6:	bd10      	pop	{r4, pc}
 8000af8:	2000020c 	.word	0x2000020c
 8000afc:	00000000 	.word	0x00000000
 8000b00:	0800c1d0 	.word	0x0800c1d0

08000b04 <frame_dummy>:
 8000b04:	b508      	push	{r3, lr}
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <frame_dummy+0x10>)
 8000b08:	b11b      	cbz	r3, 8000b12 <frame_dummy+0xe>
 8000b0a:	4903      	ldr	r1, [pc, #12]	; (8000b18 <frame_dummy+0x14>)
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <frame_dummy+0x18>)
 8000b0e:	f3af 8000 	nop.w
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	00000000 	.word	0x00000000
 8000b18:	20000210 	.word	0x20000210
 8000b1c:	0800c1d0 	.word	0x0800c1d0

08000b20 <strlen>:
 8000b20:	4603      	mov	r3, r0
 8000b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d1fb      	bne.n	8000b22 <strlen+0x2>
 8000b2a:	1a18      	subs	r0, r3, r0
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <memchr>:
 8000b30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b34:	2a10      	cmp	r2, #16
 8000b36:	db2b      	blt.n	8000b90 <memchr+0x60>
 8000b38:	f010 0f07 	tst.w	r0, #7
 8000b3c:	d008      	beq.n	8000b50 <memchr+0x20>
 8000b3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b42:	3a01      	subs	r2, #1
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d02d      	beq.n	8000ba4 <memchr+0x74>
 8000b48:	f010 0f07 	tst.w	r0, #7
 8000b4c:	b342      	cbz	r2, 8000ba0 <memchr+0x70>
 8000b4e:	d1f6      	bne.n	8000b3e <memchr+0xe>
 8000b50:	b4f0      	push	{r4, r5, r6, r7}
 8000b52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000b56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000b5a:	f022 0407 	bic.w	r4, r2, #7
 8000b5e:	f07f 0700 	mvns.w	r7, #0
 8000b62:	2300      	movs	r3, #0
 8000b64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000b68:	3c08      	subs	r4, #8
 8000b6a:	ea85 0501 	eor.w	r5, r5, r1
 8000b6e:	ea86 0601 	eor.w	r6, r6, r1
 8000b72:	fa85 f547 	uadd8	r5, r5, r7
 8000b76:	faa3 f587 	sel	r5, r3, r7
 8000b7a:	fa86 f647 	uadd8	r6, r6, r7
 8000b7e:	faa5 f687 	sel	r6, r5, r7
 8000b82:	b98e      	cbnz	r6, 8000ba8 <memchr+0x78>
 8000b84:	d1ee      	bne.n	8000b64 <memchr+0x34>
 8000b86:	bcf0      	pop	{r4, r5, r6, r7}
 8000b88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b8c:	f002 0207 	and.w	r2, r2, #7
 8000b90:	b132      	cbz	r2, 8000ba0 <memchr+0x70>
 8000b92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b96:	3a01      	subs	r2, #1
 8000b98:	ea83 0301 	eor.w	r3, r3, r1
 8000b9c:	b113      	cbz	r3, 8000ba4 <memchr+0x74>
 8000b9e:	d1f8      	bne.n	8000b92 <memchr+0x62>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	bf06      	itte	eq
 8000bac:	4635      	moveq	r5, r6
 8000bae:	3803      	subeq	r0, #3
 8000bb0:	3807      	subne	r0, #7
 8000bb2:	f015 0f01 	tst.w	r5, #1
 8000bb6:	d107      	bne.n	8000bc8 <memchr+0x98>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000bbe:	bf02      	ittt	eq
 8000bc0:	3001      	addeq	r0, #1
 8000bc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000bc6:	3001      	addeq	r0, #1
 8000bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bca:	3801      	subs	r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f007 fb33 	bl	8008550 <HAL_UART_Transmit>
	return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200003e8 	.word	0x200003e8

08000ef8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]

#ifdef RAMP_DAC
	static bool dac_enabled = false;
#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000f02:	f000 fa35 	bl	8001370 <SystemClock_Config>
	HAL_ResumeTick();
 8000f06:	f001 fbb7 	bl	8002678 <HAL_ResumeTick>
		dac_enabled = true;
	}
#endif

#ifdef SYNTH_ENABLE
	if (!synth_init) {
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00c      	beq.n	8000f32 <HAL_GPIO_EXTI_Callback+0x3a>
		if (init_synthesiser() != SUCCESS) {
 8000f18:	f00b f97a 	bl	800c210 <__init_synthesiser_veneer>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <HAL_GPIO_EXTI_Callback+0x34>
			printf("Synthesiser initialisation failed!\r\n");
 8000f22:	483d      	ldr	r0, [pc, #244]	; (8001018 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f24:	f009 f930 	bl	800a188 <puts>
			Error_Handler();
 8000f28:	f000 feee 	bl	8001d08 <Error_Handler>
		}
		synth_init = true;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
	}
#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f38:	d169      	bne.n	800100e <HAL_GPIO_EXTI_Callback+0x116>
		printf("Blue button pressed....\r\n");
 8000f3a:	4838      	ldr	r0, [pc, #224]	; (800101c <HAL_GPIO_EXTI_Callback+0x124>)
 8000f3c:	f009 f924 	bl	800a188 <puts>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8000f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f44:	f001 fb64 	bl	8002610 <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4834      	ldr	r0, [pc, #208]	; (8001020 <HAL_GPIO_EXTI_Callback+0x128>)
 8000f4e:	f001 ffcf 	bl	8002ef0 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00a      	beq.n	8000f6e <HAL_GPIO_EXTI_Callback+0x76>
			printf("Long press\r\n");
 8000f58:	4832      	ldr	r0, [pc, #200]	; (8001024 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f5a:	f009 f915 	bl	800a188 <puts>
			if (pop_running) {
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d151      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x114>
				return;
			}

			start_pop();
 8000f68:	f00b f94e 	bl	800c208 <__start_pop_veneer>
 8000f6c:	e04f      	b.n	800100e <HAL_GPIO_EXTI_Callback+0x116>

		} else {
			printf("Short press\r\n");
 8000f6e:	482f      	ldr	r0, [pc, #188]	; (800102c <HAL_GPIO_EXTI_Callback+0x134>)
 8000f70:	f009 f90a 	bl	800a188 <puts>
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <HAL_GPIO_EXTI_Callback+0x8c>
				stop_pop();
 8000f7e:	f00b f94b 	bl	800c218 <__stop_pop_veneer>
 8000f82:	e044      	b.n	800100e <HAL_GPIO_EXTI_Callback+0x116>
				return;
			}

			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8000f88:	7b38      	ldrb	r0, [r7, #12]
 8000f8a:	f00b f939 	bl	800c200 <__set_aom_atten_veneer>

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 8000f8e:	f240 1103 	movw	r1, #259	; 0x103
 8000f92:	4827      	ldr	r0, [pc, #156]	; (8001030 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f94:	f002 fc12 	bl	80037bc <HAL_HRTIM_WaveformOutputStart>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <HAL_GPIO_EXTI_Callback+0xb0>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				printf("Failure point H!\r\n");
 8000f9e:	4825      	ldr	r0, [pc, #148]	; (8001034 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000fa0:	f009 f8f2 	bl	800a188 <puts>
				Error_Handler();
 8000fa4:	f000 feb0 	bl	8001d08 <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8000fa8:	2302      	movs	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	2100      	movs	r1, #0
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fb0:	f002 fb0e 	bl	80035d0 <HAL_HRTIM_WaveformSetOutputLevel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_GPIO_EXTI_Callback+0xcc>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				printf("Failure point I!\r\n");
 8000fba:	481f      	ldr	r0, [pc, #124]	; (8001038 <HAL_GPIO_EXTI_Callback+0x140>)
 8000fbc:	f009 f8e4 	bl	800a188 <puts>
				Error_Handler();
 8000fc0:	f000 fea2 	bl	8001d08 <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fce:	f002 faff 	bl	80035d0 <HAL_HRTIM_WaveformSetOutputLevel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <HAL_GPIO_EXTI_Callback+0xea>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				printf("Failure point J!\r\n");
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <HAL_GPIO_EXTI_Callback+0x144>)
 8000fda:	f009 f8d5 	bl	800a188 <puts>
				Error_Handler();
 8000fde:	f000 fe93 	bl	8001d08 <Error_Handler>
			};

			/* Run the frequency sweep */
			while (1) {
				printf("Sweep running.\r\n");
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <HAL_GPIO_EXTI_Callback+0x148>)
 8000fe4:	f009 f8d0 	bl	800a188 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000ff0:	f001 ff96 	bl	8002f20 <HAL_GPIO_WritePin>
				run_sweep();
 8000ff4:	f00b f8f8 	bl	800c1e8 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001000:	f001 ff8e 	bl	8002f20 <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <HAL_GPIO_EXTI_Callback+0x150>)
 8001006:	f009 f8bf 	bl	800a188 <puts>
				printf("Sweep running.\r\n");
 800100a:	e7ea      	b.n	8000fe2 <HAL_GPIO_EXTI_Callback+0xea>
				return;
 800100c:	bf00      	nop
			}
		}

	}
}
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000484 	.word	0x20000484
 8001018:	0800c2d8 	.word	0x0800c2d8
 800101c:	0800c2fc 	.word	0x0800c2fc
 8001020:	58020800 	.word	0x58020800
 8001024:	0800c318 	.word	0x0800c318
 8001028:	2000047c 	.word	0x2000047c
 800102c:	0800c324 	.word	0x0800c324
 8001030:	2000023c 	.word	0x2000023c
 8001034:	0800c334 	.word	0x0800c334
 8001038:	0800c348 	.word	0x0800c348
 800103c:	0800c35c 	.word	0x0800c35c
 8001040:	0800c370 	.word	0x0800c370
 8001044:	58020400 	.word	0x58020400
 8001048:	0800c380 	.word	0x0800c380

0800104c <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001054:	2101      	movs	r1, #1
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001058:	f001 ff7b 	bl	8002f52 <HAL_GPIO_TogglePin>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58020400 	.word	0x58020400

08001068 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d11e      	bne.n	80010b6 <HAL_HRTIM_Compare2EventCallback+0x4e>
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	f36f 0300 	bfc	r3, #0, #1
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	f36f 0341 	bfc	r3, #1, #1
 8001086:	733b      	strb	r3, [r7, #12]
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	f36f 0382 	bfc	r3, #2, #1
 800108e:	733b      	strb	r3, [r7, #12]
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	f36f 03c3 	bfc	r3, #3, #1
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	f36f 1304 	bfc	r3, #4, #1
 800109e:	733b      	strb	r3, [r7, #12]
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	733b      	strb	r3, [r7, #12]
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	f36f 1386 	bfc	r3, #6, #1
 80010ae:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 80010b0:	7b38      	ldrb	r0, [r7, #12]
 80010b2:	f00b f8a5 	bl	800c200 <__set_aom_atten_veneer>
	}

}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d175      	bne.n	80011bc <HAL_HRTIM_Compare3EventCallback+0xfc>

		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 80010d0:	2300      	movs	r3, #0
 80010d2:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 80010d4:	7a38      	ldrb	r0, [r7, #8]
 80010d6:	f00b f893 	bl	800c200 <__set_aom_atten_veneer>

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010dc:	ed93 5b00 	vldr	d5, [r3]
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010e2:	ed93 6b04 	vldr	d6, [r3, #16]
 80010e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80010f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010fc:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001102:	ed93 5b02 	vldr	d5, [r3, #8]
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001108:	ed93 6b04 	vldr	d6, [r3, #16]
 800110c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001110:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001114:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001118:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800111c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001122:	ed93 7b04 	vldr	d7, [r3, #16]
 8001126:	ee26 7b07 	vmul.f64	d7, d6, d7
 800112a:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800112e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001132:	ed97 7b06 	vldr	d7, [r7, #24]
 8001136:	ee36 5b47 	vsub.f64	d5, d6, d7
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800113c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001140:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001144:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001148:	ee37 7b06 	vadd.f64	d7, d7, d6
 800114c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d106      	bne.n	800116e <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 8001160:	f00b f85a 	bl	800c218 <__stop_pop_veneer>
			i = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
			start_pop();
 800116a:	f00b f84d 	bl	800c208 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800117c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001180:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001184:	ed97 7b06 	vldr	d7, [r7, #24]
 8001188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800118c:	eeb0 0b47 	vmov.f64	d0, d7
 8001190:	f00b f82e 	bl	800c1f0 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800119c:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80011a6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011a8:	2102      	movs	r1, #2
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_HRTIM_Compare3EventCallback+0x110>)
 80011ac:	f001 fed1 	bl	8002f52 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_HRTIM_Compare3EventCallback+0x10c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <HAL_HRTIM_Compare3EventCallback+0x114>)
 80011b8:	f008 ff60 	bl	800a07c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	0800c560 	.word	0x0800c560
 80011c8:	20000488 	.word	0x20000488
 80011cc:	20000480 	.word	0x20000480
 80011d0:	58021000 	.word	0x58021000
 80011d4:	0800c394 	.word	0x0800c394

080011d8 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <main+0x158>)
 80011f8:	4b54      	ldr	r3, [pc, #336]	; (800134c <main+0x15c>)
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4954      	ldr	r1, [pc, #336]	; (8001350 <main+0x160>)
 8001200:	4852      	ldr	r0, [pc, #328]	; (800134c <main+0x15c>)
 8001202:	f008 fae3 	bl	80097cc <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <main+0x164>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11b      	bne.n	800124a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001212:	f3bf 8f4f 	dsb	sy
}
 8001216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001218:	f3bf 8f6f 	isb	sy
}
 800121c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <main+0x164>)
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
}
 800122a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122c:	f3bf 8f6f 	isb	sy
}
 8001230:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001232:	4b48      	ldr	r3, [pc, #288]	; (8001354 <main+0x164>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a47      	ldr	r2, [pc, #284]	; (8001354 <main+0x164>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	e000      	b.n	800124c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800124a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <main+0x164>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d138      	bne.n	80012ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <main+0x164>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <main+0x164>)
 8001268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0b5b      	lsrs	r3, r3, #13
 8001272:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001276:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001280:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800128a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	4930      	ldr	r1, [pc, #192]	; (8001354 <main+0x164>)
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <main+0x92>
    } while(sets-- != 0U);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e5      	bne.n	8001278 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ac:	f3bf 8f4f 	dsb	sy
}
 80012b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <main+0x164>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <main+0x164>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
}
 80012c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c4:	f3bf 8f6f 	isb	sy
}
 80012c8:	e000      	b.n	80012cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 f90e 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f84e 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fbac 	bl	8001a30 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80012d8:	f000 fa8c 	bl	80017f4 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80012dc:	f000 f906 	bl	80014ec <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80012e0:	f000 fb58 	bl	8001994 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012e4:	f000 fb08 	bl	80018f8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012e8:	f000 fab2 	bl	8001850 <MX_TIM1_Init>
  MX_HRTIM_Init();
 80012ec:	f000 f930 	bl	8001550 <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <main+0x168>)
 80012f2:	f008 fec3 	bl	800a07c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80012f6:	4919      	ldr	r1, [pc, #100]	; (800135c <main+0x16c>)
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <main+0x170>)
 80012fa:	f008 febf 	bl	800a07c <iprintf>

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <main+0x174>)
 8001304:	f003 fb2a 	bl	800495c <HAL_LPTIM_Counter_Start_IT>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <main+0x128>
		printf("Failed to start slow fashing LED!\r\n");
 800130e:	4816      	ldr	r0, [pc, #88]	; (8001368 <main+0x178>)
 8001310:	f008 ff3a 	bl	800a188 <puts>
		Error_Handler();
 8001314:	f000 fcf8 	bl	8001d08 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <main+0x17c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <main+0x14a>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 8001328:	f001 f996 	bl	8002658 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 800132c:	f003 ff06 	bl	800513c <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001330:	2101      	movs	r1, #1
 8001332:	2001      	movs	r0, #1
 8001334:	f003 fe8c 	bl	8005050 <HAL_PWR_EnterSTOPMode>
 8001338:	e7ee      	b.n	8001318 <main+0x128>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 800133a:	f001 f98d 	bl	8002658 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 800133e:	2101      	movs	r1, #1
 8001340:	2000      	movs	r0, #0
 8001342:	f003 fe6b 	bl	800501c <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 8001346:	e7e7      	b.n	8001318 <main+0x128>
 8001348:	00000848 	.word	0x00000848
 800134c:	00000000 	.word	0x00000000
 8001350:	08000298 	.word	0x08000298
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	0800c3ac 	.word	0x0800c3ac
 800135c:	0800c3b0 	.word	0x0800c3b0
 8001360:	0800c3cc 	.word	0x0800c3cc
 8001364:	20000318 	.word	0x20000318
 8001368:	0800c3f8 	.word	0x0800c3f8
 800136c:	2000047c 	.word	0x2000047c

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0a4      	sub	sp, #144	; 0x90
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800137a:	224c      	movs	r2, #76	; 0x4c
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fa32 	bl	80097e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f008 fa2b 	bl	80097e8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f003 fe8f 	bl	80050c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <SystemClock_Config+0x170>)
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	4a4b      	ldr	r2, [pc, #300]	; (80014e0 <SystemClock_Config+0x170>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <SystemClock_Config+0x170>)
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <SystemClock_Config+0x174>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <SystemClock_Config+0x174>)
 80013ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <SystemClock_Config+0x174>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013dc:	bf00      	nop
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <SystemClock_Config+0x174>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ea:	d1f8      	bne.n	80013de <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ec:	f003 fe06 	bl	8004ffc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013f0:	f001 f952 	bl	8002698 <HAL_GetREVID>
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <SystemClock_Config+0x178>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <SystemClock_Config+0x178>)
 80013fa:	f023 0318 	bic.w	r3, r3, #24
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001400:	2325      	movs	r3, #37	; 0x25
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001404:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800140a:	2301      	movs	r3, #1
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800140e:	2301      	movs	r3, #1
 8001410:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 800141e:	2360      	movs	r3, #96	; 0x60
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001426:	2304      	movs	r3, #4
 8001428:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001430:	230c      	movs	r3, #12
 8001432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fe88 	bl	800515c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001452:	f000 fc59 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	233f      	movs	r3, #63	; 0x3f
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001462:	2309      	movs	r3, #9
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800146e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fac6 	bl	8005a10 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800148a:	f000 fc3d 	bl	8001d08 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800148e:	f004 fc75 	bl	8005d7c <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <SystemClock_Config+0x178>)
 8001494:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <SystemClock_Config+0x178>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <SystemClock_Config+0x178>)
 80014a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80014b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80014be:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80014c2:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80014c4:	2322      	movs	r3, #34	; 0x22
 80014c6:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80014c8:	2320      	movs	r3, #32
 80014ca:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 fb1d 	bl	8007b10 <HAL_RCCEx_CRSConfig>
}
 80014d6:	bf00      	nop
 80014d8:	3790      	adds	r7, #144	; 0x90
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	58000400 	.word	0x58000400
 80014e4:	58024800 	.word	0x58024800
 80014e8:	58024400 	.word	0x58024400

080014ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2224      	movs	r2, #36	; 0x24
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f008 f975 	bl	80097e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_DAC1_Init+0x5c>)
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_DAC1_Init+0x60>)
 8001502:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001504:	4810      	ldr	r0, [pc, #64]	; (8001548 <MX_DAC1_Init+0x5c>)
 8001506:	f001 f9e2 	bl	80028ce <HAL_DAC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001510:	f000 fbfa 	bl	8001d08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_DAC1_Init+0x5c>)
 8001530:	f001 f9f0 	bl	8002914 <HAL_DAC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fbe5 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000228 	.word	0x20000228
 800154c:	40007400 	.word	0x40007400

08001550 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a4      	sub	sp, #144	; 0x90
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001556:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001568:	2254      	movs	r2, #84	; 0x54
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f008 f93b 	bl	80097e8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2220      	movs	r2, #32
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f008 f92f 	bl	80097e8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 800158a:	4b98      	ldr	r3, [pc, #608]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800158c:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <MX_HRTIM_Init+0x2a0>)
 800158e:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001590:	4b96      	ldr	r3, [pc, #600]	; (80017ec <MX_HRTIM_Init+0x29c>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001596:	4b95      	ldr	r3, [pc, #596]	; (80017ec <MX_HRTIM_Init+0x29c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800159c:	4893      	ldr	r0, [pc, #588]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800159e:	f001 fd0d 	bl	8002fbc <HAL_HRTIM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80015a8:	f000 fbae 	bl	8001d08 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80015ac:	f24c 2318 	movw	r3, #49688	; 0xc218
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80015c0:	2308      	movs	r3, #8
 80015c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80015c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ca:	461a      	mov	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	4887      	ldr	r0, [pc, #540]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80015d0:	f001 fdc4 	bl	800315c <HAL_HRTIM_TimeBaseConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80015da:	f000 fb95 	bl	8001d08 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80015de:	2314      	movs	r3, #20
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80015e6:	2300      	movs	r3, #0
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80015f2:	2300      	movs	r3, #0
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80015f6:	2300      	movs	r3, #0
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80015fa:	2300      	movs	r3, #0
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001602:	2300      	movs	r3, #0
 8001604:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001606:	2300      	movs	r3, #0
 8001608:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800160a:	2300      	movs	r3, #0
 800160c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800160e:	2300      	movs	r3, #0
 8001610:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001612:	2300      	movs	r3, #0
 8001614:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800161a:	2300      	movs	r3, #0
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800161e:	2300      	movs	r3, #0
 8001620:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001622:	2300      	movs	r3, #0
 8001624:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800162e:	2300      	movs	r3, #0
 8001630:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001636:	461a      	mov	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	486c      	ldr	r0, [pc, #432]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800163c:	f001 fdb6 	bl	80031ac <HAL_HRTIM_WaveformTimerConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001646:	f000 fb5f 	bl	8001d08 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800164a:	2306      	movs	r3, #6
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800164e:	2300      	movs	r3, #0
 8001650:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001656:	461a      	mov	r2, r3
 8001658:	2104      	movs	r1, #4
 800165a:	4864      	ldr	r0, [pc, #400]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800165c:	f001 fda6 	bl	80031ac <HAL_HRTIM_WaveformTimerConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001666:	f000 fb4f 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800166a:	f240 631b 	movw	r3, #1563	; 0x61b
 800166e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2201      	movs	r2, #1
 8001676:	2100      	movs	r1, #0
 8001678:	485c      	ldr	r0, [pc, #368]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800167a:	f001 fe09 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001684:	f000 fb40 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001688:	f244 5395 	movw	r3, #17813	; 0x4595
 800168c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2202      	movs	r2, #2
 800169c:	2100      	movs	r1, #0
 800169e:	4853      	ldr	r0, [pc, #332]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80016a0:	f001 fdf6 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80016aa:	f000 fb2d 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80016ae:	f640 536e 	movw	r3, #3438	; 0xd6e
 80016b2:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2202      	movs	r2, #2
 80016ba:	2104      	movs	r1, #4
 80016bc:	484b      	ldr	r0, [pc, #300]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80016be:	f001 fde7 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80016c8:	f000 fb1e 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80016cc:	f644 0306 	movw	r3, #18438	; 0x4806
 80016d0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2204      	movs	r2, #4
 80016d8:	2100      	movs	r1, #0
 80016da:	4844      	ldr	r0, [pc, #272]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80016dc:	f001 fdd8 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80016e6:	f000 fb0f 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80016ea:	f244 435d 	movw	r3, #17501	; 0x445d
 80016ee:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	2208      	movs	r2, #8
 80016f6:	2104      	movs	r1, #4
 80016f8:	483c      	ldr	r0, [pc, #240]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80016fa:	f001 fdc9 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001704:	f000 fb00 	bl	8001d08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 800170c:	2328      	movs	r3, #40	; 0x28
 800170e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001710:	2314      	movs	r3, #20
 8001712:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001718:	2308      	movs	r3, #8
 800171a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	2201      	movs	r2, #1
 800172c:	2100      	movs	r1, #0
 800172e:	482f      	ldr	r0, [pc, #188]	; (80017ec <MX_HRTIM_Init+0x29c>)
 8001730:	f001 ff1c 	bl	800356c <HAL_HRTIM_WaveformOutputConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800173a:	f000 fae5 	bl	8001d08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001742:	2350      	movs	r3, #80	; 0x50
 8001744:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001750:	2104      	movs	r1, #4
 8001752:	4826      	ldr	r0, [pc, #152]	; (80017ec <MX_HRTIM_Init+0x29c>)
 8001754:	f001 ff0a 	bl	800356c <HAL_HRTIM_WaveformOutputConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800175e:	f000 fad3 	bl	8001d08 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001766:	2320      	movs	r3, #32
 8001768:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800176a:	2310      	movs	r3, #16
 800176c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800176e:	2308      	movs	r3, #8
 8001770:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2202      	movs	r2, #2
 8001776:	2100      	movs	r1, #0
 8001778:	481c      	ldr	r0, [pc, #112]	; (80017ec <MX_HRTIM_Init+0x29c>)
 800177a:	f001 fef7 	bl	800356c <HAL_HRTIM_WaveformOutputConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001784:	f000 fac0 	bl	8001d08 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001788:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800178c:	461a      	mov	r2, r3
 800178e:	2104      	movs	r1, #4
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <MX_HRTIM_Init+0x29c>)
 8001792:	f001 fce3 	bl	800315c <HAL_HRTIM_TimeBaseConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 800179c:	f000 fab4 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80017a0:	f240 7353 	movw	r3, #1875	; 0x753
 80017a4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2201      	movs	r2, #1
 80017ac:	2104      	movs	r1, #4
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80017b0:	f001 fd6e 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80017ba:	f000 faa5 	bl	8001d08 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80017be:	f643 6342 	movw	r3, #15938	; 0x3e42
 80017c2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	2204      	movs	r2, #4
 80017ca:	2104      	movs	r1, #4
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80017ce:	f001 fd5f 	bl	8003290 <HAL_HRTIM_WaveformCompareConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80017d8:	f000 fa96 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <MX_HRTIM_Init+0x29c>)
 80017de:	f000 fb6d 	bl	8001ebc <HAL_HRTIM_MspPostInit>

}
 80017e2:	bf00      	nop
 80017e4:	3790      	adds	r7, #144	; 0x90
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000023c 	.word	0x2000023c
 80017f0:	40017400 	.word	0x40017400

080017f4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_LPTIM1_Init+0x54>)
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <MX_LPTIM1_Init+0x58>)
 80017fc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001806:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800180a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_LPTIM1_Init+0x54>)
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_LPTIM1_Init+0x54>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001828:	2200      	movs	r2, #0
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_LPTIM1_Init+0x54>)
 800182e:	2200      	movs	r2, #0
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_LPTIM1_Init+0x54>)
 8001834:	f002 ffe2 	bl	80047fc <HAL_LPTIM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800183e:	f000 fa63 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000318 	.word	0x20000318
 800184c:	40002400 	.word	0x40002400

08001850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_TIM1_Init+0xa0>)
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <MX_TIM1_Init+0xa4>)
 8001872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_TIM1_Init+0xa0>)
 8001876:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800187a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_TIM1_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_TIM1_Init+0xa0>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM1_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_TIM1_Init+0xa0>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM1_Init+0xa0>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_TIM1_Init+0xa0>)
 800189e:	f006 faf1 	bl	8007e84 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 fa2e 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_TIM1_Init+0xa0>)
 80018ba:	f006 fb3b 	bl	8007f34 <HAL_TIM_ConfigClockSource>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018c4:	f000 fa20 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_TIM1_Init+0xa0>)
 80018da:	f006 fd5b 	bl	8008394 <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018e4:	f000 fa10 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000350 	.word	0x20000350
 80018f4:	40010000 	.word	0x40010000

080018f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_TIM3_Init+0x94>)
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <MX_TIM3_Init+0x98>)
 800191a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_TIM3_Init+0x94>)
 800191e:	227c      	movs	r2, #124	; 0x7c
 8001920:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_TIM3_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_TIM3_Init+0x94>)
 800192a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_TIM3_Init+0x94>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_TIM3_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193c:	4813      	ldr	r0, [pc, #76]	; (800198c <MX_TIM3_Init+0x94>)
 800193e:	f006 faa1 	bl	8007e84 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001948:	f000 f9de 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <MX_TIM3_Init+0x94>)
 800195a:	f006 faeb 	bl	8007f34 <HAL_TIM_ConfigClockSource>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001964:	f000 f9d0 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_TIM3_Init+0x94>)
 8001976:	f006 fd0d 	bl	8008394 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001980:	f000 f9c2 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000039c 	.word	0x2000039c
 8001990:	40000400 	.word	0x40000400

08001994 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <MX_USART3_UART_Init+0x94>)
 800199c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019a0:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <MX_USART3_UART_Init+0x98>)
 80019a2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019b8:	220c      	movs	r2, #12
 80019ba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019da:	4812      	ldr	r0, [pc, #72]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019dc:	f006 fd68 	bl	80084b0 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80019e6:	f000 f98f 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 80019ee:	f007 fdf8 	bl	80095e2 <HAL_UARTEx_SetTxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80019f8:	f000 f986 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fc:	2100      	movs	r1, #0
 80019fe:	4809      	ldr	r0, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 8001a00:	f007 fe2d 	bl	800965e <HAL_UARTEx_SetRxFifoThreshold>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001a0a:	f000 f97d 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART3_UART_Init+0x90>)
 8001a10:	f007 fdae 	bl	8009570 <HAL_UARTEx_DisableFifoMode>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001a1a:	f000 f975 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200003e8 	.word	0x200003e8
 8001a28:	40004800 	.word	0x40004800
 8001a2c:	000f4240 	.word	0x000f4240

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a46:	4ba9      	ldr	r3, [pc, #676]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	4aa7      	ldr	r2, [pc, #668]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a56:	4ba5      	ldr	r3, [pc, #660]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	4ba1      	ldr	r3, [pc, #644]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	4aa0      	ldr	r2, [pc, #640]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a74:	4b9d      	ldr	r3, [pc, #628]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	4a98      	ldr	r2, [pc, #608]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a92:	4b96      	ldr	r3, [pc, #600]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	4a91      	ldr	r2, [pc, #580]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab0:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4a89      	ldr	r2, [pc, #548]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ac6:	f043 0302 	orr.w	r3, r3, #2
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4b87      	ldr	r3, [pc, #540]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001adc:	4b83      	ldr	r3, [pc, #524]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	4a82      	ldr	r2, [pc, #520]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afa:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0a:	4b78      	ldr	r3, [pc, #480]	; (8001cec <MX_GPIO_Init+0x2bc>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2134      	movs	r1, #52	; 0x34
 8001b1c:	4874      	ldr	r0, [pc, #464]	; (8001cf0 <MX_GPIO_Init+0x2c0>)
 8001b1e:	f001 f9ff 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f244 0101 	movw	r1, #16385	; 0x4001
 8001b28:	4872      	ldr	r0, [pc, #456]	; (8001cf4 <MX_GPIO_Init+0x2c4>)
 8001b2a:	f001 f9f9 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b34:	4870      	ldr	r0, [pc, #448]	; (8001cf8 <MX_GPIO_Init+0x2c8>)
 8001b36:	f001 f9f3 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001b40:	486e      	ldr	r0, [pc, #440]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001b42:	f001 f9ed 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4c:	486b      	ldr	r0, [pc, #428]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001b4e:	f001 f9e7 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001b52:	2201      	movs	r2, #1
 8001b54:	21f8      	movs	r1, #248	; 0xf8
 8001b56:	4868      	ldr	r0, [pc, #416]	; (8001cf8 <MX_GPIO_Init+0x2c8>)
 8001b58:	f001 f9e2 	bl	8002f20 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4863      	ldr	r0, [pc, #396]	; (8001cf0 <MX_GPIO_Init+0x2c0>)
 8001b62:	f001 f9dd 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001b66:	2336      	movs	r3, #54	; 0x36
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	485c      	ldr	r0, [pc, #368]	; (8001cf0 <MX_GPIO_Init+0x2c0>)
 8001b7e:	f001 f807 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4858      	ldr	r0, [pc, #352]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001b9a:	f000 fff9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b9e:	2332      	movs	r3, #50	; 0x32
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bae:	230b      	movs	r3, #11
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4850      	ldr	r0, [pc, #320]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001bba:	f000 ffe9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001bbe:	2386      	movs	r3, #134	; 0x86
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bce:	230b      	movs	r3, #11
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4849      	ldr	r0, [pc, #292]	; (8001d00 <MX_GPIO_Init+0x2d0>)
 8001bda:	f000 ffd9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001bde:	f244 0301 	movw	r3, #16385	; 0x4001
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	483f      	ldr	r0, [pc, #252]	; (8001cf4 <MX_GPIO_Init+0x2c4>)
 8001bf8:	f000 ffca 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4836      	ldr	r0, [pc, #216]	; (8001cf4 <MX_GPIO_Init+0x2c4>)
 8001c1a:	f000 ffb9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001c1e:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001c22:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4830      	ldr	r0, [pc, #192]	; (8001cf8 <MX_GPIO_Init+0x2c8>)
 8001c38:	f000 ffaa 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	482c      	ldr	r0, [pc, #176]	; (8001d04 <MX_GPIO_Init+0x2d4>)
 8001c52:	f000 ff9d 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001c56:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c60:	2302      	movs	r3, #2
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001c70:	f000 ff8e 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c74:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c86:	230a      	movs	r3, #10
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_GPIO_Init+0x2d0>)
 8001c92:	f000 ff7d 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4814      	ldr	r0, [pc, #80]	; (8001cfc <MX_GPIO_Init+0x2cc>)
 8001cac:	f000 ff70 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001cb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc2:	230b      	movs	r3, #11
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_GPIO_Init+0x2d4>)
 8001cce:	f000 ff5f 	bl	8002b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	2028      	movs	r0, #40	; 0x28
 8001cd8:	f000 fdc5 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cdc:	2028      	movs	r0, #40	; 0x28
 8001cde:	f000 fddc 	bl	800289a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3730      	adds	r7, #48	; 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58021000 	.word	0x58021000
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	58020c00 	.word	0x58020c00
 8001cfc:	58020800 	.word	0x58020800
 8001d00:	58020000 	.word	0x58020000
 8001d04:	58021800 	.word	0x58021800

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001d10:	4810      	ldr	r0, [pc, #64]	; (8001d54 <Error_Handler+0x4c>)
 8001d12:	f008 fa39 	bl	800a188 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001d16:	f240 1103 	movw	r1, #259	; 0x103
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <Error_Handler+0x50>)
 8001d1c:	f001 fd7b 	bl	8003816 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001d20:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <Error_Handler+0x50>)
 8001d26:	f001 fe13 	bl	8003950 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <Error_Handler+0x54>)
 8001d32:	f001 f8f5 	bl	8002f20 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <Error_Handler+0x58>)
 8001d3c:	f001 f909 	bl	8002f52 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <Error_Handler+0x5c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f00a fa54 	bl	800c1f8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d50:	e7f1      	b.n	8001d36 <Error_Handler+0x2e>
 8001d52:	bf00      	nop
 8001d54:	0800c41c 	.word	0x0800c41c
 8001d58:	2000023c 	.word	0x2000023c
 8001d5c:	58020800 	.word	0x58020800
 8001d60:	58020400 	.word	0x58020400
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_MspInit+0x30>)
 8001d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x30>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x30>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	58024400 	.word	0x58024400

08001d9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d129      	bne.n	8001e12 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dc4:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_DAC_MspInit+0x88>)
 8001e0e:	f000 febf 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40007400 	.word	0x40007400
 8001e20:	58024400 	.word	0x58024400
 8001e24:	58020000 	.word	0x58020000

08001e28 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b4      	sub	sp, #208	; 0xd0
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	22c0      	movs	r2, #192	; 0xc0
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f007 fcd5 	bl	80097e8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_HRTIM_MspInit+0x8c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d131      	bne.n	8001eac <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f98e 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001e6a:	f7ff ff4d 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_HRTIM_MspInit+0x90>)
 8001e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_HRTIM_MspInit+0x90>)
 8001e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_HRTIM_MspInit+0x90>)
 8001e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2068      	movs	r0, #104	; 0x68
 8001e92:	f000 fce8 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001e96:	2068      	movs	r0, #104	; 0x68
 8001e98:	f000 fcff 	bl	800289a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	206c      	movs	r0, #108	; 0x6c
 8001ea2:	f000 fce0 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8001ea6:	206c      	movs	r0, #108	; 0x6c
 8001ea8:	f000 fcf7 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	37d0      	adds	r7, #208	; 0xd0
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40017400 	.word	0x40017400
 8001eb8:	58024400 	.word	0x58024400

08001ebc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_HRTIM_MspPostInit+0xa8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d13d      	bne.n	8001f5a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_HRTIM_MspPostInit+0xac>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <HAL_HRTIM_MspPostInit+0xb0>)
 8001f36:	f000 fe2b 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3a:	23c0      	movs	r3, #192	; 0xc0
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <HAL_HRTIM_MspPostInit+0xb4>)
 8001f56:	f000 fe1b 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40017400 	.word	0x40017400
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58020800 	.word	0x58020800

08001f74 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b4      	sub	sp, #208	; 0xd0
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	22c0      	movs	r2, #192	; 0xc0
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f007 fc2f 	bl	80097e8 <memset>
  if(hlptim->Instance==LPTIM1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_LPTIM_MspInit+0x80>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d12a      	bne.n	8001fea <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001f94:	f04f 0220 	mov.w	r2, #32
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001fa0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 f8e7 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001fb8:	f7ff fea6 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_LPTIM_MspInit+0x84>)
 8001fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	205d      	movs	r0, #93	; 0x5d
 8001fe0:	f000 fc41 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001fe4:	205d      	movs	r0, #93	; 0x5d
 8001fe6:	f000 fc58 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	37d0      	adds	r7, #208	; 0xd0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40002400 	.word	0x40002400
 8001ff8:	58024400 	.word	0x58024400

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_TIM_Base_MspInit+0x68>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10f      	bne.n	800202e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800202c:	e013      	b.n	8002056 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_TIM_Base_MspInit+0x70>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d10e      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 800203a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 800204a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	58024400 	.word	0x58024400
 800206c:	40000400 	.word	0x40000400

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0ba      	sub	sp, #232	; 0xe8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	22c0      	movs	r2, #192	; 0xc0
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f007 fba9 	bl	80097e8 <memset>
  if(huart->Instance==USART3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_UART_MspInit+0xc8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d146      	bne.n	800212e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020a0:	f04f 0202 	mov.w	r2, #2
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f862 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020c2:	f7ff fe21 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_UART_MspInit+0xcc>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002122:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_UART_MspInit+0xd0>)
 800212a:	f000 fd31 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	37e8      	adds	r7, #232	; 0xe8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004800 	.word	0x40004800
 800213c:	58024400 	.word	0x58024400
 8002140:	58020c00 	.word	0x58020c00

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002148:	f003 fffe 	bl	8006148 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800214c:	f7ff fddc 	bl	8001d08 <Error_Handler>
 8002150:	e7fc      	b.n	800214c <NMI_Handler+0x8>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002156:	f7ff fdd7 	bl	8001d08 <Error_Handler>
 800215a:	e7fc      	b.n	8002156 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002160:	f7ff fdd2 	bl	8001d08 <Error_Handler>
 8002164:	e7fc      	b.n	8002160 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800216a:	f7ff fdcd 	bl	8001d08 <Error_Handler>
 800216e:	e7fc      	b.n	800216a <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002174:	f7ff fdc8 	bl	8001d08 <Error_Handler>
 8002178:	e7fc      	b.n	8002174 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 fa12 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b8:	f000 fee5 	bl	8002f86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <LPTIM1_IRQHandler+0x10>)
 80021c6:	f002 fc30 	bl	8004a2a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000318 	.word	0x20000318

080021d4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80021d8:	2100      	movs	r1, #0
 80021da:	4802      	ldr	r0, [pc, #8]	; (80021e4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80021dc:	f001 fc36 	bl	8003a4c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000023c 	.word	0x2000023c

080021e8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80021ec:	2104      	movs	r1, #4
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <HRTIM1_TIME_IRQHandler+0x10>)
 80021f0:	f001 fc2c 	bl	8003a4c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000023c 	.word	0x2000023c

080021fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_kill>:

int _kill(int pid, int sig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002216:	f007 faaf 	bl	8009778 <__errno>
 800221a:	4603      	mov	r3, r0
 800221c:	2216      	movs	r2, #22
 800221e:	601a      	str	r2, [r3, #0]
	return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_exit>:

void _exit (int status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffe7 	bl	800220c <_kill>
	while (1) {}		/* Make sure we hang here */
 800223e:	e7fe      	b.n	800223e <_exit+0x12>

08002240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e00a      	b.n	8002268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002252:	f3af 8000 	nop.w
 8002256:	4601      	mov	r1, r0
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	60ba      	str	r2, [r7, #8]
 800225e:	b2ca      	uxtb	r2, r1
 8002260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	dbf0      	blt.n	8002252 <_read+0x12>
	}

return len;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e009      	b.n	80022a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	60ba      	str	r2, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fe1d 	bl	8000ed4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf1      	blt.n	800228c <_write+0x12>
	}
	return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_close>:

int _close(int file)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022da:	605a      	str	r2, [r3, #4]
	return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_isatty>:

int _isatty(int file)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return 1;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f007 fa14 	bl	8009778 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20020000 	.word	0x20020000
 800237c:	00000400 	.word	0x00000400
 8002380:	2000048c 	.word	0x2000048c
 8002384:	200004a8 	.word	0x200004a8

08002388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <SystemInit+0xe4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	4a36      	ldr	r2, [pc, #216]	; (800246c <SystemInit+0xe4>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <SystemInit+0xe8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d807      	bhi.n	80023b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <SystemInit+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <SystemInit+0xe8>)
 80023b2:	f043 0307 	orr.w	r3, r3, #7
 80023b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023b8:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <SystemInit+0xec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <SystemInit+0xec>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <SystemInit+0xec>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <SystemInit+0xec>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4929      	ldr	r1, [pc, #164]	; (8002474 <SystemInit+0xec>)
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <SystemInit+0xf0>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <SystemInit+0xe8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <SystemInit+0xe8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 030f 	bic.w	r3, r3, #15
 80023ea:	4a21      	ldr	r2, [pc, #132]	; (8002470 <SystemInit+0xe8>)
 80023ec:	f043 0307 	orr.w	r3, r3, #7
 80023f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <SystemInit+0xec>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <SystemInit+0xec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <SystemInit+0xec>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <SystemInit+0xec>)
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <SystemInit+0xf4>)
 8002408:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <SystemInit+0xec>)
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <SystemInit+0xf8>)
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <SystemInit+0xec>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <SystemInit+0xfc>)
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <SystemInit+0xec>)
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <SystemInit+0xec>)
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <SystemInit+0xfc>)
 8002420:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <SystemInit+0xec>)
 8002424:	2200      	movs	r2, #0
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <SystemInit+0xec>)
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <SystemInit+0xfc>)
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <SystemInit+0xec>)
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <SystemInit+0xec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <SystemInit+0xec>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <SystemInit+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <SystemInit+0x100>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <SystemInit+0x104>)
 800244c:	4013      	ands	r3, r2
 800244e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002452:	d202      	bcs.n	800245a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <SystemInit+0x108>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <SystemInit+0x10c>)
 800245c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002460:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00
 8002470:	52002000 	.word	0x52002000
 8002474:	58024400 	.word	0x58024400
 8002478:	eaf6ed7f 	.word	0xeaf6ed7f
 800247c:	02020200 	.word	0x02020200
 8002480:	01ff0000 	.word	0x01ff0000
 8002484:	01010280 	.word	0x01010280
 8002488:	5c001000 	.word	0x5c001000
 800248c:	ffff0000 	.word	0xffff0000
 8002490:	51008108 	.word	0x51008108
 8002494:	52004000 	.word	0x52004000

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800249c:	f7ff ff74 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024a2:	490d      	ldr	r1, [pc, #52]	; (80024d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b8:	4c0a      	ldr	r4, [pc, #40]	; (80024e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c6:	f007 f95d 	bl	8009784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7fe fe91 	bl	80011f0 <main>
  bx  lr
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80024dc:	0800c9a4 	.word	0x0800c9a4
  ldr r2, =_sbss
 80024e0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80024e4:	200004a4 	.word	0x200004a4

080024e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC3_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f9ac 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024f8:	f003 fc50 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_Init+0x68>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4913      	ldr	r1, [pc, #76]	; (8002558 <HAL_Init+0x6c>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_Init+0x68>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_Init+0x6c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_Init+0x70>)
 800252e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002530:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_Init+0x74>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f814 	bl	8002564 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e002      	b.n	800254c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002546:	f7ff fc0f 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	58024400 	.word	0x58024400
 8002558:	0800c584 	.word	0x0800c584
 800255c:	20000018 	.word	0x20000018
 8002560:	20000014 	.word	0x20000014

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_InitTick+0x60>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e021      	b.n	80025bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_InitTick+0x64>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_InitTick+0x60>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f991 	bl	80028b6 <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 f95b 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x68>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000020 	.word	0x20000020
 80025c8:	20000014 	.word	0x20000014
 80025cc:	2000001c 	.word	0x2000001c

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000020 	.word	0x20000020
 80025f4:	20000490 	.word	0x20000490

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000490 	.word	0x20000490

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000020 	.word	0x20000020

08002658 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_SuspendTick+0x1c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_SuspendTick+0x1c>)
 8002662:	f023 0302 	bic.w	r3, r3, #2
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_ResumeTick+0x1c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_ResumeTick+0x1c>)
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetREVID+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0c1b      	lsrs	r3, r3, #16
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	5c001000 	.word	0x5c001000

080026b0 <__NVIC_SetPriorityGrouping>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <__NVIC_SetPriorityGrouping+0x40>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <__NVIC_SetPriorityGrouping+0x40>)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60d3      	str	r3, [r2, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	05fa0000 	.word	0x05fa0000

080026f8 <__NVIC_GetPriorityGrouping>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff40 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff90 	bl	80027a4 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5f 	bl	8002750 <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff33 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa4 	bl	800280c <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e014      	b.n	800290a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	791b      	ldrb	r3, [r3, #4]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa53 	bl	8001d9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_DAC_ConfigChannel+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e12a      	b.n	8002b82 <HAL_DAC_ConfigChannel+0x26e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	f040 8081 	bne.w	8002a44 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002942:	f7ff fe59 	bl	80025f8 <HAL_GetTick>
 8002946:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d140      	bne.n	80029d0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800294e:	e018      	b.n	8002982 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002950:	f7ff fe52 	bl	80025f8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d911      	bls.n	8002982 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	4b89      	ldr	r3, [pc, #548]	; (8002b8c <HAL_DAC_ConfigChannel+0x278>)
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f043 0208 	orr.w	r2, r3, #8
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2203      	movs	r2, #3
 800297c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0ff      	b.n	8002b82 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	4b80      	ldr	r3, [pc, #512]	; (8002b8c <HAL_DAC_ConfigChannel+0x278>)
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1df      	bne.n	8002950 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002990:	2001      	movs	r0, #1
 8002992:	f7ff fe3d 	bl	8002610 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	6992      	ldr	r2, [r2, #24]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
 80029a0:	e023      	b.n	80029ea <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029a2:	f7ff fe29 	bl	80025f8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d90f      	bls.n	80029d0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0a      	bge.n	80029d0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f043 0208 	orr.w	r2, r3, #8
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2203      	movs	r2, #3
 80029ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0d8      	b.n	8002b82 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	dbe3      	blt.n	80029a2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fe18 	bl	8002610 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	6992      	ldr	r2, [r2, #24]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	ea02 0103 	and.w	r1, r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	21ff      	movs	r1, #255	; 0xff
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	ea02 0103 	and.w	r1, r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d11d      	bne.n	8002a88 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2207      	movs	r2, #7
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e00f      	b.n	8002ad2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d102      	bne.n	8002ac0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e008      	b.n	8002ad2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	e001      	b.n	8002ad2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	400a      	ands	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	22c0      	movs	r2, #192	; 0xc0
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20008000 	.word	0x20008000

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_GPIO_Init+0x234>)
 8002ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ba2:	e194      	b.n	8002ece <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8186 	beq.w	8002ec8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d005      	beq.n	8002bd4 <HAL_GPIO_Init+0x44>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d130      	bne.n	8002c36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 0201 	and.w	r2, r3, #1
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d017      	beq.n	8002c72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d123      	bne.n	8002cc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	69b9      	ldr	r1, [r7, #24]
 8002cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0203 	and.w	r2, r3, #3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80e0 	beq.w	8002ec8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_GPIO_Init+0x238>)
 8002d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_GPIO_Init+0x238>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_GPIO_Init+0x238>)
 8002d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_GPIO_Init+0x23c>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <HAL_GPIO_Init+0x240>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d052      	beq.n	8002df8 <HAL_GPIO_Init+0x268>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_GPIO_Init+0x244>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_GPIO_Init+0x22e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_GPIO_Init+0x248>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_Init+0x22a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_GPIO_Init+0x24c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_GPIO_Init+0x250>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_GPIO_Init+0x254>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_GPIO_Init+0x258>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x21a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_GPIO_Init+0x25c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x216>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_GPIO_Init+0x260>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x212>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_GPIO_Init+0x264>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x20e>
 8002d9a:	2309      	movs	r3, #9
 8002d9c:	e02d      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002d9e:	230a      	movs	r3, #10
 8002da0:	e02b      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002da2:	2308      	movs	r3, #8
 8002da4:	e029      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002da6:	2307      	movs	r3, #7
 8002da8:	e027      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e025      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002dae:	2305      	movs	r3, #5
 8002db0:	e023      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e021      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e01f      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e01d      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01b      	b.n	8002dfa <HAL_GPIO_Init+0x26a>
 8002dc2:	bf00      	nop
 8002dc4:	58000080 	.word	0x58000080
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	58000400 	.word	0x58000400
 8002dd0:	58020000 	.word	0x58020000
 8002dd4:	58020400 	.word	0x58020400
 8002dd8:	58020800 	.word	0x58020800
 8002ddc:	58020c00 	.word	0x58020c00
 8002de0:	58021000 	.word	0x58021000
 8002de4:	58021400 	.word	0x58021400
 8002de8:	58021800 	.word	0x58021800
 8002dec:	58021c00 	.word	0x58021c00
 8002df0:	58022000 	.word	0x58022000
 8002df4:	58022400 	.word	0x58022400
 8002df8:	2300      	movs	r3, #0
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	4093      	lsls	r3, r2
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e0a:	4938      	ldr	r1, [pc, #224]	; (8002eec <HAL_GPIO_Init+0x35c>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f ae63 	bne.w	8002ba4 <HAL_GPIO_Init+0x14>
  }
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	58000400 	.word	0x58000400

08002ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e001      	b.n	8002f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f64:	887a      	ldrh	r2, [r7, #2]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	041a      	lsls	r2, r3, #16
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	400b      	ands	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd ffa3 	bl	8000ef8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0bd      	b.n	800314a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d031      	beq.n	8003076 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4f      	ldr	r2, [pc, #316]	; (8003154 <HAL_HRTIM_Init+0x198>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10e      	bne.n	800303a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800301c:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <HAL_HRTIM_Init+0x19c>)
 800301e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003022:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <HAL_HRTIM_Init+0x19c>)
 8003024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003028:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800302c:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_HRTIM_Init+0x19c>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003048:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fed6 	bl	8001e28 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
 80030c2:	e03e      	b.n	8003142 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80030c4:	7dfa      	ldrb	r2, [r7, #23]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3318      	adds	r3, #24
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80030d8:	7dfa      	ldrb	r2, [r7, #23]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	331c      	adds	r3, #28
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80030ec:	7dfa      	ldrb	r2, [r7, #23]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3320      	adds	r3, #32
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003100:	7dfa      	ldrb	r2, [r7, #23]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003114:	7dfa      	ldrb	r2, [r7, #23]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3328      	adds	r3, #40	; 0x28
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003128:	7dfa      	ldrb	r2, [r7, #23]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3330      	adds	r3, #48	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	3301      	adds	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d9bd      	bls.n	80030c4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40017400 	.word	0x40017400
 8003158:	58024400 	.word	0x58024400

0800315c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d101      	bne.n	8003178 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
 8003176:	e015      	b.n	80031a4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d104      	bne.n	8003190 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fd43 	bl	8003c14 <HRTIM_MasterBase_Config>
 800318e:	e004      	b.n	800319a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fd6c 	bl	8003c72 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d101      	bne.n	80031c8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
 80031c6:	e05f      	b.n	8003288 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e058      	b.n	8003288 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d104      	bne.n	80031f6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fd7f 	bl	8003cf2 <HRTIM_MasterWaveform_Config>
 80031f4:	e004      	b.n	8003200 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fde0 	bl	8003dc0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4403      	add	r3, r0
 8003212:	3320      	adds	r3, #32
 8003214:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4403      	add	r3, r0
 8003228:	3324      	adds	r3, #36	; 0x24
 800322a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	3328      	adds	r3, #40	; 0x28
 8003240:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4403      	add	r3, r0
 8003254:	332c      	adds	r3, #44	; 0x2c
 8003256:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6919      	ldr	r1, [r3, #16]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4403      	add	r3, r0
 800326a:	3330      	adds	r3, #48	; 0x30
 800326c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 ffe3 	bl	800423c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d101      	bne.n	80032ae <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	e157      	b.n	800355e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e150      	b.n	800355e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d140      	bne.n	8003354 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	d82a      	bhi.n	8003330 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003301 	.word	0x08003301
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003319 	.word	0x08003319
 80032f0:	08003331 	.word	0x08003331
 80032f4:	08003331 	.word	0x08003331
 80032f8:	08003331 	.word	0x08003331
 80032fc:	08003325 	.word	0x08003325
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	61da      	str	r2, [r3, #28]
        break;
 800330a:	e01a      	b.n	8003342 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003316:	e014      	b.n	8003342 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003322:	e00e      	b.n	8003342 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800332e:	e008      	b.n	8003342 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2207      	movs	r2, #7
 8003334:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003340:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b07      	cmp	r3, #7
 800334c:	f040 80fe 	bne.w	800354c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e104      	b.n	800355e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	2b07      	cmp	r3, #7
 800335a:	f200 80e3 	bhi.w	8003524 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003385 	.word	0x08003385
 8003368:	08003399 	.word	0x08003399
 800336c:	08003525 	.word	0x08003525
 8003370:	08003455 	.word	0x08003455
 8003374:	08003525 	.word	0x08003525
 8003378:	08003525 	.word	0x08003525
 800337c:	08003525 	.word	0x08003525
 8003380:	08003469 	.word	0x08003469
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	440b      	add	r3, r1
 8003392:	339c      	adds	r3, #156	; 0x9c
 8003394:	601a      	str	r2, [r3, #0]
        break;
 8003396:	e0d1      	b.n	800353c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	01db      	lsls	r3, r3, #7
 80033a4:	440b      	add	r3, r1
 80033a6:	33a4      	adds	r3, #164	; 0xa4
 80033a8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03f      	beq.n	8003432 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	4413      	add	r3, r2
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	6811      	ldr	r1, [r2, #0]
 80033c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3301      	adds	r3, #1
 80033cc:	01db      	lsls	r3, r3, #7
 80033ce:	440b      	add	r3, r1
 80033d0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4413      	add	r3, r2
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68f9      	ldr	r1, [r7, #12]
 80033e6:	6809      	ldr	r1, [r1, #0]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3301      	adds	r3, #1
 80033ee:	01db      	lsls	r3, r3, #7
 80033f0:	440b      	add	r3, r1
 80033f2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fc:	d109      	bne.n	8003412 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	01db      	lsls	r3, r3, #7
 800340a:	440b      	add	r3, r1
 800340c:	339c      	adds	r3, #156	; 0x9c
 800340e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003410:	e091      	b.n	8003536 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800341a:	f040 808c 	bne.w	8003536 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	01db      	lsls	r3, r3, #7
 800342a:	440b      	add	r3, r1
 800342c:	33a8      	adds	r3, #168	; 0xa8
 800342e:	601a      	str	r2, [r3, #0]
         break;
 8003430:	e081      	b.n	8003536 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3301      	adds	r3, #1
 800343a:	01db      	lsls	r3, r3, #7
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	6811      	ldr	r1, [r2, #0]
 8003444:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	3301      	adds	r3, #1
 800344c:	01db      	lsls	r3, r3, #7
 800344e:	440b      	add	r3, r1
 8003450:	601a      	str	r2, [r3, #0]
         break;
 8003452:	e070      	b.n	8003536 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	01db      	lsls	r3, r3, #7
 8003460:	440b      	add	r3, r1
 8003462:	33a8      	adds	r3, #168	; 0xa8
 8003464:	601a      	str	r2, [r3, #0]
        break;
 8003466:	e069      	b.n	800353c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	01db      	lsls	r3, r3, #7
 8003474:	440b      	add	r3, r1
 8003476:	33ac      	adds	r3, #172	; 0xac
 8003478:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03f      	beq.n	8003502 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3301      	adds	r3, #1
 800348a:	01db      	lsls	r3, r3, #7
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	6811      	ldr	r1, [r2, #0]
 8003494:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	01db      	lsls	r3, r3, #7
 800349e:	440b      	add	r3, r1
 80034a0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3301      	adds	r3, #1
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	4413      	add	r3, r2
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	6809      	ldr	r1, [r1, #0]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	01db      	lsls	r3, r3, #7
 80034c2:	440b      	add	r3, r1
 80034c4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d109      	bne.n	80034e4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	01db      	lsls	r3, r3, #7
 80034dc:	440b      	add	r3, r1
 80034de:	339c      	adds	r3, #156	; 0x9c
 80034e0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80034e2:	e02a      	b.n	800353a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ec:	d125      	bne.n	800353a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	440b      	add	r3, r1
 80034fc:	33a8      	adds	r3, #168	; 0xa8
 80034fe:	601a      	str	r2, [r3, #0]
         break;
 8003500:	e01b      	b.n	800353a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	01db      	lsls	r3, r3, #7
 800350c:	4413      	add	r3, r2
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6811      	ldr	r1, [r2, #0]
 8003514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3301      	adds	r3, #1
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	440b      	add	r3, r1
 8003520:	601a      	str	r2, [r3, #0]
         break;
 8003522:	e00a      	b.n	800353a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2207      	movs	r2, #7
 8003528:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003534:	e002      	b.n	800353c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800353a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b07      	cmp	r3, #7
 8003546:	d101      	bne.n	800354c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e008      	b.n	800355e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d101      	bne.n	800358a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	e01d      	b.n	80035c6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003594:	2302      	movs	r3, #2
 8003596:	e016      	b.n	80035c6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fd46 	bl	8004040 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d101      	bne.n	80035ee <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0df      	b.n	80037ae <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0d8      	b.n	80037ae <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003612:	f000 808d 	beq.w	8003730 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361c:	f200 80ad 	bhi.w	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003626:	d05e      	beq.n	80036e6 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	f200 80a4 	bhi.w	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d07b      	beq.n	8003730 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	f200 809d 	bhi.w	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b20      	cmp	r3, #32
 8003644:	d84c      	bhi.n	80036e0 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8096 	beq.w	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	2b1f      	cmp	r3, #31
 8003654:	f200 8091 	bhi.w	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	080036e7 	.word	0x080036e7
 8003664:	08003731 	.word	0x08003731
 8003668:	0800377b 	.word	0x0800377b
 800366c:	080036e7 	.word	0x080036e7
 8003670:	0800377b 	.word	0x0800377b
 8003674:	0800377b 	.word	0x0800377b
 8003678:	0800377b 	.word	0x0800377b
 800367c:	08003731 	.word	0x08003731
 8003680:	0800377b 	.word	0x0800377b
 8003684:	0800377b 	.word	0x0800377b
 8003688:	0800377b 	.word	0x0800377b
 800368c:	0800377b 	.word	0x0800377b
 8003690:	0800377b 	.word	0x0800377b
 8003694:	0800377b 	.word	0x0800377b
 8003698:	0800377b 	.word	0x0800377b
 800369c:	080036e7 	.word	0x080036e7
 80036a0:	0800377b 	.word	0x0800377b
 80036a4:	0800377b 	.word	0x0800377b
 80036a8:	0800377b 	.word	0x0800377b
 80036ac:	0800377b 	.word	0x0800377b
 80036b0:	0800377b 	.word	0x0800377b
 80036b4:	0800377b 	.word	0x0800377b
 80036b8:	0800377b 	.word	0x0800377b
 80036bc:	0800377b 	.word	0x0800377b
 80036c0:	0800377b 	.word	0x0800377b
 80036c4:	0800377b 	.word	0x0800377b
 80036c8:	0800377b 	.word	0x0800377b
 80036cc:	0800377b 	.word	0x0800377b
 80036d0:	0800377b 	.word	0x0800377b
 80036d4:	0800377b 	.word	0x0800377b
 80036d8:	0800377b 	.word	0x0800377b
 80036dc:	08003731 	.word	0x08003731
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d149      	bne.n	800377a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d110      	bne.n	800370e <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	01db      	lsls	r3, r3, #7
 80036f4:	4413      	add	r3, r2
 80036f6:	33bc      	adds	r3, #188	; 0xbc
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	01db      	lsls	r3, r3, #7
 8003706:	440b      	add	r3, r1
 8003708:	33bc      	adds	r3, #188	; 0xbc
 800370a:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 800370c:	e03e      	b.n	800378c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	01db      	lsls	r3, r3, #7
 8003716:	4413      	add	r3, r2
 8003718:	33c0      	adds	r3, #192	; 0xc0
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	6811      	ldr	r1, [r2, #0]
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	01db      	lsls	r3, r3, #7
 8003728:	440b      	add	r3, r1
 800372a:	33c0      	adds	r3, #192	; 0xc0
 800372c:	601a      	str	r2, [r3, #0]
      break;
 800372e:	e02d      	b.n	800378c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d110      	bne.n	8003758 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	01db      	lsls	r3, r3, #7
 800373e:	4413      	add	r3, r2
 8003740:	33c4      	adds	r3, #196	; 0xc4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6811      	ldr	r1, [r2, #0]
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	01db      	lsls	r3, r3, #7
 8003750:	440b      	add	r3, r1
 8003752:	33c4      	adds	r3, #196	; 0xc4
 8003754:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 8003756:	e019      	b.n	800378c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	01db      	lsls	r3, r3, #7
 8003760:	4413      	add	r3, r2
 8003762:	33c8      	adds	r3, #200	; 0xc8
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	01db      	lsls	r3, r3, #7
 8003772:	440b      	add	r3, r1
 8003774:	33c8      	adds	r3, #200	; 0xc8
 8003776:	601a      	str	r2, [r3, #0]
      break;
 8003778:	e008      	b.n	800378c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2207      	movs	r2, #7
 800377e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800378a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b07      	cmp	r3, #7
 8003796:	d101      	bne.n	800379c <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e008      	b.n	80037ae <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_HRTIM_WaveformOutputStart+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e01a      	b.n	800380a <HAL_HRTIM_WaveformOutputStart+0x4e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_HRTIM_WaveformOutputStop+0x18>
 800382a:	2302      	movs	r3, #2
 800382c:	e01a      	b.n	8003864 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8003884:	2302      	movs	r3, #2
 8003886:	e05b      	b.n	8003940 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68d9      	ldr	r1, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e022      	b.n	8003918 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80038d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d017      	beq.n	8003912 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	01db      	lsls	r3, r3, #7
 80038ea:	4413      	add	r3, r2
 80038ec:	338c      	adds	r3, #140	; 0x8c
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3320      	adds	r3, #32
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	4302      	orrs	r2, r0
 800390a:	01db      	lsls	r3, r3, #7
 800390c:	440b      	add	r3, r1
 800390e:	338c      	adds	r3, #140	; 0x8c
 8003910:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3301      	adds	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d9d9      	bls.n	80038d2 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800393e:	2300      	movs	r3, #0
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	20000024 	.word	0x20000024

08003950 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800395a:	f240 137f 	movw	r3, #383	; 0x17f
 800395e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800396a:	2302      	movs	r3, #2
 800396c:	e065      	b.n	8003a3a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	43da      	mvns	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	400a      	ands	r2, r1
 8003992:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ac:	43da      	mvns	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	400a      	ands	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e023      	b.n	8003a04 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80039c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	01db      	lsls	r3, r3, #7
 80039d4:	4413      	add	r3, r2
 80039d6:	338c      	adds	r3, #140	; 0x8c
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3320      	adds	r3, #32
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	4002      	ands	r2, r0
 80039f6:	01db      	lsls	r3, r3, #7
 80039f8:	440b      	add	r3, r1
 80039fa:	338c      	adds	r3, #140	; 0x8c
 80039fc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	3301      	adds	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d9d8      	bls.n	80039bc <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f9      	bne.n	8003a0a <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000024 	.word	0x20000024

08003a4c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2bff      	cmp	r3, #255	; 0xff
 8003a5a:	d103      	bne.n	8003a64 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc4f 	bl	8004300 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8003a62:	e00a      	b.n	8003a7a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d103      	bne.n	8003a72 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fcc6 	bl	80043fc <HRTIM_Master_ISR>
}
 8003a70:	e003      	b.n	8003a7a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd6b 	bl	8004550 <HRTIM_Timer_ISR>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f023 0307 	bic.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0318 	bic.w	r3, r3, #24
 8003c3e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	619a      	str	r2, [r3, #24]
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	4413      	add	r3, r2
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0307 	bic.w	r3, r3, #7
 8003c94:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0318 	bic.w	r3, r3, #24
 8003ca6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	4413      	add	r3, r2
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	01db      	lsls	r3, r3, #7
 8003cce:	440b      	add	r3, r1
 8003cd0:	3394      	adds	r3, #148	; 0x94
 8003cd2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3398      	adds	r3, #152	; 0x98
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003d0c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f023 0320 	bic.w	r3, r3, #32
 8003d14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d38:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d4a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d6e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d82:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b08b      	sub	sp, #44	; 0x2c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	01db      	lsls	r3, r3, #7
 8003dd6:	4413      	add	r3, r2
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3301      	adds	r3, #1
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	440b      	add	r3, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3301      	adds	r3, #1
 8003df4:	01db      	lsls	r3, r3, #7
 8003df6:	4413      	add	r3, r2
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	01db      	lsls	r3, r3, #7
 8003e04:	4413      	add	r3, r2
 8003e06:	33e8      	adds	r3, #232	; 0xe8
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	01db      	lsls	r3, r3, #7
 8003e14:	4413      	add	r3, r2
 8003e16:	33e4      	adds	r3, #228	; 0xe4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003e24:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f023 0320 	bic.w	r3, r3, #32
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	4313      	orrs	r3, r2
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d103      	bne.n	8003eac <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f023 031f 	bic.w	r3, r3, #31
 8003ee8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003efe:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f18:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003f2c:	d004      	beq.n	8003f38 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003f36:	d103      	bne.n	8003f40 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d108      	bne.n	8003f52 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003f46:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d843      	bhi.n	8003fe6 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f79 	.word	0x08003f79
 8003f68:	08003f8f 	.word	0x08003f8f
 8003f6c:	08003fa5 	.word	0x08003fa5
 8003f70:	08003fbb 	.word	0x08003fbb
 8003f74:	08003fd1 	.word	0x08003fd1
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f7e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61fb      	str	r3, [r7, #28]
      break;
 8003f8c:	e02c      	b.n	8003fe8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f94:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61fb      	str	r3, [r7, #28]
      break;
 8003fa2:	e021      	b.n	8003fe8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003faa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61fb      	str	r3, [r7, #28]
      break;
 8003fb8:	e016      	b.n	8003fe8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fc0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
      break;
 8003fce:	e00b      	b.n	8003fe8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61fb      	str	r3, [r7, #28]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003fe6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	4413      	add	r3, r2
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	01db      	lsls	r3, r3, #7
 8004000:	4413      	add	r3, r2
 8004002:	33e8      	adds	r3, #232	; 0xe8
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	4413      	add	r3, r2
 8004012:	33e4      	adds	r3, #228	; 0xe4
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	01db      	lsls	r3, r3, #7
 8004020:	4413      	add	r3, r2
 8004022:	33d4      	adds	r3, #212	; 0xd4
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004032:	bf00      	nop
 8004034:	372c      	adds	r7, #44	; 0x2c
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	4413      	add	r3, r2
 800405c:	33e4      	adds	r3, #228	; 0xe4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	4413      	add	r3, r2
 800406c:	33b8      	adds	r3, #184	; 0xb8
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d076      	beq.n	8004168 <HRTIM_OutputConfig+0x128>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	f200 8087 	bhi.w	8004192 <HRTIM_OutputConfig+0x152>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d05a      	beq.n	8004142 <HRTIM_OutputConfig+0x102>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d87e      	bhi.n	8004192 <HRTIM_OutputConfig+0x152>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d066      	beq.n	8004168 <HRTIM_OutputConfig+0x128>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d878      	bhi.n	8004192 <HRTIM_OutputConfig+0x152>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d84a      	bhi.n	800413c <HRTIM_OutputConfig+0xfc>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d072      	beq.n	8004192 <HRTIM_OutputConfig+0x152>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	2b1f      	cmp	r3, #31
 80040b2:	d86e      	bhi.n	8004192 <HRTIM_OutputConfig+0x152>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HRTIM_OutputConfig+0x7c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	08004143 	.word	0x08004143
 80040c0:	08004169 	.word	0x08004169
 80040c4:	08004193 	.word	0x08004193
 80040c8:	08004143 	.word	0x08004143
 80040cc:	08004193 	.word	0x08004193
 80040d0:	08004193 	.word	0x08004193
 80040d4:	08004193 	.word	0x08004193
 80040d8:	08004169 	.word	0x08004169
 80040dc:	08004193 	.word	0x08004193
 80040e0:	08004193 	.word	0x08004193
 80040e4:	08004193 	.word	0x08004193
 80040e8:	08004193 	.word	0x08004193
 80040ec:	08004193 	.word	0x08004193
 80040f0:	08004193 	.word	0x08004193
 80040f4:	08004193 	.word	0x08004193
 80040f8:	08004143 	.word	0x08004143
 80040fc:	08004193 	.word	0x08004193
 8004100:	08004193 	.word	0x08004193
 8004104:	08004193 	.word	0x08004193
 8004108:	08004193 	.word	0x08004193
 800410c:	08004193 	.word	0x08004193
 8004110:	08004193 	.word	0x08004193
 8004114:	08004193 	.word	0x08004193
 8004118:	08004193 	.word	0x08004193
 800411c:	08004193 	.word	0x08004193
 8004120:	08004193 	.word	0x08004193
 8004124:	08004193 	.word	0x08004193
 8004128:	08004193 	.word	0x08004193
 800412c:	08004193 	.word	0x08004193
 8004130:	08004193 	.word	0x08004193
 8004134:	08004193 	.word	0x08004193
 8004138:	08004169 	.word	0x08004169
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d127      	bne.n	8004192 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	440b      	add	r3, r1
 8004150:	33bc      	adds	r3, #188	; 0xbc
 8004152:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	01db      	lsls	r3, r3, #7
 8004160:	440b      	add	r3, r1
 8004162:	33c0      	adds	r3, #192	; 0xc0
 8004164:	601a      	str	r2, [r3, #0]
      break;
 8004166:	e015      	b.n	8004194 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	01db      	lsls	r3, r3, #7
 8004174:	440b      	add	r3, r1
 8004176:	33c4      	adds	r3, #196	; 0xc4
 8004178:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	01db      	lsls	r3, r3, #7
 8004186:	440b      	add	r3, r1
 8004188:	33c8      	adds	r3, #200	; 0xc8
 800418a:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800418c:	2310      	movs	r3, #16
 800418e:	61bb      	str	r3, [r7, #24]
      break;
 8004190:	e000      	b.n	8004194 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8004192:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004194:	22fe      	movs	r2, #254	; 0xfe
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800419c:	43db      	mvns	r3, r3
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d111      	bne.n	8004220 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	4313      	orrs	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	4413      	add	r3, r2
 800422a:	33e4      	adds	r3, #228	; 0xe4
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	3724      	adds	r7, #36	; 0x24
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b05      	cmp	r3, #5
 800424a:	d851      	bhi.n	80042f0 <HRTIM_ForceRegistersUpdate+0xb4>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HRTIM_ForceRegistersUpdate+0x18>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004283 	.word	0x08004283
 8004258:	08004299 	.word	0x08004299
 800425c:	080042af 	.word	0x080042af
 8004260:	080042c5 	.word	0x080042c5
 8004264:	080042db 	.word	0x080042db
 8004268:	0800426d 	.word	0x0800426d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004280:	e037      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0202 	orr.w	r2, r2, #2
 8004292:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004296:	e02c      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0204 	orr.w	r2, r2, #4
 80042a8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042ac:	e021      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042c2:	e016      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0210 	orr.w	r2, r2, #16
 80042d4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042d8:	e00b      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042ee:	e000      	b.n	80042f2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80042f0:	bf00      	nop
  }
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop

08004300 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800431a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fba1 	bl	8003a82 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2202      	movs	r2, #2
 800435a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fb99 	bl	8003a96 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2204      	movs	r2, #4
 800437e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff fb91 	bl	8003aaa <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2208      	movs	r2, #8
 80043a2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fb89 	bl	8003abe <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fb81 	bl	8003ad2 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fb79 	bl	8003ae6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004444:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fb56 	bl	8003afa <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800446a:	2105      	movs	r1, #5
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fb63 	bl	8003b38 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2202      	movs	r2, #2
 800448c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800448e:	2105      	movs	r1, #5
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fc fde9 	bl	8001068 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2204      	movs	r2, #4
 80044b0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044b2:	2105      	movs	r1, #5
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fc fe03 	bl	80010c0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00c      	beq.n	80044de <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2208      	movs	r2, #8
 80044d4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044d6:	2105      	movs	r1, #5
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fb38 	bl	8003b4e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2210      	movs	r2, #16
 80044f8:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044fa:	2105      	movs	r1, #5
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fe6b 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2220      	movs	r2, #32
 800451c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff faf5 	bl	8003b0e <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004540:	2105      	movs	r1, #5
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff faed 	bl	8003b22 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	4413      	add	r3, r2
 8004566:	3304      	adds	r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	4413      	add	r3, r2
 8004576:	338c      	adds	r3, #140	; 0x8c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	4413      	add	r3, r2
 800459a:	3388      	adds	r3, #136	; 0x88
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fac8 	bl	8003b38 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	3388      	adds	r3, #136	; 0x88
 80045c8:	2202      	movs	r2, #2
 80045ca:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fd4a 	bl	8001068 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4413      	add	r3, r2
 80045f2:	3388      	adds	r3, #136	; 0x88
 80045f4:	2204      	movs	r2, #4
 80045f6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fd60 	bl	80010c0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	01db      	lsls	r3, r3, #7
 800461c:	4413      	add	r3, r2
 800461e:	3388      	adds	r3, #136	; 0x88
 8004620:	2208      	movs	r2, #8
 8004622:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fa91 	bl	8003b4e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	01db      	lsls	r3, r3, #7
 8004648:	4413      	add	r3, r2
 800464a:	3388      	adds	r3, #136	; 0x88
 800464c:	2210      	movs	r2, #16
 800464e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc fdc0 	bl	80011d8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	01db      	lsls	r3, r3, #7
 8004674:	4413      	add	r3, r2
 8004676:	3388      	adds	r3, #136	; 0x88
 8004678:	2240      	movs	r2, #64	; 0x40
 800467a:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fa4f 	bl	8003b22 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	01db      	lsls	r3, r3, #7
 80046a0:	4413      	add	r3, r2
 80046a2:	3388      	adds	r3, #136	; 0x88
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fa5a 	bl	8003b64 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	4413      	add	r3, r2
 80046ce:	3388      	adds	r3, #136	; 0x88
 80046d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046d4:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fa4e 	bl	8003b7a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3388      	adds	r3, #136	; 0x88
 80046fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fa58 	bl	8003bbc <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	01db      	lsls	r3, r3, #7
 8004728:	4413      	add	r3, r2
 800472a:	3388      	adds	r3, #136	; 0x88
 800472c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fa4c 	bl	8003bd2 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3388      	adds	r3, #136	; 0x88
 800475a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fa40 	bl	8003be8 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	01db      	lsls	r3, r3, #7
 8004784:	4413      	add	r3, r2
 8004786:	3388      	adds	r3, #136	; 0x88
 8004788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800478c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fa34 	bl	8003bfe <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d011      	beq.n	80047c4 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	01db      	lsls	r3, r3, #7
 80047b2:	4413      	add	r3, r2
 80047b4:	3388      	adds	r3, #136	; 0x88
 80047b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ba:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff f9f1 	bl	8003ba6 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	01db      	lsls	r3, r3, #7
 80047e0:	4413      	add	r3, r2
 80047e2:	3388      	adds	r3, #136	; 0x88
 80047e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047e8:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff f9cf 	bl	8003b90 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e097      	b.n	800493e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd fba3 	bl	8001f74 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d004      	beq.n	8004850 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800484e:	d103      	bne.n	8004858 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 031e 	bic.w	r3, r3, #30
 8004856:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4b38      	ldr	r3, [pc, #224]	; (8004948 <HAL_LPTIM_Init+0x14c>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4b37      	ldr	r3, [pc, #220]	; (800494c <HAL_LPTIM_Init+0x150>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800487c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004882:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004888:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800488e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80048a6:	4313      	orrs	r3, r2
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d004      	beq.n	80048c0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048be:	d107      	bne.n	80048d0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80048c8:	4313      	orrs	r3, r2
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00a      	beq.n	80048f2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048e4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80048ea:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <HAL_LPTIM_Init+0x154>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_LPTIM_Init+0x112>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <HAL_LPTIM_Init+0x158>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
 800491e:	e009      	b.n	8004934 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <HAL_LPTIM_Init+0x15c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d104      	bne.n	8004934 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	ffff1f3f 	.word	0xffff1f3f
 800494c:	ff19f1fe 	.word	0xff19f1fe
 8004950:	40002400 	.word	0x40002400
 8004954:	58002400 	.word	0x58002400
 8004958:	58002800 	.word	0x58002800

0800495c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d00c      	beq.n	8004990 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800497e:	d107      	bne.n	8004990 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800498e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2210      	movs	r2, #16
 80049a6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80049b0:	2110      	movs	r1, #16
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f91e 	bl	8004bf4 <LPTIM_WaitForFlag>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d101      	bne.n	80049c2 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e02f      	b.n	8004a22 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f946 	bl	8004c54 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f905 	bl	8004bd8 <HAL_LPTIM_GetState>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d101      	bne.n	80049d8 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e024      	b.n	8004a22 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0210 	orr.w	r2, r2, #16
 80049e6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0202 	orr.w	r2, r2, #2
 80049f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0204 	orr.w	r2, r2, #4
 8004a16:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10d      	bne.n	8004a5c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d106      	bne.n	8004a5c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f882 	bl	8004b60 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d10d      	bne.n	8004a86 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d106      	bne.n	8004a86 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fae3 	bl	800104c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d10d      	bne.n	8004ab0 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d106      	bne.n	8004ab0 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f862 	bl	8004b74 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d10d      	bne.n	8004ada <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d106      	bne.n	8004ada <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f857 	bl	8004b88 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d10d      	bne.n	8004b04 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d106      	bne.n	8004b04 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2210      	movs	r2, #16
 8004afc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f84c 	bl	8004b9c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d10d      	bne.n	8004b2e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d106      	bne.n	8004b2e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2220      	movs	r2, #32
 8004b26:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f841 	bl	8004bb0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d10d      	bne.n	8004b58 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d106      	bne.n	8004b58 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2240      	movs	r2, #64	; 0x40
 8004b50:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f836 	bl	8004bc4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004be6:	b2db      	uxtb	r3, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <LPTIM_WaitForFlag+0x58>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <LPTIM_WaitForFlag+0x5c>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	0b9b      	lsrs	r3, r3, #14
 8004c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	4013      	ands	r3, r2
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d002      	beq.n	8004c3e <LPTIM_WaitForFlag+0x4a>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ec      	bne.n	8004c18 <LPTIM_WaitForFlag+0x24>

  return result;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000014 	.word	0x20000014
 8004c50:	d1b71759 	.word	0xd1b71759

08004c54 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c66:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a81      	ldr	r2, [pc, #516]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02d      	beq.n	8004cdc <LPTIM_Disable+0x88>
 8004c80:	4a7f      	ldr	r2, [pc, #508]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d830      	bhi.n	8004ce8 <LPTIM_Disable+0x94>
 8004c86:	4a7f      	ldr	r2, [pc, #508]	; (8004e84 <LPTIM_Disable+0x230>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d021      	beq.n	8004cd0 <LPTIM_Disable+0x7c>
 8004c8c:	4a7d      	ldr	r2, [pc, #500]	; (8004e84 <LPTIM_Disable+0x230>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d82a      	bhi.n	8004ce8 <LPTIM_Disable+0x94>
 8004c92:	4a7d      	ldr	r2, [pc, #500]	; (8004e88 <LPTIM_Disable+0x234>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d015      	beq.n	8004cc4 <LPTIM_Disable+0x70>
 8004c98:	4a7b      	ldr	r2, [pc, #492]	; (8004e88 <LPTIM_Disable+0x234>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d824      	bhi.n	8004ce8 <LPTIM_Disable+0x94>
 8004c9e:	4a7b      	ldr	r2, [pc, #492]	; (8004e8c <LPTIM_Disable+0x238>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <LPTIM_Disable+0x58>
 8004ca4:	4a7a      	ldr	r2, [pc, #488]	; (8004e90 <LPTIM_Disable+0x23c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d006      	beq.n	8004cb8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004caa:	e01d      	b.n	8004ce8 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cac:	4b79      	ldr	r3, [pc, #484]	; (8004e94 <LPTIM_Disable+0x240>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cb6:	e018      	b.n	8004cea <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cb8:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <LPTIM_Disable+0x240>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cc2:	e012      	b.n	8004cea <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004cc4:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <LPTIM_Disable+0x240>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cce:	e00c      	b.n	8004cea <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004cd0:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <LPTIM_Disable+0x240>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cda:	e006      	b.n	8004cea <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004cdc:	4b6d      	ldr	r3, [pc, #436]	; (8004e94 <LPTIM_Disable+0x240>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004ce6:	e000      	b.n	8004cea <LPTIM_Disable+0x96>
      break;
 8004ce8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a5a      	ldr	r2, [pc, #360]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d059      	beq.n	8004dd0 <LPTIM_Disable+0x17c>
 8004d1c:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d867      	bhi.n	8004df2 <LPTIM_Disable+0x19e>
 8004d22:	4a58      	ldr	r2, [pc, #352]	; (8004e84 <LPTIM_Disable+0x230>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d042      	beq.n	8004dae <LPTIM_Disable+0x15a>
 8004d28:	4a56      	ldr	r2, [pc, #344]	; (8004e84 <LPTIM_Disable+0x230>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d861      	bhi.n	8004df2 <LPTIM_Disable+0x19e>
 8004d2e:	4a56      	ldr	r2, [pc, #344]	; (8004e88 <LPTIM_Disable+0x234>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d02b      	beq.n	8004d8c <LPTIM_Disable+0x138>
 8004d34:	4a54      	ldr	r2, [pc, #336]	; (8004e88 <LPTIM_Disable+0x234>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d85b      	bhi.n	8004df2 <LPTIM_Disable+0x19e>
 8004d3a:	4a54      	ldr	r2, [pc, #336]	; (8004e8c <LPTIM_Disable+0x238>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <LPTIM_Disable+0xf4>
 8004d40:	4a53      	ldr	r2, [pc, #332]	; (8004e90 <LPTIM_Disable+0x23c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d011      	beq.n	8004d6a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004d46:	e054      	b.n	8004df2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004d48:	4b52      	ldr	r3, [pc, #328]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004d58:	4b4e      	ldr	r3, [pc, #312]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	4a4d      	ldr	r2, [pc, #308]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8004d68:	e044      	b.n	8004df4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d70:	4a48      	ldr	r2, [pc, #288]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004d7a:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d80:	4a44      	ldr	r2, [pc, #272]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d8a:	e033      	b.n	8004df4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004d8c:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d92:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <LPTIM_Disable+0x240>)
 8004d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da2:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <LPTIM_Disable+0x240>)
 8004da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dac:	e022      	b.n	8004df4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <LPTIM_Disable+0x240>)
 8004db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db4:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <LPTIM_Disable+0x240>)
 8004db6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004dbe:	4b35      	ldr	r3, [pc, #212]	; (8004e94 <LPTIM_Disable+0x240>)
 8004dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc4:	4a33      	ldr	r2, [pc, #204]	; (8004e94 <LPTIM_Disable+0x240>)
 8004dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dce:	e011      	b.n	8004df4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004dd0:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <LPTIM_Disable+0x240>)
 8004dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd6:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <LPTIM_Disable+0x240>)
 8004dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ddc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004de0:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <LPTIM_Disable+0x240>)
 8004de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de6:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <LPTIM_Disable+0x240>)
 8004de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004df0:	e000      	b.n	8004df4 <LPTIM_Disable+0x1a0>
      break;
 8004df2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <LPTIM_Disable+0x1ae>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80d0 	beq.w	8004fa2 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d031      	beq.n	8004e70 <LPTIM_Disable+0x21c>
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <LPTIM_Disable+0x22c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d842      	bhi.n	8004e98 <LPTIM_Disable+0x244>
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <LPTIM_Disable+0x230>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d024      	beq.n	8004e62 <LPTIM_Disable+0x20e>
 8004e18:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <LPTIM_Disable+0x230>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d83c      	bhi.n	8004e98 <LPTIM_Disable+0x244>
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <LPTIM_Disable+0x234>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d017      	beq.n	8004e54 <LPTIM_Disable+0x200>
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <LPTIM_Disable+0x234>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d836      	bhi.n	8004e98 <LPTIM_Disable+0x244>
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <LPTIM_Disable+0x238>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <LPTIM_Disable+0x1e4>
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <LPTIM_Disable+0x23c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004e36:	e02f      	b.n	8004e98 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8004e38:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e3e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004e42:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8004e44:	e029      	b.n	8004e9a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e52:	e022      	b.n	8004e9a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e5e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e60:	e01b      	b.n	8004e9a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e6c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e6e:	e014      	b.n	8004e9a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <LPTIM_Disable+0x240>)
 8004e76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e7c:	e00d      	b.n	8004e9a <LPTIM_Disable+0x246>
 8004e7e:	bf00      	nop
 8004e80:	58003000 	.word	0x58003000
 8004e84:	58002c00 	.word	0x58002c00
 8004e88:	58002800 	.word	0x58002800
 8004e8c:	40002400 	.word	0x40002400
 8004e90:	58002400 	.word	0x58002400
 8004e94:	58024400 	.word	0x58024400
        break;
 8004e98:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004eb8:	2108      	movs	r1, #8
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe9a 	bl	8004bf4 <LPTIM_WaitForFlag>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d103      	bne.n	8004ece <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01a      	beq.n	8004f12 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe7c 	bl	8004bf4 <LPTIM_WaitForFlag>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d103      	bne.n	8004f0a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a33      	ldr	r2, [pc, #204]	; (8004fe4 <LPTIM_Disable+0x390>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d039      	beq.n	8004f90 <LPTIM_Disable+0x33c>
 8004f1c:	4a31      	ldr	r2, [pc, #196]	; (8004fe4 <LPTIM_Disable+0x390>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d841      	bhi.n	8004fa6 <LPTIM_Disable+0x352>
 8004f22:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <LPTIM_Disable+0x394>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02a      	beq.n	8004f7e <LPTIM_Disable+0x32a>
 8004f28:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <LPTIM_Disable+0x394>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d83b      	bhi.n	8004fa6 <LPTIM_Disable+0x352>
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <LPTIM_Disable+0x398>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01b      	beq.n	8004f6c <LPTIM_Disable+0x318>
 8004f34:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <LPTIM_Disable+0x398>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d835      	bhi.n	8004fa6 <LPTIM_Disable+0x352>
 8004f3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ff0 <LPTIM_Disable+0x39c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <LPTIM_Disable+0x2f4>
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <LPTIM_Disable+0x3a0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004f46:	e02e      	b.n	8004fa6 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f50:	4929      	ldr	r1, [pc, #164]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	4313      	orrs	r3, r2
 8004f56:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8004f58:	e026      	b.n	8004fa8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f62:	4925      	ldr	r1, [pc, #148]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	4313      	orrs	r3, r2
 8004f68:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f6a:	e01d      	b.n	8004fa8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f74:	4920      	ldr	r1, [pc, #128]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f7c:	e014      	b.n	8004fa8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f86:	491c      	ldr	r1, [pc, #112]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f8e:	e00b      	b.n	8004fa8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f98:	4917      	ldr	r1, [pc, #92]	; (8004ff8 <LPTIM_Disable+0x3a4>)
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004fa0:	e002      	b.n	8004fa8 <LPTIM_Disable+0x354>
    }
  }
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <LPTIM_Disable+0x354>
        break;
 8004fa6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbe:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004fdc:	bf00      	nop
 8004fde:	3730      	adds	r7, #48	; 0x30
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	58003000 	.word	0x58003000
 8004fe8:	58002c00 	.word	0x58002c00
 8004fec:	58002800 	.word	0x58002800
 8004ff0:	40002400 	.word	0x40002400
 8004ff4:	58002400 	.word	0x58002400
 8004ff8:	58024400 	.word	0x58024400

08004ffc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	58024800 	.word	0x58024800

0800501c <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <HAL_PWR_EnterSLEEPMode+0x30>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_PWR_EnterSLEEPMode+0x30>)
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800503a:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 800503c:	e000      	b.n	8005040 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 800503e:	bf20      	wfe
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 0201 	bic.w	r2, r3, #1
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 8005072:	f023 0305 	bic.w	r3, r3, #5
 8005076:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <HAL_PWR_EnterSTOPMode+0x70>)
 800507e:	f023 0302 	bic.w	r3, r3, #2
 8005082:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <HAL_PWR_EnterSTOPMode+0x74>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <HAL_PWR_EnterSTOPMode+0x74>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005090:	f3bf 8f4f 	dsb	sy
}
 8005094:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005096:	f3bf 8f6f 	isb	sy
}
 800509a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80050a2:	bf30      	wfi
 80050a4:	e000      	b.n	80050a8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80050a6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_PWR_EnterSTOPMode+0x74>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <HAL_PWR_EnterSTOPMode+0x74>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6113      	str	r3, [r2, #16]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	58024800 	.word	0x58024800
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_PWREx_ConfigSupply+0x70>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d00a      	beq.n	80050f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050dc:	4b16      	ldr	r3, [pc, #88]	; (8005138 <HAL_PWREx_ConfigSupply+0x70>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d001      	beq.n	80050ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e01f      	b.n	800512e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e01d      	b.n	800512e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_PWREx_ConfigSupply+0x70>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f023 0207 	bic.w	r2, r3, #7
 80050fa:	490f      	ldr	r1, [pc, #60]	; (8005138 <HAL_PWREx_ConfigSupply+0x70>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005102:	f7fd fa79 	bl	80025f8 <HAL_GetTick>
 8005106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005108:	e009      	b.n	800511e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800510a:	f7fd fa75 	bl	80025f8 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005118:	d901      	bls.n	800511e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e007      	b.n	800512e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_PWREx_ConfigSupply+0x70>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d1ee      	bne.n	800510a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	58024800 	.word	0x58024800

0800513c <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800514a:	6013      	str	r3, [r2, #0]
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	58024800 	.word	0x58024800

0800515c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08c      	sub	sp, #48	; 0x30
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f000 bc48 	b.w	8005a00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8088 	beq.w	800528e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517e:	4b99      	ldr	r3, [pc, #612]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005188:	4b96      	ldr	r3, [pc, #600]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	2b10      	cmp	r3, #16
 8005192:	d007      	beq.n	80051a4 <HAL_RCC_OscConfig+0x48>
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	2b18      	cmp	r3, #24
 8005198:	d111      	bne.n	80051be <HAL_RCC_OscConfig+0x62>
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d10c      	bne.n	80051be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	4b8f      	ldr	r3, [pc, #572]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d06d      	beq.n	800528c <HAL_RCC_OscConfig+0x130>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d169      	bne.n	800528c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f000 bc21 	b.w	8005a00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d106      	bne.n	80051d6 <HAL_RCC_OscConfig+0x7a>
 80051c8:	4b86      	ldr	r3, [pc, #536]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a85      	ldr	r2, [pc, #532]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e02e      	b.n	8005234 <HAL_RCC_OscConfig+0xd8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x9c>
 80051de:	4b81      	ldr	r3, [pc, #516]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a80      	ldr	r2, [pc, #512]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b7e      	ldr	r3, [pc, #504]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7d      	ldr	r2, [pc, #500]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80051f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xd8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0xc0>
 8005202:	4b78      	ldr	r3, [pc, #480]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a77      	ldr	r2, [pc, #476]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b75      	ldr	r3, [pc, #468]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a74      	ldr	r2, [pc, #464]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xd8>
 800521c:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a70      	ldr	r2, [pc, #448]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b6e      	ldr	r3, [pc, #440]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6d      	ldr	r2, [pc, #436]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd f9dc 	bl	80025f8 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fd f9d8 	bl	80025f8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	; 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e3d4      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005256:	4b63      	ldr	r3, [pc, #396]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xe8>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd f9c8 	bl	80025f8 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fd f9c4 	bl	80025f8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e3c0      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800527e:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x110>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80ca 	beq.w	8005430 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529c:	4b51      	ldr	r3, [pc, #324]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052a6:	4b4f      	ldr	r3, [pc, #316]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_RCC_OscConfig+0x166>
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2b18      	cmp	r3, #24
 80052b6:	d156      	bne.n	8005366 <HAL_RCC_OscConfig+0x20a>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d151      	bne.n	8005366 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c2:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_RCC_OscConfig+0x17e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e392      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052da:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 0219 	bic.w	r2, r3, #25
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	493f      	ldr	r1, [pc, #252]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd f984 	bl	80025f8 <HAL_GetTick>
 80052f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f4:	f7fd f980 	bl	80025f8 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e37c      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	f7fd f9c1 	bl	8002698 <HAL_GetREVID>
 8005316:	4603      	mov	r3, r0
 8005318:	f241 0203 	movw	r2, #4099	; 0x1003
 800531c:	4293      	cmp	r3, r2
 800531e:	d817      	bhi.n	8005350 <HAL_RCC_OscConfig+0x1f4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d108      	bne.n	800533a <HAL_RCC_OscConfig+0x1de>
 8005328:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005336:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005338:	e07a      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	4926      	ldr	r1, [pc, #152]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800534e:	e06f      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	4921      	ldr	r1, [pc, #132]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005364:	e064      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d047      	beq.n	80053fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800536e:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0219 	bic.w	r2, r3, #25
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	491a      	ldr	r1, [pc, #104]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd f93a 	bl	80025f8 <HAL_GetTick>
 8005384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005388:	f7fd f936 	bl	80025f8 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e332      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	f7fd f977 	bl	8002698 <HAL_GetREVID>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d819      	bhi.n	80053e8 <HAL_RCC_OscConfig+0x28c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d108      	bne.n	80053ce <HAL_RCC_OscConfig+0x272>
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053c4:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80053c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ca:	6053      	str	r3, [r2, #4]
 80053cc:	e030      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	031b      	lsls	r3, r3, #12
 80053dc:	4901      	ldr	r1, [pc, #4]	; (80053e4 <HAL_RCC_OscConfig+0x288>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
 80053e2:	e025      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
 80053e4:	58024400 	.word	0x58024400
 80053e8:	4b9a      	ldr	r3, [pc, #616]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	4997      	ldr	r1, [pc, #604]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	604b      	str	r3, [r1, #4]
 80053fc:	e018      	b.n	8005430 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053fe:	4b95      	ldr	r3, [pc, #596]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a94      	ldr	r2, [pc, #592]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fd f8f5 	bl	80025f8 <HAL_GetTick>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005412:	f7fd f8f1 	bl	80025f8 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e2ed      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005424:	4b8b      	ldr	r3, [pc, #556]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a9 	beq.w	8005590 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543e:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005446:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005448:	4b82      	ldr	r3, [pc, #520]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d007      	beq.n	8005464 <HAL_RCC_OscConfig+0x308>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b18      	cmp	r3, #24
 8005458:	d13a      	bne.n	80054d0 <HAL_RCC_OscConfig+0x374>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d135      	bne.n	80054d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005464:	4b7b      	ldr	r3, [pc, #492]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_OscConfig+0x320>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d001      	beq.n	800547c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e2c1      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800547c:	f7fd f90c 	bl	8002698 <HAL_GetREVID>
 8005480:	4603      	mov	r3, r0
 8005482:	f241 0203 	movw	r2, #4099	; 0x1003
 8005486:	4293      	cmp	r3, r2
 8005488:	d817      	bhi.n	80054ba <HAL_RCC_OscConfig+0x35e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	2b20      	cmp	r3, #32
 8005490:	d108      	bne.n	80054a4 <HAL_RCC_OscConfig+0x348>
 8005492:	4b70      	ldr	r3, [pc, #448]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800549a:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 800549c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054a2:	e075      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a4:	4b6b      	ldr	r3, [pc, #428]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	069b      	lsls	r3, r3, #26
 80054b2:	4968      	ldr	r1, [pc, #416]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054b8:	e06a      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ba:	4b66      	ldr	r3, [pc, #408]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	4962      	ldr	r1, [pc, #392]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ce:	e05f      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d042      	beq.n	800555e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054d8:	4b5e      	ldr	r3, [pc, #376]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fd f888 	bl	80025f8 <HAL_GetTick>
 80054e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054ec:	f7fd f884 	bl	80025f8 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e280      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054fe:	4b55      	ldr	r3, [pc, #340]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800550a:	f7fd f8c5 	bl	8002698 <HAL_GetREVID>
 800550e:	4603      	mov	r3, r0
 8005510:	f241 0203 	movw	r2, #4099	; 0x1003
 8005514:	4293      	cmp	r3, r2
 8005516:	d817      	bhi.n	8005548 <HAL_RCC_OscConfig+0x3ec>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	2b20      	cmp	r3, #32
 800551e:	d108      	bne.n	8005532 <HAL_RCC_OscConfig+0x3d6>
 8005520:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005528:	4a4a      	ldr	r2, [pc, #296]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 800552a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552e:	6053      	str	r3, [r2, #4]
 8005530:	e02e      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
 8005532:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	069b      	lsls	r3, r3, #26
 8005540:	4944      	ldr	r1, [pc, #272]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
 8005546:	e023      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
 8005548:	4b42      	ldr	r3, [pc, #264]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	493f      	ldr	r1, [pc, #252]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005558:	4313      	orrs	r3, r2
 800555a:	60cb      	str	r3, [r1, #12]
 800555c:	e018      	b.n	8005590 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800555e:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a3c      	ldr	r2, [pc, #240]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fd f845 	bl	80025f8 <HAL_GetTick>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005572:	f7fd f841 	bl	80025f8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e23d      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005584:	4b33      	ldr	r3, [pc, #204]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d036      	beq.n	800560a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d019      	beq.n	80055d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a4:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80055a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fd f822 	bl	80025f8 <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b8:	f7fd f81e 	bl	80025f8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e21a      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ca:	4b22      	ldr	r3, [pc, #136]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80055cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x45c>
 80055d6:	e018      	b.n	800560a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d8:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fd f808 	bl	80025f8 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ec:	f7fd f804 	bl	80025f8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e200      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055fe:	4b15      	ldr	r3, [pc, #84]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d039      	beq.n	800568a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01c      	beq.n	8005658 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800562a:	f7fc ffe5 	bl	80025f8 <HAL_GetTick>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005632:	f7fc ffe1 	bl	80025f8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1dd      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_RCC_OscConfig+0x4f8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x4d6>
 8005650:	e01b      	b.n	800568a <HAL_RCC_OscConfig+0x52e>
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005658:	4b9b      	ldr	r3, [pc, #620]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a9a      	ldr	r2, [pc, #616]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800565e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005662:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005664:	f7fc ffc8 	bl	80025f8 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800566c:	f7fc ffc4 	bl	80025f8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e1c0      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800567e:	4b92      	ldr	r3, [pc, #584]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8081 	beq.w	800579a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005698:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <HAL_RCC_OscConfig+0x770>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a8b      	ldr	r2, [pc, #556]	; (80058cc <HAL_RCC_OscConfig+0x770>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056a4:	f7fc ffa8 	bl	80025f8 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ac:	f7fc ffa4 	bl	80025f8 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1a0      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056be:	4b83      	ldr	r3, [pc, #524]	; (80058cc <HAL_RCC_OscConfig+0x770>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <HAL_RCC_OscConfig+0x584>
 80056d2:	4b7d      	ldr	r3, [pc, #500]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70
 80056de:	e02d      	b.n	800573c <HAL_RCC_OscConfig+0x5e0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10c      	bne.n	8005702 <HAL_RCC_OscConfig+0x5a6>
 80056e8:	4b77      	ldr	r3, [pc, #476]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a76      	ldr	r2, [pc, #472]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
 80056f4:	4b74      	ldr	r3, [pc, #464]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a73      	ldr	r2, [pc, #460]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	f023 0304 	bic.w	r3, r3, #4
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005700:	e01c      	b.n	800573c <HAL_RCC_OscConfig+0x5e0>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b05      	cmp	r3, #5
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x5c8>
 800570a:	4b6f      	ldr	r3, [pc, #444]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	4a6e      	ldr	r2, [pc, #440]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	6713      	str	r3, [r2, #112]	; 0x70
 8005716:	4b6c      	ldr	r3, [pc, #432]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a6b      	ldr	r2, [pc, #428]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0x5e0>
 8005724:	4b68      	ldr	r3, [pc, #416]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	4b65      	ldr	r3, [pc, #404]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a64      	ldr	r2, [pc, #400]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fc ff58 	bl	80025f8 <HAL_GetTick>
 8005748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800574a:	e00a      	b.n	8005762 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fc ff54 	bl	80025f8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e14e      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005762:	4b59      	ldr	r3, [pc, #356]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_RCC_OscConfig+0x5f0>
 800576e:	e014      	b.n	800579a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc ff42 	bl	80025f8 <HAL_GetTick>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005776:	e00a      	b.n	800578e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fc ff3e 	bl	80025f8 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e138      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800578e:	4b4e      	ldr	r3, [pc, #312]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ee      	bne.n	8005778 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 812d 	beq.w	80059fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057a4:	4b48      	ldr	r3, [pc, #288]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ac:	2b18      	cmp	r3, #24
 80057ae:	f000 80bd 	beq.w	800592c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	f040 809e 	bne.w	80058f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057bc:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fc ff16 	bl	80025f8 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fc ff12 	bl	80025f8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e10e      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057e2:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <HAL_RCC_OscConfig+0x774>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	430a      	orrs	r2, r1
 8005802:	4931      	ldr	r1, [pc, #196]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005804:	4313      	orrs	r3, r2
 8005806:	628b      	str	r3, [r1, #40]	; 0x28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	3b01      	subs	r3, #1
 800580e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	3b01      	subs	r3, #1
 8005818:	025b      	lsls	r3, r3, #9
 800581a:	b29b      	uxth	r3, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	3b01      	subs	r3, #1
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	3b01      	subs	r3, #1
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005838:	4923      	ldr	r1, [pc, #140]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800584c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_RCC_OscConfig+0x778>)
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005856:	00d2      	lsls	r2, r2, #3
 8005858:	491b      	ldr	r1, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f023 020c 	bic.w	r2, r3, #12
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4917      	ldr	r1, [pc, #92]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005870:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f023 0202 	bic.w	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	4912      	ldr	r1, [pc, #72]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4a0d      	ldr	r2, [pc, #52]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fc fe9b 	bl	80025f8 <HAL_GetTick>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058c4:	e011      	b.n	80058ea <HAL_RCC_OscConfig+0x78e>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	58024800 	.word	0x58024800
 80058d0:	fffffc0c 	.word	0xfffffc0c
 80058d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fc fe8e 	bl	80025f8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e08a      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x77c>
 80058f6:	e082      	b.n	80059fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f8:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a42      	ldr	r2, [pc, #264]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80058fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fc fe78 	bl	80025f8 <HAL_GetTick>
 8005908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fc fe74 	bl	80025f8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e070      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591e:	4b3a      	ldr	r3, [pc, #232]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x7b0>
 800592a:	e068      	b.n	80059fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800592c:	4b36      	ldr	r3, [pc, #216]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005932:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b01      	cmp	r3, #1
 800593e:	d031      	beq.n	80059a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d12a      	bne.n	80059a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d122      	bne.n	80059a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d11a      	bne.n	80059a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	0a5b      	lsrs	r3, r3, #9
 8005972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d111      	bne.n	80059a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d108      	bne.n	80059a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0e1b      	lsrs	r3, r3, #24
 8005996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e02b      	b.n	8005a00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059a8:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d01f      	beq.n	80059fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ca:	f7fc fe15 	bl	80025f8 <HAL_GetTick>
 80059ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059d0:	bf00      	nop
 80059d2:	f7fc fe11 	bl	80025f8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	4293      	cmp	r3, r2
 80059dc:	d0f9      	beq.n	80059d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <HAL_RCC_OscConfig+0x8b0>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059ea:	00d2      	lsls	r2, r2, #3
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <HAL_RCC_OscConfig+0x8ac>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3730      	adds	r7, #48	; 0x30
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	ffff0007 	.word	0xffff0007

08005a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e19c      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a24:	4b8a      	ldr	r3, [pc, #552]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d910      	bls.n	8005a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b87      	ldr	r3, [pc, #540]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 020f 	bic.w	r2, r3, #15
 8005a3a:	4985      	ldr	r1, [pc, #532]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e184      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	4b7b      	ldr	r3, [pc, #492]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d908      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a70:	4b78      	ldr	r3, [pc, #480]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	4975      	ldr	r1, [pc, #468]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d010      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	4b70      	ldr	r3, [pc, #448]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d908      	bls.n	8005ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a9e:	4b6d      	ldr	r3, [pc, #436]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	496a      	ldr	r1, [pc, #424]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d010      	beq.n	8005ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	4b64      	ldr	r3, [pc, #400]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d908      	bls.n	8005ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005acc:	4b61      	ldr	r3, [pc, #388]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	495e      	ldr	r1, [pc, #376]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d010      	beq.n	8005b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69da      	ldr	r2, [r3, #28]
 8005aee:	4b59      	ldr	r3, [pc, #356]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d908      	bls.n	8005b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005afa:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4953      	ldr	r1, [pc, #332]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d010      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d908      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b28:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f023 020f 	bic.w	r2, r3, #15
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4947      	ldr	r1, [pc, #284]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d055      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b46:	4b43      	ldr	r3, [pc, #268]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4940      	ldr	r1, [pc, #256]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d107      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b60:	4b3c      	ldr	r3, [pc, #240]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d121      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0f6      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b78:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d115      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0ea      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b90:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0de      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ba0:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0d6      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f023 0207 	bic.w	r2, r3, #7
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4925      	ldr	r1, [pc, #148]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc2:	f7fc fd19 	bl	80025f8 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc8:	e00a      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bca:	f7fc fd15 	bl	80025f8 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e0be      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d1eb      	bne.n	8005bca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d208      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c0e:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	490e      	ldr	r1, [pc, #56]	; (8005c54 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d214      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 020f 	bic.w	r2, r3, #15
 8005c36:	4906      	ldr	r1, [pc, #24]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <HAL_RCC_ClockConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e086      	b.n	8005d5e <HAL_RCC_ClockConfig+0x34e>
 8005c50:	52002000 	.word	0x52002000
 8005c54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d010      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d208      	bcs.n	8005c86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c74:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	4939      	ldr	r1, [pc, #228]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d010      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d208      	bcs.n	8005cb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	492e      	ldr	r1, [pc, #184]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	4b28      	ldr	r3, [pc, #160]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d208      	bcs.n	8005ce2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	4922      	ldr	r1, [pc, #136]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d010      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69da      	ldr	r2, [r3, #28]
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d208      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	4917      	ldr	r1, [pc, #92]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d10:	f000 f844 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	4912      	ldr	r1, [pc, #72]	; (8005d6c <HAL_RCC_ClockConfig+0x35c>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_RCC_ClockConfig+0x358>)
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <HAL_RCC_ClockConfig+0x35c>)
 8005d38:	5cd3      	ldrb	r3, [r2, r3]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
 8005d44:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <HAL_RCC_ClockConfig+0x360>)
 8005d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d48:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <HAL_RCC_ClockConfig+0x364>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_ClockConfig+0x368>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fc fc06 	bl	8002564 <HAL_InitTick>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	0800c584 	.word	0x0800c584
 8005d70:	20000018 	.word	0x20000018
 8005d74:	20000014 	.word	0x20000014
 8005d78:	2000001c 	.word	0x2000001c

08005d7c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_RCC_EnableCSS+0x1c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <HAL_RCC_EnableCSS+0x1c>)
 8005d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	58024400 	.word	0x58024400

08005d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da2:	4bb3      	ldr	r3, [pc, #716]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005daa:	2b18      	cmp	r3, #24
 8005dac:	f200 8155 	bhi.w	800605a <HAL_RCC_GetSysClockFreq+0x2be>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005e1d 	.word	0x08005e1d
 8005dbc:	0800605b 	.word	0x0800605b
 8005dc0:	0800605b 	.word	0x0800605b
 8005dc4:	0800605b 	.word	0x0800605b
 8005dc8:	0800605b 	.word	0x0800605b
 8005dcc:	0800605b 	.word	0x0800605b
 8005dd0:	0800605b 	.word	0x0800605b
 8005dd4:	0800605b 	.word	0x0800605b
 8005dd8:	08005e43 	.word	0x08005e43
 8005ddc:	0800605b 	.word	0x0800605b
 8005de0:	0800605b 	.word	0x0800605b
 8005de4:	0800605b 	.word	0x0800605b
 8005de8:	0800605b 	.word	0x0800605b
 8005dec:	0800605b 	.word	0x0800605b
 8005df0:	0800605b 	.word	0x0800605b
 8005df4:	0800605b 	.word	0x0800605b
 8005df8:	08005e49 	.word	0x08005e49
 8005dfc:	0800605b 	.word	0x0800605b
 8005e00:	0800605b 	.word	0x0800605b
 8005e04:	0800605b 	.word	0x0800605b
 8005e08:	0800605b 	.word	0x0800605b
 8005e0c:	0800605b 	.word	0x0800605b
 8005e10:	0800605b 	.word	0x0800605b
 8005e14:	0800605b 	.word	0x0800605b
 8005e18:	08005e4f 	.word	0x08005e4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1c:	4b94      	ldr	r3, [pc, #592]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e28:	4b91      	ldr	r3, [pc, #580]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	4a90      	ldr	r2, [pc, #576]	; (8006074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e3a:	e111      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e3c:	4b8d      	ldr	r3, [pc, #564]	; (8006074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e3e:	61bb      	str	r3, [r7, #24]
      break;
 8005e40:	e10e      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e42:	4b8d      	ldr	r3, [pc, #564]	; (8006078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e44:	61bb      	str	r3, [r7, #24]
      break;
 8005e46:	e10b      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e48:	4b8c      	ldr	r3, [pc, #560]	; (800607c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e4a:	61bb      	str	r3, [r7, #24]
      break;
 8005e4c:	e108      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4e:	4b88      	ldr	r3, [pc, #544]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e58:	4b85      	ldr	r3, [pc, #532]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e64:	4b82      	ldr	r3, [pc, #520]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e6e:	4b80      	ldr	r3, [pc, #512]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80e1 	beq.w	8006054 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f000 8083 	beq.w	8005fa0 <HAL_RCC_GetSysClockFreq+0x204>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	f200 80a1 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x248>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x114>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d056      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005eae:	e099      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb0:	4b6f      	ldr	r3, [pc, #444]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02d      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ebc:	4b6c      	ldr	r3, [pc, #432]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	08db      	lsrs	r3, r3, #3
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	4a6b      	ldr	r2, [pc, #428]	; (8006074 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b62      	ldr	r3, [pc, #392]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f16:	e087      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006084 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b51      	ldr	r3, [pc, #324]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f5a:	e065      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b40      	ldr	r3, [pc, #256]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f9e:	e043      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800608c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fe2:	e021      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006088 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a02 	vldr	s12, [r7, #8]
 800600a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2e4>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006026:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	0a5b      	lsrs	r3, r3, #9
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	3301      	adds	r3, #1
 8006034:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006040:	edd7 6a07 	vldr	s13, [r7, #28]
 8006044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604c:	ee17 3a90 	vmov	r3, s15
 8006050:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006052:	e005      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
      break;
 8006058:	e002      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800605c:	61bb      	str	r3, [r7, #24]
      break;
 800605e:	bf00      	nop
  }

  return sysclockfreq;
 8006060:	69bb      	ldr	r3, [r7, #24]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	03d09000 	.word	0x03d09000
 8006078:	003d0900 	.word	0x003d0900
 800607c:	007f2815 	.word	0x007f2815
 8006080:	46000000 	.word	0x46000000
 8006084:	4c742400 	.word	0x4c742400
 8006088:	4a742400 	.word	0x4a742400
 800608c:	4afe502a 	.word	0x4afe502a

08006090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006096:	f7ff fe81 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490f      	ldr	r1, [pc, #60]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80060be:	5cd3      	ldrb	r3, [r2, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	4a07      	ldr	r2, [pc, #28]	; (80060e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80060cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060ce:	4a07      	ldr	r2, [pc, #28]	; (80060ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80060d6:	681b      	ldr	r3, [r3, #0]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	58024400 	.word	0x58024400
 80060e4:	0800c584 	.word	0x0800c584
 80060e8:	20000018 	.word	0x20000018
 80060ec:	20000014 	.word	0x20000014

080060f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060f4:	f7ff ffcc 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	4904      	ldr	r1, [pc, #16]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006106:	5ccb      	ldrb	r3, [r1, r3]
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	58024400 	.word	0x58024400
 8006118:	0800c584 	.word	0x0800c584

0800611c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006120:	f7ff ffb6 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	58024400 	.word	0x58024400
 8006144:	0800c584 	.word	0x0800c584

08006148 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_RCC_NMI_IRQHandler+0x24>)
 800614e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d105      	bne.n	8006166 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800615a:	f000 f809 	bl	8006170 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800615e:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCC_NMI_IRQHandler+0x24>)
 8006160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006164:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400

08006170 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006184:	b0ca      	sub	sp, #296	; 0x128
 8006186:	af00      	add	r7, sp, #0
 8006188:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006192:	2300      	movs	r3, #0
 8006194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80061a4:	2500      	movs	r5, #0
 80061a6:	ea54 0305 	orrs.w	r3, r4, r5
 80061aa:	d049      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b6:	d02f      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061bc:	d828      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c2:	d01a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c8:	d822      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d2:	d007      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d4:	e01c      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d6:	4bb8      	ldr	r3, [pc, #736]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	4ab7      	ldr	r2, [pc, #732]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061e2:	e01a      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e8:	3308      	adds	r3, #8
 80061ea:	2102      	movs	r1, #2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fce5 	bl	8007bbc <RCCEx_PLL2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061f8:	e00f      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	3328      	adds	r3, #40	; 0x28
 8006200:	2102      	movs	r1, #2
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fd8c 	bl	8007d20 <RCCEx_PLL3_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800620e:	e004      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006216:	e000      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006222:	4ba5      	ldr	r3, [pc, #660]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006226:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	4aa1      	ldr	r2, [pc, #644]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006232:	430b      	orrs	r3, r1
 8006234:	6513      	str	r3, [r2, #80]	; 0x50
 8006236:	e003      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800623c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800624c:	f04f 0900 	mov.w	r9, #0
 8006250:	ea58 0309 	orrs.w	r3, r8, r9
 8006254:	d047      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	2b04      	cmp	r3, #4
 800625e:	d82a      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	0800627d 	.word	0x0800627d
 800626c:	0800628b 	.word	0x0800628b
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062bf 	.word	0x080062bf
 8006278:	080062bf 	.word	0x080062bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627c:	4b8e      	ldr	r3, [pc, #568]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a8d      	ldr	r2, [pc, #564]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006288:	e01a      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628e:	3308      	adds	r3, #8
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fc92 	bl	8007bbc <RCCEx_PLL2_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800629e:	e00f      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	3328      	adds	r3, #40	; 0x28
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fd39 	bl	8007d20 <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b4:	e004      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062c8:	4b7b      	ldr	r3, [pc, #492]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	f023 0107 	bic.w	r1, r3, #7
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	4a78      	ldr	r2, [pc, #480]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6513      	str	r3, [r2, #80]	; 0x50
 80062dc:	e003      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80062f2:	f04f 0b00 	mov.w	fp, #0
 80062f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80062fa:	d04c      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006306:	d030      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630c:	d829      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800630e:	2bc0      	cmp	r3, #192	; 0xc0
 8006310:	d02d      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006312:	2bc0      	cmp	r3, #192	; 0xc0
 8006314:	d825      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d018      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d821      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d007      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006326:	e01c      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b63      	ldr	r3, [pc, #396]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	4a62      	ldr	r2, [pc, #392]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006334:	e01c      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fc3c 	bl	8007bbc <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800634a:	e011      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006350:	3328      	adds	r3, #40	; 0x28
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f001 fce3 	bl	8007d20 <RCCEx_PLL3_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006360:	e006      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006368:	e002      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800636e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006378:	4b4f      	ldr	r3, [pc, #316]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	4a4c      	ldr	r2, [pc, #304]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6513      	str	r3, [r2, #80]	; 0x50
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80063a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d053      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c2:	d035      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80063c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c8:	d82e      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063ce:	d031      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80063d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063d4:	d828      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063da:	d01a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e0:	d822      	bhi.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80063e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ea:	d007      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80063ec:	e01c      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ee:	4b32      	ldr	r3, [pc, #200]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063fa:	e01c      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	3308      	adds	r3, #8
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fbd9 	bl	8007bbc <RCCEx_PLL2_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006410:	e011      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006416:	3328      	adds	r3, #40	; 0x28
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fc80 	bl	8007d20 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006426:	e006      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800642e:	e002      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800643e:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800644e:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006450:	430b      	orrs	r3, r1
 8006452:	6593      	str	r3, [r2, #88]	; 0x58
 8006454:	e003      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800645a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800646a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006474:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d056      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006482:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800648a:	d038      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800648c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006490:	d831      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006496:	d034      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800649c:	d82b      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800649e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064a2:	d01d      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064a8:	d825      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064b4:	e01f      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4ba2      	ldr	r3, [pc, #648]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4aa1      	ldr	r2, [pc, #644]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064c8:	e01c      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	3308      	adds	r3, #8
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fb72 	bl	8007bbc <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064de:	e011      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	3328      	adds	r3, #40	; 0x28
 80064e6:	2100      	movs	r1, #0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fc19 	bl	8007d20 <RCCEx_PLL3_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064f4:	e006      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800650c:	4b8e      	ldr	r3, [pc, #568]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800651c:	4a8a      	ldr	r2, [pc, #552]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651e:	430b      	orrs	r3, r1
 8006520:	6593      	str	r3, [r2, #88]	; 0x58
 8006522:	e003      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800653c:	2300      	movs	r3, #0
 800653e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006542:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d03a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d01f      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006556:	2b30      	cmp	r3, #48	; 0x30
 8006558:	d819      	bhi.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800655a:	2b20      	cmp	r3, #32
 800655c:	d00c      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800655e:	2b20      	cmp	r3, #32
 8006560:	d815      	bhi.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d019      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d111      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656a:	4b77      	ldr	r3, [pc, #476]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a76      	ldr	r2, [pc, #472]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006576:	e011      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	3308      	adds	r3, #8
 800657e:	2102      	movs	r1, #2
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fb1b 	bl	8007bbc <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800658c:	e006      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006594:	e002      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800659a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065a4:	4b68      	ldr	r3, [pc, #416]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b2:	4a65      	ldr	r2, [pc, #404]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b4:	430b      	orrs	r3, r1
 80065b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80065ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065d2:	2300      	movs	r3, #0
 80065d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d051      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ec:	d035      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f2:	d82e      	bhi.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80065f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f8:	d031      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065fe:	d828      	bhi.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d01a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660a:	d822      	bhi.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006614:	d007      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006616:	e01c      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a4a      	ldr	r2, [pc, #296]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006624:	e01c      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662a:	3308      	adds	r3, #8
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fac4 	bl	8007bbc <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800663a:	e011      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006640:	3328      	adds	r3, #40	; 0x28
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fb6b 	bl	8007d20 <RCCEx_PLL3_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800665e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006668:	4b37      	ldr	r3, [pc, #220]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006676:	4a34      	ldr	r2, [pc, #208]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006678:	430b      	orrs	r3, r1
 800667a:	6513      	str	r3, [r2, #80]	; 0x50
 800667c:	e003      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006696:	2300      	movs	r3, #0
 8006698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800669c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80066a0:	460b      	mov	r3, r1
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d056      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b0:	d033      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b6:	d82c      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066bc:	d02f      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80066be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c2:	d826      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c8:	d02b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80066ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066ce:	d820      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d4:	d012      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80066d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066da:	d81a      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d022      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d115      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ea:	3308      	adds	r3, #8
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fa64 	bl	8007bbc <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066fa:	e015      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006700:	3328      	adds	r3, #40	; 0x28
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fb0b 	bl	8007d20 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006710:	e00a      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800671a:	bf00      	nop
 800671c:	e004      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800671e:	bf00      	nop
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10d      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673e:	4a02      	ldr	r2, [pc, #8]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6513      	str	r3, [r2, #80]	; 0x50
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006746:	bf00      	nop
 8006748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800676a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d055      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800677c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006780:	d033      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006786:	d82c      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678c:	d02f      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d826      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006798:	d02b      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800679a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679e:	d820      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d012      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067aa:	d81a      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d022      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80067b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b4:	d115      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ba:	3308      	adds	r3, #8
 80067bc:	2101      	movs	r1, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f9fc 	bl	8007bbc <RCCEx_PLL2_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067ca:	e015      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d0:	3328      	adds	r3, #40	; 0x28
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 faa3 	bl	8007d20 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067e0:	e00a      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006800:	4ba3      	ldr	r3, [pc, #652]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006804:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006810:	4a9f      	ldr	r2, [pc, #636]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006812:	430b      	orrs	r3, r1
 8006814:	6593      	str	r3, [r2, #88]	; 0x58
 8006816:	e003      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800682c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	d037      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684a:	d00e      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800684c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006850:	d816      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d018      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800685a:	d111      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b8c      	ldr	r3, [pc, #560]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a8b      	ldr	r2, [pc, #556]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006868:	e00f      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	3308      	adds	r3, #8
 8006870:	2101      	movs	r1, #1
 8006872:	4618      	mov	r0, r3
 8006874:	f001 f9a2 	bl	8007bbc <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800687e:	e004      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800688a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006892:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006896:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	4a7b      	ldr	r2, [pc, #492]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6513      	str	r3, [r2, #80]	; 0x50
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80068bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	d039      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d81c      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	0800691d 	.word	0x0800691d
 80068e4:	080068f1 	.word	0x080068f1
 80068e8:	080068ff 	.word	0x080068ff
 80068ec:	0800691d 	.word	0x0800691d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b67      	ldr	r3, [pc, #412]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a66      	ldr	r2, [pc, #408]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068fc:	e00f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006902:	3308      	adds	r3, #8
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f958 	bl	8007bbc <RCCEx_PLL2_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006926:	4b5a      	ldr	r3, [pc, #360]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	f023 0103 	bic.w	r1, r3, #3
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006934:	4a56      	ldr	r2, [pc, #344]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006936:	430b      	orrs	r3, r1
 8006938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800695a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800695e:	460b      	mov	r3, r1
 8006960:	4313      	orrs	r3, r2
 8006962:	f000 809f 	beq.w	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006966:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4a      	ldr	r2, [pc, #296]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006972:	f7fb fe41 	bl	80025f8 <HAL_GetTick>
 8006976:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800697a:	e00b      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697c:	f7fb fe3c 	bl	80025f8 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b64      	cmp	r3, #100	; 0x64
 800698a:	d903      	bls.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006992:	e005      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ed      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d179      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069a8:	4b39      	ldr	r3, [pc, #228]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069b4:	4053      	eors	r3, r2
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d015      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069be:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ca:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a30      	ldr	r2, [pc, #192]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a2d      	ldr	r2, [pc, #180]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069e2:	4a2b      	ldr	r2, [pc, #172]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f6:	d118      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb fdfe 	bl	80025f8 <HAL_GetTick>
 80069fc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a00:	e00d      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a02:	f7fb fdf9 	bl	80025f8 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a0c:	1ad2      	subs	r2, r2, r3
 8006a0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d903      	bls.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006a1c:	e005      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0eb      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d129      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a42:	d10e      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a44:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a54:	091a      	lsrs	r2, r3, #4
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6113      	str	r3, [r2, #16]
 8006a60:	e005      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a6c:	6113      	str	r3, [r2, #16]
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7e:	4a04      	ldr	r2, [pc, #16]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6713      	str	r3, [r2, #112]	; 0x70
 8006a84:	e00e      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006a8e:	e009      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a90:	58024400 	.word	0x58024400
 8006a94:	58024800 	.word	0x58024800
 8006a98:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f002 0301 	and.w	r3, r2, #1
 8006ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f000 8089 	beq.w	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006acc:	2b28      	cmp	r3, #40	; 0x28
 8006ace:	d86b      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006bb1 	.word	0x08006bb1
 8006adc:	08006ba9 	.word	0x08006ba9
 8006ae0:	08006ba9 	.word	0x08006ba9
 8006ae4:	08006ba9 	.word	0x08006ba9
 8006ae8:	08006ba9 	.word	0x08006ba9
 8006aec:	08006ba9 	.word	0x08006ba9
 8006af0:	08006ba9 	.word	0x08006ba9
 8006af4:	08006ba9 	.word	0x08006ba9
 8006af8:	08006b7d 	.word	0x08006b7d
 8006afc:	08006ba9 	.word	0x08006ba9
 8006b00:	08006ba9 	.word	0x08006ba9
 8006b04:	08006ba9 	.word	0x08006ba9
 8006b08:	08006ba9 	.word	0x08006ba9
 8006b0c:	08006ba9 	.word	0x08006ba9
 8006b10:	08006ba9 	.word	0x08006ba9
 8006b14:	08006ba9 	.word	0x08006ba9
 8006b18:	08006b93 	.word	0x08006b93
 8006b1c:	08006ba9 	.word	0x08006ba9
 8006b20:	08006ba9 	.word	0x08006ba9
 8006b24:	08006ba9 	.word	0x08006ba9
 8006b28:	08006ba9 	.word	0x08006ba9
 8006b2c:	08006ba9 	.word	0x08006ba9
 8006b30:	08006ba9 	.word	0x08006ba9
 8006b34:	08006ba9 	.word	0x08006ba9
 8006b38:	08006bb1 	.word	0x08006bb1
 8006b3c:	08006ba9 	.word	0x08006ba9
 8006b40:	08006ba9 	.word	0x08006ba9
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006ba9 	.word	0x08006ba9
 8006b4c:	08006ba9 	.word	0x08006ba9
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006ba9 	.word	0x08006ba9
 8006b58:	08006bb1 	.word	0x08006bb1
 8006b5c:	08006ba9 	.word	0x08006ba9
 8006b60:	08006ba9 	.word	0x08006ba9
 8006b64:	08006ba9 	.word	0x08006ba9
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006ba9 	.word	0x08006ba9
 8006b70:	08006ba9 	.word	0x08006ba9
 8006b74:	08006ba9 	.word	0x08006ba9
 8006b78:	08006bb1 	.word	0x08006bb1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b80:	3308      	adds	r3, #8
 8006b82:	2101      	movs	r1, #1
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f819 	bl	8007bbc <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b90:	e00f      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b96:	3328      	adds	r3, #40	; 0x28
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 f8c0 	bl	8007d20 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ba6:	e004      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bba:	4bbf      	ldr	r3, [pc, #764]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc8:	4abb      	ldr	r2, [pc, #748]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6553      	str	r3, [r2, #84]	; 0x54
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f002 0302 	and.w	r3, r2, #2
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	d041      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d824      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c55 	.word	0x08006c55
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c55 	.word	0x08006c55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c24:	3308      	adds	r3, #8
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ffc7 	bl	8007bbc <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3a:	3328      	adds	r3, #40	; 0x28
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f86e 	bl	8007d20 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c5e:	4b96      	ldr	r3, [pc, #600]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f023 0107 	bic.w	r1, r3, #7
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6c:	4a92      	ldr	r2, [pc, #584]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	6553      	str	r3, [r2, #84]	; 0x54
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f002 0304 	and.w	r3, r2, #4
 8006c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d044      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d825      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006cfd 	.word	0x08006cfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ccc:	3308      	adds	r3, #8
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 ff73 	bl	8007bbc <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cdc:	e00f      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce2:	3328      	adds	r3, #40	; 0x28
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f81a 	bl	8007d20 <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d06:	4b6c      	ldr	r3, [pc, #432]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	f023 0107 	bic.w	r1, r3, #7
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d16:	4a68      	ldr	r2, [pc, #416]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0320 	and.w	r3, r2, #32
 8006d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d055      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d02f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d826      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d70:	d820      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d76:	d012      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7c:	d81a      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d86:	d115      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 ff13 	bl	8007bbc <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da2:	3328      	adds	r3, #40	; 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 ffba 	bl	8007d20 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dba:	e006      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	4a35      	ldr	r2, [pc, #212]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6553      	str	r3, [r2, #84]	; 0x54
 8006de8:	e003      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e02:	2300      	movs	r3, #0
 8006e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d058      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e1e:	d033      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e24:	d82c      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d02f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	d826      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e36:	d02b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e3c:	d820      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e42:	d012      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e48:	d81a      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d022      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e52:	d115      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fead 	bl	8007bbc <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e68:	e015      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6e:	3328      	adds	r3, #40	; 0x28
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 ff54 	bl	8007d20 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e7e:	e00a      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e86:	e006      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e88:	bf00      	nop
 8006e8a:	e004      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10e      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eae:	4a02      	ldr	r2, [pc, #8]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d055      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ef0:	d033      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006ef2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ef6:	d82c      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efc:	d02f      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	d826      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f08:	d02b      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f0e:	d820      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f14:	d012      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1a:	d81a      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d022      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f24:	d115      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fe44 	bl	8007bbc <RCCEx_PLL2_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f3a:	e015      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f40:	3328      	adds	r3, #40	; 0x28
 8006f42:	2102      	movs	r1, #2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 feeb 	bl	8007d20 <RCCEx_PLL3_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f50:	e00a      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f70:	4ba1      	ldr	r3, [pc, #644]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f74:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f80:	4a9d      	ldr	r2, [pc, #628]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f82:	430b      	orrs	r3, r1
 8006f84:	6593      	str	r3, [r2, #88]	; 0x58
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f002 0308 	and.w	r3, r2, #8
 8006f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d01e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc2:	3328      	adds	r3, #40	; 0x28
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 feaa 	bl	8007d20 <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fd8:	4b87      	ldr	r3, [pc, #540]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe8:	4a83      	ldr	r2, [pc, #524]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f002 0310 	and.w	r3, r2, #16
 8006ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007004:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d01e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	3328      	adds	r3, #40	; 0x28
 8007022:	2102      	movs	r1, #2
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fe7b 	bl	8007d20 <RCCEx_PLL3_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007036:	4b70      	ldr	r3, [pc, #448]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007046:	4a6c      	ldr	r2, [pc, #432]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007062:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d03e      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007078:	d022      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800707a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707e:	d81b      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007088:	d00b      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800708a:	e015      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007090:	3308      	adds	r3, #8
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fd91 	bl	8007bbc <RCCEx_PLL2_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070a0:	e00f      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a6:	3328      	adds	r3, #40	; 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fe38 	bl	8007d20 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070ca:	4b4b      	ldr	r3, [pc, #300]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070da:	4a47      	ldr	r2, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6593      	str	r3, [r2, #88]	; 0x58
 80070e0:	e003      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80070f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80070f8:	2300      	movs	r3, #0
 80070fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007112:	d01f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007118:	d818      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800711a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711e:	d003      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007124:	d007      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007126:	e011      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	4a32      	ldr	r2, [pc, #200]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	3328      	adds	r3, #40	; 0x28
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fdee 	bl	8007d20 <RCCEx_PLL3_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800715e:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716e:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007170:	430b      	orrs	r3, r1
 8007172:	6553      	str	r3, [r2, #84]	; 0x54
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800717a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800718a:	673b      	str	r3, [r7, #112]	; 0x70
 800718c:	2300      	movs	r3, #0
 800718e:	677b      	str	r3, [r7, #116]	; 0x74
 8007190:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d034      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071b8:	e00e      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071be:	3308      	adds	r3, #8
 80071c0:	2102      	movs	r1, #2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fcfa 	bl	8007bbc <RCCEx_PLL2_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071ce:	e003      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	4a02      	ldr	r2, [pc, #8]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f0:	430b      	orrs	r3, r1
 80071f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
 8007212:	2300      	movs	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007216:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d00c      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007224:	3328      	adds	r3, #40	; 0x28
 8007226:	2102      	movs	r1, #2
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fd79 	bl	8007d20 <RCCEx_PLL3_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007246:	663b      	str	r3, [r7, #96]	; 0x60
 8007248:	2300      	movs	r3, #0
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
 800724c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d038      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007262:	d018      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007268:	d811      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800726a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726e:	d014      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d80b      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d011      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800727a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4bc3      	ldr	r3, [pc, #780]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4ac2      	ldr	r2, [pc, #776]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800728c:	e008      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072a8:	4bb9      	ldr	r3, [pc, #740]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b8:	4ab5      	ldr	r2, [pc, #724]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6553      	str	r3, [r2, #84]	; 0x54
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80072d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d6:	2300      	movs	r3, #0
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072e4:	4baa      	ldr	r3, [pc, #680]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f2:	4aa7      	ldr	r2, [pc, #668]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007304:	653b      	str	r3, [r7, #80]	; 0x50
 8007306:	2300      	movs	r3, #0
 8007308:	657b      	str	r3, [r7, #84]	; 0x54
 800730a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007314:	4b9e      	ldr	r3, [pc, #632]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007320:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007324:	4a9a      	ldr	r2, [pc, #616]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
 8007338:	2300      	movs	r3, #0
 800733a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800733c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007346:	4b92      	ldr	r3, [pc, #584]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007354:	4a8e      	ldr	r2, [pc, #568]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007356:	430b      	orrs	r3, r1
 8007358:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007366:	643b      	str	r3, [r7, #64]	; 0x40
 8007368:	2300      	movs	r3, #0
 800736a:	647b      	str	r3, [r7, #68]	; 0x44
 800736c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007370:	460b      	mov	r3, r1
 8007372:	4313      	orrs	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007376:	4b86      	ldr	r3, [pc, #536]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	4a85      	ldr	r2, [pc, #532]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800737c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007380:	6113      	str	r3, [r2, #16]
 8007382:	4b83      	ldr	r3, [pc, #524]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007384:	6919      	ldr	r1, [r3, #16]
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800738e:	4a80      	ldr	r2, [pc, #512]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007390:	430b      	orrs	r3, r1
 8007392:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80073a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073b0:	4b77      	ldr	r3, [pc, #476]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	4a74      	ldr	r2, [pc, #464]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c0:	430b      	orrs	r3, r1
 80073c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80073d0:	633b      	str	r3, [r7, #48]	; 0x30
 80073d2:	2300      	movs	r3, #0
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80073da:	460b      	mov	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073e0:	4b6b      	ldr	r3, [pc, #428]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	4a67      	ldr	r2, [pc, #412]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073f2:	430b      	orrs	r3, r1
 80073f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	2100      	movs	r1, #0
 8007400:	62b9      	str	r1, [r7, #40]	; 0x28
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007408:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800740c:	460b      	mov	r3, r1
 800740e:	4313      	orrs	r3, r2
 8007410:	d011      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007416:	3308      	adds	r3, #8
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fbce 	bl	8007bbc <RCCEx_PLL2_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	2100      	movs	r1, #0
 8007440:	6239      	str	r1, [r7, #32]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
 8007448:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800744c:	460b      	mov	r3, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	d011      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007456:	3308      	adds	r3, #8
 8007458:	2101      	movs	r1, #1
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fbae 	bl	8007bbc <RCCEx_PLL2_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	2100      	movs	r1, #0
 8007480:	61b9      	str	r1, [r7, #24]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800748c:	460b      	mov	r3, r1
 800748e:	4313      	orrs	r3, r2
 8007490:	d011      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007496:	3308      	adds	r3, #8
 8007498:	2102      	movs	r1, #2
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fb8e 	bl	8007bbc <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	2100      	movs	r1, #0
 80074c0:	6139      	str	r1, [r7, #16]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d011      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d6:	3328      	adds	r3, #40	; 0x28
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fc20 	bl	8007d20 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80074e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	2100      	movs	r1, #0
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800750c:	460b      	mov	r3, r1
 800750e:	4313      	orrs	r3, r2
 8007510:	d011      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007516:	3328      	adds	r3, #40	; 0x28
 8007518:	2101      	movs	r1, #1
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fc00 	bl	8007d20 <RCCEx_PLL3_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	2100      	movs	r1, #0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e9d7 1200 	ldrd	r1, r2, [r7]
 800754c:	460b      	mov	r3, r1
 800754e:	4313      	orrs	r3, r2
 8007550:	d011      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007556:	3328      	adds	r3, #40	; 0x28
 8007558:	2102      	movs	r1, #2
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fbe0 	bl	8007d20 <RCCEx_PLL3_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007576:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
}
 8007584:	4618      	mov	r0, r3
 8007586:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800758a:	46bd      	mov	sp, r7
 800758c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007590:	58024400 	.word	0x58024400

08007594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007598:	f7fe fd7a 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4904      	ldr	r1, [pc, #16]	; (80075bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	58024400 	.word	0x58024400
 80075bc:	0800c584 	.word	0x0800c584

080075c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	; 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075c8:	4ba1      	ldr	r3, [pc, #644]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075d2:	4b9f      	ldr	r3, [pc, #636]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	0b1b      	lsrs	r3, r3, #12
 80075d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075de:	4b9c      	ldr	r3, [pc, #624]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075ea:	4b99      	ldr	r3, [pc, #612]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8111 	beq.w	8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b02      	cmp	r3, #2
 8007612:	f000 8083 	beq.w	800771c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f200 80a1 	bhi.w	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d056      	beq.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800762a:	e099      	b.n	8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800762c:	4b88      	ldr	r3, [pc, #544]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d02d      	beq.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007638:	4b85      	ldr	r3, [pc, #532]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	4a84      	ldr	r2, [pc, #528]	; (8007854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007692:	e087      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800785c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b6a      	ldr	r3, [pc, #424]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	e065      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e043      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b48      	ldr	r3, [pc, #288]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	e021      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077a4:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	0a5b      	lsrs	r3, r3, #9
 80077aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077be:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ca:	ee17 2a90 	vmov	r2, s15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	0c1b      	lsrs	r3, r3, #16
 80077d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f8:	ee17 2a90 	vmov	r2, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007800:	4b13      	ldr	r3, [pc, #76]	; (8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	0e1b      	lsrs	r3, r3, #24
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781a:	edd7 6a07 	vldr	s13, [r7, #28]
 800781e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007826:	ee17 2a90 	vmov	r2, s15
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800782e:	e008      	b.n	8007842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	609a      	str	r2, [r3, #8]
}
 8007842:	bf00      	nop
 8007844:	3724      	adds	r7, #36	; 0x24
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	58024400 	.word	0x58024400
 8007854:	03d09000 	.word	0x03d09000
 8007858:	46000000 	.word	0x46000000
 800785c:	4c742400 	.word	0x4c742400
 8007860:	4a742400 	.word	0x4a742400
 8007864:	4afe502a 	.word	0x4afe502a

08007868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	; 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007870:	4ba1      	ldr	r3, [pc, #644]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800787a:	4b9f      	ldr	r3, [pc, #636]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	0d1b      	lsrs	r3, r3, #20
 8007880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007886:	4b9c      	ldr	r3, [pc, #624]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007892:	4b99      	ldr	r3, [pc, #612]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	08db      	lsrs	r3, r3, #3
 8007898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8111 	beq.w	8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f000 8083 	beq.w	80079c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	f200 80a1 	bhi.w	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d056      	beq.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078d2:	e099      	b.n	8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d4:	4b88      	ldr	r3, [pc, #544]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02d      	beq.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e0:	4b85      	ldr	r3, [pc, #532]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	4a84      	ldr	r2, [pc, #528]	; (8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b7b      	ldr	r3, [pc, #492]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800793a:	e087      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b6a      	ldr	r3, [pc, #424]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797e:	e065      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b59      	ldr	r3, [pc, #356]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c2:	e043      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b48      	ldr	r3, [pc, #288]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a06:	e021      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b37      	ldr	r3, [pc, #220]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	0a5b      	lsrs	r3, r3, #9
 8007a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a72:	ee17 2a90 	vmov	r2, s15
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa0:	ee17 2a90 	vmov	r2, s15
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ace:	ee17 2a90 	vmov	r2, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ad6:	e008      	b.n	8007aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
}
 8007aea:	bf00      	nop
 8007aec:	3724      	adds	r7, #36	; 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	03d09000 	.word	0x03d09000
 8007b00:	46000000 	.word	0x46000000
 8007b04:	4c742400 	.word	0x4c742400
 8007b08:	4a742400 	.word	0x4a742400
 8007b0c:	4afe502a 	.word	0x4afe502a

08007b10 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007b18:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b1e:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b20:	f043 0302 	orr.w	r3, r3, #2
 8007b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007b28:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2e:	4a21      	ldr	r2, [pc, #132]	; (8007bb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b30:	f023 0302 	bic.w	r3, r3, #2
 8007b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007b38:	f7fa fdae 	bl	8002698 <HAL_GetREVID>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d80b      	bhi.n	8007b5e <HAL_RCCEx_CRSConfig+0x4e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b4e:	d106      	bne.n	8007b5e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e008      	b.n	8007b70 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007b86:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	4907      	ldr	r1, [pc, #28]	; (8007bb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8007ba6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007baa:	6013      	str	r3, [r2, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	40008400 	.word	0x40008400

08007bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bca:	4b53      	ldr	r3, [pc, #332]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d101      	bne.n	8007bda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e099      	b.n	8007d0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007bda:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a4e      	ldr	r2, [pc, #312]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be6:	f7fa fd07 	bl	80025f8 <HAL_GetTick>
 8007bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bec:	e008      	b.n	8007c00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bee:	f7fa fd03 	bl	80025f8 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e086      	b.n	8007d0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c00:	4b45      	ldr	r3, [pc, #276]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f0      	bne.n	8007bee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c0c:	4b42      	ldr	r3, [pc, #264]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	493f      	ldr	r1, [pc, #252]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	025b      	lsls	r3, r3, #9
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c50:	4931      	ldr	r1, [pc, #196]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c56:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	492d      	ldr	r1, [pc, #180]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f023 0220 	bic.w	r2, r3, #32
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	4928      	ldr	r1, [pc, #160]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c7a:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c86:	4b24      	ldr	r3, [pc, #144]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <RCCEx_PLL2_Config+0x160>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	69d2      	ldr	r2, [r2, #28]
 8007c92:	00d2      	lsls	r2, r2, #3
 8007c94:	4920      	ldr	r1, [pc, #128]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	f043 0310 	orr.w	r3, r3, #16
 8007ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb8:	e00f      	b.n	8007cda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d106      	bne.n	8007cce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cc0:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ccc:	e005      	b.n	8007cda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007cda:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a0e      	ldr	r2, [pc, #56]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce6:	f7fa fc87 	bl	80025f8 <HAL_GetTick>
 8007cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cec:	e008      	b.n	8007d00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cee:	f7fa fc83 	bl	80025f8 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d901      	bls.n	8007d00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e006      	b.n	8007d0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <RCCEx_PLL2_Config+0x15c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0f0      	beq.n	8007cee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	ffff0007 	.word	0xffff0007

08007d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d2e:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d101      	bne.n	8007d3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e099      	b.n	8007e72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d3e:	4b4f      	ldr	r3, [pc, #316]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a4e      	ldr	r2, [pc, #312]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d4a:	f7fa fc55 	bl	80025f8 <HAL_GetTick>
 8007d4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d50:	e008      	b.n	8007d64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d52:	f7fa fc51 	bl	80025f8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e086      	b.n	8007e72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d64:	4b45      	ldr	r3, [pc, #276]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f0      	bne.n	8007d52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d70:	4b42      	ldr	r3, [pc, #264]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	051b      	lsls	r3, r3, #20
 8007d7e:	493f      	ldr	r1, [pc, #252]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	628b      	str	r3, [r1, #40]	; 0x28
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	025b      	lsls	r3, r3, #9
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	061b      	lsls	r3, r3, #24
 8007db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007db4:	4931      	ldr	r1, [pc, #196]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dba:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	492d      	ldr	r1, [pc, #180]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	4928      	ldr	r1, [pc, #160]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007dde:	4b27      	ldr	r3, [pc, #156]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dee:	4b24      	ldr	r3, [pc, #144]	; (8007e80 <RCCEx_PLL3_Config+0x160>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	69d2      	ldr	r2, [r2, #28]
 8007df6:	00d2      	lsls	r2, r2, #3
 8007df8:	4920      	ldr	r1, [pc, #128]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	4a1e      	ldr	r2, [pc, #120]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e10:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e1c:	e00f      	b.n	8007e3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d106      	bne.n	8007e32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e30:	e005      	b.n	8007e3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a0e      	ldr	r2, [pc, #56]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4a:	f7fa fbd5 	bl	80025f8 <HAL_GetTick>
 8007e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e50:	e008      	b.n	8007e64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e52:	f7fa fbd1 	bl	80025f8 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e006      	b.n	8007e72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <RCCEx_PLL3_Config+0x15c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	58024400 	.word	0x58024400
 8007e80:	ffff0007 	.word	0xffff0007

08007e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e049      	b.n	8007f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fa f8a6 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f000 f92e 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e0dc      	b.n	800810a <HAL_TIM_ConfigClockSource+0x1d6>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a64      	ldr	r2, [pc, #400]	; (8008118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	f000 80a9 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8007f8c:	4a62      	ldr	r2, [pc, #392]	; (8008118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	f200 80ae 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f94:	4a61      	ldr	r2, [pc, #388]	; (800811c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	f000 80a1 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8007f9c:	4a5f      	ldr	r2, [pc, #380]	; (800811c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	f200 80a6 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa4:	4a5e      	ldr	r2, [pc, #376]	; (8008120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	f000 8099 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8007fac:	4a5c      	ldr	r2, [pc, #368]	; (8008120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f200 809e 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fb8:	f000 8091 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8007fbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fc0:	f200 8096 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fc8:	f000 8089 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8007fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd0:	f200 808e 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd8:	d03e      	beq.n	8008058 <HAL_TIM_ConfigClockSource+0x124>
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fde:	f200 8087 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	f000 8086 	beq.w	80080f6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fee:	d87f      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff0:	2b70      	cmp	r3, #112	; 0x70
 8007ff2:	d01a      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xf6>
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d87b      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff8:	2b60      	cmp	r3, #96	; 0x60
 8007ffa:	d050      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x16a>
 8007ffc:	2b60      	cmp	r3, #96	; 0x60
 8007ffe:	d877      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008000:	2b50      	cmp	r3, #80	; 0x50
 8008002:	d03c      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x14a>
 8008004:	2b50      	cmp	r3, #80	; 0x50
 8008006:	d873      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d058      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x18a>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d86f      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008010:	2b30      	cmp	r3, #48	; 0x30
 8008012:	d064      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d86b      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008018:	2b20      	cmp	r3, #32
 800801a:	d060      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d867      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d05c      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8008024:	2b10      	cmp	r3, #16
 8008026:	d05a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x1aa>
 8008028:	e062      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6899      	ldr	r1, [r3, #8]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f000 f98b 	bl	8008354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800804c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	609a      	str	r2, [r3, #8]
      break;
 8008056:	e04f      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6899      	ldr	r1, [r3, #8]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f000 f974 	bl	8008354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807a:	609a      	str	r2, [r3, #8]
      break;
 800807c:	e03c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	461a      	mov	r2, r3
 800808c:	f000 f8e4 	bl	8008258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2150      	movs	r1, #80	; 0x50
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f93e 	bl	8008318 <TIM_ITRx_SetConfig>
      break;
 800809c:	e02c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6859      	ldr	r1, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f000 f903 	bl	80082b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2160      	movs	r1, #96	; 0x60
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f92e 	bl	8008318 <TIM_ITRx_SetConfig>
      break;
 80080bc:	e01c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f000 f8c4 	bl	8008258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2140      	movs	r1, #64	; 0x40
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f91e 	bl	8008318 <TIM_ITRx_SetConfig>
      break;
 80080dc:	e00c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f000 f915 	bl	8008318 <TIM_ITRx_SetConfig>
      break;
 80080ee:	e003      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e000      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80080f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	ffceff88 	.word	0xffceff88
 8008118:	00100040 	.word	0x00100040
 800811c:	00100030 	.word	0x00100030
 8008120:	00100020 	.word	0x00100020

08008124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a40      	ldr	r2, [pc, #256]	; (8008238 <TIM_Base_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d00f      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a3d      	ldr	r2, [pc, #244]	; (800823c <TIM_Base_SetConfig+0x118>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a3c      	ldr	r2, [pc, #240]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a3b      	ldr	r2, [pc, #236]	; (8008244 <TIM_Base_SetConfig+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a3a      	ldr	r2, [pc, #232]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <TIM_Base_SetConfig+0x114>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01f      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d01b      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a2c      	ldr	r2, [pc, #176]	; (800823c <TIM_Base_SetConfig+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d017      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <TIM_Base_SetConfig+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00f      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a29      	ldr	r2, [pc, #164]	; (8008248 <TIM_Base_SetConfig+0x124>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00b      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a28      	ldr	r2, [pc, #160]	; (800824c <TIM_Base_SetConfig+0x128>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d007      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <TIM_Base_SetConfig+0x12c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <TIM_Base_SetConfig+0x9a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a26      	ldr	r2, [pc, #152]	; (8008254 <TIM_Base_SetConfig+0x130>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d108      	bne.n	80081d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a10      	ldr	r2, [pc, #64]	; (8008238 <TIM_Base_SetConfig+0x114>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00f      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00b      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a11      	ldr	r2, [pc, #68]	; (800824c <TIM_Base_SetConfig+0x128>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a10      	ldr	r2, [pc, #64]	; (8008250 <TIM_Base_SetConfig+0x12c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <TIM_Base_SetConfig+0x130>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d103      	bne.n	8008224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40010000 	.word	0x40010000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40010400 	.word	0x40010400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800

08008258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f023 030a 	bic.w	r3, r3, #10
 8008294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	621a      	str	r2, [r3, #32]
}
 80082aa:	bf00      	nop
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b087      	sub	sp, #28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f023 0210 	bic.w	r2, r3, #16
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	031b      	lsls	r3, r3, #12
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	621a      	str	r2, [r3, #32]
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <TIM_ITRx_SetConfig+0x38>)
 800832c:	4013      	ands	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	f043 0307 	orr.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	609a      	str	r2, [r3, #8]
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	ffcfff8f 	.word	0xffcfff8f

08008354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800836e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	021a      	lsls	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	431a      	orrs	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e06d      	b.n	8008488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a30      	ldr	r2, [pc, #192]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2f      	ldr	r2, [pc, #188]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d108      	bne.n	80083f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d022      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841e:	d01d      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1d      	ldr	r2, [pc, #116]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d018      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d013      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1a      	ldr	r2, [pc, #104]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00e      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a15      	ldr	r2, [pc, #84]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d009      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a16      	ldr	r2, [pc, #88]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d004      	beq.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a15      	ldr	r2, [pc, #84]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d10c      	bne.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40010000 	.word	0x40010000
 8008498:	40010400 	.word	0x40010400
 800849c:	40000400 	.word	0x40000400
 80084a0:	40000800 	.word	0x40000800
 80084a4:	40000c00 	.word	0x40000c00
 80084a8:	40001800 	.word	0x40001800
 80084ac:	40014000 	.word	0x40014000

080084b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e042      	b.n	8008548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7f9 fdcb 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	; 0x24
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8ba 	bl	800866c <UART_SetConfig>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e022      	b.n	8008548 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fe16 	bl	800913c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800851e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800852e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fe9d 	bl	8009280 <UART_CheckIdleState>
 8008546:	4603      	mov	r3, r0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	; 0x28
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008566:	2b20      	cmp	r3, #32
 8008568:	d17b      	bne.n	8008662 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_UART_Transmit+0x26>
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e074      	b.n	8008664 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2221      	movs	r2, #33	; 0x21
 8008586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800858a:	f7fa f835 	bl	80025f8 <HAL_GetTick>
 800858e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	88fa      	ldrh	r2, [r7, #6]
 8008594:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	88fa      	ldrh	r2, [r7, #6]
 800859c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a8:	d108      	bne.n	80085bc <HAL_UART_Transmit+0x6c>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	e003      	b.n	80085c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085c4:	e030      	b.n	8008628 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2200      	movs	r2, #0
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 feff 	bl	80093d4 <UART_WaitOnFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2220      	movs	r2, #32
 80085e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e03d      	b.n	8008664 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	3302      	adds	r3, #2
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e007      	b.n	8008616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3301      	adds	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1c8      	bne.n	80085c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2200      	movs	r2, #0
 800863c:	2140      	movs	r1, #64	; 0x40
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fec8 	bl	80093d4 <UART_WaitOnFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e006      	b.n	8008664 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	e000      	b.n	8008664 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008662:	2302      	movs	r3, #2
  }
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800866c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008670:	b092      	sub	sp, #72	; 0x48
 8008672:	af00      	add	r7, sp, #0
 8008674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	431a      	orrs	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	431a      	orrs	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4313      	orrs	r3, r2
 8008692:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4bbe      	ldr	r3, [pc, #760]	; (8008994 <UART_SetConfig+0x328>)
 800869c:	4013      	ands	r3, r2
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4ab3      	ldr	r2, [pc, #716]	; (8008998 <UART_SetConfig+0x32c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d004      	beq.n	80086d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086d4:	4313      	orrs	r3, r2
 80086d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	4baf      	ldr	r3, [pc, #700]	; (800899c <UART_SetConfig+0x330>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086e8:	430b      	orrs	r3, r1
 80086ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f023 010f 	bic.w	r1, r3, #15
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4aa6      	ldr	r2, [pc, #664]	; (80089a0 <UART_SetConfig+0x334>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d177      	bne.n	80087fc <UART_SetConfig+0x190>
 800870c:	4ba5      	ldr	r3, [pc, #660]	; (80089a4 <UART_SetConfig+0x338>)
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008714:	2b28      	cmp	r3, #40	; 0x28
 8008716:	d86d      	bhi.n	80087f4 <UART_SetConfig+0x188>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0xb4>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	080087c5 	.word	0x080087c5
 8008724:	080087f5 	.word	0x080087f5
 8008728:	080087f5 	.word	0x080087f5
 800872c:	080087f5 	.word	0x080087f5
 8008730:	080087f5 	.word	0x080087f5
 8008734:	080087f5 	.word	0x080087f5
 8008738:	080087f5 	.word	0x080087f5
 800873c:	080087f5 	.word	0x080087f5
 8008740:	080087cd 	.word	0x080087cd
 8008744:	080087f5 	.word	0x080087f5
 8008748:	080087f5 	.word	0x080087f5
 800874c:	080087f5 	.word	0x080087f5
 8008750:	080087f5 	.word	0x080087f5
 8008754:	080087f5 	.word	0x080087f5
 8008758:	080087f5 	.word	0x080087f5
 800875c:	080087f5 	.word	0x080087f5
 8008760:	080087d5 	.word	0x080087d5
 8008764:	080087f5 	.word	0x080087f5
 8008768:	080087f5 	.word	0x080087f5
 800876c:	080087f5 	.word	0x080087f5
 8008770:	080087f5 	.word	0x080087f5
 8008774:	080087f5 	.word	0x080087f5
 8008778:	080087f5 	.word	0x080087f5
 800877c:	080087f5 	.word	0x080087f5
 8008780:	080087dd 	.word	0x080087dd
 8008784:	080087f5 	.word	0x080087f5
 8008788:	080087f5 	.word	0x080087f5
 800878c:	080087f5 	.word	0x080087f5
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080087f5 	.word	0x080087f5
 8008798:	080087f5 	.word	0x080087f5
 800879c:	080087f5 	.word	0x080087f5
 80087a0:	080087e5 	.word	0x080087e5
 80087a4:	080087f5 	.word	0x080087f5
 80087a8:	080087f5 	.word	0x080087f5
 80087ac:	080087f5 	.word	0x080087f5
 80087b0:	080087f5 	.word	0x080087f5
 80087b4:	080087f5 	.word	0x080087f5
 80087b8:	080087f5 	.word	0x080087f5
 80087bc:	080087f5 	.word	0x080087f5
 80087c0:	080087ed 	.word	0x080087ed
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e222      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087cc:	2304      	movs	r3, #4
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e21e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087d4:	2308      	movs	r3, #8
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e21a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087dc:	2310      	movs	r3, #16
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e216      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087e4:	2320      	movs	r3, #32
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e212      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087ec:	2340      	movs	r3, #64	; 0x40
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e20e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087f4:	2380      	movs	r3, #128	; 0x80
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e20a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a69      	ldr	r2, [pc, #420]	; (80089a8 <UART_SetConfig+0x33c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d130      	bne.n	8008868 <UART_SetConfig+0x1fc>
 8008806:	4b67      	ldr	r3, [pc, #412]	; (80089a4 <UART_SetConfig+0x338>)
 8008808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	2b05      	cmp	r3, #5
 8008810:	d826      	bhi.n	8008860 <UART_SetConfig+0x1f4>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <UART_SetConfig+0x1ac>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008831 	.word	0x08008831
 800881c:	08008839 	.word	0x08008839
 8008820:	08008841 	.word	0x08008841
 8008824:	08008849 	.word	0x08008849
 8008828:	08008851 	.word	0x08008851
 800882c:	08008859 	.word	0x08008859
 8008830:	2300      	movs	r3, #0
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e1ec      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008838:	2304      	movs	r3, #4
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e1e8      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008840:	2308      	movs	r3, #8
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e1e4      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008848:	2310      	movs	r3, #16
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e1e0      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008850:	2320      	movs	r3, #32
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e1dc      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e1d8      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e1d4      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a4f      	ldr	r2, [pc, #316]	; (80089ac <UART_SetConfig+0x340>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d130      	bne.n	80088d4 <UART_SetConfig+0x268>
 8008872:	4b4c      	ldr	r3, [pc, #304]	; (80089a4 <UART_SetConfig+0x338>)
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b05      	cmp	r3, #5
 800887c:	d826      	bhi.n	80088cc <UART_SetConfig+0x260>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x218>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088a5 	.word	0x080088a5
 800888c:	080088ad 	.word	0x080088ad
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088bd 	.word	0x080088bd
 8008898:	080088c5 	.word	0x080088c5
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e1b6      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088a4:	2304      	movs	r3, #4
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e1b2      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088ac:	2308      	movs	r3, #8
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e1ae      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088b4:	2310      	movs	r3, #16
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e1aa      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088bc:	2320      	movs	r3, #32
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c2:	e1a6      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ca:	e1a2      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e19e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a35      	ldr	r2, [pc, #212]	; (80089b0 <UART_SetConfig+0x344>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d130      	bne.n	8008940 <UART_SetConfig+0x2d4>
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <UART_SetConfig+0x338>)
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d826      	bhi.n	8008938 <UART_SetConfig+0x2cc>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x284>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008909 	.word	0x08008909
 80088f4:	08008911 	.word	0x08008911
 80088f8:	08008919 	.word	0x08008919
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008929 	.word	0x08008929
 8008904:	08008931 	.word	0x08008931
 8008908:	2300      	movs	r3, #0
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e180      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008910:	2304      	movs	r3, #4
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e17c      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008918:	2308      	movs	r3, #8
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e178      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008920:	2310      	movs	r3, #16
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e174      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008928:	2320      	movs	r3, #32
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e170      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e16c      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e168      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <UART_SetConfig+0x348>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d142      	bne.n	80089d0 <UART_SetConfig+0x364>
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <UART_SetConfig+0x338>)
 800894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	2b05      	cmp	r3, #5
 8008954:	d838      	bhi.n	80089c8 <UART_SetConfig+0x35c>
 8008956:	a201      	add	r2, pc, #4	; (adr r2, 800895c <UART_SetConfig+0x2f0>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	08008975 	.word	0x08008975
 8008960:	0800897d 	.word	0x0800897d
 8008964:	08008985 	.word	0x08008985
 8008968:	0800898d 	.word	0x0800898d
 800896c:	080089b9 	.word	0x080089b9
 8008970:	080089c1 	.word	0x080089c1
 8008974:	2300      	movs	r3, #0
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e14a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 800897c:	2304      	movs	r3, #4
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e146      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008984:	2308      	movs	r3, #8
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e142      	b.n	8008c12 <UART_SetConfig+0x5a6>
 800898c:	2310      	movs	r3, #16
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008992:	e13e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008994:	cfff69f3 	.word	0xcfff69f3
 8008998:	58000c00 	.word	0x58000c00
 800899c:	11fff4ff 	.word	0x11fff4ff
 80089a0:	40011000 	.word	0x40011000
 80089a4:	58024400 	.word	0x58024400
 80089a8:	40004400 	.word	0x40004400
 80089ac:	40004800 	.word	0x40004800
 80089b0:	40004c00 	.word	0x40004c00
 80089b4:	40005000 	.word	0x40005000
 80089b8:	2320      	movs	r3, #32
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e128      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e124      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e120      	b.n	8008c12 <UART_SetConfig+0x5a6>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4acb      	ldr	r2, [pc, #812]	; (8008d04 <UART_SetConfig+0x698>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d176      	bne.n	8008ac8 <UART_SetConfig+0x45c>
 80089da:	4bcb      	ldr	r3, [pc, #812]	; (8008d08 <UART_SetConfig+0x69c>)
 80089dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e2:	2b28      	cmp	r3, #40	; 0x28
 80089e4:	d86c      	bhi.n	8008ac0 <UART_SetConfig+0x454>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0x380>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a91 	.word	0x08008a91
 80089f0:	08008ac1 	.word	0x08008ac1
 80089f4:	08008ac1 	.word	0x08008ac1
 80089f8:	08008ac1 	.word	0x08008ac1
 80089fc:	08008ac1 	.word	0x08008ac1
 8008a00:	08008ac1 	.word	0x08008ac1
 8008a04:	08008ac1 	.word	0x08008ac1
 8008a08:	08008ac1 	.word	0x08008ac1
 8008a0c:	08008a99 	.word	0x08008a99
 8008a10:	08008ac1 	.word	0x08008ac1
 8008a14:	08008ac1 	.word	0x08008ac1
 8008a18:	08008ac1 	.word	0x08008ac1
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac1 	.word	0x08008ac1
 8008a28:	08008ac1 	.word	0x08008ac1
 8008a2c:	08008aa1 	.word	0x08008aa1
 8008a30:	08008ac1 	.word	0x08008ac1
 8008a34:	08008ac1 	.word	0x08008ac1
 8008a38:	08008ac1 	.word	0x08008ac1
 8008a3c:	08008ac1 	.word	0x08008ac1
 8008a40:	08008ac1 	.word	0x08008ac1
 8008a44:	08008ac1 	.word	0x08008ac1
 8008a48:	08008ac1 	.word	0x08008ac1
 8008a4c:	08008aa9 	.word	0x08008aa9
 8008a50:	08008ac1 	.word	0x08008ac1
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008ac1 	.word	0x08008ac1
 8008a60:	08008ac1 	.word	0x08008ac1
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ac1 	.word	0x08008ac1
 8008a6c:	08008ab1 	.word	0x08008ab1
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	08008ac1 	.word	0x08008ac1
 8008a78:	08008ac1 	.word	0x08008ac1
 8008a7c:	08008ac1 	.word	0x08008ac1
 8008a80:	08008ac1 	.word	0x08008ac1
 8008a84:	08008ac1 	.word	0x08008ac1
 8008a88:	08008ac1 	.word	0x08008ac1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e0bc      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e0b8      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e0b4      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e0b0      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008ab0:	2320      	movs	r3, #32
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e0ac      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e0a8      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008ac0:	2380      	movs	r3, #128	; 0x80
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e0a4      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a8f      	ldr	r2, [pc, #572]	; (8008d0c <UART_SetConfig+0x6a0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d130      	bne.n	8008b34 <UART_SetConfig+0x4c8>
 8008ad2:	4b8d      	ldr	r3, [pc, #564]	; (8008d08 <UART_SetConfig+0x69c>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d826      	bhi.n	8008b2c <UART_SetConfig+0x4c0>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0x478>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008afd 	.word	0x08008afd
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b1d 	.word	0x08008b1d
 8008af8:	08008b25 	.word	0x08008b25
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e086      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b04:	2304      	movs	r3, #4
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e082      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b0c:	2308      	movs	r3, #8
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e07e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b14:	2310      	movs	r3, #16
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e07a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e076      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b24:	2340      	movs	r3, #64	; 0x40
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e072      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e06e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a75      	ldr	r2, [pc, #468]	; (8008d10 <UART_SetConfig+0x6a4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d130      	bne.n	8008ba0 <UART_SetConfig+0x534>
 8008b3e:	4b72      	ldr	r3, [pc, #456]	; (8008d08 <UART_SetConfig+0x69c>)
 8008b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d826      	bhi.n	8008b98 <UART_SetConfig+0x52c>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x4e4>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b69 	.word	0x08008b69
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b91 	.word	0x08008b91
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e050      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b70:	2304      	movs	r3, #4
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e04c      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e048      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b80:	2310      	movs	r3, #16
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e044      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b88:	2320      	movs	r3, #32
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e040      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e03c      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e038      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a5b      	ldr	r2, [pc, #364]	; (8008d14 <UART_SetConfig+0x6a8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d130      	bne.n	8008c0c <UART_SetConfig+0x5a0>
 8008baa:	4b57      	ldr	r3, [pc, #348]	; (8008d08 <UART_SetConfig+0x69c>)
 8008bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	2b05      	cmp	r3, #5
 8008bb4:	d826      	bhi.n	8008c04 <UART_SetConfig+0x598>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <UART_SetConfig+0x550>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bd5 	.word	0x08008bd5
 8008bc0:	08008bdd 	.word	0x08008bdd
 8008bc4:	08008be5 	.word	0x08008be5
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e01a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e016      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008be4:	2308      	movs	r3, #8
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e012      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008bec:	2310      	movs	r3, #16
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e00e      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e00a      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e006      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e002      	b.n	8008c12 <UART_SetConfig+0x5a6>
 8008c0c:	2380      	movs	r3, #128	; 0x80
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a3f      	ldr	r2, [pc, #252]	; (8008d14 <UART_SetConfig+0x6a8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	f040 80f8 	bne.w	8008e0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	dc46      	bgt.n	8008cb4 <UART_SetConfig+0x648>
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	f2c0 8082 	blt.w	8008d30 <UART_SetConfig+0x6c4>
 8008c2c:	3b02      	subs	r3, #2
 8008c2e:	2b1e      	cmp	r3, #30
 8008c30:	d87e      	bhi.n	8008d30 <UART_SetConfig+0x6c4>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <UART_SetConfig+0x5cc>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008cbb 	.word	0x08008cbb
 8008c3c:	08008d31 	.word	0x08008d31
 8008c40:	08008cc3 	.word	0x08008cc3
 8008c44:	08008d31 	.word	0x08008d31
 8008c48:	08008d31 	.word	0x08008d31
 8008c4c:	08008d31 	.word	0x08008d31
 8008c50:	08008cd3 	.word	0x08008cd3
 8008c54:	08008d31 	.word	0x08008d31
 8008c58:	08008d31 	.word	0x08008d31
 8008c5c:	08008d31 	.word	0x08008d31
 8008c60:	08008d31 	.word	0x08008d31
 8008c64:	08008d31 	.word	0x08008d31
 8008c68:	08008d31 	.word	0x08008d31
 8008c6c:	08008d31 	.word	0x08008d31
 8008c70:	08008ce3 	.word	0x08008ce3
 8008c74:	08008d31 	.word	0x08008d31
 8008c78:	08008d31 	.word	0x08008d31
 8008c7c:	08008d31 	.word	0x08008d31
 8008c80:	08008d31 	.word	0x08008d31
 8008c84:	08008d31 	.word	0x08008d31
 8008c88:	08008d31 	.word	0x08008d31
 8008c8c:	08008d31 	.word	0x08008d31
 8008c90:	08008d31 	.word	0x08008d31
 8008c94:	08008d31 	.word	0x08008d31
 8008c98:	08008d31 	.word	0x08008d31
 8008c9c:	08008d31 	.word	0x08008d31
 8008ca0:	08008d31 	.word	0x08008d31
 8008ca4:	08008d31 	.word	0x08008d31
 8008ca8:	08008d31 	.word	0x08008d31
 8008cac:	08008d31 	.word	0x08008d31
 8008cb0:	08008d23 	.word	0x08008d23
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d037      	beq.n	8008d28 <UART_SetConfig+0x6bc>
 8008cb8:	e03a      	b.n	8008d30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cba:	f7fe fc6b 	bl	8007594 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cc0:	e03c      	b.n	8008d3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fc7a 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd0:	e034      	b.n	8008d3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd2:	f107 0318 	add.w	r3, r7, #24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fdc6 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce0:	e02c      	b.n	8008d3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <UART_SetConfig+0x69c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d016      	beq.n	8008d1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <UART_SetConfig+0x69c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	08db      	lsrs	r3, r3, #3
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <UART_SetConfig+0x6ac>)
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d00:	e01c      	b.n	8008d3c <UART_SetConfig+0x6d0>
 8008d02:	bf00      	nop
 8008d04:	40011400 	.word	0x40011400
 8008d08:	58024400 	.word	0x58024400
 8008d0c:	40007800 	.word	0x40007800
 8008d10:	40007c00 	.word	0x40007c00
 8008d14:	58000c00 	.word	0x58000c00
 8008d18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d1c:	4b9d      	ldr	r3, [pc, #628]	; (8008f94 <UART_SetConfig+0x928>)
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d20:	e00c      	b.n	8008d3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d22:	4b9d      	ldr	r3, [pc, #628]	; (8008f98 <UART_SetConfig+0x92c>)
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d26:	e009      	b.n	8008d3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d2e:	e005      	b.n	8008d3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 81de 	beq.w	8009100 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	4a94      	ldr	r2, [pc, #592]	; (8008f9c <UART_SetConfig+0x930>)
 8008d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d56:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	4413      	add	r3, r2
 8008d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d305      	bcc.n	8008d74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d903      	bls.n	8008d7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d7a:	e1c1      	b.n	8009100 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	2200      	movs	r2, #0
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	60fa      	str	r2, [r7, #12]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	4a84      	ldr	r2, [pc, #528]	; (8008f9c <UART_SetConfig+0x930>)
 8008d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2200      	movs	r2, #0
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d9e:	f7f7 ff17 	bl	8000bd0 <__aeabi_uldivmod>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	f04f 0200 	mov.w	r2, #0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	020b      	lsls	r3, r1, #8
 8008db4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008db8:	0202      	lsls	r2, r0, #8
 8008dba:	6979      	ldr	r1, [r7, #20]
 8008dbc:	6849      	ldr	r1, [r1, #4]
 8008dbe:	0849      	lsrs	r1, r1, #1
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	eb12 0804 	adds.w	r8, r2, r4
 8008dca:	eb43 0905 	adc.w	r9, r3, r5
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	4693      	mov	fp, r2
 8008dd8:	4652      	mov	r2, sl
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fef6 	bl	8000bd0 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4613      	mov	r3, r2
 8008dea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008df2:	d308      	bcc.n	8008e06 <UART_SetConfig+0x79a>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dfa:	d204      	bcs.n	8008e06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e02:	60da      	str	r2, [r3, #12]
 8008e04:	e17c      	b.n	8009100 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e0c:	e178      	b.n	8009100 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e16:	f040 80c5 	bne.w	8008fa4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	dc48      	bgt.n	8008eb4 <UART_SetConfig+0x848>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	db7b      	blt.n	8008f1e <UART_SetConfig+0x8b2>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d879      	bhi.n	8008f1e <UART_SetConfig+0x8b2>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <UART_SetConfig+0x7c4>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008ec3 	.word	0x08008ec3
 8008e38:	08008f1f 	.word	0x08008f1f
 8008e3c:	08008f1f 	.word	0x08008f1f
 8008e40:	08008ecb 	.word	0x08008ecb
 8008e44:	08008f1f 	.word	0x08008f1f
 8008e48:	08008f1f 	.word	0x08008f1f
 8008e4c:	08008f1f 	.word	0x08008f1f
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008f1f 	.word	0x08008f1f
 8008e58:	08008f1f 	.word	0x08008f1f
 8008e5c:	08008f1f 	.word	0x08008f1f
 8008e60:	08008f1f 	.word	0x08008f1f
 8008e64:	08008f1f 	.word	0x08008f1f
 8008e68:	08008f1f 	.word	0x08008f1f
 8008e6c:	08008f1f 	.word	0x08008f1f
 8008e70:	08008eeb 	.word	0x08008eeb
 8008e74:	08008f1f 	.word	0x08008f1f
 8008e78:	08008f1f 	.word	0x08008f1f
 8008e7c:	08008f1f 	.word	0x08008f1f
 8008e80:	08008f1f 	.word	0x08008f1f
 8008e84:	08008f1f 	.word	0x08008f1f
 8008e88:	08008f1f 	.word	0x08008f1f
 8008e8c:	08008f1f 	.word	0x08008f1f
 8008e90:	08008f1f 	.word	0x08008f1f
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f1f 	.word	0x08008f1f
 8008e9c:	08008f1f 	.word	0x08008f1f
 8008ea0:	08008f1f 	.word	0x08008f1f
 8008ea4:	08008f1f 	.word	0x08008f1f
 8008ea8:	08008f1f 	.word	0x08008f1f
 8008eac:	08008f1f 	.word	0x08008f1f
 8008eb0:	08008f11 	.word	0x08008f11
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d02e      	beq.n	8008f16 <UART_SetConfig+0x8aa>
 8008eb8:	e031      	b.n	8008f1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7fd f919 	bl	80060f0 <HAL_RCC_GetPCLK1Freq>
 8008ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ec0:	e033      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec2:	f7fd f92b 	bl	800611c <HAL_RCC_GetPCLK2Freq>
 8008ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ec8:	e02f      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fb76 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed8:	e027      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 0318 	add.w	r3, r7, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fcc2 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee8:	e01f      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eea:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <UART_SetConfig+0x934>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ef6:	4b2a      	ldr	r3, [pc, #168]	; (8008fa0 <UART_SetConfig+0x934>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a24      	ldr	r2, [pc, #144]	; (8008f94 <UART_SetConfig+0x928>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f08:	e00f      	b.n	8008f2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <UART_SetConfig+0x928>)
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0e:	e00c      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f10:	4b21      	ldr	r3, [pc, #132]	; (8008f98 <UART_SetConfig+0x92c>)
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f14:	e009      	b.n	8008f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1c:	e005      	b.n	8008f2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 80e7 	beq.w	8009100 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	4a19      	ldr	r2, [pc, #100]	; (8008f9c <UART_SetConfig+0x930>)
 8008f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f44:	005a      	lsls	r2, r3, #1
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	441a      	add	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	2b0f      	cmp	r3, #15
 8008f5c:	d916      	bls.n	8008f8c <UART_SetConfig+0x920>
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f64:	d212      	bcs.n	8008f8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f023 030f 	bic.w	r3, r3, #15
 8008f6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f88:	60da      	str	r2, [r3, #12]
 8008f8a:	e0b9      	b.n	8009100 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f92:	e0b5      	b.n	8009100 <UART_SetConfig+0xa94>
 8008f94:	03d09000 	.word	0x03d09000
 8008f98:	003d0900 	.word	0x003d0900
 8008f9c:	0800c594 	.word	0x0800c594
 8008fa0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fa8:	2b20      	cmp	r3, #32
 8008faa:	dc49      	bgt.n	8009040 <UART_SetConfig+0x9d4>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	db7c      	blt.n	80090aa <UART_SetConfig+0xa3e>
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d87a      	bhi.n	80090aa <UART_SetConfig+0xa3e>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <UART_SetConfig+0x950>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08009047 	.word	0x08009047
 8008fc0:	0800904f 	.word	0x0800904f
 8008fc4:	080090ab 	.word	0x080090ab
 8008fc8:	080090ab 	.word	0x080090ab
 8008fcc:	08009057 	.word	0x08009057
 8008fd0:	080090ab 	.word	0x080090ab
 8008fd4:	080090ab 	.word	0x080090ab
 8008fd8:	080090ab 	.word	0x080090ab
 8008fdc:	08009067 	.word	0x08009067
 8008fe0:	080090ab 	.word	0x080090ab
 8008fe4:	080090ab 	.word	0x080090ab
 8008fe8:	080090ab 	.word	0x080090ab
 8008fec:	080090ab 	.word	0x080090ab
 8008ff0:	080090ab 	.word	0x080090ab
 8008ff4:	080090ab 	.word	0x080090ab
 8008ff8:	080090ab 	.word	0x080090ab
 8008ffc:	08009077 	.word	0x08009077
 8009000:	080090ab 	.word	0x080090ab
 8009004:	080090ab 	.word	0x080090ab
 8009008:	080090ab 	.word	0x080090ab
 800900c:	080090ab 	.word	0x080090ab
 8009010:	080090ab 	.word	0x080090ab
 8009014:	080090ab 	.word	0x080090ab
 8009018:	080090ab 	.word	0x080090ab
 800901c:	080090ab 	.word	0x080090ab
 8009020:	080090ab 	.word	0x080090ab
 8009024:	080090ab 	.word	0x080090ab
 8009028:	080090ab 	.word	0x080090ab
 800902c:	080090ab 	.word	0x080090ab
 8009030:	080090ab 	.word	0x080090ab
 8009034:	080090ab 	.word	0x080090ab
 8009038:	080090ab 	.word	0x080090ab
 800903c:	0800909d 	.word	0x0800909d
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	d02e      	beq.n	80090a2 <UART_SetConfig+0xa36>
 8009044:	e031      	b.n	80090aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009046:	f7fd f853 	bl	80060f0 <HAL_RCC_GetPCLK1Freq>
 800904a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800904c:	e033      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800904e:	f7fd f865 	bl	800611c <HAL_RCC_GetPCLK2Freq>
 8009052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009054:	e02f      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fab0 	bl	80075c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009064:	e027      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009066:	f107 0318 	add.w	r3, r7, #24
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fbfc 	bl	8007868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009074:	e01f      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009076:	4b2d      	ldr	r3, [pc, #180]	; (800912c <UART_SetConfig+0xac0>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009082:	4b2a      	ldr	r3, [pc, #168]	; (800912c <UART_SetConfig+0xac0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	08db      	lsrs	r3, r3, #3
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	4a28      	ldr	r2, [pc, #160]	; (8009130 <UART_SetConfig+0xac4>)
 800908e:	fa22 f303 	lsr.w	r3, r2, r3
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009094:	e00f      	b.n	80090b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009096:	4b26      	ldr	r3, [pc, #152]	; (8009130 <UART_SetConfig+0xac4>)
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800909a:	e00c      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800909c:	4b25      	ldr	r3, [pc, #148]	; (8009134 <UART_SetConfig+0xac8>)
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090a0:	e009      	b.n	80090b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090a8:	e005      	b.n	80090b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090b4:	bf00      	nop
    }

    if (pclk != 0U)
 80090b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d021      	beq.n	8009100 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <UART_SetConfig+0xacc>)
 80090c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c6:	461a      	mov	r2, r3
 80090c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	441a      	add	r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	fbb2 f3f3 	udiv	r3, r2, r3
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d909      	bls.n	80090fa <UART_SetConfig+0xa8e>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ec:	d205      	bcs.n	80090fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60da      	str	r2, [r3, #12]
 80090f8:	e002      	b.n	8009100 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2201      	movs	r2, #1
 8009104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2201      	movs	r2, #1
 800910c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2200      	movs	r2, #0
 8009114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2200      	movs	r2, #0
 800911a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800911c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009120:	4618      	mov	r0, r3
 8009122:	3748      	adds	r7, #72	; 0x48
 8009124:	46bd      	mov	sp, r7
 8009126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800912a:	bf00      	nop
 800912c:	58024400 	.word	0x58024400
 8009130:	03d09000 	.word	0x03d09000
 8009134:	003d0900 	.word	0x003d0900
 8009138:	0800c594 	.word	0x0800c594

0800913c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00a      	beq.n	80091aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	f003 0308 	and.w	r3, r3, #8
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01a      	beq.n	8009252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800923a:	d10a      	bne.n	8009252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	605a      	str	r2, [r3, #4]
  }
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b098      	sub	sp, #96	; 0x60
 8009284:	af02      	add	r7, sp, #8
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009290:	f7f9 f9b2 	bl	80025f8 <HAL_GetTick>
 8009294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d12f      	bne.n	8009304 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ac:	2200      	movs	r2, #0
 80092ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f88e 	bl	80093d4 <UART_WaitOnFlagUntilTimeout>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d022      	beq.n	8009304 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d2:	653b      	str	r3, [r7, #80]	; 0x50
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092dc:	647b      	str	r3, [r7, #68]	; 0x44
 80092de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e6      	bne.n	80092be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e063      	b.n	80093cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b04      	cmp	r3, #4
 8009310:	d149      	bne.n	80093a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931a:	2200      	movs	r2, #0
 800931c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f857 	bl	80093d4 <UART_WaitOnFlagUntilTimeout>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d03c      	beq.n	80093a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	623b      	str	r3, [r7, #32]
   return(result);
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934a:	633b      	str	r3, [r7, #48]	; 0x30
 800934c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	60fb      	str	r3, [r7, #12]
   return(result);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f023 0301 	bic.w	r3, r3, #1
 8009374:	64bb      	str	r3, [r7, #72]	; 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937e:	61fa      	str	r2, [r7, #28]
 8009380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	69b9      	ldr	r1, [r7, #24]
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	617b      	str	r3, [r7, #20]
   return(result);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e5      	bne.n	800935e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e012      	b.n	80093cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3758      	adds	r7, #88	; 0x58
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e4:	e049      	b.n	800947a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d045      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ee:	f7f9 f903 	bl	80025f8 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d302      	bcc.n	8009404 <UART_WaitOnFlagUntilTimeout+0x30>
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e048      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d031      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f003 0308 	and.w	r3, r3, #8
 8009420:	2b08      	cmp	r3, #8
 8009422:	d110      	bne.n	8009446 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2208      	movs	r2, #8
 800942a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f839 	bl	80094a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2208      	movs	r2, #8
 8009436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e029      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009454:	d111      	bne.n	800947a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800945e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f81f 	bl	80094a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e00f      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69da      	ldr	r2, [r3, #28]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4013      	ands	r3, r2
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	bf0c      	ite	eq
 800948a:	2301      	moveq	r3, #1
 800948c:	2300      	movne	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	429a      	cmp	r2, r3
 8009496:	d0a6      	beq.n	80093e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b095      	sub	sp, #84	; 0x54
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40
 80094cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	4b1e      	ldr	r3, [pc, #120]	; (800956c <UART_EndRxTransfer+0xc8>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e5      	bne.n	80094de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009516:	2b01      	cmp	r3, #1
 8009518:	d118      	bne.n	800954c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	60bb      	str	r3, [r7, #8]
   return(result);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f023 0310 	bic.w	r3, r3, #16
 800952e:	647b      	str	r3, [r7, #68]	; 0x44
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6979      	ldr	r1, [r7, #20]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	613b      	str	r3, [r7, #16]
   return(result);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009560:	bf00      	nop
 8009562:	3754      	adds	r7, #84	; 0x54
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	effffffe 	.word	0xeffffffe

08009570 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_UARTEx_DisableFifoMode+0x16>
 8009582:	2302      	movs	r3, #2
 8009584:	e027      	b.n	80095d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2224      	movs	r2, #36	; 0x24
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0201 	bic.w	r2, r2, #1
 80095ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095f6:	2302      	movs	r3, #2
 80095f8:	e02d      	b.n	8009656 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2224      	movs	r2, #36	; 0x24
 8009606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0201 	bic.w	r2, r2, #1
 8009620:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f850 	bl	80096dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009672:	2302      	movs	r3, #2
 8009674:	e02d      	b.n	80096d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2224      	movs	r2, #36	; 0x24
 8009682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f812 	bl	80096dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d108      	bne.n	80096fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096fc:	e031      	b.n	8009762 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096fe:	2310      	movs	r3, #16
 8009700:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009702:	2310      	movs	r3, #16
 8009704:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	0e5b      	lsrs	r3, r3, #25
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	0f5b      	lsrs	r3, r3, #29
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0307 	and.w	r3, r3, #7
 8009724:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	7b3a      	ldrb	r2, [r7, #12]
 800972a:	4911      	ldr	r1, [pc, #68]	; (8009770 <UARTEx_SetNbDataToProcess+0x94>)
 800972c:	5c8a      	ldrb	r2, [r1, r2]
 800972e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009732:	7b3a      	ldrb	r2, [r7, #12]
 8009734:	490f      	ldr	r1, [pc, #60]	; (8009774 <UARTEx_SetNbDataToProcess+0x98>)
 8009736:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009738:	fb93 f3f2 	sdiv	r3, r3, r2
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	7b7a      	ldrb	r2, [r7, #13]
 8009748:	4909      	ldr	r1, [pc, #36]	; (8009770 <UARTEx_SetNbDataToProcess+0x94>)
 800974a:	5c8a      	ldrb	r2, [r1, r2]
 800974c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009750:	7b7a      	ldrb	r2, [r7, #13]
 8009752:	4908      	ldr	r1, [pc, #32]	; (8009774 <UARTEx_SetNbDataToProcess+0x98>)
 8009754:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009756:	fb93 f3f2 	sdiv	r3, r3, r2
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	0800c5ac 	.word	0x0800c5ac
 8009774:	0800c5b4 	.word	0x0800c5b4

08009778 <__errno>:
 8009778:	4b01      	ldr	r3, [pc, #4]	; (8009780 <__errno+0x8>)
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	2000003c 	.word	0x2000003c

08009784 <__libc_init_array>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	4d0d      	ldr	r5, [pc, #52]	; (80097bc <__libc_init_array+0x38>)
 8009788:	4c0d      	ldr	r4, [pc, #52]	; (80097c0 <__libc_init_array+0x3c>)
 800978a:	1b64      	subs	r4, r4, r5
 800978c:	10a4      	asrs	r4, r4, #2
 800978e:	2600      	movs	r6, #0
 8009790:	42a6      	cmp	r6, r4
 8009792:	d109      	bne.n	80097a8 <__libc_init_array+0x24>
 8009794:	4d0b      	ldr	r5, [pc, #44]	; (80097c4 <__libc_init_array+0x40>)
 8009796:	4c0c      	ldr	r4, [pc, #48]	; (80097c8 <__libc_init_array+0x44>)
 8009798:	f002 fd1a 	bl	800c1d0 <_init>
 800979c:	1b64      	subs	r4, r4, r5
 800979e:	10a4      	asrs	r4, r4, #2
 80097a0:	2600      	movs	r6, #0
 80097a2:	42a6      	cmp	r6, r4
 80097a4:	d105      	bne.n	80097b2 <__libc_init_array+0x2e>
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ac:	4798      	blx	r3
 80097ae:	3601      	adds	r6, #1
 80097b0:	e7ee      	b.n	8009790 <__libc_init_array+0xc>
 80097b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b6:	4798      	blx	r3
 80097b8:	3601      	adds	r6, #1
 80097ba:	e7f2      	b.n	80097a2 <__libc_init_array+0x1e>
 80097bc:	0800c99c 	.word	0x0800c99c
 80097c0:	0800c99c 	.word	0x0800c99c
 80097c4:	0800c99c 	.word	0x0800c99c
 80097c8:	0800c9a0 	.word	0x0800c9a0

080097cc <memcpy>:
 80097cc:	440a      	add	r2, r1
 80097ce:	4291      	cmp	r1, r2
 80097d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097d4:	d100      	bne.n	80097d8 <memcpy+0xc>
 80097d6:	4770      	bx	lr
 80097d8:	b510      	push	{r4, lr}
 80097da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e2:	4291      	cmp	r1, r2
 80097e4:	d1f9      	bne.n	80097da <memcpy+0xe>
 80097e6:	bd10      	pop	{r4, pc}

080097e8 <memset>:
 80097e8:	4402      	add	r2, r0
 80097ea:	4603      	mov	r3, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <__cvt>:
 80097f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fa:	ed2d 8b02 	vpush	{d8}
 80097fe:	eeb0 8b40 	vmov.f64	d8, d0
 8009802:	b085      	sub	sp, #20
 8009804:	4617      	mov	r7, r2
 8009806:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009808:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800980a:	ee18 2a90 	vmov	r2, s17
 800980e:	f025 0520 	bic.w	r5, r5, #32
 8009812:	2a00      	cmp	r2, #0
 8009814:	bfb6      	itet	lt
 8009816:	222d      	movlt	r2, #45	; 0x2d
 8009818:	2200      	movge	r2, #0
 800981a:	eeb1 8b40 	vneglt.f64	d8, d0
 800981e:	2d46      	cmp	r5, #70	; 0x46
 8009820:	460c      	mov	r4, r1
 8009822:	701a      	strb	r2, [r3, #0]
 8009824:	d004      	beq.n	8009830 <__cvt+0x38>
 8009826:	2d45      	cmp	r5, #69	; 0x45
 8009828:	d100      	bne.n	800982c <__cvt+0x34>
 800982a:	3401      	adds	r4, #1
 800982c:	2102      	movs	r1, #2
 800982e:	e000      	b.n	8009832 <__cvt+0x3a>
 8009830:	2103      	movs	r1, #3
 8009832:	ab03      	add	r3, sp, #12
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	ab02      	add	r3, sp, #8
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4622      	mov	r2, r4
 800983c:	4633      	mov	r3, r6
 800983e:	eeb0 0b48 	vmov.f64	d0, d8
 8009842:	f000 fdf5 	bl	800a430 <_dtoa_r>
 8009846:	2d47      	cmp	r5, #71	; 0x47
 8009848:	d101      	bne.n	800984e <__cvt+0x56>
 800984a:	07fb      	lsls	r3, r7, #31
 800984c:	d51a      	bpl.n	8009884 <__cvt+0x8c>
 800984e:	2d46      	cmp	r5, #70	; 0x46
 8009850:	eb00 0204 	add.w	r2, r0, r4
 8009854:	d10c      	bne.n	8009870 <__cvt+0x78>
 8009856:	7803      	ldrb	r3, [r0, #0]
 8009858:	2b30      	cmp	r3, #48	; 0x30
 800985a:	d107      	bne.n	800986c <__cvt+0x74>
 800985c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009864:	bf1c      	itt	ne
 8009866:	f1c4 0401 	rsbne	r4, r4, #1
 800986a:	6034      	strne	r4, [r6, #0]
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	441a      	add	r2, r3
 8009870:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009878:	bf08      	it	eq
 800987a:	9203      	streq	r2, [sp, #12]
 800987c:	2130      	movs	r1, #48	; 0x30
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	4293      	cmp	r3, r2
 8009882:	d307      	bcc.n	8009894 <__cvt+0x9c>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009888:	1a1b      	subs	r3, r3, r0
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	b005      	add	sp, #20
 800988e:	ecbd 8b02 	vpop	{d8}
 8009892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009894:	1c5c      	adds	r4, r3, #1
 8009896:	9403      	str	r4, [sp, #12]
 8009898:	7019      	strb	r1, [r3, #0]
 800989a:	e7f0      	b.n	800987e <__cvt+0x86>

0800989c <__exponent>:
 800989c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800989e:	4603      	mov	r3, r0
 80098a0:	2900      	cmp	r1, #0
 80098a2:	bfb8      	it	lt
 80098a4:	4249      	neglt	r1, r1
 80098a6:	f803 2b02 	strb.w	r2, [r3], #2
 80098aa:	bfb4      	ite	lt
 80098ac:	222d      	movlt	r2, #45	; 0x2d
 80098ae:	222b      	movge	r2, #43	; 0x2b
 80098b0:	2909      	cmp	r1, #9
 80098b2:	7042      	strb	r2, [r0, #1]
 80098b4:	dd2a      	ble.n	800990c <__exponent+0x70>
 80098b6:	f10d 0407 	add.w	r4, sp, #7
 80098ba:	46a4      	mov	ip, r4
 80098bc:	270a      	movs	r7, #10
 80098be:	46a6      	mov	lr, r4
 80098c0:	460a      	mov	r2, r1
 80098c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80098c6:	fb07 1516 	mls	r5, r7, r6, r1
 80098ca:	3530      	adds	r5, #48	; 0x30
 80098cc:	2a63      	cmp	r2, #99	; 0x63
 80098ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80098d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098d6:	4631      	mov	r1, r6
 80098d8:	dcf1      	bgt.n	80098be <__exponent+0x22>
 80098da:	3130      	adds	r1, #48	; 0x30
 80098dc:	f1ae 0502 	sub.w	r5, lr, #2
 80098e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098e4:	1c44      	adds	r4, r0, #1
 80098e6:	4629      	mov	r1, r5
 80098e8:	4561      	cmp	r1, ip
 80098ea:	d30a      	bcc.n	8009902 <__exponent+0x66>
 80098ec:	f10d 0209 	add.w	r2, sp, #9
 80098f0:	eba2 020e 	sub.w	r2, r2, lr
 80098f4:	4565      	cmp	r5, ip
 80098f6:	bf88      	it	hi
 80098f8:	2200      	movhi	r2, #0
 80098fa:	4413      	add	r3, r2
 80098fc:	1a18      	subs	r0, r3, r0
 80098fe:	b003      	add	sp, #12
 8009900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800990a:	e7ed      	b.n	80098e8 <__exponent+0x4c>
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	3130      	adds	r1, #48	; 0x30
 8009910:	7083      	strb	r3, [r0, #2]
 8009912:	70c1      	strb	r1, [r0, #3]
 8009914:	1d03      	adds	r3, r0, #4
 8009916:	e7f1      	b.n	80098fc <__exponent+0x60>

08009918 <_printf_float>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	b08b      	sub	sp, #44	; 0x2c
 800991e:	460c      	mov	r4, r1
 8009920:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009924:	4616      	mov	r6, r2
 8009926:	461f      	mov	r7, r3
 8009928:	4605      	mov	r5, r0
 800992a:	f001 fca7 	bl	800b27c <_localeconv_r>
 800992e:	f8d0 b000 	ldr.w	fp, [r0]
 8009932:	4658      	mov	r0, fp
 8009934:	f7f7 f8f4 	bl	8000b20 <strlen>
 8009938:	2300      	movs	r3, #0
 800993a:	9308      	str	r3, [sp, #32]
 800993c:	f8d8 3000 	ldr.w	r3, [r8]
 8009940:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	f103 0108 	add.w	r1, r3, #8
 8009950:	f8c8 1000 	str.w	r1, [r8]
 8009954:	4682      	mov	sl, r0
 8009956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800995a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800995e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009bc0 <_printf_float+0x2a8>
 8009962:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009966:	eeb0 6bc0 	vabs.f64	d6, d0
 800996a:	eeb4 6b47 	vcmp.f64	d6, d7
 800996e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009972:	dd24      	ble.n	80099be <_printf_float+0xa6>
 8009974:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997c:	d502      	bpl.n	8009984 <_printf_float+0x6c>
 800997e:	232d      	movs	r3, #45	; 0x2d
 8009980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009984:	4b90      	ldr	r3, [pc, #576]	; (8009bc8 <_printf_float+0x2b0>)
 8009986:	4891      	ldr	r0, [pc, #580]	; (8009bcc <_printf_float+0x2b4>)
 8009988:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800998c:	bf94      	ite	ls
 800998e:	4698      	movls	r8, r3
 8009990:	4680      	movhi	r8, r0
 8009992:	2303      	movs	r3, #3
 8009994:	6123      	str	r3, [r4, #16]
 8009996:	f022 0204 	bic.w	r2, r2, #4
 800999a:	2300      	movs	r3, #0
 800999c:	6022      	str	r2, [r4, #0]
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	9700      	str	r7, [sp, #0]
 80099a2:	4633      	mov	r3, r6
 80099a4:	aa09      	add	r2, sp, #36	; 0x24
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 f9d3 	bl	8009d54 <_printf_common>
 80099ae:	3001      	adds	r0, #1
 80099b0:	f040 808a 	bne.w	8009ac8 <_printf_float+0x1b0>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	b00b      	add	sp, #44	; 0x2c
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	eeb4 0b40 	vcmp.f64	d0, d0
 80099c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c6:	d709      	bvc.n	80099dc <_printf_float+0xc4>
 80099c8:	ee10 3a90 	vmov	r3, s1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bfbc      	itt	lt
 80099d0:	232d      	movlt	r3, #45	; 0x2d
 80099d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099d6:	487e      	ldr	r0, [pc, #504]	; (8009bd0 <_printf_float+0x2b8>)
 80099d8:	4b7e      	ldr	r3, [pc, #504]	; (8009bd4 <_printf_float+0x2bc>)
 80099da:	e7d5      	b.n	8009988 <_printf_float+0x70>
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099e2:	9104      	str	r1, [sp, #16]
 80099e4:	1c59      	adds	r1, r3, #1
 80099e6:	d13c      	bne.n	8009a62 <_printf_float+0x14a>
 80099e8:	2306      	movs	r3, #6
 80099ea:	6063      	str	r3, [r4, #4]
 80099ec:	2300      	movs	r3, #0
 80099ee:	9303      	str	r3, [sp, #12]
 80099f0:	ab08      	add	r3, sp, #32
 80099f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80099f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099fa:	ab07      	add	r3, sp, #28
 80099fc:	6861      	ldr	r1, [r4, #4]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	6022      	str	r2, [r4, #0]
 8009a02:	f10d 031b 	add.w	r3, sp, #27
 8009a06:	4628      	mov	r0, r5
 8009a08:	f7ff fef6 	bl	80097f8 <__cvt>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	9907      	ldr	r1, [sp, #28]
 8009a10:	2b47      	cmp	r3, #71	; 0x47
 8009a12:	4680      	mov	r8, r0
 8009a14:	d108      	bne.n	8009a28 <_printf_float+0x110>
 8009a16:	1cc8      	adds	r0, r1, #3
 8009a18:	db02      	blt.n	8009a20 <_printf_float+0x108>
 8009a1a:	6863      	ldr	r3, [r4, #4]
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	dd41      	ble.n	8009aa4 <_printf_float+0x18c>
 8009a20:	f1a9 0902 	sub.w	r9, r9, #2
 8009a24:	fa5f f989 	uxtb.w	r9, r9
 8009a28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a2c:	d820      	bhi.n	8009a70 <_printf_float+0x158>
 8009a2e:	3901      	subs	r1, #1
 8009a30:	464a      	mov	r2, r9
 8009a32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a36:	9107      	str	r1, [sp, #28]
 8009a38:	f7ff ff30 	bl	800989c <__exponent>
 8009a3c:	9a08      	ldr	r2, [sp, #32]
 8009a3e:	9004      	str	r0, [sp, #16]
 8009a40:	1813      	adds	r3, r2, r0
 8009a42:	2a01      	cmp	r2, #1
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	dc02      	bgt.n	8009a4e <_printf_float+0x136>
 8009a48:	6822      	ldr	r2, [r4, #0]
 8009a4a:	07d2      	lsls	r2, r2, #31
 8009a4c:	d501      	bpl.n	8009a52 <_printf_float+0x13a>
 8009a4e:	3301      	adds	r3, #1
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0a2      	beq.n	80099a0 <_printf_float+0x88>
 8009a5a:	232d      	movs	r3, #45	; 0x2d
 8009a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a60:	e79e      	b.n	80099a0 <_printf_float+0x88>
 8009a62:	9904      	ldr	r1, [sp, #16]
 8009a64:	2947      	cmp	r1, #71	; 0x47
 8009a66:	d1c1      	bne.n	80099ec <_printf_float+0xd4>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1bf      	bne.n	80099ec <_printf_float+0xd4>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e7bc      	b.n	80099ea <_printf_float+0xd2>
 8009a70:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a74:	d118      	bne.n	8009aa8 <_printf_float+0x190>
 8009a76:	2900      	cmp	r1, #0
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	dd0b      	ble.n	8009a94 <_printf_float+0x17c>
 8009a7c:	6121      	str	r1, [r4, #16]
 8009a7e:	b913      	cbnz	r3, 8009a86 <_printf_float+0x16e>
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	07d0      	lsls	r0, r2, #31
 8009a84:	d502      	bpl.n	8009a8c <_printf_float+0x174>
 8009a86:	3301      	adds	r3, #1
 8009a88:	440b      	add	r3, r1
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	e7de      	b.n	8009a52 <_printf_float+0x13a>
 8009a94:	b913      	cbnz	r3, 8009a9c <_printf_float+0x184>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	07d2      	lsls	r2, r2, #31
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_float+0x188>
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	e7f4      	b.n	8009a8a <_printf_float+0x172>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7f2      	b.n	8009a8a <_printf_float+0x172>
 8009aa4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009aa8:	9b08      	ldr	r3, [sp, #32]
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	db05      	blt.n	8009aba <_printf_float+0x1a2>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	6121      	str	r1, [r4, #16]
 8009ab2:	07d8      	lsls	r0, r3, #31
 8009ab4:	d5ea      	bpl.n	8009a8c <_printf_float+0x174>
 8009ab6:	1c4b      	adds	r3, r1, #1
 8009ab8:	e7e7      	b.n	8009a8a <_printf_float+0x172>
 8009aba:	2900      	cmp	r1, #0
 8009abc:	bfd4      	ite	le
 8009abe:	f1c1 0202 	rsble	r2, r1, #2
 8009ac2:	2201      	movgt	r2, #1
 8009ac4:	4413      	add	r3, r2
 8009ac6:	e7e0      	b.n	8009a8a <_printf_float+0x172>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	055a      	lsls	r2, r3, #21
 8009acc:	d407      	bmi.n	8009ade <_printf_float+0x1c6>
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	47b8      	blx	r7
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d12a      	bne.n	8009b32 <_printf_float+0x21a>
 8009adc:	e76a      	b.n	80099b4 <_printf_float+0x9c>
 8009ade:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ae2:	f240 80e2 	bls.w	8009caa <_printf_float+0x392>
 8009ae6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009aea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af2:	d133      	bne.n	8009b5c <_printf_float+0x244>
 8009af4:	4a38      	ldr	r2, [pc, #224]	; (8009bd8 <_printf_float+0x2c0>)
 8009af6:	2301      	movs	r3, #1
 8009af8:	4631      	mov	r1, r6
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b8      	blx	r7
 8009afe:	3001      	adds	r0, #1
 8009b00:	f43f af58 	beq.w	80099b4 <_printf_float+0x9c>
 8009b04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	db02      	blt.n	8009b12 <_printf_float+0x1fa>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	07d8      	lsls	r0, r3, #31
 8009b10:	d50f      	bpl.n	8009b32 <_printf_float+0x21a>
 8009b12:	4653      	mov	r3, sl
 8009b14:	465a      	mov	r2, fp
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f af49 	beq.w	80099b4 <_printf_float+0x9c>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	f104 091a 	add.w	r9, r4, #26
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	4543      	cmp	r3, r8
 8009b30:	dc09      	bgt.n	8009b46 <_printf_float+0x22e>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	079b      	lsls	r3, r3, #30
 8009b36:	f100 8108 	bmi.w	8009d4a <_printf_float+0x432>
 8009b3a:	68e0      	ldr	r0, [r4, #12]
 8009b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3e:	4298      	cmp	r0, r3
 8009b40:	bfb8      	it	lt
 8009b42:	4618      	movlt	r0, r3
 8009b44:	e738      	b.n	80099b8 <_printf_float+0xa0>
 8009b46:	2301      	movs	r3, #1
 8009b48:	464a      	mov	r2, r9
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f af2f 	beq.w	80099b4 <_printf_float+0x9c>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	e7e6      	b.n	8009b2a <_printf_float+0x212>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dc3c      	bgt.n	8009bdc <_printf_float+0x2c4>
 8009b62:	4a1d      	ldr	r2, [pc, #116]	; (8009bd8 <_printf_float+0x2c0>)
 8009b64:	2301      	movs	r3, #1
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f43f af21 	beq.w	80099b4 <_printf_float+0x9c>
 8009b72:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	d102      	bne.n	8009b80 <_printf_float+0x268>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	07d9      	lsls	r1, r3, #31
 8009b7e:	d5d8      	bpl.n	8009b32 <_printf_float+0x21a>
 8009b80:	4653      	mov	r3, sl
 8009b82:	465a      	mov	r2, fp
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f af12 	beq.w	80099b4 <_printf_float+0x9c>
 8009b90:	f04f 0900 	mov.w	r9, #0
 8009b94:	f104 0a1a 	add.w	sl, r4, #26
 8009b98:	9b07      	ldr	r3, [sp, #28]
 8009b9a:	425b      	negs	r3, r3
 8009b9c:	454b      	cmp	r3, r9
 8009b9e:	dc01      	bgt.n	8009ba4 <_printf_float+0x28c>
 8009ba0:	9b08      	ldr	r3, [sp, #32]
 8009ba2:	e795      	b.n	8009ad0 <_printf_float+0x1b8>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f43f af00 	beq.w	80099b4 <_printf_float+0x9c>
 8009bb4:	f109 0901 	add.w	r9, r9, #1
 8009bb8:	e7ee      	b.n	8009b98 <_printf_float+0x280>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	ffffffff 	.word	0xffffffff
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	0800c5c0 	.word	0x0800c5c0
 8009bcc:	0800c5c4 	.word	0x0800c5c4
 8009bd0:	0800c5cc 	.word	0x0800c5cc
 8009bd4:	0800c5c8 	.word	0x0800c5c8
 8009bd8:	0800c5d0 	.word	0x0800c5d0
 8009bdc:	9a08      	ldr	r2, [sp, #32]
 8009bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be0:	429a      	cmp	r2, r3
 8009be2:	bfa8      	it	ge
 8009be4:	461a      	movge	r2, r3
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	4691      	mov	r9, r2
 8009bea:	dc38      	bgt.n	8009c5e <_printf_float+0x346>
 8009bec:	2300      	movs	r3, #0
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf4:	f104 021a 	add.w	r2, r4, #26
 8009bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bfa:	9905      	ldr	r1, [sp, #20]
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	eba3 0309 	sub.w	r3, r3, r9
 8009c02:	428b      	cmp	r3, r1
 8009c04:	dc33      	bgt.n	8009c6e <_printf_float+0x356>
 8009c06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	db3c      	blt.n	8009c88 <_printf_float+0x370>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	07da      	lsls	r2, r3, #31
 8009c12:	d439      	bmi.n	8009c88 <_printf_float+0x370>
 8009c14:	9b08      	ldr	r3, [sp, #32]
 8009c16:	9a04      	ldr	r2, [sp, #16]
 8009c18:	9907      	ldr	r1, [sp, #28]
 8009c1a:	1a9a      	subs	r2, r3, r2
 8009c1c:	eba3 0901 	sub.w	r9, r3, r1
 8009c20:	4591      	cmp	r9, r2
 8009c22:	bfa8      	it	ge
 8009c24:	4691      	movge	r9, r2
 8009c26:	f1b9 0f00 	cmp.w	r9, #0
 8009c2a:	dc35      	bgt.n	8009c98 <_printf_float+0x380>
 8009c2c:	f04f 0800 	mov.w	r8, #0
 8009c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c34:	f104 0a1a 	add.w	sl, r4, #26
 8009c38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	eba3 0309 	sub.w	r3, r3, r9
 8009c42:	4543      	cmp	r3, r8
 8009c44:	f77f af75 	ble.w	8009b32 <_printf_float+0x21a>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4652      	mov	r2, sl
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f aeae 	beq.w	80099b4 <_printf_float+0x9c>
 8009c58:	f108 0801 	add.w	r8, r8, #1
 8009c5c:	e7ec      	b.n	8009c38 <_printf_float+0x320>
 8009c5e:	4613      	mov	r3, r2
 8009c60:	4631      	mov	r1, r6
 8009c62:	4642      	mov	r2, r8
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d1bf      	bne.n	8009bec <_printf_float+0x2d4>
 8009c6c:	e6a2      	b.n	80099b4 <_printf_float+0x9c>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	9204      	str	r2, [sp, #16]
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f ae9b 	beq.w	80099b4 <_printf_float+0x9c>
 8009c7e:	9b05      	ldr	r3, [sp, #20]
 8009c80:	9a04      	ldr	r2, [sp, #16]
 8009c82:	3301      	adds	r3, #1
 8009c84:	9305      	str	r3, [sp, #20]
 8009c86:	e7b7      	b.n	8009bf8 <_printf_float+0x2e0>
 8009c88:	4653      	mov	r3, sl
 8009c8a:	465a      	mov	r2, fp
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	d1be      	bne.n	8009c14 <_printf_float+0x2fc>
 8009c96:	e68d      	b.n	80099b4 <_printf_float+0x9c>
 8009c98:	9a04      	ldr	r2, [sp, #16]
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	4442      	add	r2, r8
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d1c1      	bne.n	8009c2c <_printf_float+0x314>
 8009ca8:	e684      	b.n	80099b4 <_printf_float+0x9c>
 8009caa:	9a08      	ldr	r2, [sp, #32]
 8009cac:	2a01      	cmp	r2, #1
 8009cae:	dc01      	bgt.n	8009cb4 <_printf_float+0x39c>
 8009cb0:	07db      	lsls	r3, r3, #31
 8009cb2:	d537      	bpl.n	8009d24 <_printf_float+0x40c>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4642      	mov	r2, r8
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f ae78 	beq.w	80099b4 <_printf_float+0x9c>
 8009cc4:	4653      	mov	r3, sl
 8009cc6:	465a      	mov	r2, fp
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f ae70 	beq.w	80099b4 <_printf_float+0x9c>
 8009cd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce0:	d01b      	beq.n	8009d1a <_printf_float+0x402>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	f108 0201 	add.w	r2, r8, #1
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d10e      	bne.n	8009d12 <_printf_float+0x3fa>
 8009cf4:	e65e      	b.n	80099b4 <_printf_float+0x9c>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	464a      	mov	r2, r9
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae57 	beq.w	80099b4 <_printf_float+0x9c>
 8009d06:	f108 0801 	add.w	r8, r8, #1
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4543      	cmp	r3, r8
 8009d10:	dcf1      	bgt.n	8009cf6 <_printf_float+0x3de>
 8009d12:	9b04      	ldr	r3, [sp, #16]
 8009d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d18:	e6db      	b.n	8009ad2 <_printf_float+0x1ba>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 091a 	add.w	r9, r4, #26
 8009d22:	e7f2      	b.n	8009d0a <_printf_float+0x3f2>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4642      	mov	r2, r8
 8009d28:	e7df      	b.n	8009cea <_printf_float+0x3d2>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae3d 	beq.w	80099b4 <_printf_float+0x9c>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dcf0      	bgt.n	8009d2a <_printf_float+0x412>
 8009d48:	e6f7      	b.n	8009b3a <_printf_float+0x222>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0919 	add.w	r9, r4, #25
 8009d52:	e7f4      	b.n	8009d3e <_printf_float+0x426>

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4699      	mov	r9, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bfb8      	it	lt
 8009d68:	4613      	movlt	r3, r2
 8009d6a:	6033      	str	r3, [r6, #0]
 8009d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d70:	4607      	mov	r7, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc26      	bgt.n	8009dea <_printf_common+0x96>
 8009d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da0:	1e13      	subs	r3, r2, #0
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d42b      	bmi.n	8009e04 <_printf_common+0xb0>
 8009dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db0:	4649      	mov	r1, r9
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c0      	blx	r8
 8009db6:	3001      	adds	r0, #1
 8009db8:	d01e      	beq.n	8009df8 <_printf_common+0xa4>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	68e5      	ldr	r5, [r4, #12]
 8009dbe:	6832      	ldr	r2, [r6, #0]
 8009dc0:	f003 0306 	and.w	r3, r3, #6
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	bf08      	it	eq
 8009dc8:	1aad      	subeq	r5, r5, r2
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	bf0c      	ite	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	bfc4      	itt	gt
 8009dda:	1a9b      	subgt	r3, r3, r2
 8009ddc:	18ed      	addgt	r5, r5, r3
 8009dde:	2600      	movs	r6, #0
 8009de0:	341a      	adds	r4, #26
 8009de2:	42b5      	cmp	r5, r6
 8009de4:	d11a      	bne.n	8009e1c <_printf_common+0xc8>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e008      	b.n	8009dfc <_printf_common+0xa8>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4649      	mov	r1, r9
 8009df0:	4638      	mov	r0, r7
 8009df2:	47c0      	blx	r8
 8009df4:	3001      	adds	r0, #1
 8009df6:	d103      	bne.n	8009e00 <_printf_common+0xac>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e00:	3501      	adds	r5, #1
 8009e02:	e7c6      	b.n	8009d92 <_printf_common+0x3e>
 8009e04:	18e1      	adds	r1, r4, r3
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	2030      	movs	r0, #48	; 0x30
 8009e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e0e:	4422      	add	r2, r4
 8009e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e18:	3302      	adds	r3, #2
 8009e1a:	e7c7      	b.n	8009dac <_printf_common+0x58>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4649      	mov	r1, r9
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c0      	blx	r8
 8009e26:	3001      	adds	r0, #1
 8009e28:	d0e6      	beq.n	8009df8 <_printf_common+0xa4>
 8009e2a:	3601      	adds	r6, #1
 8009e2c:	e7d9      	b.n	8009de2 <_printf_common+0x8e>
	...

08009e30 <_printf_i>:
 8009e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	7e0f      	ldrb	r7, [r1, #24]
 8009e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e38:	2f78      	cmp	r7, #120	; 0x78
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	469a      	mov	sl, r3
 8009e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e46:	d807      	bhi.n	8009e58 <_printf_i+0x28>
 8009e48:	2f62      	cmp	r7, #98	; 0x62
 8009e4a:	d80a      	bhi.n	8009e62 <_printf_i+0x32>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	f000 80d8 	beq.w	800a002 <_printf_i+0x1d2>
 8009e52:	2f58      	cmp	r7, #88	; 0x58
 8009e54:	f000 80a3 	beq.w	8009f9e <_printf_i+0x16e>
 8009e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e60:	e03a      	b.n	8009ed8 <_printf_i+0xa8>
 8009e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e66:	2b15      	cmp	r3, #21
 8009e68:	d8f6      	bhi.n	8009e58 <_printf_i+0x28>
 8009e6a:	a101      	add	r1, pc, #4	; (adr r1, 8009e70 <_printf_i+0x40>)
 8009e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009e59 	.word	0x08009e59
 8009e7c:	08009e59 	.word	0x08009e59
 8009e80:	08009e59 	.word	0x08009e59
 8009e84:	08009e59 	.word	0x08009e59
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009e59 	.word	0x08009e59
 8009e90:	08009e59 	.word	0x08009e59
 8009e94:	08009e59 	.word	0x08009e59
 8009e98:	08009e59 	.word	0x08009e59
 8009e9c:	08009fe9 	.word	0x08009fe9
 8009ea0:	08009f0d 	.word	0x08009f0d
 8009ea4:	08009fcb 	.word	0x08009fcb
 8009ea8:	08009e59 	.word	0x08009e59
 8009eac:	08009e59 	.word	0x08009e59
 8009eb0:	0800a00b 	.word	0x0800a00b
 8009eb4:	08009e59 	.word	0x08009e59
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009e59 	.word	0x08009e59
 8009ec0:	08009e59 	.word	0x08009e59
 8009ec4:	08009fd3 	.word	0x08009fd3
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e0a3      	b.n	800a024 <_printf_i+0x1f4>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	6829      	ldr	r1, [r5, #0]
 8009ee0:	0606      	lsls	r6, r0, #24
 8009ee2:	f101 0304 	add.w	r3, r1, #4
 8009ee6:	d50a      	bpl.n	8009efe <_printf_i+0xce>
 8009ee8:	680e      	ldr	r6, [r1, #0]
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	2e00      	cmp	r6, #0
 8009eee:	da03      	bge.n	8009ef8 <_printf_i+0xc8>
 8009ef0:	232d      	movs	r3, #45	; 0x2d
 8009ef2:	4276      	negs	r6, r6
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef8:	485e      	ldr	r0, [pc, #376]	; (800a074 <_printf_i+0x244>)
 8009efa:	230a      	movs	r3, #10
 8009efc:	e019      	b.n	8009f32 <_printf_i+0x102>
 8009efe:	680e      	ldr	r6, [r1, #0]
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f06:	bf18      	it	ne
 8009f08:	b236      	sxthne	r6, r6
 8009f0a:	e7ef      	b.n	8009eec <_printf_i+0xbc>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	6820      	ldr	r0, [r4, #0]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	6029      	str	r1, [r5, #0]
 8009f14:	0601      	lsls	r1, r0, #24
 8009f16:	d501      	bpl.n	8009f1c <_printf_i+0xec>
 8009f18:	681e      	ldr	r6, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <_printf_i+0xf2>
 8009f1c:	0646      	lsls	r6, r0, #25
 8009f1e:	d5fb      	bpl.n	8009f18 <_printf_i+0xe8>
 8009f20:	881e      	ldrh	r6, [r3, #0]
 8009f22:	4854      	ldr	r0, [pc, #336]	; (800a074 <_printf_i+0x244>)
 8009f24:	2f6f      	cmp	r7, #111	; 0x6f
 8009f26:	bf0c      	ite	eq
 8009f28:	2308      	moveq	r3, #8
 8009f2a:	230a      	movne	r3, #10
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f32:	6865      	ldr	r5, [r4, #4]
 8009f34:	60a5      	str	r5, [r4, #8]
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	bfa2      	ittt	ge
 8009f3a:	6821      	ldrge	r1, [r4, #0]
 8009f3c:	f021 0104 	bicge.w	r1, r1, #4
 8009f40:	6021      	strge	r1, [r4, #0]
 8009f42:	b90e      	cbnz	r6, 8009f48 <_printf_i+0x118>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d04d      	beq.n	8009fe4 <_printf_i+0x1b4>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f52:	5dc7      	ldrb	r7, [r0, r7]
 8009f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f58:	4637      	mov	r7, r6
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	d9f4      	bls.n	8009f4a <_printf_i+0x11a>
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10b      	bne.n	8009f7c <_printf_i+0x14c>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07de      	lsls	r6, r3, #31
 8009f68:	d508      	bpl.n	8009f7c <_printf_i+0x14c>
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	bfde      	ittt	le
 8009f72:	2330      	movle	r3, #48	; 0x30
 8009f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f7c:	1b52      	subs	r2, r2, r5
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	f8cd a000 	str.w	sl, [sp]
 8009f84:	464b      	mov	r3, r9
 8009f86:	aa03      	add	r2, sp, #12
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f7ff fee2 	bl	8009d54 <_printf_common>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d14c      	bne.n	800a02e <_printf_i+0x1fe>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b004      	add	sp, #16
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	4835      	ldr	r0, [pc, #212]	; (800a074 <_printf_i+0x244>)
 8009fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fa4:	6829      	ldr	r1, [r5, #0]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fac:	6029      	str	r1, [r5, #0]
 8009fae:	061d      	lsls	r5, r3, #24
 8009fb0:	d514      	bpl.n	8009fdc <_printf_i+0x1ac>
 8009fb2:	07df      	lsls	r7, r3, #31
 8009fb4:	bf44      	itt	mi
 8009fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fba:	6023      	strmi	r3, [r4, #0]
 8009fbc:	b91e      	cbnz	r6, 8009fc6 <_printf_i+0x196>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	f023 0320 	bic.w	r3, r3, #32
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	2310      	movs	r3, #16
 8009fc8:	e7b0      	b.n	8009f2c <_printf_i+0xfc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f043 0320 	orr.w	r3, r3, #32
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	2378      	movs	r3, #120	; 0x78
 8009fd4:	4828      	ldr	r0, [pc, #160]	; (800a078 <_printf_i+0x248>)
 8009fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fda:	e7e3      	b.n	8009fa4 <_printf_i+0x174>
 8009fdc:	0659      	lsls	r1, r3, #25
 8009fde:	bf48      	it	mi
 8009fe0:	b2b6      	uxthmi	r6, r6
 8009fe2:	e7e6      	b.n	8009fb2 <_printf_i+0x182>
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	e7bb      	b.n	8009f60 <_printf_i+0x130>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	6826      	ldr	r6, [r4, #0]
 8009fec:	6961      	ldr	r1, [r4, #20]
 8009fee:	1d18      	adds	r0, r3, #4
 8009ff0:	6028      	str	r0, [r5, #0]
 8009ff2:	0635      	lsls	r5, r6, #24
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	d501      	bpl.n	8009ffc <_printf_i+0x1cc>
 8009ff8:	6019      	str	r1, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <_printf_i+0x1d2>
 8009ffc:	0670      	lsls	r0, r6, #25
 8009ffe:	d5fb      	bpl.n	8009ff8 <_printf_i+0x1c8>
 800a000:	8019      	strh	r1, [r3, #0]
 800a002:	2300      	movs	r3, #0
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	4615      	mov	r5, r2
 800a008:	e7ba      	b.n	8009f80 <_printf_i+0x150>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	1d1a      	adds	r2, r3, #4
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	681d      	ldr	r5, [r3, #0]
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	2100      	movs	r1, #0
 800a016:	4628      	mov	r0, r5
 800a018:	f7f6 fd8a 	bl	8000b30 <memchr>
 800a01c:	b108      	cbz	r0, 800a022 <_printf_i+0x1f2>
 800a01e:	1b40      	subs	r0, r0, r5
 800a020:	6060      	str	r0, [r4, #4]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	2300      	movs	r3, #0
 800a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02c:	e7a8      	b.n	8009f80 <_printf_i+0x150>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	462a      	mov	r2, r5
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	47d0      	blx	sl
 800a038:	3001      	adds	r0, #1
 800a03a:	d0ab      	beq.n	8009f94 <_printf_i+0x164>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	079b      	lsls	r3, r3, #30
 800a040:	d413      	bmi.n	800a06a <_printf_i+0x23a>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	4298      	cmp	r0, r3
 800a048:	bfb8      	it	lt
 800a04a:	4618      	movlt	r0, r3
 800a04c:	e7a4      	b.n	8009f98 <_printf_i+0x168>
 800a04e:	2301      	movs	r3, #1
 800a050:	4632      	mov	r2, r6
 800a052:	4649      	mov	r1, r9
 800a054:	4640      	mov	r0, r8
 800a056:	47d0      	blx	sl
 800a058:	3001      	adds	r0, #1
 800a05a:	d09b      	beq.n	8009f94 <_printf_i+0x164>
 800a05c:	3501      	adds	r5, #1
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	9903      	ldr	r1, [sp, #12]
 800a062:	1a5b      	subs	r3, r3, r1
 800a064:	42ab      	cmp	r3, r5
 800a066:	dcf2      	bgt.n	800a04e <_printf_i+0x21e>
 800a068:	e7eb      	b.n	800a042 <_printf_i+0x212>
 800a06a:	2500      	movs	r5, #0
 800a06c:	f104 0619 	add.w	r6, r4, #25
 800a070:	e7f5      	b.n	800a05e <_printf_i+0x22e>
 800a072:	bf00      	nop
 800a074:	0800c5d2 	.word	0x0800c5d2
 800a078:	0800c5e3 	.word	0x0800c5e3

0800a07c <iprintf>:
 800a07c:	b40f      	push	{r0, r1, r2, r3}
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <iprintf+0x2c>)
 800a080:	b513      	push	{r0, r1, r4, lr}
 800a082:	681c      	ldr	r4, [r3, #0]
 800a084:	b124      	cbz	r4, 800a090 <iprintf+0x14>
 800a086:	69a3      	ldr	r3, [r4, #24]
 800a088:	b913      	cbnz	r3, 800a090 <iprintf+0x14>
 800a08a:	4620      	mov	r0, r4
 800a08c:	f001 f858 	bl	800b140 <__sinit>
 800a090:	ab05      	add	r3, sp, #20
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	68a1      	ldr	r1, [r4, #8]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 fe07 	bl	800bcac <_vfiprintf_r>
 800a09e:	b002      	add	sp, #8
 800a0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a4:	b004      	add	sp, #16
 800a0a6:	4770      	bx	lr
 800a0a8:	2000003c 	.word	0x2000003c

0800a0ac <_puts_r>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	460e      	mov	r6, r1
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_puts_r+0x10>
 800a0b4:	6983      	ldr	r3, [r0, #24]
 800a0b6:	b90b      	cbnz	r3, 800a0bc <_puts_r+0x10>
 800a0b8:	f001 f842 	bl	800b140 <__sinit>
 800a0bc:	69ab      	ldr	r3, [r5, #24]
 800a0be:	68ac      	ldr	r4, [r5, #8]
 800a0c0:	b913      	cbnz	r3, 800a0c8 <_puts_r+0x1c>
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f001 f83c 	bl	800b140 <__sinit>
 800a0c8:	4b2c      	ldr	r3, [pc, #176]	; (800a17c <_puts_r+0xd0>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d120      	bne.n	800a110 <_puts_r+0x64>
 800a0ce:	686c      	ldr	r4, [r5, #4]
 800a0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0d2:	07db      	lsls	r3, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_puts_r+0x36>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0598      	lsls	r0, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_puts_r+0x36>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0de:	f001 f8d2 	bl	800b286 <__retarget_lock_acquire_recursive>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	0719      	lsls	r1, r3, #28
 800a0e6:	d51d      	bpl.n	800a124 <_puts_r+0x78>
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	b1db      	cbz	r3, 800a124 <_puts_r+0x78>
 800a0ec:	3e01      	subs	r6, #1
 800a0ee:	68a3      	ldr	r3, [r4, #8]
 800a0f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	60a3      	str	r3, [r4, #8]
 800a0f8:	bb39      	cbnz	r1, 800a14a <_puts_r+0x9e>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da38      	bge.n	800a170 <_puts_r+0xc4>
 800a0fe:	4622      	mov	r2, r4
 800a100:	210a      	movs	r1, #10
 800a102:	4628      	mov	r0, r5
 800a104:	f000 f848 	bl	800a198 <__swbuf_r>
 800a108:	3001      	adds	r0, #1
 800a10a:	d011      	beq.n	800a130 <_puts_r+0x84>
 800a10c:	250a      	movs	r5, #10
 800a10e:	e011      	b.n	800a134 <_puts_r+0x88>
 800a110:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <_puts_r+0xd4>)
 800a112:	429c      	cmp	r4, r3
 800a114:	d101      	bne.n	800a11a <_puts_r+0x6e>
 800a116:	68ac      	ldr	r4, [r5, #8]
 800a118:	e7da      	b.n	800a0d0 <_puts_r+0x24>
 800a11a:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <_puts_r+0xd8>)
 800a11c:	429c      	cmp	r4, r3
 800a11e:	bf08      	it	eq
 800a120:	68ec      	ldreq	r4, [r5, #12]
 800a122:	e7d5      	b.n	800a0d0 <_puts_r+0x24>
 800a124:	4621      	mov	r1, r4
 800a126:	4628      	mov	r0, r5
 800a128:	f000 f888 	bl	800a23c <__swsetup_r>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0dd      	beq.n	800a0ec <_puts_r+0x40>
 800a130:	f04f 35ff 	mov.w	r5, #4294967295
 800a134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a136:	07da      	lsls	r2, r3, #31
 800a138:	d405      	bmi.n	800a146 <_puts_r+0x9a>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	059b      	lsls	r3, r3, #22
 800a13e:	d402      	bmi.n	800a146 <_puts_r+0x9a>
 800a140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a142:	f001 f8a1 	bl	800b288 <__retarget_lock_release_recursive>
 800a146:	4628      	mov	r0, r5
 800a148:	bd70      	pop	{r4, r5, r6, pc}
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da04      	bge.n	800a158 <_puts_r+0xac>
 800a14e:	69a2      	ldr	r2, [r4, #24]
 800a150:	429a      	cmp	r2, r3
 800a152:	dc06      	bgt.n	800a162 <_puts_r+0xb6>
 800a154:	290a      	cmp	r1, #10
 800a156:	d004      	beq.n	800a162 <_puts_r+0xb6>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	6022      	str	r2, [r4, #0]
 800a15e:	7019      	strb	r1, [r3, #0]
 800a160:	e7c5      	b.n	800a0ee <_puts_r+0x42>
 800a162:	4622      	mov	r2, r4
 800a164:	4628      	mov	r0, r5
 800a166:	f000 f817 	bl	800a198 <__swbuf_r>
 800a16a:	3001      	adds	r0, #1
 800a16c:	d1bf      	bne.n	800a0ee <_puts_r+0x42>
 800a16e:	e7df      	b.n	800a130 <_puts_r+0x84>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	250a      	movs	r5, #10
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6022      	str	r2, [r4, #0]
 800a178:	701d      	strb	r5, [r3, #0]
 800a17a:	e7db      	b.n	800a134 <_puts_r+0x88>
 800a17c:	0800c6a4 	.word	0x0800c6a4
 800a180:	0800c6c4 	.word	0x0800c6c4
 800a184:	0800c684 	.word	0x0800c684

0800a188 <puts>:
 800a188:	4b02      	ldr	r3, [pc, #8]	; (800a194 <puts+0xc>)
 800a18a:	4601      	mov	r1, r0
 800a18c:	6818      	ldr	r0, [r3, #0]
 800a18e:	f7ff bf8d 	b.w	800a0ac <_puts_r>
 800a192:	bf00      	nop
 800a194:	2000003c 	.word	0x2000003c

0800a198 <__swbuf_r>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	460e      	mov	r6, r1
 800a19c:	4614      	mov	r4, r2
 800a19e:	4605      	mov	r5, r0
 800a1a0:	b118      	cbz	r0, 800a1aa <__swbuf_r+0x12>
 800a1a2:	6983      	ldr	r3, [r0, #24]
 800a1a4:	b90b      	cbnz	r3, 800a1aa <__swbuf_r+0x12>
 800a1a6:	f000 ffcb 	bl	800b140 <__sinit>
 800a1aa:	4b21      	ldr	r3, [pc, #132]	; (800a230 <__swbuf_r+0x98>)
 800a1ac:	429c      	cmp	r4, r3
 800a1ae:	d12b      	bne.n	800a208 <__swbuf_r+0x70>
 800a1b0:	686c      	ldr	r4, [r5, #4]
 800a1b2:	69a3      	ldr	r3, [r4, #24]
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	071a      	lsls	r2, r3, #28
 800a1ba:	d52f      	bpl.n	800a21c <__swbuf_r+0x84>
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	b36b      	cbz	r3, 800a21c <__swbuf_r+0x84>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	6820      	ldr	r0, [r4, #0]
 800a1c4:	1ac0      	subs	r0, r0, r3
 800a1c6:	6963      	ldr	r3, [r4, #20]
 800a1c8:	b2f6      	uxtb	r6, r6
 800a1ca:	4283      	cmp	r3, r0
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	dc04      	bgt.n	800a1da <__swbuf_r+0x42>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 ff20 	bl	800b018 <_fflush_r>
 800a1d8:	bb30      	cbnz	r0, 800a228 <__swbuf_r+0x90>
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	60a3      	str	r3, [r4, #8]
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	701e      	strb	r6, [r3, #0]
 800a1e8:	6963      	ldr	r3, [r4, #20]
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	4283      	cmp	r3, r0
 800a1ee:	d004      	beq.n	800a1fa <__swbuf_r+0x62>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	07db      	lsls	r3, r3, #31
 800a1f4:	d506      	bpl.n	800a204 <__swbuf_r+0x6c>
 800a1f6:	2e0a      	cmp	r6, #10
 800a1f8:	d104      	bne.n	800a204 <__swbuf_r+0x6c>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 ff0b 	bl	800b018 <_fflush_r>
 800a202:	b988      	cbnz	r0, 800a228 <__swbuf_r+0x90>
 800a204:	4638      	mov	r0, r7
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <__swbuf_r+0x9c>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <__swbuf_r+0x7a>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7cf      	b.n	800a1b2 <__swbuf_r+0x1a>
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <__swbuf_r+0xa0>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7ca      	b.n	800a1b2 <__swbuf_r+0x1a>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f80c 	bl	800a23c <__swsetup_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	d0cb      	beq.n	800a1c0 <__swbuf_r+0x28>
 800a228:	f04f 37ff 	mov.w	r7, #4294967295
 800a22c:	e7ea      	b.n	800a204 <__swbuf_r+0x6c>
 800a22e:	bf00      	nop
 800a230:	0800c6a4 	.word	0x0800c6a4
 800a234:	0800c6c4 	.word	0x0800c6c4
 800a238:	0800c684 	.word	0x0800c684

0800a23c <__swsetup_r>:
 800a23c:	4b32      	ldr	r3, [pc, #200]	; (800a308 <__swsetup_r+0xcc>)
 800a23e:	b570      	push	{r4, r5, r6, lr}
 800a240:	681d      	ldr	r5, [r3, #0]
 800a242:	4606      	mov	r6, r0
 800a244:	460c      	mov	r4, r1
 800a246:	b125      	cbz	r5, 800a252 <__swsetup_r+0x16>
 800a248:	69ab      	ldr	r3, [r5, #24]
 800a24a:	b913      	cbnz	r3, 800a252 <__swsetup_r+0x16>
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 ff77 	bl	800b140 <__sinit>
 800a252:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <__swsetup_r+0xd0>)
 800a254:	429c      	cmp	r4, r3
 800a256:	d10f      	bne.n	800a278 <__swsetup_r+0x3c>
 800a258:	686c      	ldr	r4, [r5, #4]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a260:	0719      	lsls	r1, r3, #28
 800a262:	d42c      	bmi.n	800a2be <__swsetup_r+0x82>
 800a264:	06dd      	lsls	r5, r3, #27
 800a266:	d411      	bmi.n	800a28c <__swsetup_r+0x50>
 800a268:	2309      	movs	r3, #9
 800a26a:	6033      	str	r3, [r6, #0]
 800a26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	e03e      	b.n	800a2f6 <__swsetup_r+0xba>
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <__swsetup_r+0xd4>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <__swsetup_r+0x46>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7eb      	b.n	800a25a <__swsetup_r+0x1e>
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <__swsetup_r+0xd8>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7e6      	b.n	800a25a <__swsetup_r+0x1e>
 800a28c:	0758      	lsls	r0, r3, #29
 800a28e:	d512      	bpl.n	800a2b6 <__swsetup_r+0x7a>
 800a290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a292:	b141      	cbz	r1, 800a2a6 <__swsetup_r+0x6a>
 800a294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a298:	4299      	cmp	r1, r3
 800a29a:	d002      	beq.n	800a2a2 <__swsetup_r+0x66>
 800a29c:	4630      	mov	r0, r6
 800a29e:	f001 fbfb 	bl	800ba98 <_free_r>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6063      	str	r3, [r4, #4]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	f043 0308 	orr.w	r3, r3, #8
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	b94b      	cbnz	r3, 800a2d6 <__swsetup_r+0x9a>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2cc:	d003      	beq.n	800a2d6 <__swsetup_r+0x9a>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 ffff 	bl	800b2d4 <__smakebuf_r>
 800a2d6:	89a0      	ldrh	r0, [r4, #12]
 800a2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2dc:	f010 0301 	ands.w	r3, r0, #1
 800a2e0:	d00a      	beq.n	800a2f8 <__swsetup_r+0xbc>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6963      	ldr	r3, [r4, #20]
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b943      	cbnz	r3, 800a302 <__swsetup_r+0xc6>
 800a2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f4:	d1ba      	bne.n	800a26c <__swsetup_r+0x30>
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	0781      	lsls	r1, r0, #30
 800a2fa:	bf58      	it	pl
 800a2fc:	6963      	ldrpl	r3, [r4, #20]
 800a2fe:	60a3      	str	r3, [r4, #8]
 800a300:	e7f4      	b.n	800a2ec <__swsetup_r+0xb0>
 800a302:	2000      	movs	r0, #0
 800a304:	e7f7      	b.n	800a2f6 <__swsetup_r+0xba>
 800a306:	bf00      	nop
 800a308:	2000003c 	.word	0x2000003c
 800a30c:	0800c6a4 	.word	0x0800c6a4
 800a310:	0800c6c4 	.word	0x0800c6c4
 800a314:	0800c684 	.word	0x0800c684

0800a318 <quorem>:
 800a318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	6903      	ldr	r3, [r0, #16]
 800a31e:	690c      	ldr	r4, [r1, #16]
 800a320:	42a3      	cmp	r3, r4
 800a322:	4607      	mov	r7, r0
 800a324:	f2c0 8081 	blt.w	800a42a <quorem+0x112>
 800a328:	3c01      	subs	r4, #1
 800a32a:	f101 0814 	add.w	r8, r1, #20
 800a32e:	f100 0514 	add.w	r5, r0, #20
 800a332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a33c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a340:	3301      	adds	r3, #1
 800a342:	429a      	cmp	r2, r3
 800a344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a34c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a350:	d331      	bcc.n	800a3b6 <quorem+0x9e>
 800a352:	f04f 0e00 	mov.w	lr, #0
 800a356:	4640      	mov	r0, r8
 800a358:	46ac      	mov	ip, r5
 800a35a:	46f2      	mov	sl, lr
 800a35c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a360:	b293      	uxth	r3, r2
 800a362:	fb06 e303 	mla	r3, r6, r3, lr
 800a366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	ebaa 0303 	sub.w	r3, sl, r3
 800a370:	f8dc a000 	ldr.w	sl, [ip]
 800a374:	0c12      	lsrs	r2, r2, #16
 800a376:	fa13 f38a 	uxtah	r3, r3, sl
 800a37a:	fb06 e202 	mla	r2, r6, r2, lr
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a386:	b292      	uxth	r2, r2
 800a388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a38c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a390:	f8bd 3000 	ldrh.w	r3, [sp]
 800a394:	4581      	cmp	r9, r0
 800a396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39a:	f84c 3b04 	str.w	r3, [ip], #4
 800a39e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3a2:	d2db      	bcs.n	800a35c <quorem+0x44>
 800a3a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3a8:	b92b      	cbnz	r3, 800a3b6 <quorem+0x9e>
 800a3aa:	9b01      	ldr	r3, [sp, #4]
 800a3ac:	3b04      	subs	r3, #4
 800a3ae:	429d      	cmp	r5, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	d32e      	bcc.n	800a412 <quorem+0xfa>
 800a3b4:	613c      	str	r4, [r7, #16]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f001 fa56 	bl	800b868 <__mcmp>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	db24      	blt.n	800a40a <quorem+0xf2>
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f04f 0c00 	mov.w	ip, #0
 800a3c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a3d0:	b293      	uxth	r3, r2
 800a3d2:	ebac 0303 	sub.w	r3, ip, r3
 800a3d6:	0c12      	lsrs	r2, r2, #16
 800a3d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a3dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ea:	45c1      	cmp	r9, r8
 800a3ec:	f840 3b04 	str.w	r3, [r0], #4
 800a3f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3f4:	d2e8      	bcs.n	800a3c8 <quorem+0xb0>
 800a3f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3fe:	b922      	cbnz	r2, 800a40a <quorem+0xf2>
 800a400:	3b04      	subs	r3, #4
 800a402:	429d      	cmp	r5, r3
 800a404:	461a      	mov	r2, r3
 800a406:	d30a      	bcc.n	800a41e <quorem+0x106>
 800a408:	613c      	str	r4, [r7, #16]
 800a40a:	4630      	mov	r0, r6
 800a40c:	b003      	add	sp, #12
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	3b04      	subs	r3, #4
 800a416:	2a00      	cmp	r2, #0
 800a418:	d1cc      	bne.n	800a3b4 <quorem+0x9c>
 800a41a:	3c01      	subs	r4, #1
 800a41c:	e7c7      	b.n	800a3ae <quorem+0x96>
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	3b04      	subs	r3, #4
 800a422:	2a00      	cmp	r2, #0
 800a424:	d1f0      	bne.n	800a408 <quorem+0xf0>
 800a426:	3c01      	subs	r4, #1
 800a428:	e7eb      	b.n	800a402 <quorem+0xea>
 800a42a:	2000      	movs	r0, #0
 800a42c:	e7ee      	b.n	800a40c <quorem+0xf4>
	...

0800a430 <_dtoa_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ed2d 8b02 	vpush	{d8}
 800a438:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a43a:	b091      	sub	sp, #68	; 0x44
 800a43c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a440:	ec59 8b10 	vmov	r8, r9, d0
 800a444:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a446:	9106      	str	r1, [sp, #24]
 800a448:	4606      	mov	r6, r0
 800a44a:	9208      	str	r2, [sp, #32]
 800a44c:	930c      	str	r3, [sp, #48]	; 0x30
 800a44e:	b975      	cbnz	r5, 800a46e <_dtoa_r+0x3e>
 800a450:	2010      	movs	r0, #16
 800a452:	f000 ff7f 	bl	800b354 <malloc>
 800a456:	4602      	mov	r2, r0
 800a458:	6270      	str	r0, [r6, #36]	; 0x24
 800a45a:	b920      	cbnz	r0, 800a466 <_dtoa_r+0x36>
 800a45c:	4baa      	ldr	r3, [pc, #680]	; (800a708 <_dtoa_r+0x2d8>)
 800a45e:	21ea      	movs	r1, #234	; 0xea
 800a460:	48aa      	ldr	r0, [pc, #680]	; (800a70c <_dtoa_r+0x2dc>)
 800a462:	f001 fdb9 	bl	800bfd8 <__assert_func>
 800a466:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a46a:	6005      	str	r5, [r0, #0]
 800a46c:	60c5      	str	r5, [r0, #12]
 800a46e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b151      	cbz	r1, 800a48a <_dtoa_r+0x5a>
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	604a      	str	r2, [r1, #4]
 800a478:	2301      	movs	r3, #1
 800a47a:	4093      	lsls	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 ffb0 	bl	800b3e4 <_Bfree>
 800a484:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	f1b9 0300 	subs.w	r3, r9, #0
 800a48e:	bfbb      	ittet	lt
 800a490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a494:	9303      	strlt	r3, [sp, #12]
 800a496:	2300      	movge	r3, #0
 800a498:	2201      	movlt	r2, #1
 800a49a:	bfac      	ite	ge
 800a49c:	6023      	strge	r3, [r4, #0]
 800a49e:	6022      	strlt	r2, [r4, #0]
 800a4a0:	4b9b      	ldr	r3, [pc, #620]	; (800a710 <_dtoa_r+0x2e0>)
 800a4a2:	9c03      	ldr	r4, [sp, #12]
 800a4a4:	43a3      	bics	r3, r4
 800a4a6:	d11c      	bne.n	800a4e2 <_dtoa_r+0xb2>
 800a4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a4b4:	ea53 0308 	orrs.w	r3, r3, r8
 800a4b8:	f000 84fd 	beq.w	800aeb6 <_dtoa_r+0xa86>
 800a4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4be:	b963      	cbnz	r3, 800a4da <_dtoa_r+0xaa>
 800a4c0:	4b94      	ldr	r3, [pc, #592]	; (800a714 <_dtoa_r+0x2e4>)
 800a4c2:	e01f      	b.n	800a504 <_dtoa_r+0xd4>
 800a4c4:	4b94      	ldr	r3, [pc, #592]	; (800a718 <_dtoa_r+0x2e8>)
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	9801      	ldr	r0, [sp, #4]
 800a4d0:	b011      	add	sp, #68	; 0x44
 800a4d2:	ecbd 8b02 	vpop	{d8}
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	4b8e      	ldr	r3, [pc, #568]	; (800a714 <_dtoa_r+0x2e4>)
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	3303      	adds	r3, #3
 800a4e0:	e7f3      	b.n	800a4ca <_dtoa_r+0x9a>
 800a4e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a4e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	d10b      	bne.n	800a508 <_dtoa_r+0xd8>
 800a4f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 84d9 	beq.w	800aeb0 <_dtoa_r+0xa80>
 800a4fe:	4887      	ldr	r0, [pc, #540]	; (800a71c <_dtoa_r+0x2ec>)
 800a500:	6018      	str	r0, [r3, #0]
 800a502:	1e43      	subs	r3, r0, #1
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	e7e2      	b.n	800a4ce <_dtoa_r+0x9e>
 800a508:	a90f      	add	r1, sp, #60	; 0x3c
 800a50a:	aa0e      	add	r2, sp, #56	; 0x38
 800a50c:	4630      	mov	r0, r6
 800a50e:	eeb0 0b48 	vmov.f64	d0, d8
 800a512:	f001 fa4f 	bl	800b9b4 <__d2b>
 800a516:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a51a:	4605      	mov	r5, r0
 800a51c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a51e:	2900      	cmp	r1, #0
 800a520:	d046      	beq.n	800a5b0 <_dtoa_r+0x180>
 800a522:	ee18 4a90 	vmov	r4, s17
 800a526:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a52a:	ec53 2b18 	vmov	r2, r3, d8
 800a52e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a536:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a53a:	2400      	movs	r4, #0
 800a53c:	ec43 2b16 	vmov	d6, r2, r3
 800a540:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a544:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6f0 <_dtoa_r+0x2c0>
 800a548:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a54c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a6f8 <_dtoa_r+0x2c8>
 800a550:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a554:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a700 <_dtoa_r+0x2d0>
 800a558:	ee07 1a90 	vmov	s15, r1
 800a55c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a560:	eeb0 7b46 	vmov.f64	d7, d6
 800a564:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a568:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a56c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a574:	ee16 ba90 	vmov	fp, s13
 800a578:	940a      	str	r4, [sp, #40]	; 0x28
 800a57a:	d508      	bpl.n	800a58e <_dtoa_r+0x15e>
 800a57c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a580:	eeb4 6b47 	vcmp.f64	d6, d7
 800a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a588:	bf18      	it	ne
 800a58a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a58e:	f1bb 0f16 	cmp.w	fp, #22
 800a592:	d82f      	bhi.n	800a5f4 <_dtoa_r+0x1c4>
 800a594:	4b62      	ldr	r3, [pc, #392]	; (800a720 <_dtoa_r+0x2f0>)
 800a596:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a59a:	ed93 7b00 	vldr	d7, [r3]
 800a59e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	d501      	bpl.n	800a5ac <_dtoa_r+0x17c>
 800a5a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e022      	b.n	800a5f6 <_dtoa_r+0x1c6>
 800a5b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a5b2:	4401      	add	r1, r0
 800a5b4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	bfc1      	itttt	gt
 800a5bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5c0:	fa04 f303 	lslgt.w	r3, r4, r3
 800a5c4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a5c8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a5cc:	bfd6      	itet	le
 800a5ce:	f1c3 0320 	rsble	r3, r3, #32
 800a5d2:	ea43 0808 	orrgt.w	r8, r3, r8
 800a5d6:	fa08 f803 	lslle.w	r8, r8, r3
 800a5da:	ee07 8a90 	vmov	s15, r8
 800a5de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a5e2:	3901      	subs	r1, #1
 800a5e4:	ee17 4a90 	vmov	r4, s15
 800a5e8:	ec53 2b17 	vmov	r2, r3, d7
 800a5ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a5f0:	2401      	movs	r4, #1
 800a5f2:	e7a3      	b.n	800a53c <_dtoa_r+0x10c>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f8:	1a43      	subs	r3, r0, r1
 800a5fa:	1e5a      	subs	r2, r3, #1
 800a5fc:	bf45      	ittet	mi
 800a5fe:	f1c3 0301 	rsbmi	r3, r3, #1
 800a602:	9304      	strmi	r3, [sp, #16]
 800a604:	2300      	movpl	r3, #0
 800a606:	2300      	movmi	r3, #0
 800a608:	9205      	str	r2, [sp, #20]
 800a60a:	bf54      	ite	pl
 800a60c:	9304      	strpl	r3, [sp, #16]
 800a60e:	9305      	strmi	r3, [sp, #20]
 800a610:	f1bb 0f00 	cmp.w	fp, #0
 800a614:	db18      	blt.n	800a648 <_dtoa_r+0x218>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a61c:	445b      	add	r3, fp
 800a61e:	9305      	str	r3, [sp, #20]
 800a620:	2300      	movs	r3, #0
 800a622:	9a06      	ldr	r2, [sp, #24]
 800a624:	2a09      	cmp	r2, #9
 800a626:	d849      	bhi.n	800a6bc <_dtoa_r+0x28c>
 800a628:	2a05      	cmp	r2, #5
 800a62a:	bfc4      	itt	gt
 800a62c:	3a04      	subgt	r2, #4
 800a62e:	9206      	strgt	r2, [sp, #24]
 800a630:	9a06      	ldr	r2, [sp, #24]
 800a632:	f1a2 0202 	sub.w	r2, r2, #2
 800a636:	bfcc      	ite	gt
 800a638:	2400      	movgt	r4, #0
 800a63a:	2401      	movle	r4, #1
 800a63c:	2a03      	cmp	r2, #3
 800a63e:	d848      	bhi.n	800a6d2 <_dtoa_r+0x2a2>
 800a640:	e8df f002 	tbb	[pc, r2]
 800a644:	3a2c2e0b 	.word	0x3a2c2e0b
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	2200      	movs	r2, #0
 800a64c:	eba3 030b 	sub.w	r3, r3, fp
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9209      	str	r2, [sp, #36]	; 0x24
 800a654:	f1cb 0300 	rsb	r3, fp, #0
 800a658:	e7e3      	b.n	800a622 <_dtoa_r+0x1f2>
 800a65a:	2200      	movs	r2, #0
 800a65c:	9207      	str	r2, [sp, #28]
 800a65e:	9a08      	ldr	r2, [sp, #32]
 800a660:	2a00      	cmp	r2, #0
 800a662:	dc39      	bgt.n	800a6d8 <_dtoa_r+0x2a8>
 800a664:	f04f 0a01 	mov.w	sl, #1
 800a668:	46d1      	mov	r9, sl
 800a66a:	4652      	mov	r2, sl
 800a66c:	f8cd a020 	str.w	sl, [sp, #32]
 800a670:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a672:	2100      	movs	r1, #0
 800a674:	6079      	str	r1, [r7, #4]
 800a676:	2004      	movs	r0, #4
 800a678:	f100 0c14 	add.w	ip, r0, #20
 800a67c:	4594      	cmp	ip, r2
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	d92f      	bls.n	800a6e2 <_dtoa_r+0x2b2>
 800a682:	4630      	mov	r0, r6
 800a684:	930d      	str	r3, [sp, #52]	; 0x34
 800a686:	f000 fe6d 	bl	800b364 <_Balloc>
 800a68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a68c:	9001      	str	r0, [sp, #4]
 800a68e:	4602      	mov	r2, r0
 800a690:	2800      	cmp	r0, #0
 800a692:	d149      	bne.n	800a728 <_dtoa_r+0x2f8>
 800a694:	4b23      	ldr	r3, [pc, #140]	; (800a724 <_dtoa_r+0x2f4>)
 800a696:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a69a:	e6e1      	b.n	800a460 <_dtoa_r+0x30>
 800a69c:	2201      	movs	r2, #1
 800a69e:	e7dd      	b.n	800a65c <_dtoa_r+0x22c>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	9a08      	ldr	r2, [sp, #32]
 800a6a6:	eb0b 0a02 	add.w	sl, fp, r2
 800a6aa:	f10a 0901 	add.w	r9, sl, #1
 800a6ae:	464a      	mov	r2, r9
 800a6b0:	2a01      	cmp	r2, #1
 800a6b2:	bfb8      	it	lt
 800a6b4:	2201      	movlt	r2, #1
 800a6b6:	e7db      	b.n	800a670 <_dtoa_r+0x240>
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	e7f2      	b.n	800a6a2 <_dtoa_r+0x272>
 800a6bc:	2401      	movs	r4, #1
 800a6be:	2200      	movs	r2, #0
 800a6c0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	46d1      	mov	r9, sl
 800a6cc:	2212      	movs	r2, #18
 800a6ce:	9108      	str	r1, [sp, #32]
 800a6d0:	e7ce      	b.n	800a670 <_dtoa_r+0x240>
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	9207      	str	r2, [sp, #28]
 800a6d6:	e7f5      	b.n	800a6c4 <_dtoa_r+0x294>
 800a6d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a6dc:	46d1      	mov	r9, sl
 800a6de:	4652      	mov	r2, sl
 800a6e0:	e7c6      	b.n	800a670 <_dtoa_r+0x240>
 800a6e2:	3101      	adds	r1, #1
 800a6e4:	6079      	str	r1, [r7, #4]
 800a6e6:	0040      	lsls	r0, r0, #1
 800a6e8:	e7c6      	b.n	800a678 <_dtoa_r+0x248>
 800a6ea:	bf00      	nop
 800a6ec:	f3af 8000 	nop.w
 800a6f0:	636f4361 	.word	0x636f4361
 800a6f4:	3fd287a7 	.word	0x3fd287a7
 800a6f8:	8b60c8b3 	.word	0x8b60c8b3
 800a6fc:	3fc68a28 	.word	0x3fc68a28
 800a700:	509f79fb 	.word	0x509f79fb
 800a704:	3fd34413 	.word	0x3fd34413
 800a708:	0800c601 	.word	0x0800c601
 800a70c:	0800c618 	.word	0x0800c618
 800a710:	7ff00000 	.word	0x7ff00000
 800a714:	0800c5fd 	.word	0x0800c5fd
 800a718:	0800c5f4 	.word	0x0800c5f4
 800a71c:	0800c5d1 	.word	0x0800c5d1
 800a720:	0800c768 	.word	0x0800c768
 800a724:	0800c673 	.word	0x0800c673
 800a728:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a72a:	9901      	ldr	r1, [sp, #4]
 800a72c:	6011      	str	r1, [r2, #0]
 800a72e:	f1b9 0f0e 	cmp.w	r9, #14
 800a732:	d86c      	bhi.n	800a80e <_dtoa_r+0x3de>
 800a734:	2c00      	cmp	r4, #0
 800a736:	d06a      	beq.n	800a80e <_dtoa_r+0x3de>
 800a738:	f1bb 0f00 	cmp.w	fp, #0
 800a73c:	f340 80a0 	ble.w	800a880 <_dtoa_r+0x450>
 800a740:	49c1      	ldr	r1, [pc, #772]	; (800aa48 <_dtoa_r+0x618>)
 800a742:	f00b 020f 	and.w	r2, fp, #15
 800a746:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a74a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a74e:	ed92 7b00 	vldr	d7, [r2]
 800a752:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a756:	f000 8087 	beq.w	800a868 <_dtoa_r+0x438>
 800a75a:	4abc      	ldr	r2, [pc, #752]	; (800aa4c <_dtoa_r+0x61c>)
 800a75c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a760:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a764:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a768:	f001 010f 	and.w	r1, r1, #15
 800a76c:	2203      	movs	r2, #3
 800a76e:	48b7      	ldr	r0, [pc, #732]	; (800aa4c <_dtoa_r+0x61c>)
 800a770:	2900      	cmp	r1, #0
 800a772:	d17b      	bne.n	800a86c <_dtoa_r+0x43c>
 800a774:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a77c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a782:	2900      	cmp	r1, #0
 800a784:	f000 80a2 	beq.w	800a8cc <_dtoa_r+0x49c>
 800a788:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a78c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a790:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a798:	f140 8098 	bpl.w	800a8cc <_dtoa_r+0x49c>
 800a79c:	f1b9 0f00 	cmp.w	r9, #0
 800a7a0:	f000 8094 	beq.w	800a8cc <_dtoa_r+0x49c>
 800a7a4:	f1ba 0f00 	cmp.w	sl, #0
 800a7a8:	dd2f      	ble.n	800a80a <_dtoa_r+0x3da>
 800a7aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a7ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7b6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	4650      	mov	r0, sl
 800a7be:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a7c6:	ee07 2a90 	vmov	s15, r2
 800a7ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a7d2:	ee15 4a90 	vmov	r4, s11
 800a7d6:	ec52 1b15 	vmov	r1, r2, d5
 800a7da:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d177      	bne.n	800a8d2 <_dtoa_r+0x4a2>
 800a7e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a7e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a7ea:	ec42 1b17 	vmov	d7, r1, r2
 800a7ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	f300 8263 	bgt.w	800acc0 <_dtoa_r+0x890>
 800a7fa:	eeb1 7b47 	vneg.f64	d7, d7
 800a7fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a806:	f100 8258 	bmi.w	800acba <_dtoa_r+0x88a>
 800a80a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a80e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a810:	2a00      	cmp	r2, #0
 800a812:	f2c0 811d 	blt.w	800aa50 <_dtoa_r+0x620>
 800a816:	f1bb 0f0e 	cmp.w	fp, #14
 800a81a:	f300 8119 	bgt.w	800aa50 <_dtoa_r+0x620>
 800a81e:	4b8a      	ldr	r3, [pc, #552]	; (800aa48 <_dtoa_r+0x618>)
 800a820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a824:	ed93 6b00 	vldr	d6, [r3]
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f280 80b7 	bge.w	800a99e <_dtoa_r+0x56e>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	f300 80b3 	bgt.w	800a99e <_dtoa_r+0x56e>
 800a838:	f040 823f 	bne.w	800acba <_dtoa_r+0x88a>
 800a83c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a840:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a844:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a850:	464c      	mov	r4, r9
 800a852:	464f      	mov	r7, r9
 800a854:	f280 8215 	bge.w	800ac82 <_dtoa_r+0x852>
 800a858:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a85c:	2331      	movs	r3, #49	; 0x31
 800a85e:	f808 3b01 	strb.w	r3, [r8], #1
 800a862:	f10b 0b01 	add.w	fp, fp, #1
 800a866:	e211      	b.n	800ac8c <_dtoa_r+0x85c>
 800a868:	2202      	movs	r2, #2
 800a86a:	e780      	b.n	800a76e <_dtoa_r+0x33e>
 800a86c:	07cc      	lsls	r4, r1, #31
 800a86e:	d504      	bpl.n	800a87a <_dtoa_r+0x44a>
 800a870:	ed90 6b00 	vldr	d6, [r0]
 800a874:	3201      	adds	r2, #1
 800a876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a87a:	1049      	asrs	r1, r1, #1
 800a87c:	3008      	adds	r0, #8
 800a87e:	e777      	b.n	800a770 <_dtoa_r+0x340>
 800a880:	d022      	beq.n	800a8c8 <_dtoa_r+0x498>
 800a882:	f1cb 0100 	rsb	r1, fp, #0
 800a886:	4a70      	ldr	r2, [pc, #448]	; (800aa48 <_dtoa_r+0x618>)
 800a888:	f001 000f 	and.w	r0, r1, #15
 800a88c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a890:	ed92 7b00 	vldr	d7, [r2]
 800a894:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a898:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a89c:	486b      	ldr	r0, [pc, #428]	; (800aa4c <_dtoa_r+0x61c>)
 800a89e:	1109      	asrs	r1, r1, #4
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	b929      	cbnz	r1, 800a8b2 <_dtoa_r+0x482>
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	f43f af6a 	beq.w	800a780 <_dtoa_r+0x350>
 800a8ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8b0:	e766      	b.n	800a780 <_dtoa_r+0x350>
 800a8b2:	07cf      	lsls	r7, r1, #31
 800a8b4:	d505      	bpl.n	800a8c2 <_dtoa_r+0x492>
 800a8b6:	ed90 6b00 	vldr	d6, [r0]
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	2401      	movs	r4, #1
 800a8be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8c2:	1049      	asrs	r1, r1, #1
 800a8c4:	3008      	adds	r0, #8
 800a8c6:	e7ed      	b.n	800a8a4 <_dtoa_r+0x474>
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	e759      	b.n	800a780 <_dtoa_r+0x350>
 800a8cc:	465f      	mov	r7, fp
 800a8ce:	4648      	mov	r0, r9
 800a8d0:	e775      	b.n	800a7be <_dtoa_r+0x38e>
 800a8d2:	ec42 1b17 	vmov	d7, r1, r2
 800a8d6:	4a5c      	ldr	r2, [pc, #368]	; (800aa48 <_dtoa_r+0x618>)
 800a8d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8dc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	1814      	adds	r4, r2, r0
 800a8e4:	9a07      	ldr	r2, [sp, #28]
 800a8e6:	b352      	cbz	r2, 800a93e <_dtoa_r+0x50e>
 800a8e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a8ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a8f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a8f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a900:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a904:	ee14 2a90 	vmov	r2, s9
 800a908:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a90c:	3230      	adds	r2, #48	; 0x30
 800a90e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a912:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91a:	f808 2b01 	strb.w	r2, [r8], #1
 800a91e:	d439      	bmi.n	800a994 <_dtoa_r+0x564>
 800a920:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a924:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92c:	d472      	bmi.n	800aa14 <_dtoa_r+0x5e4>
 800a92e:	45a0      	cmp	r8, r4
 800a930:	f43f af6b 	beq.w	800a80a <_dtoa_r+0x3da>
 800a934:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a938:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a93c:	e7e0      	b.n	800a900 <_dtoa_r+0x4d0>
 800a93e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a942:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a946:	4621      	mov	r1, r4
 800a948:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a94c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a950:	ee14 2a90 	vmov	r2, s9
 800a954:	3230      	adds	r2, #48	; 0x30
 800a956:	f808 2b01 	strb.w	r2, [r8], #1
 800a95a:	45a0      	cmp	r8, r4
 800a95c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a960:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a964:	d118      	bne.n	800a998 <_dtoa_r+0x568>
 800a966:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a96a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a96e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a976:	dc4d      	bgt.n	800aa14 <_dtoa_r+0x5e4>
 800a978:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a97c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	f57f af41 	bpl.w	800a80a <_dtoa_r+0x3da>
 800a988:	4688      	mov	r8, r1
 800a98a:	3901      	subs	r1, #1
 800a98c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a990:	2b30      	cmp	r3, #48	; 0x30
 800a992:	d0f9      	beq.n	800a988 <_dtoa_r+0x558>
 800a994:	46bb      	mov	fp, r7
 800a996:	e02a      	b.n	800a9ee <_dtoa_r+0x5be>
 800a998:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a99c:	e7d6      	b.n	800a94c <_dtoa_r+0x51c>
 800a99e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a9a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a9ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a9b2:	ee15 3a10 	vmov	r3, s10
 800a9b6:	3330      	adds	r3, #48	; 0x30
 800a9b8:	f808 3b01 	strb.w	r3, [r8], #1
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	eba8 0303 	sub.w	r3, r8, r3
 800a9c2:	4599      	cmp	r9, r3
 800a9c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9cc:	d133      	bne.n	800aa36 <_dtoa_r+0x606>
 800a9ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a9d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9da:	dc1a      	bgt.n	800aa12 <_dtoa_r+0x5e2>
 800a9dc:	eeb4 7b46 	vcmp.f64	d7, d6
 800a9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e4:	d103      	bne.n	800a9ee <_dtoa_r+0x5be>
 800a9e6:	ee15 3a10 	vmov	r3, s10
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d411      	bmi.n	800aa12 <_dtoa_r+0x5e2>
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f000 fcf7 	bl	800b3e4 <_Bfree>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9fa:	f888 3000 	strb.w	r3, [r8]
 800a9fe:	f10b 0301 	add.w	r3, fp, #1
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f43f ad61 	beq.w	800a4ce <_dtoa_r+0x9e>
 800aa0c:	f8c3 8000 	str.w	r8, [r3]
 800aa10:	e55d      	b.n	800a4ce <_dtoa_r+0x9e>
 800aa12:	465f      	mov	r7, fp
 800aa14:	4643      	mov	r3, r8
 800aa16:	4698      	mov	r8, r3
 800aa18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1c:	2a39      	cmp	r2, #57	; 0x39
 800aa1e:	d106      	bne.n	800aa2e <_dtoa_r+0x5fe>
 800aa20:	9a01      	ldr	r2, [sp, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d1f7      	bne.n	800aa16 <_dtoa_r+0x5e6>
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	2230      	movs	r2, #48	; 0x30
 800aa2a:	3701      	adds	r7, #1
 800aa2c:	700a      	strb	r2, [r1, #0]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	3201      	adds	r2, #1
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e7ae      	b.n	800a994 <_dtoa_r+0x564>
 800aa36:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa42:	d1b2      	bne.n	800a9aa <_dtoa_r+0x57a>
 800aa44:	e7d3      	b.n	800a9ee <_dtoa_r+0x5be>
 800aa46:	bf00      	nop
 800aa48:	0800c768 	.word	0x0800c768
 800aa4c:	0800c740 	.word	0x0800c740
 800aa50:	9907      	ldr	r1, [sp, #28]
 800aa52:	2900      	cmp	r1, #0
 800aa54:	f000 80d0 	beq.w	800abf8 <_dtoa_r+0x7c8>
 800aa58:	9906      	ldr	r1, [sp, #24]
 800aa5a:	2901      	cmp	r1, #1
 800aa5c:	f300 80b4 	bgt.w	800abc8 <_dtoa_r+0x798>
 800aa60:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa62:	2900      	cmp	r1, #0
 800aa64:	f000 80ac 	beq.w	800abc0 <_dtoa_r+0x790>
 800aa68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa70:	461c      	mov	r4, r3
 800aa72:	930a      	str	r3, [sp, #40]	; 0x28
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	4413      	add	r3, r2
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	9b05      	ldr	r3, [sp, #20]
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	4630      	mov	r0, r6
 800aa82:	9305      	str	r3, [sp, #20]
 800aa84:	f000 fd66 	bl	800b554 <__i2b>
 800aa88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	dd0d      	ble.n	800aaae <_dtoa_r+0x67e>
 800aa92:	9a05      	ldr	r2, [sp, #20]
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	dd0a      	ble.n	800aaae <_dtoa_r+0x67e>
 800aa98:	4542      	cmp	r2, r8
 800aa9a:	9904      	ldr	r1, [sp, #16]
 800aa9c:	bfa8      	it	ge
 800aa9e:	4642      	movge	r2, r8
 800aaa0:	1a89      	subs	r1, r1, r2
 800aaa2:	9104      	str	r1, [sp, #16]
 800aaa4:	9905      	ldr	r1, [sp, #20]
 800aaa6:	eba8 0802 	sub.w	r8, r8, r2
 800aaaa:	1a8a      	subs	r2, r1, r2
 800aaac:	9205      	str	r2, [sp, #20]
 800aaae:	b303      	cbz	r3, 800aaf2 <_dtoa_r+0x6c2>
 800aab0:	9a07      	ldr	r2, [sp, #28]
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	f000 80a5 	beq.w	800ac02 <_dtoa_r+0x7d2>
 800aab8:	2c00      	cmp	r4, #0
 800aaba:	dd13      	ble.n	800aae4 <_dtoa_r+0x6b4>
 800aabc:	4639      	mov	r1, r7
 800aabe:	4622      	mov	r2, r4
 800aac0:	4630      	mov	r0, r6
 800aac2:	930d      	str	r3, [sp, #52]	; 0x34
 800aac4:	f000 fe06 	bl	800b6d4 <__pow5mult>
 800aac8:	462a      	mov	r2, r5
 800aaca:	4601      	mov	r1, r0
 800aacc:	4607      	mov	r7, r0
 800aace:	4630      	mov	r0, r6
 800aad0:	f000 fd56 	bl	800b580 <__multiply>
 800aad4:	4629      	mov	r1, r5
 800aad6:	900a      	str	r0, [sp, #40]	; 0x28
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 fc83 	bl	800b3e4 <_Bfree>
 800aade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae2:	4615      	mov	r5, r2
 800aae4:	1b1a      	subs	r2, r3, r4
 800aae6:	d004      	beq.n	800aaf2 <_dtoa_r+0x6c2>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 fdf2 	bl	800b6d4 <__pow5mult>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f000 fd2d 	bl	800b554 <__i2b>
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	f340 8081 	ble.w	800ac06 <_dtoa_r+0x7d6>
 800ab04:	461a      	mov	r2, r3
 800ab06:	4601      	mov	r1, r0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 fde3 	bl	800b6d4 <__pow5mult>
 800ab0e:	9b06      	ldr	r3, [sp, #24]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	4604      	mov	r4, r0
 800ab14:	dd7a      	ble.n	800ac0c <_dtoa_r+0x7dc>
 800ab16:	2300      	movs	r3, #0
 800ab18:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1a:	6922      	ldr	r2, [r4, #16]
 800ab1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab20:	6910      	ldr	r0, [r2, #16]
 800ab22:	f000 fcc7 	bl	800b4b4 <__hi0bits>
 800ab26:	f1c0 0020 	rsb	r0, r0, #32
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	4418      	add	r0, r3
 800ab2e:	f010 001f 	ands.w	r0, r0, #31
 800ab32:	f000 808c 	beq.w	800ac4e <_dtoa_r+0x81e>
 800ab36:	f1c0 0220 	rsb	r2, r0, #32
 800ab3a:	2a04      	cmp	r2, #4
 800ab3c:	f340 8085 	ble.w	800ac4a <_dtoa_r+0x81a>
 800ab40:	f1c0 001c 	rsb	r0, r0, #28
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	4403      	add	r3, r0
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	4403      	add	r3, r0
 800ab4e:	4480      	add	r8, r0
 800ab50:	9305      	str	r3, [sp, #20]
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	dd05      	ble.n	800ab64 <_dtoa_r+0x734>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 fe13 	bl	800b788 <__lshift>
 800ab62:	4605      	mov	r5, r0
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dd05      	ble.n	800ab76 <_dtoa_r+0x746>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f000 fe0a 	bl	800b788 <__lshift>
 800ab74:	4604      	mov	r4, r0
 800ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d06a      	beq.n	800ac52 <_dtoa_r+0x822>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 fe72 	bl	800b868 <__mcmp>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	da64      	bge.n	800ac52 <_dtoa_r+0x822>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 fc4a 	bl	800b428 <__multadd>
 800ab94:	9b07      	ldr	r3, [sp, #28]
 800ab96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 8191 	beq.w	800aec4 <_dtoa_r+0xa94>
 800aba2:	4639      	mov	r1, r7
 800aba4:	2300      	movs	r3, #0
 800aba6:	220a      	movs	r2, #10
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 fc3d 	bl	800b428 <__multadd>
 800abae:	f1ba 0f00 	cmp.w	sl, #0
 800abb2:	4607      	mov	r7, r0
 800abb4:	f300 808d 	bgt.w	800acd2 <_dtoa_r+0x8a2>
 800abb8:	9b06      	ldr	r3, [sp, #24]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	dc50      	bgt.n	800ac60 <_dtoa_r+0x830>
 800abbe:	e088      	b.n	800acd2 <_dtoa_r+0x8a2>
 800abc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abc6:	e751      	b.n	800aa6c <_dtoa_r+0x63c>
 800abc8:	f109 34ff 	add.w	r4, r9, #4294967295
 800abcc:	42a3      	cmp	r3, r4
 800abce:	bfbf      	itttt	lt
 800abd0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800abd2:	1ae3      	sublt	r3, r4, r3
 800abd4:	18d2      	addlt	r2, r2, r3
 800abd6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800abd8:	bfb6      	itet	lt
 800abda:	4623      	movlt	r3, r4
 800abdc:	1b1c      	subge	r4, r3, r4
 800abde:	2400      	movlt	r4, #0
 800abe0:	f1b9 0f00 	cmp.w	r9, #0
 800abe4:	bfb5      	itete	lt
 800abe6:	9a04      	ldrlt	r2, [sp, #16]
 800abe8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800abec:	eba2 0809 	sublt.w	r8, r2, r9
 800abf0:	464a      	movge	r2, r9
 800abf2:	bfb8      	it	lt
 800abf4:	2200      	movlt	r2, #0
 800abf6:	e73c      	b.n	800aa72 <_dtoa_r+0x642>
 800abf8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abfc:	9f07      	ldr	r7, [sp, #28]
 800abfe:	461c      	mov	r4, r3
 800ac00:	e744      	b.n	800aa8c <_dtoa_r+0x65c>
 800ac02:	461a      	mov	r2, r3
 800ac04:	e770      	b.n	800aae8 <_dtoa_r+0x6b8>
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	dc18      	bgt.n	800ac3e <_dtoa_r+0x80e>
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	b9b3      	cbnz	r3, 800ac3e <_dtoa_r+0x80e>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ac16:	b9a2      	cbnz	r2, 800ac42 <_dtoa_r+0x812>
 800ac18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac1c:	0d12      	lsrs	r2, r2, #20
 800ac1e:	0512      	lsls	r2, r2, #20
 800ac20:	b18a      	cbz	r2, 800ac46 <_dtoa_r+0x816>
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	3301      	adds	r3, #1
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	9b05      	ldr	r3, [sp, #20]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	2301      	movs	r3, #1
 800ac30:	930a      	str	r3, [sp, #40]	; 0x28
 800ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f47f af70 	bne.w	800ab1a <_dtoa_r+0x6ea>
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e775      	b.n	800ab2a <_dtoa_r+0x6fa>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e7f6      	b.n	800ac30 <_dtoa_r+0x800>
 800ac42:	9b02      	ldr	r3, [sp, #8]
 800ac44:	e7f4      	b.n	800ac30 <_dtoa_r+0x800>
 800ac46:	920a      	str	r2, [sp, #40]	; 0x28
 800ac48:	e7f3      	b.n	800ac32 <_dtoa_r+0x802>
 800ac4a:	d082      	beq.n	800ab52 <_dtoa_r+0x722>
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	301c      	adds	r0, #28
 800ac50:	e778      	b.n	800ab44 <_dtoa_r+0x714>
 800ac52:	f1b9 0f00 	cmp.w	r9, #0
 800ac56:	dc37      	bgt.n	800acc8 <_dtoa_r+0x898>
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	dd34      	ble.n	800acc8 <_dtoa_r+0x898>
 800ac5e:	46ca      	mov	sl, r9
 800ac60:	f1ba 0f00 	cmp.w	sl, #0
 800ac64:	d10d      	bne.n	800ac82 <_dtoa_r+0x852>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4653      	mov	r3, sl
 800ac6a:	2205      	movs	r2, #5
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 fbdb 	bl	800b428 <__multadd>
 800ac72:	4601      	mov	r1, r0
 800ac74:	4604      	mov	r4, r0
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 fdf6 	bl	800b868 <__mcmp>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f73f adeb 	bgt.w	800a858 <_dtoa_r+0x428>
 800ac82:	9b08      	ldr	r3, [sp, #32]
 800ac84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac88:	ea6f 0b03 	mvn.w	fp, r3
 800ac8c:	f04f 0900 	mov.w	r9, #0
 800ac90:	4621      	mov	r1, r4
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 fba6 	bl	800b3e4 <_Bfree>
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	f43f aea8 	beq.w	800a9ee <_dtoa_r+0x5be>
 800ac9e:	f1b9 0f00 	cmp.w	r9, #0
 800aca2:	d005      	beq.n	800acb0 <_dtoa_r+0x880>
 800aca4:	45b9      	cmp	r9, r7
 800aca6:	d003      	beq.n	800acb0 <_dtoa_r+0x880>
 800aca8:	4649      	mov	r1, r9
 800acaa:	4630      	mov	r0, r6
 800acac:	f000 fb9a 	bl	800b3e4 <_Bfree>
 800acb0:	4639      	mov	r1, r7
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 fb96 	bl	800b3e4 <_Bfree>
 800acb8:	e699      	b.n	800a9ee <_dtoa_r+0x5be>
 800acba:	2400      	movs	r4, #0
 800acbc:	4627      	mov	r7, r4
 800acbe:	e7e0      	b.n	800ac82 <_dtoa_r+0x852>
 800acc0:	46bb      	mov	fp, r7
 800acc2:	4604      	mov	r4, r0
 800acc4:	4607      	mov	r7, r0
 800acc6:	e5c7      	b.n	800a858 <_dtoa_r+0x428>
 800acc8:	9b07      	ldr	r3, [sp, #28]
 800acca:	46ca      	mov	sl, r9
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 8100 	beq.w	800aed2 <_dtoa_r+0xaa2>
 800acd2:	f1b8 0f00 	cmp.w	r8, #0
 800acd6:	dd05      	ble.n	800ace4 <_dtoa_r+0x8b4>
 800acd8:	4639      	mov	r1, r7
 800acda:	4642      	mov	r2, r8
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 fd53 	bl	800b788 <__lshift>
 800ace2:	4607      	mov	r7, r0
 800ace4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d05d      	beq.n	800ada6 <_dtoa_r+0x976>
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4630      	mov	r0, r6
 800acee:	f000 fb39 	bl	800b364 <_Balloc>
 800acf2:	4680      	mov	r8, r0
 800acf4:	b928      	cbnz	r0, 800ad02 <_dtoa_r+0x8d2>
 800acf6:	4b82      	ldr	r3, [pc, #520]	; (800af00 <_dtoa_r+0xad0>)
 800acf8:	4602      	mov	r2, r0
 800acfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acfe:	f7ff bbaf 	b.w	800a460 <_dtoa_r+0x30>
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	3202      	adds	r2, #2
 800ad06:	0092      	lsls	r2, r2, #2
 800ad08:	f107 010c 	add.w	r1, r7, #12
 800ad0c:	300c      	adds	r0, #12
 800ad0e:	f7fe fd5d 	bl	80097cc <memcpy>
 800ad12:	2201      	movs	r2, #1
 800ad14:	4641      	mov	r1, r8
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 fd36 	bl	800b788 <__lshift>
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	4453      	add	r3, sl
 800ad26:	9308      	str	r3, [sp, #32]
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	46b9      	mov	r9, r7
 800ad30:	9307      	str	r3, [sp, #28]
 800ad32:	4607      	mov	r7, r0
 800ad34:	9b04      	ldr	r3, [sp, #16]
 800ad36:	4621      	mov	r1, r4
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	9302      	str	r3, [sp, #8]
 800ad3e:	f7ff faeb 	bl	800a318 <quorem>
 800ad42:	4603      	mov	r3, r0
 800ad44:	3330      	adds	r3, #48	; 0x30
 800ad46:	9005      	str	r0, [sp, #20]
 800ad48:	4649      	mov	r1, r9
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4e:	f000 fd8b 	bl	800b868 <__mcmp>
 800ad52:	463a      	mov	r2, r7
 800ad54:	4682      	mov	sl, r0
 800ad56:	4621      	mov	r1, r4
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 fda1 	bl	800b8a0 <__mdiff>
 800ad5e:	68c2      	ldr	r2, [r0, #12]
 800ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad62:	4680      	mov	r8, r0
 800ad64:	bb0a      	cbnz	r2, 800adaa <_dtoa_r+0x97a>
 800ad66:	4601      	mov	r1, r0
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f000 fd7d 	bl	800b868 <__mcmp>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	4602      	mov	r2, r0
 800ad72:	4641      	mov	r1, r8
 800ad74:	4630      	mov	r0, r6
 800ad76:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ad7a:	f000 fb33 	bl	800b3e4 <_Bfree>
 800ad7e:	9b06      	ldr	r3, [sp, #24]
 800ad80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad82:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad86:	ea43 0102 	orr.w	r1, r3, r2
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	d10d      	bne.n	800adae <_dtoa_r+0x97e>
 800ad92:	2b39      	cmp	r3, #57	; 0x39
 800ad94:	d029      	beq.n	800adea <_dtoa_r+0x9ba>
 800ad96:	f1ba 0f00 	cmp.w	sl, #0
 800ad9a:	dd01      	ble.n	800ada0 <_dtoa_r+0x970>
 800ad9c:	9b05      	ldr	r3, [sp, #20]
 800ad9e:	3331      	adds	r3, #49	; 0x31
 800ada0:	9a02      	ldr	r2, [sp, #8]
 800ada2:	7013      	strb	r3, [r2, #0]
 800ada4:	e774      	b.n	800ac90 <_dtoa_r+0x860>
 800ada6:	4638      	mov	r0, r7
 800ada8:	e7b8      	b.n	800ad1c <_dtoa_r+0x8ec>
 800adaa:	2201      	movs	r2, #1
 800adac:	e7e1      	b.n	800ad72 <_dtoa_r+0x942>
 800adae:	f1ba 0f00 	cmp.w	sl, #0
 800adb2:	db06      	blt.n	800adc2 <_dtoa_r+0x992>
 800adb4:	9906      	ldr	r1, [sp, #24]
 800adb6:	ea41 0a0a 	orr.w	sl, r1, sl
 800adba:	9907      	ldr	r1, [sp, #28]
 800adbc:	ea5a 0101 	orrs.w	r1, sl, r1
 800adc0:	d120      	bne.n	800ae04 <_dtoa_r+0x9d4>
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	ddec      	ble.n	800ada0 <_dtoa_r+0x970>
 800adc6:	4629      	mov	r1, r5
 800adc8:	2201      	movs	r2, #1
 800adca:	4630      	mov	r0, r6
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	f000 fcdb 	bl	800b788 <__lshift>
 800add2:	4621      	mov	r1, r4
 800add4:	4605      	mov	r5, r0
 800add6:	f000 fd47 	bl	800b868 <__mcmp>
 800adda:	2800      	cmp	r0, #0
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	dc02      	bgt.n	800ade6 <_dtoa_r+0x9b6>
 800ade0:	d1de      	bne.n	800ada0 <_dtoa_r+0x970>
 800ade2:	07da      	lsls	r2, r3, #31
 800ade4:	d5dc      	bpl.n	800ada0 <_dtoa_r+0x970>
 800ade6:	2b39      	cmp	r3, #57	; 0x39
 800ade8:	d1d8      	bne.n	800ad9c <_dtoa_r+0x96c>
 800adea:	9a02      	ldr	r2, [sp, #8]
 800adec:	2339      	movs	r3, #57	; 0x39
 800adee:	7013      	strb	r3, [r2, #0]
 800adf0:	4643      	mov	r3, r8
 800adf2:	4698      	mov	r8, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800adfa:	2a39      	cmp	r2, #57	; 0x39
 800adfc:	d051      	beq.n	800aea2 <_dtoa_r+0xa72>
 800adfe:	3201      	adds	r2, #1
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	e745      	b.n	800ac90 <_dtoa_r+0x860>
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	dd03      	ble.n	800ae10 <_dtoa_r+0x9e0>
 800ae08:	2b39      	cmp	r3, #57	; 0x39
 800ae0a:	d0ee      	beq.n	800adea <_dtoa_r+0x9ba>
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	e7c7      	b.n	800ada0 <_dtoa_r+0x970>
 800ae10:	9a04      	ldr	r2, [sp, #16]
 800ae12:	9908      	ldr	r1, [sp, #32]
 800ae14:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae18:	428a      	cmp	r2, r1
 800ae1a:	d02b      	beq.n	800ae74 <_dtoa_r+0xa44>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	2300      	movs	r3, #0
 800ae20:	220a      	movs	r2, #10
 800ae22:	4630      	mov	r0, r6
 800ae24:	f000 fb00 	bl	800b428 <__multadd>
 800ae28:	45b9      	cmp	r9, r7
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	f04f 020a 	mov.w	r2, #10
 800ae34:	4649      	mov	r1, r9
 800ae36:	4630      	mov	r0, r6
 800ae38:	d107      	bne.n	800ae4a <_dtoa_r+0xa1a>
 800ae3a:	f000 faf5 	bl	800b428 <__multadd>
 800ae3e:	4681      	mov	r9, r0
 800ae40:	4607      	mov	r7, r0
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	3301      	adds	r3, #1
 800ae46:	9304      	str	r3, [sp, #16]
 800ae48:	e774      	b.n	800ad34 <_dtoa_r+0x904>
 800ae4a:	f000 faed 	bl	800b428 <__multadd>
 800ae4e:	4639      	mov	r1, r7
 800ae50:	4681      	mov	r9, r0
 800ae52:	2300      	movs	r3, #0
 800ae54:	220a      	movs	r2, #10
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 fae6 	bl	800b428 <__multadd>
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	e7f0      	b.n	800ae42 <_dtoa_r+0xa12>
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	9a01      	ldr	r2, [sp, #4]
 800ae66:	bfcc      	ite	gt
 800ae68:	46d0      	movgt	r8, sl
 800ae6a:	f04f 0801 	movle.w	r8, #1
 800ae6e:	4490      	add	r8, r2
 800ae70:	f04f 0900 	mov.w	r9, #0
 800ae74:	4629      	mov	r1, r5
 800ae76:	2201      	movs	r2, #1
 800ae78:	4630      	mov	r0, r6
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	f000 fc84 	bl	800b788 <__lshift>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4605      	mov	r5, r0
 800ae84:	f000 fcf0 	bl	800b868 <__mcmp>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	dcb1      	bgt.n	800adf0 <_dtoa_r+0x9c0>
 800ae8c:	d102      	bne.n	800ae94 <_dtoa_r+0xa64>
 800ae8e:	9b02      	ldr	r3, [sp, #8]
 800ae90:	07db      	lsls	r3, r3, #31
 800ae92:	d4ad      	bmi.n	800adf0 <_dtoa_r+0x9c0>
 800ae94:	4643      	mov	r3, r8
 800ae96:	4698      	mov	r8, r3
 800ae98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae9c:	2a30      	cmp	r2, #48	; 0x30
 800ae9e:	d0fa      	beq.n	800ae96 <_dtoa_r+0xa66>
 800aea0:	e6f6      	b.n	800ac90 <_dtoa_r+0x860>
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d1a4      	bne.n	800adf2 <_dtoa_r+0x9c2>
 800aea8:	f10b 0b01 	add.w	fp, fp, #1
 800aeac:	2331      	movs	r3, #49	; 0x31
 800aeae:	e778      	b.n	800ada2 <_dtoa_r+0x972>
 800aeb0:	4b14      	ldr	r3, [pc, #80]	; (800af04 <_dtoa_r+0xad4>)
 800aeb2:	f7ff bb27 	b.w	800a504 <_dtoa_r+0xd4>
 800aeb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f47f ab03 	bne.w	800a4c4 <_dtoa_r+0x94>
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <_dtoa_r+0xad8>)
 800aec0:	f7ff bb20 	b.w	800a504 <_dtoa_r+0xd4>
 800aec4:	f1ba 0f00 	cmp.w	sl, #0
 800aec8:	dc03      	bgt.n	800aed2 <_dtoa_r+0xaa2>
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	f73f aec7 	bgt.w	800ac60 <_dtoa_r+0x830>
 800aed2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aed6:	4621      	mov	r1, r4
 800aed8:	4628      	mov	r0, r5
 800aeda:	f7ff fa1d 	bl	800a318 <quorem>
 800aede:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aee2:	f808 3b01 	strb.w	r3, [r8], #1
 800aee6:	9a01      	ldr	r2, [sp, #4]
 800aee8:	eba8 0202 	sub.w	r2, r8, r2
 800aeec:	4592      	cmp	sl, r2
 800aeee:	ddb7      	ble.n	800ae60 <_dtoa_r+0xa30>
 800aef0:	4629      	mov	r1, r5
 800aef2:	2300      	movs	r3, #0
 800aef4:	220a      	movs	r2, #10
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 fa96 	bl	800b428 <__multadd>
 800aefc:	4605      	mov	r5, r0
 800aefe:	e7ea      	b.n	800aed6 <_dtoa_r+0xaa6>
 800af00:	0800c673 	.word	0x0800c673
 800af04:	0800c5d0 	.word	0x0800c5d0
 800af08:	0800c5f4 	.word	0x0800c5f4

0800af0c <__sflush_r>:
 800af0c:	898a      	ldrh	r2, [r1, #12]
 800af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	0710      	lsls	r0, r2, #28
 800af16:	460c      	mov	r4, r1
 800af18:	d458      	bmi.n	800afcc <__sflush_r+0xc0>
 800af1a:	684b      	ldr	r3, [r1, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc05      	bgt.n	800af2c <__sflush_r+0x20>
 800af20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	dc02      	bgt.n	800af2c <__sflush_r+0x20>
 800af26:	2000      	movs	r0, #0
 800af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d0f9      	beq.n	800af26 <__sflush_r+0x1a>
 800af32:	2300      	movs	r3, #0
 800af34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af38:	682f      	ldr	r7, [r5, #0]
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	d032      	beq.n	800afa4 <__sflush_r+0x98>
 800af3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	075a      	lsls	r2, r3, #29
 800af44:	d505      	bpl.n	800af52 <__sflush_r+0x46>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	1ac0      	subs	r0, r0, r3
 800af4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af4c:	b10b      	cbz	r3, 800af52 <__sflush_r+0x46>
 800af4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	2300      	movs	r3, #0
 800af54:	4602      	mov	r2, r0
 800af56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b0      	blx	r6
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	d106      	bne.n	800af72 <__sflush_r+0x66>
 800af64:	6829      	ldr	r1, [r5, #0]
 800af66:	291d      	cmp	r1, #29
 800af68:	d82c      	bhi.n	800afc4 <__sflush_r+0xb8>
 800af6a:	4a2a      	ldr	r2, [pc, #168]	; (800b014 <__sflush_r+0x108>)
 800af6c:	40ca      	lsrs	r2, r1
 800af6e:	07d6      	lsls	r6, r2, #31
 800af70:	d528      	bpl.n	800afc4 <__sflush_r+0xb8>
 800af72:	2200      	movs	r2, #0
 800af74:	6062      	str	r2, [r4, #4]
 800af76:	04d9      	lsls	r1, r3, #19
 800af78:	6922      	ldr	r2, [r4, #16]
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	d504      	bpl.n	800af88 <__sflush_r+0x7c>
 800af7e:	1c42      	adds	r2, r0, #1
 800af80:	d101      	bne.n	800af86 <__sflush_r+0x7a>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b903      	cbnz	r3, 800af88 <__sflush_r+0x7c>
 800af86:	6560      	str	r0, [r4, #84]	; 0x54
 800af88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8a:	602f      	str	r7, [r5, #0]
 800af8c:	2900      	cmp	r1, #0
 800af8e:	d0ca      	beq.n	800af26 <__sflush_r+0x1a>
 800af90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af94:	4299      	cmp	r1, r3
 800af96:	d002      	beq.n	800af9e <__sflush_r+0x92>
 800af98:	4628      	mov	r0, r5
 800af9a:	f000 fd7d 	bl	800ba98 <_free_r>
 800af9e:	2000      	movs	r0, #0
 800afa0:	6360      	str	r0, [r4, #52]	; 0x34
 800afa2:	e7c1      	b.n	800af28 <__sflush_r+0x1c>
 800afa4:	6a21      	ldr	r1, [r4, #32]
 800afa6:	2301      	movs	r3, #1
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b0      	blx	r6
 800afac:	1c41      	adds	r1, r0, #1
 800afae:	d1c7      	bne.n	800af40 <__sflush_r+0x34>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0c4      	beq.n	800af40 <__sflush_r+0x34>
 800afb6:	2b1d      	cmp	r3, #29
 800afb8:	d001      	beq.n	800afbe <__sflush_r+0xb2>
 800afba:	2b16      	cmp	r3, #22
 800afbc:	d101      	bne.n	800afc2 <__sflush_r+0xb6>
 800afbe:	602f      	str	r7, [r5, #0]
 800afc0:	e7b1      	b.n	800af26 <__sflush_r+0x1a>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e7ad      	b.n	800af28 <__sflush_r+0x1c>
 800afcc:	690f      	ldr	r7, [r1, #16]
 800afce:	2f00      	cmp	r7, #0
 800afd0:	d0a9      	beq.n	800af26 <__sflush_r+0x1a>
 800afd2:	0793      	lsls	r3, r2, #30
 800afd4:	680e      	ldr	r6, [r1, #0]
 800afd6:	bf08      	it	eq
 800afd8:	694b      	ldreq	r3, [r1, #20]
 800afda:	600f      	str	r7, [r1, #0]
 800afdc:	bf18      	it	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	eba6 0807 	sub.w	r8, r6, r7
 800afe4:	608b      	str	r3, [r1, #8]
 800afe6:	f1b8 0f00 	cmp.w	r8, #0
 800afea:	dd9c      	ble.n	800af26 <__sflush_r+0x1a>
 800afec:	6a21      	ldr	r1, [r4, #32]
 800afee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aff0:	4643      	mov	r3, r8
 800aff2:	463a      	mov	r2, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	2800      	cmp	r0, #0
 800affa:	dc06      	bgt.n	800b00a <__sflush_r+0xfe>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e78e      	b.n	800af28 <__sflush_r+0x1c>
 800b00a:	4407      	add	r7, r0
 800b00c:	eba8 0800 	sub.w	r8, r8, r0
 800b010:	e7e9      	b.n	800afe6 <__sflush_r+0xda>
 800b012:	bf00      	nop
 800b014:	20400001 	.word	0x20400001

0800b018 <_fflush_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	690b      	ldr	r3, [r1, #16]
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b913      	cbnz	r3, 800b028 <_fflush_r+0x10>
 800b022:	2500      	movs	r5, #0
 800b024:	4628      	mov	r0, r5
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	b118      	cbz	r0, 800b032 <_fflush_r+0x1a>
 800b02a:	6983      	ldr	r3, [r0, #24]
 800b02c:	b90b      	cbnz	r3, 800b032 <_fflush_r+0x1a>
 800b02e:	f000 f887 	bl	800b140 <__sinit>
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <_fflush_r+0x6c>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d11b      	bne.n	800b070 <_fflush_r+0x58>
 800b038:	686c      	ldr	r4, [r5, #4]
 800b03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0ef      	beq.n	800b022 <_fflush_r+0xa>
 800b042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b044:	07d0      	lsls	r0, r2, #31
 800b046:	d404      	bmi.n	800b052 <_fflush_r+0x3a>
 800b048:	0599      	lsls	r1, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_fflush_r+0x3a>
 800b04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b04e:	f000 f91a 	bl	800b286 <__retarget_lock_acquire_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	4621      	mov	r1, r4
 800b056:	f7ff ff59 	bl	800af0c <__sflush_r>
 800b05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05c:	07da      	lsls	r2, r3, #31
 800b05e:	4605      	mov	r5, r0
 800b060:	d4e0      	bmi.n	800b024 <_fflush_r+0xc>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d4dd      	bmi.n	800b024 <_fflush_r+0xc>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f000 f90d 	bl	800b288 <__retarget_lock_release_recursive>
 800b06e:	e7d9      	b.n	800b024 <_fflush_r+0xc>
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_fflush_r+0x70>)
 800b072:	429c      	cmp	r4, r3
 800b074:	d101      	bne.n	800b07a <_fflush_r+0x62>
 800b076:	68ac      	ldr	r4, [r5, #8]
 800b078:	e7df      	b.n	800b03a <_fflush_r+0x22>
 800b07a:	4b04      	ldr	r3, [pc, #16]	; (800b08c <_fflush_r+0x74>)
 800b07c:	429c      	cmp	r4, r3
 800b07e:	bf08      	it	eq
 800b080:	68ec      	ldreq	r4, [r5, #12]
 800b082:	e7da      	b.n	800b03a <_fflush_r+0x22>
 800b084:	0800c6a4 	.word	0x0800c6a4
 800b088:	0800c6c4 	.word	0x0800c6c4
 800b08c:	0800c684 	.word	0x0800c684

0800b090 <std>:
 800b090:	2300      	movs	r3, #0
 800b092:	b510      	push	{r4, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	e9c0 3300 	strd	r3, r3, [r0]
 800b09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b09e:	6083      	str	r3, [r0, #8]
 800b0a0:	8181      	strh	r1, [r0, #12]
 800b0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0a4:	81c2      	strh	r2, [r0, #14]
 800b0a6:	6183      	str	r3, [r0, #24]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2208      	movs	r2, #8
 800b0ac:	305c      	adds	r0, #92	; 0x5c
 800b0ae:	f7fe fb9b 	bl	80097e8 <memset>
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <std+0x38>)
 800b0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <std+0x3c>)
 800b0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ba:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <std+0x40>)
 800b0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0be:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <std+0x44>)
 800b0c0:	6224      	str	r4, [r4, #32]
 800b0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800bf2d 	.word	0x0800bf2d
 800b0cc:	0800bf4f 	.word	0x0800bf4f
 800b0d0:	0800bf87 	.word	0x0800bf87
 800b0d4:	0800bfab 	.word	0x0800bfab

0800b0d8 <_cleanup_r>:
 800b0d8:	4901      	ldr	r1, [pc, #4]	; (800b0e0 <_cleanup_r+0x8>)
 800b0da:	f000 b8af 	b.w	800b23c <_fwalk_reent>
 800b0de:	bf00      	nop
 800b0e0:	0800b019 	.word	0x0800b019

0800b0e4 <__sfmoreglue>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	2268      	movs	r2, #104	; 0x68
 800b0e8:	1e4d      	subs	r5, r1, #1
 800b0ea:	4355      	muls	r5, r2
 800b0ec:	460e      	mov	r6, r1
 800b0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0f2:	f000 fd3d 	bl	800bb70 <_malloc_r>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	b140      	cbz	r0, 800b10c <__sfmoreglue+0x28>
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b100:	300c      	adds	r0, #12
 800b102:	60a0      	str	r0, [r4, #8]
 800b104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b108:	f7fe fb6e 	bl	80097e8 <memset>
 800b10c:	4620      	mov	r0, r4
 800b10e:	bd70      	pop	{r4, r5, r6, pc}

0800b110 <__sfp_lock_acquire>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__sfp_lock_acquire+0x8>)
 800b112:	f000 b8b8 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800b116:	bf00      	nop
 800b118:	20000495 	.word	0x20000495

0800b11c <__sfp_lock_release>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__sfp_lock_release+0x8>)
 800b11e:	f000 b8b3 	b.w	800b288 <__retarget_lock_release_recursive>
 800b122:	bf00      	nop
 800b124:	20000495 	.word	0x20000495

0800b128 <__sinit_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sinit_lock_acquire+0x8>)
 800b12a:	f000 b8ac 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	20000496 	.word	0x20000496

0800b134 <__sinit_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	; (800b13c <__sinit_lock_release+0x8>)
 800b136:	f000 b8a7 	b.w	800b288 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	20000496 	.word	0x20000496

0800b140 <__sinit>:
 800b140:	b510      	push	{r4, lr}
 800b142:	4604      	mov	r4, r0
 800b144:	f7ff fff0 	bl	800b128 <__sinit_lock_acquire>
 800b148:	69a3      	ldr	r3, [r4, #24]
 800b14a:	b11b      	cbz	r3, 800b154 <__sinit+0x14>
 800b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b150:	f7ff bff0 	b.w	800b134 <__sinit_lock_release>
 800b154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b158:	6523      	str	r3, [r4, #80]	; 0x50
 800b15a:	4b13      	ldr	r3, [pc, #76]	; (800b1a8 <__sinit+0x68>)
 800b15c:	4a13      	ldr	r2, [pc, #76]	; (800b1ac <__sinit+0x6c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	62a2      	str	r2, [r4, #40]	; 0x28
 800b162:	42a3      	cmp	r3, r4
 800b164:	bf04      	itt	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	61a3      	streq	r3, [r4, #24]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f820 	bl	800b1b0 <__sfp>
 800b170:	6060      	str	r0, [r4, #4]
 800b172:	4620      	mov	r0, r4
 800b174:	f000 f81c 	bl	800b1b0 <__sfp>
 800b178:	60a0      	str	r0, [r4, #8]
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 f818 	bl	800b1b0 <__sfp>
 800b180:	2200      	movs	r2, #0
 800b182:	60e0      	str	r0, [r4, #12]
 800b184:	2104      	movs	r1, #4
 800b186:	6860      	ldr	r0, [r4, #4]
 800b188:	f7ff ff82 	bl	800b090 <std>
 800b18c:	68a0      	ldr	r0, [r4, #8]
 800b18e:	2201      	movs	r2, #1
 800b190:	2109      	movs	r1, #9
 800b192:	f7ff ff7d 	bl	800b090 <std>
 800b196:	68e0      	ldr	r0, [r4, #12]
 800b198:	2202      	movs	r2, #2
 800b19a:	2112      	movs	r1, #18
 800b19c:	f7ff ff78 	bl	800b090 <std>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	61a3      	str	r3, [r4, #24]
 800b1a4:	e7d2      	b.n	800b14c <__sinit+0xc>
 800b1a6:	bf00      	nop
 800b1a8:	0800c5bc 	.word	0x0800c5bc
 800b1ac:	0800b0d9 	.word	0x0800b0d9

0800b1b0 <__sfp>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	f7ff ffac 	bl	800b110 <__sfp_lock_acquire>
 800b1b8:	4b1e      	ldr	r3, [pc, #120]	; (800b234 <__sfp+0x84>)
 800b1ba:	681e      	ldr	r6, [r3, #0]
 800b1bc:	69b3      	ldr	r3, [r6, #24]
 800b1be:	b913      	cbnz	r3, 800b1c6 <__sfp+0x16>
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff ffbd 	bl	800b140 <__sinit>
 800b1c6:	3648      	adds	r6, #72	; 0x48
 800b1c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	d503      	bpl.n	800b1d8 <__sfp+0x28>
 800b1d0:	6833      	ldr	r3, [r6, #0]
 800b1d2:	b30b      	cbz	r3, 800b218 <__sfp+0x68>
 800b1d4:	6836      	ldr	r6, [r6, #0]
 800b1d6:	e7f7      	b.n	800b1c8 <__sfp+0x18>
 800b1d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1dc:	b9d5      	cbnz	r5, 800b214 <__sfp+0x64>
 800b1de:	4b16      	ldr	r3, [pc, #88]	; (800b238 <__sfp+0x88>)
 800b1e0:	60e3      	str	r3, [r4, #12]
 800b1e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b1e8:	f000 f84c 	bl	800b284 <__retarget_lock_init_recursive>
 800b1ec:	f7ff ff96 	bl	800b11c <__sfp_lock_release>
 800b1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1f8:	6025      	str	r5, [r4, #0]
 800b1fa:	61a5      	str	r5, [r4, #24]
 800b1fc:	2208      	movs	r2, #8
 800b1fe:	4629      	mov	r1, r5
 800b200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b204:	f7fe faf0 	bl	80097e8 <memset>
 800b208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b20c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b210:	4620      	mov	r0, r4
 800b212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b214:	3468      	adds	r4, #104	; 0x68
 800b216:	e7d9      	b.n	800b1cc <__sfp+0x1c>
 800b218:	2104      	movs	r1, #4
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7ff ff62 	bl	800b0e4 <__sfmoreglue>
 800b220:	4604      	mov	r4, r0
 800b222:	6030      	str	r0, [r6, #0]
 800b224:	2800      	cmp	r0, #0
 800b226:	d1d5      	bne.n	800b1d4 <__sfp+0x24>
 800b228:	f7ff ff78 	bl	800b11c <__sfp_lock_release>
 800b22c:	230c      	movs	r3, #12
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	e7ee      	b.n	800b210 <__sfp+0x60>
 800b232:	bf00      	nop
 800b234:	0800c5bc 	.word	0x0800c5bc
 800b238:	ffff0001 	.word	0xffff0001

0800b23c <_fwalk_reent>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4606      	mov	r6, r0
 800b242:	4688      	mov	r8, r1
 800b244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b248:	2700      	movs	r7, #0
 800b24a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b24e:	f1b9 0901 	subs.w	r9, r9, #1
 800b252:	d505      	bpl.n	800b260 <_fwalk_reent+0x24>
 800b254:	6824      	ldr	r4, [r4, #0]
 800b256:	2c00      	cmp	r4, #0
 800b258:	d1f7      	bne.n	800b24a <_fwalk_reent+0xe>
 800b25a:	4638      	mov	r0, r7
 800b25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b260:	89ab      	ldrh	r3, [r5, #12]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d907      	bls.n	800b276 <_fwalk_reent+0x3a>
 800b266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b26a:	3301      	adds	r3, #1
 800b26c:	d003      	beq.n	800b276 <_fwalk_reent+0x3a>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	47c0      	blx	r8
 800b274:	4307      	orrs	r7, r0
 800b276:	3568      	adds	r5, #104	; 0x68
 800b278:	e7e9      	b.n	800b24e <_fwalk_reent+0x12>
	...

0800b27c <_localeconv_r>:
 800b27c:	4800      	ldr	r0, [pc, #0]	; (800b280 <_localeconv_r+0x4>)
 800b27e:	4770      	bx	lr
 800b280:	20000190 	.word	0x20000190

0800b284 <__retarget_lock_init_recursive>:
 800b284:	4770      	bx	lr

0800b286 <__retarget_lock_acquire_recursive>:
 800b286:	4770      	bx	lr

0800b288 <__retarget_lock_release_recursive>:
 800b288:	4770      	bx	lr

0800b28a <__swhatbuf_r>:
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	460e      	mov	r6, r1
 800b28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b292:	2900      	cmp	r1, #0
 800b294:	b096      	sub	sp, #88	; 0x58
 800b296:	4614      	mov	r4, r2
 800b298:	461d      	mov	r5, r3
 800b29a:	da08      	bge.n	800b2ae <__swhatbuf_r+0x24>
 800b29c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	602a      	str	r2, [r5, #0]
 800b2a4:	061a      	lsls	r2, r3, #24
 800b2a6:	d410      	bmi.n	800b2ca <__swhatbuf_r+0x40>
 800b2a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ac:	e00e      	b.n	800b2cc <__swhatbuf_r+0x42>
 800b2ae:	466a      	mov	r2, sp
 800b2b0:	f000 fed2 	bl	800c058 <_fstat_r>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	dbf1      	blt.n	800b29c <__swhatbuf_r+0x12>
 800b2b8:	9a01      	ldr	r2, [sp, #4]
 800b2ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2c2:	425a      	negs	r2, r3
 800b2c4:	415a      	adcs	r2, r3
 800b2c6:	602a      	str	r2, [r5, #0]
 800b2c8:	e7ee      	b.n	800b2a8 <__swhatbuf_r+0x1e>
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	b016      	add	sp, #88	; 0x58
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__smakebuf_r>:
 800b2d4:	898b      	ldrh	r3, [r1, #12]
 800b2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2d8:	079d      	lsls	r5, r3, #30
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460c      	mov	r4, r1
 800b2de:	d507      	bpl.n	800b2f0 <__smakebuf_r+0x1c>
 800b2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	6163      	str	r3, [r4, #20]
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	ab01      	add	r3, sp, #4
 800b2f2:	466a      	mov	r2, sp
 800b2f4:	f7ff ffc9 	bl	800b28a <__swhatbuf_r>
 800b2f8:	9900      	ldr	r1, [sp, #0]
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 fc37 	bl	800bb70 <_malloc_r>
 800b302:	b948      	cbnz	r0, 800b318 <__smakebuf_r+0x44>
 800b304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d4ef      	bmi.n	800b2ec <__smakebuf_r+0x18>
 800b30c:	f023 0303 	bic.w	r3, r3, #3
 800b310:	f043 0302 	orr.w	r3, r3, #2
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	e7e3      	b.n	800b2e0 <__smakebuf_r+0xc>
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <__smakebuf_r+0x7c>)
 800b31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	6020      	str	r0, [r4, #0]
 800b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	6163      	str	r3, [r4, #20]
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	6120      	str	r0, [r4, #16]
 800b32e:	b15b      	cbz	r3, 800b348 <__smakebuf_r+0x74>
 800b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b334:	4630      	mov	r0, r6
 800b336:	f000 fea1 	bl	800c07c <_isatty_r>
 800b33a:	b128      	cbz	r0, 800b348 <__smakebuf_r+0x74>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	89a0      	ldrh	r0, [r4, #12]
 800b34a:	4305      	orrs	r5, r0
 800b34c:	81a5      	strh	r5, [r4, #12]
 800b34e:	e7cd      	b.n	800b2ec <__smakebuf_r+0x18>
 800b350:	0800b0d9 	.word	0x0800b0d9

0800b354 <malloc>:
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <malloc+0xc>)
 800b356:	4601      	mov	r1, r0
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f000 bc09 	b.w	800bb70 <_malloc_r>
 800b35e:	bf00      	nop
 800b360:	2000003c 	.word	0x2000003c

0800b364 <_Balloc>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b368:	4604      	mov	r4, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	b976      	cbnz	r6, 800b38c <_Balloc+0x28>
 800b36e:	2010      	movs	r0, #16
 800b370:	f7ff fff0 	bl	800b354 <malloc>
 800b374:	4602      	mov	r2, r0
 800b376:	6260      	str	r0, [r4, #36]	; 0x24
 800b378:	b920      	cbnz	r0, 800b384 <_Balloc+0x20>
 800b37a:	4b18      	ldr	r3, [pc, #96]	; (800b3dc <_Balloc+0x78>)
 800b37c:	4818      	ldr	r0, [pc, #96]	; (800b3e0 <_Balloc+0x7c>)
 800b37e:	2166      	movs	r1, #102	; 0x66
 800b380:	f000 fe2a 	bl	800bfd8 <__assert_func>
 800b384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b388:	6006      	str	r6, [r0, #0]
 800b38a:	60c6      	str	r6, [r0, #12]
 800b38c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b38e:	68f3      	ldr	r3, [r6, #12]
 800b390:	b183      	cbz	r3, 800b3b4 <_Balloc+0x50>
 800b392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b39a:	b9b8      	cbnz	r0, 800b3cc <_Balloc+0x68>
 800b39c:	2101      	movs	r1, #1
 800b39e:	fa01 f605 	lsl.w	r6, r1, r5
 800b3a2:	1d72      	adds	r2, r6, #5
 800b3a4:	0092      	lsls	r2, r2, #2
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fb60 	bl	800ba6c <_calloc_r>
 800b3ac:	b160      	cbz	r0, 800b3c8 <_Balloc+0x64>
 800b3ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3b2:	e00e      	b.n	800b3d2 <_Balloc+0x6e>
 800b3b4:	2221      	movs	r2, #33	; 0x21
 800b3b6:	2104      	movs	r1, #4
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fb57 	bl	800ba6c <_calloc_r>
 800b3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3c0:	60f0      	str	r0, [r6, #12]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e4      	bne.n	800b392 <_Balloc+0x2e>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	6802      	ldr	r2, [r0, #0]
 800b3ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3d8:	e7f7      	b.n	800b3ca <_Balloc+0x66>
 800b3da:	bf00      	nop
 800b3dc:	0800c601 	.word	0x0800c601
 800b3e0:	0800c6e4 	.word	0x0800c6e4

0800b3e4 <_Bfree>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	b976      	cbnz	r6, 800b40c <_Bfree+0x28>
 800b3ee:	2010      	movs	r0, #16
 800b3f0:	f7ff ffb0 	bl	800b354 <malloc>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b3f8:	b920      	cbnz	r0, 800b404 <_Bfree+0x20>
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <_Bfree+0x3c>)
 800b3fc:	4809      	ldr	r0, [pc, #36]	; (800b424 <_Bfree+0x40>)
 800b3fe:	218a      	movs	r1, #138	; 0x8a
 800b400:	f000 fdea 	bl	800bfd8 <__assert_func>
 800b404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b408:	6006      	str	r6, [r0, #0]
 800b40a:	60c6      	str	r6, [r0, #12]
 800b40c:	b13c      	cbz	r4, 800b41e <_Bfree+0x3a>
 800b40e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b410:	6862      	ldr	r2, [r4, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b418:	6021      	str	r1, [r4, #0]
 800b41a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	0800c601 	.word	0x0800c601
 800b424:	0800c6e4 	.word	0x0800c6e4

0800b428 <__multadd>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	690d      	ldr	r5, [r1, #16]
 800b42e:	4607      	mov	r7, r0
 800b430:	460c      	mov	r4, r1
 800b432:	461e      	mov	r6, r3
 800b434:	f101 0c14 	add.w	ip, r1, #20
 800b438:	2000      	movs	r0, #0
 800b43a:	f8dc 3000 	ldr.w	r3, [ip]
 800b43e:	b299      	uxth	r1, r3
 800b440:	fb02 6101 	mla	r1, r2, r1, r6
 800b444:	0c1e      	lsrs	r6, r3, #16
 800b446:	0c0b      	lsrs	r3, r1, #16
 800b448:	fb02 3306 	mla	r3, r2, r6, r3
 800b44c:	b289      	uxth	r1, r1
 800b44e:	3001      	adds	r0, #1
 800b450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b454:	4285      	cmp	r5, r0
 800b456:	f84c 1b04 	str.w	r1, [ip], #4
 800b45a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b45e:	dcec      	bgt.n	800b43a <__multadd+0x12>
 800b460:	b30e      	cbz	r6, 800b4a6 <__multadd+0x7e>
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	42ab      	cmp	r3, r5
 800b466:	dc19      	bgt.n	800b49c <__multadd+0x74>
 800b468:	6861      	ldr	r1, [r4, #4]
 800b46a:	4638      	mov	r0, r7
 800b46c:	3101      	adds	r1, #1
 800b46e:	f7ff ff79 	bl	800b364 <_Balloc>
 800b472:	4680      	mov	r8, r0
 800b474:	b928      	cbnz	r0, 800b482 <__multadd+0x5a>
 800b476:	4602      	mov	r2, r0
 800b478:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <__multadd+0x84>)
 800b47a:	480d      	ldr	r0, [pc, #52]	; (800b4b0 <__multadd+0x88>)
 800b47c:	21b5      	movs	r1, #181	; 0xb5
 800b47e:	f000 fdab 	bl	800bfd8 <__assert_func>
 800b482:	6922      	ldr	r2, [r4, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	f104 010c 	add.w	r1, r4, #12
 800b48a:	0092      	lsls	r2, r2, #2
 800b48c:	300c      	adds	r0, #12
 800b48e:	f7fe f99d 	bl	80097cc <memcpy>
 800b492:	4621      	mov	r1, r4
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ffa5 	bl	800b3e4 <_Bfree>
 800b49a:	4644      	mov	r4, r8
 800b49c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	615e      	str	r6, [r3, #20]
 800b4a4:	6125      	str	r5, [r4, #16]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ac:	0800c673 	.word	0x0800c673
 800b4b0:	0800c6e4 	.word	0x0800c6e4

0800b4b4 <__hi0bits>:
 800b4b4:	0c03      	lsrs	r3, r0, #16
 800b4b6:	041b      	lsls	r3, r3, #16
 800b4b8:	b9d3      	cbnz	r3, 800b4f0 <__hi0bits+0x3c>
 800b4ba:	0400      	lsls	r0, r0, #16
 800b4bc:	2310      	movs	r3, #16
 800b4be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4c2:	bf04      	itt	eq
 800b4c4:	0200      	lsleq	r0, r0, #8
 800b4c6:	3308      	addeq	r3, #8
 800b4c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4cc:	bf04      	itt	eq
 800b4ce:	0100      	lsleq	r0, r0, #4
 800b4d0:	3304      	addeq	r3, #4
 800b4d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4d6:	bf04      	itt	eq
 800b4d8:	0080      	lsleq	r0, r0, #2
 800b4da:	3302      	addeq	r3, #2
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	db05      	blt.n	800b4ec <__hi0bits+0x38>
 800b4e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4e4:	f103 0301 	add.w	r3, r3, #1
 800b4e8:	bf08      	it	eq
 800b4ea:	2320      	moveq	r3, #32
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	4770      	bx	lr
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e7e4      	b.n	800b4be <__hi0bits+0xa>

0800b4f4 <__lo0bits>:
 800b4f4:	6803      	ldr	r3, [r0, #0]
 800b4f6:	f013 0207 	ands.w	r2, r3, #7
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	d00b      	beq.n	800b516 <__lo0bits+0x22>
 800b4fe:	07da      	lsls	r2, r3, #31
 800b500:	d423      	bmi.n	800b54a <__lo0bits+0x56>
 800b502:	0798      	lsls	r0, r3, #30
 800b504:	bf49      	itett	mi
 800b506:	085b      	lsrmi	r3, r3, #1
 800b508:	089b      	lsrpl	r3, r3, #2
 800b50a:	2001      	movmi	r0, #1
 800b50c:	600b      	strmi	r3, [r1, #0]
 800b50e:	bf5c      	itt	pl
 800b510:	600b      	strpl	r3, [r1, #0]
 800b512:	2002      	movpl	r0, #2
 800b514:	4770      	bx	lr
 800b516:	b298      	uxth	r0, r3
 800b518:	b9a8      	cbnz	r0, 800b546 <__lo0bits+0x52>
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	2010      	movs	r0, #16
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	b90a      	cbnz	r2, 800b526 <__lo0bits+0x32>
 800b522:	3008      	adds	r0, #8
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	071a      	lsls	r2, r3, #28
 800b528:	bf04      	itt	eq
 800b52a:	091b      	lsreq	r3, r3, #4
 800b52c:	3004      	addeq	r0, #4
 800b52e:	079a      	lsls	r2, r3, #30
 800b530:	bf04      	itt	eq
 800b532:	089b      	lsreq	r3, r3, #2
 800b534:	3002      	addeq	r0, #2
 800b536:	07da      	lsls	r2, r3, #31
 800b538:	d403      	bmi.n	800b542 <__lo0bits+0x4e>
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	f100 0001 	add.w	r0, r0, #1
 800b540:	d005      	beq.n	800b54e <__lo0bits+0x5a>
 800b542:	600b      	str	r3, [r1, #0]
 800b544:	4770      	bx	lr
 800b546:	4610      	mov	r0, r2
 800b548:	e7e9      	b.n	800b51e <__lo0bits+0x2a>
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
 800b54e:	2020      	movs	r0, #32
 800b550:	4770      	bx	lr
	...

0800b554 <__i2b>:
 800b554:	b510      	push	{r4, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	2101      	movs	r1, #1
 800b55a:	f7ff ff03 	bl	800b364 <_Balloc>
 800b55e:	4602      	mov	r2, r0
 800b560:	b928      	cbnz	r0, 800b56e <__i2b+0x1a>
 800b562:	4b05      	ldr	r3, [pc, #20]	; (800b578 <__i2b+0x24>)
 800b564:	4805      	ldr	r0, [pc, #20]	; (800b57c <__i2b+0x28>)
 800b566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b56a:	f000 fd35 	bl	800bfd8 <__assert_func>
 800b56e:	2301      	movs	r3, #1
 800b570:	6144      	str	r4, [r0, #20]
 800b572:	6103      	str	r3, [r0, #16]
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800c673 	.word	0x0800c673
 800b57c:	0800c6e4 	.word	0x0800c6e4

0800b580 <__multiply>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	4691      	mov	r9, r2
 800b586:	690a      	ldr	r2, [r1, #16]
 800b588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	bfb8      	it	lt
 800b590:	460b      	movlt	r3, r1
 800b592:	460c      	mov	r4, r1
 800b594:	bfbc      	itt	lt
 800b596:	464c      	movlt	r4, r9
 800b598:	4699      	movlt	r9, r3
 800b59a:	6927      	ldr	r7, [r4, #16]
 800b59c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	6861      	ldr	r1, [r4, #4]
 800b5a4:	eb07 060a 	add.w	r6, r7, sl
 800b5a8:	42b3      	cmp	r3, r6
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	bfb8      	it	lt
 800b5ae:	3101      	addlt	r1, #1
 800b5b0:	f7ff fed8 	bl	800b364 <_Balloc>
 800b5b4:	b930      	cbnz	r0, 800b5c4 <__multiply+0x44>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	4b44      	ldr	r3, [pc, #272]	; (800b6cc <__multiply+0x14c>)
 800b5ba:	4845      	ldr	r0, [pc, #276]	; (800b6d0 <__multiply+0x150>)
 800b5bc:	f240 115d 	movw	r1, #349	; 0x15d
 800b5c0:	f000 fd0a 	bl	800bfd8 <__assert_func>
 800b5c4:	f100 0514 	add.w	r5, r0, #20
 800b5c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	d321      	bcc.n	800b618 <__multiply+0x98>
 800b5d4:	f104 0314 	add.w	r3, r4, #20
 800b5d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5dc:	f109 0314 	add.w	r3, r9, #20
 800b5e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5e4:	9202      	str	r2, [sp, #8]
 800b5e6:	1b3a      	subs	r2, r7, r4
 800b5e8:	3a15      	subs	r2, #21
 800b5ea:	f022 0203 	bic.w	r2, r2, #3
 800b5ee:	3204      	adds	r2, #4
 800b5f0:	f104 0115 	add.w	r1, r4, #21
 800b5f4:	428f      	cmp	r7, r1
 800b5f6:	bf38      	it	cc
 800b5f8:	2204      	movcc	r2, #4
 800b5fa:	9201      	str	r2, [sp, #4]
 800b5fc:	9a02      	ldr	r2, [sp, #8]
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	429a      	cmp	r2, r3
 800b602:	d80c      	bhi.n	800b61e <__multiply+0x9e>
 800b604:	2e00      	cmp	r6, #0
 800b606:	dd03      	ble.n	800b610 <__multiply+0x90>
 800b608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d05a      	beq.n	800b6c6 <__multiply+0x146>
 800b610:	6106      	str	r6, [r0, #16]
 800b612:	b005      	add	sp, #20
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	f843 2b04 	str.w	r2, [r3], #4
 800b61c:	e7d8      	b.n	800b5d0 <__multiply+0x50>
 800b61e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	d024      	beq.n	800b672 <__multiply+0xf2>
 800b628:	f104 0e14 	add.w	lr, r4, #20
 800b62c:	46a9      	mov	r9, r5
 800b62e:	f04f 0c00 	mov.w	ip, #0
 800b632:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b636:	f8d9 1000 	ldr.w	r1, [r9]
 800b63a:	fa1f fb82 	uxth.w	fp, r2
 800b63e:	b289      	uxth	r1, r1
 800b640:	fb0a 110b 	mla	r1, sl, fp, r1
 800b644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b648:	f8d9 2000 	ldr.w	r2, [r9]
 800b64c:	4461      	add	r1, ip
 800b64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b652:	fb0a c20b 	mla	r2, sl, fp, ip
 800b656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b65a:	b289      	uxth	r1, r1
 800b65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b660:	4577      	cmp	r7, lr
 800b662:	f849 1b04 	str.w	r1, [r9], #4
 800b666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b66a:	d8e2      	bhi.n	800b632 <__multiply+0xb2>
 800b66c:	9a01      	ldr	r2, [sp, #4]
 800b66e:	f845 c002 	str.w	ip, [r5, r2]
 800b672:	9a03      	ldr	r2, [sp, #12]
 800b674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b678:	3304      	adds	r3, #4
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	d020      	beq.n	800b6c2 <__multiply+0x142>
 800b680:	6829      	ldr	r1, [r5, #0]
 800b682:	f104 0c14 	add.w	ip, r4, #20
 800b686:	46ae      	mov	lr, r5
 800b688:	f04f 0a00 	mov.w	sl, #0
 800b68c:	f8bc b000 	ldrh.w	fp, [ip]
 800b690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b694:	fb09 220b 	mla	r2, r9, fp, r2
 800b698:	4492      	add	sl, r2
 800b69a:	b289      	uxth	r1, r1
 800b69c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6a0:	f84e 1b04 	str.w	r1, [lr], #4
 800b6a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6a8:	f8be 1000 	ldrh.w	r1, [lr]
 800b6ac:	0c12      	lsrs	r2, r2, #16
 800b6ae:	fb09 1102 	mla	r1, r9, r2, r1
 800b6b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b6b6:	4567      	cmp	r7, ip
 800b6b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6bc:	d8e6      	bhi.n	800b68c <__multiply+0x10c>
 800b6be:	9a01      	ldr	r2, [sp, #4]
 800b6c0:	50a9      	str	r1, [r5, r2]
 800b6c2:	3504      	adds	r5, #4
 800b6c4:	e79a      	b.n	800b5fc <__multiply+0x7c>
 800b6c6:	3e01      	subs	r6, #1
 800b6c8:	e79c      	b.n	800b604 <__multiply+0x84>
 800b6ca:	bf00      	nop
 800b6cc:	0800c673 	.word	0x0800c673
 800b6d0:	0800c6e4 	.word	0x0800c6e4

0800b6d4 <__pow5mult>:
 800b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	4615      	mov	r5, r2
 800b6da:	f012 0203 	ands.w	r2, r2, #3
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	d007      	beq.n	800b6f4 <__pow5mult+0x20>
 800b6e4:	4c25      	ldr	r4, [pc, #148]	; (800b77c <__pow5mult+0xa8>)
 800b6e6:	3a01      	subs	r2, #1
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ee:	f7ff fe9b 	bl	800b428 <__multadd>
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	10ad      	asrs	r5, r5, #2
 800b6f6:	d03d      	beq.n	800b774 <__pow5mult+0xa0>
 800b6f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6fa:	b97c      	cbnz	r4, 800b71c <__pow5mult+0x48>
 800b6fc:	2010      	movs	r0, #16
 800b6fe:	f7ff fe29 	bl	800b354 <malloc>
 800b702:	4602      	mov	r2, r0
 800b704:	6270      	str	r0, [r6, #36]	; 0x24
 800b706:	b928      	cbnz	r0, 800b714 <__pow5mult+0x40>
 800b708:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <__pow5mult+0xac>)
 800b70a:	481e      	ldr	r0, [pc, #120]	; (800b784 <__pow5mult+0xb0>)
 800b70c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b710:	f000 fc62 	bl	800bfd8 <__assert_func>
 800b714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b718:	6004      	str	r4, [r0, #0]
 800b71a:	60c4      	str	r4, [r0, #12]
 800b71c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b724:	b94c      	cbnz	r4, 800b73a <__pow5mult+0x66>
 800b726:	f240 2171 	movw	r1, #625	; 0x271
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ff12 	bl	800b554 <__i2b>
 800b730:	2300      	movs	r3, #0
 800b732:	f8c8 0008 	str.w	r0, [r8, #8]
 800b736:	4604      	mov	r4, r0
 800b738:	6003      	str	r3, [r0, #0]
 800b73a:	f04f 0900 	mov.w	r9, #0
 800b73e:	07eb      	lsls	r3, r5, #31
 800b740:	d50a      	bpl.n	800b758 <__pow5mult+0x84>
 800b742:	4639      	mov	r1, r7
 800b744:	4622      	mov	r2, r4
 800b746:	4630      	mov	r0, r6
 800b748:	f7ff ff1a 	bl	800b580 <__multiply>
 800b74c:	4639      	mov	r1, r7
 800b74e:	4680      	mov	r8, r0
 800b750:	4630      	mov	r0, r6
 800b752:	f7ff fe47 	bl	800b3e4 <_Bfree>
 800b756:	4647      	mov	r7, r8
 800b758:	106d      	asrs	r5, r5, #1
 800b75a:	d00b      	beq.n	800b774 <__pow5mult+0xa0>
 800b75c:	6820      	ldr	r0, [r4, #0]
 800b75e:	b938      	cbnz	r0, 800b770 <__pow5mult+0x9c>
 800b760:	4622      	mov	r2, r4
 800b762:	4621      	mov	r1, r4
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ff0b 	bl	800b580 <__multiply>
 800b76a:	6020      	str	r0, [r4, #0]
 800b76c:	f8c0 9000 	str.w	r9, [r0]
 800b770:	4604      	mov	r4, r0
 800b772:	e7e4      	b.n	800b73e <__pow5mult+0x6a>
 800b774:	4638      	mov	r0, r7
 800b776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77a:	bf00      	nop
 800b77c:	0800c830 	.word	0x0800c830
 800b780:	0800c601 	.word	0x0800c601
 800b784:	0800c6e4 	.word	0x0800c6e4

0800b788 <__lshift>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	460c      	mov	r4, r1
 800b78e:	6849      	ldr	r1, [r1, #4]
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	4607      	mov	r7, r0
 800b79a:	4691      	mov	r9, r2
 800b79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7a0:	f108 0601 	add.w	r6, r8, #1
 800b7a4:	42b3      	cmp	r3, r6
 800b7a6:	db0b      	blt.n	800b7c0 <__lshift+0x38>
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff fddb 	bl	800b364 <_Balloc>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b948      	cbnz	r0, 800b7c6 <__lshift+0x3e>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b2a      	ldr	r3, [pc, #168]	; (800b860 <__lshift+0xd8>)
 800b7b6:	482b      	ldr	r0, [pc, #172]	; (800b864 <__lshift+0xdc>)
 800b7b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b7bc:	f000 fc0c 	bl	800bfd8 <__assert_func>
 800b7c0:	3101      	adds	r1, #1
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	e7ee      	b.n	800b7a4 <__lshift+0x1c>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f100 0114 	add.w	r1, r0, #20
 800b7cc:	f100 0210 	add.w	r2, r0, #16
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	4553      	cmp	r3, sl
 800b7d4:	db37      	blt.n	800b846 <__lshift+0xbe>
 800b7d6:	6920      	ldr	r0, [r4, #16]
 800b7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7dc:	f104 0314 	add.w	r3, r4, #20
 800b7e0:	f019 091f 	ands.w	r9, r9, #31
 800b7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b7ec:	d02f      	beq.n	800b84e <__lshift+0xc6>
 800b7ee:	f1c9 0e20 	rsb	lr, r9, #32
 800b7f2:	468a      	mov	sl, r1
 800b7f4:	f04f 0c00 	mov.w	ip, #0
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	fa02 f209 	lsl.w	r2, r2, r9
 800b7fe:	ea42 020c 	orr.w	r2, r2, ip
 800b802:	f84a 2b04 	str.w	r2, [sl], #4
 800b806:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80a:	4298      	cmp	r0, r3
 800b80c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b810:	d8f2      	bhi.n	800b7f8 <__lshift+0x70>
 800b812:	1b03      	subs	r3, r0, r4
 800b814:	3b15      	subs	r3, #21
 800b816:	f023 0303 	bic.w	r3, r3, #3
 800b81a:	3304      	adds	r3, #4
 800b81c:	f104 0215 	add.w	r2, r4, #21
 800b820:	4290      	cmp	r0, r2
 800b822:	bf38      	it	cc
 800b824:	2304      	movcc	r3, #4
 800b826:	f841 c003 	str.w	ip, [r1, r3]
 800b82a:	f1bc 0f00 	cmp.w	ip, #0
 800b82e:	d001      	beq.n	800b834 <__lshift+0xac>
 800b830:	f108 0602 	add.w	r6, r8, #2
 800b834:	3e01      	subs	r6, #1
 800b836:	4638      	mov	r0, r7
 800b838:	612e      	str	r6, [r5, #16]
 800b83a:	4621      	mov	r1, r4
 800b83c:	f7ff fdd2 	bl	800b3e4 <_Bfree>
 800b840:	4628      	mov	r0, r5
 800b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b846:	f842 0f04 	str.w	r0, [r2, #4]!
 800b84a:	3301      	adds	r3, #1
 800b84c:	e7c1      	b.n	800b7d2 <__lshift+0x4a>
 800b84e:	3904      	subs	r1, #4
 800b850:	f853 2b04 	ldr.w	r2, [r3], #4
 800b854:	f841 2f04 	str.w	r2, [r1, #4]!
 800b858:	4298      	cmp	r0, r3
 800b85a:	d8f9      	bhi.n	800b850 <__lshift+0xc8>
 800b85c:	e7ea      	b.n	800b834 <__lshift+0xac>
 800b85e:	bf00      	nop
 800b860:	0800c673 	.word	0x0800c673
 800b864:	0800c6e4 	.word	0x0800c6e4

0800b868 <__mcmp>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	6902      	ldr	r2, [r0, #16]
 800b86c:	690c      	ldr	r4, [r1, #16]
 800b86e:	1b12      	subs	r2, r2, r4
 800b870:	d10e      	bne.n	800b890 <__mcmp+0x28>
 800b872:	f100 0314 	add.w	r3, r0, #20
 800b876:	3114      	adds	r1, #20
 800b878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b87c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b888:	42a5      	cmp	r5, r4
 800b88a:	d003      	beq.n	800b894 <__mcmp+0x2c>
 800b88c:	d305      	bcc.n	800b89a <__mcmp+0x32>
 800b88e:	2201      	movs	r2, #1
 800b890:	4610      	mov	r0, r2
 800b892:	bd30      	pop	{r4, r5, pc}
 800b894:	4283      	cmp	r3, r0
 800b896:	d3f3      	bcc.n	800b880 <__mcmp+0x18>
 800b898:	e7fa      	b.n	800b890 <__mcmp+0x28>
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	e7f7      	b.n	800b890 <__mcmp+0x28>

0800b8a0 <__mdiff>:
 800b8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4690      	mov	r8, r2
 800b8ae:	f7ff ffdb 	bl	800b868 <__mcmp>
 800b8b2:	1e05      	subs	r5, r0, #0
 800b8b4:	d110      	bne.n	800b8d8 <__mdiff+0x38>
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7ff fd53 	bl	800b364 <_Balloc>
 800b8be:	b930      	cbnz	r0, 800b8ce <__mdiff+0x2e>
 800b8c0:	4b3a      	ldr	r3, [pc, #232]	; (800b9ac <__mdiff+0x10c>)
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	f240 2132 	movw	r1, #562	; 0x232
 800b8c8:	4839      	ldr	r0, [pc, #228]	; (800b9b0 <__mdiff+0x110>)
 800b8ca:	f000 fb85 	bl	800bfd8 <__assert_func>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	bfa4      	itt	ge
 800b8da:	4643      	movge	r3, r8
 800b8dc:	46a0      	movge	r8, r4
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8e4:	bfa6      	itte	ge
 800b8e6:	461c      	movge	r4, r3
 800b8e8:	2500      	movge	r5, #0
 800b8ea:	2501      	movlt	r5, #1
 800b8ec:	f7ff fd3a 	bl	800b364 <_Balloc>
 800b8f0:	b920      	cbnz	r0, 800b8fc <__mdiff+0x5c>
 800b8f2:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <__mdiff+0x10c>)
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8fa:	e7e5      	b.n	800b8c8 <__mdiff+0x28>
 800b8fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b900:	6926      	ldr	r6, [r4, #16]
 800b902:	60c5      	str	r5, [r0, #12]
 800b904:	f104 0914 	add.w	r9, r4, #20
 800b908:	f108 0514 	add.w	r5, r8, #20
 800b90c:	f100 0e14 	add.w	lr, r0, #20
 800b910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b918:	f108 0210 	add.w	r2, r8, #16
 800b91c:	46f2      	mov	sl, lr
 800b91e:	2100      	movs	r1, #0
 800b920:	f859 3b04 	ldr.w	r3, [r9], #4
 800b924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b928:	fa1f f883 	uxth.w	r8, r3
 800b92c:	fa11 f18b 	uxtah	r1, r1, fp
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	eba1 0808 	sub.w	r8, r1, r8
 800b936:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b93a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b93e:	fa1f f888 	uxth.w	r8, r8
 800b942:	1419      	asrs	r1, r3, #16
 800b944:	454e      	cmp	r6, r9
 800b946:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b94a:	f84a 3b04 	str.w	r3, [sl], #4
 800b94e:	d8e7      	bhi.n	800b920 <__mdiff+0x80>
 800b950:	1b33      	subs	r3, r6, r4
 800b952:	3b15      	subs	r3, #21
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	3304      	adds	r3, #4
 800b95a:	3415      	adds	r4, #21
 800b95c:	42a6      	cmp	r6, r4
 800b95e:	bf38      	it	cc
 800b960:	2304      	movcc	r3, #4
 800b962:	441d      	add	r5, r3
 800b964:	4473      	add	r3, lr
 800b966:	469e      	mov	lr, r3
 800b968:	462e      	mov	r6, r5
 800b96a:	4566      	cmp	r6, ip
 800b96c:	d30e      	bcc.n	800b98c <__mdiff+0xec>
 800b96e:	f10c 0203 	add.w	r2, ip, #3
 800b972:	1b52      	subs	r2, r2, r5
 800b974:	f022 0203 	bic.w	r2, r2, #3
 800b978:	3d03      	subs	r5, #3
 800b97a:	45ac      	cmp	ip, r5
 800b97c:	bf38      	it	cc
 800b97e:	2200      	movcc	r2, #0
 800b980:	441a      	add	r2, r3
 800b982:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b986:	b17b      	cbz	r3, 800b9a8 <__mdiff+0x108>
 800b988:	6107      	str	r7, [r0, #16]
 800b98a:	e7a3      	b.n	800b8d4 <__mdiff+0x34>
 800b98c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b990:	fa11 f288 	uxtah	r2, r1, r8
 800b994:	1414      	asrs	r4, r2, #16
 800b996:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b99a:	b292      	uxth	r2, r2
 800b99c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9a0:	f84e 2b04 	str.w	r2, [lr], #4
 800b9a4:	1421      	asrs	r1, r4, #16
 800b9a6:	e7e0      	b.n	800b96a <__mdiff+0xca>
 800b9a8:	3f01      	subs	r7, #1
 800b9aa:	e7ea      	b.n	800b982 <__mdiff+0xe2>
 800b9ac:	0800c673 	.word	0x0800c673
 800b9b0:	0800c6e4 	.word	0x0800c6e4

0800b9b4 <__d2b>:
 800b9b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4689      	mov	r9, r1
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	ec57 6b10 	vmov	r6, r7, d0
 800b9c0:	4690      	mov	r8, r2
 800b9c2:	f7ff fccf 	bl	800b364 <_Balloc>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	b930      	cbnz	r0, 800b9d8 <__d2b+0x24>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	4b25      	ldr	r3, [pc, #148]	; (800ba64 <__d2b+0xb0>)
 800b9ce:	4826      	ldr	r0, [pc, #152]	; (800ba68 <__d2b+0xb4>)
 800b9d0:	f240 310a 	movw	r1, #778	; 0x30a
 800b9d4:	f000 fb00 	bl	800bfd8 <__assert_func>
 800b9d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9e0:	bb35      	cbnz	r5, 800ba30 <__d2b+0x7c>
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	d028      	beq.n	800ba3a <__d2b+0x86>
 800b9e8:	4668      	mov	r0, sp
 800b9ea:	9600      	str	r6, [sp, #0]
 800b9ec:	f7ff fd82 	bl	800b4f4 <__lo0bits>
 800b9f0:	9900      	ldr	r1, [sp, #0]
 800b9f2:	b300      	cbz	r0, 800ba36 <__d2b+0x82>
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	f1c0 0320 	rsb	r3, r0, #32
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	40c2      	lsrs	r2, r0
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	9201      	str	r2, [sp, #4]
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	61a3      	str	r3, [r4, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bf14      	ite	ne
 800ba0e:	2202      	movne	r2, #2
 800ba10:	2201      	moveq	r2, #1
 800ba12:	6122      	str	r2, [r4, #16]
 800ba14:	b1d5      	cbz	r5, 800ba4c <__d2b+0x98>
 800ba16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba1a:	4405      	add	r5, r0
 800ba1c:	f8c9 5000 	str.w	r5, [r9]
 800ba20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba24:	f8c8 0000 	str.w	r0, [r8]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	b003      	add	sp, #12
 800ba2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba34:	e7d5      	b.n	800b9e2 <__d2b+0x2e>
 800ba36:	6161      	str	r1, [r4, #20]
 800ba38:	e7e5      	b.n	800ba06 <__d2b+0x52>
 800ba3a:	a801      	add	r0, sp, #4
 800ba3c:	f7ff fd5a 	bl	800b4f4 <__lo0bits>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	6163      	str	r3, [r4, #20]
 800ba44:	2201      	movs	r2, #1
 800ba46:	6122      	str	r2, [r4, #16]
 800ba48:	3020      	adds	r0, #32
 800ba4a:	e7e3      	b.n	800ba14 <__d2b+0x60>
 800ba4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba54:	f8c9 0000 	str.w	r0, [r9]
 800ba58:	6918      	ldr	r0, [r3, #16]
 800ba5a:	f7ff fd2b 	bl	800b4b4 <__hi0bits>
 800ba5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba62:	e7df      	b.n	800ba24 <__d2b+0x70>
 800ba64:	0800c673 	.word	0x0800c673
 800ba68:	0800c6e4 	.word	0x0800c6e4

0800ba6c <_calloc_r>:
 800ba6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba6e:	fba1 2402 	umull	r2, r4, r1, r2
 800ba72:	b94c      	cbnz	r4, 800ba88 <_calloc_r+0x1c>
 800ba74:	4611      	mov	r1, r2
 800ba76:	9201      	str	r2, [sp, #4]
 800ba78:	f000 f87a 	bl	800bb70 <_malloc_r>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	4605      	mov	r5, r0
 800ba80:	b930      	cbnz	r0, 800ba90 <_calloc_r+0x24>
 800ba82:	4628      	mov	r0, r5
 800ba84:	b003      	add	sp, #12
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	220c      	movs	r2, #12
 800ba8a:	6002      	str	r2, [r0, #0]
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	e7f8      	b.n	800ba82 <_calloc_r+0x16>
 800ba90:	4621      	mov	r1, r4
 800ba92:	f7fd fea9 	bl	80097e8 <memset>
 800ba96:	e7f4      	b.n	800ba82 <_calloc_r+0x16>

0800ba98 <_free_r>:
 800ba98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba9a:	2900      	cmp	r1, #0
 800ba9c:	d044      	beq.n	800bb28 <_free_r+0x90>
 800ba9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa2:	9001      	str	r0, [sp, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f1a1 0404 	sub.w	r4, r1, #4
 800baaa:	bfb8      	it	lt
 800baac:	18e4      	addlt	r4, r4, r3
 800baae:	f000 fb19 	bl	800c0e4 <__malloc_lock>
 800bab2:	4a1e      	ldr	r2, [pc, #120]	; (800bb2c <_free_r+0x94>)
 800bab4:	9801      	ldr	r0, [sp, #4]
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	b933      	cbnz	r3, 800bac8 <_free_r+0x30>
 800baba:	6063      	str	r3, [r4, #4]
 800babc:	6014      	str	r4, [r2, #0]
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac4:	f000 bb14 	b.w	800c0f0 <__malloc_unlock>
 800bac8:	42a3      	cmp	r3, r4
 800baca:	d908      	bls.n	800bade <_free_r+0x46>
 800bacc:	6825      	ldr	r5, [r4, #0]
 800bace:	1961      	adds	r1, r4, r5
 800bad0:	428b      	cmp	r3, r1
 800bad2:	bf01      	itttt	eq
 800bad4:	6819      	ldreq	r1, [r3, #0]
 800bad6:	685b      	ldreq	r3, [r3, #4]
 800bad8:	1949      	addeq	r1, r1, r5
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	e7ed      	b.n	800baba <_free_r+0x22>
 800bade:	461a      	mov	r2, r3
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	b10b      	cbz	r3, 800bae8 <_free_r+0x50>
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d9fa      	bls.n	800bade <_free_r+0x46>
 800bae8:	6811      	ldr	r1, [r2, #0]
 800baea:	1855      	adds	r5, r2, r1
 800baec:	42a5      	cmp	r5, r4
 800baee:	d10b      	bne.n	800bb08 <_free_r+0x70>
 800baf0:	6824      	ldr	r4, [r4, #0]
 800baf2:	4421      	add	r1, r4
 800baf4:	1854      	adds	r4, r2, r1
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	6011      	str	r1, [r2, #0]
 800bafa:	d1e0      	bne.n	800babe <_free_r+0x26>
 800bafc:	681c      	ldr	r4, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	6053      	str	r3, [r2, #4]
 800bb02:	4421      	add	r1, r4
 800bb04:	6011      	str	r1, [r2, #0]
 800bb06:	e7da      	b.n	800babe <_free_r+0x26>
 800bb08:	d902      	bls.n	800bb10 <_free_r+0x78>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	e7d6      	b.n	800babe <_free_r+0x26>
 800bb10:	6825      	ldr	r5, [r4, #0]
 800bb12:	1961      	adds	r1, r4, r5
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf04      	itt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	bf04      	itt	eq
 800bb20:	1949      	addeq	r1, r1, r5
 800bb22:	6021      	streq	r1, [r4, #0]
 800bb24:	6054      	str	r4, [r2, #4]
 800bb26:	e7ca      	b.n	800babe <_free_r+0x26>
 800bb28:	b003      	add	sp, #12
 800bb2a:	bd30      	pop	{r4, r5, pc}
 800bb2c:	20000498 	.word	0x20000498

0800bb30 <sbrk_aligned>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4e0e      	ldr	r6, [pc, #56]	; (800bb6c <sbrk_aligned+0x3c>)
 800bb34:	460c      	mov	r4, r1
 800bb36:	6831      	ldr	r1, [r6, #0]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	b911      	cbnz	r1, 800bb42 <sbrk_aligned+0x12>
 800bb3c:	f000 f9e6 	bl	800bf0c <_sbrk_r>
 800bb40:	6030      	str	r0, [r6, #0]
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 f9e1 	bl	800bf0c <_sbrk_r>
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	d00a      	beq.n	800bb64 <sbrk_aligned+0x34>
 800bb4e:	1cc4      	adds	r4, r0, #3
 800bb50:	f024 0403 	bic.w	r4, r4, #3
 800bb54:	42a0      	cmp	r0, r4
 800bb56:	d007      	beq.n	800bb68 <sbrk_aligned+0x38>
 800bb58:	1a21      	subs	r1, r4, r0
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f000 f9d6 	bl	800bf0c <_sbrk_r>
 800bb60:	3001      	adds	r0, #1
 800bb62:	d101      	bne.n	800bb68 <sbrk_aligned+0x38>
 800bb64:	f04f 34ff 	mov.w	r4, #4294967295
 800bb68:	4620      	mov	r0, r4
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	2000049c 	.word	0x2000049c

0800bb70 <_malloc_r>:
 800bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb74:	1ccd      	adds	r5, r1, #3
 800bb76:	f025 0503 	bic.w	r5, r5, #3
 800bb7a:	3508      	adds	r5, #8
 800bb7c:	2d0c      	cmp	r5, #12
 800bb7e:	bf38      	it	cc
 800bb80:	250c      	movcc	r5, #12
 800bb82:	2d00      	cmp	r5, #0
 800bb84:	4607      	mov	r7, r0
 800bb86:	db01      	blt.n	800bb8c <_malloc_r+0x1c>
 800bb88:	42a9      	cmp	r1, r5
 800bb8a:	d905      	bls.n	800bb98 <_malloc_r+0x28>
 800bb8c:	230c      	movs	r3, #12
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	2600      	movs	r6, #0
 800bb92:	4630      	mov	r0, r6
 800bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb98:	4e2e      	ldr	r6, [pc, #184]	; (800bc54 <_malloc_r+0xe4>)
 800bb9a:	f000 faa3 	bl	800c0e4 <__malloc_lock>
 800bb9e:	6833      	ldr	r3, [r6, #0]
 800bba0:	461c      	mov	r4, r3
 800bba2:	bb34      	cbnz	r4, 800bbf2 <_malloc_r+0x82>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4638      	mov	r0, r7
 800bba8:	f7ff ffc2 	bl	800bb30 <sbrk_aligned>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	4604      	mov	r4, r0
 800bbb0:	d14d      	bne.n	800bc4e <_malloc_r+0xde>
 800bbb2:	6834      	ldr	r4, [r6, #0]
 800bbb4:	4626      	mov	r6, r4
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d140      	bne.n	800bc3c <_malloc_r+0xcc>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	eb04 0803 	add.w	r8, r4, r3
 800bbc4:	f000 f9a2 	bl	800bf0c <_sbrk_r>
 800bbc8:	4580      	cmp	r8, r0
 800bbca:	d13a      	bne.n	800bc42 <_malloc_r+0xd2>
 800bbcc:	6821      	ldr	r1, [r4, #0]
 800bbce:	3503      	adds	r5, #3
 800bbd0:	1a6d      	subs	r5, r5, r1
 800bbd2:	f025 0503 	bic.w	r5, r5, #3
 800bbd6:	3508      	adds	r5, #8
 800bbd8:	2d0c      	cmp	r5, #12
 800bbda:	bf38      	it	cc
 800bbdc:	250c      	movcc	r5, #12
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff ffa5 	bl	800bb30 <sbrk_aligned>
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d02b      	beq.n	800bc42 <_malloc_r+0xd2>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	442b      	add	r3, r5
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	e00e      	b.n	800bc10 <_malloc_r+0xa0>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	1b52      	subs	r2, r2, r5
 800bbf6:	d41e      	bmi.n	800bc36 <_malloc_r+0xc6>
 800bbf8:	2a0b      	cmp	r2, #11
 800bbfa:	d916      	bls.n	800bc2a <_malloc_r+0xba>
 800bbfc:	1961      	adds	r1, r4, r5
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	6025      	str	r5, [r4, #0]
 800bc02:	bf18      	it	ne
 800bc04:	6059      	strne	r1, [r3, #4]
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	bf08      	it	eq
 800bc0a:	6031      	streq	r1, [r6, #0]
 800bc0c:	5162      	str	r2, [r4, r5]
 800bc0e:	604b      	str	r3, [r1, #4]
 800bc10:	4638      	mov	r0, r7
 800bc12:	f104 060b 	add.w	r6, r4, #11
 800bc16:	f000 fa6b 	bl	800c0f0 <__malloc_unlock>
 800bc1a:	f026 0607 	bic.w	r6, r6, #7
 800bc1e:	1d23      	adds	r3, r4, #4
 800bc20:	1af2      	subs	r2, r6, r3
 800bc22:	d0b6      	beq.n	800bb92 <_malloc_r+0x22>
 800bc24:	1b9b      	subs	r3, r3, r6
 800bc26:	50a3      	str	r3, [r4, r2]
 800bc28:	e7b3      	b.n	800bb92 <_malloc_r+0x22>
 800bc2a:	6862      	ldr	r2, [r4, #4]
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	bf0c      	ite	eq
 800bc30:	6032      	streq	r2, [r6, #0]
 800bc32:	605a      	strne	r2, [r3, #4]
 800bc34:	e7ec      	b.n	800bc10 <_malloc_r+0xa0>
 800bc36:	4623      	mov	r3, r4
 800bc38:	6864      	ldr	r4, [r4, #4]
 800bc3a:	e7b2      	b.n	800bba2 <_malloc_r+0x32>
 800bc3c:	4634      	mov	r4, r6
 800bc3e:	6876      	ldr	r6, [r6, #4]
 800bc40:	e7b9      	b.n	800bbb6 <_malloc_r+0x46>
 800bc42:	230c      	movs	r3, #12
 800bc44:	603b      	str	r3, [r7, #0]
 800bc46:	4638      	mov	r0, r7
 800bc48:	f000 fa52 	bl	800c0f0 <__malloc_unlock>
 800bc4c:	e7a1      	b.n	800bb92 <_malloc_r+0x22>
 800bc4e:	6025      	str	r5, [r4, #0]
 800bc50:	e7de      	b.n	800bc10 <_malloc_r+0xa0>
 800bc52:	bf00      	nop
 800bc54:	20000498 	.word	0x20000498

0800bc58 <__sfputc_r>:
 800bc58:	6893      	ldr	r3, [r2, #8]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	b410      	push	{r4}
 800bc60:	6093      	str	r3, [r2, #8]
 800bc62:	da08      	bge.n	800bc76 <__sfputc_r+0x1e>
 800bc64:	6994      	ldr	r4, [r2, #24]
 800bc66:	42a3      	cmp	r3, r4
 800bc68:	db01      	blt.n	800bc6e <__sfputc_r+0x16>
 800bc6a:	290a      	cmp	r1, #10
 800bc6c:	d103      	bne.n	800bc76 <__sfputc_r+0x1e>
 800bc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc72:	f7fe ba91 	b.w	800a198 <__swbuf_r>
 800bc76:	6813      	ldr	r3, [r2, #0]
 800bc78:	1c58      	adds	r0, r3, #1
 800bc7a:	6010      	str	r0, [r2, #0]
 800bc7c:	7019      	strb	r1, [r3, #0]
 800bc7e:	4608      	mov	r0, r1
 800bc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <__sfputs_r>:
 800bc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc88:	4606      	mov	r6, r0
 800bc8a:	460f      	mov	r7, r1
 800bc8c:	4614      	mov	r4, r2
 800bc8e:	18d5      	adds	r5, r2, r3
 800bc90:	42ac      	cmp	r4, r5
 800bc92:	d101      	bne.n	800bc98 <__sfputs_r+0x12>
 800bc94:	2000      	movs	r0, #0
 800bc96:	e007      	b.n	800bca8 <__sfputs_r+0x22>
 800bc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9c:	463a      	mov	r2, r7
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff ffda 	bl	800bc58 <__sfputc_r>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d1f3      	bne.n	800bc90 <__sfputs_r+0xa>
 800bca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcac <_vfiprintf_r>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	b09d      	sub	sp, #116	; 0x74
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	4698      	mov	r8, r3
 800bcb8:	4606      	mov	r6, r0
 800bcba:	b118      	cbz	r0, 800bcc4 <_vfiprintf_r+0x18>
 800bcbc:	6983      	ldr	r3, [r0, #24]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <_vfiprintf_r+0x18>
 800bcc0:	f7ff fa3e 	bl	800b140 <__sinit>
 800bcc4:	4b89      	ldr	r3, [pc, #548]	; (800beec <_vfiprintf_r+0x240>)
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	d11b      	bne.n	800bd02 <_vfiprintf_r+0x56>
 800bcca:	6875      	ldr	r5, [r6, #4]
 800bccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_vfiprintf_r+0x32>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_vfiprintf_r+0x32>
 800bcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcda:	f7ff fad4 	bl	800b286 <__retarget_lock_acquire_recursive>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	071b      	lsls	r3, r3, #28
 800bce2:	d501      	bpl.n	800bce8 <_vfiprintf_r+0x3c>
 800bce4:	692b      	ldr	r3, [r5, #16]
 800bce6:	b9eb      	cbnz	r3, 800bd24 <_vfiprintf_r+0x78>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f7fe faa6 	bl	800a23c <__swsetup_r>
 800bcf0:	b1c0      	cbz	r0, 800bd24 <_vfiprintf_r+0x78>
 800bcf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf4:	07dc      	lsls	r4, r3, #31
 800bcf6:	d50e      	bpl.n	800bd16 <_vfiprintf_r+0x6a>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b01d      	add	sp, #116	; 0x74
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	4b7b      	ldr	r3, [pc, #492]	; (800bef0 <_vfiprintf_r+0x244>)
 800bd04:	429d      	cmp	r5, r3
 800bd06:	d101      	bne.n	800bd0c <_vfiprintf_r+0x60>
 800bd08:	68b5      	ldr	r5, [r6, #8]
 800bd0a:	e7df      	b.n	800bccc <_vfiprintf_r+0x20>
 800bd0c:	4b79      	ldr	r3, [pc, #484]	; (800bef4 <_vfiprintf_r+0x248>)
 800bd0e:	429d      	cmp	r5, r3
 800bd10:	bf08      	it	eq
 800bd12:	68f5      	ldreq	r5, [r6, #12]
 800bd14:	e7da      	b.n	800bccc <_vfiprintf_r+0x20>
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	0598      	lsls	r0, r3, #22
 800bd1a:	d4ed      	bmi.n	800bcf8 <_vfiprintf_r+0x4c>
 800bd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd1e:	f7ff fab3 	bl	800b288 <__retarget_lock_release_recursive>
 800bd22:	e7e9      	b.n	800bcf8 <_vfiprintf_r+0x4c>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9309      	str	r3, [sp, #36]	; 0x24
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd32:	2330      	movs	r3, #48	; 0x30
 800bd34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bef8 <_vfiprintf_r+0x24c>
 800bd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd3c:	f04f 0901 	mov.w	r9, #1
 800bd40:	4623      	mov	r3, r4
 800bd42:	469a      	mov	sl, r3
 800bd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd48:	b10a      	cbz	r2, 800bd4e <_vfiprintf_r+0xa2>
 800bd4a:	2a25      	cmp	r2, #37	; 0x25
 800bd4c:	d1f9      	bne.n	800bd42 <_vfiprintf_r+0x96>
 800bd4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd52:	d00b      	beq.n	800bd6c <_vfiprintf_r+0xc0>
 800bd54:	465b      	mov	r3, fp
 800bd56:	4622      	mov	r2, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7ff ff93 	bl	800bc86 <__sfputs_r>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f000 80aa 	beq.w	800beba <_vfiprintf_r+0x20e>
 800bd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd68:	445a      	add	r2, fp
 800bd6a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80a2 	beq.w	800beba <_vfiprintf_r+0x20e>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd80:	f10a 0a01 	add.w	sl, sl, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd8c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd8e:	4654      	mov	r4, sl
 800bd90:	2205      	movs	r2, #5
 800bd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd96:	4858      	ldr	r0, [pc, #352]	; (800bef8 <_vfiprintf_r+0x24c>)
 800bd98:	f7f4 feca 	bl	8000b30 <memchr>
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	b9d8      	cbnz	r0, 800bdd8 <_vfiprintf_r+0x12c>
 800bda0:	06d1      	lsls	r1, r2, #27
 800bda2:	bf44      	itt	mi
 800bda4:	2320      	movmi	r3, #32
 800bda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdaa:	0713      	lsls	r3, r2, #28
 800bdac:	bf44      	itt	mi
 800bdae:	232b      	movmi	r3, #43	; 0x2b
 800bdb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdba:	d015      	beq.n	800bde8 <_vfiprintf_r+0x13c>
 800bdbc:	9a07      	ldr	r2, [sp, #28]
 800bdbe:	4654      	mov	r4, sl
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f04f 0c0a 	mov.w	ip, #10
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdcc:	3b30      	subs	r3, #48	; 0x30
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d94e      	bls.n	800be70 <_vfiprintf_r+0x1c4>
 800bdd2:	b1b0      	cbz	r0, 800be02 <_vfiprintf_r+0x156>
 800bdd4:	9207      	str	r2, [sp, #28]
 800bdd6:	e014      	b.n	800be02 <_vfiprintf_r+0x156>
 800bdd8:	eba0 0308 	sub.w	r3, r0, r8
 800bddc:	fa09 f303 	lsl.w	r3, r9, r3
 800bde0:	4313      	orrs	r3, r2
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	46a2      	mov	sl, r4
 800bde6:	e7d2      	b.n	800bd8e <_vfiprintf_r+0xe2>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	1d19      	adds	r1, r3, #4
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	9103      	str	r1, [sp, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	bfbb      	ittet	lt
 800bdf4:	425b      	neglt	r3, r3
 800bdf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdfa:	9307      	strge	r3, [sp, #28]
 800bdfc:	9307      	strlt	r3, [sp, #28]
 800bdfe:	bfb8      	it	lt
 800be00:	9204      	strlt	r2, [sp, #16]
 800be02:	7823      	ldrb	r3, [r4, #0]
 800be04:	2b2e      	cmp	r3, #46	; 0x2e
 800be06:	d10c      	bne.n	800be22 <_vfiprintf_r+0x176>
 800be08:	7863      	ldrb	r3, [r4, #1]
 800be0a:	2b2a      	cmp	r3, #42	; 0x2a
 800be0c:	d135      	bne.n	800be7a <_vfiprintf_r+0x1ce>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	1d1a      	adds	r2, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9203      	str	r2, [sp, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfb8      	it	lt
 800be1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be1e:	3402      	adds	r4, #2
 800be20:	9305      	str	r3, [sp, #20]
 800be22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf08 <_vfiprintf_r+0x25c>
 800be26:	7821      	ldrb	r1, [r4, #0]
 800be28:	2203      	movs	r2, #3
 800be2a:	4650      	mov	r0, sl
 800be2c:	f7f4 fe80 	bl	8000b30 <memchr>
 800be30:	b140      	cbz	r0, 800be44 <_vfiprintf_r+0x198>
 800be32:	2340      	movs	r3, #64	; 0x40
 800be34:	eba0 000a 	sub.w	r0, r0, sl
 800be38:	fa03 f000 	lsl.w	r0, r3, r0
 800be3c:	9b04      	ldr	r3, [sp, #16]
 800be3e:	4303      	orrs	r3, r0
 800be40:	3401      	adds	r4, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be48:	482c      	ldr	r0, [pc, #176]	; (800befc <_vfiprintf_r+0x250>)
 800be4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be4e:	2206      	movs	r2, #6
 800be50:	f7f4 fe6e 	bl	8000b30 <memchr>
 800be54:	2800      	cmp	r0, #0
 800be56:	d03f      	beq.n	800bed8 <_vfiprintf_r+0x22c>
 800be58:	4b29      	ldr	r3, [pc, #164]	; (800bf00 <_vfiprintf_r+0x254>)
 800be5a:	bb1b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x1f8>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	3307      	adds	r3, #7
 800be60:	f023 0307 	bic.w	r3, r3, #7
 800be64:	3308      	adds	r3, #8
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6a:	443b      	add	r3, r7
 800be6c:	9309      	str	r3, [sp, #36]	; 0x24
 800be6e:	e767      	b.n	800bd40 <_vfiprintf_r+0x94>
 800be70:	fb0c 3202 	mla	r2, ip, r2, r3
 800be74:	460c      	mov	r4, r1
 800be76:	2001      	movs	r0, #1
 800be78:	e7a5      	b.n	800bdc6 <_vfiprintf_r+0x11a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	3401      	adds	r4, #1
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	4619      	mov	r1, r3
 800be82:	f04f 0c0a 	mov.w	ip, #10
 800be86:	4620      	mov	r0, r4
 800be88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8c:	3a30      	subs	r2, #48	; 0x30
 800be8e:	2a09      	cmp	r2, #9
 800be90:	d903      	bls.n	800be9a <_vfiprintf_r+0x1ee>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c5      	beq.n	800be22 <_vfiprintf_r+0x176>
 800be96:	9105      	str	r1, [sp, #20]
 800be98:	e7c3      	b.n	800be22 <_vfiprintf_r+0x176>
 800be9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9e:	4604      	mov	r4, r0
 800bea0:	2301      	movs	r3, #1
 800bea2:	e7f0      	b.n	800be86 <_vfiprintf_r+0x1da>
 800bea4:	ab03      	add	r3, sp, #12
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <_vfiprintf_r+0x258>)
 800beac:	a904      	add	r1, sp, #16
 800beae:	4630      	mov	r0, r6
 800beb0:	f7fd fd32 	bl	8009918 <_printf_float>
 800beb4:	4607      	mov	r7, r0
 800beb6:	1c78      	adds	r0, r7, #1
 800beb8:	d1d6      	bne.n	800be68 <_vfiprintf_r+0x1bc>
 800beba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bebc:	07d9      	lsls	r1, r3, #31
 800bebe:	d405      	bmi.n	800becc <_vfiprintf_r+0x220>
 800bec0:	89ab      	ldrh	r3, [r5, #12]
 800bec2:	059a      	lsls	r2, r3, #22
 800bec4:	d402      	bmi.n	800becc <_vfiprintf_r+0x220>
 800bec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec8:	f7ff f9de 	bl	800b288 <__retarget_lock_release_recursive>
 800becc:	89ab      	ldrh	r3, [r5, #12]
 800bece:	065b      	lsls	r3, r3, #25
 800bed0:	f53f af12 	bmi.w	800bcf8 <_vfiprintf_r+0x4c>
 800bed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed6:	e711      	b.n	800bcfc <_vfiprintf_r+0x50>
 800bed8:	ab03      	add	r3, sp, #12
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	462a      	mov	r2, r5
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <_vfiprintf_r+0x258>)
 800bee0:	a904      	add	r1, sp, #16
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7fd ffa4 	bl	8009e30 <_printf_i>
 800bee8:	e7e4      	b.n	800beb4 <_vfiprintf_r+0x208>
 800beea:	bf00      	nop
 800beec:	0800c6a4 	.word	0x0800c6a4
 800bef0:	0800c6c4 	.word	0x0800c6c4
 800bef4:	0800c684 	.word	0x0800c684
 800bef8:	0800c83c 	.word	0x0800c83c
 800befc:	0800c846 	.word	0x0800c846
 800bf00:	08009919 	.word	0x08009919
 800bf04:	0800bc87 	.word	0x0800bc87
 800bf08:	0800c842 	.word	0x0800c842

0800bf0c <_sbrk_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d06      	ldr	r5, [pc, #24]	; (800bf28 <_sbrk_r+0x1c>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	602b      	str	r3, [r5, #0]
 800bf18:	f7f6 fa00 	bl	800231c <_sbrk>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_sbrk_r+0x1a>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_sbrk_r+0x1a>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	200004a0 	.word	0x200004a0

0800bf2c <__sread>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	f000 f8e2 	bl	800c0fc <_read_r>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	bfab      	itete	ge
 800bf3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf3e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf40:	181b      	addge	r3, r3, r0
 800bf42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf46:	bfac      	ite	ge
 800bf48:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf4a:	81a3      	strhlt	r3, [r4, #12]
 800bf4c:	bd10      	pop	{r4, pc}

0800bf4e <__swrite>:
 800bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf52:	461f      	mov	r7, r3
 800bf54:	898b      	ldrh	r3, [r1, #12]
 800bf56:	05db      	lsls	r3, r3, #23
 800bf58:	4605      	mov	r5, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	4616      	mov	r6, r2
 800bf5e:	d505      	bpl.n	800bf6c <__swrite+0x1e>
 800bf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf64:	2302      	movs	r3, #2
 800bf66:	2200      	movs	r2, #0
 800bf68:	f000 f898 	bl	800c09c <_lseek_r>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	f000 b817 	b.w	800bfb4 <_write_r>

0800bf86 <__sseek>:
 800bf86:	b510      	push	{r4, lr}
 800bf88:	460c      	mov	r4, r1
 800bf8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8e:	f000 f885 	bl	800c09c <_lseek_r>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	bf15      	itete	ne
 800bf98:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfa2:	81a3      	strheq	r3, [r4, #12]
 800bfa4:	bf18      	it	ne
 800bfa6:	81a3      	strhne	r3, [r4, #12]
 800bfa8:	bd10      	pop	{r4, pc}

0800bfaa <__sclose>:
 800bfaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfae:	f000 b831 	b.w	800c014 <_close_r>
	...

0800bfb4 <_write_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d07      	ldr	r5, [pc, #28]	; (800bfd4 <_write_r+0x20>)
 800bfb8:	4604      	mov	r4, r0
 800bfba:	4608      	mov	r0, r1
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	602a      	str	r2, [r5, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f7f6 f959 	bl	800227a <_write>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_write_r+0x1e>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_write_r+0x1e>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	200004a0 	.word	0x200004a0

0800bfd8 <__assert_func>:
 800bfd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfda:	4614      	mov	r4, r2
 800bfdc:	461a      	mov	r2, r3
 800bfde:	4b09      	ldr	r3, [pc, #36]	; (800c004 <__assert_func+0x2c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	68d8      	ldr	r0, [r3, #12]
 800bfe6:	b14c      	cbz	r4, 800bffc <__assert_func+0x24>
 800bfe8:	4b07      	ldr	r3, [pc, #28]	; (800c008 <__assert_func+0x30>)
 800bfea:	9100      	str	r1, [sp, #0]
 800bfec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bff0:	4906      	ldr	r1, [pc, #24]	; (800c00c <__assert_func+0x34>)
 800bff2:	462b      	mov	r3, r5
 800bff4:	f000 f81e 	bl	800c034 <fiprintf>
 800bff8:	f000 f89f 	bl	800c13a <abort>
 800bffc:	4b04      	ldr	r3, [pc, #16]	; (800c010 <__assert_func+0x38>)
 800bffe:	461c      	mov	r4, r3
 800c000:	e7f3      	b.n	800bfea <__assert_func+0x12>
 800c002:	bf00      	nop
 800c004:	2000003c 	.word	0x2000003c
 800c008:	0800c84d 	.word	0x0800c84d
 800c00c:	0800c85a 	.word	0x0800c85a
 800c010:	0800c888 	.word	0x0800c888

0800c014 <_close_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d06      	ldr	r5, [pc, #24]	; (800c030 <_close_r+0x1c>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	f7f6 f947 	bl	80022b2 <_close>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_close_r+0x1a>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_close_r+0x1a>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	200004a0 	.word	0x200004a0

0800c034 <fiprintf>:
 800c034:	b40e      	push	{r1, r2, r3}
 800c036:	b503      	push	{r0, r1, lr}
 800c038:	4601      	mov	r1, r0
 800c03a:	ab03      	add	r3, sp, #12
 800c03c:	4805      	ldr	r0, [pc, #20]	; (800c054 <fiprintf+0x20>)
 800c03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c042:	6800      	ldr	r0, [r0, #0]
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	f7ff fe31 	bl	800bcac <_vfiprintf_r>
 800c04a:	b002      	add	sp, #8
 800c04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c050:	b003      	add	sp, #12
 800c052:	4770      	bx	lr
 800c054:	2000003c 	.word	0x2000003c

0800c058 <_fstat_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4d07      	ldr	r5, [pc, #28]	; (800c078 <_fstat_r+0x20>)
 800c05c:	2300      	movs	r3, #0
 800c05e:	4604      	mov	r4, r0
 800c060:	4608      	mov	r0, r1
 800c062:	4611      	mov	r1, r2
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	f7f6 f930 	bl	80022ca <_fstat>
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d102      	bne.n	800c074 <_fstat_r+0x1c>
 800c06e:	682b      	ldr	r3, [r5, #0]
 800c070:	b103      	cbz	r3, 800c074 <_fstat_r+0x1c>
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	bd38      	pop	{r3, r4, r5, pc}
 800c076:	bf00      	nop
 800c078:	200004a0 	.word	0x200004a0

0800c07c <_isatty_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d06      	ldr	r5, [pc, #24]	; (800c098 <_isatty_r+0x1c>)
 800c080:	2300      	movs	r3, #0
 800c082:	4604      	mov	r4, r0
 800c084:	4608      	mov	r0, r1
 800c086:	602b      	str	r3, [r5, #0]
 800c088:	f7f6 f92f 	bl	80022ea <_isatty>
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	d102      	bne.n	800c096 <_isatty_r+0x1a>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	b103      	cbz	r3, 800c096 <_isatty_r+0x1a>
 800c094:	6023      	str	r3, [r4, #0]
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	200004a0 	.word	0x200004a0

0800c09c <_lseek_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_lseek_r+0x20>)
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	602a      	str	r2, [r5, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f7f6 f928 	bl	8002300 <_lseek>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_lseek_r+0x1e>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_lseek_r+0x1e>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	200004a0 	.word	0x200004a0

0800c0c0 <__ascii_mbtowc>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	b901      	cbnz	r1, 800c0c6 <__ascii_mbtowc+0x6>
 800c0c4:	a901      	add	r1, sp, #4
 800c0c6:	b142      	cbz	r2, 800c0da <__ascii_mbtowc+0x1a>
 800c0c8:	b14b      	cbz	r3, 800c0de <__ascii_mbtowc+0x1e>
 800c0ca:	7813      	ldrb	r3, [r2, #0]
 800c0cc:	600b      	str	r3, [r1, #0]
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	1e10      	subs	r0, r2, #0
 800c0d2:	bf18      	it	ne
 800c0d4:	2001      	movne	r0, #1
 800c0d6:	b002      	add	sp, #8
 800c0d8:	4770      	bx	lr
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7fb      	b.n	800c0d6 <__ascii_mbtowc+0x16>
 800c0de:	f06f 0001 	mvn.w	r0, #1
 800c0e2:	e7f8      	b.n	800c0d6 <__ascii_mbtowc+0x16>

0800c0e4 <__malloc_lock>:
 800c0e4:	4801      	ldr	r0, [pc, #4]	; (800c0ec <__malloc_lock+0x8>)
 800c0e6:	f7ff b8ce 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800c0ea:	bf00      	nop
 800c0ec:	20000494 	.word	0x20000494

0800c0f0 <__malloc_unlock>:
 800c0f0:	4801      	ldr	r0, [pc, #4]	; (800c0f8 <__malloc_unlock+0x8>)
 800c0f2:	f7ff b8c9 	b.w	800b288 <__retarget_lock_release_recursive>
 800c0f6:	bf00      	nop
 800c0f8:	20000494 	.word	0x20000494

0800c0fc <_read_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d07      	ldr	r5, [pc, #28]	; (800c11c <_read_r+0x20>)
 800c100:	4604      	mov	r4, r0
 800c102:	4608      	mov	r0, r1
 800c104:	4611      	mov	r1, r2
 800c106:	2200      	movs	r2, #0
 800c108:	602a      	str	r2, [r5, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	f7f6 f898 	bl	8002240 <_read>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_read_r+0x1e>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_read_r+0x1e>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	200004a0 	.word	0x200004a0

0800c120 <__ascii_wctomb>:
 800c120:	b149      	cbz	r1, 800c136 <__ascii_wctomb+0x16>
 800c122:	2aff      	cmp	r2, #255	; 0xff
 800c124:	bf85      	ittet	hi
 800c126:	238a      	movhi	r3, #138	; 0x8a
 800c128:	6003      	strhi	r3, [r0, #0]
 800c12a:	700a      	strbls	r2, [r1, #0]
 800c12c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c130:	bf98      	it	ls
 800c132:	2001      	movls	r0, #1
 800c134:	4770      	bx	lr
 800c136:	4608      	mov	r0, r1
 800c138:	4770      	bx	lr

0800c13a <abort>:
 800c13a:	b508      	push	{r3, lr}
 800c13c:	2006      	movs	r0, #6
 800c13e:	f000 f82b 	bl	800c198 <raise>
 800c142:	2001      	movs	r0, #1
 800c144:	f7f6 f872 	bl	800222c <_exit>

0800c148 <_raise_r>:
 800c148:	291f      	cmp	r1, #31
 800c14a:	b538      	push	{r3, r4, r5, lr}
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	d904      	bls.n	800c15c <_raise_r+0x14>
 800c152:	2316      	movs	r3, #22
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c15e:	b112      	cbz	r2, 800c166 <_raise_r+0x1e>
 800c160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c164:	b94b      	cbnz	r3, 800c17a <_raise_r+0x32>
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f830 	bl	800c1cc <_getpid_r>
 800c16c:	462a      	mov	r2, r5
 800c16e:	4601      	mov	r1, r0
 800c170:	4620      	mov	r0, r4
 800c172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c176:	f000 b817 	b.w	800c1a8 <_kill_r>
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d00a      	beq.n	800c194 <_raise_r+0x4c>
 800c17e:	1c59      	adds	r1, r3, #1
 800c180:	d103      	bne.n	800c18a <_raise_r+0x42>
 800c182:	2316      	movs	r3, #22
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	2001      	movs	r0, #1
 800c188:	e7e7      	b.n	800c15a <_raise_r+0x12>
 800c18a:	2400      	movs	r4, #0
 800c18c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c190:	4628      	mov	r0, r5
 800c192:	4798      	blx	r3
 800c194:	2000      	movs	r0, #0
 800c196:	e7e0      	b.n	800c15a <_raise_r+0x12>

0800c198 <raise>:
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <raise+0xc>)
 800c19a:	4601      	mov	r1, r0
 800c19c:	6818      	ldr	r0, [r3, #0]
 800c19e:	f7ff bfd3 	b.w	800c148 <_raise_r>
 800c1a2:	bf00      	nop
 800c1a4:	2000003c 	.word	0x2000003c

0800c1a8 <_kill_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	; (800c1c8 <_kill_r+0x20>)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	602b      	str	r3, [r5, #0]
 800c1b6:	f7f6 f829 	bl	800220c <_kill>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	d102      	bne.n	800c1c4 <_kill_r+0x1c>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b103      	cbz	r3, 800c1c4 <_kill_r+0x1c>
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	bd38      	pop	{r3, r4, r5, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200004a0 	.word	0x200004a0

0800c1cc <_getpid_r>:
 800c1cc:	f7f6 b816 	b.w	80021fc <_getpid>

0800c1d0 <_init>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr

0800c1dc <_fini>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	bf00      	nop
 800c1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e2:	bc08      	pop	{r3}
 800c1e4:	469e      	mov	lr, r3
 800c1e6:	4770      	bx	lr

0800c1e8 <__run_sweep_veneer>:
 800c1e8:	f85f f000 	ldr.w	pc, [pc]	; 800c1ec <__run_sweep_veneer+0x4>
 800c1ec:	00000751 	.word	0x00000751

0800c1f0 <__set_frequency_hz_veneer>:
 800c1f0:	f85f f000 	ldr.w	pc, [pc]	; 800c1f4 <__set_frequency_hz_veneer+0x4>
 800c1f4:	00000689 	.word	0x00000689

0800c1f8 <__timer_delay_veneer>:
 800c1f8:	f85f f000 	ldr.w	pc, [pc]	; 800c1fc <__timer_delay_veneer+0x4>
 800c1fc:	00000061 	.word	0x00000061

0800c200 <__set_aom_atten_veneer>:
 800c200:	f85f f000 	ldr.w	pc, [pc]	; 800c204 <__set_aom_atten_veneer+0x4>
 800c204:	000000bd 	.word	0x000000bd

0800c208 <__start_pop_veneer>:
 800c208:	f85f f000 	ldr.w	pc, [pc]	; 800c20c <__start_pop_veneer+0x4>
 800c20c:	0000015d 	.word	0x0000015d

0800c210 <__init_synthesiser_veneer>:
 800c210:	f85f f000 	ldr.w	pc, [pc]	; 800c214 <__init_synthesiser_veneer+0x4>
 800c214:	000003a3 	.word	0x000003a3

0800c218 <__stop_pop_veneer>:
 800c218:	f85f f000 	ldr.w	pc, [pc]	; 800c21c <__stop_pop_veneer+0x4>
 800c21c:	0000020d 	.word	0x0000020d
